
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012174  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f1c  08012328  08012328  00022328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014244  08014244  00030344  2**0
                  CONTENTS
  4 .ARM          00000008  08014244  08014244  00024244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801424c  0801424c  00030344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801424c  0801424c  0002424c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014250  08014250  00024250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  08014254  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030344  2**0
                  CONTENTS
 10 .bss          00006ac4  20000344  20000344  00030344  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006e08  20006e08  00030344  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002d3ff  00000000  00000000  000303b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006cbe  00000000  00000000  0005d7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002890  00000000  00000000  00064478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f26  00000000  00000000  00066d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a8bb  00000000  00000000  00068c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030ace  00000000  00000000  000734e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f7925  00000000  00000000  000a3fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bc18  00000000  00000000  0019b8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001a74f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000344 	.word	0x20000344
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801230c 	.word	0x0801230c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000348 	.word	0x20000348
 80001ec:	0801230c 	.word	0x0801230c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ec8:	b089      	sub	sp, #36	; 0x24
 8000eca:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f002 fa70 	bl	80033b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_GYRO_Init();
 8000ed0:	f001 fbb4 	bl	800263c <BSP_GYRO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f8a2 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 fa24 	bl	8001324 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000edc:	f000 f910 	bl	8001100 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ee0:	f000 f94e 	bl	8001180 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000ee4:	f000 f982 	bl	80011ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ee8:	f000 f9ce 	bl	8001288 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000eec:	f001 fc20 	bl	8002730 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000ef0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 fc9d 	bl	8002834 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000efa:	2001      	movs	r0, #1
 8000efc:	f001 fcfe 	bl	80028fc <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000f00:	f001 ff48 	bl	8002d94 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000f04:	483a      	ldr	r0, [pc, #232]	; (8000ff0 <main+0x12c>)
 8000f06:	f001 fd55 	bl	80029b4 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000f0a:	4839      	ldr	r0, [pc, #228]	; (8000ff0 <main+0x12c>)
 8000f0c:	f001 fd1e 	bl	800294c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f001 fd02 	bl	800291c <BSP_LCD_SetTextColor>
    //write text
  int16_t XCir = 160;
 8000f18:	23a0      	movs	r3, #160	; 0xa0
 8000f1a:	81fb      	strh	r3, [r7, #14]
  int16_t YCir = 120;
 8000f1c:	2378      	movs	r3, #120	; 0x78
 8000f1e:	81bb      	strh	r3, [r7, #12]
  int16_t radiusCir = 50;
 8000f20:	2332      	movs	r3, #50	; 0x32
 8000f22:	817b      	strh	r3, [r7, #10]
  BSP_GYRO_GetXYZ(gyroData);
 8000f24:	4833      	ldr	r0, [pc, #204]	; (8000ff4 <main+0x130>)
 8000f26:	f001 fbef 	bl	8002708 <BSP_GYRO_GetXYZ>
  float defaultHeight = gyroData[2];
 8000f2a:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <main+0x130>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	607b      	str	r3, [r7, #4]

  if (defaultHeight <= defaultHeight - 20)
 8000f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f34:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f48:	d802      	bhi.n	8000f50 <main+0x8c>
  {
	  startGame = true;
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <main+0x134>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f50:	f00b f8e8 	bl	800c124 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask1, NULL, &Task01_attributes);
 8000f54:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <main+0x138>)
 8000f56:	2100      	movs	r1, #0
 8000f58:	4829      	ldr	r0, [pc, #164]	; (8001000 <main+0x13c>)
 8000f5a:	f00b f92d 	bl	800c1b8 <osThreadNew>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a28      	ldr	r2, [pc, #160]	; (8001004 <main+0x140>)
 8000f62:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000f64:	4a28      	ldr	r2, [pc, #160]	; (8001008 <main+0x144>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4828      	ldr	r0, [pc, #160]	; (800100c <main+0x148>)
 8000f6a:	f00b f925 	bl	800c1b8 <osThreadNew>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <main+0x14c>)
 8000f72:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f74:	f00b f8fa 	bl	800c16c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_LCD_FillCircle(XCir, YCir, radiusCir);
 8000f78:	89fb      	ldrh	r3, [r7, #14]
 8000f7a:	89b9      	ldrh	r1, [r7, #12]
 8000f7c:	897a      	ldrh	r2, [r7, #10]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fe68 	bl	8002c54 <BSP_LCD_FillCircle>
	  BSP_GYRO_GetXYZ(gyroData);
 8000f84:	481b      	ldr	r0, [pc, #108]	; (8000ff4 <main+0x130>)
 8000f86:	f001 fbbf 	bl	8002708 <BSP_GYRO_GetXYZ>
	  sprintf(gyroPrint, "X: %f \t Y: %f \t Z:%f \n", gyroData[0], gyroData[1], gyroData[2]);
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <main+0x150>)
 8000f8c:	681e      	ldr	r6, [r3, #0]
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <main+0x130>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fae8 	bl	8000568 <__aeabi_f2d>
 8000f98:	4680      	mov	r8, r0
 8000f9a:	4689      	mov	r9, r1
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <main+0x130>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fae1 	bl	8000568 <__aeabi_f2d>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	460d      	mov	r5, r1
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <main+0x130>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fada 	bl	8000568 <__aeabi_f2d>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fbc:	e9cd 4500 	strd	r4, r5, [sp]
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	464b      	mov	r3, r9
 8000fc4:	4914      	ldr	r1, [pc, #80]	; (8001018 <main+0x154>)
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	f00f f842 	bl	8010050 <siprintf>
	  CDC_Transmit_FS((uint8_t*) gyroPrint, strlen(gyroPrint));
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <main+0x150>)
 8000fce:	681c      	ldr	r4, [r3, #0]
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <main+0x150>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f95b 	bl	8000290 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f00d feb1 	bl	800ed48 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8000fe6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fea:	f002 fa23 	bl	8003434 <HAL_Delay>
	  BSP_LCD_FillCircle(XCir, YCir, radiusCir);
 8000fee:	e7c3      	b.n	8000f78 <main+0xb4>
 8000ff0:	ff0000ff 	.word	0xff0000ff
 8000ff4:	200004a4 	.word	0x200004a4
 8000ff8:	200004b4 	.word	0x200004b4
 8000ffc:	080123b0 	.word	0x080123b0
 8001000:	080013e5 	.word	0x080013e5
 8001004:	2000049c 	.word	0x2000049c
 8001008:	080123d4 	.word	0x080123d4
 800100c:	080013f9 	.word	0x080013f9
 8001010:	200004a0 	.word	0x200004a0
 8001014:	200004b0 	.word	0x200004b0
 8001018:	08012338 	.word	0x08012338

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	2230      	movs	r2, #48	; 0x30
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f00f f873 	bl	8010116 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <SystemClock_Config+0xdc>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	4a2b      	ldr	r2, [pc, #172]	; (80010f8 <SystemClock_Config+0xdc>)
 800104a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	; 0x40
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <SystemClock_Config+0xdc>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <SystemClock_Config+0xe0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a25      	ldr	r2, [pc, #148]	; (80010fc <SystemClock_Config+0xe0>)
 8001066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <SystemClock_Config+0xe0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001078:	2301      	movs	r3, #1
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	2302      	movs	r3, #2
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800108c:	2308      	movs	r3, #8
 800108e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001090:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001094:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001096:	2302      	movs	r3, #2
 8001098:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800109a:	2308      	movs	r3, #8
 800109c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	4618      	mov	r0, r3
 80010a4:	f005 f958 	bl	8006358 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010ae:	f000 f9bd 	bl	800142c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010b2:	f005 f901 	bl	80062b8 <HAL_PWREx_EnableOverDrive>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010bc:	f000 f9b6 	bl	800142c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	230f      	movs	r3, #15
 80010c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c4:	2302      	movs	r3, #2
 80010c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2105      	movs	r1, #5
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 fbb2 	bl	8006848 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010ea:	f000 f99f 	bl	800142c <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3750      	adds	r7, #80	; 0x50
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <MX_I2C1_Init+0x74>)
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <MX_I2C1_Init+0x78>)
 8001108:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_I2C1_Init+0x74>)
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <MX_I2C1_Init+0x7c>)
 800110e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_I2C1_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_I2C1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_I2C1_Init+0x74>)
 800111e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001122:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_I2C1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_I2C1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_I2C1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_I2C1_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <MX_I2C1_Init+0x74>)
 800113e:	f003 f9a5 	bl	800448c <HAL_I2C_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001148:	f000 f970 	bl	800142c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800114c:	2100      	movs	r1, #0
 800114e:	4809      	ldr	r0, [pc, #36]	; (8001174 <MX_I2C1_Init+0x74>)
 8001150:	f003 fae0 	bl	8004714 <HAL_I2CEx_ConfigAnalogFilter>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800115a:	f000 f967 	bl	800142c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800115e:	2100      	movs	r1, #0
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_I2C1_Init+0x74>)
 8001162:	f003 fb13 	bl	800478c <HAL_I2CEx_ConfigDigitalFilter>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800116c:	f000 f95e 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000360 	.word	0x20000360
 8001178:	40005400 	.word	0x40005400
 800117c:	000186a0 	.word	0x000186a0

08001180 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_SPI1_Init+0x64>)
 8001186:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <MX_SPI1_Init+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_SPI1_Init+0x64>)
 800118c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001190:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_SPI1_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_SPI1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011cc:	220a      	movs	r2, #10
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_SPI1_Init+0x64>)
 80011d2:	f005 ffd2 	bl	800717a <HAL_SPI_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011dc:	f000 f926 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200003b4 	.word	0x200003b4
 80011e8:	40013000 	.word	0x40013000

080011ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_TIM2_Init+0x98>)
 800120a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_TIM2_Init+0x98>)
 8001212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001216:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_TIM2_Init+0x98>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <MX_TIM2_Init+0x98>)
 8001220:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001224:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_TIM2_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_TIM2_Init+0x98>)
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001232:	4814      	ldr	r0, [pc, #80]	; (8001284 <MX_TIM2_Init+0x98>)
 8001234:	f006 fd80 	bl	8007d38 <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800123e:	f000 f8f5 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4619      	mov	r1, r3
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_TIM2_Init+0x98>)
 8001250:	f006 ff3a 	bl	80080c8 <HAL_TIM_ConfigClockSource>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800125a:	f000 f8e7 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_TIM2_Init+0x98>)
 800126c:	f007 f956 	bl	800851c <HAL_TIMEx_MasterConfigSynchronization>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001276:	f000 f8d9 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000040c 	.word	0x2000040c

08001288 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <MX_TIM3_Init+0x94>)
 80012a6:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <MX_TIM3_Init+0x98>)
 80012a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_TIM3_Init+0x94>)
 80012ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_TIM3_Init+0x94>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_TIM3_Init+0x94>)
 80012ba:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80012be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_TIM3_Init+0x94>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_TIM3_Init+0x94>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012cc:	4813      	ldr	r0, [pc, #76]	; (800131c <MX_TIM3_Init+0x94>)
 80012ce:	f006 fd33 	bl	8007d38 <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012d8:	f000 f8a8 	bl	800142c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_TIM3_Init+0x94>)
 80012ea:	f006 feed 	bl	80080c8 <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012f4:	f000 f89a 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_TIM3_Init+0x94>)
 8001306:	f007 f909 	bl	800851c <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 f88c 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000454 	.word	0x20000454
 8001320:	40000400 	.word	0x40000400

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <MX_GPIO_Init+0xb8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a26      	ldr	r2, [pc, #152]	; (80013dc <MX_GPIO_Init+0xb8>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <MX_GPIO_Init+0xb8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <MX_GPIO_Init+0xb8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <MX_GPIO_Init+0xb8>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_GPIO_Init+0xb8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_GPIO_Init+0xb8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a18      	ldr	r2, [pc, #96]	; (80013dc <MX_GPIO_Init+0xb8>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_GPIO_Init+0xb8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_GPIO_Init+0xb8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a11      	ldr	r2, [pc, #68]	; (80013dc <MX_GPIO_Init+0xb8>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_GPIO_Init+0xb8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <MX_GPIO_Init+0xbc>)
 80013b2:	f003 f851 	bl	8004458 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_GPIO_Init+0xbc>)
 80013d0:	f002 fd8a 	bl	8003ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020c00 	.word	0x40020c00

080013e4 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80013ec:	f00d fbee 	bl	800ebcc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f00a ff73 	bl	800c2dc <osDelay>
 80013f6:	e7fb      	b.n	80013f0 <StartTask1+0xc>

080013f8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001400:	2001      	movs	r0, #1
 8001402:	f00a ff6b 	bl	800c2dc <osDelay>
 8001406:	e7fb      	b.n	8001400 <StartTask02+0x8>

08001408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800141a:	f001 ffeb 	bl	80033f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40001000 	.word	0x40001000

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_MspInit+0x54>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_MspInit+0x54>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_MspInit+0x54>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_MspInit+0x54>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_MspInit+0x54>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_MspInit+0x54>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	210f      	movs	r1, #15
 800147a:	f06f 0001 	mvn.w	r0, #1
 800147e:	f002 f8b5 	bl	80035ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_I2C_MspInit+0x84>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12b      	bne.n	800150a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ce:	23c0      	movs	r3, #192	; 0xc0
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	2312      	movs	r3, #18
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014de:	2304      	movs	r3, #4
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <HAL_I2C_MspInit+0x8c>)
 80014ea:	f002 fcfd 	bl	8003ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_I2C_MspInit+0x88>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40005400 	.word	0x40005400
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400

08001520 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_SPI_MspInit+0x84>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d12b      	bne.n	800159a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 800154c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_SPI_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800157a:	23e0      	movs	r3, #224	; 0xe0
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158a:	2305      	movs	r3, #5
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <HAL_SPI_MspInit+0x8c>)
 8001596:	f002 fca7 	bl	8003ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40013000 	.word	0x40013000
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000

080015b0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_SPI_MspDeInit+0x30>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d109      	bne.n	80015d6 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_SPI_MspDeInit+0x34>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_SPI_MspDeInit+0x34>)
 80015c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015cc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80015ce:	21e0      	movs	r1, #224	; 0xe0
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <HAL_SPI_MspDeInit+0x38>)
 80015d2:	f002 fe35 	bl	8004240 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40013000 	.word	0x40013000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020000 	.word	0x40020000

080015ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015fc:	d116      	bne.n	800162c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_TIM_Base_MspInit+0x80>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_TIM_Base_MspInit+0x80>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_TIM_Base_MspInit+0x80>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2105      	movs	r1, #5
 800161e:	201c      	movs	r0, #28
 8001620:	f001 ffe4 	bl	80035ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001624:	201c      	movs	r0, #28
 8001626:	f001 fffd 	bl	8003624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800162a:	e01a      	b.n	8001662 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_TIM_Base_MspInit+0x84>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d115      	bne.n	8001662 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_TIM_Base_MspInit+0x80>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_TIM_Base_MspInit+0x80>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_TIM_Base_MspInit+0x80>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2105      	movs	r1, #5
 8001656:	201d      	movs	r0, #29
 8001658:	f001 ffc8 	bl	80035ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800165c:	201d      	movs	r0, #29
 800165e:	f001 ffe1 	bl	8003624 <HAL_NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40000400 	.word	0x40000400

08001674 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	; 0x38
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	4b33      	ldr	r3, [pc, #204]	; (8001758 <HAL_InitTick+0xe4>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	4a32      	ldr	r2, [pc, #200]	; (8001758 <HAL_InitTick+0xe4>)
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	6413      	str	r3, [r2, #64]	; 0x40
 8001694:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_InitTick+0xe4>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016a0:	f107 0210 	add.w	r2, r7, #16
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 fad8 	bl	8006c60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d103      	bne.n	80016c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ba:	f005 fabd 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 80016be:	6378      	str	r0, [r7, #52]	; 0x34
 80016c0:	e004      	b.n	80016cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016c2:	f005 fab9 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 80016c6:	4603      	mov	r3, r0
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ce:	4a23      	ldr	r2, [pc, #140]	; (800175c <HAL_InitTick+0xe8>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	0c9b      	lsrs	r3, r3, #18
 80016d6:	3b01      	subs	r3, #1
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_InitTick+0xec>)
 80016dc:	4a21      	ldr	r2, [pc, #132]	; (8001764 <HAL_InitTick+0xf0>)
 80016de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <HAL_InitTick+0xec>)
 80016e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_InitTick+0xec>)
 80016ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <HAL_InitTick+0xec>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_InitTick+0xec>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_InitTick+0xec>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001700:	4817      	ldr	r0, [pc, #92]	; (8001760 <HAL_InitTick+0xec>)
 8001702:	f006 fb19 	bl	8007d38 <HAL_TIM_Base_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800170c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001710:	2b00      	cmp	r3, #0
 8001712:	d11b      	bne.n	800174c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001714:	4812      	ldr	r0, [pc, #72]	; (8001760 <HAL_InitTick+0xec>)
 8001716:	f006 fb5f 	bl	8007dd8 <HAL_TIM_Base_Start_IT>
 800171a:	4603      	mov	r3, r0
 800171c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001720:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001724:	2b00      	cmp	r3, #0
 8001726:	d111      	bne.n	800174c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001728:	2036      	movs	r0, #54	; 0x36
 800172a:	f001 ff7b 	bl	8003624 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d808      	bhi.n	8001746 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	2036      	movs	r0, #54	; 0x36
 800173a:	f001 ff57 	bl	80035ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_InitTick+0xf4>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e002      	b.n	800174c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800174c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001750:	4618      	mov	r0, r3
 8001752:	3738      	adds	r7, #56	; 0x38
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	431bde83 	.word	0x431bde83
 8001760:	200004b8 	.word	0x200004b8
 8001764:	40001000 	.word	0x40001000
 8001768:	20000080 	.word	0x20000080

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <NMI_Handler+0x4>

08001772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <MemManage_Handler+0x4>

0800177e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <UsageFault_Handler+0x4>

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <TIM2_IRQHandler+0x10>)
 800179e:	f006 fb8b 	bl	8007eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000040c 	.word	0x2000040c

080017ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <TIM3_IRQHandler+0x10>)
 80017b2:	f006 fb81 	bl	8007eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000454 	.word	0x20000454

080017c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM6_DAC_IRQHandler+0x10>)
 80017c6:	f006 fb77 	bl	8007eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200004b8 	.word	0x200004b8

080017d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <OTG_FS_IRQHandler+0x10>)
 80017da:	f003 fc40 	bl	800505e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20006590 	.word	0x20006590

080017e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return 1;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_kill>:

int _kill(int pid, int sig)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001802:	f00e fcdb 	bl	80101bc <__errno>
 8001806:	4603      	mov	r3, r0
 8001808:	2216      	movs	r2, #22
 800180a:	601a      	str	r2, [r3, #0]
  return -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_exit>:

void _exit (int status)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffe7 	bl	80017f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800182a:	e7fe      	b.n	800182a <_exit+0x12>

0800182c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e00a      	b.n	8001854 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800183e:	f3af 8000 	nop.w
 8001842:	4601      	mov	r1, r0
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	b2ca      	uxtb	r2, r1
 800184c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf0      	blt.n	800183e <_read+0x12>
  }

  return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e009      	b.n	800188c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	60ba      	str	r2, [r7, #8]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	dbf1      	blt.n	8001878 <_write+0x12>
  }
  return len;
 8001894:	687b      	ldr	r3, [r7, #4]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_close>:

int _close(int file)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c6:	605a      	str	r2, [r3, #4]
  return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_isatty>:

int _isatty(int file)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f00e fc40 	bl	80101bc <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20030000 	.word	0x20030000
 8001968:	00000400 	.word	0x00000400
 800196c:	20000500 	.word	0x20000500
 8001970:	20006e08 	.word	0x20006e08

08001974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199e:	490e      	ldr	r1, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b4:	4c0b      	ldr	r4, [pc, #44]	; (80019e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019c2:	f7ff ffd7 	bl	8001974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c6:	f00e fbff 	bl	80101c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ca:	f7ff fa7b 	bl	8000ec4 <main>
  bx  lr    
 80019ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 80019dc:	08014254 	.word	0x08014254
  ldr r2, =_sbss
 80019e0:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 80019e4:	20006e08 	.word	0x20006e08

080019e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC_IRQHandler>

080019ea <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80019ee:	f000 fc73 	bl	80022d8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80019f2:	20ca      	movs	r0, #202	; 0xca
 80019f4:	f000 f95d 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80019f8:	20c3      	movs	r0, #195	; 0xc3
 80019fa:	f000 f967 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80019fe:	2008      	movs	r0, #8
 8001a00:	f000 f964 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001a04:	2050      	movs	r0, #80	; 0x50
 8001a06:	f000 f961 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001a0a:	20cf      	movs	r0, #207	; 0xcf
 8001a0c:	f000 f951 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f000 f95b 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001a16:	20c1      	movs	r0, #193	; 0xc1
 8001a18:	f000 f958 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001a1c:	2030      	movs	r0, #48	; 0x30
 8001a1e:	f000 f955 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001a22:	20ed      	movs	r0, #237	; 0xed
 8001a24:	f000 f945 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001a28:	2064      	movs	r0, #100	; 0x64
 8001a2a:	f000 f94f 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001a2e:	2003      	movs	r0, #3
 8001a30:	f000 f94c 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001a34:	2012      	movs	r0, #18
 8001a36:	f000 f949 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001a3a:	2081      	movs	r0, #129	; 0x81
 8001a3c:	f000 f946 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001a40:	20e8      	movs	r0, #232	; 0xe8
 8001a42:	f000 f936 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001a46:	2085      	movs	r0, #133	; 0x85
 8001a48:	f000 f940 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 f93d 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001a52:	2078      	movs	r0, #120	; 0x78
 8001a54:	f000 f93a 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001a58:	20cb      	movs	r0, #203	; 0xcb
 8001a5a:	f000 f92a 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001a5e:	2039      	movs	r0, #57	; 0x39
 8001a60:	f000 f934 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001a64:	202c      	movs	r0, #44	; 0x2c
 8001a66:	f000 f931 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f92e 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001a70:	2034      	movs	r0, #52	; 0x34
 8001a72:	f000 f92b 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001a76:	2002      	movs	r0, #2
 8001a78:	f000 f928 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001a7c:	20f7      	movs	r0, #247	; 0xf7
 8001a7e:	f000 f918 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001a82:	2020      	movs	r0, #32
 8001a84:	f000 f922 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001a88:	20ea      	movs	r0, #234	; 0xea
 8001a8a:	f000 f912 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f91c 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 f919 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001a9a:	20b1      	movs	r0, #177	; 0xb1
 8001a9c:	f000 f909 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 f913 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001aa6:	201b      	movs	r0, #27
 8001aa8:	f000 f910 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001aac:	20b6      	movs	r0, #182	; 0xb6
 8001aae:	f000 f900 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001ab2:	200a      	movs	r0, #10
 8001ab4:	f000 f90a 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001ab8:	20a2      	movs	r0, #162	; 0xa2
 8001aba:	f000 f907 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001abe:	20c0      	movs	r0, #192	; 0xc0
 8001ac0:	f000 f8f7 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ac4:	2010      	movs	r0, #16
 8001ac6:	f000 f901 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001aca:	20c1      	movs	r0, #193	; 0xc1
 8001acc:	f000 f8f1 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ad0:	2010      	movs	r0, #16
 8001ad2:	f000 f8fb 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001ad6:	20c5      	movs	r0, #197	; 0xc5
 8001ad8:	f000 f8eb 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001adc:	2045      	movs	r0, #69	; 0x45
 8001ade:	f000 f8f5 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001ae2:	2015      	movs	r0, #21
 8001ae4:	f000 f8f2 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001ae8:	20c7      	movs	r0, #199	; 0xc7
 8001aea:	f000 f8e2 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001aee:	2090      	movs	r0, #144	; 0x90
 8001af0:	f000 f8ec 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001af4:	2036      	movs	r0, #54	; 0x36
 8001af6:	f000 f8dc 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001afa:	20c8      	movs	r0, #200	; 0xc8
 8001afc:	f000 f8e6 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001b00:	20f2      	movs	r0, #242	; 0xf2
 8001b02:	f000 f8d6 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 f8e0 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001b0c:	20b0      	movs	r0, #176	; 0xb0
 8001b0e:	f000 f8d0 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001b12:	20c2      	movs	r0, #194	; 0xc2
 8001b14:	f000 f8da 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001b18:	20b6      	movs	r0, #182	; 0xb6
 8001b1a:	f000 f8ca 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001b1e:	200a      	movs	r0, #10
 8001b20:	f000 f8d4 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001b24:	20a7      	movs	r0, #167	; 0xa7
 8001b26:	f000 f8d1 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001b2a:	2027      	movs	r0, #39	; 0x27
 8001b2c:	f000 f8ce 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b30:	2004      	movs	r0, #4
 8001b32:	f000 f8cb 	bl	8001ccc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001b36:	202a      	movs	r0, #42	; 0x2a
 8001b38:	f000 f8bb 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f000 f8c5 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 f8c2 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f000 f8bf 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001b4e:	20ef      	movs	r0, #239	; 0xef
 8001b50:	f000 f8bc 	bl	8001ccc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001b54:	202b      	movs	r0, #43	; 0x2b
 8001b56:	f000 f8ac 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f8b6 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 f8b3 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f000 f8b0 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001b6c:	203f      	movs	r0, #63	; 0x3f
 8001b6e:	f000 f8ad 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001b72:	20f6      	movs	r0, #246	; 0xf6
 8001b74:	f000 f89d 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f000 f8a7 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f8a4 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001b84:	2006      	movs	r0, #6
 8001b86:	f000 f8a1 	bl	8001ccc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001b8a:	202c      	movs	r0, #44	; 0x2c
 8001b8c:	f000 f891 	bl	8001cb2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001b90:	20c8      	movs	r0, #200	; 0xc8
 8001b92:	f000 fc8f 	bl	80024b4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001b96:	2026      	movs	r0, #38	; 0x26
 8001b98:	f000 f88b 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f000 f895 	bl	8001ccc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001ba2:	20e0      	movs	r0, #224	; 0xe0
 8001ba4:	f000 f885 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001ba8:	200f      	movs	r0, #15
 8001baa:	f000 f88f 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001bae:	2029      	movs	r0, #41	; 0x29
 8001bb0:	f000 f88c 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001bb4:	2024      	movs	r0, #36	; 0x24
 8001bb6:	f000 f889 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001bba:	200c      	movs	r0, #12
 8001bbc:	f000 f886 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001bc0:	200e      	movs	r0, #14
 8001bc2:	f000 f883 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001bc6:	2009      	movs	r0, #9
 8001bc8:	f000 f880 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001bcc:	204e      	movs	r0, #78	; 0x4e
 8001bce:	f000 f87d 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001bd2:	2078      	movs	r0, #120	; 0x78
 8001bd4:	f000 f87a 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001bd8:	203c      	movs	r0, #60	; 0x3c
 8001bda:	f000 f877 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001bde:	2009      	movs	r0, #9
 8001be0:	f000 f874 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001be4:	2013      	movs	r0, #19
 8001be6:	f000 f871 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001bea:	2005      	movs	r0, #5
 8001bec:	f000 f86e 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001bf0:	2017      	movs	r0, #23
 8001bf2:	f000 f86b 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001bf6:	2011      	movs	r0, #17
 8001bf8:	f000 f868 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f000 f865 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001c02:	20e1      	movs	r0, #225	; 0xe1
 8001c04:	f000 f855 	bl	8001cb2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f000 f85f 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001c0e:	2016      	movs	r0, #22
 8001c10:	f000 f85c 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001c14:	201b      	movs	r0, #27
 8001c16:	f000 f859 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001c1a:	2004      	movs	r0, #4
 8001c1c:	f000 f856 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001c20:	2011      	movs	r0, #17
 8001c22:	f000 f853 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001c26:	2007      	movs	r0, #7
 8001c28:	f000 f850 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001c2c:	2031      	movs	r0, #49	; 0x31
 8001c2e:	f000 f84d 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001c32:	2033      	movs	r0, #51	; 0x33
 8001c34:	f000 f84a 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001c38:	2042      	movs	r0, #66	; 0x42
 8001c3a:	f000 f847 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001c3e:	2005      	movs	r0, #5
 8001c40:	f000 f844 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001c44:	200c      	movs	r0, #12
 8001c46:	f000 f841 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001c4a:	200a      	movs	r0, #10
 8001c4c:	f000 f83e 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001c50:	2028      	movs	r0, #40	; 0x28
 8001c52:	f000 f83b 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001c56:	202f      	movs	r0, #47	; 0x2f
 8001c58:	f000 f838 	bl	8001ccc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001c5c:	200f      	movs	r0, #15
 8001c5e:	f000 f835 	bl	8001ccc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001c62:	2011      	movs	r0, #17
 8001c64:	f000 f825 	bl	8001cb2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001c68:	20c8      	movs	r0, #200	; 0xc8
 8001c6a:	f000 fc23 	bl	80024b4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c6e:	2029      	movs	r0, #41	; 0x29
 8001c70:	f000 f81f 	bl	8001cb2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001c74:	202c      	movs	r0, #44	; 0x2c
 8001c76:	f000 f81c 	bl	8001cb2 <ili9341_WriteReg>
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c82:	f000 fb29 	bl	80022d8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001c86:	2103      	movs	r1, #3
 8001c88:	20d3      	movs	r0, #211	; 0xd3
 8001c8a:	f000 f82c 	bl	8001ce6 <ili9341_ReadData>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b29b      	uxth	r3, r3
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c9a:	2029      	movs	r0, #41	; 0x29
 8001c9c:	f000 f809 	bl	8001cb2 <ili9341_WriteReg>
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001ca8:	2028      	movs	r0, #40	; 0x28
 8001caa:	f000 f802 	bl	8001cb2 <ili9341_WriteReg>
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fba4 	bl	800240c <LCD_IO_WriteReg>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fb75 	bl	80023c8 <LCD_IO_WriteData>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	460a      	mov	r2, r1
 8001cf0:	80fb      	strh	r3, [r7, #6]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001cf6:	797a      	ldrb	r2, [r7, #5]
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fba7 	bl	8002450 <LCD_IO_ReadData>
 8001d02:	4603      	mov	r3, r0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001d10:	23f0      	movs	r3, #240	; 0xf0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001d20:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001d3c:	f000 fbc6 	bl	80024cc <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001d46:	f107 030f 	add.w	r3, r7, #15
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fc08 	bl	8002564 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001d5e:	f107 030f 	add.w	r3, r7, #15
 8001d62:	2201      	movs	r2, #1
 8001d64:	2123      	movs	r1, #35	; 0x23
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fbfc 	bl	8002564 <GYRO_IO_Write>
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001d88:	f000 fba0 	bl	80024cc <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001d8c:	1dfb      	adds	r3, r7, #7
 8001d8e:	2201      	movs	r2, #1
 8001d90:	210f      	movs	r1, #15
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fc18 	bl	80025c8 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001d98:	79fb      	ldrb	r3, [r7, #7]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	2201      	movs	r2, #1
 8001dac:	2124      	movs	r1, #36	; 0x24
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fc0a 	bl	80025c8 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001dbe:	1dfb      	adds	r3, r7, #7
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2124      	movs	r1, #36	; 0x24
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fbcd 	bl	8002564 <GYRO_IO_Write>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001de6:	f107 030f 	add.w	r3, r7, #15
 8001dea:	2201      	movs	r2, #1
 8001dec:	2120      	movs	r1, #32
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fbb8 	bl	8002564 <GYRO_IO_Write>
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001e0e:	f107 030f 	add.w	r3, r7, #15
 8001e12:	2201      	movs	r2, #1
 8001e14:	2130      	movs	r1, #48	; 0x30
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fbd6 	bl	80025c8 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001e1c:	f107 030e 	add.w	r3, r7, #14
 8001e20:	2201      	movs	r2, #1
 8001e22:	2122      	movs	r1, #34	; 0x22
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fbcf 	bl	80025c8 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	121b      	asrs	r3, r3, #8
 8001e3a:	b25a      	sxtb	r2, r3
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	b25b      	sxtb	r3, r3
 8001e40:	4313      	orrs	r3, r2
 8001e42:	b25b      	sxtb	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	f023 0320 	bic.w	r3, r3, #32
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	7bbb      	ldrb	r3, [r7, #14]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001e5e:	f107 030f 	add.w	r3, r7, #15
 8001e62:	2201      	movs	r2, #1
 8001e64:	2130      	movs	r1, #48	; 0x30
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fb7c 	bl	8002564 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001e6c:	f107 030e 	add.w	r3, r7, #14
 8001e70:	2201      	movs	r2, #1
 8001e72:	2122      	movs	r1, #34	; 0x22
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fb75 	bl	8002564 <GYRO_IO_Write>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001e8c:	f107 030f 	add.w	r3, r7, #15
 8001e90:	2201      	movs	r2, #1
 8001e92:	2122      	movs	r1, #34	; 0x22
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fb97 	bl	80025c8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10a      	bne.n	8001eb6 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	e00c      	b.n	8001ed0 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d109      	bne.n	8001ed0 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	f023 0308 	bic.w	r3, r3, #8
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ed0:	f107 030f 	add.w	r3, r7, #15
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	2122      	movs	r1, #34	; 0x22
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fb43 	bl	8002564 <GYRO_IO_Write>
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ef0:	f107 030f 	add.w	r3, r7, #15
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2122      	movs	r1, #34	; 0x22
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fb65 	bl	80025c8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e009      	b.n	8001f28 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d106      	bne.n	8001f28 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	f023 0308 	bic.w	r3, r3, #8
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001f28:	f107 030f 	add.w	r3, r7, #15
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2122      	movs	r1, #34	; 0x22
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fb17 	bl	8002564 <GYRO_IO_Write>
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001f48:	f107 030f 	add.w	r3, r7, #15
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2121      	movs	r1, #33	; 0x21
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fb39 	bl	80025c8 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001f6a:	f107 030f 	add.w	r3, r7, #15
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2121      	movs	r1, #33	; 0x21
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 faf6 	bl	8002564 <GYRO_IO_Write>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001f8a:	f107 030f 	add.w	r3, r7, #15
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2124      	movs	r1, #36	; 0x24
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fb18 	bl	80025c8 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	f023 0310 	bic.w	r3, r3, #16
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001fac:	f107 030f 	add.w	r3, r7, #15
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2124      	movs	r1, #36	; 0x24
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fad5 	bl	8002564 <GYRO_IO_Write>
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001fec:	f107 030f 	add.w	r3, r7, #15
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2123      	movs	r1, #35	; 0x23
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fae7 	bl	80025c8 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001ffa:	f107 0318 	add.w	r3, r7, #24
 8001ffe:	2206      	movs	r2, #6
 8002000:	2128      	movs	r1, #40	; 0x28
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fae0 	bl	80025c8 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d123      	bne.n	800205a <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	e01c      	b.n	8002052 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	3301      	adds	r3, #1
 800201e:	3328      	adds	r3, #40	; 0x28
 8002020:	443b      	add	r3, r7
 8002022:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002026:	b29b      	uxth	r3, r3
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b29a      	uxth	r2, r3
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	3328      	adds	r3, #40	; 0x28
 8002032:	443b      	add	r3, r7
 8002034:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002038:	b29b      	uxth	r3, r3
 800203a:	4413      	add	r3, r2
 800203c:	b29b      	uxth	r3, r3
 800203e:	b21a      	sxth	r2, r3
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	3328      	adds	r3, #40	; 0x28
 8002046:	443b      	add	r3, r7
 8002048:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	3301      	adds	r3, #1
 8002050:	623b      	str	r3, [r7, #32]
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	2b02      	cmp	r3, #2
 8002056:	dddf      	ble.n	8002018 <L3GD20_ReadXYZAngRate+0x54>
 8002058:	e022      	b.n	80020a0 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
 800205e:	e01c      	b.n	800209a <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	3328      	adds	r3, #40	; 0x28
 8002066:	443b      	add	r3, r7
 8002068:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800206c:	b29b      	uxth	r3, r3
 800206e:	021b      	lsls	r3, r3, #8
 8002070:	b29a      	uxth	r2, r3
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	3301      	adds	r3, #1
 8002078:	3328      	adds	r3, #40	; 0x28
 800207a:	443b      	add	r3, r7
 800207c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002080:	b29b      	uxth	r3, r3
 8002082:	4413      	add	r3, r2
 8002084:	b29b      	uxth	r3, r3
 8002086:	b21a      	sxth	r2, r3
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	3328      	adds	r3, #40	; 0x28
 800208e:	443b      	add	r3, r7
 8002090:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	3301      	adds	r3, #1
 8002098:	623b      	str	r3, [r7, #32]
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	2b02      	cmp	r3, #2
 800209e:	dddf      	ble.n	8002060 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d00c      	beq.n	80020c4 <L3GD20_ReadXYZAngRate+0x100>
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	dc0d      	bgt.n	80020ca <L3GD20_ReadXYZAngRate+0x106>
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <L3GD20_ReadXYZAngRate+0xf4>
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d003      	beq.n	80020be <L3GD20_ReadXYZAngRate+0xfa>
 80020b6:	e008      	b.n	80020ca <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <L3GD20_ReadXYZAngRate+0x14c>)
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80020bc:	e005      	b.n	80020ca <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <L3GD20_ReadXYZAngRate+0x150>)
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80020c2:	e002      	b.n	80020ca <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <L3GD20_ReadXYZAngRate+0x154>)
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80020c8:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
 80020ce:	e016      	b.n	80020fe <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	3328      	adds	r3, #40	; 0x28
 80020d6:	443b      	add	r3, r7
 80020d8:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f4:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	3301      	adds	r3, #1
 80020fc:	623b      	str	r3, [r7, #32]
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	2b02      	cmp	r3, #2
 8002102:	dde5      	ble.n	80020d0 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	; 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	410c0000 	.word	0x410c0000
 8002114:	418c0000 	.word	0x418c0000
 8002118:	428c0000 	.word	0x428c0000

0800211c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002120:	4819      	ldr	r0, [pc, #100]	; (8002188 <SPIx_Init+0x6c>)
 8002122:	f005 fcca 	bl	8007aba <HAL_SPI_GetState>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d12b      	bne.n	8002184 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <SPIx_Init+0x6c>)
 800212e:	4a17      	ldr	r2, [pc, #92]	; (800218c <SPIx_Init+0x70>)
 8002130:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <SPIx_Init+0x6c>)
 8002134:	2218      	movs	r2, #24
 8002136:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <SPIx_Init+0x6c>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <SPIx_Init+0x6c>)
 8002140:	2200      	movs	r2, #0
 8002142:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <SPIx_Init+0x6c>)
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <SPIx_Init+0x6c>)
 800214c:	2200      	movs	r2, #0
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002150:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <SPIx_Init+0x6c>)
 8002152:	2207      	movs	r2, #7
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <SPIx_Init+0x6c>)
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <SPIx_Init+0x6c>)
 800215e:	2200      	movs	r2, #0
 8002160:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <SPIx_Init+0x6c>)
 8002164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002168:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <SPIx_Init+0x6c>)
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <SPIx_Init+0x6c>)
 8002172:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002176:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <SPIx_Init+0x6c>)
 800217a:	f000 f873 	bl	8002264 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800217e:	4802      	ldr	r0, [pc, #8]	; (8002188 <SPIx_Init+0x6c>)
 8002180:	f004 fffb 	bl	800717a <HAL_SPI_Init>
  } 
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000504 	.word	0x20000504
 800218c:	40015000 	.word	0x40015000

08002190 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <SPIx_Read+0x38>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f107 0108 	add.w	r1, r7, #8
 80021aa:	4808      	ldr	r0, [pc, #32]	; (80021cc <SPIx_Read+0x3c>)
 80021ac:	f005 f9d2 	bl	8007554 <HAL_SPI_Receive>
 80021b0:	4603      	mov	r3, r0
 80021b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80021ba:	f000 f847 	bl	800224c <SPIx_Error>
  }
  
  return readvalue;
 80021be:	68bb      	ldr	r3, [r7, #8]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000070 	.word	0x20000070
 80021cc:	20000504 	.word	0x20000504

080021d0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <SPIx_Write+0x34>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	1db9      	adds	r1, r7, #6
 80021e4:	2201      	movs	r2, #1
 80021e6:	4808      	ldr	r0, [pc, #32]	; (8002208 <SPIx_Write+0x38>)
 80021e8:	f005 f878 	bl	80072dc <HAL_SPI_Transmit>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80021f6:	f000 f829 	bl	800224c <SPIx_Error>
  }
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000070 	.word	0x20000070
 8002208:	20000504 	.word	0x20000504

0800220c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <SPIx_WriteRead+0x38>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f107 020f 	add.w	r2, r7, #15
 8002222:	1df9      	adds	r1, r7, #7
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2301      	movs	r3, #1
 8002228:	4807      	ldr	r0, [pc, #28]	; (8002248 <SPIx_WriteRead+0x3c>)
 800222a:	f005 faa4 	bl	8007776 <HAL_SPI_TransmitReceive>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002234:	f000 f80a 	bl	800224c <SPIx_Error>
  }
  
  return receivedbyte;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000070 	.word	0x20000070
 8002248:	20000504 	.word	0x20000504

0800224c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <SPIx_Error+0x14>)
 8002252:	f005 f81b 	bl	800728c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002256:	f7ff ff61 	bl	800211c <SPIx_Init>
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000504 	.word	0x20000504

08002264 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <SPIx_MspInit+0x6c>)
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <SPIx_MspInit+0x6c>)
 8002276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227a:	6453      	str	r3, [r2, #68]	; 0x44
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <SPIx_MspInit+0x6c>)
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <SPIx_MspInit+0x6c>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	4a0f      	ldr	r2, [pc, #60]	; (80022d0 <SPIx_MspInit+0x6c>)
 8002292:	f043 0320 	orr.w	r3, r3, #32
 8002296:	6313      	str	r3, [r2, #48]	; 0x30
 8002298:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <SPIx_MspInit+0x6c>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80022a4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80022b2:	2301      	movs	r3, #1
 80022b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80022b6:	2305      	movs	r3, #5
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <SPIx_MspInit+0x70>)
 80022c2:	f001 fe11 	bl	8003ee8 <HAL_GPIO_Init>
}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	; 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40021400 	.word	0x40021400

080022d8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <LCD_IO_Init+0xe0>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d164      	bne.n	80023b0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80022e6:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <LCD_IO_Init+0xe0>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <LCD_IO_Init+0xe4>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4a31      	ldr	r2, [pc, #196]	; (80023bc <LCD_IO_Init+0xe4>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6313      	str	r3, [r2, #48]	; 0x30
 80022fc:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <LCD_IO_Init+0xe4>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800230c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800230e:	2301      	movs	r3, #1
 8002310:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002316:	2302      	movs	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800231a:	f107 030c 	add.w	r3, r7, #12
 800231e:	4619      	mov	r1, r3
 8002320:	4827      	ldr	r0, [pc, #156]	; (80023c0 <LCD_IO_Init+0xe8>)
 8002322:	f001 fde1 	bl	8003ee8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	4b24      	ldr	r3, [pc, #144]	; (80023bc <LCD_IO_Init+0xe4>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a23      	ldr	r2, [pc, #140]	; (80023bc <LCD_IO_Init+0xe4>)
 8002330:	f043 0308 	orr.w	r3, r3, #8
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <LCD_IO_Init+0xe4>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002346:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002350:	2302      	movs	r3, #2
 8002352:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	4619      	mov	r1, r3
 800235a:	4819      	ldr	r0, [pc, #100]	; (80023c0 <LCD_IO_Init+0xe8>)
 800235c:	f001 fdc4 	bl	8003ee8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	4b15      	ldr	r3, [pc, #84]	; (80023bc <LCD_IO_Init+0xe4>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <LCD_IO_Init+0xe4>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6313      	str	r3, [r2, #48]	; 0x30
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <LCD_IO_Init+0xe4>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800237c:	2304      	movs	r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002380:	2301      	movs	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002388:	2302      	movs	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	4619      	mov	r1, r3
 8002392:	480c      	ldr	r0, [pc, #48]	; (80023c4 <LCD_IO_Init+0xec>)
 8002394:	f001 fda8 	bl	8003ee8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002398:	2200      	movs	r2, #0
 800239a:	2104      	movs	r1, #4
 800239c:	4809      	ldr	r0, [pc, #36]	; (80023c4 <LCD_IO_Init+0xec>)
 800239e:	f002 f85b 	bl	8004458 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80023a2:	2201      	movs	r2, #1
 80023a4:	2104      	movs	r1, #4
 80023a6:	4807      	ldr	r0, [pc, #28]	; (80023c4 <LCD_IO_Init+0xec>)
 80023a8:	f002 f856 	bl	8004458 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80023ac:	f7ff feb6 	bl	800211c <SPIx_Init>
  }
}
 80023b0:	bf00      	nop
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	2000055c 	.word	0x2000055c
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	40020800 	.word	0x40020800

080023c8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80023d2:	2201      	movs	r2, #1
 80023d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023d8:	480a      	ldr	r0, [pc, #40]	; (8002404 <LCD_IO_WriteData+0x3c>)
 80023da:	f002 f83d 	bl	8004458 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80023de:	2200      	movs	r2, #0
 80023e0:	2104      	movs	r1, #4
 80023e2:	4809      	ldr	r0, [pc, #36]	; (8002408 <LCD_IO_WriteData+0x40>)
 80023e4:	f002 f838 	bl	8004458 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fef0 	bl	80021d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80023f0:	2201      	movs	r2, #1
 80023f2:	2104      	movs	r1, #4
 80023f4:	4804      	ldr	r0, [pc, #16]	; (8002408 <LCD_IO_WriteData+0x40>)
 80023f6:	f002 f82f 	bl	8004458 <HAL_GPIO_WritePin>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40020c00 	.word	0x40020c00
 8002408:	40020800 	.word	0x40020800

0800240c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800241c:	480a      	ldr	r0, [pc, #40]	; (8002448 <LCD_IO_WriteReg+0x3c>)
 800241e:	f002 f81b 	bl	8004458 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002422:	2200      	movs	r2, #0
 8002424:	2104      	movs	r1, #4
 8002426:	4809      	ldr	r0, [pc, #36]	; (800244c <LCD_IO_WriteReg+0x40>)
 8002428:	f002 f816 	bl	8004458 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fecd 	bl	80021d0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002436:	2201      	movs	r2, #1
 8002438:	2104      	movs	r1, #4
 800243a:	4804      	ldr	r0, [pc, #16]	; (800244c <LCD_IO_WriteReg+0x40>)
 800243c:	f002 f80c 	bl	8004458 <HAL_GPIO_WritePin>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40020c00 	.word	0x40020c00
 800244c:	40020800 	.word	0x40020800

08002450 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	460a      	mov	r2, r1
 800245a:	80fb      	strh	r3, [r7, #6]
 800245c:	4613      	mov	r3, r2
 800245e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002464:	2200      	movs	r2, #0
 8002466:	2104      	movs	r1, #4
 8002468:	4810      	ldr	r0, [pc, #64]	; (80024ac <LCD_IO_ReadData+0x5c>)
 800246a:	f001 fff5 	bl	8004458 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800246e:	2200      	movs	r2, #0
 8002470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002474:	480e      	ldr	r0, [pc, #56]	; (80024b0 <LCD_IO_ReadData+0x60>)
 8002476:	f001 ffef 	bl	8004458 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fea7 	bl	80021d0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002482:	797b      	ldrb	r3, [r7, #5]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fe83 	bl	8002190 <SPIx_Read>
 800248a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800248c:	2201      	movs	r2, #1
 800248e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002492:	4807      	ldr	r0, [pc, #28]	; (80024b0 <LCD_IO_ReadData+0x60>)
 8002494:	f001 ffe0 	bl	8004458 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002498:	2201      	movs	r2, #1
 800249a:	2104      	movs	r1, #4
 800249c:	4803      	ldr	r0, [pc, #12]	; (80024ac <LCD_IO_ReadData+0x5c>)
 800249e:	f001 ffdb 	bl	8004458 <HAL_GPIO_WritePin>
  
  return readvalue;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020c00 	.word	0x40020c00

080024b4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 ffb9 	bl	8003434 <HAL_Delay>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <GYRO_IO_Init+0x8c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <GYRO_IO_Init+0x8c>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <GYRO_IO_Init+0x8c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80024ee:	2302      	movs	r3, #2
 80024f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80024f2:	2301      	movs	r3, #1
 80024f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80024fa:	2301      	movs	r3, #1
 80024fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80024fe:	f107 030c 	add.w	r3, r7, #12
 8002502:	4619      	mov	r1, r3
 8002504:	4815      	ldr	r0, [pc, #84]	; (800255c <GYRO_IO_Init+0x90>)
 8002506:	f001 fcef 	bl	8003ee8 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 800250a:	2201      	movs	r2, #1
 800250c:	2102      	movs	r1, #2
 800250e:	4813      	ldr	r0, [pc, #76]	; (800255c <GYRO_IO_Init+0x90>)
 8002510:	f001 ffa2 	bl	8004458 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <GYRO_IO_Init+0x8c>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <GYRO_IO_Init+0x8c>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <GYRO_IO_Init+0x8c>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002530:	2306      	movs	r3, #6
 8002532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002538:	2302      	movs	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	4619      	mov	r1, r3
 8002546:	4806      	ldr	r0, [pc, #24]	; (8002560 <GYRO_IO_Init+0x94>)
 8002548:	f001 fcce 	bl	8003ee8 <HAL_GPIO_Init>

  SPIx_Init();
 800254c:	f7ff fde6 	bl	800211c <SPIx_Init>
}
 8002550:	bf00      	nop
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40023800 	.word	0x40023800
 800255c:	40020800 	.word	0x40020800
 8002560:	40020000 	.word	0x40020000

08002564 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
 8002570:	4613      	mov	r3, r2
 8002572:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002574:	883b      	ldrh	r3, [r7, #0]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d903      	bls.n	8002582 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002580:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002582:	2200      	movs	r2, #0
 8002584:	2102      	movs	r1, #2
 8002586:	480f      	ldr	r0, [pc, #60]	; (80025c4 <GYRO_IO_Write+0x60>)
 8002588:	f001 ff66 	bl	8004458 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fe3c 	bl	800220c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002594:	e00a      	b.n	80025ac <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fe36 	bl	800220c <SPIx_WriteRead>
    NumByteToWrite--;
 80025a0:	883b      	ldrh	r3, [r7, #0]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3301      	adds	r3, #1
 80025aa:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80025ac:	883b      	ldrh	r3, [r7, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f1      	bne.n	8002596 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80025b2:	2201      	movs	r2, #1
 80025b4:	2102      	movs	r1, #2
 80025b6:	4803      	ldr	r0, [pc, #12]	; (80025c4 <GYRO_IO_Write+0x60>)
 80025b8:	f001 ff4e 	bl	8004458 <HAL_GPIO_WritePin>
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40020800 	.word	0x40020800

080025c8 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
 80025d4:	4613      	mov	r3, r2
 80025d6:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80025d8:	883b      	ldrh	r3, [r7, #0]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d904      	bls.n	80025e8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80025e4:	70fb      	strb	r3, [r7, #3]
 80025e6:	e003      	b.n	80025f0 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025ee:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80025f0:	2200      	movs	r2, #0
 80025f2:	2102      	movs	r1, #2
 80025f4:	4810      	ldr	r0, [pc, #64]	; (8002638 <GYRO_IO_Read+0x70>)
 80025f6:	f001 ff2f 	bl	8004458 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fe05 	bl	800220c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002602:	e00c      	b.n	800261e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002604:	2000      	movs	r0, #0
 8002606:	f7ff fe01 	bl	800220c <SPIx_WriteRead>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002612:	883b      	ldrh	r3, [r7, #0]
 8002614:	3b01      	subs	r3, #1
 8002616:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3301      	adds	r3, #1
 800261c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800261e:	883b      	ldrh	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ef      	bne.n	8002604 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002624:	2201      	movs	r2, #1
 8002626:	2102      	movs	r1, #2
 8002628:	4803      	ldr	r0, [pc, #12]	; (8002638 <GYRO_IO_Read+0x70>)
 800262a:	f001 ff15 	bl	8004458 <HAL_GPIO_WritePin>
}  
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40020800 	.word	0x40020800

0800263c <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002646:	2300      	movs	r3, #0
 8002648:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 800264a:	2300      	movs	r3, #0
 800264c:	703b      	strb	r3, [r7, #0]
 800264e:	2300      	movs	r3, #0
 8002650:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002652:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <BSP_GYRO_Init+0xc4>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	4798      	blx	r3
 8002658:	4603      	mov	r3, r0
 800265a:	2bd4      	cmp	r3, #212	; 0xd4
 800265c:	d005      	beq.n	800266a <BSP_GYRO_Init+0x2e>
 800265e:	4b28      	ldr	r3, [pc, #160]	; (8002700 <BSP_GYRO_Init+0xc4>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4798      	blx	r3
 8002664:	4603      	mov	r3, r0
 8002666:	2bd5      	cmp	r3, #213	; 0xd5
 8002668:	d145      	bne.n	80026f6 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <BSP_GYRO_Init+0xc8>)
 800266c:	4a24      	ldr	r2, [pc, #144]	; (8002700 <BSP_GYRO_Init+0xc4>)
 800266e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002670:	2308      	movs	r3, #8
 8002672:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002674:	2300      	movs	r3, #0
 8002676:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002678:	2307      	movs	r3, #7
 800267a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 800267c:	2330      	movs	r3, #48	; 0x30
 800267e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002680:	2300      	movs	r3, #0
 8002682:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002684:	2300      	movs	r3, #0
 8002686:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002688:	2310      	movs	r3, #16
 800268a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800268c:	793a      	ldrb	r2, [r7, #4]
 800268e:	797b      	ldrb	r3, [r7, #5]
 8002690:	4313      	orrs	r3, r2
 8002692:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002694:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002696:	4313      	orrs	r3, r2
 8002698:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800269a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800269c:	4313      	orrs	r3, r2
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80026a2:	7a3a      	ldrb	r2, [r7, #8]
 80026a4:	7a7b      	ldrb	r3, [r7, #9]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80026aa:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	89bb      	ldrh	r3, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <BSP_GYRO_Init+0xc8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	89ba      	ldrh	r2, [r7, #12]
 80026c4:	4610      	mov	r0, r2
 80026c6:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80026c8:	2300      	movs	r3, #0
 80026ca:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80026d0:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80026d2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <BSP_GYRO_Init+0xc8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	89ba      	ldrh	r2, [r7, #12]
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	4610      	mov	r0, r2
 80026e6:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <BSP_GYRO_Init+0xc8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	2010      	movs	r0, #16
 80026f0:	4798      	blx	r3

    ret = GYRO_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	2000003c 	.word	0x2000003c
 8002704:	20000560 	.word	0x20000560

08002708 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <BSP_GYRO_GetXYZ+0x24>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 800271a:	4b04      	ldr	r3, [pc, #16]	; (800272c <BSP_GYRO_GetXYZ+0x24>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
  }
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000560 	.word	0x20000560

08002730 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002734:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <BSP_LCD_Init+0xbc>)
 8002736:	4a2e      	ldr	r2, [pc, #184]	; (80027f0 <BSP_LCD_Init+0xc0>)
 8002738:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800273a:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <BSP_LCD_Init+0xbc>)
 800273c:	2209      	movs	r2, #9
 800273e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <BSP_LCD_Init+0xbc>)
 8002742:	2201      	movs	r2, #1
 8002744:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <BSP_LCD_Init+0xbc>)
 8002748:	221d      	movs	r2, #29
 800274a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <BSP_LCD_Init+0xbc>)
 800274e:	2203      	movs	r2, #3
 8002750:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <BSP_LCD_Init+0xbc>)
 8002754:	f240 120d 	movw	r2, #269	; 0x10d
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <BSP_LCD_Init+0xbc>)
 800275c:	f240 1243 	movw	r2, #323	; 0x143
 8002760:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002762:	4b22      	ldr	r3, [pc, #136]	; (80027ec <BSP_LCD_Init+0xbc>)
 8002764:	f240 1217 	movw	r2, #279	; 0x117
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <BSP_LCD_Init+0xbc>)
 800276c:	f240 1247 	movw	r2, #327	; 0x147
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <BSP_LCD_Init+0xbc>)
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <BSP_LCD_Init+0xbc>)
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <BSP_LCD_Init+0xbc>)
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <BSP_LCD_Init+0xc4>)
 800278c:	2208      	movs	r2, #8
 800278e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <BSP_LCD_Init+0xc4>)
 8002792:	22c0      	movs	r2, #192	; 0xc0
 8002794:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <BSP_LCD_Init+0xc4>)
 8002798:	2204      	movs	r2, #4
 800279a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <BSP_LCD_Init+0xc4>)
 800279e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80027a4:	4813      	ldr	r0, [pc, #76]	; (80027f4 <BSP_LCD_Init+0xc4>)
 80027a6:	f004 fa8d 	bl	8006cc4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <BSP_LCD_Init+0xbc>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <BSP_LCD_Init+0xbc>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <BSP_LCD_Init+0xbc>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <BSP_LCD_Init+0xbc>)
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80027c2:	f000 faf7 	bl	8002db4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80027c6:	4809      	ldr	r0, [pc, #36]	; (80027ec <BSP_LCD_Init+0xbc>)
 80027c8:	f002 f820 	bl	800480c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <BSP_LCD_Init+0xc8>)
 80027ce:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <BSP_LCD_Init+0xcc>)
 80027d0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <BSP_LCD_Init+0xc8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80027da:	f000 fc1f 	bl	800301c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80027de:	4808      	ldr	r0, [pc, #32]	; (8002800 <BSP_LCD_Init+0xd0>)
 80027e0:	f000 f8ce 	bl	8002980 <BSP_LCD_SetFont>

  return LCD_OK;
 80027e4:	2300      	movs	r3, #0
}  
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000564 	.word	0x20000564
 80027f0:	40016800 	.word	0x40016800
 80027f4:	2000064c 	.word	0x2000064c
 80027f8:	20000698 	.word	0x20000698
 80027fc:	20000004 	.word	0x20000004
 8002800:	20000074 	.word	0x20000074

08002804 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <BSP_LCD_GetXSize+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	4798      	blx	r3
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000698 	.word	0x20000698

0800281c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <BSP_LCD_GetYSize+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	4798      	blx	r3
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000698 	.word	0x20000698

08002834 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002834:	b580      	push	{r7, lr}
 8002836:	b090      	sub	sp, #64	; 0x40
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002844:	f7ff ffde 	bl	8002804 <BSP_LCD_GetXSize>
 8002848:	4603      	mov	r3, r0
 800284a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002850:	f7ff ffe4 	bl	800281c <BSP_LCD_GetYSize>
 8002854:	4603      	mov	r3, r0
 8002856:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002858:	2300      	movs	r3, #0
 800285a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002860:	23ff      	movs	r3, #255	; 0xff
 8002862:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800287a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002880:	2307      	movs	r3, #7
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002884:	f7ff ffbe 	bl	8002804 <BSP_LCD_GetXSize>
 8002888:	4603      	mov	r3, r0
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800288c:	f7ff ffc6 	bl	800281c <BSP_LCD_GetYSize>
 8002890:	4603      	mov	r3, r0
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	4619      	mov	r1, r3
 800289c:	4814      	ldr	r0, [pc, #80]	; (80028f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800289e:	f002 f88f 	bl	80049c0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80028a2:	88fa      	ldrh	r2, [r7, #6]
 80028a4:	4913      	ldr	r1, [pc, #76]	; (80028f4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3304      	adds	r3, #4
 80028b2:	f04f 32ff 	mov.w	r2, #4294967295
 80028b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	490e      	ldr	r1, [pc, #56]	; (80028f4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3308      	adds	r3, #8
 80028c8:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <BSP_LCD_LayerDefaultInit+0xc4>)
 80028ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80028cc:	88fa      	ldrh	r2, [r7, #6]
 80028ce:	4909      	ldr	r1, [pc, #36]	; (80028f4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80028de:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80028e0:	4803      	ldr	r0, [pc, #12]	; (80028f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80028e2:	f002 f8ab 	bl	8004a3c <HAL_LTDC_EnableDither>
}
 80028e6:	bf00      	nop
 80028e8:	3740      	adds	r7, #64	; 0x40
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000564 	.word	0x20000564
 80028f4:	20000680 	.word	0x20000680
 80028f8:	20000074 	.word	0x20000074

080028fc <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <BSP_LCD_SelectLayer+0x1c>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6013      	str	r3, [r2, #0]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	2000067c 	.word	0x2000067c

0800291c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <BSP_LCD_SetTextColor+0x28>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4907      	ldr	r1, [pc, #28]	; (8002948 <BSP_LCD_SetTextColor+0x2c>)
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	2000067c 	.word	0x2000067c
 8002948:	20000680 	.word	0x20000680

0800294c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <BSP_LCD_SetBackColor+0x2c>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4908      	ldr	r1, [pc, #32]	; (800297c <BSP_LCD_SetBackColor+0x30>)
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3304      	adds	r3, #4
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	601a      	str	r2, [r3, #0]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	2000067c 	.word	0x2000067c
 800297c:	20000680 	.word	0x20000680

08002980 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <BSP_LCD_SetFont+0x2c>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4908      	ldr	r1, [pc, #32]	; (80029b0 <BSP_LCD_SetFont+0x30>)
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	3308      	adds	r3, #8
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	601a      	str	r2, [r3, #0]
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	2000067c 	.word	0x2000067c
 80029b0:	20000680 	.word	0x20000680

080029b4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80029b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <BSP_LCD_Clear+0x48>)
 80029be:	681c      	ldr	r4, [r3, #0]
 80029c0:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <BSP_LCD_Clear+0x48>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <BSP_LCD_Clear+0x4c>)
 80029c6:	2134      	movs	r1, #52	; 0x34
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	335c      	adds	r3, #92	; 0x5c
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461e      	mov	r6, r3
 80029d4:	f7ff ff16 	bl	8002804 <BSP_LCD_GetXSize>
 80029d8:	4605      	mov	r5, r0
 80029da:	f7ff ff1f 	bl	800281c <BSP_LCD_GetYSize>
 80029de:	4602      	mov	r2, r0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	2300      	movs	r3, #0
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	462a      	mov	r2, r5
 80029ec:	4631      	mov	r1, r6
 80029ee:	4620      	mov	r0, r4
 80029f0:	f000 fadc 	bl	8002fac <FillBuffer>
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029fc:	2000067c 	.word	0x2000067c
 8002a00:	20000564 	.word	0x20000564

08002a04 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	80fb      	strh	r3, [r7, #6]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	80bb      	strh	r3, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a1a:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <BSP_LCD_DrawHLine+0x70>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a16      	ldr	r2, [pc, #88]	; (8002a78 <BSP_LCD_DrawHLine+0x74>)
 8002a20:	2134      	movs	r1, #52	; 0x34
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	335c      	adds	r3, #92	; 0x5c
 8002a2a:	681c      	ldr	r4, [r3, #0]
 8002a2c:	f7ff feea 	bl	8002804 <BSP_LCD_GetXSize>
 8002a30:	4602      	mov	r2, r0
 8002a32:	88bb      	ldrh	r3, [r7, #4]
 8002a34:	fb03 f202 	mul.w	r2, r3, r2
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4423      	add	r3, r4
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <BSP_LCD_DrawHLine+0x70>)
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	68f9      	ldr	r1, [r7, #12]
 8002a48:	887c      	ldrh	r4, [r7, #2]
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <BSP_LCD_DrawHLine+0x70>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4d0b      	ldr	r5, [pc, #44]	; (8002a7c <BSP_LCD_DrawHLine+0x78>)
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	442b      	add	r3, r5
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2301      	movs	r3, #1
 8002a64:	4622      	mov	r2, r4
 8002a66:	f000 faa1 	bl	8002fac <FillBuffer>
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bdb0      	pop	{r4, r5, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000067c 	.word	0x2000067c
 8002a78:	20000564 	.word	0x20000564
 8002a7c:	20000680 	.word	0x20000680

08002a80 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	80fb      	strh	r3, [r7, #6]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	80bb      	strh	r3, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002a92:	887b      	ldrh	r3, [r7, #2]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	f1c3 0303 	rsb	r3, r3, #3
 8002a9a:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002aa4:	e0c7      	b.n	8002c36 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	4413      	add	r3, r2
 8002aae:	b298      	uxth	r0, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	88ba      	ldrh	r2, [r7, #4]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	b299      	uxth	r1, r3
 8002aba:	4b64      	ldr	r3, [pc, #400]	; (8002c4c <BSP_LCD_DrawCircle+0x1cc>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4c64      	ldr	r4, [pc, #400]	; (8002c50 <BSP_LCD_DrawCircle+0x1d0>)
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4423      	add	r3, r4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	f000 fa47 	bl	8002f60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	b298      	uxth	r0, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	88ba      	ldrh	r2, [r7, #4]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	b299      	uxth	r1, r3
 8002ae6:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <BSP_LCD_DrawCircle+0x1cc>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4c59      	ldr	r4, [pc, #356]	; (8002c50 <BSP_LCD_DrawCircle+0x1d0>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4423      	add	r3, r4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	f000 fa31 	bl	8002f60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	4413      	add	r3, r2
 8002b06:	b298      	uxth	r0, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	88ba      	ldrh	r2, [r7, #4]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	b299      	uxth	r1, r3
 8002b12:	4b4e      	ldr	r3, [pc, #312]	; (8002c4c <BSP_LCD_DrawCircle+0x1cc>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4c4e      	ldr	r4, [pc, #312]	; (8002c50 <BSP_LCD_DrawCircle+0x1d0>)
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4423      	add	r3, r4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	f000 fa1b 	bl	8002f60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	b298      	uxth	r0, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	88ba      	ldrh	r2, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	b299      	uxth	r1, r3
 8002b3e:	4b43      	ldr	r3, [pc, #268]	; (8002c4c <BSP_LCD_DrawCircle+0x1cc>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4c43      	ldr	r4, [pc, #268]	; (8002c50 <BSP_LCD_DrawCircle+0x1d0>)
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4423      	add	r3, r4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f000 fa05 	bl	8002f60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	b298      	uxth	r0, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	88bb      	ldrh	r3, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	b299      	uxth	r1, r3
 8002b6a:	4b38      	ldr	r3, [pc, #224]	; (8002c4c <BSP_LCD_DrawCircle+0x1cc>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4c38      	ldr	r4, [pc, #224]	; (8002c50 <BSP_LCD_DrawCircle+0x1d0>)
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4423      	add	r3, r4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f000 f9ef 	bl	8002f60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	88fa      	ldrh	r2, [r7, #6]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	b298      	uxth	r0, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	88bb      	ldrh	r3, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	b299      	uxth	r1, r3
 8002b96:	4b2d      	ldr	r3, [pc, #180]	; (8002c4c <BSP_LCD_DrawCircle+0x1cc>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4c2d      	ldr	r4, [pc, #180]	; (8002c50 <BSP_LCD_DrawCircle+0x1d0>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4423      	add	r3, r4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f000 f9d9 	bl	8002f60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b298      	uxth	r0, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	88bb      	ldrh	r3, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	b299      	uxth	r1, r3
 8002bc2:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <BSP_LCD_DrawCircle+0x1cc>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4c22      	ldr	r4, [pc, #136]	; (8002c50 <BSP_LCD_DrawCircle+0x1d0>)
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4423      	add	r3, r4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f000 f9c3 	bl	8002f60 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	b298      	uxth	r0, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	88bb      	ldrh	r3, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	b299      	uxth	r1, r3
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <BSP_LCD_DrawCircle+0x1cc>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4c17      	ldr	r4, [pc, #92]	; (8002c50 <BSP_LCD_DrawCircle+0x1d0>)
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4423      	add	r3, r4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	f000 f9ad 	bl	8002f60 <BSP_LCD_DrawPixel>

    if (d < 0)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	da06      	bge.n	8002c1a <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	009a      	lsls	r2, r3, #2
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	4413      	add	r3, r2
 8002c14:	3306      	adds	r3, #6
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e00a      	b.n	8002c30 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	009a      	lsls	r2, r3, #2
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	4413      	add	r3, r2
 8002c26:	330a      	adds	r3, #10
 8002c28:	617b      	str	r3, [r7, #20]
      cury--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	3301      	adds	r3, #1
 8002c34:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	f67f af33 	bls.w	8002aa6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd90      	pop	{r4, r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	2000067c 	.word	0x2000067c
 8002c50:	20000680 	.word	0x20000680

08002c54 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	80bb      	strh	r3, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	f1c3 0303 	rsb	r3, r3, #3
 8002c6e:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002c78:	4b44      	ldr	r3, [pc, #272]	; (8002d8c <BSP_LCD_FillCircle+0x138>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4944      	ldr	r1, [pc, #272]	; (8002d90 <BSP_LCD_FillCircle+0x13c>)
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fe46 	bl	800291c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002c90:	e061      	b.n	8002d56 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d021      	beq.n	8002cdc <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	b298      	uxth	r0, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	88bb      	ldrh	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	b299      	uxth	r1, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f7ff fea5 	bl	8002a04 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	b298      	uxth	r0, r3
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	88ba      	ldrh	r2, [r7, #4]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	b299      	uxth	r1, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f7ff fe94 	bl	8002a04 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d021      	beq.n	8002d26 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	b298      	uxth	r0, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	88ba      	ldrh	r2, [r7, #4]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	b299      	uxth	r1, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f7ff fe80 	bl	8002a04 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	b298      	uxth	r0, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	88bb      	ldrh	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	b299      	uxth	r1, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	f7ff fe6f 	bl	8002a04 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	da06      	bge.n	8002d3a <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	009a      	lsls	r2, r3, #2
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	4413      	add	r3, r2
 8002d34:	3306      	adds	r3, #6
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e00a      	b.n	8002d50 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	009a      	lsls	r2, r3, #2
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	4413      	add	r3, r2
 8002d46:	330a      	adds	r3, #10
 8002d48:	617b      	str	r3, [r7, #20]
      cury--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	3301      	adds	r3, #1
 8002d54:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d999      	bls.n	8002c92 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <BSP_LCD_FillCircle+0x138>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	490b      	ldr	r1, [pc, #44]	; (8002d90 <BSP_LCD_FillCircle+0x13c>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fdd3 	bl	800291c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	88b9      	ldrh	r1, [r7, #4]
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fe7f 	bl	8002a80 <BSP_LCD_DrawCircle>
}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2000067c 	.word	0x2000067c
 8002d90:	20000680 	.word	0x20000680

08002d94 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <BSP_LCD_DisplayOn+0x1c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002da2:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <BSP_LCD_DisplayOn+0x1c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4798      	blx	r3
  }
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000698 	.word	0x20000698

08002db4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08e      	sub	sp, #56	; 0x38
 8002db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
 8002dbe:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4a60      	ldr	r2, [pc, #384]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dca:	4b5e      	ldr	r3, [pc, #376]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	4b5a      	ldr	r3, [pc, #360]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a59      	ldr	r2, [pc, #356]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002de0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b57      	ldr	r3, [pc, #348]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a4b      	ldr	r2, [pc, #300]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b49      	ldr	r3, [pc, #292]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	4b45      	ldr	r3, [pc, #276]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a44      	ldr	r2, [pc, #272]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b42      	ldr	r3, [pc, #264]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a3d      	ldr	r2, [pc, #244]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e50:	f043 0308 	orr.w	r3, r3, #8
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a36      	ldr	r2, [pc, #216]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e6c:	f043 0320 	orr.w	r3, r3, #32
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a2f      	ldr	r2, [pc, #188]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <BSP_LCD_MspInit+0x190>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002e9a:	f641 0358 	movw	r3, #6232	; 0x1858
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002eac:	230e      	movs	r3, #14
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4824      	ldr	r0, [pc, #144]	; (8002f48 <BSP_LCD_MspInit+0x194>)
 8002eb8:	f001 f816 	bl	8003ee8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002ebc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4820      	ldr	r0, [pc, #128]	; (8002f4c <BSP_LCD_MspInit+0x198>)
 8002eca:	f001 f80d 	bl	8003ee8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002ece:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed8:	4619      	mov	r1, r3
 8002eda:	481d      	ldr	r0, [pc, #116]	; (8002f50 <BSP_LCD_MspInit+0x19c>)
 8002edc:	f001 f804 	bl	8003ee8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002ee0:	2348      	movs	r3, #72	; 0x48
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee8:	4619      	mov	r1, r3
 8002eea:	481a      	ldr	r0, [pc, #104]	; (8002f54 <BSP_LCD_MspInit+0x1a0>)
 8002eec:	f000 fffc 	bl	8003ee8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efa:	4619      	mov	r1, r3
 8002efc:	4816      	ldr	r0, [pc, #88]	; (8002f58 <BSP_LCD_MspInit+0x1a4>)
 8002efe:	f000 fff3 	bl	8003ee8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002f02:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4813      	ldr	r0, [pc, #76]	; (8002f5c <BSP_LCD_MspInit+0x1a8>)
 8002f10:	f000 ffea 	bl	8003ee8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002f14:	2303      	movs	r3, #3
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002f18:	2309      	movs	r3, #9
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f20:	4619      	mov	r1, r3
 8002f22:	480a      	ldr	r0, [pc, #40]	; (8002f4c <BSP_LCD_MspInit+0x198>)
 8002f24:	f000 ffe0 	bl	8003ee8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002f28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f32:	4619      	mov	r1, r3
 8002f34:	4809      	ldr	r0, [pc, #36]	; (8002f5c <BSP_LCD_MspInit+0x1a8>)
 8002f36:	f000 ffd7 	bl	8003ee8 <HAL_GPIO_Init>
}
 8002f3a:	bf00      	nop
 8002f3c:	3738      	adds	r7, #56	; 0x38
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	40020400 	.word	0x40020400
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	40021400 	.word	0x40021400
 8002f5c:	40021800 	.word	0x40021800

08002f60 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	603a      	str	r2, [r7, #0]
 8002f6a:	80fb      	strh	r3, [r7, #6]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <BSP_LCD_DrawPixel+0x44>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0c      	ldr	r2, [pc, #48]	; (8002fa8 <BSP_LCD_DrawPixel+0x48>)
 8002f76:	2134      	movs	r1, #52	; 0x34
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	335c      	adds	r3, #92	; 0x5c
 8002f80:	681c      	ldr	r4, [r3, #0]
 8002f82:	88bd      	ldrh	r5, [r7, #4]
 8002f84:	f7ff fc3e 	bl	8002804 <BSP_LCD_GetXSize>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	fb03 f205 	mul.w	r2, r3, r5
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4423      	add	r3, r4
 8002f96:	461a      	mov	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa4:	2000067c 	.word	0x2000067c
 8002fa8:	20000564 	.word	0x20000564

08002fac <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002fba:	4b16      	ldr	r3, [pc, #88]	; (8003014 <FillBuffer+0x68>)
 8002fbc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fc0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <FillBuffer+0x68>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002fc8:	4a12      	ldr	r2, [pc, #72]	; (8003014 <FillBuffer+0x68>)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <FillBuffer+0x68>)
 8002fd0:	4a11      	ldr	r2, [pc, #68]	; (8003018 <FillBuffer+0x6c>)
 8002fd2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002fd4:	480f      	ldr	r0, [pc, #60]	; (8003014 <FillBuffer+0x68>)
 8002fd6:	f000 fcf1 	bl	80039bc <HAL_DMA2D_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d115      	bne.n	800300c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002fe0:	68f9      	ldr	r1, [r7, #12]
 8002fe2:	480c      	ldr	r0, [pc, #48]	; (8003014 <FillBuffer+0x68>)
 8002fe4:	f000 fe52 	bl	8003c8c <HAL_DMA2D_ConfigLayer>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10e      	bne.n	800300c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69f9      	ldr	r1, [r7, #28]
 8002ff8:	4806      	ldr	r0, [pc, #24]	; (8003014 <FillBuffer+0x68>)
 8002ffa:	f000 fd32 	bl	8003a62 <HAL_DMA2D_Start>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003004:	210a      	movs	r1, #10
 8003006:	4803      	ldr	r0, [pc, #12]	; (8003014 <FillBuffer+0x68>)
 8003008:	f000 fd56 	bl	8003ab8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2000060c 	.word	0x2000060c
 8003018:	4002b000 	.word	0x4002b000

0800301c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003020:	4b29      	ldr	r3, [pc, #164]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 8003022:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <BSP_SDRAM_Init+0xb0>)
 8003024:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003026:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <BSP_SDRAM_Init+0xb4>)
 8003028:	2202      	movs	r2, #2
 800302a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800302c:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <BSP_SDRAM_Init+0xb4>)
 800302e:	2207      	movs	r2, #7
 8003030:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003032:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <BSP_SDRAM_Init+0xb4>)
 8003034:	2204      	movs	r2, #4
 8003036:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <BSP_SDRAM_Init+0xb4>)
 800303a:	2207      	movs	r2, #7
 800303c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <BSP_SDRAM_Init+0xb4>)
 8003040:	2202      	movs	r2, #2
 8003042:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003044:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <BSP_SDRAM_Init+0xb4>)
 8003046:	2202      	movs	r2, #2
 8003048:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800304a:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <BSP_SDRAM_Init+0xb4>)
 800304c:	2202      	movs	r2, #2
 800304e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 8003052:	2201      	movs	r2, #1
 8003054:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003056:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 8003058:	2200      	movs	r2, #0
 800305a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800305c:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 800305e:	2204      	movs	r2, #4
 8003060:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003062:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 8003064:	2210      	movs	r2, #16
 8003066:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003068:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 800306a:	2240      	movs	r2, #64	; 0x40
 800306c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800306e:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 8003070:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003074:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 8003078:	2200      	movs	r2, #0
 800307a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 800307e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003082:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 8003086:	2200      	movs	r2, #0
 8003088:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 800308c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003090:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003092:	2100      	movs	r1, #0
 8003094:	480c      	ldr	r0, [pc, #48]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 8003096:	f000 f87f 	bl	8003198 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800309a:	490d      	ldr	r1, [pc, #52]	; (80030d0 <BSP_SDRAM_Init+0xb4>)
 800309c:	480a      	ldr	r0, [pc, #40]	; (80030c8 <BSP_SDRAM_Init+0xac>)
 800309e:	f003 ffd1 	bl	8007044 <HAL_SDRAM_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <BSP_SDRAM_Init+0xb8>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e002      	b.n	80030b6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <BSP_SDRAM_Init+0xb8>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80030b6:	f240 506a 	movw	r0, #1386	; 0x56a
 80030ba:	f000 f80d 	bl	80030d8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <BSP_SDRAM_Init+0xb8>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	2000069c 	.word	0x2000069c
 80030cc:	a0000140 	.word	0xa0000140
 80030d0:	200006d0 	.word	0x200006d0
 80030d4:	2000007c 	.word	0x2000007c

080030d8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80030e4:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80030ea:	4b29      	ldr	r3, [pc, #164]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030ec:	2208      	movs	r2, #8
 80030ee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80030f6:	4b26      	ldr	r3, [pc, #152]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80030fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003100:	4923      	ldr	r1, [pc, #140]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003102:	4824      	ldr	r0, [pc, #144]	; (8003194 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003104:	f003 ffdc 	bl	80070c0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003108:	2001      	movs	r0, #1
 800310a:	f000 f993 	bl	8003434 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003110:	2202      	movs	r2, #2
 8003112:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003114:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003116:	2208      	movs	r2, #8
 8003118:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800311c:	2201      	movs	r2, #1
 800311e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800312a:	4919      	ldr	r1, [pc, #100]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800312c:	4819      	ldr	r0, [pc, #100]	; (8003194 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800312e:	f003 ffc7 	bl	80070c0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003132:	4b17      	ldr	r3, [pc, #92]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003134:	2203      	movs	r2, #3
 8003136:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003138:	4b15      	ldr	r3, [pc, #84]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800313a:	2208      	movs	r2, #8
 800313c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003140:	2204      	movs	r2, #4
 8003142:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003146:	2200      	movs	r2, #0
 8003148:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800314a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800314e:	4910      	ldr	r1, [pc, #64]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003150:	4810      	ldr	r0, [pc, #64]	; (8003194 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003152:	f003 ffb5 	bl	80070c0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003156:	f44f 730c 	mov.w	r3, #560	; 0x230
 800315a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800315e:	2204      	movs	r2, #4
 8003160:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003164:	2208      	movs	r2, #8
 8003166:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800316a:	2201      	movs	r2, #1
 800316c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a07      	ldr	r2, [pc, #28]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003172:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003178:	4905      	ldr	r1, [pc, #20]	; (8003190 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800317a:	4806      	ldr	r0, [pc, #24]	; (8003194 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800317c:	f003 ffa0 	bl	80070c0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4804      	ldr	r0, [pc, #16]	; (8003194 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003184:	f003 ffd1 	bl	800712a <HAL_SDRAM_ProgramRefreshRate>
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	200006ec 	.word	0x200006ec
 8003194:	2000069c 	.word	0x2000069c

08003198 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b090      	sub	sp, #64	; 0x40
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80ec 	beq.w	8003382 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ae:	4b77      	ldr	r3, [pc, #476]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	4a76      	ldr	r2, [pc, #472]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6393      	str	r3, [r2, #56]	; 0x38
 80031ba:	4b74      	ldr	r3, [pc, #464]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	4b70      	ldr	r3, [pc, #448]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a6f      	ldr	r2, [pc, #444]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 80031d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b6d      	ldr	r3, [pc, #436]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	623b      	str	r3, [r7, #32]
 80031e6:	4b69      	ldr	r3, [pc, #420]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a68      	ldr	r2, [pc, #416]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b66      	ldr	r3, [pc, #408]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	623b      	str	r3, [r7, #32]
 80031fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	4b62      	ldr	r3, [pc, #392]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a61      	ldr	r2, [pc, #388]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b5f      	ldr	r3, [pc, #380]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	4b5b      	ldr	r3, [pc, #364]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a5a      	ldr	r2, [pc, #360]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003224:	f043 0308 	orr.w	r3, r3, #8
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b58      	ldr	r3, [pc, #352]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	4b54      	ldr	r3, [pc, #336]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a53      	ldr	r2, [pc, #332]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003240:	f043 0310 	orr.w	r3, r3, #16
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b51      	ldr	r3, [pc, #324]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	4b4d      	ldr	r3, [pc, #308]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a4c      	ldr	r2, [pc, #304]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 800325c:	f043 0320 	orr.w	r3, r3, #32
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b4a      	ldr	r3, [pc, #296]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b46      	ldr	r3, [pc, #280]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a45      	ldr	r2, [pc, #276]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b43      	ldr	r3, [pc, #268]	; (800338c <BSP_SDRAM_MspInit+0x1f4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800328e:	2302      	movs	r3, #2
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003296:	230c      	movs	r3, #12
 8003298:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800329a:	2360      	movs	r3, #96	; 0x60
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800329e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032a2:	4619      	mov	r1, r3
 80032a4:	483a      	ldr	r0, [pc, #232]	; (8003390 <BSP_SDRAM_MspInit+0x1f8>)
 80032a6:	f000 fe1f 	bl	8003ee8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80032aa:	2301      	movs	r3, #1
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80032ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032b2:	4619      	mov	r1, r3
 80032b4:	4837      	ldr	r0, [pc, #220]	; (8003394 <BSP_SDRAM_MspInit+0x1fc>)
 80032b6:	f000 fe17 	bl	8003ee8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80032ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80032c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032c4:	4619      	mov	r1, r3
 80032c6:	4834      	ldr	r0, [pc, #208]	; (8003398 <BSP_SDRAM_MspInit+0x200>)
 80032c8:	f000 fe0e 	bl	8003ee8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80032cc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80032d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d6:	4619      	mov	r1, r3
 80032d8:	4830      	ldr	r0, [pc, #192]	; (800339c <BSP_SDRAM_MspInit+0x204>)
 80032da:	f000 fe05 	bl	8003ee8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80032de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80032e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032e8:	4619      	mov	r1, r3
 80032ea:	482d      	ldr	r0, [pc, #180]	; (80033a0 <BSP_SDRAM_MspInit+0x208>)
 80032ec:	f000 fdfc 	bl	8003ee8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80032f0:	f248 1333 	movw	r3, #33075	; 0x8133
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80032f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032fa:	4619      	mov	r1, r3
 80032fc:	4829      	ldr	r0, [pc, #164]	; (80033a4 <BSP_SDRAM_MspInit+0x20c>)
 80032fe:	f000 fdf3 	bl	8003ee8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003302:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003304:	2200      	movs	r2, #0
 8003306:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003308:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 800330a:	2280      	movs	r2, #128	; 0x80
 800330c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800330e:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003314:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800331c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800331e:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003324:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003326:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003328:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800332c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800332e:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003330:	2200      	movs	r2, #0
 8003332:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003336:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800333a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 800333e:	2200      	movs	r2, #0
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003342:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003344:	2203      	movs	r2, #3
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003348:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 800334a:	2200      	movs	r2, #0
 800334c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003354:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003356:	4a15      	ldr	r2, [pc, #84]	; (80033ac <BSP_SDRAM_MspInit+0x214>)
 8003358:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a12      	ldr	r2, [pc, #72]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
 8003360:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003366:	4810      	ldr	r0, [pc, #64]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 8003368:	f000 fa18 	bl	800379c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800336c:	480e      	ldr	r0, [pc, #56]	; (80033a8 <BSP_SDRAM_MspInit+0x210>)
 800336e:	f000 f967 	bl	8003640 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	210f      	movs	r1, #15
 8003376:	2038      	movs	r0, #56	; 0x38
 8003378:	f000 f938 	bl	80035ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800337c:	2038      	movs	r0, #56	; 0x38
 800337e:	f000 f951 	bl	8003624 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003382:	bf00      	nop
 8003384:	3740      	adds	r7, #64	; 0x40
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800
 8003390:	40020400 	.word	0x40020400
 8003394:	40020800 	.word	0x40020800
 8003398:	40020c00 	.word	0x40020c00
 800339c:	40021000 	.word	0x40021000
 80033a0:	40021400 	.word	0x40021400
 80033a4:	40021800 	.word	0x40021800
 80033a8:	200006fc 	.word	0x200006fc
 80033ac:	40026410 	.word	0x40026410

080033b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_Init+0x40>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0d      	ldr	r2, [pc, #52]	; (80033f0 <HAL_Init+0x40>)
 80033ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_Init+0x40>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <HAL_Init+0x40>)
 80033c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_Init+0x40>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <HAL_Init+0x40>)
 80033d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033d8:	2003      	movs	r0, #3
 80033da:	f000 f8fc 	bl	80035d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033de:	200f      	movs	r0, #15
 80033e0:	f7fe f948 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033e4:	f7fe f828 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023c00 	.word	0x40023c00

080033f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_IncTick+0x20>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_IncTick+0x24>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4413      	add	r3, r2
 8003404:	4a04      	ldr	r2, [pc, #16]	; (8003418 <HAL_IncTick+0x24>)
 8003406:	6013      	str	r3, [r2, #0]
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000084 	.word	0x20000084
 8003418:	2000075c 	.word	0x2000075c

0800341c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return uwTick;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_GetTick+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	2000075c 	.word	0x2000075c

08003434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800343c:	f7ff ffee 	bl	800341c <HAL_GetTick>
 8003440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d005      	beq.n	800345a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <HAL_Delay+0x44>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800345a:	bf00      	nop
 800345c:	f7ff ffde 	bl	800341c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	429a      	cmp	r2, r3
 800346a:	d8f7      	bhi.n	800345c <HAL_Delay+0x28>
  {
  }
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000084 	.word	0x20000084

0800347c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <__NVIC_SetPriorityGrouping+0x44>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003498:	4013      	ands	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ae:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <__NVIC_SetPriorityGrouping+0x44>)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	60d3      	str	r3, [r2, #12]
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <__NVIC_GetPriorityGrouping+0x18>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	f003 0307 	and.w	r3, r3, #7
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	db0b      	blt.n	800350a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	f003 021f 	and.w	r2, r3, #31
 80034f8:	4907      	ldr	r1, [pc, #28]	; (8003518 <__NVIC_EnableIRQ+0x38>)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	2001      	movs	r0, #1
 8003502:	fa00 f202 	lsl.w	r2, r0, r2
 8003506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	e000e100 	.word	0xe000e100

0800351c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	2b00      	cmp	r3, #0
 800352e:	db0a      	blt.n	8003546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	b2da      	uxtb	r2, r3
 8003534:	490c      	ldr	r1, [pc, #48]	; (8003568 <__NVIC_SetPriority+0x4c>)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	0112      	lsls	r2, r2, #4
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	440b      	add	r3, r1
 8003540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003544:	e00a      	b.n	800355c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	4908      	ldr	r1, [pc, #32]	; (800356c <__NVIC_SetPriority+0x50>)
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	3b04      	subs	r3, #4
 8003554:	0112      	lsls	r2, r2, #4
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	440b      	add	r3, r1
 800355a:	761a      	strb	r2, [r3, #24]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000e100 	.word	0xe000e100
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003570:	b480      	push	{r7}
 8003572:	b089      	sub	sp, #36	; 0x24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f1c3 0307 	rsb	r3, r3, #7
 800358a:	2b04      	cmp	r3, #4
 800358c:	bf28      	it	cs
 800358e:	2304      	movcs	r3, #4
 8003590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3304      	adds	r3, #4
 8003596:	2b06      	cmp	r3, #6
 8003598:	d902      	bls.n	80035a0 <NVIC_EncodePriority+0x30>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3b03      	subs	r3, #3
 800359e:	e000      	b.n	80035a2 <NVIC_EncodePriority+0x32>
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a4:	f04f 32ff 	mov.w	r2, #4294967295
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43da      	mvns	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	401a      	ands	r2, r3
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b8:	f04f 31ff 	mov.w	r1, #4294967295
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	43d9      	mvns	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c8:	4313      	orrs	r3, r2
         );
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3724      	adds	r7, #36	; 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ff4c 	bl	800347c <__NVIC_SetPriorityGrouping>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035fe:	f7ff ff61 	bl	80034c4 <__NVIC_GetPriorityGrouping>
 8003602:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	6978      	ldr	r0, [r7, #20]
 800360a:	f7ff ffb1 	bl	8003570 <NVIC_EncodePriority>
 800360e:	4602      	mov	r2, r0
 8003610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff80 	bl	800351c <__NVIC_SetPriority>
}
 800361c:	bf00      	nop
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff54 	bl	80034e0 <__NVIC_EnableIRQ>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7ff fee6 	bl	800341c <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e099      	b.n	8003790 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800367c:	e00f      	b.n	800369e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800367e:	f7ff fecd 	bl	800341c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b05      	cmp	r3, #5
 800368a:	d908      	bls.n	800369e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2203      	movs	r2, #3
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e078      	b.n	8003790 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e8      	bne.n	800367e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4b38      	ldr	r3, [pc, #224]	; (8003798 <HAL_DMA_Init+0x158>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d107      	bne.n	8003708 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	4313      	orrs	r3, r2
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2b04      	cmp	r3, #4
 8003730:	d117      	bne.n	8003762 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00e      	beq.n	8003762 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f8bd 	bl	80038c4 <DMA_CheckFifoParam>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2240      	movs	r2, #64	; 0x40
 8003754:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800375e:	2301      	movs	r3, #1
 8003760:	e016      	b.n	8003790 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f874 	bl	8003858 <DMA_CalcBaseAndBitshift>
 8003770:	4603      	mov	r3, r0
 8003772:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003778:	223f      	movs	r2, #63	; 0x3f
 800377a:	409a      	lsls	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	f010803f 	.word	0xf010803f

0800379c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e050      	b.n	8003850 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d101      	bne.n	80037be <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
 80037bc:	e048      	b.n	8003850 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2221      	movs	r2, #33	; 0x21
 80037fc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f82a 	bl	8003858 <DMA_CalcBaseAndBitshift>
 8003804:	4603      	mov	r3, r0
 8003806:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	223f      	movs	r2, #63	; 0x3f
 8003832:	409a      	lsls	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	3b10      	subs	r3, #16
 8003868:	4a14      	ldr	r2, [pc, #80]	; (80038bc <DMA_CalcBaseAndBitshift+0x64>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003872:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d909      	bls.n	800389a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	1d1a      	adds	r2, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	659a      	str	r2, [r3, #88]	; 0x58
 8003898:	e007      	b.n	80038aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038a2:	f023 0303 	bic.w	r3, r3, #3
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	aaaaaaab 	.word	0xaaaaaaab
 80038c0:	08013ec8 	.word	0x08013ec8

080038c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d11f      	bne.n	800391e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d856      	bhi.n	8003992 <DMA_CheckFifoParam+0xce>
 80038e4:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <DMA_CheckFifoParam+0x28>)
 80038e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ea:	bf00      	nop
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	0800390f 	.word	0x0800390f
 80038f4:	080038fd 	.word	0x080038fd
 80038f8:	08003993 	.word	0x08003993
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d046      	beq.n	8003996 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800390c:	e043      	b.n	8003996 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003916:	d140      	bne.n	800399a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800391c:	e03d      	b.n	800399a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003926:	d121      	bne.n	800396c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d837      	bhi.n	800399e <DMA_CheckFifoParam+0xda>
 800392e:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <DMA_CheckFifoParam+0x70>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	08003945 	.word	0x08003945
 8003938:	0800394b 	.word	0x0800394b
 800393c:	08003945 	.word	0x08003945
 8003940:	0800395d 	.word	0x0800395d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      break;
 8003948:	e030      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d025      	beq.n	80039a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800395a:	e022      	b.n	80039a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003964:	d11f      	bne.n	80039a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800396a:	e01c      	b.n	80039a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d903      	bls.n	800397a <DMA_CheckFifoParam+0xb6>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d003      	beq.n	8003980 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003978:	e018      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
      break;
 800397e:	e015      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      break;
 8003990:	e00b      	b.n	80039aa <DMA_CheckFifoParam+0xe6>
      break;
 8003992:	bf00      	nop
 8003994:	e00a      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
      break;
 8003996:	bf00      	nop
 8003998:	e008      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
      break;
 800399a:	bf00      	nop
 800399c:	e006      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
      break;
 800399e:	bf00      	nop
 80039a0:	e004      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
      break;
 80039a2:	bf00      	nop
 80039a4:	e002      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
      break;   
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <DMA_CheckFifoParam+0xe8>
      break;
 80039aa:	bf00      	nop
    }
  } 
  
  return status; 
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop

080039bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e03b      	b.n	8003a46 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f833 	bl	8003a4e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0c:	f023 0107 	bic.w	r1, r3, #7
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68d1      	ldr	r1, [r2, #12]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	430b      	orrs	r3, r1
 8003a34:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b086      	sub	sp, #24
 8003a66:	af02      	add	r7, sp, #8
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_DMA2D_Start+0x1c>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e018      	b.n	8003ab0 <HAL_DMA2D_Start+0x4e>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f989 	bl	8003db0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d056      	beq.n	8003b82 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ad4:	f7ff fca2 	bl	800341c <HAL_GetTick>
 8003ad8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ada:	e04b      	b.n	8003b74 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d023      	beq.n	8003b36 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	f043 0202 	orr.w	r2, r3, #2
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	f043 0201 	orr.w	r2, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2221      	movs	r2, #33	; 0x21
 8003b20:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2204      	movs	r2, #4
 8003b26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0a5      	b.n	8003c82 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d01a      	beq.n	8003b74 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7ff fc6d 	bl	800341c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <HAL_DMA2D_PollForTransfer+0x9c>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10f      	bne.n	8003b74 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2203      	movs	r2, #3
 8003b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e086      	b.n	8003c82 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0ac      	beq.n	8003adc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d061      	beq.n	8003c68 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ba4:	f7ff fc3a 	bl	800341c <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003baa:	e056      	b.n	8003c5a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d02e      	beq.n	8003c1c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	f043 0204 	orr.w	r2, r3, #4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	f043 0202 	orr.w	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	f043 0201 	orr.w	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2229      	movs	r2, #41	; 0x29
 8003c06:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e032      	b.n	8003c82 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d01a      	beq.n	8003c5a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c24:	f7ff fbfa 	bl	800341c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <HAL_DMA2D_PollForTransfer+0x182>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10f      	bne.n	8003c5a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3e:	f043 0220 	orr.w	r2, r3, #32
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e013      	b.n	8003c82 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0a1      	beq.n	8003bac <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2212      	movs	r2, #18
 8003c6e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_DMA2D_ConfigLayer+0x20>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e079      	b.n	8003da0 <HAL_DMA2D_ConfigLayer+0x114>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	3318      	adds	r3, #24
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003cd6:	4b35      	ldr	r3, [pc, #212]	; (8003dac <HAL_DMA2D_ConfigLayer+0x120>)
 8003cd8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b0a      	cmp	r3, #10
 8003ce0:	d003      	beq.n	8003cea <HAL_DMA2D_ConfigLayer+0x5e>
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b09      	cmp	r3, #9
 8003ce8:	d107      	bne.n	8003cfa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e005      	b.n	8003d06 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d120      	bne.n	8003d4e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	ea02 0103 	and.w	r1, r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b0a      	cmp	r3, #10
 8003d34:	d003      	beq.n	8003d3e <HAL_DMA2D_ConfigLayer+0xb2>
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b09      	cmp	r3, #9
 8003d3c:	d127      	bne.n	8003d8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d4c:	e01f      	b.n	8003d8e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69da      	ldr	r2, [r3, #28]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	ea02 0103 	and.w	r1, r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b0a      	cmp	r3, #10
 8003d76:	d003      	beq.n	8003d80 <HAL_DMA2D_ConfigLayer+0xf4>
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b09      	cmp	r3, #9
 8003d7e:	d106      	bne.n	8003d8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d8c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	ff03000f 	.word	0xff03000f

08003db0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b08b      	sub	sp, #44	; 0x2c
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	041a      	lsls	r2, r3, #16
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003de8:	d174      	bne.n	8003ed4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003df0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003df8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e00:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d108      	bne.n	8003e22 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e20:	e053      	b.n	8003eca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d106      	bne.n	8003e38 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
 8003e36:	e048      	b.n	8003eca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d111      	bne.n	8003e64 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	0cdb      	lsrs	r3, r3, #19
 8003e44:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	0a9b      	lsrs	r3, r3, #10
 8003e4a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	08db      	lsrs	r3, r3, #3
 8003e50:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	02db      	lsls	r3, r3, #11
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
 8003e62:	e032      	b.n	8003eca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d117      	bne.n	8003e9c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	0fdb      	lsrs	r3, r3, #31
 8003e70:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	0cdb      	lsrs	r3, r3, #19
 8003e76:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	0adb      	lsrs	r3, r3, #11
 8003e7c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	08db      	lsrs	r3, r3, #3
 8003e82:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	029b      	lsls	r3, r3, #10
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	03db      	lsls	r3, r3, #15
 8003e92:	4313      	orrs	r3, r2
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9a:	e016      	b.n	8003eca <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	0f1b      	lsrs	r3, r3, #28
 8003ea0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	0d1b      	lsrs	r3, r3, #20
 8003ea6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	0b1b      	lsrs	r3, r3, #12
 8003eac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	011a      	lsls	r2, r3, #4
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	031b      	lsls	r3, r3, #12
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003ed2:	e003      	b.n	8003edc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	60da      	str	r2, [r3, #12]
}
 8003edc:	bf00      	nop
 8003ede:	372c      	adds	r7, #44	; 0x2c
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b089      	sub	sp, #36	; 0x24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	e177      	b.n	80041f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f04:	2201      	movs	r2, #1
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	f040 8166 	bne.w	80041ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d005      	beq.n	8003f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d130      	bne.n	8003f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	2203      	movs	r2, #3
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f70:	2201      	movs	r2, #1
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	091b      	lsrs	r3, r3, #4
 8003f86:	f003 0201 	and.w	r2, r3, #1
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d017      	beq.n	8003fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 0303 	and.w	r3, r3, #3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d123      	bne.n	800402c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	08da      	lsrs	r2, r3, #3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3208      	adds	r2, #8
 8003fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	220f      	movs	r2, #15
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	08da      	lsrs	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3208      	adds	r2, #8
 8004026:	69b9      	ldr	r1, [r7, #24]
 8004028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	2203      	movs	r2, #3
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0203 	and.w	r2, r3, #3
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80c0 	beq.w	80041ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	4b66      	ldr	r3, [pc, #408]	; (800420c <HAL_GPIO_Init+0x324>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	4a65      	ldr	r2, [pc, #404]	; (800420c <HAL_GPIO_Init+0x324>)
 8004078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800407c:	6453      	str	r3, [r2, #68]	; 0x44
 800407e:	4b63      	ldr	r3, [pc, #396]	; (800420c <HAL_GPIO_Init+0x324>)
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800408a:	4a61      	ldr	r2, [pc, #388]	; (8004210 <HAL_GPIO_Init+0x328>)
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	089b      	lsrs	r3, r3, #2
 8004090:	3302      	adds	r3, #2
 8004092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	220f      	movs	r2, #15
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a58      	ldr	r2, [pc, #352]	; (8004214 <HAL_GPIO_Init+0x32c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d037      	beq.n	8004126 <HAL_GPIO_Init+0x23e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a57      	ldr	r2, [pc, #348]	; (8004218 <HAL_GPIO_Init+0x330>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d031      	beq.n	8004122 <HAL_GPIO_Init+0x23a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a56      	ldr	r2, [pc, #344]	; (800421c <HAL_GPIO_Init+0x334>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d02b      	beq.n	800411e <HAL_GPIO_Init+0x236>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a55      	ldr	r2, [pc, #340]	; (8004220 <HAL_GPIO_Init+0x338>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d025      	beq.n	800411a <HAL_GPIO_Init+0x232>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a54      	ldr	r2, [pc, #336]	; (8004224 <HAL_GPIO_Init+0x33c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01f      	beq.n	8004116 <HAL_GPIO_Init+0x22e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a53      	ldr	r2, [pc, #332]	; (8004228 <HAL_GPIO_Init+0x340>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d019      	beq.n	8004112 <HAL_GPIO_Init+0x22a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a52      	ldr	r2, [pc, #328]	; (800422c <HAL_GPIO_Init+0x344>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_GPIO_Init+0x226>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a51      	ldr	r2, [pc, #324]	; (8004230 <HAL_GPIO_Init+0x348>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00d      	beq.n	800410a <HAL_GPIO_Init+0x222>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a50      	ldr	r2, [pc, #320]	; (8004234 <HAL_GPIO_Init+0x34c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <HAL_GPIO_Init+0x21e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a4f      	ldr	r2, [pc, #316]	; (8004238 <HAL_GPIO_Init+0x350>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_GPIO_Init+0x21a>
 80040fe:	2309      	movs	r3, #9
 8004100:	e012      	b.n	8004128 <HAL_GPIO_Init+0x240>
 8004102:	230a      	movs	r3, #10
 8004104:	e010      	b.n	8004128 <HAL_GPIO_Init+0x240>
 8004106:	2308      	movs	r3, #8
 8004108:	e00e      	b.n	8004128 <HAL_GPIO_Init+0x240>
 800410a:	2307      	movs	r3, #7
 800410c:	e00c      	b.n	8004128 <HAL_GPIO_Init+0x240>
 800410e:	2306      	movs	r3, #6
 8004110:	e00a      	b.n	8004128 <HAL_GPIO_Init+0x240>
 8004112:	2305      	movs	r3, #5
 8004114:	e008      	b.n	8004128 <HAL_GPIO_Init+0x240>
 8004116:	2304      	movs	r3, #4
 8004118:	e006      	b.n	8004128 <HAL_GPIO_Init+0x240>
 800411a:	2303      	movs	r3, #3
 800411c:	e004      	b.n	8004128 <HAL_GPIO_Init+0x240>
 800411e:	2302      	movs	r3, #2
 8004120:	e002      	b.n	8004128 <HAL_GPIO_Init+0x240>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_GPIO_Init+0x240>
 8004126:	2300      	movs	r3, #0
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	f002 0203 	and.w	r2, r2, #3
 800412e:	0092      	lsls	r2, r2, #2
 8004130:	4093      	lsls	r3, r2
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004138:	4935      	ldr	r1, [pc, #212]	; (8004210 <HAL_GPIO_Init+0x328>)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	3302      	adds	r3, #2
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004146:	4b3d      	ldr	r3, [pc, #244]	; (800423c <HAL_GPIO_Init+0x354>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800416a:	4a34      	ldr	r2, [pc, #208]	; (800423c <HAL_GPIO_Init+0x354>)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004170:	4b32      	ldr	r3, [pc, #200]	; (800423c <HAL_GPIO_Init+0x354>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004194:	4a29      	ldr	r2, [pc, #164]	; (800423c <HAL_GPIO_Init+0x354>)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800419a:	4b28      	ldr	r3, [pc, #160]	; (800423c <HAL_GPIO_Init+0x354>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041be:	4a1f      	ldr	r2, [pc, #124]	; (800423c <HAL_GPIO_Init+0x354>)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041c4:	4b1d      	ldr	r3, [pc, #116]	; (800423c <HAL_GPIO_Init+0x354>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041e8:	4a14      	ldr	r2, [pc, #80]	; (800423c <HAL_GPIO_Init+0x354>)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3301      	adds	r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b0f      	cmp	r3, #15
 80041f8:	f67f ae84 	bls.w	8003f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3724      	adds	r7, #36	; 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	40013800 	.word	0x40013800
 8004214:	40020000 	.word	0x40020000
 8004218:	40020400 	.word	0x40020400
 800421c:	40020800 	.word	0x40020800
 8004220:	40020c00 	.word	0x40020c00
 8004224:	40021000 	.word	0x40021000
 8004228:	40021400 	.word	0x40021400
 800422c:	40021800 	.word	0x40021800
 8004230:	40021c00 	.word	0x40021c00
 8004234:	40022000 	.word	0x40022000
 8004238:	40022400 	.word	0x40022400
 800423c:	40013c00 	.word	0x40013c00

08004240 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e0d9      	b.n	8004410 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800425c:	2201      	movs	r2, #1
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4013      	ands	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	429a      	cmp	r2, r3
 8004274:	f040 80c9 	bne.w	800440a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004278:	4a6b      	ldr	r2, [pc, #428]	; (8004428 <HAL_GPIO_DeInit+0x1e8>)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	089b      	lsrs	r3, r3, #2
 800427e:	3302      	adds	r3, #2
 8004280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004284:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	220f      	movs	r2, #15
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	4013      	ands	r3, r2
 8004298:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a63      	ldr	r2, [pc, #396]	; (800442c <HAL_GPIO_DeInit+0x1ec>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d037      	beq.n	8004312 <HAL_GPIO_DeInit+0xd2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a62      	ldr	r2, [pc, #392]	; (8004430 <HAL_GPIO_DeInit+0x1f0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d031      	beq.n	800430e <HAL_GPIO_DeInit+0xce>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a61      	ldr	r2, [pc, #388]	; (8004434 <HAL_GPIO_DeInit+0x1f4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d02b      	beq.n	800430a <HAL_GPIO_DeInit+0xca>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a60      	ldr	r2, [pc, #384]	; (8004438 <HAL_GPIO_DeInit+0x1f8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d025      	beq.n	8004306 <HAL_GPIO_DeInit+0xc6>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a5f      	ldr	r2, [pc, #380]	; (800443c <HAL_GPIO_DeInit+0x1fc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01f      	beq.n	8004302 <HAL_GPIO_DeInit+0xc2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a5e      	ldr	r2, [pc, #376]	; (8004440 <HAL_GPIO_DeInit+0x200>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d019      	beq.n	80042fe <HAL_GPIO_DeInit+0xbe>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a5d      	ldr	r2, [pc, #372]	; (8004444 <HAL_GPIO_DeInit+0x204>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <HAL_GPIO_DeInit+0xba>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a5c      	ldr	r2, [pc, #368]	; (8004448 <HAL_GPIO_DeInit+0x208>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00d      	beq.n	80042f6 <HAL_GPIO_DeInit+0xb6>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a5b      	ldr	r2, [pc, #364]	; (800444c <HAL_GPIO_DeInit+0x20c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d007      	beq.n	80042f2 <HAL_GPIO_DeInit+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a5a      	ldr	r2, [pc, #360]	; (8004450 <HAL_GPIO_DeInit+0x210>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <HAL_GPIO_DeInit+0xae>
 80042ea:	2309      	movs	r3, #9
 80042ec:	e012      	b.n	8004314 <HAL_GPIO_DeInit+0xd4>
 80042ee:	230a      	movs	r3, #10
 80042f0:	e010      	b.n	8004314 <HAL_GPIO_DeInit+0xd4>
 80042f2:	2308      	movs	r3, #8
 80042f4:	e00e      	b.n	8004314 <HAL_GPIO_DeInit+0xd4>
 80042f6:	2307      	movs	r3, #7
 80042f8:	e00c      	b.n	8004314 <HAL_GPIO_DeInit+0xd4>
 80042fa:	2306      	movs	r3, #6
 80042fc:	e00a      	b.n	8004314 <HAL_GPIO_DeInit+0xd4>
 80042fe:	2305      	movs	r3, #5
 8004300:	e008      	b.n	8004314 <HAL_GPIO_DeInit+0xd4>
 8004302:	2304      	movs	r3, #4
 8004304:	e006      	b.n	8004314 <HAL_GPIO_DeInit+0xd4>
 8004306:	2303      	movs	r3, #3
 8004308:	e004      	b.n	8004314 <HAL_GPIO_DeInit+0xd4>
 800430a:	2302      	movs	r3, #2
 800430c:	e002      	b.n	8004314 <HAL_GPIO_DeInit+0xd4>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_GPIO_DeInit+0xd4>
 8004312:	2300      	movs	r3, #0
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	f002 0203 	and.w	r2, r2, #3
 800431a:	0092      	lsls	r2, r2, #2
 800431c:	4093      	lsls	r3, r2
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	429a      	cmp	r2, r3
 8004322:	d132      	bne.n	800438a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004324:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <HAL_GPIO_DeInit+0x214>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	43db      	mvns	r3, r3
 800432c:	4949      	ldr	r1, [pc, #292]	; (8004454 <HAL_GPIO_DeInit+0x214>)
 800432e:	4013      	ands	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004332:	4b48      	ldr	r3, [pc, #288]	; (8004454 <HAL_GPIO_DeInit+0x214>)
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	43db      	mvns	r3, r3
 800433a:	4946      	ldr	r1, [pc, #280]	; (8004454 <HAL_GPIO_DeInit+0x214>)
 800433c:	4013      	ands	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004340:	4b44      	ldr	r3, [pc, #272]	; (8004454 <HAL_GPIO_DeInit+0x214>)
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	43db      	mvns	r3, r3
 8004348:	4942      	ldr	r1, [pc, #264]	; (8004454 <HAL_GPIO_DeInit+0x214>)
 800434a:	4013      	ands	r3, r2
 800434c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_GPIO_DeInit+0x214>)
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	43db      	mvns	r3, r3
 8004356:	493f      	ldr	r1, [pc, #252]	; (8004454 <HAL_GPIO_DeInit+0x214>)
 8004358:	4013      	ands	r3, r2
 800435a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	220f      	movs	r2, #15
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800436c:	4a2e      	ldr	r2, [pc, #184]	; (8004428 <HAL_GPIO_DeInit+0x1e8>)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	089b      	lsrs	r3, r3, #2
 8004372:	3302      	adds	r3, #2
 8004374:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	43da      	mvns	r2, r3
 800437c:	482a      	ldr	r0, [pc, #168]	; (8004428 <HAL_GPIO_DeInit+0x1e8>)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	089b      	lsrs	r3, r3, #2
 8004382:	400a      	ands	r2, r1
 8004384:	3302      	adds	r3, #2
 8004386:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	2103      	movs	r1, #3
 8004394:	fa01 f303 	lsl.w	r3, r1, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	401a      	ands	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	08da      	lsrs	r2, r3, #3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3208      	adds	r2, #8
 80043a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	220f      	movs	r2, #15
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	08d2      	lsrs	r2, r2, #3
 80043c0:	4019      	ands	r1, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3208      	adds	r2, #8
 80043c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	2103      	movs	r1, #3
 80043d4:	fa01 f303 	lsl.w	r3, r1, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	401a      	ands	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	2101      	movs	r1, #1
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	401a      	ands	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	2103      	movs	r1, #3
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	401a      	ands	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	3301      	adds	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b0f      	cmp	r3, #15
 8004414:	f67f af22 	bls.w	800425c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40013800 	.word	0x40013800
 800442c:	40020000 	.word	0x40020000
 8004430:	40020400 	.word	0x40020400
 8004434:	40020800 	.word	0x40020800
 8004438:	40020c00 	.word	0x40020c00
 800443c:	40021000 	.word	0x40021000
 8004440:	40021400 	.word	0x40021400
 8004444:	40021800 	.word	0x40021800
 8004448:	40021c00 	.word	0x40021c00
 800444c:	40022000 	.word	0x40022000
 8004450:	40022400 	.word	0x40022400
 8004454:	40013c00 	.word	0x40013c00

08004458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
 8004464:	4613      	mov	r3, r2
 8004466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004468:	787b      	ldrb	r3, [r7, #1]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800446e:	887a      	ldrh	r2, [r7, #2]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004474:	e003      	b.n	800447e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004476:	887b      	ldrh	r3, [r7, #2]
 8004478:	041a      	lsls	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	619a      	str	r2, [r3, #24]
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e12b      	b.n	80046f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fc ffec 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	; 0x24
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044f0:	f002 fba2 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 80044f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4a81      	ldr	r2, [pc, #516]	; (8004700 <HAL_I2C_Init+0x274>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d807      	bhi.n	8004510 <HAL_I2C_Init+0x84>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a80      	ldr	r2, [pc, #512]	; (8004704 <HAL_I2C_Init+0x278>)
 8004504:	4293      	cmp	r3, r2
 8004506:	bf94      	ite	ls
 8004508:	2301      	movls	r3, #1
 800450a:	2300      	movhi	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e006      	b.n	800451e <HAL_I2C_Init+0x92>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4a7d      	ldr	r2, [pc, #500]	; (8004708 <HAL_I2C_Init+0x27c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	bf94      	ite	ls
 8004518:	2301      	movls	r3, #1
 800451a:	2300      	movhi	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e0e7      	b.n	80046f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a78      	ldr	r2, [pc, #480]	; (800470c <HAL_I2C_Init+0x280>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0c9b      	lsrs	r3, r3, #18
 8004530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a6a      	ldr	r2, [pc, #424]	; (8004700 <HAL_I2C_Init+0x274>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d802      	bhi.n	8004560 <HAL_I2C_Init+0xd4>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	3301      	adds	r3, #1
 800455e:	e009      	b.n	8004574 <HAL_I2C_Init+0xe8>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	4a69      	ldr	r2, [pc, #420]	; (8004710 <HAL_I2C_Init+0x284>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	099b      	lsrs	r3, r3, #6
 8004572:	3301      	adds	r3, #1
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	430b      	orrs	r3, r1
 800457a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004586:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	495c      	ldr	r1, [pc, #368]	; (8004700 <HAL_I2C_Init+0x274>)
 8004590:	428b      	cmp	r3, r1
 8004592:	d819      	bhi.n	80045c8 <HAL_I2C_Init+0x13c>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1e59      	subs	r1, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	fbb1 f3f3 	udiv	r3, r1, r3
 80045a2:	1c59      	adds	r1, r3, #1
 80045a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045a8:	400b      	ands	r3, r1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_I2C_Init+0x138>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1e59      	subs	r1, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80045bc:	3301      	adds	r3, #1
 80045be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c2:	e051      	b.n	8004668 <HAL_I2C_Init+0x1dc>
 80045c4:	2304      	movs	r3, #4
 80045c6:	e04f      	b.n	8004668 <HAL_I2C_Init+0x1dc>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d111      	bne.n	80045f4 <HAL_I2C_Init+0x168>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1e58      	subs	r0, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6859      	ldr	r1, [r3, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	440b      	add	r3, r1
 80045de:	fbb0 f3f3 	udiv	r3, r0, r3
 80045e2:	3301      	adds	r3, #1
 80045e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	e012      	b.n	800461a <HAL_I2C_Init+0x18e>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1e58      	subs	r0, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6859      	ldr	r1, [r3, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	0099      	lsls	r1, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	fbb0 f3f3 	udiv	r3, r0, r3
 800460a:	3301      	adds	r3, #1
 800460c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf0c      	ite	eq
 8004614:	2301      	moveq	r3, #1
 8004616:	2300      	movne	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Init+0x196>
 800461e:	2301      	movs	r3, #1
 8004620:	e022      	b.n	8004668 <HAL_I2C_Init+0x1dc>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10e      	bne.n	8004648 <HAL_I2C_Init+0x1bc>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1e58      	subs	r0, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6859      	ldr	r1, [r3, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	440b      	add	r3, r1
 8004638:	fbb0 f3f3 	udiv	r3, r0, r3
 800463c:	3301      	adds	r3, #1
 800463e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004646:	e00f      	b.n	8004668 <HAL_I2C_Init+0x1dc>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1e58      	subs	r0, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	0099      	lsls	r1, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	fbb0 f3f3 	udiv	r3, r0, r3
 800465e:	3301      	adds	r3, #1
 8004660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	6809      	ldr	r1, [r1, #0]
 800466c:	4313      	orrs	r3, r2
 800466e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69da      	ldr	r2, [r3, #28]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004696:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6911      	ldr	r1, [r2, #16]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68d2      	ldr	r2, [r2, #12]
 80046a2:	4311      	orrs	r1, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	430b      	orrs	r3, r1
 80046aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	000186a0 	.word	0x000186a0
 8004704:	001e847f 	.word	0x001e847f
 8004708:	003d08ff 	.word	0x003d08ff
 800470c:	431bde83 	.word	0x431bde83
 8004710:	10624dd3 	.word	0x10624dd3

08004714 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b20      	cmp	r3, #32
 8004728:	d129      	bne.n	800477e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2224      	movs	r2, #36	; 0x24
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0201 	bic.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0210 	bic.w	r2, r2, #16
 8004750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d12a      	bne.n	80047fc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2224      	movs	r2, #36	; 0x24
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80047c6:	89fb      	ldrh	r3, [r7, #14]
 80047c8:	f023 030f 	bic.w	r3, r3, #15
 80047cc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	89fb      	ldrh	r3, [r7, #14]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	89fa      	ldrh	r2, [r7, #14]
 80047de:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e000      	b.n	80047fe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80047fc:	2302      	movs	r3, #2
  }
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0bf      	b.n	800499e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f8ba 	bl	80049ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800484e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6999      	ldr	r1, [r3, #24]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004864:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6899      	ldr	r1, [r3, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b4a      	ldr	r3, [pc, #296]	; (80049a8 <HAL_LTDC_Init+0x19c>)
 8004880:	400b      	ands	r3, r1
 8004882:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6899      	ldr	r1, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68d9      	ldr	r1, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b3e      	ldr	r3, [pc, #248]	; (80049a8 <HAL_LTDC_Init+0x19c>)
 80048ae:	400b      	ands	r3, r1
 80048b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68d9      	ldr	r1, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1a      	ldr	r2, [r3, #32]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6919      	ldr	r1, [r3, #16]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <HAL_LTDC_Init+0x19c>)
 80048dc:	400b      	ands	r3, r1
 80048de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6919      	ldr	r1, [r3, #16]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6959      	ldr	r1, [r3, #20]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b27      	ldr	r3, [pc, #156]	; (80049a8 <HAL_LTDC_Init+0x19c>)
 800490a:	400b      	ands	r3, r1
 800490c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	041b      	lsls	r3, r3, #16
 8004914:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6959      	ldr	r1, [r3, #20]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0206 	orr.w	r2, r2, #6
 800497a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	f000f800 	.word	0xf000f800

080049ac <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049c0:	b5b0      	push	{r4, r5, r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_LTDC_ConfigLayer+0x1a>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e02c      	b.n	8004a34 <HAL_LTDC_ConfigLayer+0x74>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2134      	movs	r1, #52	; 0x34
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	4413      	add	r3, r2
 80049f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4614      	mov	r4, r2
 80049fe:	461d      	mov	r5, r3
 8004a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f83b 	bl	8004a90 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bdb0      	pop	{r4, r5, r7, pc}

08004a3c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_LTDC_EnableDither+0x16>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e016      	b.n	8004a80 <HAL_LTDC_EnableDither+0x44>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004a62:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <HAL_LTDC_EnableDither+0x50>)
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	4a09      	ldr	r2, [pc, #36]	; (8004a8c <HAL_LTDC_EnableDither+0x50>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	40016800 	.word	0x40016800

08004a90 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	; 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	0c1b      	lsrs	r3, r3, #16
 8004aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aac:	4413      	add	r3, r2
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	01db      	lsls	r3, r3, #7
 8004abc:	4413      	add	r3, r2
 8004abe:	3384      	adds	r3, #132	; 0x84
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	01d2      	lsls	r2, r2, #7
 8004acc:	440a      	add	r2, r1
 8004ace:	3284      	adds	r2, #132	; 0x84
 8004ad0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004ad4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ae6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ae8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4619      	mov	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	01db      	lsls	r3, r3, #7
 8004af4:	440b      	add	r3, r1
 8004af6:	3384      	adds	r3, #132	; 0x84
 8004af8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004afe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b0e:	4413      	add	r3, r2
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	01db      	lsls	r3, r3, #7
 8004b1e:	4413      	add	r3, r2
 8004b20:	3384      	adds	r3, #132	; 0x84
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	4611      	mov	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	01d2      	lsls	r2, r2, #7
 8004b2e:	440a      	add	r2, r1
 8004b30:	3284      	adds	r2, #132	; 0x84
 8004b32:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b46:	4413      	add	r3, r2
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	01db      	lsls	r3, r3, #7
 8004b54:	440b      	add	r3, r1
 8004b56:	3384      	adds	r3, #132	; 0x84
 8004b58:	4619      	mov	r1, r3
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	01db      	lsls	r3, r3, #7
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3384      	adds	r3, #132	; 0x84
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	4611      	mov	r1, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	01d2      	lsls	r2, r2, #7
 8004b7a:	440a      	add	r2, r1
 8004b7c:	3284      	adds	r2, #132	; 0x84
 8004b7e:	f023 0307 	bic.w	r3, r3, #7
 8004b82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	01db      	lsls	r3, r3, #7
 8004b8e:	4413      	add	r3, r2
 8004b90:	3384      	adds	r3, #132	; 0x84
 8004b92:	461a      	mov	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004baa:	041b      	lsls	r3, r3, #16
 8004bac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	01db      	lsls	r3, r3, #7
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3384      	adds	r3, #132	; 0x84
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	01db      	lsls	r3, r3, #7
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3384      	adds	r3, #132	; 0x84
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004be0:	461a      	mov	r2, r3
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	431a      	orrs	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	01db      	lsls	r3, r3, #7
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3384      	adds	r3, #132	; 0x84
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	01db      	lsls	r3, r3, #7
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3384      	adds	r3, #132	; 0x84
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	4611      	mov	r1, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	01d2      	lsls	r2, r2, #7
 8004c1a:	440a      	add	r2, r1
 8004c1c:	3284      	adds	r2, #132	; 0x84
 8004c1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c22:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	01db      	lsls	r3, r3, #7
 8004c2e:	4413      	add	r3, r2
 8004c30:	3384      	adds	r3, #132	; 0x84
 8004c32:	461a      	mov	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	01db      	lsls	r3, r3, #7
 8004c44:	4413      	add	r3, r2
 8004c46:	3384      	adds	r3, #132	; 0x84
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	4611      	mov	r1, r2
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	01d2      	lsls	r2, r2, #7
 8004c54:	440a      	add	r2, r1
 8004c56:	3284      	adds	r2, #132	; 0x84
 8004c58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c5c:	f023 0307 	bic.w	r3, r3, #7
 8004c60:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	69da      	ldr	r2, [r3, #28]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	6809      	ldr	r1, [r1, #0]
 8004c6e:	4608      	mov	r0, r1
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	01c9      	lsls	r1, r1, #7
 8004c74:	4401      	add	r1, r0
 8004c76:	3184      	adds	r1, #132	; 0x84
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	01db      	lsls	r3, r3, #7
 8004c86:	4413      	add	r3, r2
 8004c88:	3384      	adds	r3, #132	; 0x84
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	01db      	lsls	r3, r3, #7
 8004c96:	4413      	add	r3, r2
 8004c98:	3384      	adds	r3, #132	; 0x84
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	01db      	lsls	r3, r3, #7
 8004caa:	4413      	add	r3, r2
 8004cac:	3384      	adds	r3, #132	; 0x84
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	e01b      	b.n	8004cfc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d102      	bne.n	8004cd2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	e014      	b.n	8004cfc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d00b      	beq.n	8004cf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d007      	beq.n	8004cf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d003      	beq.n	8004cf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004cee:	2b07      	cmp	r3, #7
 8004cf0:	d102      	bne.n	8004cf8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e001      	b.n	8004cfc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	01db      	lsls	r3, r3, #7
 8004d06:	4413      	add	r3, r2
 8004d08:	3384      	adds	r3, #132	; 0x84
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	4611      	mov	r1, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	01d2      	lsls	r2, r2, #7
 8004d16:	440a      	add	r2, r1
 8004d18:	3284      	adds	r2, #132	; 0x84
 8004d1a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	1acb      	subs	r3, r1, r3
 8004d36:	69f9      	ldr	r1, [r7, #28]
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	6809      	ldr	r1, [r1, #0]
 8004d42:	4608      	mov	r0, r1
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	01c9      	lsls	r1, r1, #7
 8004d48:	4401      	add	r1, r0
 8004d4a:	3184      	adds	r1, #132	; 0x84
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	01db      	lsls	r3, r3, #7
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3384      	adds	r3, #132	; 0x84
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	4611      	mov	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	01d2      	lsls	r2, r2, #7
 8004d6a:	440a      	add	r2, r1
 8004d6c:	3284      	adds	r2, #132	; 0x84
 8004d6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d72:	f023 0307 	bic.w	r3, r3, #7
 8004d76:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	01db      	lsls	r3, r3, #7
 8004d82:	4413      	add	r3, r2
 8004d84:	3384      	adds	r3, #132	; 0x84
 8004d86:	461a      	mov	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	01db      	lsls	r3, r3, #7
 8004d98:	4413      	add	r3, r2
 8004d9a:	3384      	adds	r3, #132	; 0x84
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	4611      	mov	r1, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	01d2      	lsls	r2, r2, #7
 8004da8:	440a      	add	r2, r1
 8004daa:	3284      	adds	r2, #132	; 0x84
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	6013      	str	r3, [r2, #0]
}
 8004db2:	bf00      	nop
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dc0:	b08f      	sub	sp, #60	; 0x3c
 8004dc2:	af0a      	add	r7, sp, #40	; 0x28
 8004dc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e10f      	b.n	8004ff0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f00a f8f4 	bl	800efd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2203      	movs	r2, #3
 8004df4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d102      	bne.n	8004e0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f003 fe43 	bl	8008a9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	603b      	str	r3, [r7, #0]
 8004e1a:	687e      	ldr	r6, [r7, #4]
 8004e1c:	466d      	mov	r5, sp
 8004e1e:	f106 0410 	add.w	r4, r6, #16
 8004e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e32:	1d33      	adds	r3, r6, #4
 8004e34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e36:	6838      	ldr	r0, [r7, #0]
 8004e38:	f003 fd1a 	bl	8008870 <USB_CoreInit>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2202      	movs	r2, #2
 8004e46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e0d0      	b.n	8004ff0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f003 fe31 	bl	8008abc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
 8004e5e:	e04a      	b.n	8004ef6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	333d      	adds	r3, #61	; 0x3d
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e74:	7bfa      	ldrb	r2, [r7, #15]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	333c      	adds	r3, #60	; 0x3c
 8004e84:	7bfa      	ldrb	r2, [r7, #15]
 8004e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	b298      	uxth	r0, r3
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	3344      	adds	r3, #68	; 0x44
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ea0:	7bfa      	ldrb	r2, [r7, #15]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	3340      	adds	r3, #64	; 0x40
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004eb4:	7bfa      	ldrb	r2, [r7, #15]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3348      	adds	r3, #72	; 0x48
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	334c      	adds	r3, #76	; 0x4c
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004edc:	7bfa      	ldrb	r2, [r7, #15]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	3354      	adds	r3, #84	; 0x54
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	7bfa      	ldrb	r2, [r7, #15]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d3af      	bcc.n	8004e60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f00:	2300      	movs	r3, #0
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e044      	b.n	8004f90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f06:	7bfa      	ldrb	r2, [r7, #15]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f1c:	7bfa      	ldrb	r2, [r7, #15]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004f2e:	7bfa      	ldrb	r2, [r7, #15]
 8004f30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f32:	7bfa      	ldrb	r2, [r7, #15]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f48:	7bfa      	ldrb	r2, [r7, #15]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f74:	7bfa      	ldrb	r2, [r7, #15]
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	7bfa      	ldrb	r2, [r7, #15]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3b5      	bcc.n	8004f06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	687e      	ldr	r6, [r7, #4]
 8004fa2:	466d      	mov	r5, sp
 8004fa4:	f106 0410 	add.w	r4, r6, #16
 8004fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fb8:	1d33      	adds	r3, r6, #4
 8004fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fbc:	6838      	ldr	r0, [r7, #0]
 8004fbe:	f003 fdc9 	bl	8008b54 <USB_DevInit>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e00d      	b.n	8004ff0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f004 ff18 	bl	8009e1e <USB_DevDisconnect>

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ff8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_PCD_Start+0x1c>
 8005010:	2302      	movs	r3, #2
 8005012:	e020      	b.n	8005056 <HAL_PCD_Start+0x5e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	2b01      	cmp	r3, #1
 8005022:	d109      	bne.n	8005038 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005028:	2b01      	cmp	r3, #1
 800502a:	d005      	beq.n	8005038 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f003 fd1b 	bl	8008a78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f004 fec8 	bl	8009ddc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800505e:	b590      	push	{r4, r7, lr}
 8005060:	b08d      	sub	sp, #52	; 0x34
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f004 ff86 	bl	8009f86 <USB_GetMode>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	f040 848a 	bne.w	8005996 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f004 feea 	bl	8009e60 <USB_ReadInterrupts>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 8480 	beq.w	8005994 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	0a1b      	lsrs	r3, r3, #8
 800509e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f004 fed7 	bl	8009e60 <USB_ReadInterrupts>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d107      	bne.n	80050cc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f002 0202 	and.w	r2, r2, #2
 80050ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f004 fec5 	bl	8009e60 <USB_ReadInterrupts>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b10      	cmp	r3, #16
 80050de:	d161      	bne.n	80051a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0210 	bic.w	r2, r2, #16
 80050ee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f003 020f 	and.w	r2, r3, #15
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	4413      	add	r3, r2
 800510c:	3304      	adds	r3, #4
 800510e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	0c5b      	lsrs	r3, r3, #17
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	2b02      	cmp	r3, #2
 800511a:	d124      	bne.n	8005166 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d035      	beq.n	8005194 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	091b      	lsrs	r3, r3, #4
 8005130:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6a38      	ldr	r0, [r7, #32]
 800513c:	f004 fcfc 	bl	8009b38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	091b      	lsrs	r3, r3, #4
 8005148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800514c:	441a      	add	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	6a1a      	ldr	r2, [r3, #32]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	091b      	lsrs	r3, r3, #4
 800515a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800515e:	441a      	add	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	621a      	str	r2, [r3, #32]
 8005164:	e016      	b.n	8005194 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	0c5b      	lsrs	r3, r3, #17
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	2b06      	cmp	r3, #6
 8005170:	d110      	bne.n	8005194 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005178:	2208      	movs	r2, #8
 800517a:	4619      	mov	r1, r3
 800517c:	6a38      	ldr	r0, [r7, #32]
 800517e:	f004 fcdb 	bl	8009b38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	6a1a      	ldr	r2, [r3, #32]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800518e:	441a      	add	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0210 	orr.w	r2, r2, #16
 80051a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f004 fe59 	bl	8009e60 <USB_ReadInterrupts>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051b8:	f040 80a7 	bne.w	800530a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f004 fe5e 	bl	8009e86 <USB_ReadDevAllOutEpInterrupt>
 80051ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80051cc:	e099      	b.n	8005302 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 808e 	beq.w	80052f6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	4611      	mov	r1, r2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f004 fe82 	bl	8009eee <USB_ReadDevOutEPInterrupt>
 80051ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00c      	beq.n	8005210 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	461a      	mov	r2, r3
 8005204:	2301      	movs	r3, #1
 8005206:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fec2 	bl	8005f94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00c      	beq.n	8005234 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005226:	461a      	mov	r2, r3
 8005228:	2308      	movs	r3, #8
 800522a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800522c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 ff98 	bl	8006164 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b00      	cmp	r3, #0
 800523c:	d008      	beq.n	8005250 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	461a      	mov	r2, r3
 800524c:	2310      	movs	r3, #16
 800524e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d030      	beq.n	80052bc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005262:	2b80      	cmp	r3, #128	; 0x80
 8005264:	d109      	bne.n	800527a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005274:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005278:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800527a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4413      	add	r3, r2
 800528c:	3304      	adds	r3, #4
 800528e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	78db      	ldrb	r3, [r3, #3]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d108      	bne.n	80052aa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2200      	movs	r2, #0
 800529c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	4619      	mov	r1, r3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f009 ff9d 	bl	800f1e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	461a      	mov	r2, r3
 80052b8:	2302      	movs	r3, #2
 80052ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	461a      	mov	r2, r3
 80052d4:	2320      	movs	r3, #32
 80052d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ee:	461a      	mov	r2, r3
 80052f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	3301      	adds	r3, #1
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	f47f af62 	bne.w	80051ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f004 fda6 	bl	8009e60 <USB_ReadInterrupts>
 8005314:	4603      	mov	r3, r0
 8005316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800531a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800531e:	f040 80db 	bne.w	80054d8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f004 fdc7 	bl	8009eba <USB_ReadDevAllInEpInterrupt>
 800532c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005332:	e0cd      	b.n	80054d0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 80c2 	beq.w	80054c4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	4611      	mov	r1, r2
 800534a:	4618      	mov	r0, r3
 800534c:	f004 fded 	bl	8009f2a <USB_ReadDevInEPInterrupt>
 8005350:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d057      	beq.n	800540c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	2201      	movs	r2, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	43db      	mvns	r3, r3
 8005376:	69f9      	ldr	r1, [r7, #28]
 8005378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800537c:	4013      	ands	r3, r2
 800537e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	461a      	mov	r2, r3
 800538e:	2301      	movs	r3, #1
 8005390:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d132      	bne.n	8005400 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539e:	4613      	mov	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	334c      	adds	r3, #76	; 0x4c
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4403      	add	r3, r0
 80053ba:	3348      	adds	r3, #72	; 0x48
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4419      	add	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c4:	4613      	mov	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4403      	add	r3, r0
 80053ce:	334c      	adds	r3, #76	; 0x4c
 80053d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d113      	bne.n	8005400 <HAL_PCD_IRQHandler+0x3a2>
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	4613      	mov	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3354      	adds	r3, #84	; 0x54
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d108      	bne.n	8005400 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053f8:	461a      	mov	r2, r3
 80053fa:	2101      	movs	r1, #1
 80053fc:	f004 fdf4 	bl	8009fe8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	b2db      	uxtb	r3, r3
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f009 fe67 	bl	800f0da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	461a      	mov	r2, r3
 8005424:	2308      	movs	r3, #8
 8005426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	461a      	mov	r2, r3
 8005440:	2310      	movs	r3, #16
 8005442:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d008      	beq.n	8005460 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545a:	461a      	mov	r2, r3
 800545c:	2340      	movs	r3, #64	; 0x40
 800545e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d023      	beq.n	80054b2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800546a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800546c:	6a38      	ldr	r0, [r7, #32]
 800546e:	f003 fcd5 	bl	8008e1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	3338      	adds	r3, #56	; 0x38
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4413      	add	r3, r2
 8005482:	3304      	adds	r3, #4
 8005484:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	78db      	ldrb	r3, [r3, #3]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d108      	bne.n	80054a0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2200      	movs	r2, #0
 8005492:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	b2db      	uxtb	r3, r3
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f009 feb4 	bl	800f208 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ac:	461a      	mov	r2, r3
 80054ae:	2302      	movs	r3, #2
 80054b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80054bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fcdb 	bl	8005e7a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	3301      	adds	r3, #1
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f47f af2e 	bne.w	8005334 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f004 fcbf 	bl	8009e60 <USB_ReadInterrupts>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ec:	d122      	bne.n	8005534 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005508:	2b01      	cmp	r3, #1
 800550a:	d108      	bne.n	800551e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005514:	2100      	movs	r1, #0
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fec2 	bl	80062a0 <HAL_PCDEx_LPM_Callback>
 800551c:	e002      	b.n	8005524 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f009 fe52 	bl	800f1c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695a      	ldr	r2, [r3, #20]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005532:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f004 fc91 	bl	8009e60 <USB_ReadInterrupts>
 800553e:	4603      	mov	r3, r0
 8005540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005548:	d112      	bne.n	8005570 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d102      	bne.n	8005560 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f009 fe0e 	bl	800f17c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800556e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f004 fc73 	bl	8009e60 <USB_ReadInterrupts>
 800557a:	4603      	mov	r3, r0
 800557c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005584:	f040 80b7 	bne.w	80056f6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005596:	f023 0301 	bic.w	r3, r3, #1
 800559a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2110      	movs	r1, #16
 80055a2:	4618      	mov	r0, r3
 80055a4:	f003 fc3a 	bl	8008e1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055a8:	2300      	movs	r3, #0
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ac:	e046      	b.n	800563c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ba:	461a      	mov	r2, r3
 80055bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ee:	461a      	mov	r2, r3
 80055f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	440a      	add	r2, r1
 800560c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005610:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005614:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	440a      	add	r2, r1
 800562c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005634:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005638:	3301      	adds	r3, #1
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005642:	429a      	cmp	r2, r3
 8005644:	d3b3      	bcc.n	80055ae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005654:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005658:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005672:	f043 030b 	orr.w	r3, r3, #11
 8005676:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005688:	f043 030b 	orr.w	r3, r3, #11
 800568c:	6453      	str	r3, [r2, #68]	; 0x44
 800568e:	e015      	b.n	80056bc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800569e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80056a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056b6:	f043 030b 	orr.w	r3, r3, #11
 80056ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056e0:	461a      	mov	r2, r3
 80056e2:	f004 fc81 	bl	8009fe8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80056f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f004 fbb0 	bl	8009e60 <USB_ReadInterrupts>
 8005700:	4603      	mov	r3, r0
 8005702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	d124      	bne.n	8005756 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f004 fc46 	bl	8009fa2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f003 fbfb 	bl	8008f16 <USB_GetDevSpeed>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681c      	ldr	r4, [r3, #0]
 800572c:	f001 fa78 	bl	8006c20 <HAL_RCC_GetHCLKFreq>
 8005730:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005736:	b2db      	uxtb	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	4620      	mov	r0, r4
 800573c:	f003 f8fa 	bl	8008934 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f009 fcf2 	bl	800f12a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695a      	ldr	r2, [r3, #20]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005754:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f004 fb80 	bl	8009e60 <USB_ReadInterrupts>
 8005760:	4603      	mov	r3, r0
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b08      	cmp	r3, #8
 8005768:	d10a      	bne.n	8005780 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f009 fccf 	bl	800f10e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f002 0208 	and.w	r2, r2, #8
 800577e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4618      	mov	r0, r3
 8005786:	f004 fb6b 	bl	8009e60 <USB_ReadInterrupts>
 800578a:	4603      	mov	r3, r0
 800578c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005790:	2b80      	cmp	r3, #128	; 0x80
 8005792:	d122      	bne.n	80057da <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057a0:	2301      	movs	r3, #1
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
 80057a4:	e014      	b.n	80057d0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057aa:	4613      	mov	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d105      	bne.n	80057ca <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fb27 	bl	8005e18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	3301      	adds	r3, #1
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d3e5      	bcc.n	80057a6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f004 fb3e 	bl	8009e60 <USB_ReadInterrupts>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ee:	d13b      	bne.n	8005868 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057f0:	2301      	movs	r3, #1
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
 80057f4:	e02b      	b.n	800584e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580a:	4613      	mov	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	3340      	adds	r3, #64	; 0x40
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d115      	bne.n	8005848 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800581c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800581e:	2b00      	cmp	r3, #0
 8005820:	da12      	bge.n	8005848 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005826:	4613      	mov	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	440b      	add	r3, r1
 8005830:	333f      	adds	r3, #63	; 0x3f
 8005832:	2201      	movs	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	b2db      	uxtb	r3, r3
 800583a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800583e:	b2db      	uxtb	r3, r3
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fae8 	bl	8005e18 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	3301      	adds	r3, #1
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005854:	429a      	cmp	r2, r3
 8005856:	d3ce      	bcc.n	80057f6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f004 faf7 	bl	8009e60 <USB_ReadInterrupts>
 8005872:	4603      	mov	r3, r0
 8005874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800587c:	d155      	bne.n	800592a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800587e:	2301      	movs	r3, #1
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
 8005882:	e045      	b.n	8005910 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d12e      	bne.n	800590a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da2b      	bge.n	800590a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80058be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d121      	bne.n	800590a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ca:	4613      	mov	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005906:	6053      	str	r3, [r2, #4]
            break;
 8005908:	e007      	b.n	800591a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	3301      	adds	r3, #1
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005916:	429a      	cmp	r2, r3
 8005918:	d3b4      	bcc.n	8005884 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005928:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f004 fa96 	bl	8009e60 <USB_ReadInterrupts>
 8005934:	4603      	mov	r3, r0
 8005936:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593e:	d10a      	bne.n	8005956 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f009 fc73 	bl	800f22c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f004 fa80 	bl	8009e60 <USB_ReadInterrupts>
 8005960:	4603      	mov	r3, r0
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b04      	cmp	r3, #4
 8005968:	d115      	bne.n	8005996 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f009 fc63 	bl	800f248 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6859      	ldr	r1, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
 8005992:	e000      	b.n	8005996 <HAL_PCD_IRQHandler+0x938>
      return;
 8005994:	bf00      	nop
    }
  }
}
 8005996:	3734      	adds	r7, #52	; 0x34
 8005998:	46bd      	mov	sp, r7
 800599a:	bd90      	pop	{r4, r7, pc}

0800599c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_PCD_SetAddress+0x1a>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e013      	b.n	80059de <HAL_PCD_SetAddress+0x42>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	78fa      	ldrb	r2, [r7, #3]
 80059c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	4611      	mov	r1, r2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f004 f9de 	bl	8009d90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	4608      	mov	r0, r1
 80059f0:	4611      	mov	r1, r2
 80059f2:	461a      	mov	r2, r3
 80059f4:	4603      	mov	r3, r0
 80059f6:	70fb      	strb	r3, [r7, #3]
 80059f8:	460b      	mov	r3, r1
 80059fa:	803b      	strh	r3, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	da0f      	bge.n	8005a2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	f003 020f 	and.w	r2, r3, #15
 8005a12:	4613      	mov	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	3338      	adds	r3, #56	; 0x38
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	4413      	add	r3, r2
 8005a20:	3304      	adds	r3, #4
 8005a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	705a      	strb	r2, [r3, #1]
 8005a2a:	e00f      	b.n	8005a4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	f003 020f 	and.w	r2, r3, #15
 8005a32:	4613      	mov	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	4413      	add	r3, r2
 8005a42:	3304      	adds	r3, #4
 8005a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a58:	883a      	ldrh	r2, [r7, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	78ba      	ldrb	r2, [r7, #2]
 8005a62:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a76:	78bb      	ldrb	r3, [r7, #2]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d102      	bne.n	8005a82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_PCD_EP_Open+0xaa>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e00e      	b.n	8005aae <HAL_PCD_EP_Open+0xc8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68f9      	ldr	r1, [r7, #12]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f003 fa5e 	bl	8008f60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005aac:	7afb      	ldrb	r3, [r7, #11]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	da0f      	bge.n	8005aea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	f003 020f 	and.w	r2, r3, #15
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	3338      	adds	r3, #56	; 0x38
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	3304      	adds	r3, #4
 8005ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	705a      	strb	r2, [r3, #1]
 8005ae8:	e00f      	b.n	8005b0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	f003 020f 	and.w	r2, r3, #15
 8005af0:	4613      	mov	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	4413      	add	r3, r2
 8005b00:	3304      	adds	r3, #4
 8005b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	f003 030f 	and.w	r3, r3, #15
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_PCD_EP_Close+0x6e>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e00e      	b.n	8005b42 <HAL_PCD_EP_Close+0x8c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68f9      	ldr	r1, [r7, #12]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f003 fa9c 	bl	8009070 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b086      	sub	sp, #24
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
 8005b56:	460b      	mov	r3, r1
 8005b58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b5a:	7afb      	ldrb	r3, [r7, #11]
 8005b5c:	f003 020f 	and.w	r2, r3, #15
 8005b60:	4613      	mov	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	3304      	adds	r3, #4
 8005b72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2200      	movs	r2, #0
 8005b84:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b8c:	7afb      	ldrb	r3, [r7, #11]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d102      	bne.n	8005ba6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ba6:	7afb      	ldrb	r3, [r7, #11]
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d109      	bne.n	8005bc4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6979      	ldr	r1, [r7, #20]
 8005bbe:	f003 fd7b 	bl	80096b8 <USB_EP0StartXfer>
 8005bc2:	e008      	b.n	8005bd6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6979      	ldr	r1, [r7, #20]
 8005bd2:	f003 fb29 	bl	8009228 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	f003 020f 	and.w	r2, r3, #15
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005c02:	681b      	ldr	r3, [r3, #0]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c20:	7afb      	ldrb	r3, [r7, #11]
 8005c22:	f003 020f 	and.w	r2, r3, #15
 8005c26:	4613      	mov	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	3338      	adds	r3, #56	; 0x38
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	3304      	adds	r3, #4
 8005c36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2200      	movs	r2, #0
 8005c48:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c50:	7afb      	ldrb	r3, [r7, #11]
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d102      	bne.n	8005c6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d109      	bne.n	8005c88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	6979      	ldr	r1, [r7, #20]
 8005c82:	f003 fd19 	bl	80096b8 <USB_EP0StartXfer>
 8005c86:	e008      	b.n	8005c9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	6979      	ldr	r1, [r7, #20]
 8005c96:	f003 fac7 	bl	8009228 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	f003 020f 	and.w	r2, r3, #15
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d901      	bls.n	8005cc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e050      	b.n	8005d64 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	da0f      	bge.n	8005cea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	f003 020f 	and.w	r2, r3, #15
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	3338      	adds	r3, #56	; 0x38
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	3304      	adds	r3, #4
 8005ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	705a      	strb	r2, [r3, #1]
 8005ce8:	e00d      	b.n	8005d06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cea:	78fa      	ldrb	r2, [r7, #3]
 8005cec:	4613      	mov	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_PCD_EP_SetStall+0x82>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e01e      	b.n	8005d64 <HAL_PCD_EP_SetStall+0xc0>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68f9      	ldr	r1, [r7, #12]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f003 ff57 	bl	8009be8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	b2d9      	uxtb	r1, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d54:	461a      	mov	r2, r3
 8005d56:	f004 f947 	bl	8009fe8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	f003 020f 	and.w	r2, r3, #15
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d901      	bls.n	8005d8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e042      	b.n	8005e10 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	da0f      	bge.n	8005db2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	f003 020f 	and.w	r2, r3, #15
 8005d98:	4613      	mov	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	3338      	adds	r3, #56	; 0x38
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	4413      	add	r3, r2
 8005da6:	3304      	adds	r3, #4
 8005da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	705a      	strb	r2, [r3, #1]
 8005db0:	e00f      	b.n	8005dd2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	f003 020f 	and.w	r2, r3, #15
 8005db8:	4613      	mov	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	3304      	adds	r3, #4
 8005dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_PCD_EP_ClrStall+0x86>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e00e      	b.n	8005e10 <HAL_PCD_EP_ClrStall+0xa4>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f003 ff5f 	bl	8009cc4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	da0c      	bge.n	8005e46 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	f003 020f 	and.w	r2, r3, #15
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	3338      	adds	r3, #56	; 0x38
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4413      	add	r3, r2
 8005e40:	3304      	adds	r3, #4
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	e00c      	b.n	8005e60 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e46:	78fb      	ldrb	r3, [r7, #3]
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68f9      	ldr	r1, [r7, #12]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f003 fd7e 	bl	8009968 <USB_EPStopXfer>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e70:	7afb      	ldrb	r3, [r7, #11]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b08a      	sub	sp, #40	; 0x28
 8005e7e:	af02      	add	r7, sp, #8
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	3338      	adds	r3, #56	; 0x38
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d901      	bls.n	8005eb2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e06c      	b.n	8005f8c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d902      	bls.n	8005ece <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3303      	adds	r3, #3
 8005ed2:	089b      	lsrs	r3, r3, #2
 8005ed4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ed6:	e02b      	b.n	8005f30 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	699a      	ldr	r2, [r3, #24]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d902      	bls.n	8005ef4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	3303      	adds	r3, #3
 8005ef8:	089b      	lsrs	r3, r3, #2
 8005efa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6919      	ldr	r1, [r3, #16]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	4603      	mov	r3, r0
 8005f12:	6978      	ldr	r0, [r7, #20]
 8005f14:	f003 fdd2 	bl	8009abc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	441a      	add	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1a      	ldr	r2, [r3, #32]
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	441a      	add	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d809      	bhi.n	8005f5a <PCD_WriteEmptyTxFifo+0xe0>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d203      	bcs.n	8005f5a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1be      	bne.n	8005ed8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d811      	bhi.n	8005f8a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	43db      	mvns	r3, r3
 8005f80:	6939      	ldr	r1, [r7, #16]
 8005f82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f86:	4013      	ands	r3, r2
 8005f88:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	333c      	adds	r3, #60	; 0x3c
 8005fac:	3304      	adds	r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d17b      	bne.n	80060c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f003 0308 	and.w	r3, r3, #8
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d015      	beq.n	8006000 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4a61      	ldr	r2, [pc, #388]	; (800615c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	f240 80b9 	bls.w	8006150 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80b3 	beq.w	8006150 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffc:	6093      	str	r3, [r2, #8]
 8005ffe:	e0a7      	b.n	8006150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006016:	461a      	mov	r2, r3
 8006018:	2320      	movs	r3, #32
 800601a:	6093      	str	r3, [r2, #8]
 800601c:	e098      	b.n	8006150 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006024:	2b00      	cmp	r3, #0
 8006026:	f040 8093 	bne.w	8006150 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	4a4b      	ldr	r2, [pc, #300]	; (800615c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d90f      	bls.n	8006052 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	461a      	mov	r2, r3
 800604a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800604e:	6093      	str	r3, [r2, #8]
 8006050:	e07e      	b.n	8006150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	4413      	add	r3, r2
 8006064:	3304      	adds	r3, #4
 8006066:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	0159      	lsls	r1, r3, #5
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	440b      	add	r3, r1
 8006074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d114      	bne.n	80060b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800609c:	461a      	mov	r2, r3
 800609e:	2101      	movs	r1, #1
 80060a0:	f003 ffa2 	bl	8009fe8 <USB_EP0_OutStart>
 80060a4:	e006      	b.n	80060b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	441a      	add	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f008 fff2 	bl	800f0a4 <HAL_PCD_DataOutStageCallback>
 80060c0:	e046      	b.n	8006150 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	4a26      	ldr	r2, [pc, #152]	; (8006160 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d124      	bne.n	8006114 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	461a      	mov	r2, r3
 80060e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e6:	6093      	str	r3, [r2, #8]
 80060e8:	e032      	b.n	8006150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	461a      	mov	r2, r3
 8006102:	2320      	movs	r3, #32
 8006104:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f008 ffc9 	bl	800f0a4 <HAL_PCD_DataOutStageCallback>
 8006112:	e01d      	b.n	8006150 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d114      	bne.n	8006144 <PCD_EP_OutXfrComplete_int+0x1b0>
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	4613      	mov	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d108      	bne.n	8006144 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800613c:	461a      	mov	r2, r3
 800613e:	2100      	movs	r1, #0
 8006140:	f003 ff52 	bl	8009fe8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f008 ffaa 	bl	800f0a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	4f54300a 	.word	0x4f54300a
 8006160:	4f54310a 	.word	0x4f54310a

08006164 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	333c      	adds	r3, #60	; 0x3c
 800617c:	3304      	adds	r3, #4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4a15      	ldr	r2, [pc, #84]	; (80061ec <PCD_EP_OutSetupPacket_int+0x88>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d90e      	bls.n	80061b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	461a      	mov	r2, r3
 80061b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f008 ff61 	bl	800f080 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <PCD_EP_OutSetupPacket_int+0x88>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d90c      	bls.n	80061e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d108      	bne.n	80061e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061d8:	461a      	mov	r2, r3
 80061da:	2101      	movs	r1, #1
 80061dc:	f003 ff04 	bl	8009fe8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	4f54300a 	.word	0x4f54300a

080061f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]
 80061fc:	4613      	mov	r3, r2
 80061fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d107      	bne.n	800621e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800620e:	883b      	ldrh	r3, [r7, #0]
 8006210:	0419      	lsls	r1, r3, #16
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	430a      	orrs	r2, r1
 800621a:	629a      	str	r2, [r3, #40]	; 0x28
 800621c:	e028      	b.n	8006270 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	0c1b      	lsrs	r3, r3, #16
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	4413      	add	r3, r2
 800622a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]
 8006230:	e00d      	b.n	800624e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	3340      	adds	r3, #64	; 0x40
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	0c1b      	lsrs	r3, r3, #16
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	4413      	add	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	3301      	adds	r3, #1
 800624c:	73fb      	strb	r3, [r7, #15]
 800624e:	7bfa      	ldrb	r2, [r7, #15]
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	3b01      	subs	r3, #1
 8006254:	429a      	cmp	r2, r3
 8006256:	d3ec      	bcc.n	8006232 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006258:	883b      	ldrh	r3, [r7, #0]
 800625a:	0418      	lsls	r0, r3, #16
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6819      	ldr	r1, [r3, #0]
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	3b01      	subs	r3, #1
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	4302      	orrs	r2, r0
 8006268:	3340      	adds	r3, #64	; 0x40
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	440b      	add	r3, r1
 800626e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	460b      	mov	r3, r1
 8006288:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	887a      	ldrh	r2, [r7, #2]
 8006290:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80062c2:	2300      	movs	r3, #0
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	4b20      	ldr	r3, [pc, #128]	; (8006348 <HAL_PWREx_EnableOverDrive+0x90>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <HAL_PWREx_EnableOverDrive+0x90>)
 80062cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d0:	6413      	str	r3, [r2, #64]	; 0x40
 80062d2:	4b1d      	ldr	r3, [pc, #116]	; (8006348 <HAL_PWREx_EnableOverDrive+0x90>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80062de:	4b1b      	ldr	r3, [pc, #108]	; (800634c <HAL_PWREx_EnableOverDrive+0x94>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062e4:	f7fd f89a 	bl	800341c <HAL_GetTick>
 80062e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062ea:	e009      	b.n	8006300 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062ec:	f7fd f896 	bl	800341c <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062fa:	d901      	bls.n	8006300 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e01f      	b.n	8006340 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006300:	4b13      	ldr	r3, [pc, #76]	; (8006350 <HAL_PWREx_EnableOverDrive+0x98>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630c:	d1ee      	bne.n	80062ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800630e:	4b11      	ldr	r3, [pc, #68]	; (8006354 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006310:	2201      	movs	r2, #1
 8006312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006314:	f7fd f882 	bl	800341c <HAL_GetTick>
 8006318:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800631a:	e009      	b.n	8006330 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800631c:	f7fd f87e 	bl	800341c <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800632a:	d901      	bls.n	8006330 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e007      	b.n	8006340 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <HAL_PWREx_EnableOverDrive+0x98>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800633c:	d1ee      	bne.n	800631c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40023800 	.word	0x40023800
 800634c:	420e0040 	.word	0x420e0040
 8006350:	40007000 	.word	0x40007000
 8006354:	420e0044 	.word	0x420e0044

08006358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e267      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d075      	beq.n	8006462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006376:	4b88      	ldr	r3, [pc, #544]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 030c 	and.w	r3, r3, #12
 800637e:	2b04      	cmp	r3, #4
 8006380:	d00c      	beq.n	800639c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006382:	4b85      	ldr	r3, [pc, #532]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800638a:	2b08      	cmp	r3, #8
 800638c:	d112      	bne.n	80063b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800638e:	4b82      	ldr	r3, [pc, #520]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800639a:	d10b      	bne.n	80063b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800639c:	4b7e      	ldr	r3, [pc, #504]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d05b      	beq.n	8006460 <HAL_RCC_OscConfig+0x108>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d157      	bne.n	8006460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e242      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063bc:	d106      	bne.n	80063cc <HAL_RCC_OscConfig+0x74>
 80063be:	4b76      	ldr	r3, [pc, #472]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a75      	ldr	r2, [pc, #468]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e01d      	b.n	8006408 <HAL_RCC_OscConfig+0xb0>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063d4:	d10c      	bne.n	80063f0 <HAL_RCC_OscConfig+0x98>
 80063d6:	4b70      	ldr	r3, [pc, #448]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6f      	ldr	r2, [pc, #444]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	4b6d      	ldr	r3, [pc, #436]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a6c      	ldr	r2, [pc, #432]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e00b      	b.n	8006408 <HAL_RCC_OscConfig+0xb0>
 80063f0:	4b69      	ldr	r3, [pc, #420]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a68      	ldr	r2, [pc, #416]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	4b66      	ldr	r3, [pc, #408]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a65      	ldr	r2, [pc, #404]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d013      	beq.n	8006438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006410:	f7fd f804 	bl	800341c <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006418:	f7fd f800 	bl	800341c <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b64      	cmp	r3, #100	; 0x64
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e207      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642a:	4b5b      	ldr	r3, [pc, #364]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0f0      	beq.n	8006418 <HAL_RCC_OscConfig+0xc0>
 8006436:	e014      	b.n	8006462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006438:	f7fc fff0 	bl	800341c <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006440:	f7fc ffec 	bl	800341c <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	; 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e1f3      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006452:	4b51      	ldr	r3, [pc, #324]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f0      	bne.n	8006440 <HAL_RCC_OscConfig+0xe8>
 800645e:	e000      	b.n	8006462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d063      	beq.n	8006536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800646e:	4b4a      	ldr	r3, [pc, #296]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 030c 	and.w	r3, r3, #12
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800647a:	4b47      	ldr	r3, [pc, #284]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006482:	2b08      	cmp	r3, #8
 8006484:	d11c      	bne.n	80064c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006486:	4b44      	ldr	r3, [pc, #272]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d116      	bne.n	80064c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006492:	4b41      	ldr	r3, [pc, #260]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_RCC_OscConfig+0x152>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d001      	beq.n	80064aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e1c7      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064aa:	4b3b      	ldr	r3, [pc, #236]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4937      	ldr	r1, [pc, #220]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064be:	e03a      	b.n	8006536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d020      	beq.n	800650a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c8:	4b34      	ldr	r3, [pc, #208]	; (800659c <HAL_RCC_OscConfig+0x244>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ce:	f7fc ffa5 	bl	800341c <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d6:	f7fc ffa1 	bl	800341c <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e1a8      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e8:	4b2b      	ldr	r3, [pc, #172]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f4:	4b28      	ldr	r3, [pc, #160]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	4925      	ldr	r1, [pc, #148]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006504:	4313      	orrs	r3, r2
 8006506:	600b      	str	r3, [r1, #0]
 8006508:	e015      	b.n	8006536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800650a:	4b24      	ldr	r3, [pc, #144]	; (800659c <HAL_RCC_OscConfig+0x244>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fc ff84 	bl	800341c <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006518:	f7fc ff80 	bl	800341c <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e187      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d036      	beq.n	80065b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d016      	beq.n	8006578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800654a:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <HAL_RCC_OscConfig+0x248>)
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006550:	f7fc ff64 	bl	800341c <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006558:	f7fc ff60 	bl	800341c <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e167      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800656c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f0      	beq.n	8006558 <HAL_RCC_OscConfig+0x200>
 8006576:	e01b      	b.n	80065b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <HAL_RCC_OscConfig+0x248>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800657e:	f7fc ff4d 	bl	800341c <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006584:	e00e      	b.n	80065a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006586:	f7fc ff49 	bl	800341c <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d907      	bls.n	80065a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e150      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 8006598:	40023800 	.word	0x40023800
 800659c:	42470000 	.word	0x42470000
 80065a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a4:	4b88      	ldr	r3, [pc, #544]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1ea      	bne.n	8006586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8097 	beq.w	80066ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065c2:	4b81      	ldr	r3, [pc, #516]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ce:	2300      	movs	r3, #0
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	4b7d      	ldr	r3, [pc, #500]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	4a7c      	ldr	r2, [pc, #496]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065dc:	6413      	str	r3, [r2, #64]	; 0x40
 80065de:	4b7a      	ldr	r3, [pc, #488]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e6:	60bb      	str	r3, [r7, #8]
 80065e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ee:	4b77      	ldr	r3, [pc, #476]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d118      	bne.n	800662c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065fa:	4b74      	ldr	r3, [pc, #464]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a73      	ldr	r2, [pc, #460]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 8006600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006606:	f7fc ff09 	bl	800341c <HAL_GetTick>
 800660a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800660e:	f7fc ff05 	bl	800341c <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e10c      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006620:	4b6a      	ldr	r3, [pc, #424]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f0      	beq.n	800660e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d106      	bne.n	8006642 <HAL_RCC_OscConfig+0x2ea>
 8006634:	4b64      	ldr	r3, [pc, #400]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	4a63      	ldr	r2, [pc, #396]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6713      	str	r3, [r2, #112]	; 0x70
 8006640:	e01c      	b.n	800667c <HAL_RCC_OscConfig+0x324>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	2b05      	cmp	r3, #5
 8006648:	d10c      	bne.n	8006664 <HAL_RCC_OscConfig+0x30c>
 800664a:	4b5f      	ldr	r3, [pc, #380]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	4a5e      	ldr	r2, [pc, #376]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006650:	f043 0304 	orr.w	r3, r3, #4
 8006654:	6713      	str	r3, [r2, #112]	; 0x70
 8006656:	4b5c      	ldr	r3, [pc, #368]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665a:	4a5b      	ldr	r2, [pc, #364]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	6713      	str	r3, [r2, #112]	; 0x70
 8006662:	e00b      	b.n	800667c <HAL_RCC_OscConfig+0x324>
 8006664:	4b58      	ldr	r3, [pc, #352]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	4a57      	ldr	r2, [pc, #348]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800666a:	f023 0301 	bic.w	r3, r3, #1
 800666e:	6713      	str	r3, [r2, #112]	; 0x70
 8006670:	4b55      	ldr	r3, [pc, #340]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006674:	4a54      	ldr	r2, [pc, #336]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006676:	f023 0304 	bic.w	r3, r3, #4
 800667a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d015      	beq.n	80066b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006684:	f7fc feca 	bl	800341c <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800668a:	e00a      	b.n	80066a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800668c:	f7fc fec6 	bl	800341c <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f241 3288 	movw	r2, #5000	; 0x1388
 800669a:	4293      	cmp	r3, r2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e0cb      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a2:	4b49      	ldr	r3, [pc, #292]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0ee      	beq.n	800668c <HAL_RCC_OscConfig+0x334>
 80066ae:	e014      	b.n	80066da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066b0:	f7fc feb4 	bl	800341c <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b6:	e00a      	b.n	80066ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066b8:	f7fc feb0 	bl	800341c <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e0b5      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ce:	4b3e      	ldr	r3, [pc, #248]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1ee      	bne.n	80066b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d105      	bne.n	80066ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e0:	4b39      	ldr	r3, [pc, #228]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	4a38      	ldr	r2, [pc, #224]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80a1 	beq.w	8006838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066f6:	4b34      	ldr	r3, [pc, #208]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 030c 	and.w	r3, r3, #12
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d05c      	beq.n	80067bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d141      	bne.n	800678e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800670a:	4b31      	ldr	r3, [pc, #196]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006710:	f7fc fe84 	bl	800341c <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006718:	f7fc fe80 	bl	800341c <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e087      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800672a:	4b27      	ldr	r3, [pc, #156]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1f0      	bne.n	8006718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	019b      	lsls	r3, r3, #6
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	3b01      	subs	r3, #1
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	061b      	lsls	r3, r3, #24
 800675a:	491b      	ldr	r1, [pc, #108]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800675c:	4313      	orrs	r3, r2
 800675e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006760:	4b1b      	ldr	r3, [pc, #108]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006766:	f7fc fe59 	bl	800341c <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800676e:	f7fc fe55 	bl	800341c <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e05c      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006780:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCC_OscConfig+0x416>
 800678c:	e054      	b.n	8006838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006794:	f7fc fe42 	bl	800341c <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679c:	f7fc fe3e 	bl	800341c <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e045      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ae:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1f0      	bne.n	800679c <HAL_RCC_OscConfig+0x444>
 80067ba:	e03d      	b.n	8006838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d107      	bne.n	80067d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e038      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40007000 	.word	0x40007000
 80067d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067d4:	4b1b      	ldr	r3, [pc, #108]	; (8006844 <HAL_RCC_OscConfig+0x4ec>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d028      	beq.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d121      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d11a      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006804:	4013      	ands	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800680a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800680c:	4293      	cmp	r3, r2
 800680e:	d111      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	3b01      	subs	r3, #1
 800681e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006820:	429a      	cmp	r2, r3
 8006822:	d107      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40023800 	.word	0x40023800

08006848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e0cc      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800685c:	4b68      	ldr	r3, [pc, #416]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d90c      	bls.n	8006884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800686a:	4b65      	ldr	r3, [pc, #404]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006872:	4b63      	ldr	r3, [pc, #396]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d001      	beq.n	8006884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e0b8      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d020      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800689c:	4b59      	ldr	r3, [pc, #356]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4a58      	ldr	r2, [pc, #352]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068b4:	4b53      	ldr	r3, [pc, #332]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	4a52      	ldr	r2, [pc, #328]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c0:	4b50      	ldr	r3, [pc, #320]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	494d      	ldr	r1, [pc, #308]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d044      	beq.n	8006968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d107      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e6:	4b47      	ldr	r3, [pc, #284]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d119      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e07f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d003      	beq.n	8006906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006902:	2b03      	cmp	r3, #3
 8006904:	d107      	bne.n	8006916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006906:	4b3f      	ldr	r3, [pc, #252]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e06f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006916:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e067      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006926:	4b37      	ldr	r3, [pc, #220]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f023 0203 	bic.w	r2, r3, #3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4934      	ldr	r1, [pc, #208]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	4313      	orrs	r3, r2
 8006936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006938:	f7fc fd70 	bl	800341c <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693e:	e00a      	b.n	8006956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006940:	f7fc fd6c 	bl	800341c <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f241 3288 	movw	r2, #5000	; 0x1388
 800694e:	4293      	cmp	r3, r2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e04f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006956:	4b2b      	ldr	r3, [pc, #172]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 020c 	and.w	r2, r3, #12
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	429a      	cmp	r2, r3
 8006966:	d1eb      	bne.n	8006940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006968:	4b25      	ldr	r3, [pc, #148]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d20c      	bcs.n	8006990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006976:	4b22      	ldr	r3, [pc, #136]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800697e:	4b20      	ldr	r3, [pc, #128]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d001      	beq.n	8006990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e032      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800699c:	4b19      	ldr	r3, [pc, #100]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	4916      	ldr	r1, [pc, #88]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069ba:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	490e      	ldr	r1, [pc, #56]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069ce:	f000 f821 	bl	8006a14 <HAL_RCC_GetSysClockFreq>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	091b      	lsrs	r3, r3, #4
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	490a      	ldr	r1, [pc, #40]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 80069e0:	5ccb      	ldrb	r3, [r1, r3]
 80069e2:	fa22 f303 	lsr.w	r3, r2, r3
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069ea:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <HAL_RCC_ClockConfig+0x1c8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fa fe40 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	40023c00 	.word	0x40023c00
 8006a04:	40023800 	.word	0x40023800
 8006a08:	080123f8 	.word	0x080123f8
 8006a0c:	20000000 	.word	0x20000000
 8006a10:	20000080 	.word	0x20000080

08006a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a18:	b094      	sub	sp, #80	; 0x50
 8006a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a20:	2300      	movs	r3, #0
 8006a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a24:	2300      	movs	r3, #0
 8006a26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a2c:	4b79      	ldr	r3, [pc, #484]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 030c 	and.w	r3, r3, #12
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d00d      	beq.n	8006a54 <HAL_RCC_GetSysClockFreq+0x40>
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	f200 80e1 	bhi.w	8006c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <HAL_RCC_GetSysClockFreq+0x34>
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d003      	beq.n	8006a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8006a46:	e0db      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a48:	4b73      	ldr	r3, [pc, #460]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a4c:	e0db      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a4e:	4b73      	ldr	r3, [pc, #460]	; (8006c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8006a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a52:	e0d8      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a54:	4b6f      	ldr	r3, [pc, #444]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a5e:	4b6d      	ldr	r3, [pc, #436]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d063      	beq.n	8006b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a6a:	4b6a      	ldr	r3, [pc, #424]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	099b      	lsrs	r3, r3, #6
 8006a70:	2200      	movs	r2, #0
 8006a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a7e:	2300      	movs	r3, #0
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
 8006a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a86:	4622      	mov	r2, r4
 8006a88:	462b      	mov	r3, r5
 8006a8a:	f04f 0000 	mov.w	r0, #0
 8006a8e:	f04f 0100 	mov.w	r1, #0
 8006a92:	0159      	lsls	r1, r3, #5
 8006a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a98:	0150      	lsls	r0, r2, #5
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	1a51      	subs	r1, r2, r1
 8006aa2:	6139      	str	r1, [r7, #16]
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ab8:	4659      	mov	r1, fp
 8006aba:	018b      	lsls	r3, r1, #6
 8006abc:	4651      	mov	r1, sl
 8006abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ac2:	4651      	mov	r1, sl
 8006ac4:	018a      	lsls	r2, r1, #6
 8006ac6:	4651      	mov	r1, sl
 8006ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8006acc:	4659      	mov	r1, fp
 8006ace:	eb63 0901 	sbc.w	r9, r3, r1
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ae6:	4690      	mov	r8, r2
 8006ae8:	4699      	mov	r9, r3
 8006aea:	4623      	mov	r3, r4
 8006aec:	eb18 0303 	adds.w	r3, r8, r3
 8006af0:	60bb      	str	r3, [r7, #8]
 8006af2:	462b      	mov	r3, r5
 8006af4:	eb49 0303 	adc.w	r3, r9, r3
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b06:	4629      	mov	r1, r5
 8006b08:	024b      	lsls	r3, r1, #9
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b10:	4621      	mov	r1, r4
 8006b12:	024a      	lsls	r2, r1, #9
 8006b14:	4610      	mov	r0, r2
 8006b16:	4619      	mov	r1, r3
 8006b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b24:	f7fa f850 	bl	8000bc8 <__aeabi_uldivmod>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b30:	e058      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b32:	4b38      	ldr	r3, [pc, #224]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	099b      	lsrs	r3, r3, #6
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b42:	623b      	str	r3, [r7, #32]
 8006b44:	2300      	movs	r3, #0
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
 8006b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	464b      	mov	r3, r9
 8006b50:	f04f 0000 	mov.w	r0, #0
 8006b54:	f04f 0100 	mov.w	r1, #0
 8006b58:	0159      	lsls	r1, r3, #5
 8006b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b5e:	0150      	lsls	r0, r2, #5
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4641      	mov	r1, r8
 8006b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b84:	ebb2 040a 	subs.w	r4, r2, sl
 8006b88:	eb63 050b 	sbc.w	r5, r3, fp
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	00eb      	lsls	r3, r5, #3
 8006b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b9a:	00e2      	lsls	r2, r4, #3
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	4643      	mov	r3, r8
 8006ba2:	18e3      	adds	r3, r4, r3
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	eb45 0303 	adc.w	r3, r5, r3
 8006bac:	607b      	str	r3, [r7, #4]
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bba:	4629      	mov	r1, r5
 8006bbc:	028b      	lsls	r3, r1, #10
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	028a      	lsls	r2, r1, #10
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bce:	2200      	movs	r2, #0
 8006bd0:	61bb      	str	r3, [r7, #24]
 8006bd2:	61fa      	str	r2, [r7, #28]
 8006bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bd8:	f7f9 fff6 	bl	8000bc8 <__aeabi_uldivmod>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4613      	mov	r3, r2
 8006be2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006be4:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	0c1b      	lsrs	r3, r3, #16
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	3301      	adds	r3, #1
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bfe:	e002      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c00:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3750      	adds	r7, #80	; 0x50
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c12:	bf00      	nop
 8006c14:	40023800 	.word	0x40023800
 8006c18:	00f42400 	.word	0x00f42400
 8006c1c:	007a1200 	.word	0x007a1200

08006c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c24:	4b03      	ldr	r3, [pc, #12]	; (8006c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c26:	681b      	ldr	r3, [r3, #0]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20000000 	.word	0x20000000

08006c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c3c:	f7ff fff0 	bl	8006c20 <HAL_RCC_GetHCLKFreq>
 8006c40:	4602      	mov	r2, r0
 8006c42:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	0a9b      	lsrs	r3, r3, #10
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	4903      	ldr	r1, [pc, #12]	; (8006c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c4e:	5ccb      	ldrb	r3, [r1, r3]
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	08012408 	.word	0x08012408

08006c60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	220f      	movs	r2, #15
 8006c6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c70:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <HAL_RCC_GetClockConfig+0x5c>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 0203 	and.w	r2, r3, #3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c7c:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <HAL_RCC_GetClockConfig+0x5c>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c88:	4b0c      	ldr	r3, [pc, #48]	; (8006cbc <HAL_RCC_GetClockConfig+0x5c>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c94:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <HAL_RCC_GetClockConfig+0x5c>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	08db      	lsrs	r3, r3, #3
 8006c9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ca2:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <HAL_RCC_GetClockConfig+0x60>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 020f 	and.w	r2, r3, #15
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	601a      	str	r2, [r3, #0]
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	40023c00 	.word	0x40023c00

08006cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10b      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d105      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d075      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cf8:	4b91      	ldr	r3, [pc, #580]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cfe:	f7fc fb8d 	bl	800341c <HAL_GetTick>
 8006d02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d04:	e008      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d06:	f7fc fb89 	bl	800341c <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e189      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d18:	4b8a      	ldr	r3, [pc, #552]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1f0      	bne.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	019a      	lsls	r2, r3, #6
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	071b      	lsls	r3, r3, #28
 8006d3c:	4981      	ldr	r1, [pc, #516]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01f      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d50:	4b7c      	ldr	r3, [pc, #496]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d56:	0f1b      	lsrs	r3, r3, #28
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	019a      	lsls	r2, r3, #6
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	061b      	lsls	r3, r3, #24
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	071b      	lsls	r3, r3, #28
 8006d70:	4974      	ldr	r1, [pc, #464]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006d78:	4b72      	ldr	r3, [pc, #456]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d7e:	f023 021f 	bic.w	r2, r3, #31
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	496e      	ldr	r1, [pc, #440]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00d      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	019a      	lsls	r2, r3, #6
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	061b      	lsls	r3, r3, #24
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	071b      	lsls	r3, r3, #28
 8006db0:	4964      	ldr	r1, [pc, #400]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006db8:	4b61      	ldr	r3, [pc, #388]	; (8006f40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dbe:	f7fc fb2d 	bl	800341c <HAL_GetTick>
 8006dc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006dc6:	f7fc fb29 	bl	800341c <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e129      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006dd8:	4b5a      	ldr	r3, [pc, #360]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0f0      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d105      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d079      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006dfc:	4b52      	ldr	r3, [pc, #328]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e02:	f7fc fb0b 	bl	800341c <HAL_GetTick>
 8006e06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e08:	e008      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006e0a:	f7fc fb07 	bl	800341c <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e107      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e1c:	4b49      	ldr	r3, [pc, #292]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e28:	d0ef      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d020      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e36:	4b43      	ldr	r3, [pc, #268]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e3c:	0f1b      	lsrs	r3, r3, #28
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	019a      	lsls	r2, r3, #6
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	061b      	lsls	r3, r3, #24
 8006e50:	431a      	orrs	r2, r3
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	071b      	lsls	r3, r3, #28
 8006e56:	493b      	ldr	r1, [pc, #236]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006e5e:	4b39      	ldr	r3, [pc, #228]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	021b      	lsls	r3, r3, #8
 8006e70:	4934      	ldr	r1, [pc, #208]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0308 	and.w	r3, r3, #8
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01e      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e84:	4b2f      	ldr	r3, [pc, #188]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8a:	0e1b      	lsrs	r3, r3, #24
 8006e8c:	f003 030f 	and.w	r3, r3, #15
 8006e90:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	019a      	lsls	r2, r3, #6
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	061b      	lsls	r3, r3, #24
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	071b      	lsls	r3, r3, #28
 8006ea4:	4927      	ldr	r1, [pc, #156]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006eac:	4b25      	ldr	r3, [pc, #148]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	4922      	ldr	r1, [pc, #136]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ec2:	4b21      	ldr	r3, [pc, #132]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ec8:	f7fc faa8 	bl	800341c <HAL_GetTick>
 8006ecc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ed0:	f7fc faa4 	bl	800341c <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e0a4      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ee2:	4b18      	ldr	r3, [pc, #96]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eee:	d1ef      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 808b 	beq.w	8007014 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	4a0f      	ldr	r2, [pc, #60]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f0e:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f1a:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a0b      	ldr	r2, [pc, #44]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f26:	f7fc fa79 	bl	800341c <HAL_GetTick>
 8006f2a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f2c:	e010      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f2e:	f7fc fa75 	bl	800341c <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d909      	bls.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e075      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006f40:	42470068 	.word	0x42470068
 8006f44:	40023800 	.word	0x40023800
 8006f48:	42470070 	.word	0x42470070
 8006f4c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f50:	4b38      	ldr	r3, [pc, #224]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0e8      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f5c:	4b36      	ldr	r3, [pc, #216]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d02f      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d028      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f7a:	4b2f      	ldr	r3, [pc, #188]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f84:	4b2d      	ldr	r3, [pc, #180]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006f86:	2201      	movs	r2, #1
 8006f88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f8a:	4b2c      	ldr	r3, [pc, #176]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006f90:	4a29      	ldr	r2, [pc, #164]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f96:	4b28      	ldr	r3, [pc, #160]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d114      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006fa2:	f7fc fa3b 	bl	800341c <HAL_GetTick>
 8006fa6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fa8:	e00a      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006faa:	f7fc fa37 	bl	800341c <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d901      	bls.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e035      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fc0:	4b1d      	ldr	r3, [pc, #116]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d0ee      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd8:	d10d      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006fda:	4b17      	ldr	r3, [pc, #92]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fee:	4912      	ldr	r1, [pc, #72]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	608b      	str	r3, [r1, #8]
 8006ff4:	e005      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006ff6:	4b10      	ldr	r3, [pc, #64]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	4a0f      	ldr	r2, [pc, #60]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ffc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007000:	6093      	str	r3, [r2, #8]
 8007002:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007004:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800700e:	490a      	ldr	r1, [pc, #40]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007010:	4313      	orrs	r3, r2
 8007012:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b00      	cmp	r3, #0
 800701e:	d004      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007026:	4b06      	ldr	r3, [pc, #24]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007028:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40007000 	.word	0x40007000
 8007038:	40023800 	.word	0x40023800
 800703c:	42470e40 	.word	0x42470e40
 8007040:	424711e0 	.word	0x424711e0

08007044 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e025      	b.n	80070a4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d106      	bne.n	8007072 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f81d 	bl	80070ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2202      	movs	r2, #2
 8007076:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3304      	adds	r3, #4
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f001 fad9 	bl	800863c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6818      	ldr	r0, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	461a      	mov	r2, r3
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	f001 fb2e 	bl	80086f6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070d2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d101      	bne.n	80070de <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80070da:	2302      	movs	r3, #2
 80070dc:	e021      	b.n	8007122 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d002      	beq.n	80070ea <HAL_SDRAM_SendCommand+0x2a>
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d118      	bne.n	800711c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2202      	movs	r2, #2
 80070ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 fb64 	bl	80087c8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d104      	bne.n	8007112 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2205      	movs	r2, #5
 800710c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007110:	e006      	b.n	8007120 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800711a:	e001      	b.n	8007120 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e000      	b.n	8007122 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d101      	bne.n	8007144 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007140:	2302      	movs	r3, #2
 8007142:	e016      	b.n	8007172 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b01      	cmp	r3, #1
 800714e:	d10f      	bne.n	8007170 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	4618      	mov	r0, r3
 8007160:	f001 fb6f 	bl	8008842 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	e000      	b.n	8007172 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e07b      	b.n	8007284 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	d108      	bne.n	80071a6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800719c:	d009      	beq.n	80071b2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	61da      	str	r2, [r3, #28]
 80071a4:	e005      	b.n	80071b2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d106      	bne.n	80071d2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7fa f9a7 	bl	8001520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2202      	movs	r2, #2
 80071d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	431a      	orrs	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007236:	ea42 0103 	orr.w	r1, r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	0c1b      	lsrs	r3, r3, #16
 8007250:	f003 0104 	and.w	r1, r3, #4
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	f003 0210 	and.w	r2, r3, #16
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69da      	ldr	r2, [r3, #28]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007272:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e01a      	b.n	80072d4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fa f97a 	bl	80015b0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b088      	sub	sp, #32
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	603b      	str	r3, [r7, #0]
 80072e8:	4613      	mov	r3, r2
 80072ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <HAL_SPI_Transmit+0x22>
 80072fa:	2302      	movs	r3, #2
 80072fc:	e126      	b.n	800754c <HAL_SPI_Transmit+0x270>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007306:	f7fc f889 	bl	800341c <HAL_GetTick>
 800730a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800730c:	88fb      	ldrh	r3, [r7, #6]
 800730e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b01      	cmp	r3, #1
 800731a:	d002      	beq.n	8007322 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800731c:	2302      	movs	r3, #2
 800731e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007320:	e10b      	b.n	800753a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <HAL_SPI_Transmit+0x52>
 8007328:	88fb      	ldrh	r3, [r7, #6]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d102      	bne.n	8007334 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007332:	e102      	b.n	800753a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2203      	movs	r2, #3
 8007338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	88fa      	ldrh	r2, [r7, #6]
 800734c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	88fa      	ldrh	r2, [r7, #6]
 8007352:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737a:	d10f      	bne.n	800739c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800738a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800739a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b40      	cmp	r3, #64	; 0x40
 80073a8:	d007      	beq.n	80073ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c2:	d14b      	bne.n	800745c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <HAL_SPI_Transmit+0xf6>
 80073cc:	8afb      	ldrh	r3, [r7, #22]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d13e      	bne.n	8007450 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d6:	881a      	ldrh	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	1c9a      	adds	r2, r3, #2
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	3b01      	subs	r3, #1
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80073f6:	e02b      	b.n	8007450 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b02      	cmp	r3, #2
 8007404:	d112      	bne.n	800742c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	881a      	ldrh	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	1c9a      	adds	r2, r3, #2
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	86da      	strh	r2, [r3, #54]	; 0x36
 800742a:	e011      	b.n	8007450 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800742c:	f7fb fff6 	bl	800341c <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d803      	bhi.n	8007444 <HAL_SPI_Transmit+0x168>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	d102      	bne.n	800744a <HAL_SPI_Transmit+0x16e>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d102      	bne.n	8007450 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800744e:	e074      	b.n	800753a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1ce      	bne.n	80073f8 <HAL_SPI_Transmit+0x11c>
 800745a:	e04c      	b.n	80074f6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <HAL_SPI_Transmit+0x18e>
 8007464:	8afb      	ldrh	r3, [r7, #22]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d140      	bne.n	80074ec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	7812      	ldrb	r2, [r2, #0]
 8007476:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007490:	e02c      	b.n	80074ec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b02      	cmp	r3, #2
 800749e:	d113      	bne.n	80074c8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	330c      	adds	r3, #12
 80074aa:	7812      	ldrb	r2, [r2, #0]
 80074ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80074c6:	e011      	b.n	80074ec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074c8:	f7fb ffa8 	bl	800341c <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d803      	bhi.n	80074e0 <HAL_SPI_Transmit+0x204>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074de:	d102      	bne.n	80074e6 <HAL_SPI_Transmit+0x20a>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80074ea:	e026      	b.n	800753a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1cd      	bne.n	8007492 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fbda 	bl	8007cb4 <SPI_EndRxTxTransaction>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2220      	movs	r2, #32
 800750a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007514:	2300      	movs	r3, #0
 8007516:	613b      	str	r3, [r7, #16]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	77fb      	strb	r3, [r7, #31]
 8007536:	e000      	b.n	800753a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007538:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800754a:	7ffb      	ldrb	r3, [r7, #31]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3720      	adds	r7, #32
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af02      	add	r7, sp, #8
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007570:	d112      	bne.n	8007598 <HAL_SPI_Receive+0x44>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10e      	bne.n	8007598 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2204      	movs	r2, #4
 800757e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007582:	88fa      	ldrh	r2, [r7, #6]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	4613      	mov	r3, r2
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f8f1 	bl	8007776 <HAL_SPI_TransmitReceive>
 8007594:	4603      	mov	r3, r0
 8007596:	e0ea      	b.n	800776e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_SPI_Receive+0x52>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e0e3      	b.n	800776e <HAL_SPI_Receive+0x21a>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075ae:	f7fb ff35 	bl	800341c <HAL_GetTick>
 80075b2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d002      	beq.n	80075c6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80075c0:	2302      	movs	r3, #2
 80075c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075c4:	e0ca      	b.n	800775c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <HAL_SPI_Receive+0x7e>
 80075cc:	88fb      	ldrh	r3, [r7, #6]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d102      	bne.n	80075d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075d6:	e0c1      	b.n	800775c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2204      	movs	r2, #4
 80075dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	88fa      	ldrh	r2, [r7, #6]
 80075f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	88fa      	ldrh	r2, [r7, #6]
 80075f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800761e:	d10f      	bne.n	8007640 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800762e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800763e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764a:	2b40      	cmp	r3, #64	; 0x40
 800764c:	d007      	beq.n	800765e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800765c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d162      	bne.n	800772c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007666:	e02e      	b.n	80076c6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b01      	cmp	r3, #1
 8007674:	d115      	bne.n	80076a2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f103 020c 	add.w	r2, r3, #12
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	7812      	ldrb	r2, [r2, #0]
 8007684:	b2d2      	uxtb	r2, r2
 8007686:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076a0:	e011      	b.n	80076c6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076a2:	f7fb febb 	bl	800341c <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d803      	bhi.n	80076ba <HAL_SPI_Receive+0x166>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d102      	bne.n	80076c0 <HAL_SPI_Receive+0x16c>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076c4:	e04a      	b.n	800775c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1cb      	bne.n	8007668 <HAL_SPI_Receive+0x114>
 80076d0:	e031      	b.n	8007736 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d113      	bne.n	8007708 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	b292      	uxth	r2, r2
 80076ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	1c9a      	adds	r2, r3, #2
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007706:	e011      	b.n	800772c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007708:	f7fb fe88 	bl	800341c <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d803      	bhi.n	8007720 <HAL_SPI_Receive+0x1cc>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	d102      	bne.n	8007726 <HAL_SPI_Receive+0x1d2>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d102      	bne.n	800772c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	75fb      	strb	r3, [r7, #23]
          goto error;
 800772a:	e017      	b.n	800775c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1cd      	bne.n	80076d2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fa54 	bl	8007be8 <SPI_EndRxTransaction>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2220      	movs	r2, #32
 800774a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	75fb      	strb	r3, [r7, #23]
 8007758:	e000      	b.n	800775c <HAL_SPI_Receive+0x208>
  }

error :
 800775a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800776c:	7dfb      	ldrb	r3, [r7, #23]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b08c      	sub	sp, #48	; 0x30
 800777a:	af00      	add	r7, sp, #0
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	60b9      	str	r1, [r7, #8]
 8007780:	607a      	str	r2, [r7, #4]
 8007782:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007784:	2301      	movs	r3, #1
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_SPI_TransmitReceive+0x26>
 8007798:	2302      	movs	r3, #2
 800779a:	e18a      	b.n	8007ab2 <HAL_SPI_TransmitReceive+0x33c>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077a4:	f7fb fe3a 	bl	800341c <HAL_GetTick>
 80077a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077ba:	887b      	ldrh	r3, [r7, #2]
 80077bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d00f      	beq.n	80077e6 <HAL_SPI_TransmitReceive+0x70>
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077cc:	d107      	bne.n	80077de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d103      	bne.n	80077de <HAL_SPI_TransmitReceive+0x68>
 80077d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d003      	beq.n	80077e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80077de:	2302      	movs	r3, #2
 80077e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077e4:	e15b      	b.n	8007a9e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <HAL_SPI_TransmitReceive+0x82>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <HAL_SPI_TransmitReceive+0x82>
 80077f2:	887b      	ldrh	r3, [r7, #2]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d103      	bne.n	8007800 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077fe:	e14e      	b.n	8007a9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b04      	cmp	r3, #4
 800780a:	d003      	beq.n	8007814 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2205      	movs	r2, #5
 8007810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	887a      	ldrh	r2, [r7, #2]
 8007824:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	887a      	ldrh	r2, [r7, #2]
 800782a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	887a      	ldrh	r2, [r7, #2]
 8007836:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	887a      	ldrh	r2, [r7, #2]
 800783c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007854:	2b40      	cmp	r3, #64	; 0x40
 8007856:	d007      	beq.n	8007868 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007866:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007870:	d178      	bne.n	8007964 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <HAL_SPI_TransmitReceive+0x10a>
 800787a:	8b7b      	ldrh	r3, [r7, #26]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d166      	bne.n	800794e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007884:	881a      	ldrh	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007890:	1c9a      	adds	r2, r3, #2
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800789a:	b29b      	uxth	r3, r3
 800789c:	3b01      	subs	r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078a4:	e053      	b.n	800794e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d11b      	bne.n	80078ec <HAL_SPI_TransmitReceive+0x176>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d016      	beq.n	80078ec <HAL_SPI_TransmitReceive+0x176>
 80078be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d113      	bne.n	80078ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	881a      	ldrh	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	1c9a      	adds	r2, r3, #2
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d119      	bne.n	800792e <HAL_SPI_TransmitReceive+0x1b8>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fe:	b29b      	uxth	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d014      	beq.n	800792e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	b292      	uxth	r2, r2
 8007910:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007916:	1c9a      	adds	r2, r3, #2
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007920:	b29b      	uxth	r3, r3
 8007922:	3b01      	subs	r3, #1
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800792a:	2301      	movs	r3, #1
 800792c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800792e:	f7fb fd75 	bl	800341c <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800793a:	429a      	cmp	r2, r3
 800793c:	d807      	bhi.n	800794e <HAL_SPI_TransmitReceive+0x1d8>
 800793e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007944:	d003      	beq.n	800794e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800794c:	e0a7      	b.n	8007a9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007952:	b29b      	uxth	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1a6      	bne.n	80078a6 <HAL_SPI_TransmitReceive+0x130>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1a1      	bne.n	80078a6 <HAL_SPI_TransmitReceive+0x130>
 8007962:	e07c      	b.n	8007a5e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <HAL_SPI_TransmitReceive+0x1fc>
 800796c:	8b7b      	ldrh	r3, [r7, #26]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d16b      	bne.n	8007a4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	330c      	adds	r3, #12
 800797c:	7812      	ldrb	r2, [r2, #0]
 800797e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800798e:	b29b      	uxth	r3, r3
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007998:	e057      	b.n	8007a4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d11c      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x26c>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d017      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0x26c>
 80079b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d114      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	330c      	adds	r3, #12
 80079c2:	7812      	ldrb	r2, [r2, #0]
 80079c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d119      	bne.n	8007a24 <HAL_SPI_TransmitReceive+0x2ae>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d014      	beq.n	8007a24 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	b2d2      	uxtb	r2, r2
 8007a06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a20:	2301      	movs	r3, #1
 8007a22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a24:	f7fb fcfa 	bl	800341c <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d803      	bhi.n	8007a3c <HAL_SPI_TransmitReceive+0x2c6>
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3a:	d102      	bne.n	8007a42 <HAL_SPI_TransmitReceive+0x2cc>
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d103      	bne.n	8007a4a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a48:	e029      	b.n	8007a9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1a2      	bne.n	800799a <HAL_SPI_TransmitReceive+0x224>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d19d      	bne.n	800799a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f926 	bl	8007cb4 <SPI_EndRxTxTransaction>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d006      	beq.n	8007a7c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2220      	movs	r2, #32
 8007a78:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007a7a:	e010      	b.n	8007a9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10b      	bne.n	8007a9c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a84:	2300      	movs	r3, #0
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	e000      	b.n	8007a9e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3730      	adds	r7, #48	; 0x30
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ac8:	b2db      	uxtb	r3, r3
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
	...

08007ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ae8:	f7fb fc98 	bl	800341c <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af0:	1a9b      	subs	r3, r3, r2
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	4413      	add	r3, r2
 8007af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007af8:	f7fb fc90 	bl	800341c <HAL_GetTick>
 8007afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007afe:	4b39      	ldr	r3, [pc, #228]	; (8007be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	015b      	lsls	r3, r3, #5
 8007b04:	0d1b      	lsrs	r3, r3, #20
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	fb02 f303 	mul.w	r3, r2, r3
 8007b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b0e:	e054      	b.n	8007bba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d050      	beq.n	8007bba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b18:	f7fb fc80 	bl	800341c <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d902      	bls.n	8007b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d13d      	bne.n	8007baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b46:	d111      	bne.n	8007b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b50:	d004      	beq.n	8007b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b5a:	d107      	bne.n	8007b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b74:	d10f      	bne.n	8007b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e017      	b.n	8007bda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	bf0c      	ite	eq
 8007bca:	2301      	moveq	r3, #1
 8007bcc:	2300      	movne	r3, #0
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d19b      	bne.n	8007b10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3720      	adds	r7, #32
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20000000 	.word	0x20000000

08007be8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bfc:	d111      	bne.n	8007c22 <SPI_EndRxTransaction+0x3a>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c06:	d004      	beq.n	8007c12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c10:	d107      	bne.n	8007c22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c2a:	d12a      	bne.n	8007c82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c34:	d012      	beq.n	8007c5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2180      	movs	r1, #128	; 0x80
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f7ff ff49 	bl	8007ad8 <SPI_WaitFlagStateUntilTimeout>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d02d      	beq.n	8007ca8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c50:	f043 0220 	orr.w	r2, r3, #32
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e026      	b.n	8007caa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2200      	movs	r2, #0
 8007c64:	2101      	movs	r1, #1
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff ff36 	bl	8007ad8 <SPI_WaitFlagStateUntilTimeout>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d01a      	beq.n	8007ca8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c76:	f043 0220 	orr.w	r2, r3, #32
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e013      	b.n	8007caa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff ff23 	bl	8007ad8 <SPI_WaitFlagStateUntilTimeout>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d007      	beq.n	8007ca8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9c:	f043 0220 	orr.w	r2, r3, #32
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e000      	b.n	8007caa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007cc0:	4b1b      	ldr	r3, [pc, #108]	; (8007d30 <SPI_EndRxTxTransaction+0x7c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a1b      	ldr	r2, [pc, #108]	; (8007d34 <SPI_EndRxTxTransaction+0x80>)
 8007cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cca:	0d5b      	lsrs	r3, r3, #21
 8007ccc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cd0:	fb02 f303 	mul.w	r3, r2, r3
 8007cd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cde:	d112      	bne.n	8007d06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2180      	movs	r1, #128	; 0x80
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff fef4 	bl	8007ad8 <SPI_WaitFlagStateUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d016      	beq.n	8007d24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	f043 0220 	orr.w	r2, r3, #32
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e00f      	b.n	8007d26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1c:	2b80      	cmp	r3, #128	; 0x80
 8007d1e:	d0f2      	beq.n	8007d06 <SPI_EndRxTxTransaction+0x52>
 8007d20:	e000      	b.n	8007d24 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d22:	bf00      	nop
  }

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000000 	.word	0x20000000
 8007d34:	165e9f81 	.word	0x165e9f81

08007d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e041      	b.n	8007dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7f9 fc44 	bl	80015ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f000 fa96 	bl	80082a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d001      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e04e      	b.n	8007e8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a23      	ldr	r2, [pc, #140]	; (8007e9c <HAL_TIM_Base_Start_IT+0xc4>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d022      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1a:	d01d      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a1f      	ldr	r2, [pc, #124]	; (8007ea0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d018      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ea4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d013      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a1c      	ldr	r2, [pc, #112]	; (8007ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00e      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a1b      	ldr	r2, [pc, #108]	; (8007eac <HAL_TIM_Base_Start_IT+0xd4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d009      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a19      	ldr	r2, [pc, #100]	; (8007eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d004      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d111      	bne.n	8007e7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b06      	cmp	r3, #6
 8007e68:	d010      	beq.n	8007e8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f042 0201 	orr.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e7a:	e007      	b.n	8007e8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0201 	orr.w	r2, r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	40000400 	.word	0x40000400
 8007ea4:	40000800 	.word	0x40000800
 8007ea8:	40000c00 	.word	0x40000c00
 8007eac:	40010400 	.word	0x40010400
 8007eb0:	40014000 	.word	0x40014000
 8007eb4:	40001800 	.word	0x40001800

08007eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d122      	bne.n	8007f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d11b      	bne.n	8007f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f06f 0202 	mvn.w	r2, #2
 8007ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f9b5 	bl	800826a <HAL_TIM_IC_CaptureCallback>
 8007f00:	e005      	b.n	8007f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f9a7 	bl	8008256 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f9b8 	bl	800827e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	f003 0304 	and.w	r3, r3, #4
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d122      	bne.n	8007f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d11b      	bne.n	8007f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f06f 0204 	mvn.w	r2, #4
 8007f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f98b 	bl	800826a <HAL_TIM_IC_CaptureCallback>
 8007f54:	e005      	b.n	8007f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f97d 	bl	8008256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f98e 	bl	800827e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d122      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f003 0308 	and.w	r3, r3, #8
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d11b      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f06f 0208 	mvn.w	r2, #8
 8007f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2204      	movs	r2, #4
 8007f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f003 0303 	and.w	r3, r3, #3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f961 	bl	800826a <HAL_TIM_IC_CaptureCallback>
 8007fa8:	e005      	b.n	8007fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f953 	bl	8008256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f964 	bl	800827e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0310 	and.w	r3, r3, #16
 8007fc6:	2b10      	cmp	r3, #16
 8007fc8:	d122      	bne.n	8008010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	2b10      	cmp	r3, #16
 8007fd6:	d11b      	bne.n	8008010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f06f 0210 	mvn.w	r2, #16
 8007fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2208      	movs	r2, #8
 8007fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f937 	bl	800826a <HAL_TIM_IC_CaptureCallback>
 8007ffc:	e005      	b.n	800800a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f929 	bl	8008256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f93a 	bl	800827e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b01      	cmp	r3, #1
 800801c:	d10e      	bne.n	800803c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b01      	cmp	r3, #1
 800802a:	d107      	bne.n	800803c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f06f 0201 	mvn.w	r2, #1
 8008034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7f9 f9e6 	bl	8001408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008046:	2b80      	cmp	r3, #128	; 0x80
 8008048:	d10e      	bne.n	8008068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008054:	2b80      	cmp	r3, #128	; 0x80
 8008056:	d107      	bne.n	8008068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fae0 	bl	8008628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008072:	2b40      	cmp	r3, #64	; 0x40
 8008074:	d10e      	bne.n	8008094 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008080:	2b40      	cmp	r3, #64	; 0x40
 8008082:	d107      	bne.n	8008094 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800808c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f8ff 	bl	8008292 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b20      	cmp	r3, #32
 80080a0:	d10e      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0320 	and.w	r3, r3, #32
 80080ac:	2b20      	cmp	r3, #32
 80080ae:	d107      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0220 	mvn.w	r2, #32
 80080b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 faaa 	bl	8008614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080c0:	bf00      	nop
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d101      	bne.n	80080e4 <HAL_TIM_ConfigClockSource+0x1c>
 80080e0:	2302      	movs	r3, #2
 80080e2:	e0b4      	b.n	800824e <HAL_TIM_ConfigClockSource+0x186>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800810a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800811c:	d03e      	beq.n	800819c <HAL_TIM_ConfigClockSource+0xd4>
 800811e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008122:	f200 8087 	bhi.w	8008234 <HAL_TIM_ConfigClockSource+0x16c>
 8008126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800812a:	f000 8086 	beq.w	800823a <HAL_TIM_ConfigClockSource+0x172>
 800812e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008132:	d87f      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x16c>
 8008134:	2b70      	cmp	r3, #112	; 0x70
 8008136:	d01a      	beq.n	800816e <HAL_TIM_ConfigClockSource+0xa6>
 8008138:	2b70      	cmp	r3, #112	; 0x70
 800813a:	d87b      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x16c>
 800813c:	2b60      	cmp	r3, #96	; 0x60
 800813e:	d050      	beq.n	80081e2 <HAL_TIM_ConfigClockSource+0x11a>
 8008140:	2b60      	cmp	r3, #96	; 0x60
 8008142:	d877      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x16c>
 8008144:	2b50      	cmp	r3, #80	; 0x50
 8008146:	d03c      	beq.n	80081c2 <HAL_TIM_ConfigClockSource+0xfa>
 8008148:	2b50      	cmp	r3, #80	; 0x50
 800814a:	d873      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x16c>
 800814c:	2b40      	cmp	r3, #64	; 0x40
 800814e:	d058      	beq.n	8008202 <HAL_TIM_ConfigClockSource+0x13a>
 8008150:	2b40      	cmp	r3, #64	; 0x40
 8008152:	d86f      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x16c>
 8008154:	2b30      	cmp	r3, #48	; 0x30
 8008156:	d064      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0x15a>
 8008158:	2b30      	cmp	r3, #48	; 0x30
 800815a:	d86b      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x16c>
 800815c:	2b20      	cmp	r3, #32
 800815e:	d060      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0x15a>
 8008160:	2b20      	cmp	r3, #32
 8008162:	d867      	bhi.n	8008234 <HAL_TIM_ConfigClockSource+0x16c>
 8008164:	2b00      	cmp	r3, #0
 8008166:	d05c      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0x15a>
 8008168:	2b10      	cmp	r3, #16
 800816a:	d05a      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0x15a>
 800816c:	e062      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	6899      	ldr	r1, [r3, #8]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	f000 f9ad 	bl	80084dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	609a      	str	r2, [r3, #8]
      break;
 800819a:	e04f      	b.n	800823c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6818      	ldr	r0, [r3, #0]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	6899      	ldr	r1, [r3, #8]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f000 f996 	bl	80084dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081be:	609a      	str	r2, [r3, #8]
      break;
 80081c0:	e03c      	b.n	800823c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	6859      	ldr	r1, [r3, #4]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	461a      	mov	r2, r3
 80081d0:	f000 f90a 	bl	80083e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2150      	movs	r1, #80	; 0x50
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 f963 	bl	80084a6 <TIM_ITRx_SetConfig>
      break;
 80081e0:	e02c      	b.n	800823c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6818      	ldr	r0, [r3, #0]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	6859      	ldr	r1, [r3, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f000 f929 	bl	8008446 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2160      	movs	r1, #96	; 0x60
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f953 	bl	80084a6 <TIM_ITRx_SetConfig>
      break;
 8008200:	e01c      	b.n	800823c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	6859      	ldr	r1, [r3, #4]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	461a      	mov	r2, r3
 8008210:	f000 f8ea 	bl	80083e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2140      	movs	r1, #64	; 0x40
 800821a:	4618      	mov	r0, r3
 800821c:	f000 f943 	bl	80084a6 <TIM_ITRx_SetConfig>
      break;
 8008220:	e00c      	b.n	800823c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f000 f93a 	bl	80084a6 <TIM_ITRx_SetConfig>
      break;
 8008232:	e003      	b.n	800823c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	73fb      	strb	r3, [r7, #15]
      break;
 8008238:	e000      	b.n	800823c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800823a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
	...

080082a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a40      	ldr	r2, [pc, #256]	; (80083bc <TIM_Base_SetConfig+0x114>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d013      	beq.n	80082e8 <TIM_Base_SetConfig+0x40>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c6:	d00f      	beq.n	80082e8 <TIM_Base_SetConfig+0x40>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a3d      	ldr	r2, [pc, #244]	; (80083c0 <TIM_Base_SetConfig+0x118>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00b      	beq.n	80082e8 <TIM_Base_SetConfig+0x40>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a3c      	ldr	r2, [pc, #240]	; (80083c4 <TIM_Base_SetConfig+0x11c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d007      	beq.n	80082e8 <TIM_Base_SetConfig+0x40>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a3b      	ldr	r2, [pc, #236]	; (80083c8 <TIM_Base_SetConfig+0x120>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d003      	beq.n	80082e8 <TIM_Base_SetConfig+0x40>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a3a      	ldr	r2, [pc, #232]	; (80083cc <TIM_Base_SetConfig+0x124>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d108      	bne.n	80082fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a2f      	ldr	r2, [pc, #188]	; (80083bc <TIM_Base_SetConfig+0x114>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d02b      	beq.n	800835a <TIM_Base_SetConfig+0xb2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008308:	d027      	beq.n	800835a <TIM_Base_SetConfig+0xb2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a2c      	ldr	r2, [pc, #176]	; (80083c0 <TIM_Base_SetConfig+0x118>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d023      	beq.n	800835a <TIM_Base_SetConfig+0xb2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a2b      	ldr	r2, [pc, #172]	; (80083c4 <TIM_Base_SetConfig+0x11c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d01f      	beq.n	800835a <TIM_Base_SetConfig+0xb2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a2a      	ldr	r2, [pc, #168]	; (80083c8 <TIM_Base_SetConfig+0x120>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d01b      	beq.n	800835a <TIM_Base_SetConfig+0xb2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a29      	ldr	r2, [pc, #164]	; (80083cc <TIM_Base_SetConfig+0x124>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d017      	beq.n	800835a <TIM_Base_SetConfig+0xb2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a28      	ldr	r2, [pc, #160]	; (80083d0 <TIM_Base_SetConfig+0x128>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d013      	beq.n	800835a <TIM_Base_SetConfig+0xb2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a27      	ldr	r2, [pc, #156]	; (80083d4 <TIM_Base_SetConfig+0x12c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00f      	beq.n	800835a <TIM_Base_SetConfig+0xb2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a26      	ldr	r2, [pc, #152]	; (80083d8 <TIM_Base_SetConfig+0x130>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00b      	beq.n	800835a <TIM_Base_SetConfig+0xb2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a25      	ldr	r2, [pc, #148]	; (80083dc <TIM_Base_SetConfig+0x134>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d007      	beq.n	800835a <TIM_Base_SetConfig+0xb2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a24      	ldr	r2, [pc, #144]	; (80083e0 <TIM_Base_SetConfig+0x138>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d003      	beq.n	800835a <TIM_Base_SetConfig+0xb2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a23      	ldr	r2, [pc, #140]	; (80083e4 <TIM_Base_SetConfig+0x13c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d108      	bne.n	800836c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	4313      	orrs	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a0a      	ldr	r2, [pc, #40]	; (80083bc <TIM_Base_SetConfig+0x114>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_Base_SetConfig+0xf8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a0c      	ldr	r2, [pc, #48]	; (80083cc <TIM_Base_SetConfig+0x124>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d103      	bne.n	80083a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	691a      	ldr	r2, [r3, #16]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	615a      	str	r2, [r3, #20]
}
 80083ae:	bf00      	nop
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	40010000 	.word	0x40010000
 80083c0:	40000400 	.word	0x40000400
 80083c4:	40000800 	.word	0x40000800
 80083c8:	40000c00 	.word	0x40000c00
 80083cc:	40010400 	.word	0x40010400
 80083d0:	40014000 	.word	0x40014000
 80083d4:	40014400 	.word	0x40014400
 80083d8:	40014800 	.word	0x40014800
 80083dc:	40001800 	.word	0x40001800
 80083e0:	40001c00 	.word	0x40001c00
 80083e4:	40002000 	.word	0x40002000

080083e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	f023 0201 	bic.w	r2, r3, #1
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	011b      	lsls	r3, r3, #4
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4313      	orrs	r3, r2
 800841c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f023 030a 	bic.w	r3, r3, #10
 8008424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4313      	orrs	r3, r2
 800842c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	621a      	str	r2, [r3, #32]
}
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008446:	b480      	push	{r7}
 8008448:	b087      	sub	sp, #28
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	f023 0210 	bic.w	r2, r3, #16
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	031b      	lsls	r3, r3, #12
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	4313      	orrs	r3, r2
 800847a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008482:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	621a      	str	r2, [r3, #32]
}
 800849a:	bf00      	nop
 800849c:	371c      	adds	r7, #28
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b085      	sub	sp, #20
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f043 0307 	orr.w	r3, r3, #7
 80084c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	609a      	str	r2, [r3, #8]
}
 80084d0:	bf00      	nop
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	021a      	lsls	r2, r3, #8
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	431a      	orrs	r2, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	4313      	orrs	r3, r2
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	4313      	orrs	r3, r2
 8008508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	609a      	str	r2, [r3, #8]
}
 8008510:	bf00      	nop
 8008512:	371c      	adds	r7, #28
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008530:	2302      	movs	r3, #2
 8008532:	e05a      	b.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4313      	orrs	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a21      	ldr	r2, [pc, #132]	; (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d022      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008580:	d01d      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a1d      	ldr	r2, [pc, #116]	; (80085fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d018      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1b      	ldr	r2, [pc, #108]	; (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d013      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a1a      	ldr	r2, [pc, #104]	; (8008604 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00e      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a18      	ldr	r2, [pc, #96]	; (8008608 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d009      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a17      	ldr	r2, [pc, #92]	; (800860c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d004      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a15      	ldr	r2, [pc, #84]	; (8008610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d10c      	bne.n	80085d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	40010000 	.word	0x40010000
 80085fc:	40000400 	.word	0x40000400
 8008600:	40000800 	.word	0x40000800
 8008604:	40000c00 	.word	0x40000c00
 8008608:	40010400 	.word	0x40010400
 800860c:	40014000 	.word	0x40014000
 8008610:	40001800 	.word	0x40001800

08008614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d123      	bne.n	8008696 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008656:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	6851      	ldr	r1, [r2, #4]
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	6892      	ldr	r2, [r2, #8]
 8008662:	4311      	orrs	r1, r2
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	68d2      	ldr	r2, [r2, #12]
 8008668:	4311      	orrs	r1, r2
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	6912      	ldr	r2, [r2, #16]
 800866e:	4311      	orrs	r1, r2
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	6952      	ldr	r2, [r2, #20]
 8008674:	4311      	orrs	r1, r2
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	6992      	ldr	r2, [r2, #24]
 800867a:	4311      	orrs	r1, r2
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	69d2      	ldr	r2, [r2, #28]
 8008680:	4311      	orrs	r1, r2
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	6a12      	ldr	r2, [r2, #32]
 8008686:	4311      	orrs	r1, r2
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800868c:	430a      	orrs	r2, r1
 800868e:	431a      	orrs	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	e028      	b.n	80086e8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	69d9      	ldr	r1, [r3, #28]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	4319      	orrs	r1, r3
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	430b      	orrs	r3, r1
 80086ae:	431a      	orrs	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80086bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	6851      	ldr	r1, [r2, #4]
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	6892      	ldr	r2, [r2, #8]
 80086c8:	4311      	orrs	r1, r2
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	68d2      	ldr	r2, [r2, #12]
 80086ce:	4311      	orrs	r1, r2
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	6912      	ldr	r2, [r2, #16]
 80086d4:	4311      	orrs	r1, r2
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	6952      	ldr	r2, [r2, #20]
 80086da:	4311      	orrs	r1, r2
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	6992      	ldr	r2, [r2, #24]
 80086e0:	430a      	orrs	r2, r1
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b085      	sub	sp, #20
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	60f8      	str	r0, [r7, #12]
 80086fe:	60b9      	str	r1, [r7, #8]
 8008700:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d128      	bne.n	800875a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	1e59      	subs	r1, r3, #1
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	3b01      	subs	r3, #1
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	4319      	orrs	r1, r3
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	3b01      	subs	r3, #1
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	4319      	orrs	r1, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	3b01      	subs	r3, #1
 8008730:	031b      	lsls	r3, r3, #12
 8008732:	4319      	orrs	r1, r3
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	3b01      	subs	r3, #1
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	4319      	orrs	r1, r3
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	3b01      	subs	r3, #1
 8008744:	051b      	lsls	r3, r3, #20
 8008746:	4319      	orrs	r1, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	3b01      	subs	r3, #1
 800874e:	061b      	lsls	r3, r3, #24
 8008750:	430b      	orrs	r3, r1
 8008752:	431a      	orrs	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	609a      	str	r2, [r3, #8]
 8008758:	e02f      	b.n	80087ba <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	68d2      	ldr	r2, [r2, #12]
 800876a:	3a01      	subs	r2, #1
 800876c:	0311      	lsls	r1, r2, #12
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	6952      	ldr	r2, [r2, #20]
 8008772:	3a01      	subs	r2, #1
 8008774:	0512      	lsls	r2, r2, #20
 8008776:	430a      	orrs	r2, r1
 8008778:	431a      	orrs	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	1e59      	subs	r1, r3, #1
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	3b01      	subs	r3, #1
 8008792:	011b      	lsls	r3, r3, #4
 8008794:	4319      	orrs	r1, r3
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	3b01      	subs	r3, #1
 800879c:	021b      	lsls	r3, r3, #8
 800879e:	4319      	orrs	r1, r3
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	041b      	lsls	r3, r3, #16
 80087a8:	4319      	orrs	r1, r3
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	061b      	lsls	r3, r3, #24
 80087b2:	430b      	orrs	r3, r1
 80087b4:	431a      	orrs	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	0d9b      	lsrs	r3, r3, #22
 80087de:	059b      	lsls	r3, r3, #22
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	6811      	ldr	r1, [r2, #0]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	6852      	ldr	r2, [r2, #4]
 80087e8:	4311      	orrs	r1, r2
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	6892      	ldr	r2, [r2, #8]
 80087ee:	3a01      	subs	r2, #1
 80087f0:	0152      	lsls	r2, r2, #5
 80087f2:	4311      	orrs	r1, r2
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	68d2      	ldr	r2, [r2, #12]
 80087f8:	0252      	lsls	r2, r2, #9
 80087fa:	430a      	orrs	r2, r1
 80087fc:	431a      	orrs	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008802:	f7fa fe0b 	bl	800341c <HAL_GetTick>
 8008806:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008808:	e010      	b.n	800882c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008810:	d00c      	beq.n	800882c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d007      	beq.n	8008828 <FMC_SDRAM_SendCommand+0x60>
 8008818:	f7fa fe00 	bl	800341c <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	429a      	cmp	r2, r3
 8008826:	d201      	bcs.n	800882c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e006      	b.n	800883a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b20      	cmp	r3, #32
 8008836:	d0e8      	beq.n	800880a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008854:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	0052      	lsls	r2, r2, #1
 800885c:	431a      	orrs	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008870:	b084      	sub	sp, #16
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	f107 001c 	add.w	r0, r7, #28
 800887e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	2b01      	cmp	r3, #1
 8008886:	d122      	bne.n	80088ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800889c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d105      	bne.n	80088c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f001 fbee 	bl	800a0a4 <USB_CoreReset>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]
 80088cc:	e01a      	b.n	8008904 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 fbe2 	bl	800a0a4 <USB_CoreReset>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80088e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d106      	bne.n	80088f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	639a      	str	r2, [r3, #56]	; 0x38
 80088f6:	e005      	b.n	8008904 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	2b01      	cmp	r3, #1
 8008908:	d10b      	bne.n	8008922 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f043 0206 	orr.w	r2, r3, #6
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f043 0220 	orr.w	r2, r3, #32
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800892e:	b004      	add	sp, #16
 8008930:	4770      	bx	lr
	...

08008934 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	4613      	mov	r3, r2
 8008940:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	2b02      	cmp	r3, #2
 8008946:	d165      	bne.n	8008a14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4a41      	ldr	r2, [pc, #260]	; (8008a50 <USB_SetTurnaroundTime+0x11c>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d906      	bls.n	800895e <USB_SetTurnaroundTime+0x2a>
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4a40      	ldr	r2, [pc, #256]	; (8008a54 <USB_SetTurnaroundTime+0x120>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d202      	bcs.n	800895e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008958:	230f      	movs	r3, #15
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	e062      	b.n	8008a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	4a3c      	ldr	r2, [pc, #240]	; (8008a54 <USB_SetTurnaroundTime+0x120>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d306      	bcc.n	8008974 <USB_SetTurnaroundTime+0x40>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	4a3b      	ldr	r2, [pc, #236]	; (8008a58 <USB_SetTurnaroundTime+0x124>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d202      	bcs.n	8008974 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800896e:	230e      	movs	r3, #14
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	e057      	b.n	8008a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4a38      	ldr	r2, [pc, #224]	; (8008a58 <USB_SetTurnaroundTime+0x124>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d306      	bcc.n	800898a <USB_SetTurnaroundTime+0x56>
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4a37      	ldr	r2, [pc, #220]	; (8008a5c <USB_SetTurnaroundTime+0x128>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d202      	bcs.n	800898a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008984:	230d      	movs	r3, #13
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	e04c      	b.n	8008a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4a33      	ldr	r2, [pc, #204]	; (8008a5c <USB_SetTurnaroundTime+0x128>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d306      	bcc.n	80089a0 <USB_SetTurnaroundTime+0x6c>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4a32      	ldr	r2, [pc, #200]	; (8008a60 <USB_SetTurnaroundTime+0x12c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d802      	bhi.n	80089a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800899a:	230c      	movs	r3, #12
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	e041      	b.n	8008a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4a2f      	ldr	r2, [pc, #188]	; (8008a60 <USB_SetTurnaroundTime+0x12c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d906      	bls.n	80089b6 <USB_SetTurnaroundTime+0x82>
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4a2e      	ldr	r2, [pc, #184]	; (8008a64 <USB_SetTurnaroundTime+0x130>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d802      	bhi.n	80089b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80089b0:	230b      	movs	r3, #11
 80089b2:	617b      	str	r3, [r7, #20]
 80089b4:	e036      	b.n	8008a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	4a2a      	ldr	r2, [pc, #168]	; (8008a64 <USB_SetTurnaroundTime+0x130>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d906      	bls.n	80089cc <USB_SetTurnaroundTime+0x98>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	4a29      	ldr	r2, [pc, #164]	; (8008a68 <USB_SetTurnaroundTime+0x134>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d802      	bhi.n	80089cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80089c6:	230a      	movs	r3, #10
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	e02b      	b.n	8008a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4a26      	ldr	r2, [pc, #152]	; (8008a68 <USB_SetTurnaroundTime+0x134>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d906      	bls.n	80089e2 <USB_SetTurnaroundTime+0xae>
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4a25      	ldr	r2, [pc, #148]	; (8008a6c <USB_SetTurnaroundTime+0x138>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d202      	bcs.n	80089e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80089dc:	2309      	movs	r3, #9
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	e020      	b.n	8008a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	4a21      	ldr	r2, [pc, #132]	; (8008a6c <USB_SetTurnaroundTime+0x138>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d306      	bcc.n	80089f8 <USB_SetTurnaroundTime+0xc4>
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	4a20      	ldr	r2, [pc, #128]	; (8008a70 <USB_SetTurnaroundTime+0x13c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d802      	bhi.n	80089f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80089f2:	2308      	movs	r3, #8
 80089f4:	617b      	str	r3, [r7, #20]
 80089f6:	e015      	b.n	8008a24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	4a1d      	ldr	r2, [pc, #116]	; (8008a70 <USB_SetTurnaroundTime+0x13c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d906      	bls.n	8008a0e <USB_SetTurnaroundTime+0xda>
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	4a1c      	ldr	r2, [pc, #112]	; (8008a74 <USB_SetTurnaroundTime+0x140>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d202      	bcs.n	8008a0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a08:	2307      	movs	r3, #7
 8008a0a:	617b      	str	r3, [r7, #20]
 8008a0c:	e00a      	b.n	8008a24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a0e:	2306      	movs	r3, #6
 8008a10:	617b      	str	r3, [r7, #20]
 8008a12:	e007      	b.n	8008a24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d102      	bne.n	8008a20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a1a:	2309      	movs	r3, #9
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e001      	b.n	8008a24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a20:	2309      	movs	r3, #9
 8008a22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	68da      	ldr	r2, [r3, #12]
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	029b      	lsls	r3, r3, #10
 8008a38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	00d8acbf 	.word	0x00d8acbf
 8008a54:	00e4e1c0 	.word	0x00e4e1c0
 8008a58:	00f42400 	.word	0x00f42400
 8008a5c:	01067380 	.word	0x01067380
 8008a60:	011a499f 	.word	0x011a499f
 8008a64:	01312cff 	.word	0x01312cff
 8008a68:	014ca43f 	.word	0x014ca43f
 8008a6c:	016e3600 	.word	0x016e3600
 8008a70:	01a6ab1f 	.word	0x01a6ab1f
 8008a74:	01e84800 	.word	0x01e84800

08008a78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f043 0201 	orr.w	r2, r3, #1
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f023 0201 	bic.w	r2, r3, #1
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d115      	bne.n	8008b0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008aea:	2001      	movs	r0, #1
 8008aec:	f7fa fca2 	bl	8003434 <HAL_Delay>
      ms++;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3301      	adds	r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f001 fa45 	bl	8009f86 <USB_GetMode>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d01e      	beq.n	8008b40 <USB_SetCurrentMode+0x84>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2b31      	cmp	r3, #49	; 0x31
 8008b06:	d9f0      	bls.n	8008aea <USB_SetCurrentMode+0x2e>
 8008b08:	e01a      	b.n	8008b40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d115      	bne.n	8008b3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	f7fa fc89 	bl	8003434 <HAL_Delay>
      ms++;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3301      	adds	r3, #1
 8008b26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 fa2c 	bl	8009f86 <USB_GetMode>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <USB_SetCurrentMode+0x84>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b31      	cmp	r3, #49	; 0x31
 8008b38:	d9f0      	bls.n	8008b1c <USB_SetCurrentMode+0x60>
 8008b3a:	e001      	b.n	8008b40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e005      	b.n	8008b4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b32      	cmp	r3, #50	; 0x32
 8008b44:	d101      	bne.n	8008b4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e000      	b.n	8008b4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b54:	b084      	sub	sp, #16
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b086      	sub	sp, #24
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b6e:	2300      	movs	r3, #0
 8008b70:	613b      	str	r3, [r7, #16]
 8008b72:	e009      	b.n	8008b88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	3340      	adds	r3, #64	; 0x40
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	3301      	adds	r3, #1
 8008b86:	613b      	str	r3, [r7, #16]
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	2b0e      	cmp	r3, #14
 8008b8c:	d9f2      	bls.n	8008b74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d11c      	bne.n	8008bce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ba2:	f043 0302 	orr.w	r3, r3, #2
 8008ba6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	639a      	str	r2, [r3, #56]	; 0x38
 8008bcc:	e00b      	b.n	8008be6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bec:	461a      	mov	r2, r3
 8008bee:	2300      	movs	r3, #0
 8008bf0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c00:	461a      	mov	r2, r3
 8008c02:	680b      	ldr	r3, [r1, #0]
 8008c04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d10c      	bne.n	8008c26 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d104      	bne.n	8008c1c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c12:	2100      	movs	r1, #0
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f965 	bl	8008ee4 <USB_SetDevSpeed>
 8008c1a:	e008      	b.n	8008c2e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f960 	bl	8008ee4 <USB_SetDevSpeed>
 8008c24:	e003      	b.n	8008c2e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c26:	2103      	movs	r1, #3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f95b 	bl	8008ee4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c2e:	2110      	movs	r1, #16
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f8f3 	bl	8008e1c <USB_FlushTxFifo>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f91f 	bl	8008e84 <USB_FlushRxFifo>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c56:	461a      	mov	r2, r3
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c62:	461a      	mov	r2, r3
 8008c64:	2300      	movs	r3, #0
 8008c66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6e:	461a      	mov	r2, r3
 8008c70:	2300      	movs	r3, #0
 8008c72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c74:	2300      	movs	r3, #0
 8008c76:	613b      	str	r3, [r7, #16]
 8008c78:	e043      	b.n	8008d02 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c90:	d118      	bne.n	8008cc4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	e013      	b.n	8008cd6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	e008      	b.n	8008cd6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	613b      	str	r3, [r7, #16]
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d3b7      	bcc.n	8008c7a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	e043      	b.n	8008d98 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d26:	d118      	bne.n	8008d5a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10a      	bne.n	8008d44 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	e013      	b.n	8008d6c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d50:	461a      	mov	r2, r3
 8008d52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	e008      	b.n	8008d6c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d66:	461a      	mov	r2, r3
 8008d68:	2300      	movs	r3, #0
 8008d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	3301      	adds	r3, #1
 8008d96:	613b      	str	r3, [r7, #16]
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d3b7      	bcc.n	8008d10 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008db2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008dc0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d105      	bne.n	8008dd4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	f043 0210 	orr.w	r2, r3, #16
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	699a      	ldr	r2, [r3, #24]
 8008dd8:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <USB_DevInit+0x2c4>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d005      	beq.n	8008df2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	f043 0208 	orr.w	r2, r3, #8
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d107      	bne.n	8008e08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e00:	f043 0304 	orr.w	r3, r3, #4
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e14:	b004      	add	sp, #16
 8008e16:	4770      	bx	lr
 8008e18:	803c3800 	.word	0x803c3800

08008e1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4a13      	ldr	r2, [pc, #76]	; (8008e80 <USB_FlushTxFifo+0x64>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d901      	bls.n	8008e3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e01b      	b.n	8008e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	daf2      	bge.n	8008e2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	019b      	lsls	r3, r3, #6
 8008e4c:	f043 0220 	orr.w	r2, r3, #32
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	3301      	adds	r3, #1
 8008e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4a08      	ldr	r2, [pc, #32]	; (8008e80 <USB_FlushTxFifo+0x64>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d901      	bls.n	8008e66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e006      	b.n	8008e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b20      	cmp	r3, #32
 8008e70:	d0f0      	beq.n	8008e54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	00030d40 	.word	0x00030d40

08008e84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4a11      	ldr	r2, [pc, #68]	; (8008ee0 <USB_FlushRxFifo+0x5c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d901      	bls.n	8008ea2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e018      	b.n	8008ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	daf2      	bge.n	8008e90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2210      	movs	r2, #16
 8008eb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4a08      	ldr	r2, [pc, #32]	; (8008ee0 <USB_FlushRxFifo+0x5c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d901      	bls.n	8008ec6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e006      	b.n	8008ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	f003 0310 	and.w	r3, r3, #16
 8008ece:	2b10      	cmp	r3, #16
 8008ed0:	d0f0      	beq.n	8008eb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	00030d40 	.word	0x00030d40

08008ee4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	68f9      	ldr	r1, [r7, #12]
 8008f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f04:	4313      	orrs	r3, r2
 8008f06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b087      	sub	sp, #28
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 0306 	and.w	r3, r3, #6
 8008f2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f36:	2300      	movs	r3, #0
 8008f38:	75fb      	strb	r3, [r7, #23]
 8008f3a:	e00a      	b.n	8008f52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d002      	beq.n	8008f48 <USB_GetDevSpeed+0x32>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b06      	cmp	r3, #6
 8008f46:	d102      	bne.n	8008f4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	75fb      	strb	r3, [r7, #23]
 8008f4c:	e001      	b.n	8008f52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f4e:	230f      	movs	r3, #15
 8008f50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	371c      	adds	r7, #28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d13a      	bne.n	8008ff2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f82:	69da      	ldr	r2, [r3, #28]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	f003 030f 	and.w	r3, r3, #15
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	68f9      	ldr	r1, [r7, #12]
 8008f96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d155      	bne.n	8009060 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	791b      	ldrb	r3, [r3, #4]
 8008fce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008fd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	059b      	lsls	r3, r3, #22
 8008fd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	0151      	lsls	r1, r2, #5
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	440a      	add	r2, r1
 8008fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	e036      	b.n	8009060 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff8:	69da      	ldr	r2, [r3, #28]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	f003 030f 	and.w	r3, r3, #15
 8009002:	2101      	movs	r1, #1
 8009004:	fa01 f303 	lsl.w	r3, r1, r3
 8009008:	041b      	lsls	r3, r3, #16
 800900a:	68f9      	ldr	r1, [r7, #12]
 800900c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009010:	4313      	orrs	r3, r2
 8009012:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	015a      	lsls	r2, r3, #5
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	4413      	add	r3, r2
 800901c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d11a      	bne.n	8009060 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	791b      	ldrb	r3, [r3, #4]
 8009044:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009046:	430b      	orrs	r3, r1
 8009048:	4313      	orrs	r3, r2
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	0151      	lsls	r1, r2, #5
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	440a      	add	r2, r1
 8009052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800905a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800905e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
	...

08009070 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	785b      	ldrb	r3, [r3, #1]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d161      	bne.n	8009150 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800909e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090a2:	d11f      	bne.n	80090e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	0151      	lsls	r1, r2, #5
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	440a      	add	r2, r1
 80090ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	0151      	lsls	r1, r2, #5
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	440a      	add	r2, r1
 80090da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	f003 030f 	and.w	r3, r3, #15
 80090f4:	2101      	movs	r1, #1
 80090f6:	fa01 f303 	lsl.w	r3, r1, r3
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	43db      	mvns	r3, r3
 80090fe:	68f9      	ldr	r1, [r7, #12]
 8009100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009104:	4013      	ands	r3, r2
 8009106:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910e:	69da      	ldr	r2, [r3, #28]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	f003 030f 	and.w	r3, r3, #15
 8009118:	2101      	movs	r1, #1
 800911a:	fa01 f303 	lsl.w	r3, r1, r3
 800911e:	b29b      	uxth	r3, r3
 8009120:	43db      	mvns	r3, r3
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009128:	4013      	ands	r3, r2
 800912a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	0159      	lsls	r1, r3, #5
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	440b      	add	r3, r1
 8009142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009146:	4619      	mov	r1, r3
 8009148:	4b35      	ldr	r3, [pc, #212]	; (8009220 <USB_DeactivateEndpoint+0x1b0>)
 800914a:	4013      	ands	r3, r2
 800914c:	600b      	str	r3, [r1, #0]
 800914e:	e060      	b.n	8009212 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009166:	d11f      	bne.n	80091a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	0151      	lsls	r1, r2, #5
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	440a      	add	r2, r1
 800917e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009182:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009186:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	0151      	lsls	r1, r2, #5
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	440a      	add	r2, r1
 800919e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	f003 030f 	and.w	r3, r3, #15
 80091b8:	2101      	movs	r1, #1
 80091ba:	fa01 f303 	lsl.w	r3, r1, r3
 80091be:	041b      	lsls	r3, r3, #16
 80091c0:	43db      	mvns	r3, r3
 80091c2:	68f9      	ldr	r1, [r7, #12]
 80091c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091c8:	4013      	ands	r3, r2
 80091ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d2:	69da      	ldr	r2, [r3, #28]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	2101      	movs	r1, #1
 80091de:	fa01 f303 	lsl.w	r3, r1, r3
 80091e2:	041b      	lsls	r3, r3, #16
 80091e4:	43db      	mvns	r3, r3
 80091e6:	68f9      	ldr	r1, [r7, #12]
 80091e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091ec:	4013      	ands	r3, r2
 80091ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	0159      	lsls	r1, r3, #5
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	440b      	add	r3, r1
 8009206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920a:	4619      	mov	r1, r3
 800920c:	4b05      	ldr	r3, [pc, #20]	; (8009224 <USB_DeactivateEndpoint+0x1b4>)
 800920e:	4013      	ands	r3, r2
 8009210:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	ec337800 	.word	0xec337800
 8009224:	eff37800 	.word	0xeff37800

08009228 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08a      	sub	sp, #40	; 0x28
 800922c:	af02      	add	r7, sp, #8
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	4613      	mov	r3, r2
 8009234:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	2b01      	cmp	r3, #1
 8009246:	f040 815c 	bne.w	8009502 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d132      	bne.n	80092b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	4413      	add	r3, r2
 800925a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	0151      	lsls	r1, r2, #5
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	440a      	add	r2, r1
 8009268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800926c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009270:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009274:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	69ba      	ldr	r2, [r7, #24]
 8009286:	0151      	lsls	r1, r2, #5
 8009288:	69fa      	ldr	r2, [r7, #28]
 800928a:	440a      	add	r2, r1
 800928c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009290:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009294:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	69fa      	ldr	r2, [r7, #28]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b0:	0cdb      	lsrs	r3, r3, #19
 80092b2:	04db      	lsls	r3, r3, #19
 80092b4:	6113      	str	r3, [r2, #16]
 80092b6:	e074      	b.n	80093a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	0151      	lsls	r1, r2, #5
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	440a      	add	r2, r1
 80092ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d2:	0cdb      	lsrs	r3, r3, #19
 80092d4:	04db      	lsls	r3, r3, #19
 80092d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	0151      	lsls	r1, r2, #5
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	440a      	add	r2, r1
 80092ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009308:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	6999      	ldr	r1, [r3, #24]
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	440b      	add	r3, r1
 8009314:	1e59      	subs	r1, r3, #1
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	fbb1 f3f3 	udiv	r3, r1, r3
 800931e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009320:	4b9d      	ldr	r3, [pc, #628]	; (8009598 <USB_EPStartXfer+0x370>)
 8009322:	400b      	ands	r3, r1
 8009324:	69b9      	ldr	r1, [r7, #24]
 8009326:	0148      	lsls	r0, r1, #5
 8009328:	69f9      	ldr	r1, [r7, #28]
 800932a:	4401      	add	r1, r0
 800932c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009330:	4313      	orrs	r3, r2
 8009332:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009340:	691a      	ldr	r2, [r3, #16]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800934a:	69b9      	ldr	r1, [r7, #24]
 800934c:	0148      	lsls	r0, r1, #5
 800934e:	69f9      	ldr	r1, [r7, #28]
 8009350:	4401      	add	r1, r0
 8009352:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009356:	4313      	orrs	r3, r2
 8009358:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	791b      	ldrb	r3, [r3, #4]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d11f      	bne.n	80093a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	0151      	lsls	r1, r2, #5
 8009374:	69fa      	ldr	r2, [r7, #28]
 8009376:	440a      	add	r2, r1
 8009378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800937c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009380:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	4413      	add	r3, r2
 800938a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	69ba      	ldr	r2, [r7, #24]
 8009392:	0151      	lsls	r1, r2, #5
 8009394:	69fa      	ldr	r2, [r7, #28]
 8009396:	440a      	add	r2, r1
 8009398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800939c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d14b      	bne.n	8009440 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d009      	beq.n	80093c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093bc:	461a      	mov	r2, r3
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	791b      	ldrb	r3, [r3, #4]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d128      	bne.n	800941e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d110      	bne.n	80093fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	69ba      	ldr	r2, [r7, #24]
 80093ec:	0151      	lsls	r1, r2, #5
 80093ee:	69fa      	ldr	r2, [r7, #28]
 80093f0:	440a      	add	r2, r1
 80093f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093fa:	6013      	str	r3, [r2, #0]
 80093fc:	e00f      	b.n	800941e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	4413      	add	r3, r2
 8009406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	0151      	lsls	r1, r2, #5
 8009410:	69fa      	ldr	r2, [r7, #28]
 8009412:	440a      	add	r2, r1
 8009414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800941c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	0151      	lsls	r1, r2, #5
 8009430:	69fa      	ldr	r2, [r7, #28]
 8009432:	440a      	add	r2, r1
 8009434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009438:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800943c:	6013      	str	r3, [r2, #0]
 800943e:	e133      	b.n	80096a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	0151      	lsls	r1, r2, #5
 8009452:	69fa      	ldr	r2, [r7, #28]
 8009454:	440a      	add	r2, r1
 8009456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800945a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800945e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	791b      	ldrb	r3, [r3, #4]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d015      	beq.n	8009494 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 811b 	beq.w	80096a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	2101      	movs	r1, #1
 8009484:	fa01 f303 	lsl.w	r3, r1, r3
 8009488:	69f9      	ldr	r1, [r7, #28]
 800948a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800948e:	4313      	orrs	r3, r2
 8009490:	634b      	str	r3, [r1, #52]	; 0x34
 8009492:	e109      	b.n	80096a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d110      	bne.n	80094c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69ba      	ldr	r2, [r7, #24]
 80094b4:	0151      	lsls	r1, r2, #5
 80094b6:	69fa      	ldr	r2, [r7, #28]
 80094b8:	440a      	add	r2, r1
 80094ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	e00f      	b.n	80094e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	0151      	lsls	r1, r2, #5
 80094d8:	69fa      	ldr	r2, [r7, #28]
 80094da:	440a      	add	r2, r1
 80094dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	6919      	ldr	r1, [r3, #16]
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	781a      	ldrb	r2, [r3, #0]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	b298      	uxth	r0, r3
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	4603      	mov	r3, r0
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 fade 	bl	8009abc <USB_WritePacket>
 8009500:	e0d2      	b.n	80096a8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	69ba      	ldr	r2, [r7, #24]
 8009512:	0151      	lsls	r1, r2, #5
 8009514:	69fa      	ldr	r2, [r7, #28]
 8009516:	440a      	add	r2, r1
 8009518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800951c:	0cdb      	lsrs	r3, r3, #19
 800951e:	04db      	lsls	r3, r3, #19
 8009520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	0151      	lsls	r1, r2, #5
 8009534:	69fa      	ldr	r2, [r7, #28]
 8009536:	440a      	add	r2, r1
 8009538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800953c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009540:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009544:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d126      	bne.n	800959c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955a:	691a      	ldr	r2, [r3, #16]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009564:	69b9      	ldr	r1, [r7, #24]
 8009566:	0148      	lsls	r0, r1, #5
 8009568:	69f9      	ldr	r1, [r7, #28]
 800956a:	4401      	add	r1, r0
 800956c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009570:	4313      	orrs	r3, r2
 8009572:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	69ba      	ldr	r2, [r7, #24]
 8009584:	0151      	lsls	r1, r2, #5
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	440a      	add	r2, r1
 800958a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800958e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009592:	6113      	str	r3, [r2, #16]
 8009594:	e03a      	b.n	800960c <USB_EPStartXfer+0x3e4>
 8009596:	bf00      	nop
 8009598:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	699a      	ldr	r2, [r3, #24]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	4413      	add	r3, r2
 80095a6:	1e5a      	subs	r2, r3, #1
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	8afa      	ldrh	r2, [r7, #22]
 80095b8:	fb03 f202 	mul.w	r2, r3, r2
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095cc:	691a      	ldr	r2, [r3, #16]
 80095ce:	8afb      	ldrh	r3, [r7, #22]
 80095d0:	04d9      	lsls	r1, r3, #19
 80095d2:	4b38      	ldr	r3, [pc, #224]	; (80096b4 <USB_EPStartXfer+0x48c>)
 80095d4:	400b      	ands	r3, r1
 80095d6:	69b9      	ldr	r1, [r7, #24]
 80095d8:	0148      	lsls	r0, r1, #5
 80095da:	69f9      	ldr	r1, [r7, #28]
 80095dc:	4401      	add	r1, r0
 80095de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095e2:	4313      	orrs	r3, r2
 80095e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f2:	691a      	ldr	r2, [r3, #16]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095fc:	69b9      	ldr	r1, [r7, #24]
 80095fe:	0148      	lsls	r0, r1, #5
 8009600:	69f9      	ldr	r1, [r7, #28]
 8009602:	4401      	add	r1, r0
 8009604:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009608:	4313      	orrs	r3, r2
 800960a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d10d      	bne.n	800962e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d009      	beq.n	800962e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	6919      	ldr	r1, [r3, #16]
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	015a      	lsls	r2, r3, #5
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	4413      	add	r3, r2
 8009626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962a:	460a      	mov	r2, r1
 800962c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	791b      	ldrb	r3, [r3, #4]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d128      	bne.n	8009688 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009642:	2b00      	cmp	r3, #0
 8009644:	d110      	bne.n	8009668 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	4413      	add	r3, r2
 800964e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	0151      	lsls	r1, r2, #5
 8009658:	69fa      	ldr	r2, [r7, #28]
 800965a:	440a      	add	r2, r1
 800965c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009660:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009664:	6013      	str	r3, [r2, #0]
 8009666:	e00f      	b.n	8009688 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	69ba      	ldr	r2, [r7, #24]
 8009678:	0151      	lsls	r1, r2, #5
 800967a:	69fa      	ldr	r2, [r7, #28]
 800967c:	440a      	add	r2, r1
 800967e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009686:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	0151      	lsls	r1, r2, #5
 800969a:	69fa      	ldr	r2, [r7, #28]
 800969c:	440a      	add	r2, r1
 800969e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3720      	adds	r7, #32
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	1ff80000 	.word	0x1ff80000

080096b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	4613      	mov	r3, r2
 80096c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	f040 80ce 	bne.w	8009876 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d132      	bne.n	8009748 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	0151      	lsls	r1, r2, #5
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	440a      	add	r2, r1
 80096f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009700:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	0151      	lsls	r1, r2, #5
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	440a      	add	r2, r1
 800971c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009720:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009724:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	0151      	lsls	r1, r2, #5
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	440a      	add	r2, r1
 800973c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009740:	0cdb      	lsrs	r3, r3, #19
 8009742:	04db      	lsls	r3, r3, #19
 8009744:	6113      	str	r3, [r2, #16]
 8009746:	e04e      	b.n	80097e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	0151      	lsls	r1, r2, #5
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	440a      	add	r2, r1
 800975e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009762:	0cdb      	lsrs	r3, r3, #19
 8009764:	04db      	lsls	r3, r3, #19
 8009766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	0151      	lsls	r1, r2, #5
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	440a      	add	r2, r1
 800977e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009782:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009786:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800978a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	699a      	ldr	r2, [r3, #24]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	429a      	cmp	r2, r3
 8009796:	d903      	bls.n	80097a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	68da      	ldr	r2, [r3, #12]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	0151      	lsls	r1, r2, #5
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	440a      	add	r2, r1
 80097b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097cc:	691a      	ldr	r2, [r3, #16]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097d6:	6939      	ldr	r1, [r7, #16]
 80097d8:	0148      	lsls	r0, r1, #5
 80097da:	6979      	ldr	r1, [r7, #20]
 80097dc:	4401      	add	r1, r0
 80097de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80097e2:	4313      	orrs	r3, r2
 80097e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097e6:	79fb      	ldrb	r3, [r7, #7]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d11e      	bne.n	800982a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d009      	beq.n	8009808 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009800:	461a      	mov	r2, r3
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	0151      	lsls	r1, r2, #5
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	440a      	add	r2, r1
 800981e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009822:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009826:	6013      	str	r3, [r2, #0]
 8009828:	e097      	b.n	800995a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	0151      	lsls	r1, r2, #5
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	440a      	add	r2, r1
 8009840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009844:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009848:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 8083 	beq.w	800995a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800985a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	f003 030f 	and.w	r3, r3, #15
 8009864:	2101      	movs	r1, #1
 8009866:	fa01 f303 	lsl.w	r3, r1, r3
 800986a:	6979      	ldr	r1, [r7, #20]
 800986c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009870:	4313      	orrs	r3, r2
 8009872:	634b      	str	r3, [r1, #52]	; 0x34
 8009874:	e071      	b.n	800995a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	0151      	lsls	r1, r2, #5
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	440a      	add	r2, r1
 800988c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009890:	0cdb      	lsrs	r3, r3, #19
 8009892:	04db      	lsls	r3, r3, #19
 8009894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	0151      	lsls	r1, r2, #5
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	440a      	add	r2, r1
 80098ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	0151      	lsls	r1, r2, #5
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	440a      	add	r2, r1
 80098e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fe:	691a      	ldr	r2, [r3, #16]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009908:	6939      	ldr	r1, [r7, #16]
 800990a:	0148      	lsls	r0, r1, #5
 800990c:	6979      	ldr	r1, [r7, #20]
 800990e:	4401      	add	r1, r0
 8009910:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009914:	4313      	orrs	r3, r2
 8009916:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d10d      	bne.n	800993a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d009      	beq.n	800993a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	6919      	ldr	r1, [r3, #16]
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009936:	460a      	mov	r2, r1
 8009938:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	015a      	lsls	r2, r3, #5
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	4413      	add	r3, r2
 8009942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	0151      	lsls	r1, r2, #5
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	440a      	add	r2, r1
 8009950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009954:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009958:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	371c      	adds	r7, #28
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009972:	2300      	movs	r3, #0
 8009974:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	785b      	ldrb	r3, [r3, #1]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d14a      	bne.n	8009a1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800999a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800999e:	f040 8086 	bne.w	8009aae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	7812      	ldrb	r2, [r2, #0]
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	7812      	ldrb	r2, [r2, #0]
 80099da:	0151      	lsls	r1, r2, #5
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	440a      	add	r2, r1
 80099e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3301      	adds	r3, #1
 80099ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d902      	bls.n	8009a00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	75fb      	strb	r3, [r7, #23]
          break;
 80099fe:	e056      	b.n	8009aae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	015a      	lsls	r2, r3, #5
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a18:	d0e7      	beq.n	80099ea <USB_EPStopXfer+0x82>
 8009a1a:	e048      	b.n	8009aae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a34:	d13b      	bne.n	8009aae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	015a      	lsls	r2, r3, #5
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	4413      	add	r3, r2
 8009a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	7812      	ldrb	r2, [r2, #0]
 8009a4a:	0151      	lsls	r1, r2, #5
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	440a      	add	r2, r1
 8009a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	7812      	ldrb	r2, [r2, #0]
 8009a6e:	0151      	lsls	r1, r2, #5
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	440a      	add	r2, r1
 8009a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3301      	adds	r3, #1
 8009a82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d902      	bls.n	8009a94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	75fb      	strb	r3, [r7, #23]
          break;
 8009a92:	e00c      	b.n	8009aae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	015a      	lsls	r2, r3, #5
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aac:	d0e7      	beq.n	8009a7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b089      	sub	sp, #36	; 0x24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	4611      	mov	r1, r2
 8009ac8:	461a      	mov	r2, r3
 8009aca:	460b      	mov	r3, r1
 8009acc:	71fb      	strb	r3, [r7, #7]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009ada:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d123      	bne.n	8009b2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ae2:	88bb      	ldrh	r3, [r7, #4]
 8009ae4:	3303      	adds	r3, #3
 8009ae6:	089b      	lsrs	r3, r3, #2
 8009ae8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009aea:	2300      	movs	r3, #0
 8009aec:	61bb      	str	r3, [r7, #24]
 8009aee:	e018      	b.n	8009b22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009af0:	79fb      	ldrb	r3, [r7, #7]
 8009af2:	031a      	lsls	r2, r3, #12
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009afc:	461a      	mov	r2, r3
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	3301      	adds	r3, #1
 8009b08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	3301      	adds	r3, #1
 8009b14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	61bb      	str	r3, [r7, #24]
 8009b22:	69ba      	ldr	r2, [r7, #24]
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d3e2      	bcc.n	8009af0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3724      	adds	r7, #36	; 0x24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b08b      	sub	sp, #44	; 0x2c
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4613      	mov	r3, r2
 8009b44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b4e:	88fb      	ldrh	r3, [r7, #6]
 8009b50:	089b      	lsrs	r3, r3, #2
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b56:	88fb      	ldrh	r3, [r7, #6]
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b5e:	2300      	movs	r3, #0
 8009b60:	623b      	str	r3, [r7, #32]
 8009b62:	e014      	b.n	8009b8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	3301      	adds	r3, #1
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	3301      	adds	r3, #1
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	3301      	adds	r3, #1
 8009b80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	3301      	adds	r3, #1
 8009b86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	623b      	str	r3, [r7, #32]
 8009b8e:	6a3a      	ldr	r2, [r7, #32]
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d3e6      	bcc.n	8009b64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b96:	8bfb      	ldrh	r3, [r7, #30]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d01e      	beq.n	8009bda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f107 0310 	add.w	r3, r7, #16
 8009bac:	6812      	ldr	r2, [r2, #0]
 8009bae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc0:	701a      	strb	r2, [r3, #0]
      i++;
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	3301      	adds	r3, #1
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009bce:	8bfb      	ldrh	r3, [r7, #30]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009bd4:	8bfb      	ldrh	r3, [r7, #30]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1ea      	bne.n	8009bb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	372c      	adds	r7, #44	; 0x2c
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d12c      	bne.n	8009c5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	db12      	blt.n	8009c3c <USB_EPSetStall+0x54>
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00f      	beq.n	8009c3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	0151      	lsls	r1, r2, #5
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	440a      	add	r2, r1
 8009c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	015a      	lsls	r2, r3, #5
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	0151      	lsls	r1, r2, #5
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	440a      	add	r2, r1
 8009c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	e02b      	b.n	8009cb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	db12      	blt.n	8009c96 <USB_EPSetStall+0xae>
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00f      	beq.n	8009c96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	015a      	lsls	r2, r3, #5
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	0151      	lsls	r1, r2, #5
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	440a      	add	r2, r1
 8009c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	015a      	lsls	r2, r3, #5
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	0151      	lsls	r1, r2, #5
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	440a      	add	r2, r1
 8009cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	785b      	ldrb	r3, [r3, #1]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d128      	bne.n	8009d32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	0151      	lsls	r1, r2, #5
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	440a      	add	r2, r1
 8009cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cfe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	791b      	ldrb	r3, [r3, #4]
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d003      	beq.n	8009d10 <USB_EPClearStall+0x4c>
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	791b      	ldrb	r3, [r3, #4]
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d138      	bne.n	8009d82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	0151      	lsls	r1, r2, #5
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	440a      	add	r2, r1
 8009d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	e027      	b.n	8009d82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	015a      	lsls	r2, r3, #5
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	0151      	lsls	r1, r2, #5
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	440a      	add	r2, r1
 8009d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	791b      	ldrb	r3, [r3, #4]
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d003      	beq.n	8009d62 <USB_EPClearStall+0x9e>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	791b      	ldrb	r3, [r3, #4]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d10f      	bne.n	8009d82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	015a      	lsls	r2, r3, #5
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4413      	add	r3, r2
 8009d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	0151      	lsls	r1, r2, #5
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	440a      	add	r2, r1
 8009d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009db2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	78fb      	ldrb	r3, [r7, #3]
 8009dbe:	011b      	lsls	r3, r3, #4
 8009dc0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009dc4:	68f9      	ldr	r1, [r7, #12]
 8009dc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009df6:	f023 0303 	bic.w	r3, r3, #3
 8009dfa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e0a:	f023 0302 	bic.w	r3, r3, #2
 8009e0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b085      	sub	sp, #20
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e38:	f023 0303 	bic.w	r3, r3, #3
 8009e3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e4c:	f043 0302 	orr.w	r3, r3, #2
 8009e50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	4013      	ands	r3, r2
 8009e76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e78:	68fb      	ldr	r3, [r7, #12]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	0c1b      	lsrs	r3, r3, #16
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b085      	sub	sp, #20
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ecc:	699b      	ldr	r3, [r3, #24]
 8009ece:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed6:	69db      	ldr	r3, [r3, #28]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	4013      	ands	r3, r2
 8009edc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	b29b      	uxth	r3, r3
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3714      	adds	r7, #20
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b085      	sub	sp, #20
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009efe:	78fb      	ldrb	r3, [r7, #3]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	4013      	ands	r3, r2
 8009f1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f1c:	68bb      	ldr	r3, [r7, #8]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b087      	sub	sp, #28
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	460b      	mov	r3, r1
 8009f34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f4e:	78fb      	ldrb	r3, [r7, #3]
 8009f50:	f003 030f 	and.w	r3, r3, #15
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	fa22 f303 	lsr.w	r3, r2, r3
 8009f5a:	01db      	lsls	r3, r3, #7
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009f64:	78fb      	ldrb	r3, [r7, #3]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	4013      	ands	r3, r2
 8009f76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f78:	68bb      	ldr	r3, [r7, #8]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	371c      	adds	r7, #28
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b083      	sub	sp, #12
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	f003 0301 	and.w	r3, r3, #1
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b085      	sub	sp, #20
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009fc0:	f023 0307 	bic.w	r3, r3, #7
 8009fc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	333c      	adds	r3, #60	; 0x3c
 8009ffe:	3304      	adds	r3, #4
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	4a26      	ldr	r2, [pc, #152]	; (800a0a0 <USB_EP0_OutStart+0xb8>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d90a      	bls.n	800a022 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a01c:	d101      	bne.n	800a022 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	e037      	b.n	800a092 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a028:	461a      	mov	r2, r3
 800a02a:	2300      	movs	r3, #0
 800a02c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a03c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a040:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a050:	f043 0318 	orr.w	r3, r3, #24
 800a054:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a064:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a068:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a06a:	7afb      	ldrb	r3, [r7, #11]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d10f      	bne.n	800a090 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a076:	461a      	mov	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a08a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a08e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	371c      	adds	r7, #28
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	4f54300a 	.word	0x4f54300a

0800a0a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	4a13      	ldr	r2, [pc, #76]	; (800a108 <USB_CoreReset+0x64>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d901      	bls.n	800a0c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e01b      	b.n	800a0fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	daf2      	bge.n	800a0b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	f043 0201 	orr.w	r2, r3, #1
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4a09      	ldr	r2, [pc, #36]	; (800a108 <USB_CoreReset+0x64>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d901      	bls.n	800a0ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e006      	b.n	800a0fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d0f0      	beq.n	800a0da <USB_CoreReset+0x36>

  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	00030d40 	.word	0x00030d40

0800a10c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	460b      	mov	r3, r1
 800a116:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a118:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a11c:	f005 fa2c 	bl	800f578 <USBD_static_malloc>
 800a120:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d109      	bne.n	800a13c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	32b0      	adds	r2, #176	; 0xb0
 800a132:	2100      	movs	r1, #0
 800a134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a138:	2302      	movs	r3, #2
 800a13a:	e0d4      	b.n	800a2e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a13c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a140:	2100      	movs	r1, #0
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f005 ffe7 	bl	8010116 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	32b0      	adds	r2, #176	; 0xb0
 800a152:	68f9      	ldr	r1, [r7, #12]
 800a154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	32b0      	adds	r2, #176	; 0xb0
 800a162:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	7c1b      	ldrb	r3, [r3, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d138      	bne.n	800a1e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a174:	4b5e      	ldr	r3, [pc, #376]	; (800a2f0 <USBD_CDC_Init+0x1e4>)
 800a176:	7819      	ldrb	r1, [r3, #0]
 800a178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a17c:	2202      	movs	r2, #2
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f005 f8d7 	bl	800f332 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a184:	4b5a      	ldr	r3, [pc, #360]	; (800a2f0 <USBD_CDC_Init+0x1e4>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	f003 020f 	and.w	r2, r3, #15
 800a18c:	6879      	ldr	r1, [r7, #4]
 800a18e:	4613      	mov	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	440b      	add	r3, r1
 800a198:	3324      	adds	r3, #36	; 0x24
 800a19a:	2201      	movs	r2, #1
 800a19c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a19e:	4b55      	ldr	r3, [pc, #340]	; (800a2f4 <USBD_CDC_Init+0x1e8>)
 800a1a0:	7819      	ldrb	r1, [r3, #0]
 800a1a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f005 f8c2 	bl	800f332 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a1ae:	4b51      	ldr	r3, [pc, #324]	; (800a2f4 <USBD_CDC_Init+0x1e8>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	f003 020f 	and.w	r2, r3, #15
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	440b      	add	r3, r1
 800a1c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a1ca:	4b4b      	ldr	r3, [pc, #300]	; (800a2f8 <USBD_CDC_Init+0x1ec>)
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	f003 020f 	and.w	r2, r3, #15
 800a1d2:	6879      	ldr	r1, [r7, #4]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4413      	add	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	440b      	add	r3, r1
 800a1de:	3326      	adds	r3, #38	; 0x26
 800a1e0:	2210      	movs	r2, #16
 800a1e2:	801a      	strh	r2, [r3, #0]
 800a1e4:	e035      	b.n	800a252 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a1e6:	4b42      	ldr	r3, [pc, #264]	; (800a2f0 <USBD_CDC_Init+0x1e4>)
 800a1e8:	7819      	ldrb	r1, [r3, #0]
 800a1ea:	2340      	movs	r3, #64	; 0x40
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f005 f89f 	bl	800f332 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a1f4:	4b3e      	ldr	r3, [pc, #248]	; (800a2f0 <USBD_CDC_Init+0x1e4>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	f003 020f 	and.w	r2, r3, #15
 800a1fc:	6879      	ldr	r1, [r7, #4]
 800a1fe:	4613      	mov	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	440b      	add	r3, r1
 800a208:	3324      	adds	r3, #36	; 0x24
 800a20a:	2201      	movs	r2, #1
 800a20c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a20e:	4b39      	ldr	r3, [pc, #228]	; (800a2f4 <USBD_CDC_Init+0x1e8>)
 800a210:	7819      	ldrb	r1, [r3, #0]
 800a212:	2340      	movs	r3, #64	; 0x40
 800a214:	2202      	movs	r2, #2
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f005 f88b 	bl	800f332 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a21c:	4b35      	ldr	r3, [pc, #212]	; (800a2f4 <USBD_CDC_Init+0x1e8>)
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	f003 020f 	and.w	r2, r3, #15
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	4613      	mov	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	440b      	add	r3, r1
 800a230:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a234:	2201      	movs	r2, #1
 800a236:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a238:	4b2f      	ldr	r3, [pc, #188]	; (800a2f8 <USBD_CDC_Init+0x1ec>)
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	f003 020f 	and.w	r2, r3, #15
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	4613      	mov	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	440b      	add	r3, r1
 800a24c:	3326      	adds	r3, #38	; 0x26
 800a24e:	2210      	movs	r2, #16
 800a250:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a252:	4b29      	ldr	r3, [pc, #164]	; (800a2f8 <USBD_CDC_Init+0x1ec>)
 800a254:	7819      	ldrb	r1, [r3, #0]
 800a256:	2308      	movs	r3, #8
 800a258:	2203      	movs	r2, #3
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f005 f869 	bl	800f332 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a260:	4b25      	ldr	r3, [pc, #148]	; (800a2f8 <USBD_CDC_Init+0x1ec>)
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	f003 020f 	and.w	r2, r3, #15
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	4613      	mov	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	440b      	add	r3, r1
 800a274:	3324      	adds	r3, #36	; 0x24
 800a276:	2201      	movs	r2, #1
 800a278:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	33b0      	adds	r3, #176	; 0xb0
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d101      	bne.n	800a2b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	e018      	b.n	800a2e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	7c1b      	ldrb	r3, [r3, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10a      	bne.n	800a2d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2bc:	4b0d      	ldr	r3, [pc, #52]	; (800a2f4 <USBD_CDC_Init+0x1e8>)
 800a2be:	7819      	ldrb	r1, [r3, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f005 f920 	bl	800f510 <USBD_LL_PrepareReceive>
 800a2d0:	e008      	b.n	800a2e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2d2:	4b08      	ldr	r3, [pc, #32]	; (800a2f4 <USBD_CDC_Init+0x1e8>)
 800a2d4:	7819      	ldrb	r1, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2dc:	2340      	movs	r3, #64	; 0x40
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f005 f916 	bl	800f510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	2000010f 	.word	0x2000010f
 800a2f4:	20000110 	.word	0x20000110
 800a2f8:	20000111 	.word	0x20000111

0800a2fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	460b      	mov	r3, r1
 800a306:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a308:	4b3a      	ldr	r3, [pc, #232]	; (800a3f4 <USBD_CDC_DeInit+0xf8>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f005 f835 	bl	800f37e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a314:	4b37      	ldr	r3, [pc, #220]	; (800a3f4 <USBD_CDC_DeInit+0xf8>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	f003 020f 	and.w	r2, r3, #15
 800a31c:	6879      	ldr	r1, [r7, #4]
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	440b      	add	r3, r1
 800a328:	3324      	adds	r3, #36	; 0x24
 800a32a:	2200      	movs	r2, #0
 800a32c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a32e:	4b32      	ldr	r3, [pc, #200]	; (800a3f8 <USBD_CDC_DeInit+0xfc>)
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f005 f822 	bl	800f37e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a33a:	4b2f      	ldr	r3, [pc, #188]	; (800a3f8 <USBD_CDC_DeInit+0xfc>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	f003 020f 	and.w	r2, r3, #15
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	4613      	mov	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	440b      	add	r3, r1
 800a34e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a352:	2200      	movs	r2, #0
 800a354:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a356:	4b29      	ldr	r3, [pc, #164]	; (800a3fc <USBD_CDC_DeInit+0x100>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f005 f80e 	bl	800f37e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a362:	4b26      	ldr	r3, [pc, #152]	; (800a3fc <USBD_CDC_DeInit+0x100>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	f003 020f 	and.w	r2, r3, #15
 800a36a:	6879      	ldr	r1, [r7, #4]
 800a36c:	4613      	mov	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	440b      	add	r3, r1
 800a376:	3324      	adds	r3, #36	; 0x24
 800a378:	2200      	movs	r2, #0
 800a37a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a37c:	4b1f      	ldr	r3, [pc, #124]	; (800a3fc <USBD_CDC_DeInit+0x100>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	f003 020f 	and.w	r2, r3, #15
 800a384:	6879      	ldr	r1, [r7, #4]
 800a386:	4613      	mov	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	440b      	add	r3, r1
 800a390:	3326      	adds	r3, #38	; 0x26
 800a392:	2200      	movs	r2, #0
 800a394:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	32b0      	adds	r2, #176	; 0xb0
 800a3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d01f      	beq.n	800a3e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	33b0      	adds	r3, #176	; 0xb0
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	32b0      	adds	r2, #176	; 0xb0
 800a3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f005 f8e2 	bl	800f594 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	32b0      	adds	r2, #176	; 0xb0
 800a3da:	2100      	movs	r1, #0
 800a3dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	2000010f 	.word	0x2000010f
 800a3f8:	20000110 	.word	0x20000110
 800a3fc:	20000111 	.word	0x20000111

0800a400 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	32b0      	adds	r2, #176	; 0xb0
 800a414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a418:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a41a:	2300      	movs	r3, #0
 800a41c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a42c:	2303      	movs	r3, #3
 800a42e:	e0bf      	b.n	800a5b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d050      	beq.n	800a4de <USBD_CDC_Setup+0xde>
 800a43c:	2b20      	cmp	r3, #32
 800a43e:	f040 80af 	bne.w	800a5a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	88db      	ldrh	r3, [r3, #6]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d03a      	beq.n	800a4c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	b25b      	sxtb	r3, r3
 800a450:	2b00      	cmp	r3, #0
 800a452:	da1b      	bge.n	800a48c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	33b0      	adds	r3, #176	; 0xb0
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4413      	add	r3, r2
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a46a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	88d2      	ldrh	r2, [r2, #6]
 800a470:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	88db      	ldrh	r3, [r3, #6]
 800a476:	2b07      	cmp	r3, #7
 800a478:	bf28      	it	cs
 800a47a:	2307      	movcs	r3, #7
 800a47c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	89fa      	ldrh	r2, [r7, #14]
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f001 fd89 	bl	800bf9c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a48a:	e090      	b.n	800a5ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	785a      	ldrb	r2, [r3, #1]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	88db      	ldrh	r3, [r3, #6]
 800a49a:	2b3f      	cmp	r3, #63	; 0x3f
 800a49c:	d803      	bhi.n	800a4a6 <USBD_CDC_Setup+0xa6>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	88db      	ldrh	r3, [r3, #6]
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	e000      	b.n	800a4a8 <USBD_CDC_Setup+0xa8>
 800a4a6:	2240      	movs	r2, #64	; 0x40
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a4ae:	6939      	ldr	r1, [r7, #16]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 fd9b 	bl	800bff4 <USBD_CtlPrepareRx>
      break;
 800a4be:	e076      	b.n	800a5ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	33b0      	adds	r3, #176	; 0xb0
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	7850      	ldrb	r0, [r2, #1]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	4798      	blx	r3
      break;
 800a4dc:	e067      	b.n	800a5ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	785b      	ldrb	r3, [r3, #1]
 800a4e2:	2b0b      	cmp	r3, #11
 800a4e4:	d851      	bhi.n	800a58a <USBD_CDC_Setup+0x18a>
 800a4e6:	a201      	add	r2, pc, #4	; (adr r2, 800a4ec <USBD_CDC_Setup+0xec>)
 800a4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ec:	0800a51d 	.word	0x0800a51d
 800a4f0:	0800a599 	.word	0x0800a599
 800a4f4:	0800a58b 	.word	0x0800a58b
 800a4f8:	0800a58b 	.word	0x0800a58b
 800a4fc:	0800a58b 	.word	0x0800a58b
 800a500:	0800a58b 	.word	0x0800a58b
 800a504:	0800a58b 	.word	0x0800a58b
 800a508:	0800a58b 	.word	0x0800a58b
 800a50c:	0800a58b 	.word	0x0800a58b
 800a510:	0800a58b 	.word	0x0800a58b
 800a514:	0800a547 	.word	0x0800a547
 800a518:	0800a571 	.word	0x0800a571
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b03      	cmp	r3, #3
 800a526:	d107      	bne.n	800a538 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a528:	f107 030a 	add.w	r3, r7, #10
 800a52c:	2202      	movs	r2, #2
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f001 fd33 	bl	800bf9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a536:	e032      	b.n	800a59e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f001 fcbd 	bl	800beba <USBD_CtlError>
            ret = USBD_FAIL;
 800a540:	2303      	movs	r3, #3
 800a542:	75fb      	strb	r3, [r7, #23]
          break;
 800a544:	e02b      	b.n	800a59e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d107      	bne.n	800a562 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a552:	f107 030d 	add.w	r3, r7, #13
 800a556:	2201      	movs	r2, #1
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f001 fd1e 	bl	800bf9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a560:	e01d      	b.n	800a59e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f001 fca8 	bl	800beba <USBD_CtlError>
            ret = USBD_FAIL;
 800a56a:	2303      	movs	r3, #3
 800a56c:	75fb      	strb	r3, [r7, #23]
          break;
 800a56e:	e016      	b.n	800a59e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d00f      	beq.n	800a59c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f001 fc9b 	bl	800beba <USBD_CtlError>
            ret = USBD_FAIL;
 800a584:	2303      	movs	r3, #3
 800a586:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a588:	e008      	b.n	800a59c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a58a:	6839      	ldr	r1, [r7, #0]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f001 fc94 	bl	800beba <USBD_CtlError>
          ret = USBD_FAIL;
 800a592:	2303      	movs	r3, #3
 800a594:	75fb      	strb	r3, [r7, #23]
          break;
 800a596:	e002      	b.n	800a59e <USBD_CDC_Setup+0x19e>
          break;
 800a598:	bf00      	nop
 800a59a:	e008      	b.n	800a5ae <USBD_CDC_Setup+0x1ae>
          break;
 800a59c:	bf00      	nop
      }
      break;
 800a59e:	e006      	b.n	800a5ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f001 fc89 	bl	800beba <USBD_CtlError>
      ret = USBD_FAIL;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a5ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	32b0      	adds	r2, #176	; 0xb0
 800a5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e065      	b.n	800a6ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	32b0      	adds	r2, #176	; 0xb0
 800a5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a5f2:	78fb      	ldrb	r3, [r7, #3]
 800a5f4:	f003 020f 	and.w	r2, r3, #15
 800a5f8:	6879      	ldr	r1, [r7, #4]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	440b      	add	r3, r1
 800a604:	3318      	adds	r3, #24
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d02f      	beq.n	800a66c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a60c:	78fb      	ldrb	r3, [r7, #3]
 800a60e:	f003 020f 	and.w	r2, r3, #15
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	4613      	mov	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	440b      	add	r3, r1
 800a61e:	3318      	adds	r3, #24
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	78fb      	ldrb	r3, [r7, #3]
 800a624:	f003 010f 	and.w	r1, r3, #15
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	460b      	mov	r3, r1
 800a62c:	00db      	lsls	r3, r3, #3
 800a62e:	440b      	add	r3, r1
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4403      	add	r3, r0
 800a634:	3348      	adds	r3, #72	; 0x48
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	fbb2 f1f3 	udiv	r1, r2, r3
 800a63c:	fb01 f303 	mul.w	r3, r1, r3
 800a640:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a642:	2b00      	cmp	r3, #0
 800a644:	d112      	bne.n	800a66c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a646:	78fb      	ldrb	r3, [r7, #3]
 800a648:	f003 020f 	and.w	r2, r3, #15
 800a64c:	6879      	ldr	r1, [r7, #4]
 800a64e:	4613      	mov	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4413      	add	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	440b      	add	r3, r1
 800a658:	3318      	adds	r3, #24
 800a65a:	2200      	movs	r2, #0
 800a65c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a65e:	78f9      	ldrb	r1, [r7, #3]
 800a660:	2300      	movs	r3, #0
 800a662:	2200      	movs	r2, #0
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f004 ff32 	bl	800f4ce <USBD_LL_Transmit>
 800a66a:	e01f      	b.n	800a6ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2200      	movs	r2, #0
 800a670:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	33b0      	adds	r3, #176	; 0xb0
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d010      	beq.n	800a6ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	33b0      	adds	r3, #176	; 0xb0
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	4413      	add	r3, r2
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a6a8:	78fa      	ldrb	r2, [r7, #3]
 800a6aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	32b0      	adds	r2, #176	; 0xb0
 800a6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	32b0      	adds	r2, #176	; 0xb0
 800a6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	e01a      	b.n	800a71e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f004 ff30 	bl	800f552 <USBD_LL_GetRxDataSize>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	33b0      	adds	r3, #176	; 0xb0
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a718:	4611      	mov	r1, r2
 800a71a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	32b0      	adds	r2, #176	; 0xb0
 800a738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d101      	bne.n	800a748 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a744:	2303      	movs	r3, #3
 800a746:	e025      	b.n	800a794 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	33b0      	adds	r3, #176	; 0xb0
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01a      	beq.n	800a792 <USBD_CDC_EP0_RxReady+0x6c>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a762:	2bff      	cmp	r3, #255	; 0xff
 800a764:	d015      	beq.n	800a792 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	33b0      	adds	r3, #176	; 0xb0
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a77e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a786:	b292      	uxth	r2, r2
 800a788:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	22ff      	movs	r2, #255	; 0xff
 800a78e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7a4:	2182      	movs	r1, #130	; 0x82
 800a7a6:	4818      	ldr	r0, [pc, #96]	; (800a808 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7a8:	f000 fd4f 	bl	800b24a <USBD_GetEpDesc>
 800a7ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	4815      	ldr	r0, [pc, #84]	; (800a808 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7b2:	f000 fd4a 	bl	800b24a <USBD_GetEpDesc>
 800a7b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7b8:	2181      	movs	r1, #129	; 0x81
 800a7ba:	4813      	ldr	r0, [pc, #76]	; (800a808 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7bc:	f000 fd45 	bl	800b24a <USBD_GetEpDesc>
 800a7c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	2210      	movs	r2, #16
 800a7cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d006      	beq.n	800a7e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7dc:	711a      	strb	r2, [r3, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d006      	beq.n	800a7f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7f0:	711a      	strb	r2, [r3, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2243      	movs	r2, #67	; 0x43
 800a7fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7fc:	4b02      	ldr	r3, [pc, #8]	; (800a808 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	200000cc 	.word	0x200000cc

0800a80c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a814:	2182      	movs	r1, #130	; 0x82
 800a816:	4818      	ldr	r0, [pc, #96]	; (800a878 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a818:	f000 fd17 	bl	800b24a <USBD_GetEpDesc>
 800a81c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a81e:	2101      	movs	r1, #1
 800a820:	4815      	ldr	r0, [pc, #84]	; (800a878 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a822:	f000 fd12 	bl	800b24a <USBD_GetEpDesc>
 800a826:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a828:	2181      	movs	r1, #129	; 0x81
 800a82a:	4813      	ldr	r0, [pc, #76]	; (800a878 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a82c:	f000 fd0d 	bl	800b24a <USBD_GetEpDesc>
 800a830:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2210      	movs	r2, #16
 800a83c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d006      	beq.n	800a852 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	2200      	movs	r2, #0
 800a848:	711a      	strb	r2, [r3, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f042 0202 	orr.w	r2, r2, #2
 800a850:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d006      	beq.n	800a866 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	711a      	strb	r2, [r3, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f042 0202 	orr.w	r2, r2, #2
 800a864:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2243      	movs	r2, #67	; 0x43
 800a86a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a86c:	4b02      	ldr	r3, [pc, #8]	; (800a878 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	200000cc 	.word	0x200000cc

0800a87c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a884:	2182      	movs	r1, #130	; 0x82
 800a886:	4818      	ldr	r0, [pc, #96]	; (800a8e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a888:	f000 fcdf 	bl	800b24a <USBD_GetEpDesc>
 800a88c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a88e:	2101      	movs	r1, #1
 800a890:	4815      	ldr	r0, [pc, #84]	; (800a8e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a892:	f000 fcda 	bl	800b24a <USBD_GetEpDesc>
 800a896:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a898:	2181      	movs	r1, #129	; 0x81
 800a89a:	4813      	ldr	r0, [pc, #76]	; (800a8e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a89c:	f000 fcd5 	bl	800b24a <USBD_GetEpDesc>
 800a8a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2210      	movs	r2, #16
 800a8ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d006      	beq.n	800a8c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8bc:	711a      	strb	r2, [r3, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d006      	beq.n	800a8d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8d0:	711a      	strb	r2, [r3, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2243      	movs	r2, #67	; 0x43
 800a8da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a8dc:	4b02      	ldr	r3, [pc, #8]	; (800a8e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3718      	adds	r7, #24
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	200000cc 	.word	0x200000cc

0800a8ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	220a      	movs	r2, #10
 800a8f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a8fa:	4b03      	ldr	r3, [pc, #12]	; (800a908 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	20000088 	.word	0x20000088

0800a90c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d101      	bne.n	800a920 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a91c:	2303      	movs	r3, #3
 800a91e:	e009      	b.n	800a934 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	33b0      	adds	r3, #176	; 0xb0
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a940:	b480      	push	{r7}
 800a942:	b087      	sub	sp, #28
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	32b0      	adds	r2, #176	; 0xb0
 800a956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a95a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a962:	2303      	movs	r3, #3
 800a964:	e008      	b.n	800a978 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	32b0      	adds	r2, #176	; 0xb0
 800a998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e004      	b.n	800a9b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
	...

0800a9c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	32b0      	adds	r2, #176	; 0xb0
 800a9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	32b0      	adds	r2, #176	; 0xb0
 800a9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e025      	b.n	800aa3e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d11f      	bne.n	800aa3c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800aa04:	4b10      	ldr	r3, [pc, #64]	; (800aa48 <USBD_CDC_TransmitPacket+0x88>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	f003 020f 	and.w	r2, r3, #15
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4613      	mov	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4403      	add	r3, r0
 800aa1e:	3318      	adds	r3, #24
 800aa20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800aa22:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <USBD_CDC_TransmitPacket+0x88>)
 800aa24:	7819      	ldrb	r1, [r3, #0]
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f004 fd4b 	bl	800f4ce <USBD_LL_Transmit>

    ret = USBD_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	2000010f 	.word	0x2000010f

0800aa4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	32b0      	adds	r2, #176	; 0xb0
 800aa5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	32b0      	adds	r2, #176	; 0xb0
 800aa6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e018      	b.n	800aaac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	7c1b      	ldrb	r3, [r3, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10a      	bne.n	800aa98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa82:	4b0c      	ldr	r3, [pc, #48]	; (800aab4 <USBD_CDC_ReceivePacket+0x68>)
 800aa84:	7819      	ldrb	r1, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f004 fd3d 	bl	800f510 <USBD_LL_PrepareReceive>
 800aa96:	e008      	b.n	800aaaa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa98:	4b06      	ldr	r3, [pc, #24]	; (800aab4 <USBD_CDC_ReceivePacket+0x68>)
 800aa9a:	7819      	ldrb	r1, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aaa2:	2340      	movs	r3, #64	; 0x40
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f004 fd33 	bl	800f510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	20000110 	.word	0x20000110

0800aab8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	4613      	mov	r3, r2
 800aac4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aacc:	2303      	movs	r3, #3
 800aace:	e01f      	b.n	800ab10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	79fa      	ldrb	r2, [r7, #7]
 800ab02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f004 fbad 	bl	800f264 <USBD_LL_Init>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab22:	2300      	movs	r3, #0
 800ab24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e025      	b.n	800ab7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	32ae      	adds	r2, #174	; 0xae
 800ab42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00f      	beq.n	800ab6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	32ae      	adds	r2, #174	; 0xae
 800ab56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5c:	f107 020e 	add.w	r2, r7, #14
 800ab60:	4610      	mov	r0, r2
 800ab62:	4798      	blx	r3
 800ab64:	4602      	mov	r2, r0
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f004 fbb5 	bl	800f2fc <USBD_LL_Start>
 800ab92:	4603      	mov	r3, r0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aba4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	460b      	mov	r3, r1
 800abbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d009      	beq.n	800abe0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	78fa      	ldrb	r2, [r7, #3]
 800abd6:	4611      	mov	r1, r2
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	4798      	blx	r3
 800abdc:	4603      	mov	r3, r0
 800abde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	460b      	mov	r3, r1
 800abf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	78fa      	ldrb	r2, [r7, #3]
 800ac04:	4611      	mov	r1, r2
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	4798      	blx	r3
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ac10:	2303      	movs	r3, #3
 800ac12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f001 f908 	bl	800be46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ac44:	461a      	mov	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac52:	f003 031f 	and.w	r3, r3, #31
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d01a      	beq.n	800ac90 <USBD_LL_SetupStage+0x72>
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d822      	bhi.n	800aca4 <USBD_LL_SetupStage+0x86>
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <USBD_LL_SetupStage+0x4a>
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d00a      	beq.n	800ac7c <USBD_LL_SetupStage+0x5e>
 800ac66:	e01d      	b.n	800aca4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fb5f 	bl	800b334 <USBD_StdDevReq>
 800ac76:	4603      	mov	r3, r0
 800ac78:	73fb      	strb	r3, [r7, #15]
      break;
 800ac7a:	e020      	b.n	800acbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fbc7 	bl	800b418 <USBD_StdItfReq>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac8e:	e016      	b.n	800acbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac96:	4619      	mov	r1, r3
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fc29 	bl	800b4f0 <USBD_StdEPReq>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73fb      	strb	r3, [r7, #15]
      break;
 800aca2:	e00c      	b.n	800acbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800acaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f004 fb82 	bl	800f3bc <USBD_LL_StallEP>
 800acb8:	4603      	mov	r3, r0
 800acba:	73fb      	strb	r3, [r7, #15]
      break;
 800acbc:	bf00      	nop
  }

  return ret;
 800acbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	460b      	mov	r3, r1
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800acda:	7afb      	ldrb	r3, [r7, #11]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d16e      	bne.n	800adbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ace6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800acee:	2b03      	cmp	r3, #3
 800acf0:	f040 8098 	bne.w	800ae24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	689a      	ldr	r2, [r3, #8]
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d913      	bls.n	800ad28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	689a      	ldr	r2, [r3, #8]
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	1ad2      	subs	r2, r2, r3
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	4293      	cmp	r3, r2
 800ad18:	bf28      	it	cs
 800ad1a:	4613      	movcs	r3, r2
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f001 f984 	bl	800c02e <USBD_CtlContinueRx>
 800ad26:	e07d      	b.n	800ae24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ad2e:	f003 031f 	and.w	r3, r3, #31
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d014      	beq.n	800ad60 <USBD_LL_DataOutStage+0x98>
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d81d      	bhi.n	800ad76 <USBD_LL_DataOutStage+0xae>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <USBD_LL_DataOutStage+0x7c>
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d003      	beq.n	800ad4a <USBD_LL_DataOutStage+0x82>
 800ad42:	e018      	b.n	800ad76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ad44:	2300      	movs	r3, #0
 800ad46:	75bb      	strb	r3, [r7, #22]
            break;
 800ad48:	e018      	b.n	800ad7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	4619      	mov	r1, r3
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f000 fa5e 	bl	800b216 <USBD_CoreFindIF>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	75bb      	strb	r3, [r7, #22]
            break;
 800ad5e:	e00d      	b.n	800ad7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	4619      	mov	r1, r3
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f000 fa60 	bl	800b230 <USBD_CoreFindEP>
 800ad70:	4603      	mov	r3, r0
 800ad72:	75bb      	strb	r3, [r7, #22]
            break;
 800ad74:	e002      	b.n	800ad7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ad76:	2300      	movs	r3, #0
 800ad78:	75bb      	strb	r3, [r7, #22]
            break;
 800ad7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ad7c:	7dbb      	ldrb	r3, [r7, #22]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d119      	bne.n	800adb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b03      	cmp	r3, #3
 800ad8c:	d113      	bne.n	800adb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ad8e:	7dba      	ldrb	r2, [r7, #22]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	32ae      	adds	r2, #174	; 0xae
 800ad94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00b      	beq.n	800adb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ad9e:	7dba      	ldrb	r2, [r7, #22]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ada6:	7dba      	ldrb	r2, [r7, #22]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	32ae      	adds	r2, #174	; 0xae
 800adac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f001 f94a 	bl	800c050 <USBD_CtlSendStatus>
 800adbc:	e032      	b.n	800ae24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800adbe:	7afb      	ldrb	r3, [r7, #11]
 800adc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	4619      	mov	r1, r3
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 fa31 	bl	800b230 <USBD_CoreFindEP>
 800adce:	4603      	mov	r3, r0
 800add0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800add2:	7dbb      	ldrb	r3, [r7, #22]
 800add4:	2bff      	cmp	r3, #255	; 0xff
 800add6:	d025      	beq.n	800ae24 <USBD_LL_DataOutStage+0x15c>
 800add8:	7dbb      	ldrb	r3, [r7, #22]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d122      	bne.n	800ae24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d117      	bne.n	800ae1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800adea:	7dba      	ldrb	r2, [r7, #22]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	32ae      	adds	r2, #174	; 0xae
 800adf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00f      	beq.n	800ae1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800adfa:	7dba      	ldrb	r2, [r7, #22]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ae02:	7dba      	ldrb	r2, [r7, #22]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	32ae      	adds	r2, #174	; 0xae
 800ae08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	7afa      	ldrb	r2, [r7, #11]
 800ae10:	4611      	mov	r1, r2
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	4798      	blx	r3
 800ae16:	4603      	mov	r3, r0
 800ae18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ae1a:	7dfb      	ldrb	r3, [r7, #23]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ae20:	7dfb      	ldrb	r3, [r7, #23]
 800ae22:	e000      	b.n	800ae26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b086      	sub	sp, #24
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	60f8      	str	r0, [r7, #12]
 800ae36:	460b      	mov	r3, r1
 800ae38:	607a      	str	r2, [r7, #4]
 800ae3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ae3c:	7afb      	ldrb	r3, [r7, #11]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d16f      	bne.n	800af22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3314      	adds	r3, #20
 800ae46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d15a      	bne.n	800af08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	689a      	ldr	r2, [r3, #8]
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d914      	bls.n	800ae88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	689a      	ldr	r2, [r3, #8]
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	1ad2      	subs	r2, r2, r3
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	461a      	mov	r2, r3
 800ae72:	6879      	ldr	r1, [r7, #4]
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f001 f8ac 	bl	800bfd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	2100      	movs	r1, #0
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f004 fb45 	bl	800f510 <USBD_LL_PrepareReceive>
 800ae86:	e03f      	b.n	800af08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d11c      	bne.n	800aece <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d316      	bcc.n	800aece <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d20f      	bcs.n	800aece <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f001 f88d 	bl	800bfd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aec0:	2300      	movs	r3, #0
 800aec2:	2200      	movs	r2, #0
 800aec4:	2100      	movs	r1, #0
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f004 fb22 	bl	800f510 <USBD_LL_PrepareReceive>
 800aecc:	e01c      	b.n	800af08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	2b03      	cmp	r3, #3
 800aed8:	d10f      	bne.n	800aefa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d009      	beq.n	800aefa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aefa:	2180      	movs	r1, #128	; 0x80
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f004 fa5d 	bl	800f3bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f001 f8b7 	bl	800c076 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d03a      	beq.n	800af88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7ff fe42 	bl	800ab9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800af20:	e032      	b.n	800af88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800af22:	7afb      	ldrb	r3, [r7, #11]
 800af24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	4619      	mov	r1, r3
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f000 f97f 	bl	800b230 <USBD_CoreFindEP>
 800af32:	4603      	mov	r3, r0
 800af34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af36:	7dfb      	ldrb	r3, [r7, #23]
 800af38:	2bff      	cmp	r3, #255	; 0xff
 800af3a:	d025      	beq.n	800af88 <USBD_LL_DataInStage+0x15a>
 800af3c:	7dfb      	ldrb	r3, [r7, #23]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d122      	bne.n	800af88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b03      	cmp	r3, #3
 800af4c:	d11c      	bne.n	800af88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800af4e:	7dfa      	ldrb	r2, [r7, #23]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	32ae      	adds	r2, #174	; 0xae
 800af54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d014      	beq.n	800af88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800af5e:	7dfa      	ldrb	r2, [r7, #23]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800af66:	7dfa      	ldrb	r2, [r7, #23]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	32ae      	adds	r2, #174	; 0xae
 800af6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	7afa      	ldrb	r2, [r7, #11]
 800af74:	4611      	mov	r1, r2
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	4798      	blx	r3
 800af7a:	4603      	mov	r3, r0
 800af7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800af7e:	7dbb      	ldrb	r3, [r7, #22]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800af84:	7dbb      	ldrb	r3, [r7, #22]
 800af86:	e000      	b.n	800af8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3718      	adds	r7, #24
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d014      	beq.n	800aff8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00e      	beq.n	800aff8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	6852      	ldr	r2, [r2, #4]
 800afe6:	b2d2      	uxtb	r2, r2
 800afe8:	4611      	mov	r1, r2
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	4798      	blx	r3
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aff4:	2303      	movs	r3, #3
 800aff6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aff8:	2340      	movs	r3, #64	; 0x40
 800affa:	2200      	movs	r2, #0
 800affc:	2100      	movs	r1, #0
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f004 f997 	bl	800f332 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2240      	movs	r2, #64	; 0x40
 800b010:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b014:	2340      	movs	r3, #64	; 0x40
 800b016:	2200      	movs	r2, #0
 800b018:	2180      	movs	r1, #128	; 0x80
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f004 f989 	bl	800f332 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2240      	movs	r2, #64	; 0x40
 800b02a:	621a      	str	r2, [r3, #32]

  return ret;
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b036:	b480      	push	{r7}
 800b038:	b083      	sub	sp, #12
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	460b      	mov	r3, r1
 800b040:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	78fa      	ldrb	r2, [r7, #3]
 800b046:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b064:	b2da      	uxtb	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2204      	movs	r2, #4
 800b070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b082:	b480      	push	{r7}
 800b084:	b083      	sub	sp, #12
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b04      	cmp	r3, #4
 800b094:	d106      	bne.n	800b0a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b09c:	b2da      	uxtb	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	d110      	bne.n	800b0e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00b      	beq.n	800b0e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d6:	69db      	ldr	r3, [r3, #28]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d005      	beq.n	800b0e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0e2:	69db      	ldr	r3, [r3, #28]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b082      	sub	sp, #8
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	32ae      	adds	r2, #174	; 0xae
 800b108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b110:	2303      	movs	r3, #3
 800b112:	e01c      	b.n	800b14e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b03      	cmp	r3, #3
 800b11e:	d115      	bne.n	800b14c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	32ae      	adds	r2, #174	; 0xae
 800b12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12e:	6a1b      	ldr	r3, [r3, #32]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00b      	beq.n	800b14c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	32ae      	adds	r2, #174	; 0xae
 800b13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b142:	6a1b      	ldr	r3, [r3, #32]
 800b144:	78fa      	ldrb	r2, [r7, #3]
 800b146:	4611      	mov	r1, r2
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	460b      	mov	r3, r1
 800b160:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	32ae      	adds	r2, #174	; 0xae
 800b16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b174:	2303      	movs	r3, #3
 800b176:	e01c      	b.n	800b1b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b03      	cmp	r3, #3
 800b182:	d115      	bne.n	800b1b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	32ae      	adds	r2, #174	; 0xae
 800b18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00b      	beq.n	800b1b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	32ae      	adds	r2, #174	; 0xae
 800b1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a8:	78fa      	ldrb	r2, [r7, #3]
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00e      	beq.n	800b20c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	6852      	ldr	r2, [r2, #4]
 800b1fa:	b2d2      	uxtb	r2, r2
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	4798      	blx	r3
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b208:	2303      	movs	r3, #3
 800b20a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b216:	b480      	push	{r7}
 800b218:	b083      	sub	sp, #12
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	460b      	mov	r3, r1
 800b220:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b222:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b224:	4618      	mov	r0, r3
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	460b      	mov	r3, r1
 800b23a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b23c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b23e:	4618      	mov	r0, r3
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b086      	sub	sp, #24
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	460b      	mov	r3, r1
 800b254:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b25e:	2300      	movs	r3, #0
 800b260:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	885b      	ldrh	r3, [r3, #2]
 800b266:	b29a      	uxth	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	429a      	cmp	r2, r3
 800b270:	d920      	bls.n	800b2b4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	b29b      	uxth	r3, r3
 800b278:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b27a:	e013      	b.n	800b2a4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b27c:	f107 030a 	add.w	r3, r7, #10
 800b280:	4619      	mov	r1, r3
 800b282:	6978      	ldr	r0, [r7, #20]
 800b284:	f000 f81b 	bl	800b2be <USBD_GetNextDesc>
 800b288:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	785b      	ldrb	r3, [r3, #1]
 800b28e:	2b05      	cmp	r3, #5
 800b290:	d108      	bne.n	800b2a4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	789b      	ldrb	r3, [r3, #2]
 800b29a:	78fa      	ldrb	r2, [r7, #3]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d008      	beq.n	800b2b2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	885b      	ldrh	r3, [r3, #2]
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	897b      	ldrh	r3, [r7, #10]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d8e5      	bhi.n	800b27c <USBD_GetEpDesc+0x32>
 800b2b0:	e000      	b.n	800b2b4 <USBD_GetEpDesc+0x6a>
          break;
 800b2b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b2b4:	693b      	ldr	r3, [r7, #16]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b085      	sub	sp, #20
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	881a      	ldrh	r2, [r3, #0]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	4413      	add	r3, r2
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	3301      	adds	r3, #1
 800b30e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b316:	8a3b      	ldrh	r3, [r7, #16]
 800b318:	021b      	lsls	r3, r3, #8
 800b31a:	b21a      	sxth	r2, r3
 800b31c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b320:	4313      	orrs	r3, r2
 800b322:	b21b      	sxth	r3, r3
 800b324:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b326:	89fb      	ldrh	r3, [r7, #14]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	371c      	adds	r7, #28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b34a:	2b40      	cmp	r3, #64	; 0x40
 800b34c:	d005      	beq.n	800b35a <USBD_StdDevReq+0x26>
 800b34e:	2b40      	cmp	r3, #64	; 0x40
 800b350:	d857      	bhi.n	800b402 <USBD_StdDevReq+0xce>
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00f      	beq.n	800b376 <USBD_StdDevReq+0x42>
 800b356:	2b20      	cmp	r3, #32
 800b358:	d153      	bne.n	800b402 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	32ae      	adds	r2, #174	; 0xae
 800b364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	4798      	blx	r3
 800b370:	4603      	mov	r3, r0
 800b372:	73fb      	strb	r3, [r7, #15]
      break;
 800b374:	e04a      	b.n	800b40c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	785b      	ldrb	r3, [r3, #1]
 800b37a:	2b09      	cmp	r3, #9
 800b37c:	d83b      	bhi.n	800b3f6 <USBD_StdDevReq+0xc2>
 800b37e:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <USBD_StdDevReq+0x50>)
 800b380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b384:	0800b3d9 	.word	0x0800b3d9
 800b388:	0800b3ed 	.word	0x0800b3ed
 800b38c:	0800b3f7 	.word	0x0800b3f7
 800b390:	0800b3e3 	.word	0x0800b3e3
 800b394:	0800b3f7 	.word	0x0800b3f7
 800b398:	0800b3b7 	.word	0x0800b3b7
 800b39c:	0800b3ad 	.word	0x0800b3ad
 800b3a0:	0800b3f7 	.word	0x0800b3f7
 800b3a4:	0800b3cf 	.word	0x0800b3cf
 800b3a8:	0800b3c1 	.word	0x0800b3c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fa3c 	bl	800b82c <USBD_GetDescriptor>
          break;
 800b3b4:	e024      	b.n	800b400 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3b6:	6839      	ldr	r1, [r7, #0]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fba1 	bl	800bb00 <USBD_SetAddress>
          break;
 800b3be:	e01f      	b.n	800b400 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b3c0:	6839      	ldr	r1, [r7, #0]
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fbe0 	bl	800bb88 <USBD_SetConfig>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	73fb      	strb	r3, [r7, #15]
          break;
 800b3cc:	e018      	b.n	800b400 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fc83 	bl	800bcdc <USBD_GetConfig>
          break;
 800b3d6:	e013      	b.n	800b400 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fcb4 	bl	800bd48 <USBD_GetStatus>
          break;
 800b3e0:	e00e      	b.n	800b400 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fce3 	bl	800bdb0 <USBD_SetFeature>
          break;
 800b3ea:	e009      	b.n	800b400 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fd07 	bl	800be02 <USBD_ClrFeature>
          break;
 800b3f4:	e004      	b.n	800b400 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fd5e 	bl	800beba <USBD_CtlError>
          break;
 800b3fe:	bf00      	nop
      }
      break;
 800b400:	e004      	b.n	800b40c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fd58 	bl	800beba <USBD_CtlError>
      break;
 800b40a:	bf00      	nop
  }

  return ret;
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop

0800b418 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b42e:	2b40      	cmp	r3, #64	; 0x40
 800b430:	d005      	beq.n	800b43e <USBD_StdItfReq+0x26>
 800b432:	2b40      	cmp	r3, #64	; 0x40
 800b434:	d852      	bhi.n	800b4dc <USBD_StdItfReq+0xc4>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <USBD_StdItfReq+0x26>
 800b43a:	2b20      	cmp	r3, #32
 800b43c:	d14e      	bne.n	800b4dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b444:	b2db      	uxtb	r3, r3
 800b446:	3b01      	subs	r3, #1
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d840      	bhi.n	800b4ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	889b      	ldrh	r3, [r3, #4]
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b01      	cmp	r3, #1
 800b454:	d836      	bhi.n	800b4c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	889b      	ldrh	r3, [r3, #4]
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	4619      	mov	r1, r3
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7ff fed9 	bl	800b216 <USBD_CoreFindIF>
 800b464:	4603      	mov	r3, r0
 800b466:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b468:	7bbb      	ldrb	r3, [r7, #14]
 800b46a:	2bff      	cmp	r3, #255	; 0xff
 800b46c:	d01d      	beq.n	800b4aa <USBD_StdItfReq+0x92>
 800b46e:	7bbb      	ldrb	r3, [r7, #14]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d11a      	bne.n	800b4aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b474:	7bba      	ldrb	r2, [r7, #14]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	32ae      	adds	r2, #174	; 0xae
 800b47a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00f      	beq.n	800b4a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b484:	7bba      	ldrb	r2, [r7, #14]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b48c:	7bba      	ldrb	r2, [r7, #14]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	32ae      	adds	r2, #174	; 0xae
 800b492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	4798      	blx	r3
 800b49e:	4603      	mov	r3, r0
 800b4a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4a2:	e004      	b.n	800b4ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4a8:	e001      	b.n	800b4ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	88db      	ldrh	r3, [r3, #6]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d110      	bne.n	800b4d8 <USBD_StdItfReq+0xc0>
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10d      	bne.n	800b4d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 fdc7 	bl	800c050 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4c2:	e009      	b.n	800b4d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b4c4:	6839      	ldr	r1, [r7, #0]
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fcf7 	bl	800beba <USBD_CtlError>
          break;
 800b4cc:	e004      	b.n	800b4d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b4ce:	6839      	ldr	r1, [r7, #0]
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fcf2 	bl	800beba <USBD_CtlError>
          break;
 800b4d6:	e000      	b.n	800b4da <USBD_StdItfReq+0xc2>
          break;
 800b4d8:	bf00      	nop
      }
      break;
 800b4da:	e004      	b.n	800b4e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fceb 	bl	800beba <USBD_CtlError>
      break;
 800b4e4:	bf00      	nop
  }

  return ret;
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	889b      	ldrh	r3, [r3, #4]
 800b502:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b50c:	2b40      	cmp	r3, #64	; 0x40
 800b50e:	d007      	beq.n	800b520 <USBD_StdEPReq+0x30>
 800b510:	2b40      	cmp	r3, #64	; 0x40
 800b512:	f200 817f 	bhi.w	800b814 <USBD_StdEPReq+0x324>
 800b516:	2b00      	cmp	r3, #0
 800b518:	d02a      	beq.n	800b570 <USBD_StdEPReq+0x80>
 800b51a:	2b20      	cmp	r3, #32
 800b51c:	f040 817a 	bne.w	800b814 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b520:	7bbb      	ldrb	r3, [r7, #14]
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7ff fe83 	bl	800b230 <USBD_CoreFindEP>
 800b52a:	4603      	mov	r3, r0
 800b52c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b52e:	7b7b      	ldrb	r3, [r7, #13]
 800b530:	2bff      	cmp	r3, #255	; 0xff
 800b532:	f000 8174 	beq.w	800b81e <USBD_StdEPReq+0x32e>
 800b536:	7b7b      	ldrb	r3, [r7, #13]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f040 8170 	bne.w	800b81e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b53e:	7b7a      	ldrb	r2, [r7, #13]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b546:	7b7a      	ldrb	r2, [r7, #13]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	32ae      	adds	r2, #174	; 0xae
 800b54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	f000 8163 	beq.w	800b81e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b558:	7b7a      	ldrb	r2, [r7, #13]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	32ae      	adds	r2, #174	; 0xae
 800b55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	4798      	blx	r3
 800b56a:	4603      	mov	r3, r0
 800b56c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b56e:	e156      	b.n	800b81e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	785b      	ldrb	r3, [r3, #1]
 800b574:	2b03      	cmp	r3, #3
 800b576:	d008      	beq.n	800b58a <USBD_StdEPReq+0x9a>
 800b578:	2b03      	cmp	r3, #3
 800b57a:	f300 8145 	bgt.w	800b808 <USBD_StdEPReq+0x318>
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 809b 	beq.w	800b6ba <USBD_StdEPReq+0x1ca>
 800b584:	2b01      	cmp	r3, #1
 800b586:	d03c      	beq.n	800b602 <USBD_StdEPReq+0x112>
 800b588:	e13e      	b.n	800b808 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b02      	cmp	r3, #2
 800b594:	d002      	beq.n	800b59c <USBD_StdEPReq+0xac>
 800b596:	2b03      	cmp	r3, #3
 800b598:	d016      	beq.n	800b5c8 <USBD_StdEPReq+0xd8>
 800b59a:	e02c      	b.n	800b5f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00d      	beq.n	800b5be <USBD_StdEPReq+0xce>
 800b5a2:	7bbb      	ldrb	r3, [r7, #14]
 800b5a4:	2b80      	cmp	r3, #128	; 0x80
 800b5a6:	d00a      	beq.n	800b5be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5a8:	7bbb      	ldrb	r3, [r7, #14]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f003 ff05 	bl	800f3bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5b2:	2180      	movs	r1, #128	; 0x80
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f003 ff01 	bl	800f3bc <USBD_LL_StallEP>
 800b5ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5bc:	e020      	b.n	800b600 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fc7a 	bl	800beba <USBD_CtlError>
              break;
 800b5c6:	e01b      	b.n	800b600 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	885b      	ldrh	r3, [r3, #2]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10e      	bne.n	800b5ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5d0:	7bbb      	ldrb	r3, [r7, #14]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00b      	beq.n	800b5ee <USBD_StdEPReq+0xfe>
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	2b80      	cmp	r3, #128	; 0x80
 800b5da:	d008      	beq.n	800b5ee <USBD_StdEPReq+0xfe>
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	88db      	ldrh	r3, [r3, #6]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d104      	bne.n	800b5ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5e4:	7bbb      	ldrb	r3, [r7, #14]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f003 fee7 	bl	800f3bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 fd2e 	bl	800c050 <USBD_CtlSendStatus>

              break;
 800b5f4:	e004      	b.n	800b600 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fc5e 	bl	800beba <USBD_CtlError>
              break;
 800b5fe:	bf00      	nop
          }
          break;
 800b600:	e107      	b.n	800b812 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d002      	beq.n	800b614 <USBD_StdEPReq+0x124>
 800b60e:	2b03      	cmp	r3, #3
 800b610:	d016      	beq.n	800b640 <USBD_StdEPReq+0x150>
 800b612:	e04b      	b.n	800b6ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00d      	beq.n	800b636 <USBD_StdEPReq+0x146>
 800b61a:	7bbb      	ldrb	r3, [r7, #14]
 800b61c:	2b80      	cmp	r3, #128	; 0x80
 800b61e:	d00a      	beq.n	800b636 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b620:	7bbb      	ldrb	r3, [r7, #14]
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f003 fec9 	bl	800f3bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b62a:	2180      	movs	r1, #128	; 0x80
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f003 fec5 	bl	800f3bc <USBD_LL_StallEP>
 800b632:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b634:	e040      	b.n	800b6b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fc3e 	bl	800beba <USBD_CtlError>
              break;
 800b63e:	e03b      	b.n	800b6b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	885b      	ldrh	r3, [r3, #2]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d136      	bne.n	800b6b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b648:	7bbb      	ldrb	r3, [r7, #14]
 800b64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d004      	beq.n	800b65c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b652:	7bbb      	ldrb	r3, [r7, #14]
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f003 fecf 	bl	800f3fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fcf7 	bl	800c050 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b662:	7bbb      	ldrb	r3, [r7, #14]
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff fde2 	bl	800b230 <USBD_CoreFindEP>
 800b66c:	4603      	mov	r3, r0
 800b66e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b670:	7b7b      	ldrb	r3, [r7, #13]
 800b672:	2bff      	cmp	r3, #255	; 0xff
 800b674:	d01f      	beq.n	800b6b6 <USBD_StdEPReq+0x1c6>
 800b676:	7b7b      	ldrb	r3, [r7, #13]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d11c      	bne.n	800b6b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b67c:	7b7a      	ldrb	r2, [r7, #13]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b684:	7b7a      	ldrb	r2, [r7, #13]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	32ae      	adds	r2, #174	; 0xae
 800b68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d010      	beq.n	800b6b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b694:	7b7a      	ldrb	r2, [r7, #13]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	32ae      	adds	r2, #174	; 0xae
 800b69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	4798      	blx	r3
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b6aa:	e004      	b.n	800b6b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fc03 	bl	800beba <USBD_CtlError>
              break;
 800b6b4:	e000      	b.n	800b6b8 <USBD_StdEPReq+0x1c8>
              break;
 800b6b6:	bf00      	nop
          }
          break;
 800b6b8:	e0ab      	b.n	800b812 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d002      	beq.n	800b6cc <USBD_StdEPReq+0x1dc>
 800b6c6:	2b03      	cmp	r3, #3
 800b6c8:	d032      	beq.n	800b730 <USBD_StdEPReq+0x240>
 800b6ca:	e097      	b.n	800b7fc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6cc:	7bbb      	ldrb	r3, [r7, #14]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d007      	beq.n	800b6e2 <USBD_StdEPReq+0x1f2>
 800b6d2:	7bbb      	ldrb	r3, [r7, #14]
 800b6d4:	2b80      	cmp	r3, #128	; 0x80
 800b6d6:	d004      	beq.n	800b6e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fbed 	bl	800beba <USBD_CtlError>
                break;
 800b6e0:	e091      	b.n	800b806 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	da0b      	bge.n	800b702 <USBD_StdEPReq+0x212>
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6f0:	4613      	mov	r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	4413      	add	r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	3310      	adds	r3, #16
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	3304      	adds	r3, #4
 800b700:	e00b      	b.n	800b71a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b702:	7bbb      	ldrb	r3, [r7, #14]
 800b704:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b708:	4613      	mov	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	4413      	add	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	4413      	add	r3, r2
 800b718:	3304      	adds	r3, #4
 800b71a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	2200      	movs	r2, #0
 800b720:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	2202      	movs	r2, #2
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fc37 	bl	800bf9c <USBD_CtlSendData>
              break;
 800b72e:	e06a      	b.n	800b806 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b734:	2b00      	cmp	r3, #0
 800b736:	da11      	bge.n	800b75c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b738:	7bbb      	ldrb	r3, [r7, #14]
 800b73a:	f003 020f 	and.w	r2, r3, #15
 800b73e:	6879      	ldr	r1, [r7, #4]
 800b740:	4613      	mov	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4413      	add	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	440b      	add	r3, r1
 800b74a:	3324      	adds	r3, #36	; 0x24
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d117      	bne.n	800b782 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fbb0 	bl	800beba <USBD_CtlError>
                  break;
 800b75a:	e054      	b.n	800b806 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	f003 020f 	and.w	r2, r3, #15
 800b762:	6879      	ldr	r1, [r7, #4]
 800b764:	4613      	mov	r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	440b      	add	r3, r1
 800b76e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d104      	bne.n	800b782 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fb9d 	bl	800beba <USBD_CtlError>
                  break;
 800b780:	e041      	b.n	800b806 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b786:	2b00      	cmp	r3, #0
 800b788:	da0b      	bge.n	800b7a2 <USBD_StdEPReq+0x2b2>
 800b78a:	7bbb      	ldrb	r3, [r7, #14]
 800b78c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b790:	4613      	mov	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	3310      	adds	r3, #16
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	4413      	add	r3, r2
 800b79e:	3304      	adds	r3, #4
 800b7a0:	e00b      	b.n	800b7ba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7a2:	7bbb      	ldrb	r3, [r7, #14]
 800b7a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b7bc:	7bbb      	ldrb	r3, [r7, #14]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <USBD_StdEPReq+0x2d8>
 800b7c2:	7bbb      	ldrb	r3, [r7, #14]
 800b7c4:	2b80      	cmp	r3, #128	; 0x80
 800b7c6:	d103      	bne.n	800b7d0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	601a      	str	r2, [r3, #0]
 800b7ce:	e00e      	b.n	800b7ee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b7d0:	7bbb      	ldrb	r3, [r7, #14]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f003 fe2f 	bl	800f438 <USBD_LL_IsStallEP>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d003      	beq.n	800b7e8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	e002      	b.n	800b7ee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fbd1 	bl	800bf9c <USBD_CtlSendData>
              break;
 800b7fa:	e004      	b.n	800b806 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fb5b 	bl	800beba <USBD_CtlError>
              break;
 800b804:	bf00      	nop
          }
          break;
 800b806:	e004      	b.n	800b812 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fb55 	bl	800beba <USBD_CtlError>
          break;
 800b810:	bf00      	nop
      }
      break;
 800b812:	e005      	b.n	800b820 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fb4f 	bl	800beba <USBD_CtlError>
      break;
 800b81c:	e000      	b.n	800b820 <USBD_StdEPReq+0x330>
      break;
 800b81e:	bf00      	nop
  }

  return ret;
 800b820:	7bfb      	ldrb	r3, [r7, #15]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
	...

0800b82c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b836:	2300      	movs	r3, #0
 800b838:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	885b      	ldrh	r3, [r3, #2]
 800b846:	0a1b      	lsrs	r3, r3, #8
 800b848:	b29b      	uxth	r3, r3
 800b84a:	3b01      	subs	r3, #1
 800b84c:	2b06      	cmp	r3, #6
 800b84e:	f200 8128 	bhi.w	800baa2 <USBD_GetDescriptor+0x276>
 800b852:	a201      	add	r2, pc, #4	; (adr r2, 800b858 <USBD_GetDescriptor+0x2c>)
 800b854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b858:	0800b875 	.word	0x0800b875
 800b85c:	0800b88d 	.word	0x0800b88d
 800b860:	0800b8cd 	.word	0x0800b8cd
 800b864:	0800baa3 	.word	0x0800baa3
 800b868:	0800baa3 	.word	0x0800baa3
 800b86c:	0800ba43 	.word	0x0800ba43
 800b870:	0800ba6f 	.word	0x0800ba6f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	7c12      	ldrb	r2, [r2, #16]
 800b880:	f107 0108 	add.w	r1, r7, #8
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	60f8      	str	r0, [r7, #12]
      break;
 800b88a:	e112      	b.n	800bab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	7c1b      	ldrb	r3, [r3, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10d      	bne.n	800b8b0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89c:	f107 0208 	add.w	r2, r7, #8
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	4798      	blx	r3
 800b8a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b8ae:	e100      	b.n	800bab2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b8:	f107 0208 	add.w	r2, r7, #8
 800b8bc:	4610      	mov	r0, r2
 800b8be:	4798      	blx	r3
 800b8c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	2202      	movs	r2, #2
 800b8c8:	701a      	strb	r2, [r3, #0]
      break;
 800b8ca:	e0f2      	b.n	800bab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	885b      	ldrh	r3, [r3, #2]
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b05      	cmp	r3, #5
 800b8d4:	f200 80ac 	bhi.w	800ba30 <USBD_GetDescriptor+0x204>
 800b8d8:	a201      	add	r2, pc, #4	; (adr r2, 800b8e0 <USBD_GetDescriptor+0xb4>)
 800b8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8de:	bf00      	nop
 800b8e0:	0800b8f9 	.word	0x0800b8f9
 800b8e4:	0800b92d 	.word	0x0800b92d
 800b8e8:	0800b961 	.word	0x0800b961
 800b8ec:	0800b995 	.word	0x0800b995
 800b8f0:	0800b9c9 	.word	0x0800b9c9
 800b8f4:	0800b9fd 	.word	0x0800b9fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00b      	beq.n	800b91c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	7c12      	ldrb	r2, [r2, #16]
 800b910:	f107 0108 	add.w	r1, r7, #8
 800b914:	4610      	mov	r0, r2
 800b916:	4798      	blx	r3
 800b918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b91a:	e091      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 facb 	bl	800beba <USBD_CtlError>
            err++;
 800b924:	7afb      	ldrb	r3, [r7, #11]
 800b926:	3301      	adds	r3, #1
 800b928:	72fb      	strb	r3, [r7, #11]
          break;
 800b92a:	e089      	b.n	800ba40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00b      	beq.n	800b950 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	7c12      	ldrb	r2, [r2, #16]
 800b944:	f107 0108 	add.w	r1, r7, #8
 800b948:	4610      	mov	r0, r2
 800b94a:	4798      	blx	r3
 800b94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b94e:	e077      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fab1 	bl	800beba <USBD_CtlError>
            err++;
 800b958:	7afb      	ldrb	r3, [r7, #11]
 800b95a:	3301      	adds	r3, #1
 800b95c:	72fb      	strb	r3, [r7, #11]
          break;
 800b95e:	e06f      	b.n	800ba40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	7c12      	ldrb	r2, [r2, #16]
 800b978:	f107 0108 	add.w	r1, r7, #8
 800b97c:	4610      	mov	r0, r2
 800b97e:	4798      	blx	r3
 800b980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b982:	e05d      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa97 	bl	800beba <USBD_CtlError>
            err++;
 800b98c:	7afb      	ldrb	r3, [r7, #11]
 800b98e:	3301      	adds	r3, #1
 800b990:	72fb      	strb	r3, [r7, #11]
          break;
 800b992:	e055      	b.n	800ba40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00b      	beq.n	800b9b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	7c12      	ldrb	r2, [r2, #16]
 800b9ac:	f107 0108 	add.w	r1, r7, #8
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4798      	blx	r3
 800b9b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9b6:	e043      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fa7d 	bl	800beba <USBD_CtlError>
            err++;
 800b9c0:	7afb      	ldrb	r3, [r7, #11]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9c6:	e03b      	b.n	800ba40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00b      	beq.n	800b9ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9da:	695b      	ldr	r3, [r3, #20]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	7c12      	ldrb	r2, [r2, #16]
 800b9e0:	f107 0108 	add.w	r1, r7, #8
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	4798      	blx	r3
 800b9e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9ea:	e029      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fa63 	bl	800beba <USBD_CtlError>
            err++;
 800b9f4:	7afb      	ldrb	r3, [r7, #11]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b9fa:	e021      	b.n	800ba40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00b      	beq.n	800ba20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba0e:	699b      	ldr	r3, [r3, #24]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	7c12      	ldrb	r2, [r2, #16]
 800ba14:	f107 0108 	add.w	r1, r7, #8
 800ba18:	4610      	mov	r0, r2
 800ba1a:	4798      	blx	r3
 800ba1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba1e:	e00f      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fa49 	bl	800beba <USBD_CtlError>
            err++;
 800ba28:	7afb      	ldrb	r3, [r7, #11]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba2e:	e007      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fa41 	bl	800beba <USBD_CtlError>
          err++;
 800ba38:	7afb      	ldrb	r3, [r7, #11]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ba3e:	bf00      	nop
      }
      break;
 800ba40:	e037      	b.n	800bab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	7c1b      	ldrb	r3, [r3, #16]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d109      	bne.n	800ba5e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba52:	f107 0208 	add.w	r2, r7, #8
 800ba56:	4610      	mov	r0, r2
 800ba58:	4798      	blx	r3
 800ba5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba5c:	e029      	b.n	800bab2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fa2a 	bl	800beba <USBD_CtlError>
        err++;
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ba6c:	e021      	b.n	800bab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	7c1b      	ldrb	r3, [r3, #16]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10d      	bne.n	800ba92 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7e:	f107 0208 	add.w	r2, r7, #8
 800ba82:	4610      	mov	r0, r2
 800ba84:	4798      	blx	r3
 800ba86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	2207      	movs	r2, #7
 800ba8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba90:	e00f      	b.n	800bab2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fa10 	bl	800beba <USBD_CtlError>
        err++;
 800ba9a:	7afb      	ldrb	r3, [r7, #11]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	72fb      	strb	r3, [r7, #11]
      break;
 800baa0:	e007      	b.n	800bab2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800baa2:	6839      	ldr	r1, [r7, #0]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fa08 	bl	800beba <USBD_CtlError>
      err++;
 800baaa:	7afb      	ldrb	r3, [r7, #11]
 800baac:	3301      	adds	r3, #1
 800baae:	72fb      	strb	r3, [r7, #11]
      break;
 800bab0:	bf00      	nop
  }

  if (err != 0U)
 800bab2:	7afb      	ldrb	r3, [r7, #11]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d11e      	bne.n	800baf6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	88db      	ldrh	r3, [r3, #6]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d016      	beq.n	800baee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bac0:	893b      	ldrh	r3, [r7, #8]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00e      	beq.n	800bae4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	88da      	ldrh	r2, [r3, #6]
 800baca:	893b      	ldrh	r3, [r7, #8]
 800bacc:	4293      	cmp	r3, r2
 800bace:	bf28      	it	cs
 800bad0:	4613      	movcs	r3, r2
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bad6:	893b      	ldrh	r3, [r7, #8]
 800bad8:	461a      	mov	r2, r3
 800bada:	68f9      	ldr	r1, [r7, #12]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fa5d 	bl	800bf9c <USBD_CtlSendData>
 800bae2:	e009      	b.n	800baf8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f9e7 	bl	800beba <USBD_CtlError>
 800baec:	e004      	b.n	800baf8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 faae 	bl	800c050 <USBD_CtlSendStatus>
 800baf4:	e000      	b.n	800baf8 <USBD_GetDescriptor+0x2cc>
    return;
 800baf6:	bf00      	nop
  }
}
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop

0800bb00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	889b      	ldrh	r3, [r3, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d131      	bne.n	800bb76 <USBD_SetAddress+0x76>
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	88db      	ldrh	r3, [r3, #6]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d12d      	bne.n	800bb76 <USBD_SetAddress+0x76>
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	885b      	ldrh	r3, [r3, #2]
 800bb1e:	2b7f      	cmp	r3, #127	; 0x7f
 800bb20:	d829      	bhi.n	800bb76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	885b      	ldrh	r3, [r3, #2]
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	d104      	bne.n	800bb44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 f9bc 	bl	800beba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb42:	e01d      	b.n	800bb80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	7bfa      	ldrb	r2, [r7, #15]
 800bb48:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f003 fc9d 	bl	800f490 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 fa7a 	bl	800c050 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d004      	beq.n	800bb6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2202      	movs	r2, #2
 800bb66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb6a:	e009      	b.n	800bb80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb74:	e004      	b.n	800bb80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f99e 	bl	800beba <USBD_CtlError>
  }
}
 800bb7e:	bf00      	nop
 800bb80:	bf00      	nop
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	885b      	ldrh	r3, [r3, #2]
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	4b4e      	ldr	r3, [pc, #312]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bb9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bba0:	4b4d      	ldr	r3, [pc, #308]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d905      	bls.n	800bbb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f985 	bl	800beba <USBD_CtlError>
    return USBD_FAIL;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	e08c      	b.n	800bcce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d002      	beq.n	800bbc6 <USBD_SetConfig+0x3e>
 800bbc0:	2b03      	cmp	r3, #3
 800bbc2:	d029      	beq.n	800bc18 <USBD_SetConfig+0x90>
 800bbc4:	e075      	b.n	800bcb2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bbc6:	4b44      	ldr	r3, [pc, #272]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d020      	beq.n	800bc10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bbce:	4b42      	ldr	r3, [pc, #264]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bbd8:	4b3f      	ldr	r3, [pc, #252]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7fe ffe7 	bl	800abb2 <USBD_SetClassConfig>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bbe8:	7bfb      	ldrb	r3, [r7, #15]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d008      	beq.n	800bc00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bbee:	6839      	ldr	r1, [r7, #0]
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f962 	bl	800beba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2202      	movs	r2, #2
 800bbfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbfe:	e065      	b.n	800bccc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fa25 	bl	800c050 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2203      	movs	r2, #3
 800bc0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bc0e:	e05d      	b.n	800bccc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 fa1d 	bl	800c050 <USBD_CtlSendStatus>
      break;
 800bc16:	e059      	b.n	800bccc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bc18:	4b2f      	ldr	r3, [pc, #188]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d112      	bne.n	800bc46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2202      	movs	r2, #2
 800bc24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bc28:	4b2b      	ldr	r3, [pc, #172]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc32:	4b29      	ldr	r3, [pc, #164]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	4619      	mov	r1, r3
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f7fe ffd6 	bl	800abea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 fa06 	bl	800c050 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc44:	e042      	b.n	800bccc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bc46:	4b24      	ldr	r3, [pc, #144]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d02a      	beq.n	800bcaa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7fe ffc4 	bl	800abea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc62:	4b1d      	ldr	r3, [pc, #116]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc6c:	4b1a      	ldr	r3, [pc, #104]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7fe ff9d 	bl	800abb2 <USBD_SetClassConfig>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00f      	beq.n	800bca2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bc82:	6839      	ldr	r1, [r7, #0]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 f918 	bl	800beba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	4619      	mov	r1, r3
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f7fe ffa9 	bl	800abea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2202      	movs	r2, #2
 800bc9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bca0:	e014      	b.n	800bccc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f9d4 	bl	800c050 <USBD_CtlSendStatus>
      break;
 800bca8:	e010      	b.n	800bccc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f9d0 	bl	800c050 <USBD_CtlSendStatus>
      break;
 800bcb0:	e00c      	b.n	800bccc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f900 	bl	800beba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bcba:	4b07      	ldr	r3, [pc, #28]	; (800bcd8 <USBD_SetConfig+0x150>)
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7fe ff92 	bl	800abea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bcc6:	2303      	movs	r3, #3
 800bcc8:	73fb      	strb	r3, [r7, #15]
      break;
 800bcca:	bf00      	nop
  }

  return ret;
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20000760 	.word	0x20000760

0800bcdc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	88db      	ldrh	r3, [r3, #6]
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d004      	beq.n	800bcf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f8e2 	bl	800beba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bcf6:	e023      	b.n	800bd40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	dc02      	bgt.n	800bd0a <USBD_GetConfig+0x2e>
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	dc03      	bgt.n	800bd10 <USBD_GetConfig+0x34>
 800bd08:	e015      	b.n	800bd36 <USBD_GetConfig+0x5a>
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d00b      	beq.n	800bd26 <USBD_GetConfig+0x4a>
 800bd0e:	e012      	b.n	800bd36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	3308      	adds	r3, #8
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f93c 	bl	800bf9c <USBD_CtlSendData>
        break;
 800bd24:	e00c      	b.n	800bd40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 f934 	bl	800bf9c <USBD_CtlSendData>
        break;
 800bd34:	e004      	b.n	800bd40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 f8be 	bl	800beba <USBD_CtlError>
        break;
 800bd3e:	bf00      	nop
}
 800bd40:	bf00      	nop
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	d81e      	bhi.n	800bd9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	88db      	ldrh	r3, [r3, #6]
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d004      	beq.n	800bd72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd68:	6839      	ldr	r1, [r7, #0]
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f8a5 	bl	800beba <USBD_CtlError>
        break;
 800bd70:	e01a      	b.n	800bda8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d005      	beq.n	800bd8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	f043 0202 	orr.w	r2, r3, #2
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	330c      	adds	r3, #12
 800bd92:	2202      	movs	r2, #2
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 f900 	bl	800bf9c <USBD_CtlSendData>
      break;
 800bd9c:	e004      	b.n	800bda8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f88a 	bl	800beba <USBD_CtlError>
      break;
 800bda6:	bf00      	nop
  }
}
 800bda8:	bf00      	nop
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	885b      	ldrh	r3, [r3, #2]
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d107      	bne.n	800bdd2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 f940 	bl	800c050 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bdd0:	e013      	b.n	800bdfa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	885b      	ldrh	r3, [r3, #2]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d10b      	bne.n	800bdf2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	889b      	ldrh	r3, [r3, #4]
 800bdde:	0a1b      	lsrs	r3, r3, #8
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f930 	bl	800c050 <USBD_CtlSendStatus>
}
 800bdf0:	e003      	b.n	800bdfa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f860 	bl	800beba <USBD_CtlError>
}
 800bdfa:	bf00      	nop
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b082      	sub	sp, #8
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be12:	b2db      	uxtb	r3, r3
 800be14:	3b01      	subs	r3, #1
 800be16:	2b02      	cmp	r3, #2
 800be18:	d80b      	bhi.n	800be32 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	885b      	ldrh	r3, [r3, #2]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d10c      	bne.n	800be3c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f910 	bl	800c050 <USBD_CtlSendStatus>
      }
      break;
 800be30:	e004      	b.n	800be3c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 f840 	bl	800beba <USBD_CtlError>
      break;
 800be3a:	e000      	b.n	800be3e <USBD_ClrFeature+0x3c>
      break;
 800be3c:	bf00      	nop
  }
}
 800be3e:	bf00      	nop
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b084      	sub	sp, #16
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
 800be4e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	781a      	ldrb	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	3301      	adds	r3, #1
 800be60:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	781a      	ldrb	r2, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3301      	adds	r3, #1
 800be6e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f7ff fa41 	bl	800b2f8 <SWAPBYTE>
 800be76:	4603      	mov	r3, r0
 800be78:	461a      	mov	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	3301      	adds	r3, #1
 800be82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3301      	adds	r3, #1
 800be88:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f7ff fa34 	bl	800b2f8 <SWAPBYTE>
 800be90:	4603      	mov	r3, r0
 800be92:	461a      	mov	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	3301      	adds	r3, #1
 800be9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3301      	adds	r3, #1
 800bea2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f7ff fa27 	bl	800b2f8 <SWAPBYTE>
 800beaa:	4603      	mov	r3, r0
 800beac:	461a      	mov	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	80da      	strh	r2, [r3, #6]
}
 800beb2:	bf00      	nop
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b082      	sub	sp, #8
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bec4:	2180      	movs	r1, #128	; 0x80
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f003 fa78 	bl	800f3bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800becc:	2100      	movs	r1, #0
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f003 fa74 	bl	800f3bc <USBD_LL_StallEP>
}
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b086      	sub	sp, #24
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bee8:	2300      	movs	r3, #0
 800beea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d036      	beq.n	800bf60 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bef6:	6938      	ldr	r0, [r7, #16]
 800bef8:	f000 f836 	bl	800bf68 <USBD_GetLen>
 800befc:	4603      	mov	r3, r0
 800befe:	3301      	adds	r3, #1
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	4413      	add	r3, r2
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	7812      	ldrb	r2, [r2, #0]
 800bf14:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	4413      	add	r3, r2
 800bf22:	2203      	movs	r2, #3
 800bf24:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf2c:	e013      	b.n	800bf56 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	68ba      	ldr	r2, [r7, #8]
 800bf32:	4413      	add	r3, r2
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	7812      	ldrb	r2, [r2, #0]
 800bf38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	613b      	str	r3, [r7, #16]
    idx++;
 800bf40:	7dfb      	ldrb	r3, [r7, #23]
 800bf42:	3301      	adds	r3, #1
 800bf44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf50:	7dfb      	ldrb	r3, [r7, #23]
 800bf52:	3301      	adds	r3, #1
 800bf54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1e7      	bne.n	800bf2e <USBD_GetString+0x52>
 800bf5e:	e000      	b.n	800bf62 <USBD_GetString+0x86>
    return;
 800bf60:	bf00      	nop
  }
}
 800bf62:	3718      	adds	r7, #24
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf70:	2300      	movs	r3, #0
 800bf72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bf78:	e005      	b.n	800bf86 <USBD_GetLen+0x1e>
  {
    len++;
 800bf7a:	7bfb      	ldrb	r3, [r7, #15]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	3301      	adds	r3, #1
 800bf84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1f5      	bne.n	800bf7a <USBD_GetLen+0x12>
  }

  return len;
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2202      	movs	r2, #2
 800bfac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f003 fa83 	bl	800f4ce <USBD_LL_Transmit>

  return USBD_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	60f8      	str	r0, [r7, #12]
 800bfda:	60b9      	str	r1, [r7, #8]
 800bfdc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f003 fa72 	bl	800f4ce <USBD_LL_Transmit>

  return USBD_OK;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3710      	adds	r7, #16
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2203      	movs	r2, #3
 800c004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	2100      	movs	r1, #0
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f003 fa76 	bl	800f510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b084      	sub	sp, #16
 800c032:	af00      	add	r7, sp, #0
 800c034:	60f8      	str	r0, [r7, #12]
 800c036:	60b9      	str	r1, [r7, #8]
 800c038:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	2100      	movs	r1, #0
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f003 fa65 	bl	800f510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2204      	movs	r2, #4
 800c05c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c060:	2300      	movs	r3, #0
 800c062:	2200      	movs	r2, #0
 800c064:	2100      	movs	r1, #0
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f003 fa31 	bl	800f4ce <USBD_LL_Transmit>

  return USBD_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b082      	sub	sp, #8
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2205      	movs	r2, #5
 800c082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c086:	2300      	movs	r3, #0
 800c088:	2200      	movs	r2, #0
 800c08a:	2100      	movs	r1, #0
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f003 fa3f 	bl	800f510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <__NVIC_SetPriority>:
{
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	6039      	str	r1, [r7, #0]
 800c0a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	db0a      	blt.n	800c0c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	490c      	ldr	r1, [pc, #48]	; (800c0e8 <__NVIC_SetPriority+0x4c>)
 800c0b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ba:	0112      	lsls	r2, r2, #4
 800c0bc:	b2d2      	uxtb	r2, r2
 800c0be:	440b      	add	r3, r1
 800c0c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c0c4:	e00a      	b.n	800c0dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	4908      	ldr	r1, [pc, #32]	; (800c0ec <__NVIC_SetPriority+0x50>)
 800c0cc:	79fb      	ldrb	r3, [r7, #7]
 800c0ce:	f003 030f 	and.w	r3, r3, #15
 800c0d2:	3b04      	subs	r3, #4
 800c0d4:	0112      	lsls	r2, r2, #4
 800c0d6:	b2d2      	uxtb	r2, r2
 800c0d8:	440b      	add	r3, r1
 800c0da:	761a      	strb	r2, [r3, #24]
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	e000e100 	.word	0xe000e100
 800c0ec:	e000ed00 	.word	0xe000ed00

0800c0f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c0f4:	4b05      	ldr	r3, [pc, #20]	; (800c10c <SysTick_Handler+0x1c>)
 800c0f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c0f8:	f001 fcfe 	bl	800daf8 <xTaskGetSchedulerState>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d001      	beq.n	800c106 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c102:	f002 fae9 	bl	800e6d8 <xPortSysTickHandler>
  }
}
 800c106:	bf00      	nop
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	e000e010 	.word	0xe000e010

0800c110 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c110:	b580      	push	{r7, lr}
 800c112:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c114:	2100      	movs	r1, #0
 800c116:	f06f 0004 	mvn.w	r0, #4
 800c11a:	f7ff ffbf 	bl	800c09c <__NVIC_SetPriority>
#endif
}
 800c11e:	bf00      	nop
 800c120:	bd80      	pop	{r7, pc}
	...

0800c124 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c12a:	f3ef 8305 	mrs	r3, IPSR
 800c12e:	603b      	str	r3, [r7, #0]
  return(result);
 800c130:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c136:	f06f 0305 	mvn.w	r3, #5
 800c13a:	607b      	str	r3, [r7, #4]
 800c13c:	e00c      	b.n	800c158 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c13e:	4b0a      	ldr	r3, [pc, #40]	; (800c168 <osKernelInitialize+0x44>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d105      	bne.n	800c152 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c146:	4b08      	ldr	r3, [pc, #32]	; (800c168 <osKernelInitialize+0x44>)
 800c148:	2201      	movs	r2, #1
 800c14a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	607b      	str	r3, [r7, #4]
 800c150:	e002      	b.n	800c158 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c152:	f04f 33ff 	mov.w	r3, #4294967295
 800c156:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c158:	687b      	ldr	r3, [r7, #4]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	20000764 	.word	0x20000764

0800c16c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c172:	f3ef 8305 	mrs	r3, IPSR
 800c176:	603b      	str	r3, [r7, #0]
  return(result);
 800c178:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d003      	beq.n	800c186 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c17e:	f06f 0305 	mvn.w	r3, #5
 800c182:	607b      	str	r3, [r7, #4]
 800c184:	e010      	b.n	800c1a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c186:	4b0b      	ldr	r3, [pc, #44]	; (800c1b4 <osKernelStart+0x48>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d109      	bne.n	800c1a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c18e:	f7ff ffbf 	bl	800c110 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c192:	4b08      	ldr	r3, [pc, #32]	; (800c1b4 <osKernelStart+0x48>)
 800c194:	2202      	movs	r2, #2
 800c196:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c198:	f001 f866 	bl	800d268 <vTaskStartScheduler>
      stat = osOK;
 800c19c:	2300      	movs	r3, #0
 800c19e:	607b      	str	r3, [r7, #4]
 800c1a0:	e002      	b.n	800c1a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1a8:	687b      	ldr	r3, [r7, #4]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20000764 	.word	0x20000764

0800c1b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08e      	sub	sp, #56	; 0x38
 800c1bc:	af04      	add	r7, sp, #16
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1c8:	f3ef 8305 	mrs	r3, IPSR
 800c1cc:	617b      	str	r3, [r7, #20]
  return(result);
 800c1ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d17e      	bne.n	800c2d2 <osThreadNew+0x11a>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d07b      	beq.n	800c2d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c1da:	2380      	movs	r3, #128	; 0x80
 800c1dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c1de:	2318      	movs	r3, #24
 800c1e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d045      	beq.n	800c27e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d002      	beq.n	800c200 <osThreadNew+0x48>
        name = attr->name;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	699b      	ldr	r3, [r3, #24]
 800c20c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d008      	beq.n	800c226 <osThreadNew+0x6e>
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	2b38      	cmp	r3, #56	; 0x38
 800c218:	d805      	bhi.n	800c226 <osThreadNew+0x6e>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	f003 0301 	and.w	r3, r3, #1
 800c222:	2b00      	cmp	r3, #0
 800c224:	d001      	beq.n	800c22a <osThreadNew+0x72>
        return (NULL);
 800c226:	2300      	movs	r3, #0
 800c228:	e054      	b.n	800c2d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	695b      	ldr	r3, [r3, #20]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	695b      	ldr	r3, [r3, #20]
 800c236:	089b      	lsrs	r3, r3, #2
 800c238:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00e      	beq.n	800c260 <osThreadNew+0xa8>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	2b5b      	cmp	r3, #91	; 0x5b
 800c248:	d90a      	bls.n	800c260 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d006      	beq.n	800c260 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	695b      	ldr	r3, [r3, #20]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <osThreadNew+0xa8>
        mem = 1;
 800c25a:	2301      	movs	r3, #1
 800c25c:	61bb      	str	r3, [r7, #24]
 800c25e:	e010      	b.n	800c282 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d10c      	bne.n	800c282 <osThreadNew+0xca>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d108      	bne.n	800c282 <osThreadNew+0xca>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d104      	bne.n	800c282 <osThreadNew+0xca>
          mem = 0;
 800c278:	2300      	movs	r3, #0
 800c27a:	61bb      	str	r3, [r7, #24]
 800c27c:	e001      	b.n	800c282 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	2b01      	cmp	r3, #1
 800c286:	d110      	bne.n	800c2aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c290:	9202      	str	r2, [sp, #8]
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	6a3a      	ldr	r2, [r7, #32]
 800c29c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f000 fe0c 	bl	800cebc <xTaskCreateStatic>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	613b      	str	r3, [r7, #16]
 800c2a8:	e013      	b.n	800c2d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d110      	bne.n	800c2d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c2b0:	6a3b      	ldr	r3, [r7, #32]
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	f107 0310 	add.w	r3, r7, #16
 800c2b8:	9301      	str	r3, [sp, #4]
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f000 fe57 	bl	800cf76 <xTaskCreate>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d001      	beq.n	800c2d2 <osThreadNew+0x11a>
            hTask = NULL;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c2d2:	693b      	ldr	r3, [r7, #16]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3728      	adds	r7, #40	; 0x28
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2e4:	f3ef 8305 	mrs	r3, IPSR
 800c2e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d003      	beq.n	800c2f8 <osDelay+0x1c>
    stat = osErrorISR;
 800c2f0:	f06f 0305 	mvn.w	r3, #5
 800c2f4:	60fb      	str	r3, [r7, #12]
 800c2f6:	e007      	b.n	800c308 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d002      	beq.n	800c308 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 ff7c 	bl	800d200 <vTaskDelay>
    }
  }

  return (stat);
 800c308:	68fb      	ldr	r3, [r7, #12]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c314:	b480      	push	{r7}
 800c316:	b085      	sub	sp, #20
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	4a07      	ldr	r2, [pc, #28]	; (800c340 <vApplicationGetIdleTaskMemory+0x2c>)
 800c324:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	4a06      	ldr	r2, [pc, #24]	; (800c344 <vApplicationGetIdleTaskMemory+0x30>)
 800c32a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2280      	movs	r2, #128	; 0x80
 800c330:	601a      	str	r2, [r3, #0]
}
 800c332:	bf00      	nop
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	20000768 	.word	0x20000768
 800c344:	200007c4 	.word	0x200007c4

0800c348 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	4a07      	ldr	r2, [pc, #28]	; (800c374 <vApplicationGetTimerTaskMemory+0x2c>)
 800c358:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	4a06      	ldr	r2, [pc, #24]	; (800c378 <vApplicationGetTimerTaskMemory+0x30>)
 800c35e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c366:	601a      	str	r2, [r3, #0]
}
 800c368:	bf00      	nop
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	200009c4 	.word	0x200009c4
 800c378:	20000a20 	.word	0x20000a20

0800c37c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f103 0208 	add.w	r2, r3, #8
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f04f 32ff 	mov.w	r2, #4294967295
 800c394:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f103 0208 	add.w	r2, r3, #8
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f103 0208 	add.w	r2, r3, #8
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c3ca:	bf00      	nop
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3d6:	b480      	push	{r7}
 800c3d8:	b085      	sub	sp, #20
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	689a      	ldr	r2, [r3, #8]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	683a      	ldr	r2, [r7, #0]
 800c3fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	683a      	ldr	r2, [r7, #0]
 800c400:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	1c5a      	adds	r2, r3, #1
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	601a      	str	r2, [r3, #0]
}
 800c412:	bf00      	nop
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c41e:	b480      	push	{r7}
 800c420:	b085      	sub	sp, #20
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
 800c426:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c434:	d103      	bne.n	800c43e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	60fb      	str	r3, [r7, #12]
 800c43c:	e00c      	b.n	800c458 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	3308      	adds	r3, #8
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	e002      	b.n	800c44c <vListInsert+0x2e>
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	60fb      	str	r3, [r7, #12]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	68ba      	ldr	r2, [r7, #8]
 800c454:	429a      	cmp	r2, r3
 800c456:	d2f6      	bcs.n	800c446 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	1c5a      	adds	r2, r3, #1
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	601a      	str	r2, [r3, #0]
}
 800c484:	bf00      	nop
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	6892      	ldr	r2, [r2, #8]
 800c4a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	6852      	ldr	r2, [r2, #4]
 800c4b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d103      	bne.n	800c4c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689a      	ldr	r2, [r3, #8]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	1e5a      	subs	r2, r3, #1
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3714      	adds	r7, #20
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10a      	bne.n	800c50e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c50a:	bf00      	nop
 800c50c:	e7fe      	b.n	800c50c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c50e:	f002 f851 	bl	800e5b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c51a:	68f9      	ldr	r1, [r7, #12]
 800c51c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c51e:	fb01 f303 	mul.w	r3, r1, r3
 800c522:	441a      	add	r2, r3
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2200      	movs	r2, #0
 800c52c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53e:	3b01      	subs	r3, #1
 800c540:	68f9      	ldr	r1, [r7, #12]
 800c542:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c544:	fb01 f303 	mul.w	r3, r1, r3
 800c548:	441a      	add	r2, r3
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	22ff      	movs	r2, #255	; 0xff
 800c552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	22ff      	movs	r2, #255	; 0xff
 800c55a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d114      	bne.n	800c58e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d01a      	beq.n	800c5a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3310      	adds	r3, #16
 800c570:	4618      	mov	r0, r3
 800c572:	f001 f903 	bl	800d77c <xTaskRemoveFromEventList>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d012      	beq.n	800c5a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c57c:	4b0c      	ldr	r3, [pc, #48]	; (800c5b0 <xQueueGenericReset+0xcc>)
 800c57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	e009      	b.n	800c5a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	3310      	adds	r3, #16
 800c592:	4618      	mov	r0, r3
 800c594:	f7ff fef2 	bl	800c37c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3324      	adds	r3, #36	; 0x24
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7ff feed 	bl	800c37c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c5a2:	f002 f837 	bl	800e614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c5a6:	2301      	movs	r3, #1
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	e000ed04 	.word	0xe000ed04

0800c5b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08e      	sub	sp, #56	; 0x38
 800c5b8:	af02      	add	r7, sp, #8
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
 800c5c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d10a      	bne.n	800c5de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5cc:	f383 8811 	msr	BASEPRI, r3
 800c5d0:	f3bf 8f6f 	isb	sy
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5da:	bf00      	nop
 800c5dc:	e7fe      	b.n	800c5dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d10a      	bne.n	800c5fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5f6:	bf00      	nop
 800c5f8:	e7fe      	b.n	800c5f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <xQueueGenericCreateStatic+0x52>
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <xQueueGenericCreateStatic+0x56>
 800c606:	2301      	movs	r3, #1
 800c608:	e000      	b.n	800c60c <xQueueGenericCreateStatic+0x58>
 800c60a:	2300      	movs	r3, #0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	623b      	str	r3, [r7, #32]
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d102      	bne.n	800c632 <xQueueGenericCreateStatic+0x7e>
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d101      	bne.n	800c636 <xQueueGenericCreateStatic+0x82>
 800c632:	2301      	movs	r3, #1
 800c634:	e000      	b.n	800c638 <xQueueGenericCreateStatic+0x84>
 800c636:	2300      	movs	r3, #0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10a      	bne.n	800c652 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	61fb      	str	r3, [r7, #28]
}
 800c64e:	bf00      	nop
 800c650:	e7fe      	b.n	800c650 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c652:	2350      	movs	r3, #80	; 0x50
 800c654:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	2b50      	cmp	r3, #80	; 0x50
 800c65a:	d00a      	beq.n	800c672 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	61bb      	str	r3, [r7, #24]
}
 800c66e:	bf00      	nop
 800c670:	e7fe      	b.n	800c670 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c672:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00d      	beq.n	800c69a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c680:	2201      	movs	r2, #1
 800c682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c686:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	4613      	mov	r3, r2
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	68b9      	ldr	r1, [r7, #8]
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f000 f805 	bl	800c6a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3730      	adds	r7, #48	; 0x30
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
 800c6b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d103      	bne.n	800c6c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	69ba      	ldr	r2, [r7, #24]
 800c6bc:	601a      	str	r2, [r3, #0]
 800c6be:	e002      	b.n	800c6c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	69b8      	ldr	r0, [r7, #24]
 800c6d6:	f7ff ff05 	bl	800c4e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	78fa      	ldrb	r2, [r7, #3]
 800c6de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c6e2:	bf00      	nop
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
	...

0800c6ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08e      	sub	sp, #56	; 0x38
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
 800c6f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10a      	bne.n	800c71e <xQueueGenericSend+0x32>
	__asm volatile
 800c708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70c:	f383 8811 	msr	BASEPRI, r3
 800c710:	f3bf 8f6f 	isb	sy
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c71a:	bf00      	nop
 800c71c:	e7fe      	b.n	800c71c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d103      	bne.n	800c72c <xQueueGenericSend+0x40>
 800c724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d101      	bne.n	800c730 <xQueueGenericSend+0x44>
 800c72c:	2301      	movs	r3, #1
 800c72e:	e000      	b.n	800c732 <xQueueGenericSend+0x46>
 800c730:	2300      	movs	r3, #0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10a      	bne.n	800c74c <xQueueGenericSend+0x60>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c748:	bf00      	nop
 800c74a:	e7fe      	b.n	800c74a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	2b02      	cmp	r3, #2
 800c750:	d103      	bne.n	800c75a <xQueueGenericSend+0x6e>
 800c752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c756:	2b01      	cmp	r3, #1
 800c758:	d101      	bne.n	800c75e <xQueueGenericSend+0x72>
 800c75a:	2301      	movs	r3, #1
 800c75c:	e000      	b.n	800c760 <xQueueGenericSend+0x74>
 800c75e:	2300      	movs	r3, #0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10a      	bne.n	800c77a <xQueueGenericSend+0x8e>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	623b      	str	r3, [r7, #32]
}
 800c776:	bf00      	nop
 800c778:	e7fe      	b.n	800c778 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c77a:	f001 f9bd 	bl	800daf8 <xTaskGetSchedulerState>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d102      	bne.n	800c78a <xQueueGenericSend+0x9e>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d101      	bne.n	800c78e <xQueueGenericSend+0xa2>
 800c78a:	2301      	movs	r3, #1
 800c78c:	e000      	b.n	800c790 <xQueueGenericSend+0xa4>
 800c78e:	2300      	movs	r3, #0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10a      	bne.n	800c7aa <xQueueGenericSend+0xbe>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	61fb      	str	r3, [r7, #28]
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7aa:	f001 ff03 	bl	800e5b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d302      	bcc.n	800c7c0 <xQueueGenericSend+0xd4>
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	d129      	bne.n	800c814 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	68b9      	ldr	r1, [r7, #8]
 800c7c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7c6:	f000 fa0b 	bl	800cbe0 <prvCopyDataToQueue>
 800c7ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d010      	beq.n	800c7f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	3324      	adds	r3, #36	; 0x24
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 ffcf 	bl	800d77c <xTaskRemoveFromEventList>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d013      	beq.n	800c80c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c7e4:	4b3f      	ldr	r3, [pc, #252]	; (800c8e4 <xQueueGenericSend+0x1f8>)
 800c7e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ea:	601a      	str	r2, [r3, #0]
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	e00a      	b.n	800c80c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d007      	beq.n	800c80c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c7fc:	4b39      	ldr	r3, [pc, #228]	; (800c8e4 <xQueueGenericSend+0x1f8>)
 800c7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c80c:	f001 ff02 	bl	800e614 <vPortExitCritical>
				return pdPASS;
 800c810:	2301      	movs	r3, #1
 800c812:	e063      	b.n	800c8dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d103      	bne.n	800c822 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c81a:	f001 fefb 	bl	800e614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c81e:	2300      	movs	r3, #0
 800c820:	e05c      	b.n	800c8dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c824:	2b00      	cmp	r3, #0
 800c826:	d106      	bne.n	800c836 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c828:	f107 0314 	add.w	r3, r7, #20
 800c82c:	4618      	mov	r0, r3
 800c82e:	f001 f809 	bl	800d844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c832:	2301      	movs	r3, #1
 800c834:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c836:	f001 feed 	bl	800e614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c83a:	f000 fd7b 	bl	800d334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c83e:	f001 feb9 	bl	800e5b4 <vPortEnterCritical>
 800c842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c848:	b25b      	sxtb	r3, r3
 800c84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c84e:	d103      	bne.n	800c858 <xQueueGenericSend+0x16c>
 800c850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c85e:	b25b      	sxtb	r3, r3
 800c860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c864:	d103      	bne.n	800c86e <xQueueGenericSend+0x182>
 800c866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c86e:	f001 fed1 	bl	800e614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c872:	1d3a      	adds	r2, r7, #4
 800c874:	f107 0314 	add.w	r3, r7, #20
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f000 fff8 	bl	800d870 <xTaskCheckForTimeOut>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d124      	bne.n	800c8d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c888:	f000 faa2 	bl	800cdd0 <prvIsQueueFull>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d018      	beq.n	800c8c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	3310      	adds	r3, #16
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	4611      	mov	r1, r2
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 ff1e 	bl	800d6dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c8a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8a2:	f000 fa2d 	bl	800cd00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c8a6:	f000 fd53 	bl	800d350 <xTaskResumeAll>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f47f af7c 	bne.w	800c7aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c8b2:	4b0c      	ldr	r3, [pc, #48]	; (800c8e4 <xQueueGenericSend+0x1f8>)
 800c8b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	e772      	b.n	800c7aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c8c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8c6:	f000 fa1b 	bl	800cd00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8ca:	f000 fd41 	bl	800d350 <xTaskResumeAll>
 800c8ce:	e76c      	b.n	800c7aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8d2:	f000 fa15 	bl	800cd00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8d6:	f000 fd3b 	bl	800d350 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c8da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3738      	adds	r7, #56	; 0x38
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	e000ed04 	.word	0xe000ed04

0800c8e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b090      	sub	sp, #64	; 0x40
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10a      	bne.n	800c916 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c904:	f383 8811 	msr	BASEPRI, r3
 800c908:	f3bf 8f6f 	isb	sy
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c912:	bf00      	nop
 800c914:	e7fe      	b.n	800c914 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d103      	bne.n	800c924 <xQueueGenericSendFromISR+0x3c>
 800c91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c920:	2b00      	cmp	r3, #0
 800c922:	d101      	bne.n	800c928 <xQueueGenericSendFromISR+0x40>
 800c924:	2301      	movs	r3, #1
 800c926:	e000      	b.n	800c92a <xQueueGenericSendFromISR+0x42>
 800c928:	2300      	movs	r3, #0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10a      	bne.n	800c944 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c940:	bf00      	nop
 800c942:	e7fe      	b.n	800c942 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	2b02      	cmp	r3, #2
 800c948:	d103      	bne.n	800c952 <xQueueGenericSendFromISR+0x6a>
 800c94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d101      	bne.n	800c956 <xQueueGenericSendFromISR+0x6e>
 800c952:	2301      	movs	r3, #1
 800c954:	e000      	b.n	800c958 <xQueueGenericSendFromISR+0x70>
 800c956:	2300      	movs	r3, #0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10a      	bne.n	800c972 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	623b      	str	r3, [r7, #32]
}
 800c96e:	bf00      	nop
 800c970:	e7fe      	b.n	800c970 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c972:	f001 ff01 	bl	800e778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c976:	f3ef 8211 	mrs	r2, BASEPRI
 800c97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	61fa      	str	r2, [r7, #28]
 800c98c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c98e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c990:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d302      	bcc.n	800c9a4 <xQueueGenericSendFromISR+0xbc>
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	d12f      	bne.n	800ca04 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c9b4:	683a      	ldr	r2, [r7, #0]
 800c9b6:	68b9      	ldr	r1, [r7, #8]
 800c9b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9ba:	f000 f911 	bl	800cbe0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c9be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c6:	d112      	bne.n	800c9ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d016      	beq.n	800c9fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d2:	3324      	adds	r3, #36	; 0x24
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 fed1 	bl	800d77c <xTaskRemoveFromEventList>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00e      	beq.n	800c9fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00b      	beq.n	800c9fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	601a      	str	r2, [r3, #0]
 800c9ec:	e007      	b.n	800c9fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c9ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	b25a      	sxtb	r2, r3
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ca02:	e001      	b.n	800ca08 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca04:	2300      	movs	r3, #0
 800ca06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3740      	adds	r7, #64	; 0x40
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
	...

0800ca20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b08c      	sub	sp, #48	; 0x30
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10a      	bne.n	800ca50 <xQueueReceive+0x30>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	623b      	str	r3, [r7, #32]
}
 800ca4c:	bf00      	nop
 800ca4e:	e7fe      	b.n	800ca4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d103      	bne.n	800ca5e <xQueueReceive+0x3e>
 800ca56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <xQueueReceive+0x42>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e000      	b.n	800ca64 <xQueueReceive+0x44>
 800ca62:	2300      	movs	r3, #0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10a      	bne.n	800ca7e <xQueueReceive+0x5e>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	61fb      	str	r3, [r7, #28]
}
 800ca7a:	bf00      	nop
 800ca7c:	e7fe      	b.n	800ca7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca7e:	f001 f83b 	bl	800daf8 <xTaskGetSchedulerState>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d102      	bne.n	800ca8e <xQueueReceive+0x6e>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <xQueueReceive+0x72>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e000      	b.n	800ca94 <xQueueReceive+0x74>
 800ca92:	2300      	movs	r3, #0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10a      	bne.n	800caae <xQueueReceive+0x8e>
	__asm volatile
 800ca98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9c:	f383 8811 	msr	BASEPRI, r3
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	61bb      	str	r3, [r7, #24]
}
 800caaa:	bf00      	nop
 800caac:	e7fe      	b.n	800caac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800caae:	f001 fd81 	bl	800e5b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d01f      	beq.n	800cafe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cabe:	68b9      	ldr	r1, [r7, #8]
 800cac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cac2:	f000 f8f7 	bl	800ccb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac8:	1e5a      	subs	r2, r3, #1
 800caca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cacc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00f      	beq.n	800caf6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad8:	3310      	adds	r3, #16
 800cada:	4618      	mov	r0, r3
 800cadc:	f000 fe4e 	bl	800d77c <xTaskRemoveFromEventList>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d007      	beq.n	800caf6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cae6:	4b3d      	ldr	r3, [pc, #244]	; (800cbdc <xQueueReceive+0x1bc>)
 800cae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caec:	601a      	str	r2, [r3, #0]
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800caf6:	f001 fd8d 	bl	800e614 <vPortExitCritical>
				return pdPASS;
 800cafa:	2301      	movs	r3, #1
 800cafc:	e069      	b.n	800cbd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d103      	bne.n	800cb0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb04:	f001 fd86 	bl	800e614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	e062      	b.n	800cbd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d106      	bne.n	800cb20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb12:	f107 0310 	add.w	r3, r7, #16
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 fe94 	bl	800d844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb20:	f001 fd78 	bl	800e614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb24:	f000 fc06 	bl	800d334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb28:	f001 fd44 	bl	800e5b4 <vPortEnterCritical>
 800cb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb32:	b25b      	sxtb	r3, r3
 800cb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb38:	d103      	bne.n	800cb42 <xQueueReceive+0x122>
 800cb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb48:	b25b      	sxtb	r3, r3
 800cb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4e:	d103      	bne.n	800cb58 <xQueueReceive+0x138>
 800cb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb52:	2200      	movs	r2, #0
 800cb54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb58:	f001 fd5c 	bl	800e614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb5c:	1d3a      	adds	r2, r7, #4
 800cb5e:	f107 0310 	add.w	r3, r7, #16
 800cb62:	4611      	mov	r1, r2
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 fe83 	bl	800d870 <xTaskCheckForTimeOut>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d123      	bne.n	800cbb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb72:	f000 f917 	bl	800cda4 <prvIsQueueEmpty>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d017      	beq.n	800cbac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	3324      	adds	r3, #36	; 0x24
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	4611      	mov	r1, r2
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 fda9 	bl	800d6dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb8c:	f000 f8b8 	bl	800cd00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb90:	f000 fbde 	bl	800d350 <xTaskResumeAll>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d189      	bne.n	800caae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cb9a:	4b10      	ldr	r3, [pc, #64]	; (800cbdc <xQueueReceive+0x1bc>)
 800cb9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba0:	601a      	str	r2, [r3, #0]
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	e780      	b.n	800caae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cbac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbae:	f000 f8a7 	bl	800cd00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbb2:	f000 fbcd 	bl	800d350 <xTaskResumeAll>
 800cbb6:	e77a      	b.n	800caae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cbb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbba:	f000 f8a1 	bl	800cd00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbbe:	f000 fbc7 	bl	800d350 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbc4:	f000 f8ee 	bl	800cda4 <prvIsQueueEmpty>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f43f af6f 	beq.w	800caae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cbd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3730      	adds	r7, #48	; 0x30
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	e000ed04 	.word	0xe000ed04

0800cbe0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cbec:	2300      	movs	r3, #0
 800cbee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10d      	bne.n	800cc1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d14d      	bne.n	800cca2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 ff92 	bl	800db34 <xTaskPriorityDisinherit>
 800cc10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2200      	movs	r2, #0
 800cc16:	609a      	str	r2, [r3, #8]
 800cc18:	e043      	b.n	800cca2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d119      	bne.n	800cc54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6858      	ldr	r0, [r3, #4]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc28:	461a      	mov	r2, r3
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	f003 faf3 	bl	8010216 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	685a      	ldr	r2, [r3, #4]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc38:	441a      	add	r2, r3
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	685a      	ldr	r2, [r3, #4]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d32b      	bcc.n	800cca2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	605a      	str	r2, [r3, #4]
 800cc52:	e026      	b.n	800cca2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	68d8      	ldr	r0, [r3, #12]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	68b9      	ldr	r1, [r7, #8]
 800cc60:	f003 fad9 	bl	8010216 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	68da      	ldr	r2, [r3, #12]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc6c:	425b      	negs	r3, r3
 800cc6e:	441a      	add	r2, r3
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	68da      	ldr	r2, [r3, #12]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d207      	bcs.n	800cc90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	689a      	ldr	r2, [r3, #8]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc88:	425b      	negs	r3, r3
 800cc8a:	441a      	add	r2, r3
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2b02      	cmp	r3, #2
 800cc94:	d105      	bne.n	800cca2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d002      	beq.n	800cca2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	1c5a      	adds	r2, r3, #1
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ccaa:	697b      	ldr	r3, [r7, #20]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3718      	adds	r7, #24
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d018      	beq.n	800ccf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	68da      	ldr	r2, [r3, #12]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccce:	441a      	add	r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68da      	ldr	r2, [r3, #12]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d303      	bcc.n	800cce8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	68d9      	ldr	r1, [r3, #12]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	6838      	ldr	r0, [r7, #0]
 800ccf4:	f003 fa8f 	bl	8010216 <memcpy>
	}
}
 800ccf8:	bf00      	nop
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cd08:	f001 fc54 	bl	800e5b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd14:	e011      	b.n	800cd3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d012      	beq.n	800cd44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	3324      	adds	r3, #36	; 0x24
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 fd2a 	bl	800d77c <xTaskRemoveFromEventList>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d001      	beq.n	800cd32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd2e:	f000 fe01 	bl	800d934 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	dce9      	bgt.n	800cd16 <prvUnlockQueue+0x16>
 800cd42:	e000      	b.n	800cd46 <prvUnlockQueue+0x46>
					break;
 800cd44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	22ff      	movs	r2, #255	; 0xff
 800cd4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cd4e:	f001 fc61 	bl	800e614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cd52:	f001 fc2f 	bl	800e5b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd5e:	e011      	b.n	800cd84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d012      	beq.n	800cd8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	3310      	adds	r3, #16
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 fd05 	bl	800d77c <xTaskRemoveFromEventList>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cd78:	f000 fddc 	bl	800d934 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd7c:	7bbb      	ldrb	r3, [r7, #14]
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	dce9      	bgt.n	800cd60 <prvUnlockQueue+0x60>
 800cd8c:	e000      	b.n	800cd90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	22ff      	movs	r2, #255	; 0xff
 800cd94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cd98:	f001 fc3c 	bl	800e614 <vPortExitCritical>
}
 800cd9c:	bf00      	nop
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdac:	f001 fc02 	bl	800e5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d102      	bne.n	800cdbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	60fb      	str	r3, [r7, #12]
 800cdbc:	e001      	b.n	800cdc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdc2:	f001 fc27 	bl	800e614 <vPortExitCritical>

	return xReturn;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdd8:	f001 fbec 	bl	800e5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d102      	bne.n	800cdee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cde8:	2301      	movs	r3, #1
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	e001      	b.n	800cdf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdf2:	f001 fc0f 	bl	800e614 <vPortExitCritical>

	return xReturn;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	60fb      	str	r3, [r7, #12]
 800ce0e:	e014      	b.n	800ce3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ce10:	4a0f      	ldr	r2, [pc, #60]	; (800ce50 <vQueueAddToRegistry+0x50>)
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d10b      	bne.n	800ce34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ce1c:	490c      	ldr	r1, [pc, #48]	; (800ce50 <vQueueAddToRegistry+0x50>)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	683a      	ldr	r2, [r7, #0]
 800ce22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ce26:	4a0a      	ldr	r2, [pc, #40]	; (800ce50 <vQueueAddToRegistry+0x50>)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	00db      	lsls	r3, r3, #3
 800ce2c:	4413      	add	r3, r2
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ce32:	e006      	b.n	800ce42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	3301      	adds	r3, #1
 800ce38:	60fb      	str	r3, [r7, #12]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b07      	cmp	r3, #7
 800ce3e:	d9e7      	bls.n	800ce10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ce40:	bf00      	nop
 800ce42:	bf00      	nop
 800ce44:	3714      	adds	r7, #20
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	20000e20 	.word	0x20000e20

0800ce54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce64:	f001 fba6 	bl	800e5b4 <vPortEnterCritical>
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce6e:	b25b      	sxtb	r3, r3
 800ce70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce74:	d103      	bne.n	800ce7e <vQueueWaitForMessageRestricted+0x2a>
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce84:	b25b      	sxtb	r3, r3
 800ce86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8a:	d103      	bne.n	800ce94 <vQueueWaitForMessageRestricted+0x40>
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce94:	f001 fbbe 	bl	800e614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d106      	bne.n	800ceae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	3324      	adds	r3, #36	; 0x24
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	68b9      	ldr	r1, [r7, #8]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f000 fc3b 	bl	800d724 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ceae:	6978      	ldr	r0, [r7, #20]
 800ceb0:	f7ff ff26 	bl	800cd00 <prvUnlockQueue>
	}
 800ceb4:	bf00      	nop
 800ceb6:	3718      	adds	r7, #24
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b08e      	sub	sp, #56	; 0x38
 800cec0:	af04      	add	r7, sp, #16
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ceca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10a      	bne.n	800cee6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	623b      	str	r3, [r7, #32]
}
 800cee2:	bf00      	nop
 800cee4:	e7fe      	b.n	800cee4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d10a      	bne.n	800cf02 <xTaskCreateStatic+0x46>
	__asm volatile
 800ceec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	61fb      	str	r3, [r7, #28]
}
 800cefe:	bf00      	nop
 800cf00:	e7fe      	b.n	800cf00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cf02:	235c      	movs	r3, #92	; 0x5c
 800cf04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	2b5c      	cmp	r3, #92	; 0x5c
 800cf0a:	d00a      	beq.n	800cf22 <xTaskCreateStatic+0x66>
	__asm volatile
 800cf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf10:	f383 8811 	msr	BASEPRI, r3
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	61bb      	str	r3, [r7, #24]
}
 800cf1e:	bf00      	nop
 800cf20:	e7fe      	b.n	800cf20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d01e      	beq.n	800cf68 <xTaskCreateStatic+0xac>
 800cf2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d01b      	beq.n	800cf68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3c:	2202      	movs	r2, #2
 800cf3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf42:	2300      	movs	r3, #0
 800cf44:	9303      	str	r3, [sp, #12]
 800cf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf48:	9302      	str	r3, [sp, #8]
 800cf4a:	f107 0314 	add.w	r3, r7, #20
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf52:	9300      	str	r3, [sp, #0]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	68b9      	ldr	r1, [r7, #8]
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f000 f850 	bl	800d000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf62:	f000 f8dd 	bl	800d120 <prvAddNewTaskToReadyList>
 800cf66:	e001      	b.n	800cf6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf6c:	697b      	ldr	r3, [r7, #20]
	}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3728      	adds	r7, #40	; 0x28
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b08c      	sub	sp, #48	; 0x30
 800cf7a:	af04      	add	r7, sp, #16
 800cf7c:	60f8      	str	r0, [r7, #12]
 800cf7e:	60b9      	str	r1, [r7, #8]
 800cf80:	603b      	str	r3, [r7, #0]
 800cf82:	4613      	mov	r3, r2
 800cf84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf86:	88fb      	ldrh	r3, [r7, #6]
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f001 fc34 	bl	800e7f8 <pvPortMalloc>
 800cf90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00e      	beq.n	800cfb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf98:	205c      	movs	r0, #92	; 0x5c
 800cf9a:	f001 fc2d 	bl	800e7f8 <pvPortMalloc>
 800cf9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d003      	beq.n	800cfae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	697a      	ldr	r2, [r7, #20]
 800cfaa:	631a      	str	r2, [r3, #48]	; 0x30
 800cfac:	e005      	b.n	800cfba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cfae:	6978      	ldr	r0, [r7, #20]
 800cfb0:	f001 fcee 	bl	800e990 <vPortFree>
 800cfb4:	e001      	b.n	800cfba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d017      	beq.n	800cff0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cfc8:	88fa      	ldrh	r2, [r7, #6]
 800cfca:	2300      	movs	r3, #0
 800cfcc:	9303      	str	r3, [sp, #12]
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	9302      	str	r3, [sp, #8]
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	9301      	str	r3, [sp, #4]
 800cfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd8:	9300      	str	r3, [sp, #0]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	68b9      	ldr	r1, [r7, #8]
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 f80e 	bl	800d000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cfe4:	69f8      	ldr	r0, [r7, #28]
 800cfe6:	f000 f89b 	bl	800d120 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cfea:	2301      	movs	r3, #1
 800cfec:	61bb      	str	r3, [r7, #24]
 800cfee:	e002      	b.n	800cff6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cff0:	f04f 33ff 	mov.w	r3, #4294967295
 800cff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cff6:	69bb      	ldr	r3, [r7, #24]
	}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3720      	adds	r7, #32
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b088      	sub	sp, #32
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
 800d00c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	461a      	mov	r2, r3
 800d018:	21a5      	movs	r1, #165	; 0xa5
 800d01a:	f003 f87c 	bl	8010116 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d028:	3b01      	subs	r3, #1
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	4413      	add	r3, r2
 800d02e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	f023 0307 	bic.w	r3, r3, #7
 800d036:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	f003 0307 	and.w	r3, r3, #7
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d00a      	beq.n	800d058 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d046:	f383 8811 	msr	BASEPRI, r3
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	617b      	str	r3, [r7, #20]
}
 800d054:	bf00      	nop
 800d056:	e7fe      	b.n	800d056 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d01f      	beq.n	800d09e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d05e:	2300      	movs	r3, #0
 800d060:	61fb      	str	r3, [r7, #28]
 800d062:	e012      	b.n	800d08a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	69fb      	ldr	r3, [r7, #28]
 800d068:	4413      	add	r3, r2
 800d06a:	7819      	ldrb	r1, [r3, #0]
 800d06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	4413      	add	r3, r2
 800d072:	3334      	adds	r3, #52	; 0x34
 800d074:	460a      	mov	r2, r1
 800d076:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	4413      	add	r3, r2
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d006      	beq.n	800d092 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	3301      	adds	r3, #1
 800d088:	61fb      	str	r3, [r7, #28]
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	2b0f      	cmp	r3, #15
 800d08e:	d9e9      	bls.n	800d064 <prvInitialiseNewTask+0x64>
 800d090:	e000      	b.n	800d094 <prvInitialiseNewTask+0x94>
			{
				break;
 800d092:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d096:	2200      	movs	r2, #0
 800d098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d09c:	e003      	b.n	800d0a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a8:	2b37      	cmp	r3, #55	; 0x37
 800d0aa:	d901      	bls.n	800d0b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d0ac:	2337      	movs	r3, #55	; 0x37
 800d0ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0be:	2200      	movs	r2, #0
 800d0c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	3304      	adds	r3, #4
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7ff f978 	bl	800c3bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ce:	3318      	adds	r3, #24
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7ff f973 	bl	800c3bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	68f9      	ldr	r1, [r7, #12]
 800d0fe:	69b8      	ldr	r0, [r7, #24]
 800d100:	f001 f928 	bl	800e354 <pxPortInitialiseStack>
 800d104:	4602      	mov	r2, r0
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d116:	bf00      	nop
 800d118:	3720      	adds	r7, #32
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
	...

0800d120 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d128:	f001 fa44 	bl	800e5b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d12c:	4b2d      	ldr	r3, [pc, #180]	; (800d1e4 <prvAddNewTaskToReadyList+0xc4>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3301      	adds	r3, #1
 800d132:	4a2c      	ldr	r2, [pc, #176]	; (800d1e4 <prvAddNewTaskToReadyList+0xc4>)
 800d134:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d136:	4b2c      	ldr	r3, [pc, #176]	; (800d1e8 <prvAddNewTaskToReadyList+0xc8>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d109      	bne.n	800d152 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d13e:	4a2a      	ldr	r2, [pc, #168]	; (800d1e8 <prvAddNewTaskToReadyList+0xc8>)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d144:	4b27      	ldr	r3, [pc, #156]	; (800d1e4 <prvAddNewTaskToReadyList+0xc4>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d110      	bne.n	800d16e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d14c:	f000 fc16 	bl	800d97c <prvInitialiseTaskLists>
 800d150:	e00d      	b.n	800d16e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d152:	4b26      	ldr	r3, [pc, #152]	; (800d1ec <prvAddNewTaskToReadyList+0xcc>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d109      	bne.n	800d16e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d15a:	4b23      	ldr	r3, [pc, #140]	; (800d1e8 <prvAddNewTaskToReadyList+0xc8>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d164:	429a      	cmp	r2, r3
 800d166:	d802      	bhi.n	800d16e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d168:	4a1f      	ldr	r2, [pc, #124]	; (800d1e8 <prvAddNewTaskToReadyList+0xc8>)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d16e:	4b20      	ldr	r3, [pc, #128]	; (800d1f0 <prvAddNewTaskToReadyList+0xd0>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	3301      	adds	r3, #1
 800d174:	4a1e      	ldr	r2, [pc, #120]	; (800d1f0 <prvAddNewTaskToReadyList+0xd0>)
 800d176:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d178:	4b1d      	ldr	r3, [pc, #116]	; (800d1f0 <prvAddNewTaskToReadyList+0xd0>)
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d184:	4b1b      	ldr	r3, [pc, #108]	; (800d1f4 <prvAddNewTaskToReadyList+0xd4>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d903      	bls.n	800d194 <prvAddNewTaskToReadyList+0x74>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d190:	4a18      	ldr	r2, [pc, #96]	; (800d1f4 <prvAddNewTaskToReadyList+0xd4>)
 800d192:	6013      	str	r3, [r2, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d198:	4613      	mov	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4413      	add	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4a15      	ldr	r2, [pc, #84]	; (800d1f8 <prvAddNewTaskToReadyList+0xd8>)
 800d1a2:	441a      	add	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	3304      	adds	r3, #4
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	f7ff f913 	bl	800c3d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d1b0:	f001 fa30 	bl	800e614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d1b4:	4b0d      	ldr	r3, [pc, #52]	; (800d1ec <prvAddNewTaskToReadyList+0xcc>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d00e      	beq.n	800d1da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1bc:	4b0a      	ldr	r3, [pc, #40]	; (800d1e8 <prvAddNewTaskToReadyList+0xc8>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d207      	bcs.n	800d1da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1ca:	4b0c      	ldr	r3, [pc, #48]	; (800d1fc <prvAddNewTaskToReadyList+0xdc>)
 800d1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d0:	601a      	str	r2, [r3, #0]
 800d1d2:	f3bf 8f4f 	dsb	sy
 800d1d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1da:	bf00      	nop
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	20001334 	.word	0x20001334
 800d1e8:	20000e60 	.word	0x20000e60
 800d1ec:	20001340 	.word	0x20001340
 800d1f0:	20001350 	.word	0x20001350
 800d1f4:	2000133c 	.word	0x2000133c
 800d1f8:	20000e64 	.word	0x20000e64
 800d1fc:	e000ed04 	.word	0xe000ed04

0800d200 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d208:	2300      	movs	r3, #0
 800d20a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d017      	beq.n	800d242 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d212:	4b13      	ldr	r3, [pc, #76]	; (800d260 <vTaskDelay+0x60>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00a      	beq.n	800d230 <vTaskDelay+0x30>
	__asm volatile
 800d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21e:	f383 8811 	msr	BASEPRI, r3
 800d222:	f3bf 8f6f 	isb	sy
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	60bb      	str	r3, [r7, #8]
}
 800d22c:	bf00      	nop
 800d22e:	e7fe      	b.n	800d22e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d230:	f000 f880 	bl	800d334 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d234:	2100      	movs	r1, #0
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 fcea 	bl	800dc10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d23c:	f000 f888 	bl	800d350 <xTaskResumeAll>
 800d240:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d107      	bne.n	800d258 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d248:	4b06      	ldr	r3, [pc, #24]	; (800d264 <vTaskDelay+0x64>)
 800d24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d258:	bf00      	nop
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	2000135c 	.word	0x2000135c
 800d264:	e000ed04 	.word	0xe000ed04

0800d268 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08a      	sub	sp, #40	; 0x28
 800d26c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d26e:	2300      	movs	r3, #0
 800d270:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d272:	2300      	movs	r3, #0
 800d274:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d276:	463a      	mov	r2, r7
 800d278:	1d39      	adds	r1, r7, #4
 800d27a:	f107 0308 	add.w	r3, r7, #8
 800d27e:	4618      	mov	r0, r3
 800d280:	f7ff f848 	bl	800c314 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d284:	6839      	ldr	r1, [r7, #0]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	68ba      	ldr	r2, [r7, #8]
 800d28a:	9202      	str	r2, [sp, #8]
 800d28c:	9301      	str	r3, [sp, #4]
 800d28e:	2300      	movs	r3, #0
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	2300      	movs	r3, #0
 800d294:	460a      	mov	r2, r1
 800d296:	4921      	ldr	r1, [pc, #132]	; (800d31c <vTaskStartScheduler+0xb4>)
 800d298:	4821      	ldr	r0, [pc, #132]	; (800d320 <vTaskStartScheduler+0xb8>)
 800d29a:	f7ff fe0f 	bl	800cebc <xTaskCreateStatic>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	4a20      	ldr	r2, [pc, #128]	; (800d324 <vTaskStartScheduler+0xbc>)
 800d2a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2a4:	4b1f      	ldr	r3, [pc, #124]	; (800d324 <vTaskStartScheduler+0xbc>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	617b      	str	r3, [r7, #20]
 800d2b0:	e001      	b.n	800d2b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d102      	bne.n	800d2c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2bc:	f000 fcfc 	bl	800dcb8 <xTimerCreateTimerTask>
 800d2c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d116      	bne.n	800d2f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2cc:	f383 8811 	msr	BASEPRI, r3
 800d2d0:	f3bf 8f6f 	isb	sy
 800d2d4:	f3bf 8f4f 	dsb	sy
 800d2d8:	613b      	str	r3, [r7, #16]
}
 800d2da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2dc:	4b12      	ldr	r3, [pc, #72]	; (800d328 <vTaskStartScheduler+0xc0>)
 800d2de:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2e4:	4b11      	ldr	r3, [pc, #68]	; (800d32c <vTaskStartScheduler+0xc4>)
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2ea:	4b11      	ldr	r3, [pc, #68]	; (800d330 <vTaskStartScheduler+0xc8>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d2f0:	f001 f8be 	bl	800e470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d2f4:	e00e      	b.n	800d314 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2fc:	d10a      	bne.n	800d314 <vTaskStartScheduler+0xac>
	__asm volatile
 800d2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	60fb      	str	r3, [r7, #12]
}
 800d310:	bf00      	nop
 800d312:	e7fe      	b.n	800d312 <vTaskStartScheduler+0xaa>
}
 800d314:	bf00      	nop
 800d316:	3718      	adds	r7, #24
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	08012350 	.word	0x08012350
 800d320:	0800d94d 	.word	0x0800d94d
 800d324:	20001358 	.word	0x20001358
 800d328:	20001354 	.word	0x20001354
 800d32c:	20001340 	.word	0x20001340
 800d330:	20001338 	.word	0x20001338

0800d334 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d334:	b480      	push	{r7}
 800d336:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d338:	4b04      	ldr	r3, [pc, #16]	; (800d34c <vTaskSuspendAll+0x18>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3301      	adds	r3, #1
 800d33e:	4a03      	ldr	r2, [pc, #12]	; (800d34c <vTaskSuspendAll+0x18>)
 800d340:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d342:	bf00      	nop
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	2000135c 	.word	0x2000135c

0800d350 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d356:	2300      	movs	r3, #0
 800d358:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d35a:	2300      	movs	r3, #0
 800d35c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d35e:	4b42      	ldr	r3, [pc, #264]	; (800d468 <xTaskResumeAll+0x118>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10a      	bne.n	800d37c <xTaskResumeAll+0x2c>
	__asm volatile
 800d366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36a:	f383 8811 	msr	BASEPRI, r3
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	603b      	str	r3, [r7, #0]
}
 800d378:	bf00      	nop
 800d37a:	e7fe      	b.n	800d37a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d37c:	f001 f91a 	bl	800e5b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d380:	4b39      	ldr	r3, [pc, #228]	; (800d468 <xTaskResumeAll+0x118>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	3b01      	subs	r3, #1
 800d386:	4a38      	ldr	r2, [pc, #224]	; (800d468 <xTaskResumeAll+0x118>)
 800d388:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d38a:	4b37      	ldr	r3, [pc, #220]	; (800d468 <xTaskResumeAll+0x118>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d162      	bne.n	800d458 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d392:	4b36      	ldr	r3, [pc, #216]	; (800d46c <xTaskResumeAll+0x11c>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d05e      	beq.n	800d458 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d39a:	e02f      	b.n	800d3fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d39c:	4b34      	ldr	r3, [pc, #208]	; (800d470 <xTaskResumeAll+0x120>)
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	3318      	adds	r3, #24
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff f871 	bl	800c490 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7ff f86c 	bl	800c490 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3bc:	4b2d      	ldr	r3, [pc, #180]	; (800d474 <xTaskResumeAll+0x124>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d903      	bls.n	800d3cc <xTaskResumeAll+0x7c>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c8:	4a2a      	ldr	r2, [pc, #168]	; (800d474 <xTaskResumeAll+0x124>)
 800d3ca:	6013      	str	r3, [r2, #0]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	4413      	add	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4a27      	ldr	r2, [pc, #156]	; (800d478 <xTaskResumeAll+0x128>)
 800d3da:	441a      	add	r2, r3
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	3304      	adds	r3, #4
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	4610      	mov	r0, r2
 800d3e4:	f7fe fff7 	bl	800c3d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ec:	4b23      	ldr	r3, [pc, #140]	; (800d47c <xTaskResumeAll+0x12c>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d302      	bcc.n	800d3fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d3f6:	4b22      	ldr	r3, [pc, #136]	; (800d480 <xTaskResumeAll+0x130>)
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3fc:	4b1c      	ldr	r3, [pc, #112]	; (800d470 <xTaskResumeAll+0x120>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1cb      	bne.n	800d39c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d001      	beq.n	800d40e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d40a:	f000 fb55 	bl	800dab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d40e:	4b1d      	ldr	r3, [pc, #116]	; (800d484 <xTaskResumeAll+0x134>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d010      	beq.n	800d43c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d41a:	f000 f847 	bl	800d4ac <xTaskIncrementTick>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d424:	4b16      	ldr	r3, [pc, #88]	; (800d480 <xTaskResumeAll+0x130>)
 800d426:	2201      	movs	r2, #1
 800d428:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	3b01      	subs	r3, #1
 800d42e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1f1      	bne.n	800d41a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d436:	4b13      	ldr	r3, [pc, #76]	; (800d484 <xTaskResumeAll+0x134>)
 800d438:	2200      	movs	r2, #0
 800d43a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d43c:	4b10      	ldr	r3, [pc, #64]	; (800d480 <xTaskResumeAll+0x130>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d009      	beq.n	800d458 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d444:	2301      	movs	r3, #1
 800d446:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d448:	4b0f      	ldr	r3, [pc, #60]	; (800d488 <xTaskResumeAll+0x138>)
 800d44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44e:	601a      	str	r2, [r3, #0]
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d458:	f001 f8dc 	bl	800e614 <vPortExitCritical>

	return xAlreadyYielded;
 800d45c:	68bb      	ldr	r3, [r7, #8]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	2000135c 	.word	0x2000135c
 800d46c:	20001334 	.word	0x20001334
 800d470:	200012f4 	.word	0x200012f4
 800d474:	2000133c 	.word	0x2000133c
 800d478:	20000e64 	.word	0x20000e64
 800d47c:	20000e60 	.word	0x20000e60
 800d480:	20001348 	.word	0x20001348
 800d484:	20001344 	.word	0x20001344
 800d488:	e000ed04 	.word	0xe000ed04

0800d48c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d492:	4b05      	ldr	r3, [pc, #20]	; (800d4a8 <xTaskGetTickCount+0x1c>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d498:	687b      	ldr	r3, [r7, #4]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	370c      	adds	r7, #12
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	20001338 	.word	0x20001338

0800d4ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4b6:	4b4f      	ldr	r3, [pc, #316]	; (800d5f4 <xTaskIncrementTick+0x148>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	f040 808f 	bne.w	800d5de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4c0:	4b4d      	ldr	r3, [pc, #308]	; (800d5f8 <xTaskIncrementTick+0x14c>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4c8:	4a4b      	ldr	r2, [pc, #300]	; (800d5f8 <xTaskIncrementTick+0x14c>)
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d120      	bne.n	800d516 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4d4:	4b49      	ldr	r3, [pc, #292]	; (800d5fc <xTaskIncrementTick+0x150>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00a      	beq.n	800d4f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	603b      	str	r3, [r7, #0]
}
 800d4f0:	bf00      	nop
 800d4f2:	e7fe      	b.n	800d4f2 <xTaskIncrementTick+0x46>
 800d4f4:	4b41      	ldr	r3, [pc, #260]	; (800d5fc <xTaskIncrementTick+0x150>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	60fb      	str	r3, [r7, #12]
 800d4fa:	4b41      	ldr	r3, [pc, #260]	; (800d600 <xTaskIncrementTick+0x154>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4a3f      	ldr	r2, [pc, #252]	; (800d5fc <xTaskIncrementTick+0x150>)
 800d500:	6013      	str	r3, [r2, #0]
 800d502:	4a3f      	ldr	r2, [pc, #252]	; (800d600 <xTaskIncrementTick+0x154>)
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	4b3e      	ldr	r3, [pc, #248]	; (800d604 <xTaskIncrementTick+0x158>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3301      	adds	r3, #1
 800d50e:	4a3d      	ldr	r2, [pc, #244]	; (800d604 <xTaskIncrementTick+0x158>)
 800d510:	6013      	str	r3, [r2, #0]
 800d512:	f000 fad1 	bl	800dab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d516:	4b3c      	ldr	r3, [pc, #240]	; (800d608 <xTaskIncrementTick+0x15c>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	693a      	ldr	r2, [r7, #16]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d349      	bcc.n	800d5b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d520:	4b36      	ldr	r3, [pc, #216]	; (800d5fc <xTaskIncrementTick+0x150>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d104      	bne.n	800d534 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d52a:	4b37      	ldr	r3, [pc, #220]	; (800d608 <xTaskIncrementTick+0x15c>)
 800d52c:	f04f 32ff 	mov.w	r2, #4294967295
 800d530:	601a      	str	r2, [r3, #0]
					break;
 800d532:	e03f      	b.n	800d5b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d534:	4b31      	ldr	r3, [pc, #196]	; (800d5fc <xTaskIncrementTick+0x150>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d544:	693a      	ldr	r2, [r7, #16]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d203      	bcs.n	800d554 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d54c:	4a2e      	ldr	r2, [pc, #184]	; (800d608 <xTaskIncrementTick+0x15c>)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d552:	e02f      	b.n	800d5b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	3304      	adds	r3, #4
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fe ff99 	bl	800c490 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d562:	2b00      	cmp	r3, #0
 800d564:	d004      	beq.n	800d570 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	3318      	adds	r3, #24
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7fe ff90 	bl	800c490 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d574:	4b25      	ldr	r3, [pc, #148]	; (800d60c <xTaskIncrementTick+0x160>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d903      	bls.n	800d584 <xTaskIncrementTick+0xd8>
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d580:	4a22      	ldr	r2, [pc, #136]	; (800d60c <xTaskIncrementTick+0x160>)
 800d582:	6013      	str	r3, [r2, #0]
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d588:	4613      	mov	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	4413      	add	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4a1f      	ldr	r2, [pc, #124]	; (800d610 <xTaskIncrementTick+0x164>)
 800d592:	441a      	add	r2, r3
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	3304      	adds	r3, #4
 800d598:	4619      	mov	r1, r3
 800d59a:	4610      	mov	r0, r2
 800d59c:	f7fe ff1b 	bl	800c3d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a4:	4b1b      	ldr	r3, [pc, #108]	; (800d614 <xTaskIncrementTick+0x168>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d3b8      	bcc.n	800d520 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5b2:	e7b5      	b.n	800d520 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5b4:	4b17      	ldr	r3, [pc, #92]	; (800d614 <xTaskIncrementTick+0x168>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ba:	4915      	ldr	r1, [pc, #84]	; (800d610 <xTaskIncrementTick+0x164>)
 800d5bc:	4613      	mov	r3, r2
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	4413      	add	r3, r2
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	440b      	add	r3, r1
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d901      	bls.n	800d5d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5d0:	4b11      	ldr	r3, [pc, #68]	; (800d618 <xTaskIncrementTick+0x16c>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d007      	beq.n	800d5e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	617b      	str	r3, [r7, #20]
 800d5dc:	e004      	b.n	800d5e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5de:	4b0f      	ldr	r3, [pc, #60]	; (800d61c <xTaskIncrementTick+0x170>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	4a0d      	ldr	r2, [pc, #52]	; (800d61c <xTaskIncrementTick+0x170>)
 800d5e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d5e8:	697b      	ldr	r3, [r7, #20]
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3718      	adds	r7, #24
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	2000135c 	.word	0x2000135c
 800d5f8:	20001338 	.word	0x20001338
 800d5fc:	200012ec 	.word	0x200012ec
 800d600:	200012f0 	.word	0x200012f0
 800d604:	2000134c 	.word	0x2000134c
 800d608:	20001354 	.word	0x20001354
 800d60c:	2000133c 	.word	0x2000133c
 800d610:	20000e64 	.word	0x20000e64
 800d614:	20000e60 	.word	0x20000e60
 800d618:	20001348 	.word	0x20001348
 800d61c:	20001344 	.word	0x20001344

0800d620 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d620:	b480      	push	{r7}
 800d622:	b085      	sub	sp, #20
 800d624:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d626:	4b28      	ldr	r3, [pc, #160]	; (800d6c8 <vTaskSwitchContext+0xa8>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d003      	beq.n	800d636 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d62e:	4b27      	ldr	r3, [pc, #156]	; (800d6cc <vTaskSwitchContext+0xac>)
 800d630:	2201      	movs	r2, #1
 800d632:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d634:	e041      	b.n	800d6ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d636:	4b25      	ldr	r3, [pc, #148]	; (800d6cc <vTaskSwitchContext+0xac>)
 800d638:	2200      	movs	r2, #0
 800d63a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d63c:	4b24      	ldr	r3, [pc, #144]	; (800d6d0 <vTaskSwitchContext+0xb0>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	60fb      	str	r3, [r7, #12]
 800d642:	e010      	b.n	800d666 <vTaskSwitchContext+0x46>
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10a      	bne.n	800d660 <vTaskSwitchContext+0x40>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	607b      	str	r3, [r7, #4]
}
 800d65c:	bf00      	nop
 800d65e:	e7fe      	b.n	800d65e <vTaskSwitchContext+0x3e>
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	3b01      	subs	r3, #1
 800d664:	60fb      	str	r3, [r7, #12]
 800d666:	491b      	ldr	r1, [pc, #108]	; (800d6d4 <vTaskSwitchContext+0xb4>)
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	4613      	mov	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	4413      	add	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	440b      	add	r3, r1
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d0e4      	beq.n	800d644 <vTaskSwitchContext+0x24>
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	4613      	mov	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	4413      	add	r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4a13      	ldr	r2, [pc, #76]	; (800d6d4 <vTaskSwitchContext+0xb4>)
 800d686:	4413      	add	r3, r2
 800d688:	60bb      	str	r3, [r7, #8]
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	685a      	ldr	r2, [r3, #4]
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	605a      	str	r2, [r3, #4]
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	685a      	ldr	r2, [r3, #4]
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	3308      	adds	r3, #8
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d104      	bne.n	800d6aa <vTaskSwitchContext+0x8a>
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	685a      	ldr	r2, [r3, #4]
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	605a      	str	r2, [r3, #4]
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	4a09      	ldr	r2, [pc, #36]	; (800d6d8 <vTaskSwitchContext+0xb8>)
 800d6b2:	6013      	str	r3, [r2, #0]
 800d6b4:	4a06      	ldr	r2, [pc, #24]	; (800d6d0 <vTaskSwitchContext+0xb0>)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6013      	str	r3, [r2, #0]
}
 800d6ba:	bf00      	nop
 800d6bc:	3714      	adds	r7, #20
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr
 800d6c6:	bf00      	nop
 800d6c8:	2000135c 	.word	0x2000135c
 800d6cc:	20001348 	.word	0x20001348
 800d6d0:	2000133c 	.word	0x2000133c
 800d6d4:	20000e64 	.word	0x20000e64
 800d6d8:	20000e60 	.word	0x20000e60

0800d6dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10a      	bne.n	800d702 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	60fb      	str	r3, [r7, #12]
}
 800d6fe:	bf00      	nop
 800d700:	e7fe      	b.n	800d700 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d702:	4b07      	ldr	r3, [pc, #28]	; (800d720 <vTaskPlaceOnEventList+0x44>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	3318      	adds	r3, #24
 800d708:	4619      	mov	r1, r3
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7fe fe87 	bl	800c41e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d710:	2101      	movs	r1, #1
 800d712:	6838      	ldr	r0, [r7, #0]
 800d714:	f000 fa7c 	bl	800dc10 <prvAddCurrentTaskToDelayedList>
}
 800d718:	bf00      	nop
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	20000e60 	.word	0x20000e60

0800d724 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d10a      	bne.n	800d74c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73a:	f383 8811 	msr	BASEPRI, r3
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	617b      	str	r3, [r7, #20]
}
 800d748:	bf00      	nop
 800d74a:	e7fe      	b.n	800d74a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d74c:	4b0a      	ldr	r3, [pc, #40]	; (800d778 <vTaskPlaceOnEventListRestricted+0x54>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	3318      	adds	r3, #24
 800d752:	4619      	mov	r1, r3
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f7fe fe3e 	bl	800c3d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d760:	f04f 33ff 	mov.w	r3, #4294967295
 800d764:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d766:	6879      	ldr	r1, [r7, #4]
 800d768:	68b8      	ldr	r0, [r7, #8]
 800d76a:	f000 fa51 	bl	800dc10 <prvAddCurrentTaskToDelayedList>
	}
 800d76e:	bf00      	nop
 800d770:	3718      	adds	r7, #24
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	20000e60 	.word	0x20000e60

0800d77c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d10a      	bne.n	800d7a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d796:	f383 8811 	msr	BASEPRI, r3
 800d79a:	f3bf 8f6f 	isb	sy
 800d79e:	f3bf 8f4f 	dsb	sy
 800d7a2:	60fb      	str	r3, [r7, #12]
}
 800d7a4:	bf00      	nop
 800d7a6:	e7fe      	b.n	800d7a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	3318      	adds	r3, #24
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fe fe6f 	bl	800c490 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7b2:	4b1e      	ldr	r3, [pc, #120]	; (800d82c <xTaskRemoveFromEventList+0xb0>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d11d      	bne.n	800d7f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	3304      	adds	r3, #4
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fe fe66 	bl	800c490 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c8:	4b19      	ldr	r3, [pc, #100]	; (800d830 <xTaskRemoveFromEventList+0xb4>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d903      	bls.n	800d7d8 <xTaskRemoveFromEventList+0x5c>
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d4:	4a16      	ldr	r2, [pc, #88]	; (800d830 <xTaskRemoveFromEventList+0xb4>)
 800d7d6:	6013      	str	r3, [r2, #0]
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7dc:	4613      	mov	r3, r2
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	4413      	add	r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4a13      	ldr	r2, [pc, #76]	; (800d834 <xTaskRemoveFromEventList+0xb8>)
 800d7e6:	441a      	add	r2, r3
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	4610      	mov	r0, r2
 800d7f0:	f7fe fdf1 	bl	800c3d6 <vListInsertEnd>
 800d7f4:	e005      	b.n	800d802 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	3318      	adds	r3, #24
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	480e      	ldr	r0, [pc, #56]	; (800d838 <xTaskRemoveFromEventList+0xbc>)
 800d7fe:	f7fe fdea 	bl	800c3d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d806:	4b0d      	ldr	r3, [pc, #52]	; (800d83c <xTaskRemoveFromEventList+0xc0>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d905      	bls.n	800d81c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d810:	2301      	movs	r3, #1
 800d812:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d814:	4b0a      	ldr	r3, [pc, #40]	; (800d840 <xTaskRemoveFromEventList+0xc4>)
 800d816:	2201      	movs	r2, #1
 800d818:	601a      	str	r2, [r3, #0]
 800d81a:	e001      	b.n	800d820 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d81c:	2300      	movs	r3, #0
 800d81e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d820:	697b      	ldr	r3, [r7, #20]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3718      	adds	r7, #24
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	2000135c 	.word	0x2000135c
 800d830:	2000133c 	.word	0x2000133c
 800d834:	20000e64 	.word	0x20000e64
 800d838:	200012f4 	.word	0x200012f4
 800d83c:	20000e60 	.word	0x20000e60
 800d840:	20001348 	.word	0x20001348

0800d844 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d84c:	4b06      	ldr	r3, [pc, #24]	; (800d868 <vTaskInternalSetTimeOutState+0x24>)
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d854:	4b05      	ldr	r3, [pc, #20]	; (800d86c <vTaskInternalSetTimeOutState+0x28>)
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	605a      	str	r2, [r3, #4]
}
 800d85c:	bf00      	nop
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	2000134c 	.word	0x2000134c
 800d86c:	20001338 	.word	0x20001338

0800d870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b088      	sub	sp, #32
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10a      	bne.n	800d896 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	613b      	str	r3, [r7, #16]
}
 800d892:	bf00      	nop
 800d894:	e7fe      	b.n	800d894 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10a      	bne.n	800d8b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	60fb      	str	r3, [r7, #12]
}
 800d8ae:	bf00      	nop
 800d8b0:	e7fe      	b.n	800d8b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d8b2:	f000 fe7f 	bl	800e5b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8b6:	4b1d      	ldr	r3, [pc, #116]	; (800d92c <xTaskCheckForTimeOut+0xbc>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	69ba      	ldr	r2, [r7, #24]
 800d8c2:	1ad3      	subs	r3, r2, r3
 800d8c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ce:	d102      	bne.n	800d8d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	61fb      	str	r3, [r7, #28]
 800d8d4:	e023      	b.n	800d91e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	4b15      	ldr	r3, [pc, #84]	; (800d930 <xTaskCheckForTimeOut+0xc0>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d007      	beq.n	800d8f2 <xTaskCheckForTimeOut+0x82>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	69ba      	ldr	r2, [r7, #24]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d302      	bcc.n	800d8f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	61fb      	str	r3, [r7, #28]
 800d8f0:	e015      	b.n	800d91e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	697a      	ldr	r2, [r7, #20]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d20b      	bcs.n	800d914 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	1ad2      	subs	r2, r2, r3
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7ff ff9b 	bl	800d844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d90e:	2300      	movs	r3, #0
 800d910:	61fb      	str	r3, [r7, #28]
 800d912:	e004      	b.n	800d91e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2200      	movs	r2, #0
 800d918:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d91a:	2301      	movs	r3, #1
 800d91c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d91e:	f000 fe79 	bl	800e614 <vPortExitCritical>

	return xReturn;
 800d922:	69fb      	ldr	r3, [r7, #28]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3720      	adds	r7, #32
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	20001338 	.word	0x20001338
 800d930:	2000134c 	.word	0x2000134c

0800d934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d934:	b480      	push	{r7}
 800d936:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d938:	4b03      	ldr	r3, [pc, #12]	; (800d948 <vTaskMissedYield+0x14>)
 800d93a:	2201      	movs	r2, #1
 800d93c:	601a      	str	r2, [r3, #0]
}
 800d93e:	bf00      	nop
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr
 800d948:	20001348 	.word	0x20001348

0800d94c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d954:	f000 f852 	bl	800d9fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d958:	4b06      	ldr	r3, [pc, #24]	; (800d974 <prvIdleTask+0x28>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d9f9      	bls.n	800d954 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d960:	4b05      	ldr	r3, [pc, #20]	; (800d978 <prvIdleTask+0x2c>)
 800d962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d966:	601a      	str	r2, [r3, #0]
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d970:	e7f0      	b.n	800d954 <prvIdleTask+0x8>
 800d972:	bf00      	nop
 800d974:	20000e64 	.word	0x20000e64
 800d978:	e000ed04 	.word	0xe000ed04

0800d97c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d982:	2300      	movs	r3, #0
 800d984:	607b      	str	r3, [r7, #4]
 800d986:	e00c      	b.n	800d9a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	4613      	mov	r3, r2
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	4413      	add	r3, r2
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	4a12      	ldr	r2, [pc, #72]	; (800d9dc <prvInitialiseTaskLists+0x60>)
 800d994:	4413      	add	r3, r2
 800d996:	4618      	mov	r0, r3
 800d998:	f7fe fcf0 	bl	800c37c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	607b      	str	r3, [r7, #4]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2b37      	cmp	r3, #55	; 0x37
 800d9a6:	d9ef      	bls.n	800d988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9a8:	480d      	ldr	r0, [pc, #52]	; (800d9e0 <prvInitialiseTaskLists+0x64>)
 800d9aa:	f7fe fce7 	bl	800c37c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9ae:	480d      	ldr	r0, [pc, #52]	; (800d9e4 <prvInitialiseTaskLists+0x68>)
 800d9b0:	f7fe fce4 	bl	800c37c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9b4:	480c      	ldr	r0, [pc, #48]	; (800d9e8 <prvInitialiseTaskLists+0x6c>)
 800d9b6:	f7fe fce1 	bl	800c37c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9ba:	480c      	ldr	r0, [pc, #48]	; (800d9ec <prvInitialiseTaskLists+0x70>)
 800d9bc:	f7fe fcde 	bl	800c37c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9c0:	480b      	ldr	r0, [pc, #44]	; (800d9f0 <prvInitialiseTaskLists+0x74>)
 800d9c2:	f7fe fcdb 	bl	800c37c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9c6:	4b0b      	ldr	r3, [pc, #44]	; (800d9f4 <prvInitialiseTaskLists+0x78>)
 800d9c8:	4a05      	ldr	r2, [pc, #20]	; (800d9e0 <prvInitialiseTaskLists+0x64>)
 800d9ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9cc:	4b0a      	ldr	r3, [pc, #40]	; (800d9f8 <prvInitialiseTaskLists+0x7c>)
 800d9ce:	4a05      	ldr	r2, [pc, #20]	; (800d9e4 <prvInitialiseTaskLists+0x68>)
 800d9d0:	601a      	str	r2, [r3, #0]
}
 800d9d2:	bf00      	nop
 800d9d4:	3708      	adds	r7, #8
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	20000e64 	.word	0x20000e64
 800d9e0:	200012c4 	.word	0x200012c4
 800d9e4:	200012d8 	.word	0x200012d8
 800d9e8:	200012f4 	.word	0x200012f4
 800d9ec:	20001308 	.word	0x20001308
 800d9f0:	20001320 	.word	0x20001320
 800d9f4:	200012ec 	.word	0x200012ec
 800d9f8:	200012f0 	.word	0x200012f0

0800d9fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da02:	e019      	b.n	800da38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da04:	f000 fdd6 	bl	800e5b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da08:	4b10      	ldr	r3, [pc, #64]	; (800da4c <prvCheckTasksWaitingTermination+0x50>)
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	3304      	adds	r3, #4
 800da14:	4618      	mov	r0, r3
 800da16:	f7fe fd3b 	bl	800c490 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da1a:	4b0d      	ldr	r3, [pc, #52]	; (800da50 <prvCheckTasksWaitingTermination+0x54>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	3b01      	subs	r3, #1
 800da20:	4a0b      	ldr	r2, [pc, #44]	; (800da50 <prvCheckTasksWaitingTermination+0x54>)
 800da22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da24:	4b0b      	ldr	r3, [pc, #44]	; (800da54 <prvCheckTasksWaitingTermination+0x58>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	3b01      	subs	r3, #1
 800da2a:	4a0a      	ldr	r2, [pc, #40]	; (800da54 <prvCheckTasksWaitingTermination+0x58>)
 800da2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da2e:	f000 fdf1 	bl	800e614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f810 	bl	800da58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da38:	4b06      	ldr	r3, [pc, #24]	; (800da54 <prvCheckTasksWaitingTermination+0x58>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d1e1      	bne.n	800da04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da40:	bf00      	nop
 800da42:	bf00      	nop
 800da44:	3708      	adds	r7, #8
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	20001308 	.word	0x20001308
 800da50:	20001334 	.word	0x20001334
 800da54:	2000131c 	.word	0x2000131c

0800da58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da66:	2b00      	cmp	r3, #0
 800da68:	d108      	bne.n	800da7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da6e:	4618      	mov	r0, r3
 800da70:	f000 ff8e 	bl	800e990 <vPortFree>
				vPortFree( pxTCB );
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 ff8b 	bl	800e990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da7a:	e018      	b.n	800daae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da82:	2b01      	cmp	r3, #1
 800da84:	d103      	bne.n	800da8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 ff82 	bl	800e990 <vPortFree>
	}
 800da8c:	e00f      	b.n	800daae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da94:	2b02      	cmp	r3, #2
 800da96:	d00a      	beq.n	800daae <prvDeleteTCB+0x56>
	__asm volatile
 800da98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9c:	f383 8811 	msr	BASEPRI, r3
 800daa0:	f3bf 8f6f 	isb	sy
 800daa4:	f3bf 8f4f 	dsb	sy
 800daa8:	60fb      	str	r3, [r7, #12]
}
 800daaa:	bf00      	nop
 800daac:	e7fe      	b.n	800daac <prvDeleteTCB+0x54>
	}
 800daae:	bf00      	nop
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
	...

0800dab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dab8:	b480      	push	{r7}
 800daba:	b083      	sub	sp, #12
 800dabc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dabe:	4b0c      	ldr	r3, [pc, #48]	; (800daf0 <prvResetNextTaskUnblockTime+0x38>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d104      	bne.n	800dad2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dac8:	4b0a      	ldr	r3, [pc, #40]	; (800daf4 <prvResetNextTaskUnblockTime+0x3c>)
 800daca:	f04f 32ff 	mov.w	r2, #4294967295
 800dace:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dad0:	e008      	b.n	800dae4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dad2:	4b07      	ldr	r3, [pc, #28]	; (800daf0 <prvResetNextTaskUnblockTime+0x38>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	4a04      	ldr	r2, [pc, #16]	; (800daf4 <prvResetNextTaskUnblockTime+0x3c>)
 800dae2:	6013      	str	r3, [r2, #0]
}
 800dae4:	bf00      	nop
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	200012ec 	.word	0x200012ec
 800daf4:	20001354 	.word	0x20001354

0800daf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800daf8:	b480      	push	{r7}
 800dafa:	b083      	sub	sp, #12
 800dafc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dafe:	4b0b      	ldr	r3, [pc, #44]	; (800db2c <xTaskGetSchedulerState+0x34>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d102      	bne.n	800db0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db06:	2301      	movs	r3, #1
 800db08:	607b      	str	r3, [r7, #4]
 800db0a:	e008      	b.n	800db1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db0c:	4b08      	ldr	r3, [pc, #32]	; (800db30 <xTaskGetSchedulerState+0x38>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d102      	bne.n	800db1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db14:	2302      	movs	r3, #2
 800db16:	607b      	str	r3, [r7, #4]
 800db18:	e001      	b.n	800db1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db1a:	2300      	movs	r3, #0
 800db1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db1e:	687b      	ldr	r3, [r7, #4]
	}
 800db20:	4618      	mov	r0, r3
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr
 800db2c:	20001340 	.word	0x20001340
 800db30:	2000135c 	.word	0x2000135c

0800db34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db40:	2300      	movs	r3, #0
 800db42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d056      	beq.n	800dbf8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db4a:	4b2e      	ldr	r3, [pc, #184]	; (800dc04 <xTaskPriorityDisinherit+0xd0>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	693a      	ldr	r2, [r7, #16]
 800db50:	429a      	cmp	r2, r3
 800db52:	d00a      	beq.n	800db6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800db54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db58:	f383 8811 	msr	BASEPRI, r3
 800db5c:	f3bf 8f6f 	isb	sy
 800db60:	f3bf 8f4f 	dsb	sy
 800db64:	60fb      	str	r3, [r7, #12]
}
 800db66:	bf00      	nop
 800db68:	e7fe      	b.n	800db68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10a      	bne.n	800db88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	60bb      	str	r3, [r7, #8]
}
 800db84:	bf00      	nop
 800db86:	e7fe      	b.n	800db86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db8c:	1e5a      	subs	r2, r3, #1
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d02c      	beq.n	800dbf8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d128      	bne.n	800dbf8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	3304      	adds	r3, #4
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fe fc70 	bl	800c490 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc8:	4b0f      	ldr	r3, [pc, #60]	; (800dc08 <xTaskPriorityDisinherit+0xd4>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d903      	bls.n	800dbd8 <xTaskPriorityDisinherit+0xa4>
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd4:	4a0c      	ldr	r2, [pc, #48]	; (800dc08 <xTaskPriorityDisinherit+0xd4>)
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbdc:	4613      	mov	r3, r2
 800dbde:	009b      	lsls	r3, r3, #2
 800dbe0:	4413      	add	r3, r2
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	4a09      	ldr	r2, [pc, #36]	; (800dc0c <xTaskPriorityDisinherit+0xd8>)
 800dbe6:	441a      	add	r2, r3
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	3304      	adds	r3, #4
 800dbec:	4619      	mov	r1, r3
 800dbee:	4610      	mov	r0, r2
 800dbf0:	f7fe fbf1 	bl	800c3d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbf8:	697b      	ldr	r3, [r7, #20]
	}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3718      	adds	r7, #24
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	20000e60 	.word	0x20000e60
 800dc08:	2000133c 	.word	0x2000133c
 800dc0c:	20000e64 	.word	0x20000e64

0800dc10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc1a:	4b21      	ldr	r3, [pc, #132]	; (800dca0 <prvAddCurrentTaskToDelayedList+0x90>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc20:	4b20      	ldr	r3, [pc, #128]	; (800dca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3304      	adds	r3, #4
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7fe fc32 	bl	800c490 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc32:	d10a      	bne.n	800dc4a <prvAddCurrentTaskToDelayedList+0x3a>
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d007      	beq.n	800dc4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc3a:	4b1a      	ldr	r3, [pc, #104]	; (800dca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	3304      	adds	r3, #4
 800dc40:	4619      	mov	r1, r3
 800dc42:	4819      	ldr	r0, [pc, #100]	; (800dca8 <prvAddCurrentTaskToDelayedList+0x98>)
 800dc44:	f7fe fbc7 	bl	800c3d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc48:	e026      	b.n	800dc98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc4a:	68fa      	ldr	r2, [r7, #12]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4413      	add	r3, r2
 800dc50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc52:	4b14      	ldr	r3, [pc, #80]	; (800dca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	68ba      	ldr	r2, [r7, #8]
 800dc58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc5a:	68ba      	ldr	r2, [r7, #8]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d209      	bcs.n	800dc76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc62:	4b12      	ldr	r3, [pc, #72]	; (800dcac <prvAddCurrentTaskToDelayedList+0x9c>)
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	4b0f      	ldr	r3, [pc, #60]	; (800dca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	4610      	mov	r0, r2
 800dc70:	f7fe fbd5 	bl	800c41e <vListInsert>
}
 800dc74:	e010      	b.n	800dc98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc76:	4b0e      	ldr	r3, [pc, #56]	; (800dcb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	4b0a      	ldr	r3, [pc, #40]	; (800dca4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	3304      	adds	r3, #4
 800dc80:	4619      	mov	r1, r3
 800dc82:	4610      	mov	r0, r2
 800dc84:	f7fe fbcb 	bl	800c41e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc88:	4b0a      	ldr	r3, [pc, #40]	; (800dcb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d202      	bcs.n	800dc98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dc92:	4a08      	ldr	r2, [pc, #32]	; (800dcb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	6013      	str	r3, [r2, #0]
}
 800dc98:	bf00      	nop
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	20001338 	.word	0x20001338
 800dca4:	20000e60 	.word	0x20000e60
 800dca8:	20001320 	.word	0x20001320
 800dcac:	200012f0 	.word	0x200012f0
 800dcb0:	200012ec 	.word	0x200012ec
 800dcb4:	20001354 	.word	0x20001354

0800dcb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b08a      	sub	sp, #40	; 0x28
 800dcbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dcc2:	f000 fb07 	bl	800e2d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dcc6:	4b1c      	ldr	r3, [pc, #112]	; (800dd38 <xTimerCreateTimerTask+0x80>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d021      	beq.n	800dd12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dcd6:	1d3a      	adds	r2, r7, #4
 800dcd8:	f107 0108 	add.w	r1, r7, #8
 800dcdc:	f107 030c 	add.w	r3, r7, #12
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fe fb31 	bl	800c348 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dce6:	6879      	ldr	r1, [r7, #4]
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	9202      	str	r2, [sp, #8]
 800dcee:	9301      	str	r3, [sp, #4]
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	460a      	mov	r2, r1
 800dcf8:	4910      	ldr	r1, [pc, #64]	; (800dd3c <xTimerCreateTimerTask+0x84>)
 800dcfa:	4811      	ldr	r0, [pc, #68]	; (800dd40 <xTimerCreateTimerTask+0x88>)
 800dcfc:	f7ff f8de 	bl	800cebc <xTaskCreateStatic>
 800dd00:	4603      	mov	r3, r0
 800dd02:	4a10      	ldr	r2, [pc, #64]	; (800dd44 <xTimerCreateTimerTask+0x8c>)
 800dd04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd06:	4b0f      	ldr	r3, [pc, #60]	; (800dd44 <xTimerCreateTimerTask+0x8c>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d001      	beq.n	800dd12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d10a      	bne.n	800dd2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1c:	f383 8811 	msr	BASEPRI, r3
 800dd20:	f3bf 8f6f 	isb	sy
 800dd24:	f3bf 8f4f 	dsb	sy
 800dd28:	613b      	str	r3, [r7, #16]
}
 800dd2a:	bf00      	nop
 800dd2c:	e7fe      	b.n	800dd2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dd2e:	697b      	ldr	r3, [r7, #20]
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3718      	adds	r7, #24
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	20001390 	.word	0x20001390
 800dd3c:	08012358 	.word	0x08012358
 800dd40:	0800de7d 	.word	0x0800de7d
 800dd44:	20001394 	.word	0x20001394

0800dd48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b08a      	sub	sp, #40	; 0x28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
 800dd54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd56:	2300      	movs	r3, #0
 800dd58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d10a      	bne.n	800dd76 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd64:	f383 8811 	msr	BASEPRI, r3
 800dd68:	f3bf 8f6f 	isb	sy
 800dd6c:	f3bf 8f4f 	dsb	sy
 800dd70:	623b      	str	r3, [r7, #32]
}
 800dd72:	bf00      	nop
 800dd74:	e7fe      	b.n	800dd74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd76:	4b1a      	ldr	r3, [pc, #104]	; (800dde0 <xTimerGenericCommand+0x98>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d02a      	beq.n	800ddd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	2b05      	cmp	r3, #5
 800dd8e:	dc18      	bgt.n	800ddc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dd90:	f7ff feb2 	bl	800daf8 <xTaskGetSchedulerState>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	d109      	bne.n	800ddae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dd9a:	4b11      	ldr	r3, [pc, #68]	; (800dde0 <xTimerGenericCommand+0x98>)
 800dd9c:	6818      	ldr	r0, [r3, #0]
 800dd9e:	f107 0110 	add.w	r1, r7, #16
 800dda2:	2300      	movs	r3, #0
 800dda4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dda6:	f7fe fca1 	bl	800c6ec <xQueueGenericSend>
 800ddaa:	6278      	str	r0, [r7, #36]	; 0x24
 800ddac:	e012      	b.n	800ddd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddae:	4b0c      	ldr	r3, [pc, #48]	; (800dde0 <xTimerGenericCommand+0x98>)
 800ddb0:	6818      	ldr	r0, [r3, #0]
 800ddb2:	f107 0110 	add.w	r1, r7, #16
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f7fe fc97 	bl	800c6ec <xQueueGenericSend>
 800ddbe:	6278      	str	r0, [r7, #36]	; 0x24
 800ddc0:	e008      	b.n	800ddd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ddc2:	4b07      	ldr	r3, [pc, #28]	; (800dde0 <xTimerGenericCommand+0x98>)
 800ddc4:	6818      	ldr	r0, [r3, #0]
 800ddc6:	f107 0110 	add.w	r1, r7, #16
 800ddca:	2300      	movs	r3, #0
 800ddcc:	683a      	ldr	r2, [r7, #0]
 800ddce:	f7fe fd8b 	bl	800c8e8 <xQueueGenericSendFromISR>
 800ddd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3728      	adds	r7, #40	; 0x28
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	20001390 	.word	0x20001390

0800dde4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b088      	sub	sp, #32
 800dde8:	af02      	add	r7, sp, #8
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddee:	4b22      	ldr	r3, [pc, #136]	; (800de78 <prvProcessExpiredTimer+0x94>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fe fb47 	bl	800c490 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de08:	f003 0304 	and.w	r3, r3, #4
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d022      	beq.n	800de56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	699a      	ldr	r2, [r3, #24]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	18d1      	adds	r1, r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	683a      	ldr	r2, [r7, #0]
 800de1c:	6978      	ldr	r0, [r7, #20]
 800de1e:	f000 f8d1 	bl	800dfc4 <prvInsertTimerInActiveList>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d01f      	beq.n	800de68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de28:	2300      	movs	r3, #0
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	2300      	movs	r3, #0
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	2100      	movs	r1, #0
 800de32:	6978      	ldr	r0, [r7, #20]
 800de34:	f7ff ff88 	bl	800dd48 <xTimerGenericCommand>
 800de38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d113      	bne.n	800de68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800de40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de44:	f383 8811 	msr	BASEPRI, r3
 800de48:	f3bf 8f6f 	isb	sy
 800de4c:	f3bf 8f4f 	dsb	sy
 800de50:	60fb      	str	r3, [r7, #12]
}
 800de52:	bf00      	nop
 800de54:	e7fe      	b.n	800de54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de5c:	f023 0301 	bic.w	r3, r3, #1
 800de60:	b2da      	uxtb	r2, r3
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	6a1b      	ldr	r3, [r3, #32]
 800de6c:	6978      	ldr	r0, [r7, #20]
 800de6e:	4798      	blx	r3
}
 800de70:	bf00      	nop
 800de72:	3718      	adds	r7, #24
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	20001388 	.word	0x20001388

0800de7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de84:	f107 0308 	add.w	r3, r7, #8
 800de88:	4618      	mov	r0, r3
 800de8a:	f000 f857 	bl	800df3c <prvGetNextExpireTime>
 800de8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	4619      	mov	r1, r3
 800de94:	68f8      	ldr	r0, [r7, #12]
 800de96:	f000 f803 	bl	800dea0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800de9a:	f000 f8d5 	bl	800e048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de9e:	e7f1      	b.n	800de84 <prvTimerTask+0x8>

0800dea0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800deaa:	f7ff fa43 	bl	800d334 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800deae:	f107 0308 	add.w	r3, r7, #8
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 f866 	bl	800df84 <prvSampleTimeNow>
 800deb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d130      	bne.n	800df22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d10a      	bne.n	800dedc <prvProcessTimerOrBlockTask+0x3c>
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	429a      	cmp	r2, r3
 800decc:	d806      	bhi.n	800dedc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dece:	f7ff fa3f 	bl	800d350 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ded2:	68f9      	ldr	r1, [r7, #12]
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7ff ff85 	bl	800dde4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800deda:	e024      	b.n	800df26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d008      	beq.n	800def4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dee2:	4b13      	ldr	r3, [pc, #76]	; (800df30 <prvProcessTimerOrBlockTask+0x90>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d101      	bne.n	800def0 <prvProcessTimerOrBlockTask+0x50>
 800deec:	2301      	movs	r3, #1
 800deee:	e000      	b.n	800def2 <prvProcessTimerOrBlockTask+0x52>
 800def0:	2300      	movs	r3, #0
 800def2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800def4:	4b0f      	ldr	r3, [pc, #60]	; (800df34 <prvProcessTimerOrBlockTask+0x94>)
 800def6:	6818      	ldr	r0, [r3, #0]
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	683a      	ldr	r2, [r7, #0]
 800df00:	4619      	mov	r1, r3
 800df02:	f7fe ffa7 	bl	800ce54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df06:	f7ff fa23 	bl	800d350 <xTaskResumeAll>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10a      	bne.n	800df26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df10:	4b09      	ldr	r3, [pc, #36]	; (800df38 <prvProcessTimerOrBlockTask+0x98>)
 800df12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df16:	601a      	str	r2, [r3, #0]
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	f3bf 8f6f 	isb	sy
}
 800df20:	e001      	b.n	800df26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df22:	f7ff fa15 	bl	800d350 <xTaskResumeAll>
}
 800df26:	bf00      	nop
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	2000138c 	.word	0x2000138c
 800df34:	20001390 	.word	0x20001390
 800df38:	e000ed04 	.word	0xe000ed04

0800df3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df3c:	b480      	push	{r7}
 800df3e:	b085      	sub	sp, #20
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df44:	4b0e      	ldr	r3, [pc, #56]	; (800df80 <prvGetNextExpireTime+0x44>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <prvGetNextExpireTime+0x16>
 800df4e:	2201      	movs	r2, #1
 800df50:	e000      	b.n	800df54 <prvGetNextExpireTime+0x18>
 800df52:	2200      	movs	r2, #0
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d105      	bne.n	800df6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df60:	4b07      	ldr	r3, [pc, #28]	; (800df80 <prvGetNextExpireTime+0x44>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	60fb      	str	r3, [r7, #12]
 800df6a:	e001      	b.n	800df70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df6c:	2300      	movs	r3, #0
 800df6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df70:	68fb      	ldr	r3, [r7, #12]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3714      	adds	r7, #20
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	20001388 	.word	0x20001388

0800df84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800df8c:	f7ff fa7e 	bl	800d48c <xTaskGetTickCount>
 800df90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800df92:	4b0b      	ldr	r3, [pc, #44]	; (800dfc0 <prvSampleTimeNow+0x3c>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68fa      	ldr	r2, [r7, #12]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d205      	bcs.n	800dfa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800df9c:	f000 f936 	bl	800e20c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	e002      	b.n	800dfae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dfae:	4a04      	ldr	r2, [pc, #16]	; (800dfc0 <prvSampleTimeNow+0x3c>)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3710      	adds	r7, #16
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	20001398 	.word	0x20001398

0800dfc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
 800dfd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	68fa      	ldr	r2, [r7, #12]
 800dfe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dfe2:	68ba      	ldr	r2, [r7, #8]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d812      	bhi.n	800e010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	1ad2      	subs	r2, r2, r3
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	699b      	ldr	r3, [r3, #24]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d302      	bcc.n	800dffe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dff8:	2301      	movs	r3, #1
 800dffa:	617b      	str	r3, [r7, #20]
 800dffc:	e01b      	b.n	800e036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dffe:	4b10      	ldr	r3, [pc, #64]	; (800e040 <prvInsertTimerInActiveList+0x7c>)
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	3304      	adds	r3, #4
 800e006:	4619      	mov	r1, r3
 800e008:	4610      	mov	r0, r2
 800e00a:	f7fe fa08 	bl	800c41e <vListInsert>
 800e00e:	e012      	b.n	800e036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	429a      	cmp	r2, r3
 800e016:	d206      	bcs.n	800e026 <prvInsertTimerInActiveList+0x62>
 800e018:	68ba      	ldr	r2, [r7, #8]
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d302      	bcc.n	800e026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e020:	2301      	movs	r3, #1
 800e022:	617b      	str	r3, [r7, #20]
 800e024:	e007      	b.n	800e036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e026:	4b07      	ldr	r3, [pc, #28]	; (800e044 <prvInsertTimerInActiveList+0x80>)
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	3304      	adds	r3, #4
 800e02e:	4619      	mov	r1, r3
 800e030:	4610      	mov	r0, r2
 800e032:	f7fe f9f4 	bl	800c41e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e036:	697b      	ldr	r3, [r7, #20]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3718      	adds	r7, #24
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	2000138c 	.word	0x2000138c
 800e044:	20001388 	.word	0x20001388

0800e048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b08e      	sub	sp, #56	; 0x38
 800e04c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e04e:	e0ca      	b.n	800e1e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	da18      	bge.n	800e088 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e056:	1d3b      	adds	r3, r7, #4
 800e058:	3304      	adds	r3, #4
 800e05a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10a      	bne.n	800e078 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	61fb      	str	r3, [r7, #28]
}
 800e074:	bf00      	nop
 800e076:	e7fe      	b.n	800e076 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e07e:	6850      	ldr	r0, [r2, #4]
 800e080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e082:	6892      	ldr	r2, [r2, #8]
 800e084:	4611      	mov	r1, r2
 800e086:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f2c0 80ab 	blt.w	800e1e6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e096:	695b      	ldr	r3, [r3, #20]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d004      	beq.n	800e0a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09e:	3304      	adds	r3, #4
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7fe f9f5 	bl	800c490 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0a6:	463b      	mov	r3, r7
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7ff ff6b 	bl	800df84 <prvSampleTimeNow>
 800e0ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2b09      	cmp	r3, #9
 800e0b4:	f200 8096 	bhi.w	800e1e4 <prvProcessReceivedCommands+0x19c>
 800e0b8:	a201      	add	r2, pc, #4	; (adr r2, 800e0c0 <prvProcessReceivedCommands+0x78>)
 800e0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0be:	bf00      	nop
 800e0c0:	0800e0e9 	.word	0x0800e0e9
 800e0c4:	0800e0e9 	.word	0x0800e0e9
 800e0c8:	0800e0e9 	.word	0x0800e0e9
 800e0cc:	0800e15d 	.word	0x0800e15d
 800e0d0:	0800e171 	.word	0x0800e171
 800e0d4:	0800e1bb 	.word	0x0800e1bb
 800e0d8:	0800e0e9 	.word	0x0800e0e9
 800e0dc:	0800e0e9 	.word	0x0800e0e9
 800e0e0:	0800e15d 	.word	0x0800e15d
 800e0e4:	0800e171 	.word	0x0800e171
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0ee:	f043 0301 	orr.w	r3, r3, #1
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e0fa:	68ba      	ldr	r2, [r7, #8]
 800e0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fe:	699b      	ldr	r3, [r3, #24]
 800e100:	18d1      	adds	r1, r2, r3
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e108:	f7ff ff5c 	bl	800dfc4 <prvInsertTimerInActiveList>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d069      	beq.n	800e1e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e114:	6a1b      	ldr	r3, [r3, #32]
 800e116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e118:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e120:	f003 0304 	and.w	r3, r3, #4
 800e124:	2b00      	cmp	r3, #0
 800e126:	d05e      	beq.n	800e1e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	699b      	ldr	r3, [r3, #24]
 800e12e:	441a      	add	r2, r3
 800e130:	2300      	movs	r3, #0
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	2300      	movs	r3, #0
 800e136:	2100      	movs	r1, #0
 800e138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e13a:	f7ff fe05 	bl	800dd48 <xTimerGenericCommand>
 800e13e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e140:	6a3b      	ldr	r3, [r7, #32]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d14f      	bne.n	800e1e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14a:	f383 8811 	msr	BASEPRI, r3
 800e14e:	f3bf 8f6f 	isb	sy
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	61bb      	str	r3, [r7, #24]
}
 800e158:	bf00      	nop
 800e15a:	e7fe      	b.n	800e15a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e162:	f023 0301 	bic.w	r3, r3, #1
 800e166:	b2da      	uxtb	r2, r3
 800e168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e16e:	e03a      	b.n	800e1e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e176:	f043 0301 	orr.w	r3, r3, #1
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e186:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18a:	699b      	ldr	r3, [r3, #24]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d10a      	bne.n	800e1a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	617b      	str	r3, [r7, #20]
}
 800e1a2:	bf00      	nop
 800e1a4:	e7fe      	b.n	800e1a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a8:	699a      	ldr	r2, [r3, #24]
 800e1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ac:	18d1      	adds	r1, r2, r3
 800e1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1b4:	f7ff ff06 	bl	800dfc4 <prvInsertTimerInActiveList>
					break;
 800e1b8:	e015      	b.n	800e1e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1c0:	f003 0302 	and.w	r3, r3, #2
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d103      	bne.n	800e1d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1ca:	f000 fbe1 	bl	800e990 <vPortFree>
 800e1ce:	e00a      	b.n	800e1e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1d6:	f023 0301 	bic.w	r3, r3, #1
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e1e2:	e000      	b.n	800e1e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e1e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1e6:	4b08      	ldr	r3, [pc, #32]	; (800e208 <prvProcessReceivedCommands+0x1c0>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	1d39      	adds	r1, r7, #4
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe fc16 	bl	800ca20 <xQueueReceive>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f47f af2a 	bne.w	800e050 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e1fc:	bf00      	nop
 800e1fe:	bf00      	nop
 800e200:	3730      	adds	r7, #48	; 0x30
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	20001390 	.word	0x20001390

0800e20c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b088      	sub	sp, #32
 800e210:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e212:	e048      	b.n	800e2a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e214:	4b2d      	ldr	r3, [pc, #180]	; (800e2cc <prvSwitchTimerLists+0xc0>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e21e:	4b2b      	ldr	r3, [pc, #172]	; (800e2cc <prvSwitchTimerLists+0xc0>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	3304      	adds	r3, #4
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fe f92f 	bl	800c490 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	6a1b      	ldr	r3, [r3, #32]
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e240:	f003 0304 	and.w	r3, r3, #4
 800e244:	2b00      	cmp	r3, #0
 800e246:	d02e      	beq.n	800e2a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	699b      	ldr	r3, [r3, #24]
 800e24c:	693a      	ldr	r2, [r7, #16]
 800e24e:	4413      	add	r3, r2
 800e250:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e252:	68ba      	ldr	r2, [r7, #8]
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	429a      	cmp	r2, r3
 800e258:	d90e      	bls.n	800e278 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e266:	4b19      	ldr	r3, [pc, #100]	; (800e2cc <prvSwitchTimerLists+0xc0>)
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	3304      	adds	r3, #4
 800e26e:	4619      	mov	r1, r3
 800e270:	4610      	mov	r0, r2
 800e272:	f7fe f8d4 	bl	800c41e <vListInsert>
 800e276:	e016      	b.n	800e2a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e278:	2300      	movs	r3, #0
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	2300      	movs	r3, #0
 800e27e:	693a      	ldr	r2, [r7, #16]
 800e280:	2100      	movs	r1, #0
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f7ff fd60 	bl	800dd48 <xTimerGenericCommand>
 800e288:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10a      	bne.n	800e2a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	603b      	str	r3, [r7, #0]
}
 800e2a2:	bf00      	nop
 800e2a4:	e7fe      	b.n	800e2a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2a6:	4b09      	ldr	r3, [pc, #36]	; (800e2cc <prvSwitchTimerLists+0xc0>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d1b1      	bne.n	800e214 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2b0:	4b06      	ldr	r3, [pc, #24]	; (800e2cc <prvSwitchTimerLists+0xc0>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2b6:	4b06      	ldr	r3, [pc, #24]	; (800e2d0 <prvSwitchTimerLists+0xc4>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a04      	ldr	r2, [pc, #16]	; (800e2cc <prvSwitchTimerLists+0xc0>)
 800e2bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e2be:	4a04      	ldr	r2, [pc, #16]	; (800e2d0 <prvSwitchTimerLists+0xc4>)
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	6013      	str	r3, [r2, #0]
}
 800e2c4:	bf00      	nop
 800e2c6:	3718      	adds	r7, #24
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	20001388 	.word	0x20001388
 800e2d0:	2000138c 	.word	0x2000138c

0800e2d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e2da:	f000 f96b 	bl	800e5b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e2de:	4b15      	ldr	r3, [pc, #84]	; (800e334 <prvCheckForValidListAndQueue+0x60>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d120      	bne.n	800e328 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e2e6:	4814      	ldr	r0, [pc, #80]	; (800e338 <prvCheckForValidListAndQueue+0x64>)
 800e2e8:	f7fe f848 	bl	800c37c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e2ec:	4813      	ldr	r0, [pc, #76]	; (800e33c <prvCheckForValidListAndQueue+0x68>)
 800e2ee:	f7fe f845 	bl	800c37c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e2f2:	4b13      	ldr	r3, [pc, #76]	; (800e340 <prvCheckForValidListAndQueue+0x6c>)
 800e2f4:	4a10      	ldr	r2, [pc, #64]	; (800e338 <prvCheckForValidListAndQueue+0x64>)
 800e2f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e2f8:	4b12      	ldr	r3, [pc, #72]	; (800e344 <prvCheckForValidListAndQueue+0x70>)
 800e2fa:	4a10      	ldr	r2, [pc, #64]	; (800e33c <prvCheckForValidListAndQueue+0x68>)
 800e2fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e2fe:	2300      	movs	r3, #0
 800e300:	9300      	str	r3, [sp, #0]
 800e302:	4b11      	ldr	r3, [pc, #68]	; (800e348 <prvCheckForValidListAndQueue+0x74>)
 800e304:	4a11      	ldr	r2, [pc, #68]	; (800e34c <prvCheckForValidListAndQueue+0x78>)
 800e306:	2110      	movs	r1, #16
 800e308:	200a      	movs	r0, #10
 800e30a:	f7fe f953 	bl	800c5b4 <xQueueGenericCreateStatic>
 800e30e:	4603      	mov	r3, r0
 800e310:	4a08      	ldr	r2, [pc, #32]	; (800e334 <prvCheckForValidListAndQueue+0x60>)
 800e312:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e314:	4b07      	ldr	r3, [pc, #28]	; (800e334 <prvCheckForValidListAndQueue+0x60>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d005      	beq.n	800e328 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e31c:	4b05      	ldr	r3, [pc, #20]	; (800e334 <prvCheckForValidListAndQueue+0x60>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	490b      	ldr	r1, [pc, #44]	; (800e350 <prvCheckForValidListAndQueue+0x7c>)
 800e322:	4618      	mov	r0, r3
 800e324:	f7fe fd6c 	bl	800ce00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e328:	f000 f974 	bl	800e614 <vPortExitCritical>
}
 800e32c:	bf00      	nop
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	20001390 	.word	0x20001390
 800e338:	20001360 	.word	0x20001360
 800e33c:	20001374 	.word	0x20001374
 800e340:	20001388 	.word	0x20001388
 800e344:	2000138c 	.word	0x2000138c
 800e348:	2000143c 	.word	0x2000143c
 800e34c:	2000139c 	.word	0x2000139c
 800e350:	08012360 	.word	0x08012360

0800e354 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e354:	b480      	push	{r7}
 800e356:	b085      	sub	sp, #20
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	3b04      	subs	r3, #4
 800e364:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e36c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	3b04      	subs	r3, #4
 800e372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	f023 0201 	bic.w	r2, r3, #1
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	3b04      	subs	r3, #4
 800e382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e384:	4a0c      	ldr	r2, [pc, #48]	; (800e3b8 <pxPortInitialiseStack+0x64>)
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	3b14      	subs	r3, #20
 800e38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	3b04      	subs	r3, #4
 800e39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f06f 0202 	mvn.w	r2, #2
 800e3a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	3b20      	subs	r3, #32
 800e3a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	0800e3bd 	.word	0x0800e3bd

0800e3bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3c6:	4b12      	ldr	r3, [pc, #72]	; (800e410 <prvTaskExitError+0x54>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ce:	d00a      	beq.n	800e3e6 <prvTaskExitError+0x2a>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	60fb      	str	r3, [r7, #12]
}
 800e3e2:	bf00      	nop
 800e3e4:	e7fe      	b.n	800e3e4 <prvTaskExitError+0x28>
	__asm volatile
 800e3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ea:	f383 8811 	msr	BASEPRI, r3
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	60bb      	str	r3, [r7, #8]
}
 800e3f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e3fa:	bf00      	nop
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d0fc      	beq.n	800e3fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e402:	bf00      	nop
 800e404:	bf00      	nop
 800e406:	3714      	adds	r7, #20
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	20000114 	.word	0x20000114
	...

0800e420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e420:	4b07      	ldr	r3, [pc, #28]	; (800e440 <pxCurrentTCBConst2>)
 800e422:	6819      	ldr	r1, [r3, #0]
 800e424:	6808      	ldr	r0, [r1, #0]
 800e426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e42a:	f380 8809 	msr	PSP, r0
 800e42e:	f3bf 8f6f 	isb	sy
 800e432:	f04f 0000 	mov.w	r0, #0
 800e436:	f380 8811 	msr	BASEPRI, r0
 800e43a:	4770      	bx	lr
 800e43c:	f3af 8000 	nop.w

0800e440 <pxCurrentTCBConst2>:
 800e440:	20000e60 	.word	0x20000e60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e444:	bf00      	nop
 800e446:	bf00      	nop

0800e448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e448:	4808      	ldr	r0, [pc, #32]	; (800e46c <prvPortStartFirstTask+0x24>)
 800e44a:	6800      	ldr	r0, [r0, #0]
 800e44c:	6800      	ldr	r0, [r0, #0]
 800e44e:	f380 8808 	msr	MSP, r0
 800e452:	f04f 0000 	mov.w	r0, #0
 800e456:	f380 8814 	msr	CONTROL, r0
 800e45a:	b662      	cpsie	i
 800e45c:	b661      	cpsie	f
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	df00      	svc	0
 800e468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e46a:	bf00      	nop
 800e46c:	e000ed08 	.word	0xe000ed08

0800e470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b086      	sub	sp, #24
 800e474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e476:	4b46      	ldr	r3, [pc, #280]	; (800e590 <xPortStartScheduler+0x120>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4a46      	ldr	r2, [pc, #280]	; (800e594 <xPortStartScheduler+0x124>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d10a      	bne.n	800e496 <xPortStartScheduler+0x26>
	__asm volatile
 800e480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e484:	f383 8811 	msr	BASEPRI, r3
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	f3bf 8f4f 	dsb	sy
 800e490:	613b      	str	r3, [r7, #16]
}
 800e492:	bf00      	nop
 800e494:	e7fe      	b.n	800e494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e496:	4b3e      	ldr	r3, [pc, #248]	; (800e590 <xPortStartScheduler+0x120>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4a3f      	ldr	r2, [pc, #252]	; (800e598 <xPortStartScheduler+0x128>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d10a      	bne.n	800e4b6 <xPortStartScheduler+0x46>
	__asm volatile
 800e4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a4:	f383 8811 	msr	BASEPRI, r3
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	60fb      	str	r3, [r7, #12]
}
 800e4b2:	bf00      	nop
 800e4b4:	e7fe      	b.n	800e4b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e4b6:	4b39      	ldr	r3, [pc, #228]	; (800e59c <xPortStartScheduler+0x12c>)
 800e4b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	22ff      	movs	r2, #255	; 0xff
 800e4c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e4d0:	78fb      	ldrb	r3, [r7, #3]
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	4b31      	ldr	r3, [pc, #196]	; (800e5a0 <xPortStartScheduler+0x130>)
 800e4dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e4de:	4b31      	ldr	r3, [pc, #196]	; (800e5a4 <xPortStartScheduler+0x134>)
 800e4e0:	2207      	movs	r2, #7
 800e4e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4e4:	e009      	b.n	800e4fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e4e6:	4b2f      	ldr	r3, [pc, #188]	; (800e5a4 <xPortStartScheduler+0x134>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	4a2d      	ldr	r2, [pc, #180]	; (800e5a4 <xPortStartScheduler+0x134>)
 800e4ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e4f0:	78fb      	ldrb	r3, [r7, #3]
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	005b      	lsls	r3, r3, #1
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4fa:	78fb      	ldrb	r3, [r7, #3]
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e502:	2b80      	cmp	r3, #128	; 0x80
 800e504:	d0ef      	beq.n	800e4e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e506:	4b27      	ldr	r3, [pc, #156]	; (800e5a4 <xPortStartScheduler+0x134>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f1c3 0307 	rsb	r3, r3, #7
 800e50e:	2b04      	cmp	r3, #4
 800e510:	d00a      	beq.n	800e528 <xPortStartScheduler+0xb8>
	__asm volatile
 800e512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	60bb      	str	r3, [r7, #8]
}
 800e524:	bf00      	nop
 800e526:	e7fe      	b.n	800e526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e528:	4b1e      	ldr	r3, [pc, #120]	; (800e5a4 <xPortStartScheduler+0x134>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	021b      	lsls	r3, r3, #8
 800e52e:	4a1d      	ldr	r2, [pc, #116]	; (800e5a4 <xPortStartScheduler+0x134>)
 800e530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e532:	4b1c      	ldr	r3, [pc, #112]	; (800e5a4 <xPortStartScheduler+0x134>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e53a:	4a1a      	ldr	r2, [pc, #104]	; (800e5a4 <xPortStartScheduler+0x134>)
 800e53c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	b2da      	uxtb	r2, r3
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e546:	4b18      	ldr	r3, [pc, #96]	; (800e5a8 <xPortStartScheduler+0x138>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	4a17      	ldr	r2, [pc, #92]	; (800e5a8 <xPortStartScheduler+0x138>)
 800e54c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e552:	4b15      	ldr	r3, [pc, #84]	; (800e5a8 <xPortStartScheduler+0x138>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	4a14      	ldr	r2, [pc, #80]	; (800e5a8 <xPortStartScheduler+0x138>)
 800e558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e55c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e55e:	f000 f8dd 	bl	800e71c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e562:	4b12      	ldr	r3, [pc, #72]	; (800e5ac <xPortStartScheduler+0x13c>)
 800e564:	2200      	movs	r2, #0
 800e566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e568:	f000 f8fc 	bl	800e764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e56c:	4b10      	ldr	r3, [pc, #64]	; (800e5b0 <xPortStartScheduler+0x140>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a0f      	ldr	r2, [pc, #60]	; (800e5b0 <xPortStartScheduler+0x140>)
 800e572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e578:	f7ff ff66 	bl	800e448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e57c:	f7ff f850 	bl	800d620 <vTaskSwitchContext>
	prvTaskExitError();
 800e580:	f7ff ff1c 	bl	800e3bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3718      	adds	r7, #24
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	e000ed00 	.word	0xe000ed00
 800e594:	410fc271 	.word	0x410fc271
 800e598:	410fc270 	.word	0x410fc270
 800e59c:	e000e400 	.word	0xe000e400
 800e5a0:	2000148c 	.word	0x2000148c
 800e5a4:	20001490 	.word	0x20001490
 800e5a8:	e000ed20 	.word	0xe000ed20
 800e5ac:	20000114 	.word	0x20000114
 800e5b0:	e000ef34 	.word	0xe000ef34

0800e5b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
	__asm volatile
 800e5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5be:	f383 8811 	msr	BASEPRI, r3
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	f3bf 8f4f 	dsb	sy
 800e5ca:	607b      	str	r3, [r7, #4]
}
 800e5cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e5ce:	4b0f      	ldr	r3, [pc, #60]	; (800e60c <vPortEnterCritical+0x58>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	4a0d      	ldr	r2, [pc, #52]	; (800e60c <vPortEnterCritical+0x58>)
 800e5d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e5d8:	4b0c      	ldr	r3, [pc, #48]	; (800e60c <vPortEnterCritical+0x58>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d10f      	bne.n	800e600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e5e0:	4b0b      	ldr	r3, [pc, #44]	; (800e610 <vPortEnterCritical+0x5c>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	b2db      	uxtb	r3, r3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d00a      	beq.n	800e600 <vPortEnterCritical+0x4c>
	__asm volatile
 800e5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	603b      	str	r3, [r7, #0]
}
 800e5fc:	bf00      	nop
 800e5fe:	e7fe      	b.n	800e5fe <vPortEnterCritical+0x4a>
	}
}
 800e600:	bf00      	nop
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	20000114 	.word	0x20000114
 800e610:	e000ed04 	.word	0xe000ed04

0800e614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e61a:	4b12      	ldr	r3, [pc, #72]	; (800e664 <vPortExitCritical+0x50>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d10a      	bne.n	800e638 <vPortExitCritical+0x24>
	__asm volatile
 800e622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e626:	f383 8811 	msr	BASEPRI, r3
 800e62a:	f3bf 8f6f 	isb	sy
 800e62e:	f3bf 8f4f 	dsb	sy
 800e632:	607b      	str	r3, [r7, #4]
}
 800e634:	bf00      	nop
 800e636:	e7fe      	b.n	800e636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e638:	4b0a      	ldr	r3, [pc, #40]	; (800e664 <vPortExitCritical+0x50>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	3b01      	subs	r3, #1
 800e63e:	4a09      	ldr	r2, [pc, #36]	; (800e664 <vPortExitCritical+0x50>)
 800e640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e642:	4b08      	ldr	r3, [pc, #32]	; (800e664 <vPortExitCritical+0x50>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d105      	bne.n	800e656 <vPortExitCritical+0x42>
 800e64a:	2300      	movs	r3, #0
 800e64c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	f383 8811 	msr	BASEPRI, r3
}
 800e654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e656:	bf00      	nop
 800e658:	370c      	adds	r7, #12
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr
 800e662:	bf00      	nop
 800e664:	20000114 	.word	0x20000114
	...

0800e670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e670:	f3ef 8009 	mrs	r0, PSP
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	4b15      	ldr	r3, [pc, #84]	; (800e6d0 <pxCurrentTCBConst>)
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	f01e 0f10 	tst.w	lr, #16
 800e680:	bf08      	it	eq
 800e682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68a:	6010      	str	r0, [r2, #0]
 800e68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e690:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e694:	f380 8811 	msr	BASEPRI, r0
 800e698:	f3bf 8f4f 	dsb	sy
 800e69c:	f3bf 8f6f 	isb	sy
 800e6a0:	f7fe ffbe 	bl	800d620 <vTaskSwitchContext>
 800e6a4:	f04f 0000 	mov.w	r0, #0
 800e6a8:	f380 8811 	msr	BASEPRI, r0
 800e6ac:	bc09      	pop	{r0, r3}
 800e6ae:	6819      	ldr	r1, [r3, #0]
 800e6b0:	6808      	ldr	r0, [r1, #0]
 800e6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b6:	f01e 0f10 	tst.w	lr, #16
 800e6ba:	bf08      	it	eq
 800e6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e6c0:	f380 8809 	msr	PSP, r0
 800e6c4:	f3bf 8f6f 	isb	sy
 800e6c8:	4770      	bx	lr
 800e6ca:	bf00      	nop
 800e6cc:	f3af 8000 	nop.w

0800e6d0 <pxCurrentTCBConst>:
 800e6d0:	20000e60 	.word	0x20000e60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e6d4:	bf00      	nop
 800e6d6:	bf00      	nop

0800e6d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e2:	f383 8811 	msr	BASEPRI, r3
 800e6e6:	f3bf 8f6f 	isb	sy
 800e6ea:	f3bf 8f4f 	dsb	sy
 800e6ee:	607b      	str	r3, [r7, #4]
}
 800e6f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e6f2:	f7fe fedb 	bl	800d4ac <xTaskIncrementTick>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d003      	beq.n	800e704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e6fc:	4b06      	ldr	r3, [pc, #24]	; (800e718 <xPortSysTickHandler+0x40>)
 800e6fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	2300      	movs	r3, #0
 800e706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	f383 8811 	msr	BASEPRI, r3
}
 800e70e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e710:	bf00      	nop
 800e712:	3708      	adds	r7, #8
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	e000ed04 	.word	0xe000ed04

0800e71c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e71c:	b480      	push	{r7}
 800e71e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e720:	4b0b      	ldr	r3, [pc, #44]	; (800e750 <vPortSetupTimerInterrupt+0x34>)
 800e722:	2200      	movs	r2, #0
 800e724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e726:	4b0b      	ldr	r3, [pc, #44]	; (800e754 <vPortSetupTimerInterrupt+0x38>)
 800e728:	2200      	movs	r2, #0
 800e72a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e72c:	4b0a      	ldr	r3, [pc, #40]	; (800e758 <vPortSetupTimerInterrupt+0x3c>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	4a0a      	ldr	r2, [pc, #40]	; (800e75c <vPortSetupTimerInterrupt+0x40>)
 800e732:	fba2 2303 	umull	r2, r3, r2, r3
 800e736:	099b      	lsrs	r3, r3, #6
 800e738:	4a09      	ldr	r2, [pc, #36]	; (800e760 <vPortSetupTimerInterrupt+0x44>)
 800e73a:	3b01      	subs	r3, #1
 800e73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e73e:	4b04      	ldr	r3, [pc, #16]	; (800e750 <vPortSetupTimerInterrupt+0x34>)
 800e740:	2207      	movs	r2, #7
 800e742:	601a      	str	r2, [r3, #0]
}
 800e744:	bf00      	nop
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	e000e010 	.word	0xe000e010
 800e754:	e000e018 	.word	0xe000e018
 800e758:	20000000 	.word	0x20000000
 800e75c:	10624dd3 	.word	0x10624dd3
 800e760:	e000e014 	.word	0xe000e014

0800e764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e774 <vPortEnableVFP+0x10>
 800e768:	6801      	ldr	r1, [r0, #0]
 800e76a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e76e:	6001      	str	r1, [r0, #0]
 800e770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e772:	bf00      	nop
 800e774:	e000ed88 	.word	0xe000ed88

0800e778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e77e:	f3ef 8305 	mrs	r3, IPSR
 800e782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2b0f      	cmp	r3, #15
 800e788:	d914      	bls.n	800e7b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e78a:	4a17      	ldr	r2, [pc, #92]	; (800e7e8 <vPortValidateInterruptPriority+0x70>)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	4413      	add	r3, r2
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e794:	4b15      	ldr	r3, [pc, #84]	; (800e7ec <vPortValidateInterruptPriority+0x74>)
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	7afa      	ldrb	r2, [r7, #11]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d20a      	bcs.n	800e7b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	607b      	str	r3, [r7, #4]
}
 800e7b0:	bf00      	nop
 800e7b2:	e7fe      	b.n	800e7b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e7b4:	4b0e      	ldr	r3, [pc, #56]	; (800e7f0 <vPortValidateInterruptPriority+0x78>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e7bc:	4b0d      	ldr	r3, [pc, #52]	; (800e7f4 <vPortValidateInterruptPriority+0x7c>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d90a      	bls.n	800e7da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c8:	f383 8811 	msr	BASEPRI, r3
 800e7cc:	f3bf 8f6f 	isb	sy
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	603b      	str	r3, [r7, #0]
}
 800e7d6:	bf00      	nop
 800e7d8:	e7fe      	b.n	800e7d8 <vPortValidateInterruptPriority+0x60>
	}
 800e7da:	bf00      	nop
 800e7dc:	3714      	adds	r7, #20
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr
 800e7e6:	bf00      	nop
 800e7e8:	e000e3f0 	.word	0xe000e3f0
 800e7ec:	2000148c 	.word	0x2000148c
 800e7f0:	e000ed0c 	.word	0xe000ed0c
 800e7f4:	20001490 	.word	0x20001490

0800e7f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b08a      	sub	sp, #40	; 0x28
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e800:	2300      	movs	r3, #0
 800e802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e804:	f7fe fd96 	bl	800d334 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e808:	4b5b      	ldr	r3, [pc, #364]	; (800e978 <pvPortMalloc+0x180>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d101      	bne.n	800e814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e810:	f000 f920 	bl	800ea54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e814:	4b59      	ldr	r3, [pc, #356]	; (800e97c <pvPortMalloc+0x184>)
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4013      	ands	r3, r2
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f040 8093 	bne.w	800e948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d01d      	beq.n	800e864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e828:	2208      	movs	r2, #8
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	4413      	add	r3, r2
 800e82e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f003 0307 	and.w	r3, r3, #7
 800e836:	2b00      	cmp	r3, #0
 800e838:	d014      	beq.n	800e864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f023 0307 	bic.w	r3, r3, #7
 800e840:	3308      	adds	r3, #8
 800e842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f003 0307 	and.w	r3, r3, #7
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d00a      	beq.n	800e864 <pvPortMalloc+0x6c>
	__asm volatile
 800e84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e852:	f383 8811 	msr	BASEPRI, r3
 800e856:	f3bf 8f6f 	isb	sy
 800e85a:	f3bf 8f4f 	dsb	sy
 800e85e:	617b      	str	r3, [r7, #20]
}
 800e860:	bf00      	nop
 800e862:	e7fe      	b.n	800e862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d06e      	beq.n	800e948 <pvPortMalloc+0x150>
 800e86a:	4b45      	ldr	r3, [pc, #276]	; (800e980 <pvPortMalloc+0x188>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	429a      	cmp	r2, r3
 800e872:	d869      	bhi.n	800e948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e874:	4b43      	ldr	r3, [pc, #268]	; (800e984 <pvPortMalloc+0x18c>)
 800e876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e878:	4b42      	ldr	r3, [pc, #264]	; (800e984 <pvPortMalloc+0x18c>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e87e:	e004      	b.n	800e88a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	429a      	cmp	r2, r3
 800e892:	d903      	bls.n	800e89c <pvPortMalloc+0xa4>
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1f1      	bne.n	800e880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e89c:	4b36      	ldr	r3, [pc, #216]	; (800e978 <pvPortMalloc+0x180>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d050      	beq.n	800e948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2208      	movs	r2, #8
 800e8ac:	4413      	add	r3, r2
 800e8ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	6a3b      	ldr	r3, [r7, #32]
 800e8b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	1ad2      	subs	r2, r2, r3
 800e8c0:	2308      	movs	r3, #8
 800e8c2:	005b      	lsls	r3, r3, #1
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d91f      	bls.n	800e908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	f003 0307 	and.w	r3, r3, #7
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d00a      	beq.n	800e8f0 <pvPortMalloc+0xf8>
	__asm volatile
 800e8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8de:	f383 8811 	msr	BASEPRI, r3
 800e8e2:	f3bf 8f6f 	isb	sy
 800e8e6:	f3bf 8f4f 	dsb	sy
 800e8ea:	613b      	str	r3, [r7, #16]
}
 800e8ec:	bf00      	nop
 800e8ee:	e7fe      	b.n	800e8ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	685a      	ldr	r2, [r3, #4]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	1ad2      	subs	r2, r2, r3
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e902:	69b8      	ldr	r0, [r7, #24]
 800e904:	f000 f908 	bl	800eb18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e908:	4b1d      	ldr	r3, [pc, #116]	; (800e980 <pvPortMalloc+0x188>)
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	4a1b      	ldr	r2, [pc, #108]	; (800e980 <pvPortMalloc+0x188>)
 800e914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e916:	4b1a      	ldr	r3, [pc, #104]	; (800e980 <pvPortMalloc+0x188>)
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	4b1b      	ldr	r3, [pc, #108]	; (800e988 <pvPortMalloc+0x190>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d203      	bcs.n	800e92a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e922:	4b17      	ldr	r3, [pc, #92]	; (800e980 <pvPortMalloc+0x188>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	4a18      	ldr	r2, [pc, #96]	; (800e988 <pvPortMalloc+0x190>)
 800e928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92c:	685a      	ldr	r2, [r3, #4]
 800e92e:	4b13      	ldr	r3, [pc, #76]	; (800e97c <pvPortMalloc+0x184>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	431a      	orrs	r2, r3
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93a:	2200      	movs	r2, #0
 800e93c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e93e:	4b13      	ldr	r3, [pc, #76]	; (800e98c <pvPortMalloc+0x194>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	3301      	adds	r3, #1
 800e944:	4a11      	ldr	r2, [pc, #68]	; (800e98c <pvPortMalloc+0x194>)
 800e946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e948:	f7fe fd02 	bl	800d350 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	f003 0307 	and.w	r3, r3, #7
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00a      	beq.n	800e96c <pvPortMalloc+0x174>
	__asm volatile
 800e956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95a:	f383 8811 	msr	BASEPRI, r3
 800e95e:	f3bf 8f6f 	isb	sy
 800e962:	f3bf 8f4f 	dsb	sy
 800e966:	60fb      	str	r3, [r7, #12]
}
 800e968:	bf00      	nop
 800e96a:	e7fe      	b.n	800e96a <pvPortMalloc+0x172>
	return pvReturn;
 800e96c:	69fb      	ldr	r3, [r7, #28]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3728      	adds	r7, #40	; 0x28
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	2000509c 	.word	0x2000509c
 800e97c:	200050b0 	.word	0x200050b0
 800e980:	200050a0 	.word	0x200050a0
 800e984:	20005094 	.word	0x20005094
 800e988:	200050a4 	.word	0x200050a4
 800e98c:	200050a8 	.word	0x200050a8

0800e990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b086      	sub	sp, #24
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d04d      	beq.n	800ea3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e9a2:	2308      	movs	r3, #8
 800e9a4:	425b      	negs	r3, r3
 800e9a6:	697a      	ldr	r2, [r7, #20]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	685a      	ldr	r2, [r3, #4]
 800e9b4:	4b24      	ldr	r3, [pc, #144]	; (800ea48 <vPortFree+0xb8>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4013      	ands	r3, r2
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d10a      	bne.n	800e9d4 <vPortFree+0x44>
	__asm volatile
 800e9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c2:	f383 8811 	msr	BASEPRI, r3
 800e9c6:	f3bf 8f6f 	isb	sy
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	60fb      	str	r3, [r7, #12]
}
 800e9d0:	bf00      	nop
 800e9d2:	e7fe      	b.n	800e9d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00a      	beq.n	800e9f2 <vPortFree+0x62>
	__asm volatile
 800e9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e0:	f383 8811 	msr	BASEPRI, r3
 800e9e4:	f3bf 8f6f 	isb	sy
 800e9e8:	f3bf 8f4f 	dsb	sy
 800e9ec:	60bb      	str	r3, [r7, #8]
}
 800e9ee:	bf00      	nop
 800e9f0:	e7fe      	b.n	800e9f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	685a      	ldr	r2, [r3, #4]
 800e9f6:	4b14      	ldr	r3, [pc, #80]	; (800ea48 <vPortFree+0xb8>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4013      	ands	r3, r2
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d01e      	beq.n	800ea3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d11a      	bne.n	800ea3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	685a      	ldr	r2, [r3, #4]
 800ea0c:	4b0e      	ldr	r3, [pc, #56]	; (800ea48 <vPortFree+0xb8>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	43db      	mvns	r3, r3
 800ea12:	401a      	ands	r2, r3
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea18:	f7fe fc8c 	bl	800d334 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	4b0a      	ldr	r3, [pc, #40]	; (800ea4c <vPortFree+0xbc>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4413      	add	r3, r2
 800ea26:	4a09      	ldr	r2, [pc, #36]	; (800ea4c <vPortFree+0xbc>)
 800ea28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea2a:	6938      	ldr	r0, [r7, #16]
 800ea2c:	f000 f874 	bl	800eb18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea30:	4b07      	ldr	r3, [pc, #28]	; (800ea50 <vPortFree+0xc0>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	3301      	adds	r3, #1
 800ea36:	4a06      	ldr	r2, [pc, #24]	; (800ea50 <vPortFree+0xc0>)
 800ea38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ea3a:	f7fe fc89 	bl	800d350 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea3e:	bf00      	nop
 800ea40:	3718      	adds	r7, #24
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop
 800ea48:	200050b0 	.word	0x200050b0
 800ea4c:	200050a0 	.word	0x200050a0
 800ea50:	200050ac 	.word	0x200050ac

0800ea54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea54:	b480      	push	{r7}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ea5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea60:	4b27      	ldr	r3, [pc, #156]	; (800eb00 <prvHeapInit+0xac>)
 800ea62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f003 0307 	and.w	r3, r3, #7
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00c      	beq.n	800ea88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	3307      	adds	r3, #7
 800ea72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f023 0307 	bic.w	r3, r3, #7
 800ea7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea7c:	68ba      	ldr	r2, [r7, #8]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	1ad3      	subs	r3, r2, r3
 800ea82:	4a1f      	ldr	r2, [pc, #124]	; (800eb00 <prvHeapInit+0xac>)
 800ea84:	4413      	add	r3, r2
 800ea86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea8c:	4a1d      	ldr	r2, [pc, #116]	; (800eb04 <prvHeapInit+0xb0>)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea92:	4b1c      	ldr	r3, [pc, #112]	; (800eb04 <prvHeapInit+0xb0>)
 800ea94:	2200      	movs	r2, #0
 800ea96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	68ba      	ldr	r2, [r7, #8]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eaa0:	2208      	movs	r2, #8
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	1a9b      	subs	r3, r3, r2
 800eaa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f023 0307 	bic.w	r3, r3, #7
 800eaae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	4a15      	ldr	r2, [pc, #84]	; (800eb08 <prvHeapInit+0xb4>)
 800eab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eab6:	4b14      	ldr	r3, [pc, #80]	; (800eb08 <prvHeapInit+0xb4>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	2200      	movs	r2, #0
 800eabc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eabe:	4b12      	ldr	r3, [pc, #72]	; (800eb08 <prvHeapInit+0xb4>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2200      	movs	r2, #0
 800eac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	1ad2      	subs	r2, r2, r3
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ead4:	4b0c      	ldr	r3, [pc, #48]	; (800eb08 <prvHeapInit+0xb4>)
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	4a0a      	ldr	r2, [pc, #40]	; (800eb0c <prvHeapInit+0xb8>)
 800eae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	4a09      	ldr	r2, [pc, #36]	; (800eb10 <prvHeapInit+0xbc>)
 800eaea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eaec:	4b09      	ldr	r3, [pc, #36]	; (800eb14 <prvHeapInit+0xc0>)
 800eaee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eaf2:	601a      	str	r2, [r3, #0]
}
 800eaf4:	bf00      	nop
 800eaf6:	3714      	adds	r7, #20
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr
 800eb00:	20001494 	.word	0x20001494
 800eb04:	20005094 	.word	0x20005094
 800eb08:	2000509c 	.word	0x2000509c
 800eb0c:	200050a4 	.word	0x200050a4
 800eb10:	200050a0 	.word	0x200050a0
 800eb14:	200050b0 	.word	0x200050b0

0800eb18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb20:	4b28      	ldr	r3, [pc, #160]	; (800ebc4 <prvInsertBlockIntoFreeList+0xac>)
 800eb22:	60fb      	str	r3, [r7, #12]
 800eb24:	e002      	b.n	800eb2c <prvInsertBlockIntoFreeList+0x14>
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	60fb      	str	r3, [r7, #12]
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d8f7      	bhi.n	800eb26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	4413      	add	r3, r2
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d108      	bne.n	800eb5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	685a      	ldr	r2, [r3, #4]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	441a      	add	r2, r3
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	68ba      	ldr	r2, [r7, #8]
 800eb64:	441a      	add	r2, r3
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d118      	bne.n	800eba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	4b15      	ldr	r3, [pc, #84]	; (800ebc8 <prvInsertBlockIntoFreeList+0xb0>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d00d      	beq.n	800eb96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	685a      	ldr	r2, [r3, #4]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	441a      	add	r2, r3
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	e008      	b.n	800eba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb96:	4b0c      	ldr	r3, [pc, #48]	; (800ebc8 <prvInsertBlockIntoFreeList+0xb0>)
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	601a      	str	r2, [r3, #0]
 800eb9e:	e003      	b.n	800eba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d002      	beq.n	800ebb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebb6:	bf00      	nop
 800ebb8:	3714      	adds	r7, #20
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr
 800ebc2:	bf00      	nop
 800ebc4:	20005094 	.word	0x20005094
 800ebc8:	2000509c 	.word	0x2000509c

0800ebcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	4912      	ldr	r1, [pc, #72]	; (800ec1c <MX_USB_DEVICE_Init+0x50>)
 800ebd4:	4812      	ldr	r0, [pc, #72]	; (800ec20 <MX_USB_DEVICE_Init+0x54>)
 800ebd6:	f7fb ff6f 	bl	800aab8 <USBD_Init>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d001      	beq.n	800ebe4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ebe0:	f7f2 fc24 	bl	800142c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ebe4:	490f      	ldr	r1, [pc, #60]	; (800ec24 <MX_USB_DEVICE_Init+0x58>)
 800ebe6:	480e      	ldr	r0, [pc, #56]	; (800ec20 <MX_USB_DEVICE_Init+0x54>)
 800ebe8:	f7fb ff96 	bl	800ab18 <USBD_RegisterClass>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d001      	beq.n	800ebf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ebf2:	f7f2 fc1b 	bl	800142c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ebf6:	490c      	ldr	r1, [pc, #48]	; (800ec28 <MX_USB_DEVICE_Init+0x5c>)
 800ebf8:	4809      	ldr	r0, [pc, #36]	; (800ec20 <MX_USB_DEVICE_Init+0x54>)
 800ebfa:	f7fb fe87 	bl	800a90c <USBD_CDC_RegisterInterface>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d001      	beq.n	800ec08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ec04:	f7f2 fc12 	bl	800142c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ec08:	4805      	ldr	r0, [pc, #20]	; (800ec20 <MX_USB_DEVICE_Init+0x54>)
 800ec0a:	f7fb ffbb 	bl	800ab84 <USBD_Start>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d001      	beq.n	800ec18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ec14:	f7f2 fc0a 	bl	800142c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ec18:	bf00      	nop
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	2000012c 	.word	0x2000012c
 800ec20:	200050b4 	.word	0x200050b4
 800ec24:	20000094 	.word	0x20000094
 800ec28:	20000118 	.word	0x20000118

0800ec2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ec30:	2200      	movs	r2, #0
 800ec32:	4905      	ldr	r1, [pc, #20]	; (800ec48 <CDC_Init_FS+0x1c>)
 800ec34:	4805      	ldr	r0, [pc, #20]	; (800ec4c <CDC_Init_FS+0x20>)
 800ec36:	f7fb fe83 	bl	800a940 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ec3a:	4905      	ldr	r1, [pc, #20]	; (800ec50 <CDC_Init_FS+0x24>)
 800ec3c:	4803      	ldr	r0, [pc, #12]	; (800ec4c <CDC_Init_FS+0x20>)
 800ec3e:	f7fb fea1 	bl	800a984 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ec42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	20005b90 	.word	0x20005b90
 800ec4c:	200050b4 	.word	0x200050b4
 800ec50:	20005390 	.word	0x20005390

0800ec54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ec54:	b480      	push	{r7}
 800ec56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ec58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	6039      	str	r1, [r7, #0]
 800ec6e:	71fb      	strb	r3, [r7, #7]
 800ec70:	4613      	mov	r3, r2
 800ec72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ec74:	79fb      	ldrb	r3, [r7, #7]
 800ec76:	2b23      	cmp	r3, #35	; 0x23
 800ec78:	d84a      	bhi.n	800ed10 <CDC_Control_FS+0xac>
 800ec7a:	a201      	add	r2, pc, #4	; (adr r2, 800ec80 <CDC_Control_FS+0x1c>)
 800ec7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec80:	0800ed11 	.word	0x0800ed11
 800ec84:	0800ed11 	.word	0x0800ed11
 800ec88:	0800ed11 	.word	0x0800ed11
 800ec8c:	0800ed11 	.word	0x0800ed11
 800ec90:	0800ed11 	.word	0x0800ed11
 800ec94:	0800ed11 	.word	0x0800ed11
 800ec98:	0800ed11 	.word	0x0800ed11
 800ec9c:	0800ed11 	.word	0x0800ed11
 800eca0:	0800ed11 	.word	0x0800ed11
 800eca4:	0800ed11 	.word	0x0800ed11
 800eca8:	0800ed11 	.word	0x0800ed11
 800ecac:	0800ed11 	.word	0x0800ed11
 800ecb0:	0800ed11 	.word	0x0800ed11
 800ecb4:	0800ed11 	.word	0x0800ed11
 800ecb8:	0800ed11 	.word	0x0800ed11
 800ecbc:	0800ed11 	.word	0x0800ed11
 800ecc0:	0800ed11 	.word	0x0800ed11
 800ecc4:	0800ed11 	.word	0x0800ed11
 800ecc8:	0800ed11 	.word	0x0800ed11
 800eccc:	0800ed11 	.word	0x0800ed11
 800ecd0:	0800ed11 	.word	0x0800ed11
 800ecd4:	0800ed11 	.word	0x0800ed11
 800ecd8:	0800ed11 	.word	0x0800ed11
 800ecdc:	0800ed11 	.word	0x0800ed11
 800ece0:	0800ed11 	.word	0x0800ed11
 800ece4:	0800ed11 	.word	0x0800ed11
 800ece8:	0800ed11 	.word	0x0800ed11
 800ecec:	0800ed11 	.word	0x0800ed11
 800ecf0:	0800ed11 	.word	0x0800ed11
 800ecf4:	0800ed11 	.word	0x0800ed11
 800ecf8:	0800ed11 	.word	0x0800ed11
 800ecfc:	0800ed11 	.word	0x0800ed11
 800ed00:	0800ed11 	.word	0x0800ed11
 800ed04:	0800ed11 	.word	0x0800ed11
 800ed08:	0800ed11 	.word	0x0800ed11
 800ed0c:	0800ed11 	.word	0x0800ed11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ed10:	bf00      	nop
  }

  return (USBD_OK);
 800ed12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	370c      	adds	r7, #12
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ed2a:	6879      	ldr	r1, [r7, #4]
 800ed2c:	4805      	ldr	r0, [pc, #20]	; (800ed44 <CDC_Receive_FS+0x24>)
 800ed2e:	f7fb fe29 	bl	800a984 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ed32:	4804      	ldr	r0, [pc, #16]	; (800ed44 <CDC_Receive_FS+0x24>)
 800ed34:	f7fb fe8a 	bl	800aa4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ed38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	200050b4 	.word	0x200050b4

0800ed48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ed58:	4b0d      	ldr	r3, [pc, #52]	; (800ed90 <CDC_Transmit_FS+0x48>)
 800ed5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d001      	beq.n	800ed6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e00b      	b.n	800ed86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ed6e:	887b      	ldrh	r3, [r7, #2]
 800ed70:	461a      	mov	r2, r3
 800ed72:	6879      	ldr	r1, [r7, #4]
 800ed74:	4806      	ldr	r0, [pc, #24]	; (800ed90 <CDC_Transmit_FS+0x48>)
 800ed76:	f7fb fde3 	bl	800a940 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ed7a:	4805      	ldr	r0, [pc, #20]	; (800ed90 <CDC_Transmit_FS+0x48>)
 800ed7c:	f7fb fe20 	bl	800a9c0 <USBD_CDC_TransmitPacket>
 800ed80:	4603      	mov	r3, r0
 800ed82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ed84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3710      	adds	r7, #16
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	200050b4 	.word	0x200050b4

0800ed94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b087      	sub	sp, #28
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	4613      	mov	r3, r2
 800eda0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eda6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	371c      	adds	r7, #28
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
	...

0800edb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	4603      	mov	r3, r0
 800edc0:	6039      	str	r1, [r7, #0]
 800edc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	2212      	movs	r2, #18
 800edc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800edca:	4b03      	ldr	r3, [pc, #12]	; (800edd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800edcc:	4618      	mov	r0, r3
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr
 800edd8:	20000148 	.word	0x20000148

0800eddc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	4603      	mov	r3, r0
 800ede4:	6039      	str	r1, [r7, #0]
 800ede6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	2204      	movs	r2, #4
 800edec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800edee:	4b03      	ldr	r3, [pc, #12]	; (800edfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	370c      	adds	r7, #12
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr
 800edfc:	2000015c 	.word	0x2000015c

0800ee00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	4603      	mov	r3, r0
 800ee08:	6039      	str	r1, [r7, #0]
 800ee0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ee0c:	79fb      	ldrb	r3, [r7, #7]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d105      	bne.n	800ee1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ee12:	683a      	ldr	r2, [r7, #0]
 800ee14:	4907      	ldr	r1, [pc, #28]	; (800ee34 <USBD_FS_ProductStrDescriptor+0x34>)
 800ee16:	4808      	ldr	r0, [pc, #32]	; (800ee38 <USBD_FS_ProductStrDescriptor+0x38>)
 800ee18:	f7fd f860 	bl	800bedc <USBD_GetString>
 800ee1c:	e004      	b.n	800ee28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ee1e:	683a      	ldr	r2, [r7, #0]
 800ee20:	4904      	ldr	r1, [pc, #16]	; (800ee34 <USBD_FS_ProductStrDescriptor+0x34>)
 800ee22:	4805      	ldr	r0, [pc, #20]	; (800ee38 <USBD_FS_ProductStrDescriptor+0x38>)
 800ee24:	f7fd f85a 	bl	800bedc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ee28:	4b02      	ldr	r3, [pc, #8]	; (800ee34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3708      	adds	r7, #8
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	20006390 	.word	0x20006390
 800ee38:	08012368 	.word	0x08012368

0800ee3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	4603      	mov	r3, r0
 800ee44:	6039      	str	r1, [r7, #0]
 800ee46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ee48:	683a      	ldr	r2, [r7, #0]
 800ee4a:	4904      	ldr	r1, [pc, #16]	; (800ee5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ee4c:	4804      	ldr	r0, [pc, #16]	; (800ee60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ee4e:	f7fd f845 	bl	800bedc <USBD_GetString>
  return USBD_StrDesc;
 800ee52:	4b02      	ldr	r3, [pc, #8]	; (800ee5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	20006390 	.word	0x20006390
 800ee60:	08012380 	.word	0x08012380

0800ee64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	6039      	str	r1, [r7, #0]
 800ee6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	221a      	movs	r2, #26
 800ee74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ee76:	f000 f843 	bl	800ef00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ee7a:	4b02      	ldr	r3, [pc, #8]	; (800ee84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	20000160 	.word	0x20000160

0800ee88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	4603      	mov	r3, r0
 800ee90:	6039      	str	r1, [r7, #0]
 800ee92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ee94:	79fb      	ldrb	r3, [r7, #7]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d105      	bne.n	800eea6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	4907      	ldr	r1, [pc, #28]	; (800eebc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ee9e:	4808      	ldr	r0, [pc, #32]	; (800eec0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eea0:	f7fd f81c 	bl	800bedc <USBD_GetString>
 800eea4:	e004      	b.n	800eeb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	4904      	ldr	r1, [pc, #16]	; (800eebc <USBD_FS_ConfigStrDescriptor+0x34>)
 800eeaa:	4805      	ldr	r0, [pc, #20]	; (800eec0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eeac:	f7fd f816 	bl	800bedc <USBD_GetString>
  }
  return USBD_StrDesc;
 800eeb0:	4b02      	ldr	r3, [pc, #8]	; (800eebc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3708      	adds	r7, #8
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	20006390 	.word	0x20006390
 800eec0:	08012394 	.word	0x08012394

0800eec4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	4603      	mov	r3, r0
 800eecc:	6039      	str	r1, [r7, #0]
 800eece:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d105      	bne.n	800eee2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eed6:	683a      	ldr	r2, [r7, #0]
 800eed8:	4907      	ldr	r1, [pc, #28]	; (800eef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eeda:	4808      	ldr	r0, [pc, #32]	; (800eefc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eedc:	f7fc fffe 	bl	800bedc <USBD_GetString>
 800eee0:	e004      	b.n	800eeec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	4904      	ldr	r1, [pc, #16]	; (800eef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eee6:	4805      	ldr	r0, [pc, #20]	; (800eefc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eee8:	f7fc fff8 	bl	800bedc <USBD_GetString>
  }
  return USBD_StrDesc;
 800eeec:	4b02      	ldr	r3, [pc, #8]	; (800eef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	20006390 	.word	0x20006390
 800eefc:	080123a0 	.word	0x080123a0

0800ef00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ef06:	4b0f      	ldr	r3, [pc, #60]	; (800ef44 <Get_SerialNum+0x44>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ef0c:	4b0e      	ldr	r3, [pc, #56]	; (800ef48 <Get_SerialNum+0x48>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ef12:	4b0e      	ldr	r3, [pc, #56]	; (800ef4c <Get_SerialNum+0x4c>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ef18:	68fa      	ldr	r2, [r7, #12]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d009      	beq.n	800ef3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ef26:	2208      	movs	r2, #8
 800ef28:	4909      	ldr	r1, [pc, #36]	; (800ef50 <Get_SerialNum+0x50>)
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f000 f814 	bl	800ef58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ef30:	2204      	movs	r2, #4
 800ef32:	4908      	ldr	r1, [pc, #32]	; (800ef54 <Get_SerialNum+0x54>)
 800ef34:	68b8      	ldr	r0, [r7, #8]
 800ef36:	f000 f80f 	bl	800ef58 <IntToUnicode>
  }
}
 800ef3a:	bf00      	nop
 800ef3c:	3710      	adds	r7, #16
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	1fff7a10 	.word	0x1fff7a10
 800ef48:	1fff7a14 	.word	0x1fff7a14
 800ef4c:	1fff7a18 	.word	0x1fff7a18
 800ef50:	20000162 	.word	0x20000162
 800ef54:	20000172 	.word	0x20000172

0800ef58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b087      	sub	sp, #28
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	4613      	mov	r3, r2
 800ef64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ef66:	2300      	movs	r3, #0
 800ef68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	75fb      	strb	r3, [r7, #23]
 800ef6e:	e027      	b.n	800efc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	0f1b      	lsrs	r3, r3, #28
 800ef74:	2b09      	cmp	r3, #9
 800ef76:	d80b      	bhi.n	800ef90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	0f1b      	lsrs	r3, r3, #28
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	7dfb      	ldrb	r3, [r7, #23]
 800ef80:	005b      	lsls	r3, r3, #1
 800ef82:	4619      	mov	r1, r3
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	440b      	add	r3, r1
 800ef88:	3230      	adds	r2, #48	; 0x30
 800ef8a:	b2d2      	uxtb	r2, r2
 800ef8c:	701a      	strb	r2, [r3, #0]
 800ef8e:	e00a      	b.n	800efa6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	0f1b      	lsrs	r3, r3, #28
 800ef94:	b2da      	uxtb	r2, r3
 800ef96:	7dfb      	ldrb	r3, [r7, #23]
 800ef98:	005b      	lsls	r3, r3, #1
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	440b      	add	r3, r1
 800efa0:	3237      	adds	r2, #55	; 0x37
 800efa2:	b2d2      	uxtb	r2, r2
 800efa4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	011b      	lsls	r3, r3, #4
 800efaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800efac:	7dfb      	ldrb	r3, [r7, #23]
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	3301      	adds	r3, #1
 800efb2:	68ba      	ldr	r2, [r7, #8]
 800efb4:	4413      	add	r3, r2
 800efb6:	2200      	movs	r2, #0
 800efb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800efba:	7dfb      	ldrb	r3, [r7, #23]
 800efbc:	3301      	adds	r3, #1
 800efbe:	75fb      	strb	r3, [r7, #23]
 800efc0:	7dfa      	ldrb	r2, [r7, #23]
 800efc2:	79fb      	ldrb	r3, [r7, #7]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d3d3      	bcc.n	800ef70 <IntToUnicode+0x18>
  }
}
 800efc8:	bf00      	nop
 800efca:	bf00      	nop
 800efcc:	371c      	adds	r7, #28
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr
	...

0800efd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b08a      	sub	sp, #40	; 0x28
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800efe0:	f107 0314 	add.w	r3, r7, #20
 800efe4:	2200      	movs	r2, #0
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	605a      	str	r2, [r3, #4]
 800efea:	609a      	str	r2, [r3, #8]
 800efec:	60da      	str	r2, [r3, #12]
 800efee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eff8:	d13a      	bne.n	800f070 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800effa:	2300      	movs	r3, #0
 800effc:	613b      	str	r3, [r7, #16]
 800effe:	4b1e      	ldr	r3, [pc, #120]	; (800f078 <HAL_PCD_MspInit+0xa0>)
 800f000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f002:	4a1d      	ldr	r2, [pc, #116]	; (800f078 <HAL_PCD_MspInit+0xa0>)
 800f004:	f043 0301 	orr.w	r3, r3, #1
 800f008:	6313      	str	r3, [r2, #48]	; 0x30
 800f00a:	4b1b      	ldr	r3, [pc, #108]	; (800f078 <HAL_PCD_MspInit+0xa0>)
 800f00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f00e:	f003 0301 	and.w	r3, r3, #1
 800f012:	613b      	str	r3, [r7, #16]
 800f014:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f016:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f01a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f01c:	2302      	movs	r3, #2
 800f01e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f020:	2300      	movs	r3, #0
 800f022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f024:	2303      	movs	r3, #3
 800f026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f028:	230a      	movs	r3, #10
 800f02a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f02c:	f107 0314 	add.w	r3, r7, #20
 800f030:	4619      	mov	r1, r3
 800f032:	4812      	ldr	r0, [pc, #72]	; (800f07c <HAL_PCD_MspInit+0xa4>)
 800f034:	f7f4 ff58 	bl	8003ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f038:	4b0f      	ldr	r3, [pc, #60]	; (800f078 <HAL_PCD_MspInit+0xa0>)
 800f03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f03c:	4a0e      	ldr	r2, [pc, #56]	; (800f078 <HAL_PCD_MspInit+0xa0>)
 800f03e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f042:	6353      	str	r3, [r2, #52]	; 0x34
 800f044:	2300      	movs	r3, #0
 800f046:	60fb      	str	r3, [r7, #12]
 800f048:	4b0b      	ldr	r3, [pc, #44]	; (800f078 <HAL_PCD_MspInit+0xa0>)
 800f04a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f04c:	4a0a      	ldr	r2, [pc, #40]	; (800f078 <HAL_PCD_MspInit+0xa0>)
 800f04e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f052:	6453      	str	r3, [r2, #68]	; 0x44
 800f054:	4b08      	ldr	r3, [pc, #32]	; (800f078 <HAL_PCD_MspInit+0xa0>)
 800f056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f05c:	60fb      	str	r3, [r7, #12]
 800f05e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f060:	2200      	movs	r2, #0
 800f062:	2105      	movs	r1, #5
 800f064:	2043      	movs	r0, #67	; 0x43
 800f066:	f7f4 fac1 	bl	80035ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f06a:	2043      	movs	r0, #67	; 0x43
 800f06c:	f7f4 fada 	bl	8003624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f070:	bf00      	nop
 800f072:	3728      	adds	r7, #40	; 0x28
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	40023800 	.word	0x40023800
 800f07c:	40020000 	.word	0x40020000

0800f080 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f094:	4619      	mov	r1, r3
 800f096:	4610      	mov	r0, r2
 800f098:	f7fb fdc1 	bl	800ac1e <USBD_LL_SetupStage>
}
 800f09c:	bf00      	nop
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f0b6:	78fa      	ldrb	r2, [r7, #3]
 800f0b8:	6879      	ldr	r1, [r7, #4]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	00db      	lsls	r3, r3, #3
 800f0be:	4413      	add	r3, r2
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	440b      	add	r3, r1
 800f0c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	78fb      	ldrb	r3, [r7, #3]
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	f7fb fdfb 	bl	800acc8 <USBD_LL_DataOutStage>
}
 800f0d2:	bf00      	nop
 800f0d4:	3708      	adds	r7, #8
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}

0800f0da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0da:	b580      	push	{r7, lr}
 800f0dc:	b082      	sub	sp, #8
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	6078      	str	r0, [r7, #4]
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f0ec:	78fa      	ldrb	r2, [r7, #3]
 800f0ee:	6879      	ldr	r1, [r7, #4]
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	00db      	lsls	r3, r3, #3
 800f0f4:	4413      	add	r3, r2
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	440b      	add	r3, r1
 800f0fa:	334c      	adds	r3, #76	; 0x4c
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	78fb      	ldrb	r3, [r7, #3]
 800f100:	4619      	mov	r1, r3
 800f102:	f7fb fe94 	bl	800ae2e <USBD_LL_DataInStage>
}
 800f106:	bf00      	nop
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b082      	sub	sp, #8
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7fb ffc8 	bl	800b0b2 <USBD_LL_SOF>
}
 800f122:	bf00      	nop
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b084      	sub	sp, #16
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f132:	2301      	movs	r3, #1
 800f134:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d102      	bne.n	800f144 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f13e:	2300      	movs	r3, #0
 800f140:	73fb      	strb	r3, [r7, #15]
 800f142:	e008      	b.n	800f156 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	2b02      	cmp	r3, #2
 800f14a:	d102      	bne.n	800f152 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f14c:	2301      	movs	r3, #1
 800f14e:	73fb      	strb	r3, [r7, #15]
 800f150:	e001      	b.n	800f156 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f152:	f7f2 f96b 	bl	800142c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f15c:	7bfa      	ldrb	r2, [r7, #15]
 800f15e:	4611      	mov	r1, r2
 800f160:	4618      	mov	r0, r3
 800f162:	f7fb ff68 	bl	800b036 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7fb ff10 	bl	800af92 <USBD_LL_Reset>
}
 800f172:	bf00      	nop
 800f174:	3710      	adds	r7, #16
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
	...

0800f17c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fb ff63 	bl	800b056 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	6812      	ldr	r2, [r2, #0]
 800f19e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f1a2:	f043 0301 	orr.w	r3, r3, #1
 800f1a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6a1b      	ldr	r3, [r3, #32]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d005      	beq.n	800f1bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f1b0:	4b04      	ldr	r3, [pc, #16]	; (800f1c4 <HAL_PCD_SuspendCallback+0x48>)
 800f1b2:	691b      	ldr	r3, [r3, #16]
 800f1b4:	4a03      	ldr	r2, [pc, #12]	; (800f1c4 <HAL_PCD_SuspendCallback+0x48>)
 800f1b6:	f043 0306 	orr.w	r3, r3, #6
 800f1ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f1bc:	bf00      	nop
 800f1be:	3708      	adds	r7, #8
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	e000ed00 	.word	0xe000ed00

0800f1c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fb ff53 	bl	800b082 <USBD_LL_Resume>
}
 800f1dc:	bf00      	nop
 800f1de:	3708      	adds	r7, #8
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f1f6:	78fa      	ldrb	r2, [r7, #3]
 800f1f8:	4611      	mov	r1, r2
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fb ffab 	bl	800b156 <USBD_LL_IsoOUTIncomplete>
}
 800f200:	bf00      	nop
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f21a:	78fa      	ldrb	r2, [r7, #3]
 800f21c:	4611      	mov	r1, r2
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fb ff67 	bl	800b0f2 <USBD_LL_IsoINIncomplete>
}
 800f224:	bf00      	nop
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fb ffbd 	bl	800b1ba <USBD_LL_DevConnected>
}
 800f240:	bf00      	nop
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f256:	4618      	mov	r0, r3
 800f258:	f7fb ffba 	bl	800b1d0 <USBD_LL_DevDisconnected>
}
 800f25c:	bf00      	nop
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d13c      	bne.n	800f2ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f274:	4a20      	ldr	r2, [pc, #128]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4a1e      	ldr	r2, [pc, #120]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f280:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f284:	4b1c      	ldr	r3, [pc, #112]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f286:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f28a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f28c:	4b1a      	ldr	r3, [pc, #104]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f28e:	2204      	movs	r2, #4
 800f290:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f292:	4b19      	ldr	r3, [pc, #100]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f294:	2202      	movs	r2, #2
 800f296:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f298:	4b17      	ldr	r3, [pc, #92]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f29a:	2200      	movs	r2, #0
 800f29c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f29e:	4b16      	ldr	r3, [pc, #88]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f2a0:	2202      	movs	r2, #2
 800f2a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f2a4:	4b14      	ldr	r3, [pc, #80]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f2aa:	4b13      	ldr	r3, [pc, #76]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f2b0:	4b11      	ldr	r3, [pc, #68]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f2b6:	4b10      	ldr	r3, [pc, #64]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f2bc:	4b0e      	ldr	r3, [pc, #56]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f2c2:	480d      	ldr	r0, [pc, #52]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f2c4:	f7f5 fd7b 	bl	8004dbe <HAL_PCD_Init>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d001      	beq.n	800f2d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f2ce:	f7f2 f8ad 	bl	800142c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f2d2:	2180      	movs	r1, #128	; 0x80
 800f2d4:	4808      	ldr	r0, [pc, #32]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f2d6:	f7f6 ffd2 	bl	800627e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f2da:	2240      	movs	r2, #64	; 0x40
 800f2dc:	2100      	movs	r1, #0
 800f2de:	4806      	ldr	r0, [pc, #24]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f2e0:	f7f6 ff86 	bl	80061f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f2e4:	2280      	movs	r2, #128	; 0x80
 800f2e6:	2101      	movs	r1, #1
 800f2e8:	4803      	ldr	r0, [pc, #12]	; (800f2f8 <USBD_LL_Init+0x94>)
 800f2ea:	f7f6 ff81 	bl	80061f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f2ee:	2300      	movs	r3, #0
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	20006590 	.word	0x20006590

0800f2fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f304:	2300      	movs	r3, #0
 800f306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f308:	2300      	movs	r3, #0
 800f30a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f312:	4618      	mov	r0, r3
 800f314:	f7f5 fe70 	bl	8004ff8 <HAL_PCD_Start>
 800f318:	4603      	mov	r3, r0
 800f31a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f31c:	7bfb      	ldrb	r3, [r7, #15]
 800f31e:	4618      	mov	r0, r3
 800f320:	f000 f942 	bl	800f5a8 <USBD_Get_USB_Status>
 800f324:	4603      	mov	r3, r0
 800f326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f328:	7bbb      	ldrb	r3, [r7, #14]
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f332:	b580      	push	{r7, lr}
 800f334:	b084      	sub	sp, #16
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
 800f33a:	4608      	mov	r0, r1
 800f33c:	4611      	mov	r1, r2
 800f33e:	461a      	mov	r2, r3
 800f340:	4603      	mov	r3, r0
 800f342:	70fb      	strb	r3, [r7, #3]
 800f344:	460b      	mov	r3, r1
 800f346:	70bb      	strb	r3, [r7, #2]
 800f348:	4613      	mov	r3, r2
 800f34a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f34c:	2300      	movs	r3, #0
 800f34e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f350:	2300      	movs	r3, #0
 800f352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f35a:	78bb      	ldrb	r3, [r7, #2]
 800f35c:	883a      	ldrh	r2, [r7, #0]
 800f35e:	78f9      	ldrb	r1, [r7, #3]
 800f360:	f7f6 fb41 	bl	80059e6 <HAL_PCD_EP_Open>
 800f364:	4603      	mov	r3, r0
 800f366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f368:	7bfb      	ldrb	r3, [r7, #15]
 800f36a:	4618      	mov	r0, r3
 800f36c:	f000 f91c 	bl	800f5a8 <USBD_Get_USB_Status>
 800f370:	4603      	mov	r3, r0
 800f372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f374:	7bbb      	ldrb	r3, [r7, #14]
}
 800f376:	4618      	mov	r0, r3
 800f378:	3710      	adds	r7, #16
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}

0800f37e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f37e:	b580      	push	{r7, lr}
 800f380:	b084      	sub	sp, #16
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
 800f386:	460b      	mov	r3, r1
 800f388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f38a:	2300      	movs	r3, #0
 800f38c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f38e:	2300      	movs	r3, #0
 800f390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f398:	78fa      	ldrb	r2, [r7, #3]
 800f39a:	4611      	mov	r1, r2
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7f6 fb8a 	bl	8005ab6 <HAL_PCD_EP_Close>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3a6:	7bfb      	ldrb	r3, [r7, #15]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f000 f8fd 	bl	800f5a8 <USBD_Get_USB_Status>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b084      	sub	sp, #16
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f3d6:	78fa      	ldrb	r2, [r7, #3]
 800f3d8:	4611      	mov	r1, r2
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7f6 fc62 	bl	8005ca4 <HAL_PCD_EP_SetStall>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3e4:	7bfb      	ldrb	r3, [r7, #15]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f000 f8de 	bl	800f5a8 <USBD_Get_USB_Status>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3710      	adds	r7, #16
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b084      	sub	sp, #16
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
 800f402:	460b      	mov	r3, r1
 800f404:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f406:	2300      	movs	r3, #0
 800f408:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f40a:	2300      	movs	r3, #0
 800f40c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f414:	78fa      	ldrb	r2, [r7, #3]
 800f416:	4611      	mov	r1, r2
 800f418:	4618      	mov	r0, r3
 800f41a:	f7f6 fca7 	bl	8005d6c <HAL_PCD_EP_ClrStall>
 800f41e:	4603      	mov	r3, r0
 800f420:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f422:	7bfb      	ldrb	r3, [r7, #15]
 800f424:	4618      	mov	r0, r3
 800f426:	f000 f8bf 	bl	800f5a8 <USBD_Get_USB_Status>
 800f42a:	4603      	mov	r3, r0
 800f42c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f42e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f430:	4618      	mov	r0, r3
 800f432:	3710      	adds	r7, #16
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f44a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f44c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f450:	2b00      	cmp	r3, #0
 800f452:	da0b      	bge.n	800f46c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f454:	78fb      	ldrb	r3, [r7, #3]
 800f456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f45a:	68f9      	ldr	r1, [r7, #12]
 800f45c:	4613      	mov	r3, r2
 800f45e:	00db      	lsls	r3, r3, #3
 800f460:	4413      	add	r3, r2
 800f462:	009b      	lsls	r3, r3, #2
 800f464:	440b      	add	r3, r1
 800f466:	333e      	adds	r3, #62	; 0x3e
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	e00b      	b.n	800f484 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f46c:	78fb      	ldrb	r3, [r7, #3]
 800f46e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f472:	68f9      	ldr	r1, [r7, #12]
 800f474:	4613      	mov	r3, r2
 800f476:	00db      	lsls	r3, r3, #3
 800f478:	4413      	add	r3, r2
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	440b      	add	r3, r1
 800f47e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f482:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f484:	4618      	mov	r0, r3
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b084      	sub	sp, #16
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	460b      	mov	r3, r1
 800f49a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f49c:	2300      	movs	r3, #0
 800f49e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f4aa:	78fa      	ldrb	r2, [r7, #3]
 800f4ac:	4611      	mov	r1, r2
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7f6 fa74 	bl	800599c <HAL_PCD_SetAddress>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4b8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f000 f874 	bl	800f5a8 <USBD_Get_USB_Status>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}

0800f4ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b086      	sub	sp, #24
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	60f8      	str	r0, [r7, #12]
 800f4d6:	607a      	str	r2, [r7, #4]
 800f4d8:	603b      	str	r3, [r7, #0]
 800f4da:	460b      	mov	r3, r1
 800f4dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f4ec:	7af9      	ldrb	r1, [r7, #11]
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	f7f6 fb8d 	bl	8005c10 <HAL_PCD_EP_Transmit>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4fa:	7dfb      	ldrb	r3, [r7, #23]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f000 f853 	bl	800f5a8 <USBD_Get_USB_Status>
 800f502:	4603      	mov	r3, r0
 800f504:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f506:	7dbb      	ldrb	r3, [r7, #22]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3718      	adds	r7, #24
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b086      	sub	sp, #24
 800f514:	af00      	add	r7, sp, #0
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	607a      	str	r2, [r7, #4]
 800f51a:	603b      	str	r3, [r7, #0]
 800f51c:	460b      	mov	r3, r1
 800f51e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f520:	2300      	movs	r3, #0
 800f522:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f524:	2300      	movs	r3, #0
 800f526:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f52e:	7af9      	ldrb	r1, [r7, #11]
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	f7f6 fb09 	bl	8005b4a <HAL_PCD_EP_Receive>
 800f538:	4603      	mov	r3, r0
 800f53a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f53c:	7dfb      	ldrb	r3, [r7, #23]
 800f53e:	4618      	mov	r0, r3
 800f540:	f000 f832 	bl	800f5a8 <USBD_Get_USB_Status>
 800f544:	4603      	mov	r3, r0
 800f546:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f548:	7dbb      	ldrb	r3, [r7, #22]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3718      	adds	r7, #24
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b082      	sub	sp, #8
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	460b      	mov	r3, r1
 800f55c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f564:	78fa      	ldrb	r2, [r7, #3]
 800f566:	4611      	mov	r1, r2
 800f568:	4618      	mov	r0, r3
 800f56a:	f7f6 fb39 	bl	8005be0 <HAL_PCD_EP_GetRxCount>
 800f56e:	4603      	mov	r3, r0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f580:	4b03      	ldr	r3, [pc, #12]	; (800f590 <USBD_static_malloc+0x18>)
}
 800f582:	4618      	mov	r0, r3
 800f584:	370c      	adds	r7, #12
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr
 800f58e:	bf00      	nop
 800f590:	20006a9c 	.word	0x20006a9c

0800f594 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]

}
 800f59c:	bf00      	nop
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b085      	sub	sp, #20
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f5b6:	79fb      	ldrb	r3, [r7, #7]
 800f5b8:	2b03      	cmp	r3, #3
 800f5ba:	d817      	bhi.n	800f5ec <USBD_Get_USB_Status+0x44>
 800f5bc:	a201      	add	r2, pc, #4	; (adr r2, 800f5c4 <USBD_Get_USB_Status+0x1c>)
 800f5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c2:	bf00      	nop
 800f5c4:	0800f5d5 	.word	0x0800f5d5
 800f5c8:	0800f5db 	.word	0x0800f5db
 800f5cc:	0800f5e1 	.word	0x0800f5e1
 800f5d0:	0800f5e7 	.word	0x0800f5e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800f5d8:	e00b      	b.n	800f5f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f5da:	2303      	movs	r3, #3
 800f5dc:	73fb      	strb	r3, [r7, #15]
    break;
 800f5de:	e008      	b.n	800f5f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800f5e4:	e005      	b.n	800f5f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f5e6:	2303      	movs	r3, #3
 800f5e8:	73fb      	strb	r3, [r7, #15]
    break;
 800f5ea:	e002      	b.n	800f5f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f5ec:	2303      	movs	r3, #3
 800f5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800f5f0:	bf00      	nop
  }
  return usb_status;
 800f5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3714      	adds	r7, #20
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fe:	4770      	bx	lr

0800f600 <__cvt>:
 800f600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f604:	ec55 4b10 	vmov	r4, r5, d0
 800f608:	2d00      	cmp	r5, #0
 800f60a:	460e      	mov	r6, r1
 800f60c:	4619      	mov	r1, r3
 800f60e:	462b      	mov	r3, r5
 800f610:	bfbb      	ittet	lt
 800f612:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f616:	461d      	movlt	r5, r3
 800f618:	2300      	movge	r3, #0
 800f61a:	232d      	movlt	r3, #45	; 0x2d
 800f61c:	700b      	strb	r3, [r1, #0]
 800f61e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f620:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f624:	4691      	mov	r9, r2
 800f626:	f023 0820 	bic.w	r8, r3, #32
 800f62a:	bfbc      	itt	lt
 800f62c:	4622      	movlt	r2, r4
 800f62e:	4614      	movlt	r4, r2
 800f630:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f634:	d005      	beq.n	800f642 <__cvt+0x42>
 800f636:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f63a:	d100      	bne.n	800f63e <__cvt+0x3e>
 800f63c:	3601      	adds	r6, #1
 800f63e:	2102      	movs	r1, #2
 800f640:	e000      	b.n	800f644 <__cvt+0x44>
 800f642:	2103      	movs	r1, #3
 800f644:	ab03      	add	r3, sp, #12
 800f646:	9301      	str	r3, [sp, #4]
 800f648:	ab02      	add	r3, sp, #8
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	ec45 4b10 	vmov	d0, r4, r5
 800f650:	4653      	mov	r3, sl
 800f652:	4632      	mov	r2, r6
 800f654:	f000 fe78 	bl	8010348 <_dtoa_r>
 800f658:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f65c:	4607      	mov	r7, r0
 800f65e:	d102      	bne.n	800f666 <__cvt+0x66>
 800f660:	f019 0f01 	tst.w	r9, #1
 800f664:	d022      	beq.n	800f6ac <__cvt+0xac>
 800f666:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f66a:	eb07 0906 	add.w	r9, r7, r6
 800f66e:	d110      	bne.n	800f692 <__cvt+0x92>
 800f670:	783b      	ldrb	r3, [r7, #0]
 800f672:	2b30      	cmp	r3, #48	; 0x30
 800f674:	d10a      	bne.n	800f68c <__cvt+0x8c>
 800f676:	2200      	movs	r2, #0
 800f678:	2300      	movs	r3, #0
 800f67a:	4620      	mov	r0, r4
 800f67c:	4629      	mov	r1, r5
 800f67e:	f7f1 fa33 	bl	8000ae8 <__aeabi_dcmpeq>
 800f682:	b918      	cbnz	r0, 800f68c <__cvt+0x8c>
 800f684:	f1c6 0601 	rsb	r6, r6, #1
 800f688:	f8ca 6000 	str.w	r6, [sl]
 800f68c:	f8da 3000 	ldr.w	r3, [sl]
 800f690:	4499      	add	r9, r3
 800f692:	2200      	movs	r2, #0
 800f694:	2300      	movs	r3, #0
 800f696:	4620      	mov	r0, r4
 800f698:	4629      	mov	r1, r5
 800f69a:	f7f1 fa25 	bl	8000ae8 <__aeabi_dcmpeq>
 800f69e:	b108      	cbz	r0, 800f6a4 <__cvt+0xa4>
 800f6a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f6a4:	2230      	movs	r2, #48	; 0x30
 800f6a6:	9b03      	ldr	r3, [sp, #12]
 800f6a8:	454b      	cmp	r3, r9
 800f6aa:	d307      	bcc.n	800f6bc <__cvt+0xbc>
 800f6ac:	9b03      	ldr	r3, [sp, #12]
 800f6ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6b0:	1bdb      	subs	r3, r3, r7
 800f6b2:	4638      	mov	r0, r7
 800f6b4:	6013      	str	r3, [r2, #0]
 800f6b6:	b004      	add	sp, #16
 800f6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6bc:	1c59      	adds	r1, r3, #1
 800f6be:	9103      	str	r1, [sp, #12]
 800f6c0:	701a      	strb	r2, [r3, #0]
 800f6c2:	e7f0      	b.n	800f6a6 <__cvt+0xa6>

0800f6c4 <__exponent>:
 800f6c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	2900      	cmp	r1, #0
 800f6ca:	bfb8      	it	lt
 800f6cc:	4249      	neglt	r1, r1
 800f6ce:	f803 2b02 	strb.w	r2, [r3], #2
 800f6d2:	bfb4      	ite	lt
 800f6d4:	222d      	movlt	r2, #45	; 0x2d
 800f6d6:	222b      	movge	r2, #43	; 0x2b
 800f6d8:	2909      	cmp	r1, #9
 800f6da:	7042      	strb	r2, [r0, #1]
 800f6dc:	dd2a      	ble.n	800f734 <__exponent+0x70>
 800f6de:	f10d 0207 	add.w	r2, sp, #7
 800f6e2:	4617      	mov	r7, r2
 800f6e4:	260a      	movs	r6, #10
 800f6e6:	4694      	mov	ip, r2
 800f6e8:	fb91 f5f6 	sdiv	r5, r1, r6
 800f6ec:	fb06 1415 	mls	r4, r6, r5, r1
 800f6f0:	3430      	adds	r4, #48	; 0x30
 800f6f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f6f6:	460c      	mov	r4, r1
 800f6f8:	2c63      	cmp	r4, #99	; 0x63
 800f6fa:	f102 32ff 	add.w	r2, r2, #4294967295
 800f6fe:	4629      	mov	r1, r5
 800f700:	dcf1      	bgt.n	800f6e6 <__exponent+0x22>
 800f702:	3130      	adds	r1, #48	; 0x30
 800f704:	f1ac 0402 	sub.w	r4, ip, #2
 800f708:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f70c:	1c41      	adds	r1, r0, #1
 800f70e:	4622      	mov	r2, r4
 800f710:	42ba      	cmp	r2, r7
 800f712:	d30a      	bcc.n	800f72a <__exponent+0x66>
 800f714:	f10d 0209 	add.w	r2, sp, #9
 800f718:	eba2 020c 	sub.w	r2, r2, ip
 800f71c:	42bc      	cmp	r4, r7
 800f71e:	bf88      	it	hi
 800f720:	2200      	movhi	r2, #0
 800f722:	4413      	add	r3, r2
 800f724:	1a18      	subs	r0, r3, r0
 800f726:	b003      	add	sp, #12
 800f728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f72a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f72e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f732:	e7ed      	b.n	800f710 <__exponent+0x4c>
 800f734:	2330      	movs	r3, #48	; 0x30
 800f736:	3130      	adds	r1, #48	; 0x30
 800f738:	7083      	strb	r3, [r0, #2]
 800f73a:	70c1      	strb	r1, [r0, #3]
 800f73c:	1d03      	adds	r3, r0, #4
 800f73e:	e7f1      	b.n	800f724 <__exponent+0x60>

0800f740 <_printf_float>:
 800f740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f744:	ed2d 8b02 	vpush	{d8}
 800f748:	b08d      	sub	sp, #52	; 0x34
 800f74a:	460c      	mov	r4, r1
 800f74c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f750:	4616      	mov	r6, r2
 800f752:	461f      	mov	r7, r3
 800f754:	4605      	mov	r5, r0
 800f756:	f000 fce7 	bl	8010128 <_localeconv_r>
 800f75a:	f8d0 a000 	ldr.w	sl, [r0]
 800f75e:	4650      	mov	r0, sl
 800f760:	f7f0 fd96 	bl	8000290 <strlen>
 800f764:	2300      	movs	r3, #0
 800f766:	930a      	str	r3, [sp, #40]	; 0x28
 800f768:	6823      	ldr	r3, [r4, #0]
 800f76a:	9305      	str	r3, [sp, #20]
 800f76c:	f8d8 3000 	ldr.w	r3, [r8]
 800f770:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f774:	3307      	adds	r3, #7
 800f776:	f023 0307 	bic.w	r3, r3, #7
 800f77a:	f103 0208 	add.w	r2, r3, #8
 800f77e:	f8c8 2000 	str.w	r2, [r8]
 800f782:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f786:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f78a:	9307      	str	r3, [sp, #28]
 800f78c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f790:	ee08 0a10 	vmov	s16, r0
 800f794:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f798:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f79c:	4b9e      	ldr	r3, [pc, #632]	; (800fa18 <_printf_float+0x2d8>)
 800f79e:	f04f 32ff 	mov.w	r2, #4294967295
 800f7a2:	f7f1 f9d3 	bl	8000b4c <__aeabi_dcmpun>
 800f7a6:	bb88      	cbnz	r0, 800f80c <_printf_float+0xcc>
 800f7a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7ac:	4b9a      	ldr	r3, [pc, #616]	; (800fa18 <_printf_float+0x2d8>)
 800f7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f7b2:	f7f1 f9ad 	bl	8000b10 <__aeabi_dcmple>
 800f7b6:	bb48      	cbnz	r0, 800f80c <_printf_float+0xcc>
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	4640      	mov	r0, r8
 800f7be:	4649      	mov	r1, r9
 800f7c0:	f7f1 f99c 	bl	8000afc <__aeabi_dcmplt>
 800f7c4:	b110      	cbz	r0, 800f7cc <_printf_float+0x8c>
 800f7c6:	232d      	movs	r3, #45	; 0x2d
 800f7c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7cc:	4a93      	ldr	r2, [pc, #588]	; (800fa1c <_printf_float+0x2dc>)
 800f7ce:	4b94      	ldr	r3, [pc, #592]	; (800fa20 <_printf_float+0x2e0>)
 800f7d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f7d4:	bf94      	ite	ls
 800f7d6:	4690      	movls	r8, r2
 800f7d8:	4698      	movhi	r8, r3
 800f7da:	2303      	movs	r3, #3
 800f7dc:	6123      	str	r3, [r4, #16]
 800f7de:	9b05      	ldr	r3, [sp, #20]
 800f7e0:	f023 0304 	bic.w	r3, r3, #4
 800f7e4:	6023      	str	r3, [r4, #0]
 800f7e6:	f04f 0900 	mov.w	r9, #0
 800f7ea:	9700      	str	r7, [sp, #0]
 800f7ec:	4633      	mov	r3, r6
 800f7ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	f000 f9da 	bl	800fbac <_printf_common>
 800f7f8:	3001      	adds	r0, #1
 800f7fa:	f040 8090 	bne.w	800f91e <_printf_float+0x1de>
 800f7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f802:	b00d      	add	sp, #52	; 0x34
 800f804:	ecbd 8b02 	vpop	{d8}
 800f808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f80c:	4642      	mov	r2, r8
 800f80e:	464b      	mov	r3, r9
 800f810:	4640      	mov	r0, r8
 800f812:	4649      	mov	r1, r9
 800f814:	f7f1 f99a 	bl	8000b4c <__aeabi_dcmpun>
 800f818:	b140      	cbz	r0, 800f82c <_printf_float+0xec>
 800f81a:	464b      	mov	r3, r9
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	bfbc      	itt	lt
 800f820:	232d      	movlt	r3, #45	; 0x2d
 800f822:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f826:	4a7f      	ldr	r2, [pc, #508]	; (800fa24 <_printf_float+0x2e4>)
 800f828:	4b7f      	ldr	r3, [pc, #508]	; (800fa28 <_printf_float+0x2e8>)
 800f82a:	e7d1      	b.n	800f7d0 <_printf_float+0x90>
 800f82c:	6863      	ldr	r3, [r4, #4]
 800f82e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f832:	9206      	str	r2, [sp, #24]
 800f834:	1c5a      	adds	r2, r3, #1
 800f836:	d13f      	bne.n	800f8b8 <_printf_float+0x178>
 800f838:	2306      	movs	r3, #6
 800f83a:	6063      	str	r3, [r4, #4]
 800f83c:	9b05      	ldr	r3, [sp, #20]
 800f83e:	6861      	ldr	r1, [r4, #4]
 800f840:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f844:	2300      	movs	r3, #0
 800f846:	9303      	str	r3, [sp, #12]
 800f848:	ab0a      	add	r3, sp, #40	; 0x28
 800f84a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f84e:	ab09      	add	r3, sp, #36	; 0x24
 800f850:	ec49 8b10 	vmov	d0, r8, r9
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	6022      	str	r2, [r4, #0]
 800f858:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f85c:	4628      	mov	r0, r5
 800f85e:	f7ff fecf 	bl	800f600 <__cvt>
 800f862:	9b06      	ldr	r3, [sp, #24]
 800f864:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f866:	2b47      	cmp	r3, #71	; 0x47
 800f868:	4680      	mov	r8, r0
 800f86a:	d108      	bne.n	800f87e <_printf_float+0x13e>
 800f86c:	1cc8      	adds	r0, r1, #3
 800f86e:	db02      	blt.n	800f876 <_printf_float+0x136>
 800f870:	6863      	ldr	r3, [r4, #4]
 800f872:	4299      	cmp	r1, r3
 800f874:	dd41      	ble.n	800f8fa <_printf_float+0x1ba>
 800f876:	f1ab 0302 	sub.w	r3, fp, #2
 800f87a:	fa5f fb83 	uxtb.w	fp, r3
 800f87e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f882:	d820      	bhi.n	800f8c6 <_printf_float+0x186>
 800f884:	3901      	subs	r1, #1
 800f886:	465a      	mov	r2, fp
 800f888:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f88c:	9109      	str	r1, [sp, #36]	; 0x24
 800f88e:	f7ff ff19 	bl	800f6c4 <__exponent>
 800f892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f894:	1813      	adds	r3, r2, r0
 800f896:	2a01      	cmp	r2, #1
 800f898:	4681      	mov	r9, r0
 800f89a:	6123      	str	r3, [r4, #16]
 800f89c:	dc02      	bgt.n	800f8a4 <_printf_float+0x164>
 800f89e:	6822      	ldr	r2, [r4, #0]
 800f8a0:	07d2      	lsls	r2, r2, #31
 800f8a2:	d501      	bpl.n	800f8a8 <_printf_float+0x168>
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	6123      	str	r3, [r4, #16]
 800f8a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d09c      	beq.n	800f7ea <_printf_float+0xaa>
 800f8b0:	232d      	movs	r3, #45	; 0x2d
 800f8b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8b6:	e798      	b.n	800f7ea <_printf_float+0xaa>
 800f8b8:	9a06      	ldr	r2, [sp, #24]
 800f8ba:	2a47      	cmp	r2, #71	; 0x47
 800f8bc:	d1be      	bne.n	800f83c <_printf_float+0xfc>
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1bc      	bne.n	800f83c <_printf_float+0xfc>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e7b9      	b.n	800f83a <_printf_float+0xfa>
 800f8c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f8ca:	d118      	bne.n	800f8fe <_printf_float+0x1be>
 800f8cc:	2900      	cmp	r1, #0
 800f8ce:	6863      	ldr	r3, [r4, #4]
 800f8d0:	dd0b      	ble.n	800f8ea <_printf_float+0x1aa>
 800f8d2:	6121      	str	r1, [r4, #16]
 800f8d4:	b913      	cbnz	r3, 800f8dc <_printf_float+0x19c>
 800f8d6:	6822      	ldr	r2, [r4, #0]
 800f8d8:	07d0      	lsls	r0, r2, #31
 800f8da:	d502      	bpl.n	800f8e2 <_printf_float+0x1a2>
 800f8dc:	3301      	adds	r3, #1
 800f8de:	440b      	add	r3, r1
 800f8e0:	6123      	str	r3, [r4, #16]
 800f8e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800f8e4:	f04f 0900 	mov.w	r9, #0
 800f8e8:	e7de      	b.n	800f8a8 <_printf_float+0x168>
 800f8ea:	b913      	cbnz	r3, 800f8f2 <_printf_float+0x1b2>
 800f8ec:	6822      	ldr	r2, [r4, #0]
 800f8ee:	07d2      	lsls	r2, r2, #31
 800f8f0:	d501      	bpl.n	800f8f6 <_printf_float+0x1b6>
 800f8f2:	3302      	adds	r3, #2
 800f8f4:	e7f4      	b.n	800f8e0 <_printf_float+0x1a0>
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e7f2      	b.n	800f8e0 <_printf_float+0x1a0>
 800f8fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f8fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f900:	4299      	cmp	r1, r3
 800f902:	db05      	blt.n	800f910 <_printf_float+0x1d0>
 800f904:	6823      	ldr	r3, [r4, #0]
 800f906:	6121      	str	r1, [r4, #16]
 800f908:	07d8      	lsls	r0, r3, #31
 800f90a:	d5ea      	bpl.n	800f8e2 <_printf_float+0x1a2>
 800f90c:	1c4b      	adds	r3, r1, #1
 800f90e:	e7e7      	b.n	800f8e0 <_printf_float+0x1a0>
 800f910:	2900      	cmp	r1, #0
 800f912:	bfd4      	ite	le
 800f914:	f1c1 0202 	rsble	r2, r1, #2
 800f918:	2201      	movgt	r2, #1
 800f91a:	4413      	add	r3, r2
 800f91c:	e7e0      	b.n	800f8e0 <_printf_float+0x1a0>
 800f91e:	6823      	ldr	r3, [r4, #0]
 800f920:	055a      	lsls	r2, r3, #21
 800f922:	d407      	bmi.n	800f934 <_printf_float+0x1f4>
 800f924:	6923      	ldr	r3, [r4, #16]
 800f926:	4642      	mov	r2, r8
 800f928:	4631      	mov	r1, r6
 800f92a:	4628      	mov	r0, r5
 800f92c:	47b8      	blx	r7
 800f92e:	3001      	adds	r0, #1
 800f930:	d12c      	bne.n	800f98c <_printf_float+0x24c>
 800f932:	e764      	b.n	800f7fe <_printf_float+0xbe>
 800f934:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f938:	f240 80e0 	bls.w	800fafc <_printf_float+0x3bc>
 800f93c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f940:	2200      	movs	r2, #0
 800f942:	2300      	movs	r3, #0
 800f944:	f7f1 f8d0 	bl	8000ae8 <__aeabi_dcmpeq>
 800f948:	2800      	cmp	r0, #0
 800f94a:	d034      	beq.n	800f9b6 <_printf_float+0x276>
 800f94c:	4a37      	ldr	r2, [pc, #220]	; (800fa2c <_printf_float+0x2ec>)
 800f94e:	2301      	movs	r3, #1
 800f950:	4631      	mov	r1, r6
 800f952:	4628      	mov	r0, r5
 800f954:	47b8      	blx	r7
 800f956:	3001      	adds	r0, #1
 800f958:	f43f af51 	beq.w	800f7fe <_printf_float+0xbe>
 800f95c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f960:	429a      	cmp	r2, r3
 800f962:	db02      	blt.n	800f96a <_printf_float+0x22a>
 800f964:	6823      	ldr	r3, [r4, #0]
 800f966:	07d8      	lsls	r0, r3, #31
 800f968:	d510      	bpl.n	800f98c <_printf_float+0x24c>
 800f96a:	ee18 3a10 	vmov	r3, s16
 800f96e:	4652      	mov	r2, sl
 800f970:	4631      	mov	r1, r6
 800f972:	4628      	mov	r0, r5
 800f974:	47b8      	blx	r7
 800f976:	3001      	adds	r0, #1
 800f978:	f43f af41 	beq.w	800f7fe <_printf_float+0xbe>
 800f97c:	f04f 0800 	mov.w	r8, #0
 800f980:	f104 091a 	add.w	r9, r4, #26
 800f984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f986:	3b01      	subs	r3, #1
 800f988:	4543      	cmp	r3, r8
 800f98a:	dc09      	bgt.n	800f9a0 <_printf_float+0x260>
 800f98c:	6823      	ldr	r3, [r4, #0]
 800f98e:	079b      	lsls	r3, r3, #30
 800f990:	f100 8107 	bmi.w	800fba2 <_printf_float+0x462>
 800f994:	68e0      	ldr	r0, [r4, #12]
 800f996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f998:	4298      	cmp	r0, r3
 800f99a:	bfb8      	it	lt
 800f99c:	4618      	movlt	r0, r3
 800f99e:	e730      	b.n	800f802 <_printf_float+0xc2>
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	464a      	mov	r2, r9
 800f9a4:	4631      	mov	r1, r6
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	47b8      	blx	r7
 800f9aa:	3001      	adds	r0, #1
 800f9ac:	f43f af27 	beq.w	800f7fe <_printf_float+0xbe>
 800f9b0:	f108 0801 	add.w	r8, r8, #1
 800f9b4:	e7e6      	b.n	800f984 <_printf_float+0x244>
 800f9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	dc39      	bgt.n	800fa30 <_printf_float+0x2f0>
 800f9bc:	4a1b      	ldr	r2, [pc, #108]	; (800fa2c <_printf_float+0x2ec>)
 800f9be:	2301      	movs	r3, #1
 800f9c0:	4631      	mov	r1, r6
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	47b8      	blx	r7
 800f9c6:	3001      	adds	r0, #1
 800f9c8:	f43f af19 	beq.w	800f7fe <_printf_float+0xbe>
 800f9cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	d102      	bne.n	800f9da <_printf_float+0x29a>
 800f9d4:	6823      	ldr	r3, [r4, #0]
 800f9d6:	07d9      	lsls	r1, r3, #31
 800f9d8:	d5d8      	bpl.n	800f98c <_printf_float+0x24c>
 800f9da:	ee18 3a10 	vmov	r3, s16
 800f9de:	4652      	mov	r2, sl
 800f9e0:	4631      	mov	r1, r6
 800f9e2:	4628      	mov	r0, r5
 800f9e4:	47b8      	blx	r7
 800f9e6:	3001      	adds	r0, #1
 800f9e8:	f43f af09 	beq.w	800f7fe <_printf_float+0xbe>
 800f9ec:	f04f 0900 	mov.w	r9, #0
 800f9f0:	f104 0a1a 	add.w	sl, r4, #26
 800f9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9f6:	425b      	negs	r3, r3
 800f9f8:	454b      	cmp	r3, r9
 800f9fa:	dc01      	bgt.n	800fa00 <_printf_float+0x2c0>
 800f9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9fe:	e792      	b.n	800f926 <_printf_float+0x1e6>
 800fa00:	2301      	movs	r3, #1
 800fa02:	4652      	mov	r2, sl
 800fa04:	4631      	mov	r1, r6
 800fa06:	4628      	mov	r0, r5
 800fa08:	47b8      	blx	r7
 800fa0a:	3001      	adds	r0, #1
 800fa0c:	f43f aef7 	beq.w	800f7fe <_printf_float+0xbe>
 800fa10:	f109 0901 	add.w	r9, r9, #1
 800fa14:	e7ee      	b.n	800f9f4 <_printf_float+0x2b4>
 800fa16:	bf00      	nop
 800fa18:	7fefffff 	.word	0x7fefffff
 800fa1c:	08013ed0 	.word	0x08013ed0
 800fa20:	08013ed4 	.word	0x08013ed4
 800fa24:	08013ed8 	.word	0x08013ed8
 800fa28:	08013edc 	.word	0x08013edc
 800fa2c:	08013ee0 	.word	0x08013ee0
 800fa30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa34:	429a      	cmp	r2, r3
 800fa36:	bfa8      	it	ge
 800fa38:	461a      	movge	r2, r3
 800fa3a:	2a00      	cmp	r2, #0
 800fa3c:	4691      	mov	r9, r2
 800fa3e:	dc37      	bgt.n	800fab0 <_printf_float+0x370>
 800fa40:	f04f 0b00 	mov.w	fp, #0
 800fa44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa48:	f104 021a 	add.w	r2, r4, #26
 800fa4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa4e:	9305      	str	r3, [sp, #20]
 800fa50:	eba3 0309 	sub.w	r3, r3, r9
 800fa54:	455b      	cmp	r3, fp
 800fa56:	dc33      	bgt.n	800fac0 <_printf_float+0x380>
 800fa58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	db3b      	blt.n	800fad8 <_printf_float+0x398>
 800fa60:	6823      	ldr	r3, [r4, #0]
 800fa62:	07da      	lsls	r2, r3, #31
 800fa64:	d438      	bmi.n	800fad8 <_printf_float+0x398>
 800fa66:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fa6a:	eba2 0903 	sub.w	r9, r2, r3
 800fa6e:	9b05      	ldr	r3, [sp, #20]
 800fa70:	1ad2      	subs	r2, r2, r3
 800fa72:	4591      	cmp	r9, r2
 800fa74:	bfa8      	it	ge
 800fa76:	4691      	movge	r9, r2
 800fa78:	f1b9 0f00 	cmp.w	r9, #0
 800fa7c:	dc35      	bgt.n	800faea <_printf_float+0x3aa>
 800fa7e:	f04f 0800 	mov.w	r8, #0
 800fa82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa86:	f104 0a1a 	add.w	sl, r4, #26
 800fa8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa8e:	1a9b      	subs	r3, r3, r2
 800fa90:	eba3 0309 	sub.w	r3, r3, r9
 800fa94:	4543      	cmp	r3, r8
 800fa96:	f77f af79 	ble.w	800f98c <_printf_float+0x24c>
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	4652      	mov	r2, sl
 800fa9e:	4631      	mov	r1, r6
 800faa0:	4628      	mov	r0, r5
 800faa2:	47b8      	blx	r7
 800faa4:	3001      	adds	r0, #1
 800faa6:	f43f aeaa 	beq.w	800f7fe <_printf_float+0xbe>
 800faaa:	f108 0801 	add.w	r8, r8, #1
 800faae:	e7ec      	b.n	800fa8a <_printf_float+0x34a>
 800fab0:	4613      	mov	r3, r2
 800fab2:	4631      	mov	r1, r6
 800fab4:	4642      	mov	r2, r8
 800fab6:	4628      	mov	r0, r5
 800fab8:	47b8      	blx	r7
 800faba:	3001      	adds	r0, #1
 800fabc:	d1c0      	bne.n	800fa40 <_printf_float+0x300>
 800fabe:	e69e      	b.n	800f7fe <_printf_float+0xbe>
 800fac0:	2301      	movs	r3, #1
 800fac2:	4631      	mov	r1, r6
 800fac4:	4628      	mov	r0, r5
 800fac6:	9205      	str	r2, [sp, #20]
 800fac8:	47b8      	blx	r7
 800faca:	3001      	adds	r0, #1
 800facc:	f43f ae97 	beq.w	800f7fe <_printf_float+0xbe>
 800fad0:	9a05      	ldr	r2, [sp, #20]
 800fad2:	f10b 0b01 	add.w	fp, fp, #1
 800fad6:	e7b9      	b.n	800fa4c <_printf_float+0x30c>
 800fad8:	ee18 3a10 	vmov	r3, s16
 800fadc:	4652      	mov	r2, sl
 800fade:	4631      	mov	r1, r6
 800fae0:	4628      	mov	r0, r5
 800fae2:	47b8      	blx	r7
 800fae4:	3001      	adds	r0, #1
 800fae6:	d1be      	bne.n	800fa66 <_printf_float+0x326>
 800fae8:	e689      	b.n	800f7fe <_printf_float+0xbe>
 800faea:	9a05      	ldr	r2, [sp, #20]
 800faec:	464b      	mov	r3, r9
 800faee:	4442      	add	r2, r8
 800faf0:	4631      	mov	r1, r6
 800faf2:	4628      	mov	r0, r5
 800faf4:	47b8      	blx	r7
 800faf6:	3001      	adds	r0, #1
 800faf8:	d1c1      	bne.n	800fa7e <_printf_float+0x33e>
 800fafa:	e680      	b.n	800f7fe <_printf_float+0xbe>
 800fafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fafe:	2a01      	cmp	r2, #1
 800fb00:	dc01      	bgt.n	800fb06 <_printf_float+0x3c6>
 800fb02:	07db      	lsls	r3, r3, #31
 800fb04:	d53a      	bpl.n	800fb7c <_printf_float+0x43c>
 800fb06:	2301      	movs	r3, #1
 800fb08:	4642      	mov	r2, r8
 800fb0a:	4631      	mov	r1, r6
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	47b8      	blx	r7
 800fb10:	3001      	adds	r0, #1
 800fb12:	f43f ae74 	beq.w	800f7fe <_printf_float+0xbe>
 800fb16:	ee18 3a10 	vmov	r3, s16
 800fb1a:	4652      	mov	r2, sl
 800fb1c:	4631      	mov	r1, r6
 800fb1e:	4628      	mov	r0, r5
 800fb20:	47b8      	blx	r7
 800fb22:	3001      	adds	r0, #1
 800fb24:	f43f ae6b 	beq.w	800f7fe <_printf_float+0xbe>
 800fb28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	2300      	movs	r3, #0
 800fb30:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800fb34:	f7f0 ffd8 	bl	8000ae8 <__aeabi_dcmpeq>
 800fb38:	b9d8      	cbnz	r0, 800fb72 <_printf_float+0x432>
 800fb3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fb3e:	f108 0201 	add.w	r2, r8, #1
 800fb42:	4631      	mov	r1, r6
 800fb44:	4628      	mov	r0, r5
 800fb46:	47b8      	blx	r7
 800fb48:	3001      	adds	r0, #1
 800fb4a:	d10e      	bne.n	800fb6a <_printf_float+0x42a>
 800fb4c:	e657      	b.n	800f7fe <_printf_float+0xbe>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	4652      	mov	r2, sl
 800fb52:	4631      	mov	r1, r6
 800fb54:	4628      	mov	r0, r5
 800fb56:	47b8      	blx	r7
 800fb58:	3001      	adds	r0, #1
 800fb5a:	f43f ae50 	beq.w	800f7fe <_printf_float+0xbe>
 800fb5e:	f108 0801 	add.w	r8, r8, #1
 800fb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb64:	3b01      	subs	r3, #1
 800fb66:	4543      	cmp	r3, r8
 800fb68:	dcf1      	bgt.n	800fb4e <_printf_float+0x40e>
 800fb6a:	464b      	mov	r3, r9
 800fb6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fb70:	e6da      	b.n	800f928 <_printf_float+0x1e8>
 800fb72:	f04f 0800 	mov.w	r8, #0
 800fb76:	f104 0a1a 	add.w	sl, r4, #26
 800fb7a:	e7f2      	b.n	800fb62 <_printf_float+0x422>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	4642      	mov	r2, r8
 800fb80:	e7df      	b.n	800fb42 <_printf_float+0x402>
 800fb82:	2301      	movs	r3, #1
 800fb84:	464a      	mov	r2, r9
 800fb86:	4631      	mov	r1, r6
 800fb88:	4628      	mov	r0, r5
 800fb8a:	47b8      	blx	r7
 800fb8c:	3001      	adds	r0, #1
 800fb8e:	f43f ae36 	beq.w	800f7fe <_printf_float+0xbe>
 800fb92:	f108 0801 	add.w	r8, r8, #1
 800fb96:	68e3      	ldr	r3, [r4, #12]
 800fb98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb9a:	1a5b      	subs	r3, r3, r1
 800fb9c:	4543      	cmp	r3, r8
 800fb9e:	dcf0      	bgt.n	800fb82 <_printf_float+0x442>
 800fba0:	e6f8      	b.n	800f994 <_printf_float+0x254>
 800fba2:	f04f 0800 	mov.w	r8, #0
 800fba6:	f104 0919 	add.w	r9, r4, #25
 800fbaa:	e7f4      	b.n	800fb96 <_printf_float+0x456>

0800fbac <_printf_common>:
 800fbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbb0:	4616      	mov	r6, r2
 800fbb2:	4699      	mov	r9, r3
 800fbb4:	688a      	ldr	r2, [r1, #8]
 800fbb6:	690b      	ldr	r3, [r1, #16]
 800fbb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	bfb8      	it	lt
 800fbc0:	4613      	movlt	r3, r2
 800fbc2:	6033      	str	r3, [r6, #0]
 800fbc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fbc8:	4607      	mov	r7, r0
 800fbca:	460c      	mov	r4, r1
 800fbcc:	b10a      	cbz	r2, 800fbd2 <_printf_common+0x26>
 800fbce:	3301      	adds	r3, #1
 800fbd0:	6033      	str	r3, [r6, #0]
 800fbd2:	6823      	ldr	r3, [r4, #0]
 800fbd4:	0699      	lsls	r1, r3, #26
 800fbd6:	bf42      	ittt	mi
 800fbd8:	6833      	ldrmi	r3, [r6, #0]
 800fbda:	3302      	addmi	r3, #2
 800fbdc:	6033      	strmi	r3, [r6, #0]
 800fbde:	6825      	ldr	r5, [r4, #0]
 800fbe0:	f015 0506 	ands.w	r5, r5, #6
 800fbe4:	d106      	bne.n	800fbf4 <_printf_common+0x48>
 800fbe6:	f104 0a19 	add.w	sl, r4, #25
 800fbea:	68e3      	ldr	r3, [r4, #12]
 800fbec:	6832      	ldr	r2, [r6, #0]
 800fbee:	1a9b      	subs	r3, r3, r2
 800fbf0:	42ab      	cmp	r3, r5
 800fbf2:	dc26      	bgt.n	800fc42 <_printf_common+0x96>
 800fbf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fbf8:	1e13      	subs	r3, r2, #0
 800fbfa:	6822      	ldr	r2, [r4, #0]
 800fbfc:	bf18      	it	ne
 800fbfe:	2301      	movne	r3, #1
 800fc00:	0692      	lsls	r2, r2, #26
 800fc02:	d42b      	bmi.n	800fc5c <_printf_common+0xb0>
 800fc04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc08:	4649      	mov	r1, r9
 800fc0a:	4638      	mov	r0, r7
 800fc0c:	47c0      	blx	r8
 800fc0e:	3001      	adds	r0, #1
 800fc10:	d01e      	beq.n	800fc50 <_printf_common+0xa4>
 800fc12:	6823      	ldr	r3, [r4, #0]
 800fc14:	6922      	ldr	r2, [r4, #16]
 800fc16:	f003 0306 	and.w	r3, r3, #6
 800fc1a:	2b04      	cmp	r3, #4
 800fc1c:	bf02      	ittt	eq
 800fc1e:	68e5      	ldreq	r5, [r4, #12]
 800fc20:	6833      	ldreq	r3, [r6, #0]
 800fc22:	1aed      	subeq	r5, r5, r3
 800fc24:	68a3      	ldr	r3, [r4, #8]
 800fc26:	bf0c      	ite	eq
 800fc28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc2c:	2500      	movne	r5, #0
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	bfc4      	itt	gt
 800fc32:	1a9b      	subgt	r3, r3, r2
 800fc34:	18ed      	addgt	r5, r5, r3
 800fc36:	2600      	movs	r6, #0
 800fc38:	341a      	adds	r4, #26
 800fc3a:	42b5      	cmp	r5, r6
 800fc3c:	d11a      	bne.n	800fc74 <_printf_common+0xc8>
 800fc3e:	2000      	movs	r0, #0
 800fc40:	e008      	b.n	800fc54 <_printf_common+0xa8>
 800fc42:	2301      	movs	r3, #1
 800fc44:	4652      	mov	r2, sl
 800fc46:	4649      	mov	r1, r9
 800fc48:	4638      	mov	r0, r7
 800fc4a:	47c0      	blx	r8
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	d103      	bne.n	800fc58 <_printf_common+0xac>
 800fc50:	f04f 30ff 	mov.w	r0, #4294967295
 800fc54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc58:	3501      	adds	r5, #1
 800fc5a:	e7c6      	b.n	800fbea <_printf_common+0x3e>
 800fc5c:	18e1      	adds	r1, r4, r3
 800fc5e:	1c5a      	adds	r2, r3, #1
 800fc60:	2030      	movs	r0, #48	; 0x30
 800fc62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc66:	4422      	add	r2, r4
 800fc68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc70:	3302      	adds	r3, #2
 800fc72:	e7c7      	b.n	800fc04 <_printf_common+0x58>
 800fc74:	2301      	movs	r3, #1
 800fc76:	4622      	mov	r2, r4
 800fc78:	4649      	mov	r1, r9
 800fc7a:	4638      	mov	r0, r7
 800fc7c:	47c0      	blx	r8
 800fc7e:	3001      	adds	r0, #1
 800fc80:	d0e6      	beq.n	800fc50 <_printf_common+0xa4>
 800fc82:	3601      	adds	r6, #1
 800fc84:	e7d9      	b.n	800fc3a <_printf_common+0x8e>
	...

0800fc88 <_printf_i>:
 800fc88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc8c:	7e0f      	ldrb	r7, [r1, #24]
 800fc8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc90:	2f78      	cmp	r7, #120	; 0x78
 800fc92:	4691      	mov	r9, r2
 800fc94:	4680      	mov	r8, r0
 800fc96:	460c      	mov	r4, r1
 800fc98:	469a      	mov	sl, r3
 800fc9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc9e:	d807      	bhi.n	800fcb0 <_printf_i+0x28>
 800fca0:	2f62      	cmp	r7, #98	; 0x62
 800fca2:	d80a      	bhi.n	800fcba <_printf_i+0x32>
 800fca4:	2f00      	cmp	r7, #0
 800fca6:	f000 80d4 	beq.w	800fe52 <_printf_i+0x1ca>
 800fcaa:	2f58      	cmp	r7, #88	; 0x58
 800fcac:	f000 80c0 	beq.w	800fe30 <_printf_i+0x1a8>
 800fcb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fcb8:	e03a      	b.n	800fd30 <_printf_i+0xa8>
 800fcba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fcbe:	2b15      	cmp	r3, #21
 800fcc0:	d8f6      	bhi.n	800fcb0 <_printf_i+0x28>
 800fcc2:	a101      	add	r1, pc, #4	; (adr r1, 800fcc8 <_printf_i+0x40>)
 800fcc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fcc8:	0800fd21 	.word	0x0800fd21
 800fccc:	0800fd35 	.word	0x0800fd35
 800fcd0:	0800fcb1 	.word	0x0800fcb1
 800fcd4:	0800fcb1 	.word	0x0800fcb1
 800fcd8:	0800fcb1 	.word	0x0800fcb1
 800fcdc:	0800fcb1 	.word	0x0800fcb1
 800fce0:	0800fd35 	.word	0x0800fd35
 800fce4:	0800fcb1 	.word	0x0800fcb1
 800fce8:	0800fcb1 	.word	0x0800fcb1
 800fcec:	0800fcb1 	.word	0x0800fcb1
 800fcf0:	0800fcb1 	.word	0x0800fcb1
 800fcf4:	0800fe39 	.word	0x0800fe39
 800fcf8:	0800fd61 	.word	0x0800fd61
 800fcfc:	0800fdf3 	.word	0x0800fdf3
 800fd00:	0800fcb1 	.word	0x0800fcb1
 800fd04:	0800fcb1 	.word	0x0800fcb1
 800fd08:	0800fe5b 	.word	0x0800fe5b
 800fd0c:	0800fcb1 	.word	0x0800fcb1
 800fd10:	0800fd61 	.word	0x0800fd61
 800fd14:	0800fcb1 	.word	0x0800fcb1
 800fd18:	0800fcb1 	.word	0x0800fcb1
 800fd1c:	0800fdfb 	.word	0x0800fdfb
 800fd20:	682b      	ldr	r3, [r5, #0]
 800fd22:	1d1a      	adds	r2, r3, #4
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	602a      	str	r2, [r5, #0]
 800fd28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd30:	2301      	movs	r3, #1
 800fd32:	e09f      	b.n	800fe74 <_printf_i+0x1ec>
 800fd34:	6820      	ldr	r0, [r4, #0]
 800fd36:	682b      	ldr	r3, [r5, #0]
 800fd38:	0607      	lsls	r7, r0, #24
 800fd3a:	f103 0104 	add.w	r1, r3, #4
 800fd3e:	6029      	str	r1, [r5, #0]
 800fd40:	d501      	bpl.n	800fd46 <_printf_i+0xbe>
 800fd42:	681e      	ldr	r6, [r3, #0]
 800fd44:	e003      	b.n	800fd4e <_printf_i+0xc6>
 800fd46:	0646      	lsls	r6, r0, #25
 800fd48:	d5fb      	bpl.n	800fd42 <_printf_i+0xba>
 800fd4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fd4e:	2e00      	cmp	r6, #0
 800fd50:	da03      	bge.n	800fd5a <_printf_i+0xd2>
 800fd52:	232d      	movs	r3, #45	; 0x2d
 800fd54:	4276      	negs	r6, r6
 800fd56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd5a:	485a      	ldr	r0, [pc, #360]	; (800fec4 <_printf_i+0x23c>)
 800fd5c:	230a      	movs	r3, #10
 800fd5e:	e012      	b.n	800fd86 <_printf_i+0xfe>
 800fd60:	682b      	ldr	r3, [r5, #0]
 800fd62:	6820      	ldr	r0, [r4, #0]
 800fd64:	1d19      	adds	r1, r3, #4
 800fd66:	6029      	str	r1, [r5, #0]
 800fd68:	0605      	lsls	r5, r0, #24
 800fd6a:	d501      	bpl.n	800fd70 <_printf_i+0xe8>
 800fd6c:	681e      	ldr	r6, [r3, #0]
 800fd6e:	e002      	b.n	800fd76 <_printf_i+0xee>
 800fd70:	0641      	lsls	r1, r0, #25
 800fd72:	d5fb      	bpl.n	800fd6c <_printf_i+0xe4>
 800fd74:	881e      	ldrh	r6, [r3, #0]
 800fd76:	4853      	ldr	r0, [pc, #332]	; (800fec4 <_printf_i+0x23c>)
 800fd78:	2f6f      	cmp	r7, #111	; 0x6f
 800fd7a:	bf0c      	ite	eq
 800fd7c:	2308      	moveq	r3, #8
 800fd7e:	230a      	movne	r3, #10
 800fd80:	2100      	movs	r1, #0
 800fd82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd86:	6865      	ldr	r5, [r4, #4]
 800fd88:	60a5      	str	r5, [r4, #8]
 800fd8a:	2d00      	cmp	r5, #0
 800fd8c:	bfa2      	ittt	ge
 800fd8e:	6821      	ldrge	r1, [r4, #0]
 800fd90:	f021 0104 	bicge.w	r1, r1, #4
 800fd94:	6021      	strge	r1, [r4, #0]
 800fd96:	b90e      	cbnz	r6, 800fd9c <_printf_i+0x114>
 800fd98:	2d00      	cmp	r5, #0
 800fd9a:	d04b      	beq.n	800fe34 <_printf_i+0x1ac>
 800fd9c:	4615      	mov	r5, r2
 800fd9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fda2:	fb03 6711 	mls	r7, r3, r1, r6
 800fda6:	5dc7      	ldrb	r7, [r0, r7]
 800fda8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fdac:	4637      	mov	r7, r6
 800fdae:	42bb      	cmp	r3, r7
 800fdb0:	460e      	mov	r6, r1
 800fdb2:	d9f4      	bls.n	800fd9e <_printf_i+0x116>
 800fdb4:	2b08      	cmp	r3, #8
 800fdb6:	d10b      	bne.n	800fdd0 <_printf_i+0x148>
 800fdb8:	6823      	ldr	r3, [r4, #0]
 800fdba:	07de      	lsls	r6, r3, #31
 800fdbc:	d508      	bpl.n	800fdd0 <_printf_i+0x148>
 800fdbe:	6923      	ldr	r3, [r4, #16]
 800fdc0:	6861      	ldr	r1, [r4, #4]
 800fdc2:	4299      	cmp	r1, r3
 800fdc4:	bfde      	ittt	le
 800fdc6:	2330      	movle	r3, #48	; 0x30
 800fdc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fdcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fdd0:	1b52      	subs	r2, r2, r5
 800fdd2:	6122      	str	r2, [r4, #16]
 800fdd4:	f8cd a000 	str.w	sl, [sp]
 800fdd8:	464b      	mov	r3, r9
 800fdda:	aa03      	add	r2, sp, #12
 800fddc:	4621      	mov	r1, r4
 800fdde:	4640      	mov	r0, r8
 800fde0:	f7ff fee4 	bl	800fbac <_printf_common>
 800fde4:	3001      	adds	r0, #1
 800fde6:	d14a      	bne.n	800fe7e <_printf_i+0x1f6>
 800fde8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdec:	b004      	add	sp, #16
 800fdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf2:	6823      	ldr	r3, [r4, #0]
 800fdf4:	f043 0320 	orr.w	r3, r3, #32
 800fdf8:	6023      	str	r3, [r4, #0]
 800fdfa:	4833      	ldr	r0, [pc, #204]	; (800fec8 <_printf_i+0x240>)
 800fdfc:	2778      	movs	r7, #120	; 0x78
 800fdfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fe02:	6823      	ldr	r3, [r4, #0]
 800fe04:	6829      	ldr	r1, [r5, #0]
 800fe06:	061f      	lsls	r7, r3, #24
 800fe08:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe0c:	d402      	bmi.n	800fe14 <_printf_i+0x18c>
 800fe0e:	065f      	lsls	r7, r3, #25
 800fe10:	bf48      	it	mi
 800fe12:	b2b6      	uxthmi	r6, r6
 800fe14:	07df      	lsls	r7, r3, #31
 800fe16:	bf48      	it	mi
 800fe18:	f043 0320 	orrmi.w	r3, r3, #32
 800fe1c:	6029      	str	r1, [r5, #0]
 800fe1e:	bf48      	it	mi
 800fe20:	6023      	strmi	r3, [r4, #0]
 800fe22:	b91e      	cbnz	r6, 800fe2c <_printf_i+0x1a4>
 800fe24:	6823      	ldr	r3, [r4, #0]
 800fe26:	f023 0320 	bic.w	r3, r3, #32
 800fe2a:	6023      	str	r3, [r4, #0]
 800fe2c:	2310      	movs	r3, #16
 800fe2e:	e7a7      	b.n	800fd80 <_printf_i+0xf8>
 800fe30:	4824      	ldr	r0, [pc, #144]	; (800fec4 <_printf_i+0x23c>)
 800fe32:	e7e4      	b.n	800fdfe <_printf_i+0x176>
 800fe34:	4615      	mov	r5, r2
 800fe36:	e7bd      	b.n	800fdb4 <_printf_i+0x12c>
 800fe38:	682b      	ldr	r3, [r5, #0]
 800fe3a:	6826      	ldr	r6, [r4, #0]
 800fe3c:	6961      	ldr	r1, [r4, #20]
 800fe3e:	1d18      	adds	r0, r3, #4
 800fe40:	6028      	str	r0, [r5, #0]
 800fe42:	0635      	lsls	r5, r6, #24
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	d501      	bpl.n	800fe4c <_printf_i+0x1c4>
 800fe48:	6019      	str	r1, [r3, #0]
 800fe4a:	e002      	b.n	800fe52 <_printf_i+0x1ca>
 800fe4c:	0670      	lsls	r0, r6, #25
 800fe4e:	d5fb      	bpl.n	800fe48 <_printf_i+0x1c0>
 800fe50:	8019      	strh	r1, [r3, #0]
 800fe52:	2300      	movs	r3, #0
 800fe54:	6123      	str	r3, [r4, #16]
 800fe56:	4615      	mov	r5, r2
 800fe58:	e7bc      	b.n	800fdd4 <_printf_i+0x14c>
 800fe5a:	682b      	ldr	r3, [r5, #0]
 800fe5c:	1d1a      	adds	r2, r3, #4
 800fe5e:	602a      	str	r2, [r5, #0]
 800fe60:	681d      	ldr	r5, [r3, #0]
 800fe62:	6862      	ldr	r2, [r4, #4]
 800fe64:	2100      	movs	r1, #0
 800fe66:	4628      	mov	r0, r5
 800fe68:	f7f0 f9c2 	bl	80001f0 <memchr>
 800fe6c:	b108      	cbz	r0, 800fe72 <_printf_i+0x1ea>
 800fe6e:	1b40      	subs	r0, r0, r5
 800fe70:	6060      	str	r0, [r4, #4]
 800fe72:	6863      	ldr	r3, [r4, #4]
 800fe74:	6123      	str	r3, [r4, #16]
 800fe76:	2300      	movs	r3, #0
 800fe78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe7c:	e7aa      	b.n	800fdd4 <_printf_i+0x14c>
 800fe7e:	6923      	ldr	r3, [r4, #16]
 800fe80:	462a      	mov	r2, r5
 800fe82:	4649      	mov	r1, r9
 800fe84:	4640      	mov	r0, r8
 800fe86:	47d0      	blx	sl
 800fe88:	3001      	adds	r0, #1
 800fe8a:	d0ad      	beq.n	800fde8 <_printf_i+0x160>
 800fe8c:	6823      	ldr	r3, [r4, #0]
 800fe8e:	079b      	lsls	r3, r3, #30
 800fe90:	d413      	bmi.n	800feba <_printf_i+0x232>
 800fe92:	68e0      	ldr	r0, [r4, #12]
 800fe94:	9b03      	ldr	r3, [sp, #12]
 800fe96:	4298      	cmp	r0, r3
 800fe98:	bfb8      	it	lt
 800fe9a:	4618      	movlt	r0, r3
 800fe9c:	e7a6      	b.n	800fdec <_printf_i+0x164>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	4632      	mov	r2, r6
 800fea2:	4649      	mov	r1, r9
 800fea4:	4640      	mov	r0, r8
 800fea6:	47d0      	blx	sl
 800fea8:	3001      	adds	r0, #1
 800feaa:	d09d      	beq.n	800fde8 <_printf_i+0x160>
 800feac:	3501      	adds	r5, #1
 800feae:	68e3      	ldr	r3, [r4, #12]
 800feb0:	9903      	ldr	r1, [sp, #12]
 800feb2:	1a5b      	subs	r3, r3, r1
 800feb4:	42ab      	cmp	r3, r5
 800feb6:	dcf2      	bgt.n	800fe9e <_printf_i+0x216>
 800feb8:	e7eb      	b.n	800fe92 <_printf_i+0x20a>
 800feba:	2500      	movs	r5, #0
 800febc:	f104 0619 	add.w	r6, r4, #25
 800fec0:	e7f5      	b.n	800feae <_printf_i+0x226>
 800fec2:	bf00      	nop
 800fec4:	08013ee2 	.word	0x08013ee2
 800fec8:	08013ef3 	.word	0x08013ef3

0800fecc <std>:
 800fecc:	2300      	movs	r3, #0
 800fece:	b510      	push	{r4, lr}
 800fed0:	4604      	mov	r4, r0
 800fed2:	e9c0 3300 	strd	r3, r3, [r0]
 800fed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800feda:	6083      	str	r3, [r0, #8]
 800fedc:	8181      	strh	r1, [r0, #12]
 800fede:	6643      	str	r3, [r0, #100]	; 0x64
 800fee0:	81c2      	strh	r2, [r0, #14]
 800fee2:	6183      	str	r3, [r0, #24]
 800fee4:	4619      	mov	r1, r3
 800fee6:	2208      	movs	r2, #8
 800fee8:	305c      	adds	r0, #92	; 0x5c
 800feea:	f000 f914 	bl	8010116 <memset>
 800feee:	4b0d      	ldr	r3, [pc, #52]	; (800ff24 <std+0x58>)
 800fef0:	6263      	str	r3, [r4, #36]	; 0x24
 800fef2:	4b0d      	ldr	r3, [pc, #52]	; (800ff28 <std+0x5c>)
 800fef4:	62a3      	str	r3, [r4, #40]	; 0x28
 800fef6:	4b0d      	ldr	r3, [pc, #52]	; (800ff2c <std+0x60>)
 800fef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fefa:	4b0d      	ldr	r3, [pc, #52]	; (800ff30 <std+0x64>)
 800fefc:	6323      	str	r3, [r4, #48]	; 0x30
 800fefe:	4b0d      	ldr	r3, [pc, #52]	; (800ff34 <std+0x68>)
 800ff00:	6224      	str	r4, [r4, #32]
 800ff02:	429c      	cmp	r4, r3
 800ff04:	d006      	beq.n	800ff14 <std+0x48>
 800ff06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ff0a:	4294      	cmp	r4, r2
 800ff0c:	d002      	beq.n	800ff14 <std+0x48>
 800ff0e:	33d0      	adds	r3, #208	; 0xd0
 800ff10:	429c      	cmp	r4, r3
 800ff12:	d105      	bne.n	800ff20 <std+0x54>
 800ff14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff1c:	f000 b978 	b.w	8010210 <__retarget_lock_init_recursive>
 800ff20:	bd10      	pop	{r4, pc}
 800ff22:	bf00      	nop
 800ff24:	08010091 	.word	0x08010091
 800ff28:	080100b3 	.word	0x080100b3
 800ff2c:	080100eb 	.word	0x080100eb
 800ff30:	0801010f 	.word	0x0801010f
 800ff34:	20006cbc 	.word	0x20006cbc

0800ff38 <stdio_exit_handler>:
 800ff38:	4a02      	ldr	r2, [pc, #8]	; (800ff44 <stdio_exit_handler+0xc>)
 800ff3a:	4903      	ldr	r1, [pc, #12]	; (800ff48 <stdio_exit_handler+0x10>)
 800ff3c:	4803      	ldr	r0, [pc, #12]	; (800ff4c <stdio_exit_handler+0x14>)
 800ff3e:	f000 b869 	b.w	8010014 <_fwalk_sglue>
 800ff42:	bf00      	nop
 800ff44:	2000017c 	.word	0x2000017c
 800ff48:	08011be1 	.word	0x08011be1
 800ff4c:	20000188 	.word	0x20000188

0800ff50 <cleanup_stdio>:
 800ff50:	6841      	ldr	r1, [r0, #4]
 800ff52:	4b0c      	ldr	r3, [pc, #48]	; (800ff84 <cleanup_stdio+0x34>)
 800ff54:	4299      	cmp	r1, r3
 800ff56:	b510      	push	{r4, lr}
 800ff58:	4604      	mov	r4, r0
 800ff5a:	d001      	beq.n	800ff60 <cleanup_stdio+0x10>
 800ff5c:	f001 fe40 	bl	8011be0 <_fflush_r>
 800ff60:	68a1      	ldr	r1, [r4, #8]
 800ff62:	4b09      	ldr	r3, [pc, #36]	; (800ff88 <cleanup_stdio+0x38>)
 800ff64:	4299      	cmp	r1, r3
 800ff66:	d002      	beq.n	800ff6e <cleanup_stdio+0x1e>
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f001 fe39 	bl	8011be0 <_fflush_r>
 800ff6e:	68e1      	ldr	r1, [r4, #12]
 800ff70:	4b06      	ldr	r3, [pc, #24]	; (800ff8c <cleanup_stdio+0x3c>)
 800ff72:	4299      	cmp	r1, r3
 800ff74:	d004      	beq.n	800ff80 <cleanup_stdio+0x30>
 800ff76:	4620      	mov	r0, r4
 800ff78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff7c:	f001 be30 	b.w	8011be0 <_fflush_r>
 800ff80:	bd10      	pop	{r4, pc}
 800ff82:	bf00      	nop
 800ff84:	20006cbc 	.word	0x20006cbc
 800ff88:	20006d24 	.word	0x20006d24
 800ff8c:	20006d8c 	.word	0x20006d8c

0800ff90 <global_stdio_init.part.0>:
 800ff90:	b510      	push	{r4, lr}
 800ff92:	4b0b      	ldr	r3, [pc, #44]	; (800ffc0 <global_stdio_init.part.0+0x30>)
 800ff94:	4c0b      	ldr	r4, [pc, #44]	; (800ffc4 <global_stdio_init.part.0+0x34>)
 800ff96:	4a0c      	ldr	r2, [pc, #48]	; (800ffc8 <global_stdio_init.part.0+0x38>)
 800ff98:	601a      	str	r2, [r3, #0]
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	2104      	movs	r1, #4
 800ffa0:	f7ff ff94 	bl	800fecc <std>
 800ffa4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	2109      	movs	r1, #9
 800ffac:	f7ff ff8e 	bl	800fecc <std>
 800ffb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ffb4:	2202      	movs	r2, #2
 800ffb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffba:	2112      	movs	r1, #18
 800ffbc:	f7ff bf86 	b.w	800fecc <std>
 800ffc0:	20006df4 	.word	0x20006df4
 800ffc4:	20006cbc 	.word	0x20006cbc
 800ffc8:	0800ff39 	.word	0x0800ff39

0800ffcc <__sfp_lock_acquire>:
 800ffcc:	4801      	ldr	r0, [pc, #4]	; (800ffd4 <__sfp_lock_acquire+0x8>)
 800ffce:	f000 b920 	b.w	8010212 <__retarget_lock_acquire_recursive>
 800ffd2:	bf00      	nop
 800ffd4:	20006dfd 	.word	0x20006dfd

0800ffd8 <__sfp_lock_release>:
 800ffd8:	4801      	ldr	r0, [pc, #4]	; (800ffe0 <__sfp_lock_release+0x8>)
 800ffda:	f000 b91b 	b.w	8010214 <__retarget_lock_release_recursive>
 800ffde:	bf00      	nop
 800ffe0:	20006dfd 	.word	0x20006dfd

0800ffe4 <__sinit>:
 800ffe4:	b510      	push	{r4, lr}
 800ffe6:	4604      	mov	r4, r0
 800ffe8:	f7ff fff0 	bl	800ffcc <__sfp_lock_acquire>
 800ffec:	6a23      	ldr	r3, [r4, #32]
 800ffee:	b11b      	cbz	r3, 800fff8 <__sinit+0x14>
 800fff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fff4:	f7ff bff0 	b.w	800ffd8 <__sfp_lock_release>
 800fff8:	4b04      	ldr	r3, [pc, #16]	; (801000c <__sinit+0x28>)
 800fffa:	6223      	str	r3, [r4, #32]
 800fffc:	4b04      	ldr	r3, [pc, #16]	; (8010010 <__sinit+0x2c>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d1f5      	bne.n	800fff0 <__sinit+0xc>
 8010004:	f7ff ffc4 	bl	800ff90 <global_stdio_init.part.0>
 8010008:	e7f2      	b.n	800fff0 <__sinit+0xc>
 801000a:	bf00      	nop
 801000c:	0800ff51 	.word	0x0800ff51
 8010010:	20006df4 	.word	0x20006df4

08010014 <_fwalk_sglue>:
 8010014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010018:	4607      	mov	r7, r0
 801001a:	4688      	mov	r8, r1
 801001c:	4614      	mov	r4, r2
 801001e:	2600      	movs	r6, #0
 8010020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010024:	f1b9 0901 	subs.w	r9, r9, #1
 8010028:	d505      	bpl.n	8010036 <_fwalk_sglue+0x22>
 801002a:	6824      	ldr	r4, [r4, #0]
 801002c:	2c00      	cmp	r4, #0
 801002e:	d1f7      	bne.n	8010020 <_fwalk_sglue+0xc>
 8010030:	4630      	mov	r0, r6
 8010032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010036:	89ab      	ldrh	r3, [r5, #12]
 8010038:	2b01      	cmp	r3, #1
 801003a:	d907      	bls.n	801004c <_fwalk_sglue+0x38>
 801003c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010040:	3301      	adds	r3, #1
 8010042:	d003      	beq.n	801004c <_fwalk_sglue+0x38>
 8010044:	4629      	mov	r1, r5
 8010046:	4638      	mov	r0, r7
 8010048:	47c0      	blx	r8
 801004a:	4306      	orrs	r6, r0
 801004c:	3568      	adds	r5, #104	; 0x68
 801004e:	e7e9      	b.n	8010024 <_fwalk_sglue+0x10>

08010050 <siprintf>:
 8010050:	b40e      	push	{r1, r2, r3}
 8010052:	b500      	push	{lr}
 8010054:	b09c      	sub	sp, #112	; 0x70
 8010056:	ab1d      	add	r3, sp, #116	; 0x74
 8010058:	9002      	str	r0, [sp, #8]
 801005a:	9006      	str	r0, [sp, #24]
 801005c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010060:	4809      	ldr	r0, [pc, #36]	; (8010088 <siprintf+0x38>)
 8010062:	9107      	str	r1, [sp, #28]
 8010064:	9104      	str	r1, [sp, #16]
 8010066:	4909      	ldr	r1, [pc, #36]	; (801008c <siprintf+0x3c>)
 8010068:	f853 2b04 	ldr.w	r2, [r3], #4
 801006c:	9105      	str	r1, [sp, #20]
 801006e:	6800      	ldr	r0, [r0, #0]
 8010070:	9301      	str	r3, [sp, #4]
 8010072:	a902      	add	r1, sp, #8
 8010074:	f001 fc30 	bl	80118d8 <_svfiprintf_r>
 8010078:	9b02      	ldr	r3, [sp, #8]
 801007a:	2200      	movs	r2, #0
 801007c:	701a      	strb	r2, [r3, #0]
 801007e:	b01c      	add	sp, #112	; 0x70
 8010080:	f85d eb04 	ldr.w	lr, [sp], #4
 8010084:	b003      	add	sp, #12
 8010086:	4770      	bx	lr
 8010088:	200001d4 	.word	0x200001d4
 801008c:	ffff0208 	.word	0xffff0208

08010090 <__sread>:
 8010090:	b510      	push	{r4, lr}
 8010092:	460c      	mov	r4, r1
 8010094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010098:	f000 f86c 	bl	8010174 <_read_r>
 801009c:	2800      	cmp	r0, #0
 801009e:	bfab      	itete	ge
 80100a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80100a2:	89a3      	ldrhlt	r3, [r4, #12]
 80100a4:	181b      	addge	r3, r3, r0
 80100a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80100aa:	bfac      	ite	ge
 80100ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80100ae:	81a3      	strhlt	r3, [r4, #12]
 80100b0:	bd10      	pop	{r4, pc}

080100b2 <__swrite>:
 80100b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100b6:	461f      	mov	r7, r3
 80100b8:	898b      	ldrh	r3, [r1, #12]
 80100ba:	05db      	lsls	r3, r3, #23
 80100bc:	4605      	mov	r5, r0
 80100be:	460c      	mov	r4, r1
 80100c0:	4616      	mov	r6, r2
 80100c2:	d505      	bpl.n	80100d0 <__swrite+0x1e>
 80100c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100c8:	2302      	movs	r3, #2
 80100ca:	2200      	movs	r2, #0
 80100cc:	f000 f840 	bl	8010150 <_lseek_r>
 80100d0:	89a3      	ldrh	r3, [r4, #12]
 80100d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100da:	81a3      	strh	r3, [r4, #12]
 80100dc:	4632      	mov	r2, r6
 80100de:	463b      	mov	r3, r7
 80100e0:	4628      	mov	r0, r5
 80100e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100e6:	f000 b857 	b.w	8010198 <_write_r>

080100ea <__sseek>:
 80100ea:	b510      	push	{r4, lr}
 80100ec:	460c      	mov	r4, r1
 80100ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100f2:	f000 f82d 	bl	8010150 <_lseek_r>
 80100f6:	1c43      	adds	r3, r0, #1
 80100f8:	89a3      	ldrh	r3, [r4, #12]
 80100fa:	bf15      	itete	ne
 80100fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80100fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010106:	81a3      	strheq	r3, [r4, #12]
 8010108:	bf18      	it	ne
 801010a:	81a3      	strhne	r3, [r4, #12]
 801010c:	bd10      	pop	{r4, pc}

0801010e <__sclose>:
 801010e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010112:	f000 b80d 	b.w	8010130 <_close_r>

08010116 <memset>:
 8010116:	4402      	add	r2, r0
 8010118:	4603      	mov	r3, r0
 801011a:	4293      	cmp	r3, r2
 801011c:	d100      	bne.n	8010120 <memset+0xa>
 801011e:	4770      	bx	lr
 8010120:	f803 1b01 	strb.w	r1, [r3], #1
 8010124:	e7f9      	b.n	801011a <memset+0x4>
	...

08010128 <_localeconv_r>:
 8010128:	4800      	ldr	r0, [pc, #0]	; (801012c <_localeconv_r+0x4>)
 801012a:	4770      	bx	lr
 801012c:	200002c8 	.word	0x200002c8

08010130 <_close_r>:
 8010130:	b538      	push	{r3, r4, r5, lr}
 8010132:	4d06      	ldr	r5, [pc, #24]	; (801014c <_close_r+0x1c>)
 8010134:	2300      	movs	r3, #0
 8010136:	4604      	mov	r4, r0
 8010138:	4608      	mov	r0, r1
 801013a:	602b      	str	r3, [r5, #0]
 801013c:	f7f1 fbaf 	bl	800189e <_close>
 8010140:	1c43      	adds	r3, r0, #1
 8010142:	d102      	bne.n	801014a <_close_r+0x1a>
 8010144:	682b      	ldr	r3, [r5, #0]
 8010146:	b103      	cbz	r3, 801014a <_close_r+0x1a>
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	bd38      	pop	{r3, r4, r5, pc}
 801014c:	20006df8 	.word	0x20006df8

08010150 <_lseek_r>:
 8010150:	b538      	push	{r3, r4, r5, lr}
 8010152:	4d07      	ldr	r5, [pc, #28]	; (8010170 <_lseek_r+0x20>)
 8010154:	4604      	mov	r4, r0
 8010156:	4608      	mov	r0, r1
 8010158:	4611      	mov	r1, r2
 801015a:	2200      	movs	r2, #0
 801015c:	602a      	str	r2, [r5, #0]
 801015e:	461a      	mov	r2, r3
 8010160:	f7f1 fbc4 	bl	80018ec <_lseek>
 8010164:	1c43      	adds	r3, r0, #1
 8010166:	d102      	bne.n	801016e <_lseek_r+0x1e>
 8010168:	682b      	ldr	r3, [r5, #0]
 801016a:	b103      	cbz	r3, 801016e <_lseek_r+0x1e>
 801016c:	6023      	str	r3, [r4, #0]
 801016e:	bd38      	pop	{r3, r4, r5, pc}
 8010170:	20006df8 	.word	0x20006df8

08010174 <_read_r>:
 8010174:	b538      	push	{r3, r4, r5, lr}
 8010176:	4d07      	ldr	r5, [pc, #28]	; (8010194 <_read_r+0x20>)
 8010178:	4604      	mov	r4, r0
 801017a:	4608      	mov	r0, r1
 801017c:	4611      	mov	r1, r2
 801017e:	2200      	movs	r2, #0
 8010180:	602a      	str	r2, [r5, #0]
 8010182:	461a      	mov	r2, r3
 8010184:	f7f1 fb52 	bl	800182c <_read>
 8010188:	1c43      	adds	r3, r0, #1
 801018a:	d102      	bne.n	8010192 <_read_r+0x1e>
 801018c:	682b      	ldr	r3, [r5, #0]
 801018e:	b103      	cbz	r3, 8010192 <_read_r+0x1e>
 8010190:	6023      	str	r3, [r4, #0]
 8010192:	bd38      	pop	{r3, r4, r5, pc}
 8010194:	20006df8 	.word	0x20006df8

08010198 <_write_r>:
 8010198:	b538      	push	{r3, r4, r5, lr}
 801019a:	4d07      	ldr	r5, [pc, #28]	; (80101b8 <_write_r+0x20>)
 801019c:	4604      	mov	r4, r0
 801019e:	4608      	mov	r0, r1
 80101a0:	4611      	mov	r1, r2
 80101a2:	2200      	movs	r2, #0
 80101a4:	602a      	str	r2, [r5, #0]
 80101a6:	461a      	mov	r2, r3
 80101a8:	f7f1 fb5d 	bl	8001866 <_write>
 80101ac:	1c43      	adds	r3, r0, #1
 80101ae:	d102      	bne.n	80101b6 <_write_r+0x1e>
 80101b0:	682b      	ldr	r3, [r5, #0]
 80101b2:	b103      	cbz	r3, 80101b6 <_write_r+0x1e>
 80101b4:	6023      	str	r3, [r4, #0]
 80101b6:	bd38      	pop	{r3, r4, r5, pc}
 80101b8:	20006df8 	.word	0x20006df8

080101bc <__errno>:
 80101bc:	4b01      	ldr	r3, [pc, #4]	; (80101c4 <__errno+0x8>)
 80101be:	6818      	ldr	r0, [r3, #0]
 80101c0:	4770      	bx	lr
 80101c2:	bf00      	nop
 80101c4:	200001d4 	.word	0x200001d4

080101c8 <__libc_init_array>:
 80101c8:	b570      	push	{r4, r5, r6, lr}
 80101ca:	4d0d      	ldr	r5, [pc, #52]	; (8010200 <__libc_init_array+0x38>)
 80101cc:	4c0d      	ldr	r4, [pc, #52]	; (8010204 <__libc_init_array+0x3c>)
 80101ce:	1b64      	subs	r4, r4, r5
 80101d0:	10a4      	asrs	r4, r4, #2
 80101d2:	2600      	movs	r6, #0
 80101d4:	42a6      	cmp	r6, r4
 80101d6:	d109      	bne.n	80101ec <__libc_init_array+0x24>
 80101d8:	4d0b      	ldr	r5, [pc, #44]	; (8010208 <__libc_init_array+0x40>)
 80101da:	4c0c      	ldr	r4, [pc, #48]	; (801020c <__libc_init_array+0x44>)
 80101dc:	f002 f896 	bl	801230c <_init>
 80101e0:	1b64      	subs	r4, r4, r5
 80101e2:	10a4      	asrs	r4, r4, #2
 80101e4:	2600      	movs	r6, #0
 80101e6:	42a6      	cmp	r6, r4
 80101e8:	d105      	bne.n	80101f6 <__libc_init_array+0x2e>
 80101ea:	bd70      	pop	{r4, r5, r6, pc}
 80101ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80101f0:	4798      	blx	r3
 80101f2:	3601      	adds	r6, #1
 80101f4:	e7ee      	b.n	80101d4 <__libc_init_array+0xc>
 80101f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80101fa:	4798      	blx	r3
 80101fc:	3601      	adds	r6, #1
 80101fe:	e7f2      	b.n	80101e6 <__libc_init_array+0x1e>
 8010200:	0801424c 	.word	0x0801424c
 8010204:	0801424c 	.word	0x0801424c
 8010208:	0801424c 	.word	0x0801424c
 801020c:	08014250 	.word	0x08014250

08010210 <__retarget_lock_init_recursive>:
 8010210:	4770      	bx	lr

08010212 <__retarget_lock_acquire_recursive>:
 8010212:	4770      	bx	lr

08010214 <__retarget_lock_release_recursive>:
 8010214:	4770      	bx	lr

08010216 <memcpy>:
 8010216:	440a      	add	r2, r1
 8010218:	4291      	cmp	r1, r2
 801021a:	f100 33ff 	add.w	r3, r0, #4294967295
 801021e:	d100      	bne.n	8010222 <memcpy+0xc>
 8010220:	4770      	bx	lr
 8010222:	b510      	push	{r4, lr}
 8010224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010228:	f803 4f01 	strb.w	r4, [r3, #1]!
 801022c:	4291      	cmp	r1, r2
 801022e:	d1f9      	bne.n	8010224 <memcpy+0xe>
 8010230:	bd10      	pop	{r4, pc}

08010232 <quorem>:
 8010232:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010236:	6903      	ldr	r3, [r0, #16]
 8010238:	690c      	ldr	r4, [r1, #16]
 801023a:	42a3      	cmp	r3, r4
 801023c:	4607      	mov	r7, r0
 801023e:	db7e      	blt.n	801033e <quorem+0x10c>
 8010240:	3c01      	subs	r4, #1
 8010242:	f101 0814 	add.w	r8, r1, #20
 8010246:	f100 0514 	add.w	r5, r0, #20
 801024a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801024e:	9301      	str	r3, [sp, #4]
 8010250:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010254:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010258:	3301      	adds	r3, #1
 801025a:	429a      	cmp	r2, r3
 801025c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010260:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010264:	fbb2 f6f3 	udiv	r6, r2, r3
 8010268:	d331      	bcc.n	80102ce <quorem+0x9c>
 801026a:	f04f 0e00 	mov.w	lr, #0
 801026e:	4640      	mov	r0, r8
 8010270:	46ac      	mov	ip, r5
 8010272:	46f2      	mov	sl, lr
 8010274:	f850 2b04 	ldr.w	r2, [r0], #4
 8010278:	b293      	uxth	r3, r2
 801027a:	fb06 e303 	mla	r3, r6, r3, lr
 801027e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010282:	0c1a      	lsrs	r2, r3, #16
 8010284:	b29b      	uxth	r3, r3
 8010286:	ebaa 0303 	sub.w	r3, sl, r3
 801028a:	f8dc a000 	ldr.w	sl, [ip]
 801028e:	fa13 f38a 	uxtah	r3, r3, sl
 8010292:	fb06 220e 	mla	r2, r6, lr, r2
 8010296:	9300      	str	r3, [sp, #0]
 8010298:	9b00      	ldr	r3, [sp, #0]
 801029a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801029e:	b292      	uxth	r2, r2
 80102a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80102a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80102ac:	4581      	cmp	r9, r0
 80102ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102b2:	f84c 3b04 	str.w	r3, [ip], #4
 80102b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80102ba:	d2db      	bcs.n	8010274 <quorem+0x42>
 80102bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80102c0:	b92b      	cbnz	r3, 80102ce <quorem+0x9c>
 80102c2:	9b01      	ldr	r3, [sp, #4]
 80102c4:	3b04      	subs	r3, #4
 80102c6:	429d      	cmp	r5, r3
 80102c8:	461a      	mov	r2, r3
 80102ca:	d32c      	bcc.n	8010326 <quorem+0xf4>
 80102cc:	613c      	str	r4, [r7, #16]
 80102ce:	4638      	mov	r0, r7
 80102d0:	f001 f9a8 	bl	8011624 <__mcmp>
 80102d4:	2800      	cmp	r0, #0
 80102d6:	db22      	blt.n	801031e <quorem+0xec>
 80102d8:	3601      	adds	r6, #1
 80102da:	4629      	mov	r1, r5
 80102dc:	2000      	movs	r0, #0
 80102de:	f858 2b04 	ldr.w	r2, [r8], #4
 80102e2:	f8d1 c000 	ldr.w	ip, [r1]
 80102e6:	b293      	uxth	r3, r2
 80102e8:	1ac3      	subs	r3, r0, r3
 80102ea:	0c12      	lsrs	r2, r2, #16
 80102ec:	fa13 f38c 	uxtah	r3, r3, ip
 80102f0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80102f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102fe:	45c1      	cmp	r9, r8
 8010300:	f841 3b04 	str.w	r3, [r1], #4
 8010304:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010308:	d2e9      	bcs.n	80102de <quorem+0xac>
 801030a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801030e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010312:	b922      	cbnz	r2, 801031e <quorem+0xec>
 8010314:	3b04      	subs	r3, #4
 8010316:	429d      	cmp	r5, r3
 8010318:	461a      	mov	r2, r3
 801031a:	d30a      	bcc.n	8010332 <quorem+0x100>
 801031c:	613c      	str	r4, [r7, #16]
 801031e:	4630      	mov	r0, r6
 8010320:	b003      	add	sp, #12
 8010322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010326:	6812      	ldr	r2, [r2, #0]
 8010328:	3b04      	subs	r3, #4
 801032a:	2a00      	cmp	r2, #0
 801032c:	d1ce      	bne.n	80102cc <quorem+0x9a>
 801032e:	3c01      	subs	r4, #1
 8010330:	e7c9      	b.n	80102c6 <quorem+0x94>
 8010332:	6812      	ldr	r2, [r2, #0]
 8010334:	3b04      	subs	r3, #4
 8010336:	2a00      	cmp	r2, #0
 8010338:	d1f0      	bne.n	801031c <quorem+0xea>
 801033a:	3c01      	subs	r4, #1
 801033c:	e7eb      	b.n	8010316 <quorem+0xe4>
 801033e:	2000      	movs	r0, #0
 8010340:	e7ee      	b.n	8010320 <quorem+0xee>
 8010342:	0000      	movs	r0, r0
 8010344:	0000      	movs	r0, r0
	...

08010348 <_dtoa_r>:
 8010348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034c:	ed2d 8b04 	vpush	{d8-d9}
 8010350:	69c5      	ldr	r5, [r0, #28]
 8010352:	b093      	sub	sp, #76	; 0x4c
 8010354:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010358:	ec57 6b10 	vmov	r6, r7, d0
 801035c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010360:	9107      	str	r1, [sp, #28]
 8010362:	4604      	mov	r4, r0
 8010364:	920a      	str	r2, [sp, #40]	; 0x28
 8010366:	930d      	str	r3, [sp, #52]	; 0x34
 8010368:	b975      	cbnz	r5, 8010388 <_dtoa_r+0x40>
 801036a:	2010      	movs	r0, #16
 801036c:	f000 fe2a 	bl	8010fc4 <malloc>
 8010370:	4602      	mov	r2, r0
 8010372:	61e0      	str	r0, [r4, #28]
 8010374:	b920      	cbnz	r0, 8010380 <_dtoa_r+0x38>
 8010376:	4bae      	ldr	r3, [pc, #696]	; (8010630 <_dtoa_r+0x2e8>)
 8010378:	21ef      	movs	r1, #239	; 0xef
 801037a:	48ae      	ldr	r0, [pc, #696]	; (8010634 <_dtoa_r+0x2ec>)
 801037c:	f001 fc82 	bl	8011c84 <__assert_func>
 8010380:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010384:	6005      	str	r5, [r0, #0]
 8010386:	60c5      	str	r5, [r0, #12]
 8010388:	69e3      	ldr	r3, [r4, #28]
 801038a:	6819      	ldr	r1, [r3, #0]
 801038c:	b151      	cbz	r1, 80103a4 <_dtoa_r+0x5c>
 801038e:	685a      	ldr	r2, [r3, #4]
 8010390:	604a      	str	r2, [r1, #4]
 8010392:	2301      	movs	r3, #1
 8010394:	4093      	lsls	r3, r2
 8010396:	608b      	str	r3, [r1, #8]
 8010398:	4620      	mov	r0, r4
 801039a:	f000 ff07 	bl	80111ac <_Bfree>
 801039e:	69e3      	ldr	r3, [r4, #28]
 80103a0:	2200      	movs	r2, #0
 80103a2:	601a      	str	r2, [r3, #0]
 80103a4:	1e3b      	subs	r3, r7, #0
 80103a6:	bfbb      	ittet	lt
 80103a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80103ac:	9303      	strlt	r3, [sp, #12]
 80103ae:	2300      	movge	r3, #0
 80103b0:	2201      	movlt	r2, #1
 80103b2:	bfac      	ite	ge
 80103b4:	f8c8 3000 	strge.w	r3, [r8]
 80103b8:	f8c8 2000 	strlt.w	r2, [r8]
 80103bc:	4b9e      	ldr	r3, [pc, #632]	; (8010638 <_dtoa_r+0x2f0>)
 80103be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80103c2:	ea33 0308 	bics.w	r3, r3, r8
 80103c6:	d11b      	bne.n	8010400 <_dtoa_r+0xb8>
 80103c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80103ce:	6013      	str	r3, [r2, #0]
 80103d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80103d4:	4333      	orrs	r3, r6
 80103d6:	f000 8593 	beq.w	8010f00 <_dtoa_r+0xbb8>
 80103da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103dc:	b963      	cbnz	r3, 80103f8 <_dtoa_r+0xb0>
 80103de:	4b97      	ldr	r3, [pc, #604]	; (801063c <_dtoa_r+0x2f4>)
 80103e0:	e027      	b.n	8010432 <_dtoa_r+0xea>
 80103e2:	4b97      	ldr	r3, [pc, #604]	; (8010640 <_dtoa_r+0x2f8>)
 80103e4:	9300      	str	r3, [sp, #0]
 80103e6:	3308      	adds	r3, #8
 80103e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80103ea:	6013      	str	r3, [r2, #0]
 80103ec:	9800      	ldr	r0, [sp, #0]
 80103ee:	b013      	add	sp, #76	; 0x4c
 80103f0:	ecbd 8b04 	vpop	{d8-d9}
 80103f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f8:	4b90      	ldr	r3, [pc, #576]	; (801063c <_dtoa_r+0x2f4>)
 80103fa:	9300      	str	r3, [sp, #0]
 80103fc:	3303      	adds	r3, #3
 80103fe:	e7f3      	b.n	80103e8 <_dtoa_r+0xa0>
 8010400:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010404:	2200      	movs	r2, #0
 8010406:	ec51 0b17 	vmov	r0, r1, d7
 801040a:	eeb0 8a47 	vmov.f32	s16, s14
 801040e:	eef0 8a67 	vmov.f32	s17, s15
 8010412:	2300      	movs	r3, #0
 8010414:	f7f0 fb68 	bl	8000ae8 <__aeabi_dcmpeq>
 8010418:	4681      	mov	r9, r0
 801041a:	b160      	cbz	r0, 8010436 <_dtoa_r+0xee>
 801041c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801041e:	2301      	movs	r3, #1
 8010420:	6013      	str	r3, [r2, #0]
 8010422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010424:	2b00      	cmp	r3, #0
 8010426:	f000 8568 	beq.w	8010efa <_dtoa_r+0xbb2>
 801042a:	4b86      	ldr	r3, [pc, #536]	; (8010644 <_dtoa_r+0x2fc>)
 801042c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801042e:	6013      	str	r3, [r2, #0]
 8010430:	3b01      	subs	r3, #1
 8010432:	9300      	str	r3, [sp, #0]
 8010434:	e7da      	b.n	80103ec <_dtoa_r+0xa4>
 8010436:	aa10      	add	r2, sp, #64	; 0x40
 8010438:	a911      	add	r1, sp, #68	; 0x44
 801043a:	4620      	mov	r0, r4
 801043c:	eeb0 0a48 	vmov.f32	s0, s16
 8010440:	eef0 0a68 	vmov.f32	s1, s17
 8010444:	f001 f994 	bl	8011770 <__d2b>
 8010448:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801044c:	4682      	mov	sl, r0
 801044e:	2d00      	cmp	r5, #0
 8010450:	d07f      	beq.n	8010552 <_dtoa_r+0x20a>
 8010452:	ee18 3a90 	vmov	r3, s17
 8010456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801045a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801045e:	ec51 0b18 	vmov	r0, r1, d8
 8010462:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010466:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801046a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801046e:	4619      	mov	r1, r3
 8010470:	2200      	movs	r2, #0
 8010472:	4b75      	ldr	r3, [pc, #468]	; (8010648 <_dtoa_r+0x300>)
 8010474:	f7ef ff18 	bl	80002a8 <__aeabi_dsub>
 8010478:	a367      	add	r3, pc, #412	; (adr r3, 8010618 <_dtoa_r+0x2d0>)
 801047a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047e:	f7f0 f8cb 	bl	8000618 <__aeabi_dmul>
 8010482:	a367      	add	r3, pc, #412	; (adr r3, 8010620 <_dtoa_r+0x2d8>)
 8010484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010488:	f7ef ff10 	bl	80002ac <__adddf3>
 801048c:	4606      	mov	r6, r0
 801048e:	4628      	mov	r0, r5
 8010490:	460f      	mov	r7, r1
 8010492:	f7f0 f857 	bl	8000544 <__aeabi_i2d>
 8010496:	a364      	add	r3, pc, #400	; (adr r3, 8010628 <_dtoa_r+0x2e0>)
 8010498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049c:	f7f0 f8bc 	bl	8000618 <__aeabi_dmul>
 80104a0:	4602      	mov	r2, r0
 80104a2:	460b      	mov	r3, r1
 80104a4:	4630      	mov	r0, r6
 80104a6:	4639      	mov	r1, r7
 80104a8:	f7ef ff00 	bl	80002ac <__adddf3>
 80104ac:	4606      	mov	r6, r0
 80104ae:	460f      	mov	r7, r1
 80104b0:	f7f0 fb62 	bl	8000b78 <__aeabi_d2iz>
 80104b4:	2200      	movs	r2, #0
 80104b6:	4683      	mov	fp, r0
 80104b8:	2300      	movs	r3, #0
 80104ba:	4630      	mov	r0, r6
 80104bc:	4639      	mov	r1, r7
 80104be:	f7f0 fb1d 	bl	8000afc <__aeabi_dcmplt>
 80104c2:	b148      	cbz	r0, 80104d8 <_dtoa_r+0x190>
 80104c4:	4658      	mov	r0, fp
 80104c6:	f7f0 f83d 	bl	8000544 <__aeabi_i2d>
 80104ca:	4632      	mov	r2, r6
 80104cc:	463b      	mov	r3, r7
 80104ce:	f7f0 fb0b 	bl	8000ae8 <__aeabi_dcmpeq>
 80104d2:	b908      	cbnz	r0, 80104d8 <_dtoa_r+0x190>
 80104d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80104d8:	f1bb 0f16 	cmp.w	fp, #22
 80104dc:	d857      	bhi.n	801058e <_dtoa_r+0x246>
 80104de:	4b5b      	ldr	r3, [pc, #364]	; (801064c <_dtoa_r+0x304>)
 80104e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80104e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e8:	ec51 0b18 	vmov	r0, r1, d8
 80104ec:	f7f0 fb06 	bl	8000afc <__aeabi_dcmplt>
 80104f0:	2800      	cmp	r0, #0
 80104f2:	d04e      	beq.n	8010592 <_dtoa_r+0x24a>
 80104f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80104f8:	2300      	movs	r3, #0
 80104fa:	930c      	str	r3, [sp, #48]	; 0x30
 80104fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104fe:	1b5b      	subs	r3, r3, r5
 8010500:	1e5a      	subs	r2, r3, #1
 8010502:	bf45      	ittet	mi
 8010504:	f1c3 0301 	rsbmi	r3, r3, #1
 8010508:	9305      	strmi	r3, [sp, #20]
 801050a:	2300      	movpl	r3, #0
 801050c:	2300      	movmi	r3, #0
 801050e:	9206      	str	r2, [sp, #24]
 8010510:	bf54      	ite	pl
 8010512:	9305      	strpl	r3, [sp, #20]
 8010514:	9306      	strmi	r3, [sp, #24]
 8010516:	f1bb 0f00 	cmp.w	fp, #0
 801051a:	db3c      	blt.n	8010596 <_dtoa_r+0x24e>
 801051c:	9b06      	ldr	r3, [sp, #24]
 801051e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010522:	445b      	add	r3, fp
 8010524:	9306      	str	r3, [sp, #24]
 8010526:	2300      	movs	r3, #0
 8010528:	9308      	str	r3, [sp, #32]
 801052a:	9b07      	ldr	r3, [sp, #28]
 801052c:	2b09      	cmp	r3, #9
 801052e:	d868      	bhi.n	8010602 <_dtoa_r+0x2ba>
 8010530:	2b05      	cmp	r3, #5
 8010532:	bfc4      	itt	gt
 8010534:	3b04      	subgt	r3, #4
 8010536:	9307      	strgt	r3, [sp, #28]
 8010538:	9b07      	ldr	r3, [sp, #28]
 801053a:	f1a3 0302 	sub.w	r3, r3, #2
 801053e:	bfcc      	ite	gt
 8010540:	2500      	movgt	r5, #0
 8010542:	2501      	movle	r5, #1
 8010544:	2b03      	cmp	r3, #3
 8010546:	f200 8085 	bhi.w	8010654 <_dtoa_r+0x30c>
 801054a:	e8df f003 	tbb	[pc, r3]
 801054e:	3b2e      	.short	0x3b2e
 8010550:	5839      	.short	0x5839
 8010552:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010556:	441d      	add	r5, r3
 8010558:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801055c:	2b20      	cmp	r3, #32
 801055e:	bfc1      	itttt	gt
 8010560:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010564:	fa08 f803 	lslgt.w	r8, r8, r3
 8010568:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801056c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010570:	bfd6      	itet	le
 8010572:	f1c3 0320 	rsble	r3, r3, #32
 8010576:	ea48 0003 	orrgt.w	r0, r8, r3
 801057a:	fa06 f003 	lslle.w	r0, r6, r3
 801057e:	f7ef ffd1 	bl	8000524 <__aeabi_ui2d>
 8010582:	2201      	movs	r2, #1
 8010584:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010588:	3d01      	subs	r5, #1
 801058a:	920e      	str	r2, [sp, #56]	; 0x38
 801058c:	e76f      	b.n	801046e <_dtoa_r+0x126>
 801058e:	2301      	movs	r3, #1
 8010590:	e7b3      	b.n	80104fa <_dtoa_r+0x1b2>
 8010592:	900c      	str	r0, [sp, #48]	; 0x30
 8010594:	e7b2      	b.n	80104fc <_dtoa_r+0x1b4>
 8010596:	9b05      	ldr	r3, [sp, #20]
 8010598:	eba3 030b 	sub.w	r3, r3, fp
 801059c:	9305      	str	r3, [sp, #20]
 801059e:	f1cb 0300 	rsb	r3, fp, #0
 80105a2:	9308      	str	r3, [sp, #32]
 80105a4:	2300      	movs	r3, #0
 80105a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80105a8:	e7bf      	b.n	801052a <_dtoa_r+0x1e2>
 80105aa:	2300      	movs	r3, #0
 80105ac:	9309      	str	r3, [sp, #36]	; 0x24
 80105ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	dc52      	bgt.n	801065a <_dtoa_r+0x312>
 80105b4:	2301      	movs	r3, #1
 80105b6:	9301      	str	r3, [sp, #4]
 80105b8:	9304      	str	r3, [sp, #16]
 80105ba:	461a      	mov	r2, r3
 80105bc:	920a      	str	r2, [sp, #40]	; 0x28
 80105be:	e00b      	b.n	80105d8 <_dtoa_r+0x290>
 80105c0:	2301      	movs	r3, #1
 80105c2:	e7f3      	b.n	80105ac <_dtoa_r+0x264>
 80105c4:	2300      	movs	r3, #0
 80105c6:	9309      	str	r3, [sp, #36]	; 0x24
 80105c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105ca:	445b      	add	r3, fp
 80105cc:	9301      	str	r3, [sp, #4]
 80105ce:	3301      	adds	r3, #1
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	9304      	str	r3, [sp, #16]
 80105d4:	bfb8      	it	lt
 80105d6:	2301      	movlt	r3, #1
 80105d8:	69e0      	ldr	r0, [r4, #28]
 80105da:	2100      	movs	r1, #0
 80105dc:	2204      	movs	r2, #4
 80105de:	f102 0614 	add.w	r6, r2, #20
 80105e2:	429e      	cmp	r6, r3
 80105e4:	d93d      	bls.n	8010662 <_dtoa_r+0x31a>
 80105e6:	6041      	str	r1, [r0, #4]
 80105e8:	4620      	mov	r0, r4
 80105ea:	f000 fd9f 	bl	801112c <_Balloc>
 80105ee:	9000      	str	r0, [sp, #0]
 80105f0:	2800      	cmp	r0, #0
 80105f2:	d139      	bne.n	8010668 <_dtoa_r+0x320>
 80105f4:	4b16      	ldr	r3, [pc, #88]	; (8010650 <_dtoa_r+0x308>)
 80105f6:	4602      	mov	r2, r0
 80105f8:	f240 11af 	movw	r1, #431	; 0x1af
 80105fc:	e6bd      	b.n	801037a <_dtoa_r+0x32>
 80105fe:	2301      	movs	r3, #1
 8010600:	e7e1      	b.n	80105c6 <_dtoa_r+0x27e>
 8010602:	2501      	movs	r5, #1
 8010604:	2300      	movs	r3, #0
 8010606:	9307      	str	r3, [sp, #28]
 8010608:	9509      	str	r5, [sp, #36]	; 0x24
 801060a:	f04f 33ff 	mov.w	r3, #4294967295
 801060e:	9301      	str	r3, [sp, #4]
 8010610:	9304      	str	r3, [sp, #16]
 8010612:	2200      	movs	r2, #0
 8010614:	2312      	movs	r3, #18
 8010616:	e7d1      	b.n	80105bc <_dtoa_r+0x274>
 8010618:	636f4361 	.word	0x636f4361
 801061c:	3fd287a7 	.word	0x3fd287a7
 8010620:	8b60c8b3 	.word	0x8b60c8b3
 8010624:	3fc68a28 	.word	0x3fc68a28
 8010628:	509f79fb 	.word	0x509f79fb
 801062c:	3fd34413 	.word	0x3fd34413
 8010630:	08013f11 	.word	0x08013f11
 8010634:	08013f28 	.word	0x08013f28
 8010638:	7ff00000 	.word	0x7ff00000
 801063c:	08013f0d 	.word	0x08013f0d
 8010640:	08013f04 	.word	0x08013f04
 8010644:	08013ee1 	.word	0x08013ee1
 8010648:	3ff80000 	.word	0x3ff80000
 801064c:	08014018 	.word	0x08014018
 8010650:	08013f80 	.word	0x08013f80
 8010654:	2301      	movs	r3, #1
 8010656:	9309      	str	r3, [sp, #36]	; 0x24
 8010658:	e7d7      	b.n	801060a <_dtoa_r+0x2c2>
 801065a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801065c:	9301      	str	r3, [sp, #4]
 801065e:	9304      	str	r3, [sp, #16]
 8010660:	e7ba      	b.n	80105d8 <_dtoa_r+0x290>
 8010662:	3101      	adds	r1, #1
 8010664:	0052      	lsls	r2, r2, #1
 8010666:	e7ba      	b.n	80105de <_dtoa_r+0x296>
 8010668:	69e3      	ldr	r3, [r4, #28]
 801066a:	9a00      	ldr	r2, [sp, #0]
 801066c:	601a      	str	r2, [r3, #0]
 801066e:	9b04      	ldr	r3, [sp, #16]
 8010670:	2b0e      	cmp	r3, #14
 8010672:	f200 80a8 	bhi.w	80107c6 <_dtoa_r+0x47e>
 8010676:	2d00      	cmp	r5, #0
 8010678:	f000 80a5 	beq.w	80107c6 <_dtoa_r+0x47e>
 801067c:	f1bb 0f00 	cmp.w	fp, #0
 8010680:	dd38      	ble.n	80106f4 <_dtoa_r+0x3ac>
 8010682:	4bc0      	ldr	r3, [pc, #768]	; (8010984 <_dtoa_r+0x63c>)
 8010684:	f00b 020f 	and.w	r2, fp, #15
 8010688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801068c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010690:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010694:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010698:	d019      	beq.n	80106ce <_dtoa_r+0x386>
 801069a:	4bbb      	ldr	r3, [pc, #748]	; (8010988 <_dtoa_r+0x640>)
 801069c:	ec51 0b18 	vmov	r0, r1, d8
 80106a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80106a4:	f7f0 f8e2 	bl	800086c <__aeabi_ddiv>
 80106a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106ac:	f008 080f 	and.w	r8, r8, #15
 80106b0:	2503      	movs	r5, #3
 80106b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010988 <_dtoa_r+0x640>
 80106b6:	f1b8 0f00 	cmp.w	r8, #0
 80106ba:	d10a      	bne.n	80106d2 <_dtoa_r+0x38a>
 80106bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106c0:	4632      	mov	r2, r6
 80106c2:	463b      	mov	r3, r7
 80106c4:	f7f0 f8d2 	bl	800086c <__aeabi_ddiv>
 80106c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106cc:	e02b      	b.n	8010726 <_dtoa_r+0x3de>
 80106ce:	2502      	movs	r5, #2
 80106d0:	e7ef      	b.n	80106b2 <_dtoa_r+0x36a>
 80106d2:	f018 0f01 	tst.w	r8, #1
 80106d6:	d008      	beq.n	80106ea <_dtoa_r+0x3a2>
 80106d8:	4630      	mov	r0, r6
 80106da:	4639      	mov	r1, r7
 80106dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80106e0:	f7ef ff9a 	bl	8000618 <__aeabi_dmul>
 80106e4:	3501      	adds	r5, #1
 80106e6:	4606      	mov	r6, r0
 80106e8:	460f      	mov	r7, r1
 80106ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80106ee:	f109 0908 	add.w	r9, r9, #8
 80106f2:	e7e0      	b.n	80106b6 <_dtoa_r+0x36e>
 80106f4:	f000 809f 	beq.w	8010836 <_dtoa_r+0x4ee>
 80106f8:	f1cb 0600 	rsb	r6, fp, #0
 80106fc:	4ba1      	ldr	r3, [pc, #644]	; (8010984 <_dtoa_r+0x63c>)
 80106fe:	4fa2      	ldr	r7, [pc, #648]	; (8010988 <_dtoa_r+0x640>)
 8010700:	f006 020f 	and.w	r2, r6, #15
 8010704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070c:	ec51 0b18 	vmov	r0, r1, d8
 8010710:	f7ef ff82 	bl	8000618 <__aeabi_dmul>
 8010714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010718:	1136      	asrs	r6, r6, #4
 801071a:	2300      	movs	r3, #0
 801071c:	2502      	movs	r5, #2
 801071e:	2e00      	cmp	r6, #0
 8010720:	d17e      	bne.n	8010820 <_dtoa_r+0x4d8>
 8010722:	2b00      	cmp	r3, #0
 8010724:	d1d0      	bne.n	80106c8 <_dtoa_r+0x380>
 8010726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010728:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801072c:	2b00      	cmp	r3, #0
 801072e:	f000 8084 	beq.w	801083a <_dtoa_r+0x4f2>
 8010732:	4b96      	ldr	r3, [pc, #600]	; (801098c <_dtoa_r+0x644>)
 8010734:	2200      	movs	r2, #0
 8010736:	4640      	mov	r0, r8
 8010738:	4649      	mov	r1, r9
 801073a:	f7f0 f9df 	bl	8000afc <__aeabi_dcmplt>
 801073e:	2800      	cmp	r0, #0
 8010740:	d07b      	beq.n	801083a <_dtoa_r+0x4f2>
 8010742:	9b04      	ldr	r3, [sp, #16]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d078      	beq.n	801083a <_dtoa_r+0x4f2>
 8010748:	9b01      	ldr	r3, [sp, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	dd39      	ble.n	80107c2 <_dtoa_r+0x47a>
 801074e:	4b90      	ldr	r3, [pc, #576]	; (8010990 <_dtoa_r+0x648>)
 8010750:	2200      	movs	r2, #0
 8010752:	4640      	mov	r0, r8
 8010754:	4649      	mov	r1, r9
 8010756:	f7ef ff5f 	bl	8000618 <__aeabi_dmul>
 801075a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801075e:	9e01      	ldr	r6, [sp, #4]
 8010760:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010764:	3501      	adds	r5, #1
 8010766:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801076a:	4628      	mov	r0, r5
 801076c:	f7ef feea 	bl	8000544 <__aeabi_i2d>
 8010770:	4642      	mov	r2, r8
 8010772:	464b      	mov	r3, r9
 8010774:	f7ef ff50 	bl	8000618 <__aeabi_dmul>
 8010778:	4b86      	ldr	r3, [pc, #536]	; (8010994 <_dtoa_r+0x64c>)
 801077a:	2200      	movs	r2, #0
 801077c:	f7ef fd96 	bl	80002ac <__adddf3>
 8010780:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010788:	9303      	str	r3, [sp, #12]
 801078a:	2e00      	cmp	r6, #0
 801078c:	d158      	bne.n	8010840 <_dtoa_r+0x4f8>
 801078e:	4b82      	ldr	r3, [pc, #520]	; (8010998 <_dtoa_r+0x650>)
 8010790:	2200      	movs	r2, #0
 8010792:	4640      	mov	r0, r8
 8010794:	4649      	mov	r1, r9
 8010796:	f7ef fd87 	bl	80002a8 <__aeabi_dsub>
 801079a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801079e:	4680      	mov	r8, r0
 80107a0:	4689      	mov	r9, r1
 80107a2:	f7f0 f9c9 	bl	8000b38 <__aeabi_dcmpgt>
 80107a6:	2800      	cmp	r0, #0
 80107a8:	f040 8296 	bne.w	8010cd8 <_dtoa_r+0x990>
 80107ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80107b0:	4640      	mov	r0, r8
 80107b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107b6:	4649      	mov	r1, r9
 80107b8:	f7f0 f9a0 	bl	8000afc <__aeabi_dcmplt>
 80107bc:	2800      	cmp	r0, #0
 80107be:	f040 8289 	bne.w	8010cd4 <_dtoa_r+0x98c>
 80107c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80107c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	f2c0 814e 	blt.w	8010a6a <_dtoa_r+0x722>
 80107ce:	f1bb 0f0e 	cmp.w	fp, #14
 80107d2:	f300 814a 	bgt.w	8010a6a <_dtoa_r+0x722>
 80107d6:	4b6b      	ldr	r3, [pc, #428]	; (8010984 <_dtoa_r+0x63c>)
 80107d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80107dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80107e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	f280 80dc 	bge.w	80109a0 <_dtoa_r+0x658>
 80107e8:	9b04      	ldr	r3, [sp, #16]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f300 80d8 	bgt.w	80109a0 <_dtoa_r+0x658>
 80107f0:	f040 826f 	bne.w	8010cd2 <_dtoa_r+0x98a>
 80107f4:	4b68      	ldr	r3, [pc, #416]	; (8010998 <_dtoa_r+0x650>)
 80107f6:	2200      	movs	r2, #0
 80107f8:	4640      	mov	r0, r8
 80107fa:	4649      	mov	r1, r9
 80107fc:	f7ef ff0c 	bl	8000618 <__aeabi_dmul>
 8010800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010804:	f7f0 f98e 	bl	8000b24 <__aeabi_dcmpge>
 8010808:	9e04      	ldr	r6, [sp, #16]
 801080a:	4637      	mov	r7, r6
 801080c:	2800      	cmp	r0, #0
 801080e:	f040 8245 	bne.w	8010c9c <_dtoa_r+0x954>
 8010812:	9d00      	ldr	r5, [sp, #0]
 8010814:	2331      	movs	r3, #49	; 0x31
 8010816:	f805 3b01 	strb.w	r3, [r5], #1
 801081a:	f10b 0b01 	add.w	fp, fp, #1
 801081e:	e241      	b.n	8010ca4 <_dtoa_r+0x95c>
 8010820:	07f2      	lsls	r2, r6, #31
 8010822:	d505      	bpl.n	8010830 <_dtoa_r+0x4e8>
 8010824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010828:	f7ef fef6 	bl	8000618 <__aeabi_dmul>
 801082c:	3501      	adds	r5, #1
 801082e:	2301      	movs	r3, #1
 8010830:	1076      	asrs	r6, r6, #1
 8010832:	3708      	adds	r7, #8
 8010834:	e773      	b.n	801071e <_dtoa_r+0x3d6>
 8010836:	2502      	movs	r5, #2
 8010838:	e775      	b.n	8010726 <_dtoa_r+0x3de>
 801083a:	9e04      	ldr	r6, [sp, #16]
 801083c:	465f      	mov	r7, fp
 801083e:	e792      	b.n	8010766 <_dtoa_r+0x41e>
 8010840:	9900      	ldr	r1, [sp, #0]
 8010842:	4b50      	ldr	r3, [pc, #320]	; (8010984 <_dtoa_r+0x63c>)
 8010844:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010848:	4431      	add	r1, r6
 801084a:	9102      	str	r1, [sp, #8]
 801084c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801084e:	eeb0 9a47 	vmov.f32	s18, s14
 8010852:	eef0 9a67 	vmov.f32	s19, s15
 8010856:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801085a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801085e:	2900      	cmp	r1, #0
 8010860:	d044      	beq.n	80108ec <_dtoa_r+0x5a4>
 8010862:	494e      	ldr	r1, [pc, #312]	; (801099c <_dtoa_r+0x654>)
 8010864:	2000      	movs	r0, #0
 8010866:	f7f0 f801 	bl	800086c <__aeabi_ddiv>
 801086a:	ec53 2b19 	vmov	r2, r3, d9
 801086e:	f7ef fd1b 	bl	80002a8 <__aeabi_dsub>
 8010872:	9d00      	ldr	r5, [sp, #0]
 8010874:	ec41 0b19 	vmov	d9, r0, r1
 8010878:	4649      	mov	r1, r9
 801087a:	4640      	mov	r0, r8
 801087c:	f7f0 f97c 	bl	8000b78 <__aeabi_d2iz>
 8010880:	4606      	mov	r6, r0
 8010882:	f7ef fe5f 	bl	8000544 <__aeabi_i2d>
 8010886:	4602      	mov	r2, r0
 8010888:	460b      	mov	r3, r1
 801088a:	4640      	mov	r0, r8
 801088c:	4649      	mov	r1, r9
 801088e:	f7ef fd0b 	bl	80002a8 <__aeabi_dsub>
 8010892:	3630      	adds	r6, #48	; 0x30
 8010894:	f805 6b01 	strb.w	r6, [r5], #1
 8010898:	ec53 2b19 	vmov	r2, r3, d9
 801089c:	4680      	mov	r8, r0
 801089e:	4689      	mov	r9, r1
 80108a0:	f7f0 f92c 	bl	8000afc <__aeabi_dcmplt>
 80108a4:	2800      	cmp	r0, #0
 80108a6:	d164      	bne.n	8010972 <_dtoa_r+0x62a>
 80108a8:	4642      	mov	r2, r8
 80108aa:	464b      	mov	r3, r9
 80108ac:	4937      	ldr	r1, [pc, #220]	; (801098c <_dtoa_r+0x644>)
 80108ae:	2000      	movs	r0, #0
 80108b0:	f7ef fcfa 	bl	80002a8 <__aeabi_dsub>
 80108b4:	ec53 2b19 	vmov	r2, r3, d9
 80108b8:	f7f0 f920 	bl	8000afc <__aeabi_dcmplt>
 80108bc:	2800      	cmp	r0, #0
 80108be:	f040 80b6 	bne.w	8010a2e <_dtoa_r+0x6e6>
 80108c2:	9b02      	ldr	r3, [sp, #8]
 80108c4:	429d      	cmp	r5, r3
 80108c6:	f43f af7c 	beq.w	80107c2 <_dtoa_r+0x47a>
 80108ca:	4b31      	ldr	r3, [pc, #196]	; (8010990 <_dtoa_r+0x648>)
 80108cc:	ec51 0b19 	vmov	r0, r1, d9
 80108d0:	2200      	movs	r2, #0
 80108d2:	f7ef fea1 	bl	8000618 <__aeabi_dmul>
 80108d6:	4b2e      	ldr	r3, [pc, #184]	; (8010990 <_dtoa_r+0x648>)
 80108d8:	ec41 0b19 	vmov	d9, r0, r1
 80108dc:	2200      	movs	r2, #0
 80108de:	4640      	mov	r0, r8
 80108e0:	4649      	mov	r1, r9
 80108e2:	f7ef fe99 	bl	8000618 <__aeabi_dmul>
 80108e6:	4680      	mov	r8, r0
 80108e8:	4689      	mov	r9, r1
 80108ea:	e7c5      	b.n	8010878 <_dtoa_r+0x530>
 80108ec:	ec51 0b17 	vmov	r0, r1, d7
 80108f0:	f7ef fe92 	bl	8000618 <__aeabi_dmul>
 80108f4:	9b02      	ldr	r3, [sp, #8]
 80108f6:	9d00      	ldr	r5, [sp, #0]
 80108f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80108fa:	ec41 0b19 	vmov	d9, r0, r1
 80108fe:	4649      	mov	r1, r9
 8010900:	4640      	mov	r0, r8
 8010902:	f7f0 f939 	bl	8000b78 <__aeabi_d2iz>
 8010906:	4606      	mov	r6, r0
 8010908:	f7ef fe1c 	bl	8000544 <__aeabi_i2d>
 801090c:	3630      	adds	r6, #48	; 0x30
 801090e:	4602      	mov	r2, r0
 8010910:	460b      	mov	r3, r1
 8010912:	4640      	mov	r0, r8
 8010914:	4649      	mov	r1, r9
 8010916:	f7ef fcc7 	bl	80002a8 <__aeabi_dsub>
 801091a:	f805 6b01 	strb.w	r6, [r5], #1
 801091e:	9b02      	ldr	r3, [sp, #8]
 8010920:	429d      	cmp	r5, r3
 8010922:	4680      	mov	r8, r0
 8010924:	4689      	mov	r9, r1
 8010926:	f04f 0200 	mov.w	r2, #0
 801092a:	d124      	bne.n	8010976 <_dtoa_r+0x62e>
 801092c:	4b1b      	ldr	r3, [pc, #108]	; (801099c <_dtoa_r+0x654>)
 801092e:	ec51 0b19 	vmov	r0, r1, d9
 8010932:	f7ef fcbb 	bl	80002ac <__adddf3>
 8010936:	4602      	mov	r2, r0
 8010938:	460b      	mov	r3, r1
 801093a:	4640      	mov	r0, r8
 801093c:	4649      	mov	r1, r9
 801093e:	f7f0 f8fb 	bl	8000b38 <__aeabi_dcmpgt>
 8010942:	2800      	cmp	r0, #0
 8010944:	d173      	bne.n	8010a2e <_dtoa_r+0x6e6>
 8010946:	ec53 2b19 	vmov	r2, r3, d9
 801094a:	4914      	ldr	r1, [pc, #80]	; (801099c <_dtoa_r+0x654>)
 801094c:	2000      	movs	r0, #0
 801094e:	f7ef fcab 	bl	80002a8 <__aeabi_dsub>
 8010952:	4602      	mov	r2, r0
 8010954:	460b      	mov	r3, r1
 8010956:	4640      	mov	r0, r8
 8010958:	4649      	mov	r1, r9
 801095a:	f7f0 f8cf 	bl	8000afc <__aeabi_dcmplt>
 801095e:	2800      	cmp	r0, #0
 8010960:	f43f af2f 	beq.w	80107c2 <_dtoa_r+0x47a>
 8010964:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010966:	1e6b      	subs	r3, r5, #1
 8010968:	930f      	str	r3, [sp, #60]	; 0x3c
 801096a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801096e:	2b30      	cmp	r3, #48	; 0x30
 8010970:	d0f8      	beq.n	8010964 <_dtoa_r+0x61c>
 8010972:	46bb      	mov	fp, r7
 8010974:	e04a      	b.n	8010a0c <_dtoa_r+0x6c4>
 8010976:	4b06      	ldr	r3, [pc, #24]	; (8010990 <_dtoa_r+0x648>)
 8010978:	f7ef fe4e 	bl	8000618 <__aeabi_dmul>
 801097c:	4680      	mov	r8, r0
 801097e:	4689      	mov	r9, r1
 8010980:	e7bd      	b.n	80108fe <_dtoa_r+0x5b6>
 8010982:	bf00      	nop
 8010984:	08014018 	.word	0x08014018
 8010988:	08013ff0 	.word	0x08013ff0
 801098c:	3ff00000 	.word	0x3ff00000
 8010990:	40240000 	.word	0x40240000
 8010994:	401c0000 	.word	0x401c0000
 8010998:	40140000 	.word	0x40140000
 801099c:	3fe00000 	.word	0x3fe00000
 80109a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80109a4:	9d00      	ldr	r5, [sp, #0]
 80109a6:	4642      	mov	r2, r8
 80109a8:	464b      	mov	r3, r9
 80109aa:	4630      	mov	r0, r6
 80109ac:	4639      	mov	r1, r7
 80109ae:	f7ef ff5d 	bl	800086c <__aeabi_ddiv>
 80109b2:	f7f0 f8e1 	bl	8000b78 <__aeabi_d2iz>
 80109b6:	9001      	str	r0, [sp, #4]
 80109b8:	f7ef fdc4 	bl	8000544 <__aeabi_i2d>
 80109bc:	4642      	mov	r2, r8
 80109be:	464b      	mov	r3, r9
 80109c0:	f7ef fe2a 	bl	8000618 <__aeabi_dmul>
 80109c4:	4602      	mov	r2, r0
 80109c6:	460b      	mov	r3, r1
 80109c8:	4630      	mov	r0, r6
 80109ca:	4639      	mov	r1, r7
 80109cc:	f7ef fc6c 	bl	80002a8 <__aeabi_dsub>
 80109d0:	9e01      	ldr	r6, [sp, #4]
 80109d2:	9f04      	ldr	r7, [sp, #16]
 80109d4:	3630      	adds	r6, #48	; 0x30
 80109d6:	f805 6b01 	strb.w	r6, [r5], #1
 80109da:	9e00      	ldr	r6, [sp, #0]
 80109dc:	1bae      	subs	r6, r5, r6
 80109de:	42b7      	cmp	r7, r6
 80109e0:	4602      	mov	r2, r0
 80109e2:	460b      	mov	r3, r1
 80109e4:	d134      	bne.n	8010a50 <_dtoa_r+0x708>
 80109e6:	f7ef fc61 	bl	80002ac <__adddf3>
 80109ea:	4642      	mov	r2, r8
 80109ec:	464b      	mov	r3, r9
 80109ee:	4606      	mov	r6, r0
 80109f0:	460f      	mov	r7, r1
 80109f2:	f7f0 f8a1 	bl	8000b38 <__aeabi_dcmpgt>
 80109f6:	b9c8      	cbnz	r0, 8010a2c <_dtoa_r+0x6e4>
 80109f8:	4642      	mov	r2, r8
 80109fa:	464b      	mov	r3, r9
 80109fc:	4630      	mov	r0, r6
 80109fe:	4639      	mov	r1, r7
 8010a00:	f7f0 f872 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a04:	b110      	cbz	r0, 8010a0c <_dtoa_r+0x6c4>
 8010a06:	9b01      	ldr	r3, [sp, #4]
 8010a08:	07db      	lsls	r3, r3, #31
 8010a0a:	d40f      	bmi.n	8010a2c <_dtoa_r+0x6e4>
 8010a0c:	4651      	mov	r1, sl
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f000 fbcc 	bl	80111ac <_Bfree>
 8010a14:	2300      	movs	r3, #0
 8010a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a18:	702b      	strb	r3, [r5, #0]
 8010a1a:	f10b 0301 	add.w	r3, fp, #1
 8010a1e:	6013      	str	r3, [r2, #0]
 8010a20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	f43f ace2 	beq.w	80103ec <_dtoa_r+0xa4>
 8010a28:	601d      	str	r5, [r3, #0]
 8010a2a:	e4df      	b.n	80103ec <_dtoa_r+0xa4>
 8010a2c:	465f      	mov	r7, fp
 8010a2e:	462b      	mov	r3, r5
 8010a30:	461d      	mov	r5, r3
 8010a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a36:	2a39      	cmp	r2, #57	; 0x39
 8010a38:	d106      	bne.n	8010a48 <_dtoa_r+0x700>
 8010a3a:	9a00      	ldr	r2, [sp, #0]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d1f7      	bne.n	8010a30 <_dtoa_r+0x6e8>
 8010a40:	9900      	ldr	r1, [sp, #0]
 8010a42:	2230      	movs	r2, #48	; 0x30
 8010a44:	3701      	adds	r7, #1
 8010a46:	700a      	strb	r2, [r1, #0]
 8010a48:	781a      	ldrb	r2, [r3, #0]
 8010a4a:	3201      	adds	r2, #1
 8010a4c:	701a      	strb	r2, [r3, #0]
 8010a4e:	e790      	b.n	8010972 <_dtoa_r+0x62a>
 8010a50:	4ba3      	ldr	r3, [pc, #652]	; (8010ce0 <_dtoa_r+0x998>)
 8010a52:	2200      	movs	r2, #0
 8010a54:	f7ef fde0 	bl	8000618 <__aeabi_dmul>
 8010a58:	2200      	movs	r2, #0
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	4606      	mov	r6, r0
 8010a5e:	460f      	mov	r7, r1
 8010a60:	f7f0 f842 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a64:	2800      	cmp	r0, #0
 8010a66:	d09e      	beq.n	80109a6 <_dtoa_r+0x65e>
 8010a68:	e7d0      	b.n	8010a0c <_dtoa_r+0x6c4>
 8010a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a6c:	2a00      	cmp	r2, #0
 8010a6e:	f000 80ca 	beq.w	8010c06 <_dtoa_r+0x8be>
 8010a72:	9a07      	ldr	r2, [sp, #28]
 8010a74:	2a01      	cmp	r2, #1
 8010a76:	f300 80ad 	bgt.w	8010bd4 <_dtoa_r+0x88c>
 8010a7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a7c:	2a00      	cmp	r2, #0
 8010a7e:	f000 80a5 	beq.w	8010bcc <_dtoa_r+0x884>
 8010a82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010a86:	9e08      	ldr	r6, [sp, #32]
 8010a88:	9d05      	ldr	r5, [sp, #20]
 8010a8a:	9a05      	ldr	r2, [sp, #20]
 8010a8c:	441a      	add	r2, r3
 8010a8e:	9205      	str	r2, [sp, #20]
 8010a90:	9a06      	ldr	r2, [sp, #24]
 8010a92:	2101      	movs	r1, #1
 8010a94:	441a      	add	r2, r3
 8010a96:	4620      	mov	r0, r4
 8010a98:	9206      	str	r2, [sp, #24]
 8010a9a:	f000 fc3d 	bl	8011318 <__i2b>
 8010a9e:	4607      	mov	r7, r0
 8010aa0:	b165      	cbz	r5, 8010abc <_dtoa_r+0x774>
 8010aa2:	9b06      	ldr	r3, [sp, #24]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	dd09      	ble.n	8010abc <_dtoa_r+0x774>
 8010aa8:	42ab      	cmp	r3, r5
 8010aaa:	9a05      	ldr	r2, [sp, #20]
 8010aac:	bfa8      	it	ge
 8010aae:	462b      	movge	r3, r5
 8010ab0:	1ad2      	subs	r2, r2, r3
 8010ab2:	9205      	str	r2, [sp, #20]
 8010ab4:	9a06      	ldr	r2, [sp, #24]
 8010ab6:	1aed      	subs	r5, r5, r3
 8010ab8:	1ad3      	subs	r3, r2, r3
 8010aba:	9306      	str	r3, [sp, #24]
 8010abc:	9b08      	ldr	r3, [sp, #32]
 8010abe:	b1f3      	cbz	r3, 8010afe <_dtoa_r+0x7b6>
 8010ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	f000 80a3 	beq.w	8010c0e <_dtoa_r+0x8c6>
 8010ac8:	2e00      	cmp	r6, #0
 8010aca:	dd10      	ble.n	8010aee <_dtoa_r+0x7a6>
 8010acc:	4639      	mov	r1, r7
 8010ace:	4632      	mov	r2, r6
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f000 fce1 	bl	8011498 <__pow5mult>
 8010ad6:	4652      	mov	r2, sl
 8010ad8:	4601      	mov	r1, r0
 8010ada:	4607      	mov	r7, r0
 8010adc:	4620      	mov	r0, r4
 8010ade:	f000 fc31 	bl	8011344 <__multiply>
 8010ae2:	4651      	mov	r1, sl
 8010ae4:	4680      	mov	r8, r0
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	f000 fb60 	bl	80111ac <_Bfree>
 8010aec:	46c2      	mov	sl, r8
 8010aee:	9b08      	ldr	r3, [sp, #32]
 8010af0:	1b9a      	subs	r2, r3, r6
 8010af2:	d004      	beq.n	8010afe <_dtoa_r+0x7b6>
 8010af4:	4651      	mov	r1, sl
 8010af6:	4620      	mov	r0, r4
 8010af8:	f000 fcce 	bl	8011498 <__pow5mult>
 8010afc:	4682      	mov	sl, r0
 8010afe:	2101      	movs	r1, #1
 8010b00:	4620      	mov	r0, r4
 8010b02:	f000 fc09 	bl	8011318 <__i2b>
 8010b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	4606      	mov	r6, r0
 8010b0c:	f340 8081 	ble.w	8010c12 <_dtoa_r+0x8ca>
 8010b10:	461a      	mov	r2, r3
 8010b12:	4601      	mov	r1, r0
 8010b14:	4620      	mov	r0, r4
 8010b16:	f000 fcbf 	bl	8011498 <__pow5mult>
 8010b1a:	9b07      	ldr	r3, [sp, #28]
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	4606      	mov	r6, r0
 8010b20:	dd7a      	ble.n	8010c18 <_dtoa_r+0x8d0>
 8010b22:	f04f 0800 	mov.w	r8, #0
 8010b26:	6933      	ldr	r3, [r6, #16]
 8010b28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010b2c:	6918      	ldr	r0, [r3, #16]
 8010b2e:	f000 fba5 	bl	801127c <__hi0bits>
 8010b32:	f1c0 0020 	rsb	r0, r0, #32
 8010b36:	9b06      	ldr	r3, [sp, #24]
 8010b38:	4418      	add	r0, r3
 8010b3a:	f010 001f 	ands.w	r0, r0, #31
 8010b3e:	f000 8094 	beq.w	8010c6a <_dtoa_r+0x922>
 8010b42:	f1c0 0320 	rsb	r3, r0, #32
 8010b46:	2b04      	cmp	r3, #4
 8010b48:	f340 8085 	ble.w	8010c56 <_dtoa_r+0x90e>
 8010b4c:	9b05      	ldr	r3, [sp, #20]
 8010b4e:	f1c0 001c 	rsb	r0, r0, #28
 8010b52:	4403      	add	r3, r0
 8010b54:	9305      	str	r3, [sp, #20]
 8010b56:	9b06      	ldr	r3, [sp, #24]
 8010b58:	4403      	add	r3, r0
 8010b5a:	4405      	add	r5, r0
 8010b5c:	9306      	str	r3, [sp, #24]
 8010b5e:	9b05      	ldr	r3, [sp, #20]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	dd05      	ble.n	8010b70 <_dtoa_r+0x828>
 8010b64:	4651      	mov	r1, sl
 8010b66:	461a      	mov	r2, r3
 8010b68:	4620      	mov	r0, r4
 8010b6a:	f000 fcef 	bl	801154c <__lshift>
 8010b6e:	4682      	mov	sl, r0
 8010b70:	9b06      	ldr	r3, [sp, #24]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	dd05      	ble.n	8010b82 <_dtoa_r+0x83a>
 8010b76:	4631      	mov	r1, r6
 8010b78:	461a      	mov	r2, r3
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f000 fce6 	bl	801154c <__lshift>
 8010b80:	4606      	mov	r6, r0
 8010b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d072      	beq.n	8010c6e <_dtoa_r+0x926>
 8010b88:	4631      	mov	r1, r6
 8010b8a:	4650      	mov	r0, sl
 8010b8c:	f000 fd4a 	bl	8011624 <__mcmp>
 8010b90:	2800      	cmp	r0, #0
 8010b92:	da6c      	bge.n	8010c6e <_dtoa_r+0x926>
 8010b94:	2300      	movs	r3, #0
 8010b96:	4651      	mov	r1, sl
 8010b98:	220a      	movs	r2, #10
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f000 fb28 	bl	80111f0 <__multadd>
 8010ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ba2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010ba6:	4682      	mov	sl, r0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	f000 81b0 	beq.w	8010f0e <_dtoa_r+0xbc6>
 8010bae:	2300      	movs	r3, #0
 8010bb0:	4639      	mov	r1, r7
 8010bb2:	220a      	movs	r2, #10
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f000 fb1b 	bl	80111f0 <__multadd>
 8010bba:	9b01      	ldr	r3, [sp, #4]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	4607      	mov	r7, r0
 8010bc0:	f300 8096 	bgt.w	8010cf0 <_dtoa_r+0x9a8>
 8010bc4:	9b07      	ldr	r3, [sp, #28]
 8010bc6:	2b02      	cmp	r3, #2
 8010bc8:	dc59      	bgt.n	8010c7e <_dtoa_r+0x936>
 8010bca:	e091      	b.n	8010cf0 <_dtoa_r+0x9a8>
 8010bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010bce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010bd2:	e758      	b.n	8010a86 <_dtoa_r+0x73e>
 8010bd4:	9b04      	ldr	r3, [sp, #16]
 8010bd6:	1e5e      	subs	r6, r3, #1
 8010bd8:	9b08      	ldr	r3, [sp, #32]
 8010bda:	42b3      	cmp	r3, r6
 8010bdc:	bfbf      	itttt	lt
 8010bde:	9b08      	ldrlt	r3, [sp, #32]
 8010be0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010be2:	9608      	strlt	r6, [sp, #32]
 8010be4:	1af3      	sublt	r3, r6, r3
 8010be6:	bfb4      	ite	lt
 8010be8:	18d2      	addlt	r2, r2, r3
 8010bea:	1b9e      	subge	r6, r3, r6
 8010bec:	9b04      	ldr	r3, [sp, #16]
 8010bee:	bfbc      	itt	lt
 8010bf0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010bf2:	2600      	movlt	r6, #0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	bfb7      	itett	lt
 8010bf8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010bfc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010c00:	1a9d      	sublt	r5, r3, r2
 8010c02:	2300      	movlt	r3, #0
 8010c04:	e741      	b.n	8010a8a <_dtoa_r+0x742>
 8010c06:	9e08      	ldr	r6, [sp, #32]
 8010c08:	9d05      	ldr	r5, [sp, #20]
 8010c0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010c0c:	e748      	b.n	8010aa0 <_dtoa_r+0x758>
 8010c0e:	9a08      	ldr	r2, [sp, #32]
 8010c10:	e770      	b.n	8010af4 <_dtoa_r+0x7ac>
 8010c12:	9b07      	ldr	r3, [sp, #28]
 8010c14:	2b01      	cmp	r3, #1
 8010c16:	dc19      	bgt.n	8010c4c <_dtoa_r+0x904>
 8010c18:	9b02      	ldr	r3, [sp, #8]
 8010c1a:	b9bb      	cbnz	r3, 8010c4c <_dtoa_r+0x904>
 8010c1c:	9b03      	ldr	r3, [sp, #12]
 8010c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c22:	b99b      	cbnz	r3, 8010c4c <_dtoa_r+0x904>
 8010c24:	9b03      	ldr	r3, [sp, #12]
 8010c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c2a:	0d1b      	lsrs	r3, r3, #20
 8010c2c:	051b      	lsls	r3, r3, #20
 8010c2e:	b183      	cbz	r3, 8010c52 <_dtoa_r+0x90a>
 8010c30:	9b05      	ldr	r3, [sp, #20]
 8010c32:	3301      	adds	r3, #1
 8010c34:	9305      	str	r3, [sp, #20]
 8010c36:	9b06      	ldr	r3, [sp, #24]
 8010c38:	3301      	adds	r3, #1
 8010c3a:	9306      	str	r3, [sp, #24]
 8010c3c:	f04f 0801 	mov.w	r8, #1
 8010c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	f47f af6f 	bne.w	8010b26 <_dtoa_r+0x7de>
 8010c48:	2001      	movs	r0, #1
 8010c4a:	e774      	b.n	8010b36 <_dtoa_r+0x7ee>
 8010c4c:	f04f 0800 	mov.w	r8, #0
 8010c50:	e7f6      	b.n	8010c40 <_dtoa_r+0x8f8>
 8010c52:	4698      	mov	r8, r3
 8010c54:	e7f4      	b.n	8010c40 <_dtoa_r+0x8f8>
 8010c56:	d082      	beq.n	8010b5e <_dtoa_r+0x816>
 8010c58:	9a05      	ldr	r2, [sp, #20]
 8010c5a:	331c      	adds	r3, #28
 8010c5c:	441a      	add	r2, r3
 8010c5e:	9205      	str	r2, [sp, #20]
 8010c60:	9a06      	ldr	r2, [sp, #24]
 8010c62:	441a      	add	r2, r3
 8010c64:	441d      	add	r5, r3
 8010c66:	9206      	str	r2, [sp, #24]
 8010c68:	e779      	b.n	8010b5e <_dtoa_r+0x816>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	e7f4      	b.n	8010c58 <_dtoa_r+0x910>
 8010c6e:	9b04      	ldr	r3, [sp, #16]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	dc37      	bgt.n	8010ce4 <_dtoa_r+0x99c>
 8010c74:	9b07      	ldr	r3, [sp, #28]
 8010c76:	2b02      	cmp	r3, #2
 8010c78:	dd34      	ble.n	8010ce4 <_dtoa_r+0x99c>
 8010c7a:	9b04      	ldr	r3, [sp, #16]
 8010c7c:	9301      	str	r3, [sp, #4]
 8010c7e:	9b01      	ldr	r3, [sp, #4]
 8010c80:	b963      	cbnz	r3, 8010c9c <_dtoa_r+0x954>
 8010c82:	4631      	mov	r1, r6
 8010c84:	2205      	movs	r2, #5
 8010c86:	4620      	mov	r0, r4
 8010c88:	f000 fab2 	bl	80111f0 <__multadd>
 8010c8c:	4601      	mov	r1, r0
 8010c8e:	4606      	mov	r6, r0
 8010c90:	4650      	mov	r0, sl
 8010c92:	f000 fcc7 	bl	8011624 <__mcmp>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	f73f adbb 	bgt.w	8010812 <_dtoa_r+0x4ca>
 8010c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c9e:	9d00      	ldr	r5, [sp, #0]
 8010ca0:	ea6f 0b03 	mvn.w	fp, r3
 8010ca4:	f04f 0800 	mov.w	r8, #0
 8010ca8:	4631      	mov	r1, r6
 8010caa:	4620      	mov	r0, r4
 8010cac:	f000 fa7e 	bl	80111ac <_Bfree>
 8010cb0:	2f00      	cmp	r7, #0
 8010cb2:	f43f aeab 	beq.w	8010a0c <_dtoa_r+0x6c4>
 8010cb6:	f1b8 0f00 	cmp.w	r8, #0
 8010cba:	d005      	beq.n	8010cc8 <_dtoa_r+0x980>
 8010cbc:	45b8      	cmp	r8, r7
 8010cbe:	d003      	beq.n	8010cc8 <_dtoa_r+0x980>
 8010cc0:	4641      	mov	r1, r8
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f000 fa72 	bl	80111ac <_Bfree>
 8010cc8:	4639      	mov	r1, r7
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f000 fa6e 	bl	80111ac <_Bfree>
 8010cd0:	e69c      	b.n	8010a0c <_dtoa_r+0x6c4>
 8010cd2:	2600      	movs	r6, #0
 8010cd4:	4637      	mov	r7, r6
 8010cd6:	e7e1      	b.n	8010c9c <_dtoa_r+0x954>
 8010cd8:	46bb      	mov	fp, r7
 8010cda:	4637      	mov	r7, r6
 8010cdc:	e599      	b.n	8010812 <_dtoa_r+0x4ca>
 8010cde:	bf00      	nop
 8010ce0:	40240000 	.word	0x40240000
 8010ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	f000 80c8 	beq.w	8010e7c <_dtoa_r+0xb34>
 8010cec:	9b04      	ldr	r3, [sp, #16]
 8010cee:	9301      	str	r3, [sp, #4]
 8010cf0:	2d00      	cmp	r5, #0
 8010cf2:	dd05      	ble.n	8010d00 <_dtoa_r+0x9b8>
 8010cf4:	4639      	mov	r1, r7
 8010cf6:	462a      	mov	r2, r5
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f000 fc27 	bl	801154c <__lshift>
 8010cfe:	4607      	mov	r7, r0
 8010d00:	f1b8 0f00 	cmp.w	r8, #0
 8010d04:	d05b      	beq.n	8010dbe <_dtoa_r+0xa76>
 8010d06:	6879      	ldr	r1, [r7, #4]
 8010d08:	4620      	mov	r0, r4
 8010d0a:	f000 fa0f 	bl	801112c <_Balloc>
 8010d0e:	4605      	mov	r5, r0
 8010d10:	b928      	cbnz	r0, 8010d1e <_dtoa_r+0x9d6>
 8010d12:	4b83      	ldr	r3, [pc, #524]	; (8010f20 <_dtoa_r+0xbd8>)
 8010d14:	4602      	mov	r2, r0
 8010d16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010d1a:	f7ff bb2e 	b.w	801037a <_dtoa_r+0x32>
 8010d1e:	693a      	ldr	r2, [r7, #16]
 8010d20:	3202      	adds	r2, #2
 8010d22:	0092      	lsls	r2, r2, #2
 8010d24:	f107 010c 	add.w	r1, r7, #12
 8010d28:	300c      	adds	r0, #12
 8010d2a:	f7ff fa74 	bl	8010216 <memcpy>
 8010d2e:	2201      	movs	r2, #1
 8010d30:	4629      	mov	r1, r5
 8010d32:	4620      	mov	r0, r4
 8010d34:	f000 fc0a 	bl	801154c <__lshift>
 8010d38:	9b00      	ldr	r3, [sp, #0]
 8010d3a:	3301      	adds	r3, #1
 8010d3c:	9304      	str	r3, [sp, #16]
 8010d3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d42:	4413      	add	r3, r2
 8010d44:	9308      	str	r3, [sp, #32]
 8010d46:	9b02      	ldr	r3, [sp, #8]
 8010d48:	f003 0301 	and.w	r3, r3, #1
 8010d4c:	46b8      	mov	r8, r7
 8010d4e:	9306      	str	r3, [sp, #24]
 8010d50:	4607      	mov	r7, r0
 8010d52:	9b04      	ldr	r3, [sp, #16]
 8010d54:	4631      	mov	r1, r6
 8010d56:	3b01      	subs	r3, #1
 8010d58:	4650      	mov	r0, sl
 8010d5a:	9301      	str	r3, [sp, #4]
 8010d5c:	f7ff fa69 	bl	8010232 <quorem>
 8010d60:	4641      	mov	r1, r8
 8010d62:	9002      	str	r0, [sp, #8]
 8010d64:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010d68:	4650      	mov	r0, sl
 8010d6a:	f000 fc5b 	bl	8011624 <__mcmp>
 8010d6e:	463a      	mov	r2, r7
 8010d70:	9005      	str	r0, [sp, #20]
 8010d72:	4631      	mov	r1, r6
 8010d74:	4620      	mov	r0, r4
 8010d76:	f000 fc71 	bl	801165c <__mdiff>
 8010d7a:	68c2      	ldr	r2, [r0, #12]
 8010d7c:	4605      	mov	r5, r0
 8010d7e:	bb02      	cbnz	r2, 8010dc2 <_dtoa_r+0xa7a>
 8010d80:	4601      	mov	r1, r0
 8010d82:	4650      	mov	r0, sl
 8010d84:	f000 fc4e 	bl	8011624 <__mcmp>
 8010d88:	4602      	mov	r2, r0
 8010d8a:	4629      	mov	r1, r5
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8010d90:	f000 fa0c 	bl	80111ac <_Bfree>
 8010d94:	9b07      	ldr	r3, [sp, #28]
 8010d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d98:	9d04      	ldr	r5, [sp, #16]
 8010d9a:	ea43 0102 	orr.w	r1, r3, r2
 8010d9e:	9b06      	ldr	r3, [sp, #24]
 8010da0:	4319      	orrs	r1, r3
 8010da2:	d110      	bne.n	8010dc6 <_dtoa_r+0xa7e>
 8010da4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010da8:	d029      	beq.n	8010dfe <_dtoa_r+0xab6>
 8010daa:	9b05      	ldr	r3, [sp, #20]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	dd02      	ble.n	8010db6 <_dtoa_r+0xa6e>
 8010db0:	9b02      	ldr	r3, [sp, #8]
 8010db2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010db6:	9b01      	ldr	r3, [sp, #4]
 8010db8:	f883 9000 	strb.w	r9, [r3]
 8010dbc:	e774      	b.n	8010ca8 <_dtoa_r+0x960>
 8010dbe:	4638      	mov	r0, r7
 8010dc0:	e7ba      	b.n	8010d38 <_dtoa_r+0x9f0>
 8010dc2:	2201      	movs	r2, #1
 8010dc4:	e7e1      	b.n	8010d8a <_dtoa_r+0xa42>
 8010dc6:	9b05      	ldr	r3, [sp, #20]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	db04      	blt.n	8010dd6 <_dtoa_r+0xa8e>
 8010dcc:	9907      	ldr	r1, [sp, #28]
 8010dce:	430b      	orrs	r3, r1
 8010dd0:	9906      	ldr	r1, [sp, #24]
 8010dd2:	430b      	orrs	r3, r1
 8010dd4:	d120      	bne.n	8010e18 <_dtoa_r+0xad0>
 8010dd6:	2a00      	cmp	r2, #0
 8010dd8:	dded      	ble.n	8010db6 <_dtoa_r+0xa6e>
 8010dda:	4651      	mov	r1, sl
 8010ddc:	2201      	movs	r2, #1
 8010dde:	4620      	mov	r0, r4
 8010de0:	f000 fbb4 	bl	801154c <__lshift>
 8010de4:	4631      	mov	r1, r6
 8010de6:	4682      	mov	sl, r0
 8010de8:	f000 fc1c 	bl	8011624 <__mcmp>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	dc03      	bgt.n	8010df8 <_dtoa_r+0xab0>
 8010df0:	d1e1      	bne.n	8010db6 <_dtoa_r+0xa6e>
 8010df2:	f019 0f01 	tst.w	r9, #1
 8010df6:	d0de      	beq.n	8010db6 <_dtoa_r+0xa6e>
 8010df8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010dfc:	d1d8      	bne.n	8010db0 <_dtoa_r+0xa68>
 8010dfe:	9a01      	ldr	r2, [sp, #4]
 8010e00:	2339      	movs	r3, #57	; 0x39
 8010e02:	7013      	strb	r3, [r2, #0]
 8010e04:	462b      	mov	r3, r5
 8010e06:	461d      	mov	r5, r3
 8010e08:	3b01      	subs	r3, #1
 8010e0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010e0e:	2a39      	cmp	r2, #57	; 0x39
 8010e10:	d06c      	beq.n	8010eec <_dtoa_r+0xba4>
 8010e12:	3201      	adds	r2, #1
 8010e14:	701a      	strb	r2, [r3, #0]
 8010e16:	e747      	b.n	8010ca8 <_dtoa_r+0x960>
 8010e18:	2a00      	cmp	r2, #0
 8010e1a:	dd07      	ble.n	8010e2c <_dtoa_r+0xae4>
 8010e1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010e20:	d0ed      	beq.n	8010dfe <_dtoa_r+0xab6>
 8010e22:	9a01      	ldr	r2, [sp, #4]
 8010e24:	f109 0301 	add.w	r3, r9, #1
 8010e28:	7013      	strb	r3, [r2, #0]
 8010e2a:	e73d      	b.n	8010ca8 <_dtoa_r+0x960>
 8010e2c:	9b04      	ldr	r3, [sp, #16]
 8010e2e:	9a08      	ldr	r2, [sp, #32]
 8010e30:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d043      	beq.n	8010ec0 <_dtoa_r+0xb78>
 8010e38:	4651      	mov	r1, sl
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	220a      	movs	r2, #10
 8010e3e:	4620      	mov	r0, r4
 8010e40:	f000 f9d6 	bl	80111f0 <__multadd>
 8010e44:	45b8      	cmp	r8, r7
 8010e46:	4682      	mov	sl, r0
 8010e48:	f04f 0300 	mov.w	r3, #0
 8010e4c:	f04f 020a 	mov.w	r2, #10
 8010e50:	4641      	mov	r1, r8
 8010e52:	4620      	mov	r0, r4
 8010e54:	d107      	bne.n	8010e66 <_dtoa_r+0xb1e>
 8010e56:	f000 f9cb 	bl	80111f0 <__multadd>
 8010e5a:	4680      	mov	r8, r0
 8010e5c:	4607      	mov	r7, r0
 8010e5e:	9b04      	ldr	r3, [sp, #16]
 8010e60:	3301      	adds	r3, #1
 8010e62:	9304      	str	r3, [sp, #16]
 8010e64:	e775      	b.n	8010d52 <_dtoa_r+0xa0a>
 8010e66:	f000 f9c3 	bl	80111f0 <__multadd>
 8010e6a:	4639      	mov	r1, r7
 8010e6c:	4680      	mov	r8, r0
 8010e6e:	2300      	movs	r3, #0
 8010e70:	220a      	movs	r2, #10
 8010e72:	4620      	mov	r0, r4
 8010e74:	f000 f9bc 	bl	80111f0 <__multadd>
 8010e78:	4607      	mov	r7, r0
 8010e7a:	e7f0      	b.n	8010e5e <_dtoa_r+0xb16>
 8010e7c:	9b04      	ldr	r3, [sp, #16]
 8010e7e:	9301      	str	r3, [sp, #4]
 8010e80:	9d00      	ldr	r5, [sp, #0]
 8010e82:	4631      	mov	r1, r6
 8010e84:	4650      	mov	r0, sl
 8010e86:	f7ff f9d4 	bl	8010232 <quorem>
 8010e8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010e8e:	9b00      	ldr	r3, [sp, #0]
 8010e90:	f805 9b01 	strb.w	r9, [r5], #1
 8010e94:	1aea      	subs	r2, r5, r3
 8010e96:	9b01      	ldr	r3, [sp, #4]
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	dd07      	ble.n	8010eac <_dtoa_r+0xb64>
 8010e9c:	4651      	mov	r1, sl
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	220a      	movs	r2, #10
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	f000 f9a4 	bl	80111f0 <__multadd>
 8010ea8:	4682      	mov	sl, r0
 8010eaa:	e7ea      	b.n	8010e82 <_dtoa_r+0xb3a>
 8010eac:	9b01      	ldr	r3, [sp, #4]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	bfc8      	it	gt
 8010eb2:	461d      	movgt	r5, r3
 8010eb4:	9b00      	ldr	r3, [sp, #0]
 8010eb6:	bfd8      	it	le
 8010eb8:	2501      	movle	r5, #1
 8010eba:	441d      	add	r5, r3
 8010ebc:	f04f 0800 	mov.w	r8, #0
 8010ec0:	4651      	mov	r1, sl
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f000 fb41 	bl	801154c <__lshift>
 8010eca:	4631      	mov	r1, r6
 8010ecc:	4682      	mov	sl, r0
 8010ece:	f000 fba9 	bl	8011624 <__mcmp>
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	dc96      	bgt.n	8010e04 <_dtoa_r+0xabc>
 8010ed6:	d102      	bne.n	8010ede <_dtoa_r+0xb96>
 8010ed8:	f019 0f01 	tst.w	r9, #1
 8010edc:	d192      	bne.n	8010e04 <_dtoa_r+0xabc>
 8010ede:	462b      	mov	r3, r5
 8010ee0:	461d      	mov	r5, r3
 8010ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ee6:	2a30      	cmp	r2, #48	; 0x30
 8010ee8:	d0fa      	beq.n	8010ee0 <_dtoa_r+0xb98>
 8010eea:	e6dd      	b.n	8010ca8 <_dtoa_r+0x960>
 8010eec:	9a00      	ldr	r2, [sp, #0]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d189      	bne.n	8010e06 <_dtoa_r+0xabe>
 8010ef2:	f10b 0b01 	add.w	fp, fp, #1
 8010ef6:	2331      	movs	r3, #49	; 0x31
 8010ef8:	e796      	b.n	8010e28 <_dtoa_r+0xae0>
 8010efa:	4b0a      	ldr	r3, [pc, #40]	; (8010f24 <_dtoa_r+0xbdc>)
 8010efc:	f7ff ba99 	b.w	8010432 <_dtoa_r+0xea>
 8010f00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	f47f aa6d 	bne.w	80103e2 <_dtoa_r+0x9a>
 8010f08:	4b07      	ldr	r3, [pc, #28]	; (8010f28 <_dtoa_r+0xbe0>)
 8010f0a:	f7ff ba92 	b.w	8010432 <_dtoa_r+0xea>
 8010f0e:	9b01      	ldr	r3, [sp, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	dcb5      	bgt.n	8010e80 <_dtoa_r+0xb38>
 8010f14:	9b07      	ldr	r3, [sp, #28]
 8010f16:	2b02      	cmp	r3, #2
 8010f18:	f73f aeb1 	bgt.w	8010c7e <_dtoa_r+0x936>
 8010f1c:	e7b0      	b.n	8010e80 <_dtoa_r+0xb38>
 8010f1e:	bf00      	nop
 8010f20:	08013f80 	.word	0x08013f80
 8010f24:	08013ee0 	.word	0x08013ee0
 8010f28:	08013f04 	.word	0x08013f04

08010f2c <_free_r>:
 8010f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f2e:	2900      	cmp	r1, #0
 8010f30:	d044      	beq.n	8010fbc <_free_r+0x90>
 8010f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f36:	9001      	str	r0, [sp, #4]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f1a1 0404 	sub.w	r4, r1, #4
 8010f3e:	bfb8      	it	lt
 8010f40:	18e4      	addlt	r4, r4, r3
 8010f42:	f000 f8e7 	bl	8011114 <__malloc_lock>
 8010f46:	4a1e      	ldr	r2, [pc, #120]	; (8010fc0 <_free_r+0x94>)
 8010f48:	9801      	ldr	r0, [sp, #4]
 8010f4a:	6813      	ldr	r3, [r2, #0]
 8010f4c:	b933      	cbnz	r3, 8010f5c <_free_r+0x30>
 8010f4e:	6063      	str	r3, [r4, #4]
 8010f50:	6014      	str	r4, [r2, #0]
 8010f52:	b003      	add	sp, #12
 8010f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f58:	f000 b8e2 	b.w	8011120 <__malloc_unlock>
 8010f5c:	42a3      	cmp	r3, r4
 8010f5e:	d908      	bls.n	8010f72 <_free_r+0x46>
 8010f60:	6825      	ldr	r5, [r4, #0]
 8010f62:	1961      	adds	r1, r4, r5
 8010f64:	428b      	cmp	r3, r1
 8010f66:	bf01      	itttt	eq
 8010f68:	6819      	ldreq	r1, [r3, #0]
 8010f6a:	685b      	ldreq	r3, [r3, #4]
 8010f6c:	1949      	addeq	r1, r1, r5
 8010f6e:	6021      	streq	r1, [r4, #0]
 8010f70:	e7ed      	b.n	8010f4e <_free_r+0x22>
 8010f72:	461a      	mov	r2, r3
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	b10b      	cbz	r3, 8010f7c <_free_r+0x50>
 8010f78:	42a3      	cmp	r3, r4
 8010f7a:	d9fa      	bls.n	8010f72 <_free_r+0x46>
 8010f7c:	6811      	ldr	r1, [r2, #0]
 8010f7e:	1855      	adds	r5, r2, r1
 8010f80:	42a5      	cmp	r5, r4
 8010f82:	d10b      	bne.n	8010f9c <_free_r+0x70>
 8010f84:	6824      	ldr	r4, [r4, #0]
 8010f86:	4421      	add	r1, r4
 8010f88:	1854      	adds	r4, r2, r1
 8010f8a:	42a3      	cmp	r3, r4
 8010f8c:	6011      	str	r1, [r2, #0]
 8010f8e:	d1e0      	bne.n	8010f52 <_free_r+0x26>
 8010f90:	681c      	ldr	r4, [r3, #0]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	6053      	str	r3, [r2, #4]
 8010f96:	440c      	add	r4, r1
 8010f98:	6014      	str	r4, [r2, #0]
 8010f9a:	e7da      	b.n	8010f52 <_free_r+0x26>
 8010f9c:	d902      	bls.n	8010fa4 <_free_r+0x78>
 8010f9e:	230c      	movs	r3, #12
 8010fa0:	6003      	str	r3, [r0, #0]
 8010fa2:	e7d6      	b.n	8010f52 <_free_r+0x26>
 8010fa4:	6825      	ldr	r5, [r4, #0]
 8010fa6:	1961      	adds	r1, r4, r5
 8010fa8:	428b      	cmp	r3, r1
 8010faa:	bf04      	itt	eq
 8010fac:	6819      	ldreq	r1, [r3, #0]
 8010fae:	685b      	ldreq	r3, [r3, #4]
 8010fb0:	6063      	str	r3, [r4, #4]
 8010fb2:	bf04      	itt	eq
 8010fb4:	1949      	addeq	r1, r1, r5
 8010fb6:	6021      	streq	r1, [r4, #0]
 8010fb8:	6054      	str	r4, [r2, #4]
 8010fba:	e7ca      	b.n	8010f52 <_free_r+0x26>
 8010fbc:	b003      	add	sp, #12
 8010fbe:	bd30      	pop	{r4, r5, pc}
 8010fc0:	20006e00 	.word	0x20006e00

08010fc4 <malloc>:
 8010fc4:	4b02      	ldr	r3, [pc, #8]	; (8010fd0 <malloc+0xc>)
 8010fc6:	4601      	mov	r1, r0
 8010fc8:	6818      	ldr	r0, [r3, #0]
 8010fca:	f000 b823 	b.w	8011014 <_malloc_r>
 8010fce:	bf00      	nop
 8010fd0:	200001d4 	.word	0x200001d4

08010fd4 <sbrk_aligned>:
 8010fd4:	b570      	push	{r4, r5, r6, lr}
 8010fd6:	4e0e      	ldr	r6, [pc, #56]	; (8011010 <sbrk_aligned+0x3c>)
 8010fd8:	460c      	mov	r4, r1
 8010fda:	6831      	ldr	r1, [r6, #0]
 8010fdc:	4605      	mov	r5, r0
 8010fde:	b911      	cbnz	r1, 8010fe6 <sbrk_aligned+0x12>
 8010fe0:	f000 fe40 	bl	8011c64 <_sbrk_r>
 8010fe4:	6030      	str	r0, [r6, #0]
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	4628      	mov	r0, r5
 8010fea:	f000 fe3b 	bl	8011c64 <_sbrk_r>
 8010fee:	1c43      	adds	r3, r0, #1
 8010ff0:	d00a      	beq.n	8011008 <sbrk_aligned+0x34>
 8010ff2:	1cc4      	adds	r4, r0, #3
 8010ff4:	f024 0403 	bic.w	r4, r4, #3
 8010ff8:	42a0      	cmp	r0, r4
 8010ffa:	d007      	beq.n	801100c <sbrk_aligned+0x38>
 8010ffc:	1a21      	subs	r1, r4, r0
 8010ffe:	4628      	mov	r0, r5
 8011000:	f000 fe30 	bl	8011c64 <_sbrk_r>
 8011004:	3001      	adds	r0, #1
 8011006:	d101      	bne.n	801100c <sbrk_aligned+0x38>
 8011008:	f04f 34ff 	mov.w	r4, #4294967295
 801100c:	4620      	mov	r0, r4
 801100e:	bd70      	pop	{r4, r5, r6, pc}
 8011010:	20006e04 	.word	0x20006e04

08011014 <_malloc_r>:
 8011014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011018:	1ccd      	adds	r5, r1, #3
 801101a:	f025 0503 	bic.w	r5, r5, #3
 801101e:	3508      	adds	r5, #8
 8011020:	2d0c      	cmp	r5, #12
 8011022:	bf38      	it	cc
 8011024:	250c      	movcc	r5, #12
 8011026:	2d00      	cmp	r5, #0
 8011028:	4607      	mov	r7, r0
 801102a:	db01      	blt.n	8011030 <_malloc_r+0x1c>
 801102c:	42a9      	cmp	r1, r5
 801102e:	d905      	bls.n	801103c <_malloc_r+0x28>
 8011030:	230c      	movs	r3, #12
 8011032:	603b      	str	r3, [r7, #0]
 8011034:	2600      	movs	r6, #0
 8011036:	4630      	mov	r0, r6
 8011038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801103c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011110 <_malloc_r+0xfc>
 8011040:	f000 f868 	bl	8011114 <__malloc_lock>
 8011044:	f8d8 3000 	ldr.w	r3, [r8]
 8011048:	461c      	mov	r4, r3
 801104a:	bb5c      	cbnz	r4, 80110a4 <_malloc_r+0x90>
 801104c:	4629      	mov	r1, r5
 801104e:	4638      	mov	r0, r7
 8011050:	f7ff ffc0 	bl	8010fd4 <sbrk_aligned>
 8011054:	1c43      	adds	r3, r0, #1
 8011056:	4604      	mov	r4, r0
 8011058:	d155      	bne.n	8011106 <_malloc_r+0xf2>
 801105a:	f8d8 4000 	ldr.w	r4, [r8]
 801105e:	4626      	mov	r6, r4
 8011060:	2e00      	cmp	r6, #0
 8011062:	d145      	bne.n	80110f0 <_malloc_r+0xdc>
 8011064:	2c00      	cmp	r4, #0
 8011066:	d048      	beq.n	80110fa <_malloc_r+0xe6>
 8011068:	6823      	ldr	r3, [r4, #0]
 801106a:	4631      	mov	r1, r6
 801106c:	4638      	mov	r0, r7
 801106e:	eb04 0903 	add.w	r9, r4, r3
 8011072:	f000 fdf7 	bl	8011c64 <_sbrk_r>
 8011076:	4581      	cmp	r9, r0
 8011078:	d13f      	bne.n	80110fa <_malloc_r+0xe6>
 801107a:	6821      	ldr	r1, [r4, #0]
 801107c:	1a6d      	subs	r5, r5, r1
 801107e:	4629      	mov	r1, r5
 8011080:	4638      	mov	r0, r7
 8011082:	f7ff ffa7 	bl	8010fd4 <sbrk_aligned>
 8011086:	3001      	adds	r0, #1
 8011088:	d037      	beq.n	80110fa <_malloc_r+0xe6>
 801108a:	6823      	ldr	r3, [r4, #0]
 801108c:	442b      	add	r3, r5
 801108e:	6023      	str	r3, [r4, #0]
 8011090:	f8d8 3000 	ldr.w	r3, [r8]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d038      	beq.n	801110a <_malloc_r+0xf6>
 8011098:	685a      	ldr	r2, [r3, #4]
 801109a:	42a2      	cmp	r2, r4
 801109c:	d12b      	bne.n	80110f6 <_malloc_r+0xe2>
 801109e:	2200      	movs	r2, #0
 80110a0:	605a      	str	r2, [r3, #4]
 80110a2:	e00f      	b.n	80110c4 <_malloc_r+0xb0>
 80110a4:	6822      	ldr	r2, [r4, #0]
 80110a6:	1b52      	subs	r2, r2, r5
 80110a8:	d41f      	bmi.n	80110ea <_malloc_r+0xd6>
 80110aa:	2a0b      	cmp	r2, #11
 80110ac:	d917      	bls.n	80110de <_malloc_r+0xca>
 80110ae:	1961      	adds	r1, r4, r5
 80110b0:	42a3      	cmp	r3, r4
 80110b2:	6025      	str	r5, [r4, #0]
 80110b4:	bf18      	it	ne
 80110b6:	6059      	strne	r1, [r3, #4]
 80110b8:	6863      	ldr	r3, [r4, #4]
 80110ba:	bf08      	it	eq
 80110bc:	f8c8 1000 	streq.w	r1, [r8]
 80110c0:	5162      	str	r2, [r4, r5]
 80110c2:	604b      	str	r3, [r1, #4]
 80110c4:	4638      	mov	r0, r7
 80110c6:	f104 060b 	add.w	r6, r4, #11
 80110ca:	f000 f829 	bl	8011120 <__malloc_unlock>
 80110ce:	f026 0607 	bic.w	r6, r6, #7
 80110d2:	1d23      	adds	r3, r4, #4
 80110d4:	1af2      	subs	r2, r6, r3
 80110d6:	d0ae      	beq.n	8011036 <_malloc_r+0x22>
 80110d8:	1b9b      	subs	r3, r3, r6
 80110da:	50a3      	str	r3, [r4, r2]
 80110dc:	e7ab      	b.n	8011036 <_malloc_r+0x22>
 80110de:	42a3      	cmp	r3, r4
 80110e0:	6862      	ldr	r2, [r4, #4]
 80110e2:	d1dd      	bne.n	80110a0 <_malloc_r+0x8c>
 80110e4:	f8c8 2000 	str.w	r2, [r8]
 80110e8:	e7ec      	b.n	80110c4 <_malloc_r+0xb0>
 80110ea:	4623      	mov	r3, r4
 80110ec:	6864      	ldr	r4, [r4, #4]
 80110ee:	e7ac      	b.n	801104a <_malloc_r+0x36>
 80110f0:	4634      	mov	r4, r6
 80110f2:	6876      	ldr	r6, [r6, #4]
 80110f4:	e7b4      	b.n	8011060 <_malloc_r+0x4c>
 80110f6:	4613      	mov	r3, r2
 80110f8:	e7cc      	b.n	8011094 <_malloc_r+0x80>
 80110fa:	230c      	movs	r3, #12
 80110fc:	603b      	str	r3, [r7, #0]
 80110fe:	4638      	mov	r0, r7
 8011100:	f000 f80e 	bl	8011120 <__malloc_unlock>
 8011104:	e797      	b.n	8011036 <_malloc_r+0x22>
 8011106:	6025      	str	r5, [r4, #0]
 8011108:	e7dc      	b.n	80110c4 <_malloc_r+0xb0>
 801110a:	605b      	str	r3, [r3, #4]
 801110c:	deff      	udf	#255	; 0xff
 801110e:	bf00      	nop
 8011110:	20006e00 	.word	0x20006e00

08011114 <__malloc_lock>:
 8011114:	4801      	ldr	r0, [pc, #4]	; (801111c <__malloc_lock+0x8>)
 8011116:	f7ff b87c 	b.w	8010212 <__retarget_lock_acquire_recursive>
 801111a:	bf00      	nop
 801111c:	20006dfc 	.word	0x20006dfc

08011120 <__malloc_unlock>:
 8011120:	4801      	ldr	r0, [pc, #4]	; (8011128 <__malloc_unlock+0x8>)
 8011122:	f7ff b877 	b.w	8010214 <__retarget_lock_release_recursive>
 8011126:	bf00      	nop
 8011128:	20006dfc 	.word	0x20006dfc

0801112c <_Balloc>:
 801112c:	b570      	push	{r4, r5, r6, lr}
 801112e:	69c6      	ldr	r6, [r0, #28]
 8011130:	4604      	mov	r4, r0
 8011132:	460d      	mov	r5, r1
 8011134:	b976      	cbnz	r6, 8011154 <_Balloc+0x28>
 8011136:	2010      	movs	r0, #16
 8011138:	f7ff ff44 	bl	8010fc4 <malloc>
 801113c:	4602      	mov	r2, r0
 801113e:	61e0      	str	r0, [r4, #28]
 8011140:	b920      	cbnz	r0, 801114c <_Balloc+0x20>
 8011142:	4b18      	ldr	r3, [pc, #96]	; (80111a4 <_Balloc+0x78>)
 8011144:	4818      	ldr	r0, [pc, #96]	; (80111a8 <_Balloc+0x7c>)
 8011146:	216b      	movs	r1, #107	; 0x6b
 8011148:	f000 fd9c 	bl	8011c84 <__assert_func>
 801114c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011150:	6006      	str	r6, [r0, #0]
 8011152:	60c6      	str	r6, [r0, #12]
 8011154:	69e6      	ldr	r6, [r4, #28]
 8011156:	68f3      	ldr	r3, [r6, #12]
 8011158:	b183      	cbz	r3, 801117c <_Balloc+0x50>
 801115a:	69e3      	ldr	r3, [r4, #28]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011162:	b9b8      	cbnz	r0, 8011194 <_Balloc+0x68>
 8011164:	2101      	movs	r1, #1
 8011166:	fa01 f605 	lsl.w	r6, r1, r5
 801116a:	1d72      	adds	r2, r6, #5
 801116c:	0092      	lsls	r2, r2, #2
 801116e:	4620      	mov	r0, r4
 8011170:	f000 fda6 	bl	8011cc0 <_calloc_r>
 8011174:	b160      	cbz	r0, 8011190 <_Balloc+0x64>
 8011176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801117a:	e00e      	b.n	801119a <_Balloc+0x6e>
 801117c:	2221      	movs	r2, #33	; 0x21
 801117e:	2104      	movs	r1, #4
 8011180:	4620      	mov	r0, r4
 8011182:	f000 fd9d 	bl	8011cc0 <_calloc_r>
 8011186:	69e3      	ldr	r3, [r4, #28]
 8011188:	60f0      	str	r0, [r6, #12]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d1e4      	bne.n	801115a <_Balloc+0x2e>
 8011190:	2000      	movs	r0, #0
 8011192:	bd70      	pop	{r4, r5, r6, pc}
 8011194:	6802      	ldr	r2, [r0, #0]
 8011196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801119a:	2300      	movs	r3, #0
 801119c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111a0:	e7f7      	b.n	8011192 <_Balloc+0x66>
 80111a2:	bf00      	nop
 80111a4:	08013f11 	.word	0x08013f11
 80111a8:	08013f91 	.word	0x08013f91

080111ac <_Bfree>:
 80111ac:	b570      	push	{r4, r5, r6, lr}
 80111ae:	69c6      	ldr	r6, [r0, #28]
 80111b0:	4605      	mov	r5, r0
 80111b2:	460c      	mov	r4, r1
 80111b4:	b976      	cbnz	r6, 80111d4 <_Bfree+0x28>
 80111b6:	2010      	movs	r0, #16
 80111b8:	f7ff ff04 	bl	8010fc4 <malloc>
 80111bc:	4602      	mov	r2, r0
 80111be:	61e8      	str	r0, [r5, #28]
 80111c0:	b920      	cbnz	r0, 80111cc <_Bfree+0x20>
 80111c2:	4b09      	ldr	r3, [pc, #36]	; (80111e8 <_Bfree+0x3c>)
 80111c4:	4809      	ldr	r0, [pc, #36]	; (80111ec <_Bfree+0x40>)
 80111c6:	218f      	movs	r1, #143	; 0x8f
 80111c8:	f000 fd5c 	bl	8011c84 <__assert_func>
 80111cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111d0:	6006      	str	r6, [r0, #0]
 80111d2:	60c6      	str	r6, [r0, #12]
 80111d4:	b13c      	cbz	r4, 80111e6 <_Bfree+0x3a>
 80111d6:	69eb      	ldr	r3, [r5, #28]
 80111d8:	6862      	ldr	r2, [r4, #4]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80111e0:	6021      	str	r1, [r4, #0]
 80111e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80111e6:	bd70      	pop	{r4, r5, r6, pc}
 80111e8:	08013f11 	.word	0x08013f11
 80111ec:	08013f91 	.word	0x08013f91

080111f0 <__multadd>:
 80111f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f4:	690d      	ldr	r5, [r1, #16]
 80111f6:	4607      	mov	r7, r0
 80111f8:	460c      	mov	r4, r1
 80111fa:	461e      	mov	r6, r3
 80111fc:	f101 0c14 	add.w	ip, r1, #20
 8011200:	2000      	movs	r0, #0
 8011202:	f8dc 3000 	ldr.w	r3, [ip]
 8011206:	b299      	uxth	r1, r3
 8011208:	fb02 6101 	mla	r1, r2, r1, r6
 801120c:	0c1e      	lsrs	r6, r3, #16
 801120e:	0c0b      	lsrs	r3, r1, #16
 8011210:	fb02 3306 	mla	r3, r2, r6, r3
 8011214:	b289      	uxth	r1, r1
 8011216:	3001      	adds	r0, #1
 8011218:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801121c:	4285      	cmp	r5, r0
 801121e:	f84c 1b04 	str.w	r1, [ip], #4
 8011222:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011226:	dcec      	bgt.n	8011202 <__multadd+0x12>
 8011228:	b30e      	cbz	r6, 801126e <__multadd+0x7e>
 801122a:	68a3      	ldr	r3, [r4, #8]
 801122c:	42ab      	cmp	r3, r5
 801122e:	dc19      	bgt.n	8011264 <__multadd+0x74>
 8011230:	6861      	ldr	r1, [r4, #4]
 8011232:	4638      	mov	r0, r7
 8011234:	3101      	adds	r1, #1
 8011236:	f7ff ff79 	bl	801112c <_Balloc>
 801123a:	4680      	mov	r8, r0
 801123c:	b928      	cbnz	r0, 801124a <__multadd+0x5a>
 801123e:	4602      	mov	r2, r0
 8011240:	4b0c      	ldr	r3, [pc, #48]	; (8011274 <__multadd+0x84>)
 8011242:	480d      	ldr	r0, [pc, #52]	; (8011278 <__multadd+0x88>)
 8011244:	21ba      	movs	r1, #186	; 0xba
 8011246:	f000 fd1d 	bl	8011c84 <__assert_func>
 801124a:	6922      	ldr	r2, [r4, #16]
 801124c:	3202      	adds	r2, #2
 801124e:	f104 010c 	add.w	r1, r4, #12
 8011252:	0092      	lsls	r2, r2, #2
 8011254:	300c      	adds	r0, #12
 8011256:	f7fe ffde 	bl	8010216 <memcpy>
 801125a:	4621      	mov	r1, r4
 801125c:	4638      	mov	r0, r7
 801125e:	f7ff ffa5 	bl	80111ac <_Bfree>
 8011262:	4644      	mov	r4, r8
 8011264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011268:	3501      	adds	r5, #1
 801126a:	615e      	str	r6, [r3, #20]
 801126c:	6125      	str	r5, [r4, #16]
 801126e:	4620      	mov	r0, r4
 8011270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011274:	08013f80 	.word	0x08013f80
 8011278:	08013f91 	.word	0x08013f91

0801127c <__hi0bits>:
 801127c:	0c03      	lsrs	r3, r0, #16
 801127e:	041b      	lsls	r3, r3, #16
 8011280:	b9d3      	cbnz	r3, 80112b8 <__hi0bits+0x3c>
 8011282:	0400      	lsls	r0, r0, #16
 8011284:	2310      	movs	r3, #16
 8011286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801128a:	bf04      	itt	eq
 801128c:	0200      	lsleq	r0, r0, #8
 801128e:	3308      	addeq	r3, #8
 8011290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011294:	bf04      	itt	eq
 8011296:	0100      	lsleq	r0, r0, #4
 8011298:	3304      	addeq	r3, #4
 801129a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801129e:	bf04      	itt	eq
 80112a0:	0080      	lsleq	r0, r0, #2
 80112a2:	3302      	addeq	r3, #2
 80112a4:	2800      	cmp	r0, #0
 80112a6:	db05      	blt.n	80112b4 <__hi0bits+0x38>
 80112a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80112ac:	f103 0301 	add.w	r3, r3, #1
 80112b0:	bf08      	it	eq
 80112b2:	2320      	moveq	r3, #32
 80112b4:	4618      	mov	r0, r3
 80112b6:	4770      	bx	lr
 80112b8:	2300      	movs	r3, #0
 80112ba:	e7e4      	b.n	8011286 <__hi0bits+0xa>

080112bc <__lo0bits>:
 80112bc:	6803      	ldr	r3, [r0, #0]
 80112be:	f013 0207 	ands.w	r2, r3, #7
 80112c2:	d00c      	beq.n	80112de <__lo0bits+0x22>
 80112c4:	07d9      	lsls	r1, r3, #31
 80112c6:	d422      	bmi.n	801130e <__lo0bits+0x52>
 80112c8:	079a      	lsls	r2, r3, #30
 80112ca:	bf49      	itett	mi
 80112cc:	085b      	lsrmi	r3, r3, #1
 80112ce:	089b      	lsrpl	r3, r3, #2
 80112d0:	6003      	strmi	r3, [r0, #0]
 80112d2:	2201      	movmi	r2, #1
 80112d4:	bf5c      	itt	pl
 80112d6:	6003      	strpl	r3, [r0, #0]
 80112d8:	2202      	movpl	r2, #2
 80112da:	4610      	mov	r0, r2
 80112dc:	4770      	bx	lr
 80112de:	b299      	uxth	r1, r3
 80112e0:	b909      	cbnz	r1, 80112e6 <__lo0bits+0x2a>
 80112e2:	0c1b      	lsrs	r3, r3, #16
 80112e4:	2210      	movs	r2, #16
 80112e6:	b2d9      	uxtb	r1, r3
 80112e8:	b909      	cbnz	r1, 80112ee <__lo0bits+0x32>
 80112ea:	3208      	adds	r2, #8
 80112ec:	0a1b      	lsrs	r3, r3, #8
 80112ee:	0719      	lsls	r1, r3, #28
 80112f0:	bf04      	itt	eq
 80112f2:	091b      	lsreq	r3, r3, #4
 80112f4:	3204      	addeq	r2, #4
 80112f6:	0799      	lsls	r1, r3, #30
 80112f8:	bf04      	itt	eq
 80112fa:	089b      	lsreq	r3, r3, #2
 80112fc:	3202      	addeq	r2, #2
 80112fe:	07d9      	lsls	r1, r3, #31
 8011300:	d403      	bmi.n	801130a <__lo0bits+0x4e>
 8011302:	085b      	lsrs	r3, r3, #1
 8011304:	f102 0201 	add.w	r2, r2, #1
 8011308:	d003      	beq.n	8011312 <__lo0bits+0x56>
 801130a:	6003      	str	r3, [r0, #0]
 801130c:	e7e5      	b.n	80112da <__lo0bits+0x1e>
 801130e:	2200      	movs	r2, #0
 8011310:	e7e3      	b.n	80112da <__lo0bits+0x1e>
 8011312:	2220      	movs	r2, #32
 8011314:	e7e1      	b.n	80112da <__lo0bits+0x1e>
	...

08011318 <__i2b>:
 8011318:	b510      	push	{r4, lr}
 801131a:	460c      	mov	r4, r1
 801131c:	2101      	movs	r1, #1
 801131e:	f7ff ff05 	bl	801112c <_Balloc>
 8011322:	4602      	mov	r2, r0
 8011324:	b928      	cbnz	r0, 8011332 <__i2b+0x1a>
 8011326:	4b05      	ldr	r3, [pc, #20]	; (801133c <__i2b+0x24>)
 8011328:	4805      	ldr	r0, [pc, #20]	; (8011340 <__i2b+0x28>)
 801132a:	f240 1145 	movw	r1, #325	; 0x145
 801132e:	f000 fca9 	bl	8011c84 <__assert_func>
 8011332:	2301      	movs	r3, #1
 8011334:	6144      	str	r4, [r0, #20]
 8011336:	6103      	str	r3, [r0, #16]
 8011338:	bd10      	pop	{r4, pc}
 801133a:	bf00      	nop
 801133c:	08013f80 	.word	0x08013f80
 8011340:	08013f91 	.word	0x08013f91

08011344 <__multiply>:
 8011344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011348:	4691      	mov	r9, r2
 801134a:	690a      	ldr	r2, [r1, #16]
 801134c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011350:	429a      	cmp	r2, r3
 8011352:	bfb8      	it	lt
 8011354:	460b      	movlt	r3, r1
 8011356:	460c      	mov	r4, r1
 8011358:	bfbc      	itt	lt
 801135a:	464c      	movlt	r4, r9
 801135c:	4699      	movlt	r9, r3
 801135e:	6927      	ldr	r7, [r4, #16]
 8011360:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011364:	68a3      	ldr	r3, [r4, #8]
 8011366:	6861      	ldr	r1, [r4, #4]
 8011368:	eb07 060a 	add.w	r6, r7, sl
 801136c:	42b3      	cmp	r3, r6
 801136e:	b085      	sub	sp, #20
 8011370:	bfb8      	it	lt
 8011372:	3101      	addlt	r1, #1
 8011374:	f7ff feda 	bl	801112c <_Balloc>
 8011378:	b930      	cbnz	r0, 8011388 <__multiply+0x44>
 801137a:	4602      	mov	r2, r0
 801137c:	4b44      	ldr	r3, [pc, #272]	; (8011490 <__multiply+0x14c>)
 801137e:	4845      	ldr	r0, [pc, #276]	; (8011494 <__multiply+0x150>)
 8011380:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011384:	f000 fc7e 	bl	8011c84 <__assert_func>
 8011388:	f100 0514 	add.w	r5, r0, #20
 801138c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011390:	462b      	mov	r3, r5
 8011392:	2200      	movs	r2, #0
 8011394:	4543      	cmp	r3, r8
 8011396:	d321      	bcc.n	80113dc <__multiply+0x98>
 8011398:	f104 0314 	add.w	r3, r4, #20
 801139c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80113a0:	f109 0314 	add.w	r3, r9, #20
 80113a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80113a8:	9202      	str	r2, [sp, #8]
 80113aa:	1b3a      	subs	r2, r7, r4
 80113ac:	3a15      	subs	r2, #21
 80113ae:	f022 0203 	bic.w	r2, r2, #3
 80113b2:	3204      	adds	r2, #4
 80113b4:	f104 0115 	add.w	r1, r4, #21
 80113b8:	428f      	cmp	r7, r1
 80113ba:	bf38      	it	cc
 80113bc:	2204      	movcc	r2, #4
 80113be:	9201      	str	r2, [sp, #4]
 80113c0:	9a02      	ldr	r2, [sp, #8]
 80113c2:	9303      	str	r3, [sp, #12]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d80c      	bhi.n	80113e2 <__multiply+0x9e>
 80113c8:	2e00      	cmp	r6, #0
 80113ca:	dd03      	ble.n	80113d4 <__multiply+0x90>
 80113cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d05b      	beq.n	801148c <__multiply+0x148>
 80113d4:	6106      	str	r6, [r0, #16]
 80113d6:	b005      	add	sp, #20
 80113d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113dc:	f843 2b04 	str.w	r2, [r3], #4
 80113e0:	e7d8      	b.n	8011394 <__multiply+0x50>
 80113e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80113e6:	f1ba 0f00 	cmp.w	sl, #0
 80113ea:	d024      	beq.n	8011436 <__multiply+0xf2>
 80113ec:	f104 0e14 	add.w	lr, r4, #20
 80113f0:	46a9      	mov	r9, r5
 80113f2:	f04f 0c00 	mov.w	ip, #0
 80113f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80113fa:	f8d9 1000 	ldr.w	r1, [r9]
 80113fe:	fa1f fb82 	uxth.w	fp, r2
 8011402:	b289      	uxth	r1, r1
 8011404:	fb0a 110b 	mla	r1, sl, fp, r1
 8011408:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801140c:	f8d9 2000 	ldr.w	r2, [r9]
 8011410:	4461      	add	r1, ip
 8011412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011416:	fb0a c20b 	mla	r2, sl, fp, ip
 801141a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801141e:	b289      	uxth	r1, r1
 8011420:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011424:	4577      	cmp	r7, lr
 8011426:	f849 1b04 	str.w	r1, [r9], #4
 801142a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801142e:	d8e2      	bhi.n	80113f6 <__multiply+0xb2>
 8011430:	9a01      	ldr	r2, [sp, #4]
 8011432:	f845 c002 	str.w	ip, [r5, r2]
 8011436:	9a03      	ldr	r2, [sp, #12]
 8011438:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801143c:	3304      	adds	r3, #4
 801143e:	f1b9 0f00 	cmp.w	r9, #0
 8011442:	d021      	beq.n	8011488 <__multiply+0x144>
 8011444:	6829      	ldr	r1, [r5, #0]
 8011446:	f104 0c14 	add.w	ip, r4, #20
 801144a:	46ae      	mov	lr, r5
 801144c:	f04f 0a00 	mov.w	sl, #0
 8011450:	f8bc b000 	ldrh.w	fp, [ip]
 8011454:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011458:	fb09 220b 	mla	r2, r9, fp, r2
 801145c:	4452      	add	r2, sl
 801145e:	b289      	uxth	r1, r1
 8011460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011464:	f84e 1b04 	str.w	r1, [lr], #4
 8011468:	f85c 1b04 	ldr.w	r1, [ip], #4
 801146c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011470:	f8be 1000 	ldrh.w	r1, [lr]
 8011474:	fb09 110a 	mla	r1, r9, sl, r1
 8011478:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801147c:	4567      	cmp	r7, ip
 801147e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011482:	d8e5      	bhi.n	8011450 <__multiply+0x10c>
 8011484:	9a01      	ldr	r2, [sp, #4]
 8011486:	50a9      	str	r1, [r5, r2]
 8011488:	3504      	adds	r5, #4
 801148a:	e799      	b.n	80113c0 <__multiply+0x7c>
 801148c:	3e01      	subs	r6, #1
 801148e:	e79b      	b.n	80113c8 <__multiply+0x84>
 8011490:	08013f80 	.word	0x08013f80
 8011494:	08013f91 	.word	0x08013f91

08011498 <__pow5mult>:
 8011498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801149c:	4615      	mov	r5, r2
 801149e:	f012 0203 	ands.w	r2, r2, #3
 80114a2:	4606      	mov	r6, r0
 80114a4:	460f      	mov	r7, r1
 80114a6:	d007      	beq.n	80114b8 <__pow5mult+0x20>
 80114a8:	4c25      	ldr	r4, [pc, #148]	; (8011540 <__pow5mult+0xa8>)
 80114aa:	3a01      	subs	r2, #1
 80114ac:	2300      	movs	r3, #0
 80114ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80114b2:	f7ff fe9d 	bl	80111f0 <__multadd>
 80114b6:	4607      	mov	r7, r0
 80114b8:	10ad      	asrs	r5, r5, #2
 80114ba:	d03d      	beq.n	8011538 <__pow5mult+0xa0>
 80114bc:	69f4      	ldr	r4, [r6, #28]
 80114be:	b97c      	cbnz	r4, 80114e0 <__pow5mult+0x48>
 80114c0:	2010      	movs	r0, #16
 80114c2:	f7ff fd7f 	bl	8010fc4 <malloc>
 80114c6:	4602      	mov	r2, r0
 80114c8:	61f0      	str	r0, [r6, #28]
 80114ca:	b928      	cbnz	r0, 80114d8 <__pow5mult+0x40>
 80114cc:	4b1d      	ldr	r3, [pc, #116]	; (8011544 <__pow5mult+0xac>)
 80114ce:	481e      	ldr	r0, [pc, #120]	; (8011548 <__pow5mult+0xb0>)
 80114d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80114d4:	f000 fbd6 	bl	8011c84 <__assert_func>
 80114d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80114dc:	6004      	str	r4, [r0, #0]
 80114de:	60c4      	str	r4, [r0, #12]
 80114e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80114e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80114e8:	b94c      	cbnz	r4, 80114fe <__pow5mult+0x66>
 80114ea:	f240 2171 	movw	r1, #625	; 0x271
 80114ee:	4630      	mov	r0, r6
 80114f0:	f7ff ff12 	bl	8011318 <__i2b>
 80114f4:	2300      	movs	r3, #0
 80114f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80114fa:	4604      	mov	r4, r0
 80114fc:	6003      	str	r3, [r0, #0]
 80114fe:	f04f 0900 	mov.w	r9, #0
 8011502:	07eb      	lsls	r3, r5, #31
 8011504:	d50a      	bpl.n	801151c <__pow5mult+0x84>
 8011506:	4639      	mov	r1, r7
 8011508:	4622      	mov	r2, r4
 801150a:	4630      	mov	r0, r6
 801150c:	f7ff ff1a 	bl	8011344 <__multiply>
 8011510:	4639      	mov	r1, r7
 8011512:	4680      	mov	r8, r0
 8011514:	4630      	mov	r0, r6
 8011516:	f7ff fe49 	bl	80111ac <_Bfree>
 801151a:	4647      	mov	r7, r8
 801151c:	106d      	asrs	r5, r5, #1
 801151e:	d00b      	beq.n	8011538 <__pow5mult+0xa0>
 8011520:	6820      	ldr	r0, [r4, #0]
 8011522:	b938      	cbnz	r0, 8011534 <__pow5mult+0x9c>
 8011524:	4622      	mov	r2, r4
 8011526:	4621      	mov	r1, r4
 8011528:	4630      	mov	r0, r6
 801152a:	f7ff ff0b 	bl	8011344 <__multiply>
 801152e:	6020      	str	r0, [r4, #0]
 8011530:	f8c0 9000 	str.w	r9, [r0]
 8011534:	4604      	mov	r4, r0
 8011536:	e7e4      	b.n	8011502 <__pow5mult+0x6a>
 8011538:	4638      	mov	r0, r7
 801153a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801153e:	bf00      	nop
 8011540:	080140e0 	.word	0x080140e0
 8011544:	08013f11 	.word	0x08013f11
 8011548:	08013f91 	.word	0x08013f91

0801154c <__lshift>:
 801154c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011550:	460c      	mov	r4, r1
 8011552:	6849      	ldr	r1, [r1, #4]
 8011554:	6923      	ldr	r3, [r4, #16]
 8011556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801155a:	68a3      	ldr	r3, [r4, #8]
 801155c:	4607      	mov	r7, r0
 801155e:	4691      	mov	r9, r2
 8011560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011564:	f108 0601 	add.w	r6, r8, #1
 8011568:	42b3      	cmp	r3, r6
 801156a:	db0b      	blt.n	8011584 <__lshift+0x38>
 801156c:	4638      	mov	r0, r7
 801156e:	f7ff fddd 	bl	801112c <_Balloc>
 8011572:	4605      	mov	r5, r0
 8011574:	b948      	cbnz	r0, 801158a <__lshift+0x3e>
 8011576:	4602      	mov	r2, r0
 8011578:	4b28      	ldr	r3, [pc, #160]	; (801161c <__lshift+0xd0>)
 801157a:	4829      	ldr	r0, [pc, #164]	; (8011620 <__lshift+0xd4>)
 801157c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011580:	f000 fb80 	bl	8011c84 <__assert_func>
 8011584:	3101      	adds	r1, #1
 8011586:	005b      	lsls	r3, r3, #1
 8011588:	e7ee      	b.n	8011568 <__lshift+0x1c>
 801158a:	2300      	movs	r3, #0
 801158c:	f100 0114 	add.w	r1, r0, #20
 8011590:	f100 0210 	add.w	r2, r0, #16
 8011594:	4618      	mov	r0, r3
 8011596:	4553      	cmp	r3, sl
 8011598:	db33      	blt.n	8011602 <__lshift+0xb6>
 801159a:	6920      	ldr	r0, [r4, #16]
 801159c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115a0:	f104 0314 	add.w	r3, r4, #20
 80115a4:	f019 091f 	ands.w	r9, r9, #31
 80115a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80115b0:	d02b      	beq.n	801160a <__lshift+0xbe>
 80115b2:	f1c9 0e20 	rsb	lr, r9, #32
 80115b6:	468a      	mov	sl, r1
 80115b8:	2200      	movs	r2, #0
 80115ba:	6818      	ldr	r0, [r3, #0]
 80115bc:	fa00 f009 	lsl.w	r0, r0, r9
 80115c0:	4310      	orrs	r0, r2
 80115c2:	f84a 0b04 	str.w	r0, [sl], #4
 80115c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80115ca:	459c      	cmp	ip, r3
 80115cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80115d0:	d8f3      	bhi.n	80115ba <__lshift+0x6e>
 80115d2:	ebac 0304 	sub.w	r3, ip, r4
 80115d6:	3b15      	subs	r3, #21
 80115d8:	f023 0303 	bic.w	r3, r3, #3
 80115dc:	3304      	adds	r3, #4
 80115de:	f104 0015 	add.w	r0, r4, #21
 80115e2:	4584      	cmp	ip, r0
 80115e4:	bf38      	it	cc
 80115e6:	2304      	movcc	r3, #4
 80115e8:	50ca      	str	r2, [r1, r3]
 80115ea:	b10a      	cbz	r2, 80115f0 <__lshift+0xa4>
 80115ec:	f108 0602 	add.w	r6, r8, #2
 80115f0:	3e01      	subs	r6, #1
 80115f2:	4638      	mov	r0, r7
 80115f4:	612e      	str	r6, [r5, #16]
 80115f6:	4621      	mov	r1, r4
 80115f8:	f7ff fdd8 	bl	80111ac <_Bfree>
 80115fc:	4628      	mov	r0, r5
 80115fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011602:	f842 0f04 	str.w	r0, [r2, #4]!
 8011606:	3301      	adds	r3, #1
 8011608:	e7c5      	b.n	8011596 <__lshift+0x4a>
 801160a:	3904      	subs	r1, #4
 801160c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011610:	f841 2f04 	str.w	r2, [r1, #4]!
 8011614:	459c      	cmp	ip, r3
 8011616:	d8f9      	bhi.n	801160c <__lshift+0xc0>
 8011618:	e7ea      	b.n	80115f0 <__lshift+0xa4>
 801161a:	bf00      	nop
 801161c:	08013f80 	.word	0x08013f80
 8011620:	08013f91 	.word	0x08013f91

08011624 <__mcmp>:
 8011624:	b530      	push	{r4, r5, lr}
 8011626:	6902      	ldr	r2, [r0, #16]
 8011628:	690c      	ldr	r4, [r1, #16]
 801162a:	1b12      	subs	r2, r2, r4
 801162c:	d10e      	bne.n	801164c <__mcmp+0x28>
 801162e:	f100 0314 	add.w	r3, r0, #20
 8011632:	3114      	adds	r1, #20
 8011634:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011638:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801163c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011640:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011644:	42a5      	cmp	r5, r4
 8011646:	d003      	beq.n	8011650 <__mcmp+0x2c>
 8011648:	d305      	bcc.n	8011656 <__mcmp+0x32>
 801164a:	2201      	movs	r2, #1
 801164c:	4610      	mov	r0, r2
 801164e:	bd30      	pop	{r4, r5, pc}
 8011650:	4283      	cmp	r3, r0
 8011652:	d3f3      	bcc.n	801163c <__mcmp+0x18>
 8011654:	e7fa      	b.n	801164c <__mcmp+0x28>
 8011656:	f04f 32ff 	mov.w	r2, #4294967295
 801165a:	e7f7      	b.n	801164c <__mcmp+0x28>

0801165c <__mdiff>:
 801165c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011660:	460c      	mov	r4, r1
 8011662:	4606      	mov	r6, r0
 8011664:	4611      	mov	r1, r2
 8011666:	4620      	mov	r0, r4
 8011668:	4690      	mov	r8, r2
 801166a:	f7ff ffdb 	bl	8011624 <__mcmp>
 801166e:	1e05      	subs	r5, r0, #0
 8011670:	d110      	bne.n	8011694 <__mdiff+0x38>
 8011672:	4629      	mov	r1, r5
 8011674:	4630      	mov	r0, r6
 8011676:	f7ff fd59 	bl	801112c <_Balloc>
 801167a:	b930      	cbnz	r0, 801168a <__mdiff+0x2e>
 801167c:	4b3a      	ldr	r3, [pc, #232]	; (8011768 <__mdiff+0x10c>)
 801167e:	4602      	mov	r2, r0
 8011680:	f240 2137 	movw	r1, #567	; 0x237
 8011684:	4839      	ldr	r0, [pc, #228]	; (801176c <__mdiff+0x110>)
 8011686:	f000 fafd 	bl	8011c84 <__assert_func>
 801168a:	2301      	movs	r3, #1
 801168c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011694:	bfa4      	itt	ge
 8011696:	4643      	movge	r3, r8
 8011698:	46a0      	movge	r8, r4
 801169a:	4630      	mov	r0, r6
 801169c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80116a0:	bfa6      	itte	ge
 80116a2:	461c      	movge	r4, r3
 80116a4:	2500      	movge	r5, #0
 80116a6:	2501      	movlt	r5, #1
 80116a8:	f7ff fd40 	bl	801112c <_Balloc>
 80116ac:	b920      	cbnz	r0, 80116b8 <__mdiff+0x5c>
 80116ae:	4b2e      	ldr	r3, [pc, #184]	; (8011768 <__mdiff+0x10c>)
 80116b0:	4602      	mov	r2, r0
 80116b2:	f240 2145 	movw	r1, #581	; 0x245
 80116b6:	e7e5      	b.n	8011684 <__mdiff+0x28>
 80116b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80116bc:	6926      	ldr	r6, [r4, #16]
 80116be:	60c5      	str	r5, [r0, #12]
 80116c0:	f104 0914 	add.w	r9, r4, #20
 80116c4:	f108 0514 	add.w	r5, r8, #20
 80116c8:	f100 0e14 	add.w	lr, r0, #20
 80116cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80116d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80116d4:	f108 0210 	add.w	r2, r8, #16
 80116d8:	46f2      	mov	sl, lr
 80116da:	2100      	movs	r1, #0
 80116dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80116e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80116e4:	fa11 f88b 	uxtah	r8, r1, fp
 80116e8:	b299      	uxth	r1, r3
 80116ea:	0c1b      	lsrs	r3, r3, #16
 80116ec:	eba8 0801 	sub.w	r8, r8, r1
 80116f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80116f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80116f8:	fa1f f888 	uxth.w	r8, r8
 80116fc:	1419      	asrs	r1, r3, #16
 80116fe:	454e      	cmp	r6, r9
 8011700:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011704:	f84a 3b04 	str.w	r3, [sl], #4
 8011708:	d8e8      	bhi.n	80116dc <__mdiff+0x80>
 801170a:	1b33      	subs	r3, r6, r4
 801170c:	3b15      	subs	r3, #21
 801170e:	f023 0303 	bic.w	r3, r3, #3
 8011712:	3304      	adds	r3, #4
 8011714:	3415      	adds	r4, #21
 8011716:	42a6      	cmp	r6, r4
 8011718:	bf38      	it	cc
 801171a:	2304      	movcc	r3, #4
 801171c:	441d      	add	r5, r3
 801171e:	4473      	add	r3, lr
 8011720:	469e      	mov	lr, r3
 8011722:	462e      	mov	r6, r5
 8011724:	4566      	cmp	r6, ip
 8011726:	d30e      	bcc.n	8011746 <__mdiff+0xea>
 8011728:	f10c 0203 	add.w	r2, ip, #3
 801172c:	1b52      	subs	r2, r2, r5
 801172e:	f022 0203 	bic.w	r2, r2, #3
 8011732:	3d03      	subs	r5, #3
 8011734:	45ac      	cmp	ip, r5
 8011736:	bf38      	it	cc
 8011738:	2200      	movcc	r2, #0
 801173a:	4413      	add	r3, r2
 801173c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011740:	b17a      	cbz	r2, 8011762 <__mdiff+0x106>
 8011742:	6107      	str	r7, [r0, #16]
 8011744:	e7a4      	b.n	8011690 <__mdiff+0x34>
 8011746:	f856 8b04 	ldr.w	r8, [r6], #4
 801174a:	fa11 f288 	uxtah	r2, r1, r8
 801174e:	1414      	asrs	r4, r2, #16
 8011750:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011754:	b292      	uxth	r2, r2
 8011756:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801175a:	f84e 2b04 	str.w	r2, [lr], #4
 801175e:	1421      	asrs	r1, r4, #16
 8011760:	e7e0      	b.n	8011724 <__mdiff+0xc8>
 8011762:	3f01      	subs	r7, #1
 8011764:	e7ea      	b.n	801173c <__mdiff+0xe0>
 8011766:	bf00      	nop
 8011768:	08013f80 	.word	0x08013f80
 801176c:	08013f91 	.word	0x08013f91

08011770 <__d2b>:
 8011770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011774:	460f      	mov	r7, r1
 8011776:	2101      	movs	r1, #1
 8011778:	ec59 8b10 	vmov	r8, r9, d0
 801177c:	4616      	mov	r6, r2
 801177e:	f7ff fcd5 	bl	801112c <_Balloc>
 8011782:	4604      	mov	r4, r0
 8011784:	b930      	cbnz	r0, 8011794 <__d2b+0x24>
 8011786:	4602      	mov	r2, r0
 8011788:	4b24      	ldr	r3, [pc, #144]	; (801181c <__d2b+0xac>)
 801178a:	4825      	ldr	r0, [pc, #148]	; (8011820 <__d2b+0xb0>)
 801178c:	f240 310f 	movw	r1, #783	; 0x30f
 8011790:	f000 fa78 	bl	8011c84 <__assert_func>
 8011794:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011798:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801179c:	bb2d      	cbnz	r5, 80117ea <__d2b+0x7a>
 801179e:	9301      	str	r3, [sp, #4]
 80117a0:	f1b8 0300 	subs.w	r3, r8, #0
 80117a4:	d026      	beq.n	80117f4 <__d2b+0x84>
 80117a6:	4668      	mov	r0, sp
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	f7ff fd87 	bl	80112bc <__lo0bits>
 80117ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80117b2:	b1e8      	cbz	r0, 80117f0 <__d2b+0x80>
 80117b4:	f1c0 0320 	rsb	r3, r0, #32
 80117b8:	fa02 f303 	lsl.w	r3, r2, r3
 80117bc:	430b      	orrs	r3, r1
 80117be:	40c2      	lsrs	r2, r0
 80117c0:	6163      	str	r3, [r4, #20]
 80117c2:	9201      	str	r2, [sp, #4]
 80117c4:	9b01      	ldr	r3, [sp, #4]
 80117c6:	61a3      	str	r3, [r4, #24]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	bf14      	ite	ne
 80117cc:	2202      	movne	r2, #2
 80117ce:	2201      	moveq	r2, #1
 80117d0:	6122      	str	r2, [r4, #16]
 80117d2:	b1bd      	cbz	r5, 8011804 <__d2b+0x94>
 80117d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80117d8:	4405      	add	r5, r0
 80117da:	603d      	str	r5, [r7, #0]
 80117dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80117e0:	6030      	str	r0, [r6, #0]
 80117e2:	4620      	mov	r0, r4
 80117e4:	b003      	add	sp, #12
 80117e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80117ee:	e7d6      	b.n	801179e <__d2b+0x2e>
 80117f0:	6161      	str	r1, [r4, #20]
 80117f2:	e7e7      	b.n	80117c4 <__d2b+0x54>
 80117f4:	a801      	add	r0, sp, #4
 80117f6:	f7ff fd61 	bl	80112bc <__lo0bits>
 80117fa:	9b01      	ldr	r3, [sp, #4]
 80117fc:	6163      	str	r3, [r4, #20]
 80117fe:	3020      	adds	r0, #32
 8011800:	2201      	movs	r2, #1
 8011802:	e7e5      	b.n	80117d0 <__d2b+0x60>
 8011804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011808:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801180c:	6038      	str	r0, [r7, #0]
 801180e:	6918      	ldr	r0, [r3, #16]
 8011810:	f7ff fd34 	bl	801127c <__hi0bits>
 8011814:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011818:	e7e2      	b.n	80117e0 <__d2b+0x70>
 801181a:	bf00      	nop
 801181c:	08013f80 	.word	0x08013f80
 8011820:	08013f91 	.word	0x08013f91

08011824 <__ssputs_r>:
 8011824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011828:	688e      	ldr	r6, [r1, #8]
 801182a:	461f      	mov	r7, r3
 801182c:	42be      	cmp	r6, r7
 801182e:	680b      	ldr	r3, [r1, #0]
 8011830:	4682      	mov	sl, r0
 8011832:	460c      	mov	r4, r1
 8011834:	4690      	mov	r8, r2
 8011836:	d82c      	bhi.n	8011892 <__ssputs_r+0x6e>
 8011838:	898a      	ldrh	r2, [r1, #12]
 801183a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801183e:	d026      	beq.n	801188e <__ssputs_r+0x6a>
 8011840:	6965      	ldr	r5, [r4, #20]
 8011842:	6909      	ldr	r1, [r1, #16]
 8011844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011848:	eba3 0901 	sub.w	r9, r3, r1
 801184c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011850:	1c7b      	adds	r3, r7, #1
 8011852:	444b      	add	r3, r9
 8011854:	106d      	asrs	r5, r5, #1
 8011856:	429d      	cmp	r5, r3
 8011858:	bf38      	it	cc
 801185a:	461d      	movcc	r5, r3
 801185c:	0553      	lsls	r3, r2, #21
 801185e:	d527      	bpl.n	80118b0 <__ssputs_r+0x8c>
 8011860:	4629      	mov	r1, r5
 8011862:	f7ff fbd7 	bl	8011014 <_malloc_r>
 8011866:	4606      	mov	r6, r0
 8011868:	b360      	cbz	r0, 80118c4 <__ssputs_r+0xa0>
 801186a:	6921      	ldr	r1, [r4, #16]
 801186c:	464a      	mov	r2, r9
 801186e:	f7fe fcd2 	bl	8010216 <memcpy>
 8011872:	89a3      	ldrh	r3, [r4, #12]
 8011874:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801187c:	81a3      	strh	r3, [r4, #12]
 801187e:	6126      	str	r6, [r4, #16]
 8011880:	6165      	str	r5, [r4, #20]
 8011882:	444e      	add	r6, r9
 8011884:	eba5 0509 	sub.w	r5, r5, r9
 8011888:	6026      	str	r6, [r4, #0]
 801188a:	60a5      	str	r5, [r4, #8]
 801188c:	463e      	mov	r6, r7
 801188e:	42be      	cmp	r6, r7
 8011890:	d900      	bls.n	8011894 <__ssputs_r+0x70>
 8011892:	463e      	mov	r6, r7
 8011894:	6820      	ldr	r0, [r4, #0]
 8011896:	4632      	mov	r2, r6
 8011898:	4641      	mov	r1, r8
 801189a:	f000 f9c9 	bl	8011c30 <memmove>
 801189e:	68a3      	ldr	r3, [r4, #8]
 80118a0:	1b9b      	subs	r3, r3, r6
 80118a2:	60a3      	str	r3, [r4, #8]
 80118a4:	6823      	ldr	r3, [r4, #0]
 80118a6:	4433      	add	r3, r6
 80118a8:	6023      	str	r3, [r4, #0]
 80118aa:	2000      	movs	r0, #0
 80118ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118b0:	462a      	mov	r2, r5
 80118b2:	f000 fa2d 	bl	8011d10 <_realloc_r>
 80118b6:	4606      	mov	r6, r0
 80118b8:	2800      	cmp	r0, #0
 80118ba:	d1e0      	bne.n	801187e <__ssputs_r+0x5a>
 80118bc:	6921      	ldr	r1, [r4, #16]
 80118be:	4650      	mov	r0, sl
 80118c0:	f7ff fb34 	bl	8010f2c <_free_r>
 80118c4:	230c      	movs	r3, #12
 80118c6:	f8ca 3000 	str.w	r3, [sl]
 80118ca:	89a3      	ldrh	r3, [r4, #12]
 80118cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118d0:	81a3      	strh	r3, [r4, #12]
 80118d2:	f04f 30ff 	mov.w	r0, #4294967295
 80118d6:	e7e9      	b.n	80118ac <__ssputs_r+0x88>

080118d8 <_svfiprintf_r>:
 80118d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118dc:	4698      	mov	r8, r3
 80118de:	898b      	ldrh	r3, [r1, #12]
 80118e0:	061b      	lsls	r3, r3, #24
 80118e2:	b09d      	sub	sp, #116	; 0x74
 80118e4:	4607      	mov	r7, r0
 80118e6:	460d      	mov	r5, r1
 80118e8:	4614      	mov	r4, r2
 80118ea:	d50e      	bpl.n	801190a <_svfiprintf_r+0x32>
 80118ec:	690b      	ldr	r3, [r1, #16]
 80118ee:	b963      	cbnz	r3, 801190a <_svfiprintf_r+0x32>
 80118f0:	2140      	movs	r1, #64	; 0x40
 80118f2:	f7ff fb8f 	bl	8011014 <_malloc_r>
 80118f6:	6028      	str	r0, [r5, #0]
 80118f8:	6128      	str	r0, [r5, #16]
 80118fa:	b920      	cbnz	r0, 8011906 <_svfiprintf_r+0x2e>
 80118fc:	230c      	movs	r3, #12
 80118fe:	603b      	str	r3, [r7, #0]
 8011900:	f04f 30ff 	mov.w	r0, #4294967295
 8011904:	e0d0      	b.n	8011aa8 <_svfiprintf_r+0x1d0>
 8011906:	2340      	movs	r3, #64	; 0x40
 8011908:	616b      	str	r3, [r5, #20]
 801190a:	2300      	movs	r3, #0
 801190c:	9309      	str	r3, [sp, #36]	; 0x24
 801190e:	2320      	movs	r3, #32
 8011910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011914:	f8cd 800c 	str.w	r8, [sp, #12]
 8011918:	2330      	movs	r3, #48	; 0x30
 801191a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011ac0 <_svfiprintf_r+0x1e8>
 801191e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011922:	f04f 0901 	mov.w	r9, #1
 8011926:	4623      	mov	r3, r4
 8011928:	469a      	mov	sl, r3
 801192a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801192e:	b10a      	cbz	r2, 8011934 <_svfiprintf_r+0x5c>
 8011930:	2a25      	cmp	r2, #37	; 0x25
 8011932:	d1f9      	bne.n	8011928 <_svfiprintf_r+0x50>
 8011934:	ebba 0b04 	subs.w	fp, sl, r4
 8011938:	d00b      	beq.n	8011952 <_svfiprintf_r+0x7a>
 801193a:	465b      	mov	r3, fp
 801193c:	4622      	mov	r2, r4
 801193e:	4629      	mov	r1, r5
 8011940:	4638      	mov	r0, r7
 8011942:	f7ff ff6f 	bl	8011824 <__ssputs_r>
 8011946:	3001      	adds	r0, #1
 8011948:	f000 80a9 	beq.w	8011a9e <_svfiprintf_r+0x1c6>
 801194c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801194e:	445a      	add	r2, fp
 8011950:	9209      	str	r2, [sp, #36]	; 0x24
 8011952:	f89a 3000 	ldrb.w	r3, [sl]
 8011956:	2b00      	cmp	r3, #0
 8011958:	f000 80a1 	beq.w	8011a9e <_svfiprintf_r+0x1c6>
 801195c:	2300      	movs	r3, #0
 801195e:	f04f 32ff 	mov.w	r2, #4294967295
 8011962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011966:	f10a 0a01 	add.w	sl, sl, #1
 801196a:	9304      	str	r3, [sp, #16]
 801196c:	9307      	str	r3, [sp, #28]
 801196e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011972:	931a      	str	r3, [sp, #104]	; 0x68
 8011974:	4654      	mov	r4, sl
 8011976:	2205      	movs	r2, #5
 8011978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801197c:	4850      	ldr	r0, [pc, #320]	; (8011ac0 <_svfiprintf_r+0x1e8>)
 801197e:	f7ee fc37 	bl	80001f0 <memchr>
 8011982:	9a04      	ldr	r2, [sp, #16]
 8011984:	b9d8      	cbnz	r0, 80119be <_svfiprintf_r+0xe6>
 8011986:	06d0      	lsls	r0, r2, #27
 8011988:	bf44      	itt	mi
 801198a:	2320      	movmi	r3, #32
 801198c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011990:	0711      	lsls	r1, r2, #28
 8011992:	bf44      	itt	mi
 8011994:	232b      	movmi	r3, #43	; 0x2b
 8011996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801199a:	f89a 3000 	ldrb.w	r3, [sl]
 801199e:	2b2a      	cmp	r3, #42	; 0x2a
 80119a0:	d015      	beq.n	80119ce <_svfiprintf_r+0xf6>
 80119a2:	9a07      	ldr	r2, [sp, #28]
 80119a4:	4654      	mov	r4, sl
 80119a6:	2000      	movs	r0, #0
 80119a8:	f04f 0c0a 	mov.w	ip, #10
 80119ac:	4621      	mov	r1, r4
 80119ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119b2:	3b30      	subs	r3, #48	; 0x30
 80119b4:	2b09      	cmp	r3, #9
 80119b6:	d94d      	bls.n	8011a54 <_svfiprintf_r+0x17c>
 80119b8:	b1b0      	cbz	r0, 80119e8 <_svfiprintf_r+0x110>
 80119ba:	9207      	str	r2, [sp, #28]
 80119bc:	e014      	b.n	80119e8 <_svfiprintf_r+0x110>
 80119be:	eba0 0308 	sub.w	r3, r0, r8
 80119c2:	fa09 f303 	lsl.w	r3, r9, r3
 80119c6:	4313      	orrs	r3, r2
 80119c8:	9304      	str	r3, [sp, #16]
 80119ca:	46a2      	mov	sl, r4
 80119cc:	e7d2      	b.n	8011974 <_svfiprintf_r+0x9c>
 80119ce:	9b03      	ldr	r3, [sp, #12]
 80119d0:	1d19      	adds	r1, r3, #4
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	9103      	str	r1, [sp, #12]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	bfbb      	ittet	lt
 80119da:	425b      	neglt	r3, r3
 80119dc:	f042 0202 	orrlt.w	r2, r2, #2
 80119e0:	9307      	strge	r3, [sp, #28]
 80119e2:	9307      	strlt	r3, [sp, #28]
 80119e4:	bfb8      	it	lt
 80119e6:	9204      	strlt	r2, [sp, #16]
 80119e8:	7823      	ldrb	r3, [r4, #0]
 80119ea:	2b2e      	cmp	r3, #46	; 0x2e
 80119ec:	d10c      	bne.n	8011a08 <_svfiprintf_r+0x130>
 80119ee:	7863      	ldrb	r3, [r4, #1]
 80119f0:	2b2a      	cmp	r3, #42	; 0x2a
 80119f2:	d134      	bne.n	8011a5e <_svfiprintf_r+0x186>
 80119f4:	9b03      	ldr	r3, [sp, #12]
 80119f6:	1d1a      	adds	r2, r3, #4
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	9203      	str	r2, [sp, #12]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	bfb8      	it	lt
 8011a00:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a04:	3402      	adds	r4, #2
 8011a06:	9305      	str	r3, [sp, #20]
 8011a08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011ad0 <_svfiprintf_r+0x1f8>
 8011a0c:	7821      	ldrb	r1, [r4, #0]
 8011a0e:	2203      	movs	r2, #3
 8011a10:	4650      	mov	r0, sl
 8011a12:	f7ee fbed 	bl	80001f0 <memchr>
 8011a16:	b138      	cbz	r0, 8011a28 <_svfiprintf_r+0x150>
 8011a18:	9b04      	ldr	r3, [sp, #16]
 8011a1a:	eba0 000a 	sub.w	r0, r0, sl
 8011a1e:	2240      	movs	r2, #64	; 0x40
 8011a20:	4082      	lsls	r2, r0
 8011a22:	4313      	orrs	r3, r2
 8011a24:	3401      	adds	r4, #1
 8011a26:	9304      	str	r3, [sp, #16]
 8011a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a2c:	4825      	ldr	r0, [pc, #148]	; (8011ac4 <_svfiprintf_r+0x1ec>)
 8011a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a32:	2206      	movs	r2, #6
 8011a34:	f7ee fbdc 	bl	80001f0 <memchr>
 8011a38:	2800      	cmp	r0, #0
 8011a3a:	d038      	beq.n	8011aae <_svfiprintf_r+0x1d6>
 8011a3c:	4b22      	ldr	r3, [pc, #136]	; (8011ac8 <_svfiprintf_r+0x1f0>)
 8011a3e:	bb1b      	cbnz	r3, 8011a88 <_svfiprintf_r+0x1b0>
 8011a40:	9b03      	ldr	r3, [sp, #12]
 8011a42:	3307      	adds	r3, #7
 8011a44:	f023 0307 	bic.w	r3, r3, #7
 8011a48:	3308      	adds	r3, #8
 8011a4a:	9303      	str	r3, [sp, #12]
 8011a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a4e:	4433      	add	r3, r6
 8011a50:	9309      	str	r3, [sp, #36]	; 0x24
 8011a52:	e768      	b.n	8011926 <_svfiprintf_r+0x4e>
 8011a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a58:	460c      	mov	r4, r1
 8011a5a:	2001      	movs	r0, #1
 8011a5c:	e7a6      	b.n	80119ac <_svfiprintf_r+0xd4>
 8011a5e:	2300      	movs	r3, #0
 8011a60:	3401      	adds	r4, #1
 8011a62:	9305      	str	r3, [sp, #20]
 8011a64:	4619      	mov	r1, r3
 8011a66:	f04f 0c0a 	mov.w	ip, #10
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a70:	3a30      	subs	r2, #48	; 0x30
 8011a72:	2a09      	cmp	r2, #9
 8011a74:	d903      	bls.n	8011a7e <_svfiprintf_r+0x1a6>
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d0c6      	beq.n	8011a08 <_svfiprintf_r+0x130>
 8011a7a:	9105      	str	r1, [sp, #20]
 8011a7c:	e7c4      	b.n	8011a08 <_svfiprintf_r+0x130>
 8011a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a82:	4604      	mov	r4, r0
 8011a84:	2301      	movs	r3, #1
 8011a86:	e7f0      	b.n	8011a6a <_svfiprintf_r+0x192>
 8011a88:	ab03      	add	r3, sp, #12
 8011a8a:	9300      	str	r3, [sp, #0]
 8011a8c:	462a      	mov	r2, r5
 8011a8e:	4b0f      	ldr	r3, [pc, #60]	; (8011acc <_svfiprintf_r+0x1f4>)
 8011a90:	a904      	add	r1, sp, #16
 8011a92:	4638      	mov	r0, r7
 8011a94:	f7fd fe54 	bl	800f740 <_printf_float>
 8011a98:	1c42      	adds	r2, r0, #1
 8011a9a:	4606      	mov	r6, r0
 8011a9c:	d1d6      	bne.n	8011a4c <_svfiprintf_r+0x174>
 8011a9e:	89ab      	ldrh	r3, [r5, #12]
 8011aa0:	065b      	lsls	r3, r3, #25
 8011aa2:	f53f af2d 	bmi.w	8011900 <_svfiprintf_r+0x28>
 8011aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011aa8:	b01d      	add	sp, #116	; 0x74
 8011aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aae:	ab03      	add	r3, sp, #12
 8011ab0:	9300      	str	r3, [sp, #0]
 8011ab2:	462a      	mov	r2, r5
 8011ab4:	4b05      	ldr	r3, [pc, #20]	; (8011acc <_svfiprintf_r+0x1f4>)
 8011ab6:	a904      	add	r1, sp, #16
 8011ab8:	4638      	mov	r0, r7
 8011aba:	f7fe f8e5 	bl	800fc88 <_printf_i>
 8011abe:	e7eb      	b.n	8011a98 <_svfiprintf_r+0x1c0>
 8011ac0:	080140ec 	.word	0x080140ec
 8011ac4:	080140f6 	.word	0x080140f6
 8011ac8:	0800f741 	.word	0x0800f741
 8011acc:	08011825 	.word	0x08011825
 8011ad0:	080140f2 	.word	0x080140f2

08011ad4 <__sflush_r>:
 8011ad4:	898a      	ldrh	r2, [r1, #12]
 8011ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ada:	4605      	mov	r5, r0
 8011adc:	0710      	lsls	r0, r2, #28
 8011ade:	460c      	mov	r4, r1
 8011ae0:	d458      	bmi.n	8011b94 <__sflush_r+0xc0>
 8011ae2:	684b      	ldr	r3, [r1, #4]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	dc05      	bgt.n	8011af4 <__sflush_r+0x20>
 8011ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	dc02      	bgt.n	8011af4 <__sflush_r+0x20>
 8011aee:	2000      	movs	r0, #0
 8011af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011af6:	2e00      	cmp	r6, #0
 8011af8:	d0f9      	beq.n	8011aee <__sflush_r+0x1a>
 8011afa:	2300      	movs	r3, #0
 8011afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011b00:	682f      	ldr	r7, [r5, #0]
 8011b02:	6a21      	ldr	r1, [r4, #32]
 8011b04:	602b      	str	r3, [r5, #0]
 8011b06:	d032      	beq.n	8011b6e <__sflush_r+0x9a>
 8011b08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011b0a:	89a3      	ldrh	r3, [r4, #12]
 8011b0c:	075a      	lsls	r2, r3, #29
 8011b0e:	d505      	bpl.n	8011b1c <__sflush_r+0x48>
 8011b10:	6863      	ldr	r3, [r4, #4]
 8011b12:	1ac0      	subs	r0, r0, r3
 8011b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b16:	b10b      	cbz	r3, 8011b1c <__sflush_r+0x48>
 8011b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b1a:	1ac0      	subs	r0, r0, r3
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4602      	mov	r2, r0
 8011b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b22:	6a21      	ldr	r1, [r4, #32]
 8011b24:	4628      	mov	r0, r5
 8011b26:	47b0      	blx	r6
 8011b28:	1c43      	adds	r3, r0, #1
 8011b2a:	89a3      	ldrh	r3, [r4, #12]
 8011b2c:	d106      	bne.n	8011b3c <__sflush_r+0x68>
 8011b2e:	6829      	ldr	r1, [r5, #0]
 8011b30:	291d      	cmp	r1, #29
 8011b32:	d82b      	bhi.n	8011b8c <__sflush_r+0xb8>
 8011b34:	4a29      	ldr	r2, [pc, #164]	; (8011bdc <__sflush_r+0x108>)
 8011b36:	410a      	asrs	r2, r1
 8011b38:	07d6      	lsls	r6, r2, #31
 8011b3a:	d427      	bmi.n	8011b8c <__sflush_r+0xb8>
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	6062      	str	r2, [r4, #4]
 8011b40:	04d9      	lsls	r1, r3, #19
 8011b42:	6922      	ldr	r2, [r4, #16]
 8011b44:	6022      	str	r2, [r4, #0]
 8011b46:	d504      	bpl.n	8011b52 <__sflush_r+0x7e>
 8011b48:	1c42      	adds	r2, r0, #1
 8011b4a:	d101      	bne.n	8011b50 <__sflush_r+0x7c>
 8011b4c:	682b      	ldr	r3, [r5, #0]
 8011b4e:	b903      	cbnz	r3, 8011b52 <__sflush_r+0x7e>
 8011b50:	6560      	str	r0, [r4, #84]	; 0x54
 8011b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b54:	602f      	str	r7, [r5, #0]
 8011b56:	2900      	cmp	r1, #0
 8011b58:	d0c9      	beq.n	8011aee <__sflush_r+0x1a>
 8011b5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b5e:	4299      	cmp	r1, r3
 8011b60:	d002      	beq.n	8011b68 <__sflush_r+0x94>
 8011b62:	4628      	mov	r0, r5
 8011b64:	f7ff f9e2 	bl	8010f2c <_free_r>
 8011b68:	2000      	movs	r0, #0
 8011b6a:	6360      	str	r0, [r4, #52]	; 0x34
 8011b6c:	e7c0      	b.n	8011af0 <__sflush_r+0x1c>
 8011b6e:	2301      	movs	r3, #1
 8011b70:	4628      	mov	r0, r5
 8011b72:	47b0      	blx	r6
 8011b74:	1c41      	adds	r1, r0, #1
 8011b76:	d1c8      	bne.n	8011b0a <__sflush_r+0x36>
 8011b78:	682b      	ldr	r3, [r5, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d0c5      	beq.n	8011b0a <__sflush_r+0x36>
 8011b7e:	2b1d      	cmp	r3, #29
 8011b80:	d001      	beq.n	8011b86 <__sflush_r+0xb2>
 8011b82:	2b16      	cmp	r3, #22
 8011b84:	d101      	bne.n	8011b8a <__sflush_r+0xb6>
 8011b86:	602f      	str	r7, [r5, #0]
 8011b88:	e7b1      	b.n	8011aee <__sflush_r+0x1a>
 8011b8a:	89a3      	ldrh	r3, [r4, #12]
 8011b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b90:	81a3      	strh	r3, [r4, #12]
 8011b92:	e7ad      	b.n	8011af0 <__sflush_r+0x1c>
 8011b94:	690f      	ldr	r7, [r1, #16]
 8011b96:	2f00      	cmp	r7, #0
 8011b98:	d0a9      	beq.n	8011aee <__sflush_r+0x1a>
 8011b9a:	0793      	lsls	r3, r2, #30
 8011b9c:	680e      	ldr	r6, [r1, #0]
 8011b9e:	bf08      	it	eq
 8011ba0:	694b      	ldreq	r3, [r1, #20]
 8011ba2:	600f      	str	r7, [r1, #0]
 8011ba4:	bf18      	it	ne
 8011ba6:	2300      	movne	r3, #0
 8011ba8:	eba6 0807 	sub.w	r8, r6, r7
 8011bac:	608b      	str	r3, [r1, #8]
 8011bae:	f1b8 0f00 	cmp.w	r8, #0
 8011bb2:	dd9c      	ble.n	8011aee <__sflush_r+0x1a>
 8011bb4:	6a21      	ldr	r1, [r4, #32]
 8011bb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011bb8:	4643      	mov	r3, r8
 8011bba:	463a      	mov	r2, r7
 8011bbc:	4628      	mov	r0, r5
 8011bbe:	47b0      	blx	r6
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	dc06      	bgt.n	8011bd2 <__sflush_r+0xfe>
 8011bc4:	89a3      	ldrh	r3, [r4, #12]
 8011bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bca:	81a3      	strh	r3, [r4, #12]
 8011bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8011bd0:	e78e      	b.n	8011af0 <__sflush_r+0x1c>
 8011bd2:	4407      	add	r7, r0
 8011bd4:	eba8 0800 	sub.w	r8, r8, r0
 8011bd8:	e7e9      	b.n	8011bae <__sflush_r+0xda>
 8011bda:	bf00      	nop
 8011bdc:	dfbffffe 	.word	0xdfbffffe

08011be0 <_fflush_r>:
 8011be0:	b538      	push	{r3, r4, r5, lr}
 8011be2:	690b      	ldr	r3, [r1, #16]
 8011be4:	4605      	mov	r5, r0
 8011be6:	460c      	mov	r4, r1
 8011be8:	b913      	cbnz	r3, 8011bf0 <_fflush_r+0x10>
 8011bea:	2500      	movs	r5, #0
 8011bec:	4628      	mov	r0, r5
 8011bee:	bd38      	pop	{r3, r4, r5, pc}
 8011bf0:	b118      	cbz	r0, 8011bfa <_fflush_r+0x1a>
 8011bf2:	6a03      	ldr	r3, [r0, #32]
 8011bf4:	b90b      	cbnz	r3, 8011bfa <_fflush_r+0x1a>
 8011bf6:	f7fe f9f5 	bl	800ffe4 <__sinit>
 8011bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d0f3      	beq.n	8011bea <_fflush_r+0xa>
 8011c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011c04:	07d0      	lsls	r0, r2, #31
 8011c06:	d404      	bmi.n	8011c12 <_fflush_r+0x32>
 8011c08:	0599      	lsls	r1, r3, #22
 8011c0a:	d402      	bmi.n	8011c12 <_fflush_r+0x32>
 8011c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c0e:	f7fe fb00 	bl	8010212 <__retarget_lock_acquire_recursive>
 8011c12:	4628      	mov	r0, r5
 8011c14:	4621      	mov	r1, r4
 8011c16:	f7ff ff5d 	bl	8011ad4 <__sflush_r>
 8011c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c1c:	07da      	lsls	r2, r3, #31
 8011c1e:	4605      	mov	r5, r0
 8011c20:	d4e4      	bmi.n	8011bec <_fflush_r+0xc>
 8011c22:	89a3      	ldrh	r3, [r4, #12]
 8011c24:	059b      	lsls	r3, r3, #22
 8011c26:	d4e1      	bmi.n	8011bec <_fflush_r+0xc>
 8011c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c2a:	f7fe faf3 	bl	8010214 <__retarget_lock_release_recursive>
 8011c2e:	e7dd      	b.n	8011bec <_fflush_r+0xc>

08011c30 <memmove>:
 8011c30:	4288      	cmp	r0, r1
 8011c32:	b510      	push	{r4, lr}
 8011c34:	eb01 0402 	add.w	r4, r1, r2
 8011c38:	d902      	bls.n	8011c40 <memmove+0x10>
 8011c3a:	4284      	cmp	r4, r0
 8011c3c:	4623      	mov	r3, r4
 8011c3e:	d807      	bhi.n	8011c50 <memmove+0x20>
 8011c40:	1e43      	subs	r3, r0, #1
 8011c42:	42a1      	cmp	r1, r4
 8011c44:	d008      	beq.n	8011c58 <memmove+0x28>
 8011c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c4e:	e7f8      	b.n	8011c42 <memmove+0x12>
 8011c50:	4402      	add	r2, r0
 8011c52:	4601      	mov	r1, r0
 8011c54:	428a      	cmp	r2, r1
 8011c56:	d100      	bne.n	8011c5a <memmove+0x2a>
 8011c58:	bd10      	pop	{r4, pc}
 8011c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c62:	e7f7      	b.n	8011c54 <memmove+0x24>

08011c64 <_sbrk_r>:
 8011c64:	b538      	push	{r3, r4, r5, lr}
 8011c66:	4d06      	ldr	r5, [pc, #24]	; (8011c80 <_sbrk_r+0x1c>)
 8011c68:	2300      	movs	r3, #0
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	4608      	mov	r0, r1
 8011c6e:	602b      	str	r3, [r5, #0]
 8011c70:	f7ef fe4a 	bl	8001908 <_sbrk>
 8011c74:	1c43      	adds	r3, r0, #1
 8011c76:	d102      	bne.n	8011c7e <_sbrk_r+0x1a>
 8011c78:	682b      	ldr	r3, [r5, #0]
 8011c7a:	b103      	cbz	r3, 8011c7e <_sbrk_r+0x1a>
 8011c7c:	6023      	str	r3, [r4, #0]
 8011c7e:	bd38      	pop	{r3, r4, r5, pc}
 8011c80:	20006df8 	.word	0x20006df8

08011c84 <__assert_func>:
 8011c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c86:	4614      	mov	r4, r2
 8011c88:	461a      	mov	r2, r3
 8011c8a:	4b09      	ldr	r3, [pc, #36]	; (8011cb0 <__assert_func+0x2c>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	4605      	mov	r5, r0
 8011c90:	68d8      	ldr	r0, [r3, #12]
 8011c92:	b14c      	cbz	r4, 8011ca8 <__assert_func+0x24>
 8011c94:	4b07      	ldr	r3, [pc, #28]	; (8011cb4 <__assert_func+0x30>)
 8011c96:	9100      	str	r1, [sp, #0]
 8011c98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c9c:	4906      	ldr	r1, [pc, #24]	; (8011cb8 <__assert_func+0x34>)
 8011c9e:	462b      	mov	r3, r5
 8011ca0:	f000 f872 	bl	8011d88 <fiprintf>
 8011ca4:	f000 f882 	bl	8011dac <abort>
 8011ca8:	4b04      	ldr	r3, [pc, #16]	; (8011cbc <__assert_func+0x38>)
 8011caa:	461c      	mov	r4, r3
 8011cac:	e7f3      	b.n	8011c96 <__assert_func+0x12>
 8011cae:	bf00      	nop
 8011cb0:	200001d4 	.word	0x200001d4
 8011cb4:	08014107 	.word	0x08014107
 8011cb8:	08014114 	.word	0x08014114
 8011cbc:	08014142 	.word	0x08014142

08011cc0 <_calloc_r>:
 8011cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cc2:	fba1 2402 	umull	r2, r4, r1, r2
 8011cc6:	b94c      	cbnz	r4, 8011cdc <_calloc_r+0x1c>
 8011cc8:	4611      	mov	r1, r2
 8011cca:	9201      	str	r2, [sp, #4]
 8011ccc:	f7ff f9a2 	bl	8011014 <_malloc_r>
 8011cd0:	9a01      	ldr	r2, [sp, #4]
 8011cd2:	4605      	mov	r5, r0
 8011cd4:	b930      	cbnz	r0, 8011ce4 <_calloc_r+0x24>
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	b003      	add	sp, #12
 8011cda:	bd30      	pop	{r4, r5, pc}
 8011cdc:	220c      	movs	r2, #12
 8011cde:	6002      	str	r2, [r0, #0]
 8011ce0:	2500      	movs	r5, #0
 8011ce2:	e7f8      	b.n	8011cd6 <_calloc_r+0x16>
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	f7fe fa16 	bl	8010116 <memset>
 8011cea:	e7f4      	b.n	8011cd6 <_calloc_r+0x16>

08011cec <__ascii_mbtowc>:
 8011cec:	b082      	sub	sp, #8
 8011cee:	b901      	cbnz	r1, 8011cf2 <__ascii_mbtowc+0x6>
 8011cf0:	a901      	add	r1, sp, #4
 8011cf2:	b142      	cbz	r2, 8011d06 <__ascii_mbtowc+0x1a>
 8011cf4:	b14b      	cbz	r3, 8011d0a <__ascii_mbtowc+0x1e>
 8011cf6:	7813      	ldrb	r3, [r2, #0]
 8011cf8:	600b      	str	r3, [r1, #0]
 8011cfa:	7812      	ldrb	r2, [r2, #0]
 8011cfc:	1e10      	subs	r0, r2, #0
 8011cfe:	bf18      	it	ne
 8011d00:	2001      	movne	r0, #1
 8011d02:	b002      	add	sp, #8
 8011d04:	4770      	bx	lr
 8011d06:	4610      	mov	r0, r2
 8011d08:	e7fb      	b.n	8011d02 <__ascii_mbtowc+0x16>
 8011d0a:	f06f 0001 	mvn.w	r0, #1
 8011d0e:	e7f8      	b.n	8011d02 <__ascii_mbtowc+0x16>

08011d10 <_realloc_r>:
 8011d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d14:	4680      	mov	r8, r0
 8011d16:	4614      	mov	r4, r2
 8011d18:	460e      	mov	r6, r1
 8011d1a:	b921      	cbnz	r1, 8011d26 <_realloc_r+0x16>
 8011d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d20:	4611      	mov	r1, r2
 8011d22:	f7ff b977 	b.w	8011014 <_malloc_r>
 8011d26:	b92a      	cbnz	r2, 8011d34 <_realloc_r+0x24>
 8011d28:	f7ff f900 	bl	8010f2c <_free_r>
 8011d2c:	4625      	mov	r5, r4
 8011d2e:	4628      	mov	r0, r5
 8011d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d34:	f000 f841 	bl	8011dba <_malloc_usable_size_r>
 8011d38:	4284      	cmp	r4, r0
 8011d3a:	4607      	mov	r7, r0
 8011d3c:	d802      	bhi.n	8011d44 <_realloc_r+0x34>
 8011d3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011d42:	d812      	bhi.n	8011d6a <_realloc_r+0x5a>
 8011d44:	4621      	mov	r1, r4
 8011d46:	4640      	mov	r0, r8
 8011d48:	f7ff f964 	bl	8011014 <_malloc_r>
 8011d4c:	4605      	mov	r5, r0
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	d0ed      	beq.n	8011d2e <_realloc_r+0x1e>
 8011d52:	42bc      	cmp	r4, r7
 8011d54:	4622      	mov	r2, r4
 8011d56:	4631      	mov	r1, r6
 8011d58:	bf28      	it	cs
 8011d5a:	463a      	movcs	r2, r7
 8011d5c:	f7fe fa5b 	bl	8010216 <memcpy>
 8011d60:	4631      	mov	r1, r6
 8011d62:	4640      	mov	r0, r8
 8011d64:	f7ff f8e2 	bl	8010f2c <_free_r>
 8011d68:	e7e1      	b.n	8011d2e <_realloc_r+0x1e>
 8011d6a:	4635      	mov	r5, r6
 8011d6c:	e7df      	b.n	8011d2e <_realloc_r+0x1e>

08011d6e <__ascii_wctomb>:
 8011d6e:	b149      	cbz	r1, 8011d84 <__ascii_wctomb+0x16>
 8011d70:	2aff      	cmp	r2, #255	; 0xff
 8011d72:	bf85      	ittet	hi
 8011d74:	238a      	movhi	r3, #138	; 0x8a
 8011d76:	6003      	strhi	r3, [r0, #0]
 8011d78:	700a      	strbls	r2, [r1, #0]
 8011d7a:	f04f 30ff 	movhi.w	r0, #4294967295
 8011d7e:	bf98      	it	ls
 8011d80:	2001      	movls	r0, #1
 8011d82:	4770      	bx	lr
 8011d84:	4608      	mov	r0, r1
 8011d86:	4770      	bx	lr

08011d88 <fiprintf>:
 8011d88:	b40e      	push	{r1, r2, r3}
 8011d8a:	b503      	push	{r0, r1, lr}
 8011d8c:	4601      	mov	r1, r0
 8011d8e:	ab03      	add	r3, sp, #12
 8011d90:	4805      	ldr	r0, [pc, #20]	; (8011da8 <fiprintf+0x20>)
 8011d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d96:	6800      	ldr	r0, [r0, #0]
 8011d98:	9301      	str	r3, [sp, #4]
 8011d9a:	f000 f83f 	bl	8011e1c <_vfiprintf_r>
 8011d9e:	b002      	add	sp, #8
 8011da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011da4:	b003      	add	sp, #12
 8011da6:	4770      	bx	lr
 8011da8:	200001d4 	.word	0x200001d4

08011dac <abort>:
 8011dac:	b508      	push	{r3, lr}
 8011dae:	2006      	movs	r0, #6
 8011db0:	f000 fa0c 	bl	80121cc <raise>
 8011db4:	2001      	movs	r0, #1
 8011db6:	f7ef fd2f 	bl	8001818 <_exit>

08011dba <_malloc_usable_size_r>:
 8011dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dbe:	1f18      	subs	r0, r3, #4
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	bfbc      	itt	lt
 8011dc4:	580b      	ldrlt	r3, [r1, r0]
 8011dc6:	18c0      	addlt	r0, r0, r3
 8011dc8:	4770      	bx	lr

08011dca <__sfputc_r>:
 8011dca:	6893      	ldr	r3, [r2, #8]
 8011dcc:	3b01      	subs	r3, #1
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	b410      	push	{r4}
 8011dd2:	6093      	str	r3, [r2, #8]
 8011dd4:	da08      	bge.n	8011de8 <__sfputc_r+0x1e>
 8011dd6:	6994      	ldr	r4, [r2, #24]
 8011dd8:	42a3      	cmp	r3, r4
 8011dda:	db01      	blt.n	8011de0 <__sfputc_r+0x16>
 8011ddc:	290a      	cmp	r1, #10
 8011dde:	d103      	bne.n	8011de8 <__sfputc_r+0x1e>
 8011de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011de4:	f000 b934 	b.w	8012050 <__swbuf_r>
 8011de8:	6813      	ldr	r3, [r2, #0]
 8011dea:	1c58      	adds	r0, r3, #1
 8011dec:	6010      	str	r0, [r2, #0]
 8011dee:	7019      	strb	r1, [r3, #0]
 8011df0:	4608      	mov	r0, r1
 8011df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011df6:	4770      	bx	lr

08011df8 <__sfputs_r>:
 8011df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dfa:	4606      	mov	r6, r0
 8011dfc:	460f      	mov	r7, r1
 8011dfe:	4614      	mov	r4, r2
 8011e00:	18d5      	adds	r5, r2, r3
 8011e02:	42ac      	cmp	r4, r5
 8011e04:	d101      	bne.n	8011e0a <__sfputs_r+0x12>
 8011e06:	2000      	movs	r0, #0
 8011e08:	e007      	b.n	8011e1a <__sfputs_r+0x22>
 8011e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e0e:	463a      	mov	r2, r7
 8011e10:	4630      	mov	r0, r6
 8011e12:	f7ff ffda 	bl	8011dca <__sfputc_r>
 8011e16:	1c43      	adds	r3, r0, #1
 8011e18:	d1f3      	bne.n	8011e02 <__sfputs_r+0xa>
 8011e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e1c <_vfiprintf_r>:
 8011e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e20:	460d      	mov	r5, r1
 8011e22:	b09d      	sub	sp, #116	; 0x74
 8011e24:	4614      	mov	r4, r2
 8011e26:	4698      	mov	r8, r3
 8011e28:	4606      	mov	r6, r0
 8011e2a:	b118      	cbz	r0, 8011e34 <_vfiprintf_r+0x18>
 8011e2c:	6a03      	ldr	r3, [r0, #32]
 8011e2e:	b90b      	cbnz	r3, 8011e34 <_vfiprintf_r+0x18>
 8011e30:	f7fe f8d8 	bl	800ffe4 <__sinit>
 8011e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e36:	07d9      	lsls	r1, r3, #31
 8011e38:	d405      	bmi.n	8011e46 <_vfiprintf_r+0x2a>
 8011e3a:	89ab      	ldrh	r3, [r5, #12]
 8011e3c:	059a      	lsls	r2, r3, #22
 8011e3e:	d402      	bmi.n	8011e46 <_vfiprintf_r+0x2a>
 8011e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e42:	f7fe f9e6 	bl	8010212 <__retarget_lock_acquire_recursive>
 8011e46:	89ab      	ldrh	r3, [r5, #12]
 8011e48:	071b      	lsls	r3, r3, #28
 8011e4a:	d501      	bpl.n	8011e50 <_vfiprintf_r+0x34>
 8011e4c:	692b      	ldr	r3, [r5, #16]
 8011e4e:	b99b      	cbnz	r3, 8011e78 <_vfiprintf_r+0x5c>
 8011e50:	4629      	mov	r1, r5
 8011e52:	4630      	mov	r0, r6
 8011e54:	f000 f93a 	bl	80120cc <__swsetup_r>
 8011e58:	b170      	cbz	r0, 8011e78 <_vfiprintf_r+0x5c>
 8011e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e5c:	07dc      	lsls	r4, r3, #31
 8011e5e:	d504      	bpl.n	8011e6a <_vfiprintf_r+0x4e>
 8011e60:	f04f 30ff 	mov.w	r0, #4294967295
 8011e64:	b01d      	add	sp, #116	; 0x74
 8011e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e6a:	89ab      	ldrh	r3, [r5, #12]
 8011e6c:	0598      	lsls	r0, r3, #22
 8011e6e:	d4f7      	bmi.n	8011e60 <_vfiprintf_r+0x44>
 8011e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e72:	f7fe f9cf 	bl	8010214 <__retarget_lock_release_recursive>
 8011e76:	e7f3      	b.n	8011e60 <_vfiprintf_r+0x44>
 8011e78:	2300      	movs	r3, #0
 8011e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8011e7c:	2320      	movs	r3, #32
 8011e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e86:	2330      	movs	r3, #48	; 0x30
 8011e88:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801203c <_vfiprintf_r+0x220>
 8011e8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e90:	f04f 0901 	mov.w	r9, #1
 8011e94:	4623      	mov	r3, r4
 8011e96:	469a      	mov	sl, r3
 8011e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e9c:	b10a      	cbz	r2, 8011ea2 <_vfiprintf_r+0x86>
 8011e9e:	2a25      	cmp	r2, #37	; 0x25
 8011ea0:	d1f9      	bne.n	8011e96 <_vfiprintf_r+0x7a>
 8011ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8011ea6:	d00b      	beq.n	8011ec0 <_vfiprintf_r+0xa4>
 8011ea8:	465b      	mov	r3, fp
 8011eaa:	4622      	mov	r2, r4
 8011eac:	4629      	mov	r1, r5
 8011eae:	4630      	mov	r0, r6
 8011eb0:	f7ff ffa2 	bl	8011df8 <__sfputs_r>
 8011eb4:	3001      	adds	r0, #1
 8011eb6:	f000 80a9 	beq.w	801200c <_vfiprintf_r+0x1f0>
 8011eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ebc:	445a      	add	r2, fp
 8011ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8011ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f000 80a1 	beq.w	801200c <_vfiprintf_r+0x1f0>
 8011eca:	2300      	movs	r3, #0
 8011ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ed4:	f10a 0a01 	add.w	sl, sl, #1
 8011ed8:	9304      	str	r3, [sp, #16]
 8011eda:	9307      	str	r3, [sp, #28]
 8011edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8011ee2:	4654      	mov	r4, sl
 8011ee4:	2205      	movs	r2, #5
 8011ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eea:	4854      	ldr	r0, [pc, #336]	; (801203c <_vfiprintf_r+0x220>)
 8011eec:	f7ee f980 	bl	80001f0 <memchr>
 8011ef0:	9a04      	ldr	r2, [sp, #16]
 8011ef2:	b9d8      	cbnz	r0, 8011f2c <_vfiprintf_r+0x110>
 8011ef4:	06d1      	lsls	r1, r2, #27
 8011ef6:	bf44      	itt	mi
 8011ef8:	2320      	movmi	r3, #32
 8011efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011efe:	0713      	lsls	r3, r2, #28
 8011f00:	bf44      	itt	mi
 8011f02:	232b      	movmi	r3, #43	; 0x2b
 8011f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f08:	f89a 3000 	ldrb.w	r3, [sl]
 8011f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8011f0e:	d015      	beq.n	8011f3c <_vfiprintf_r+0x120>
 8011f10:	9a07      	ldr	r2, [sp, #28]
 8011f12:	4654      	mov	r4, sl
 8011f14:	2000      	movs	r0, #0
 8011f16:	f04f 0c0a 	mov.w	ip, #10
 8011f1a:	4621      	mov	r1, r4
 8011f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f20:	3b30      	subs	r3, #48	; 0x30
 8011f22:	2b09      	cmp	r3, #9
 8011f24:	d94d      	bls.n	8011fc2 <_vfiprintf_r+0x1a6>
 8011f26:	b1b0      	cbz	r0, 8011f56 <_vfiprintf_r+0x13a>
 8011f28:	9207      	str	r2, [sp, #28]
 8011f2a:	e014      	b.n	8011f56 <_vfiprintf_r+0x13a>
 8011f2c:	eba0 0308 	sub.w	r3, r0, r8
 8011f30:	fa09 f303 	lsl.w	r3, r9, r3
 8011f34:	4313      	orrs	r3, r2
 8011f36:	9304      	str	r3, [sp, #16]
 8011f38:	46a2      	mov	sl, r4
 8011f3a:	e7d2      	b.n	8011ee2 <_vfiprintf_r+0xc6>
 8011f3c:	9b03      	ldr	r3, [sp, #12]
 8011f3e:	1d19      	adds	r1, r3, #4
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	9103      	str	r1, [sp, #12]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	bfbb      	ittet	lt
 8011f48:	425b      	neglt	r3, r3
 8011f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8011f4e:	9307      	strge	r3, [sp, #28]
 8011f50:	9307      	strlt	r3, [sp, #28]
 8011f52:	bfb8      	it	lt
 8011f54:	9204      	strlt	r2, [sp, #16]
 8011f56:	7823      	ldrb	r3, [r4, #0]
 8011f58:	2b2e      	cmp	r3, #46	; 0x2e
 8011f5a:	d10c      	bne.n	8011f76 <_vfiprintf_r+0x15a>
 8011f5c:	7863      	ldrb	r3, [r4, #1]
 8011f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8011f60:	d134      	bne.n	8011fcc <_vfiprintf_r+0x1b0>
 8011f62:	9b03      	ldr	r3, [sp, #12]
 8011f64:	1d1a      	adds	r2, r3, #4
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	9203      	str	r2, [sp, #12]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	bfb8      	it	lt
 8011f6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f72:	3402      	adds	r4, #2
 8011f74:	9305      	str	r3, [sp, #20]
 8011f76:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801204c <_vfiprintf_r+0x230>
 8011f7a:	7821      	ldrb	r1, [r4, #0]
 8011f7c:	2203      	movs	r2, #3
 8011f7e:	4650      	mov	r0, sl
 8011f80:	f7ee f936 	bl	80001f0 <memchr>
 8011f84:	b138      	cbz	r0, 8011f96 <_vfiprintf_r+0x17a>
 8011f86:	9b04      	ldr	r3, [sp, #16]
 8011f88:	eba0 000a 	sub.w	r0, r0, sl
 8011f8c:	2240      	movs	r2, #64	; 0x40
 8011f8e:	4082      	lsls	r2, r0
 8011f90:	4313      	orrs	r3, r2
 8011f92:	3401      	adds	r4, #1
 8011f94:	9304      	str	r3, [sp, #16]
 8011f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f9a:	4829      	ldr	r0, [pc, #164]	; (8012040 <_vfiprintf_r+0x224>)
 8011f9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fa0:	2206      	movs	r2, #6
 8011fa2:	f7ee f925 	bl	80001f0 <memchr>
 8011fa6:	2800      	cmp	r0, #0
 8011fa8:	d03f      	beq.n	801202a <_vfiprintf_r+0x20e>
 8011faa:	4b26      	ldr	r3, [pc, #152]	; (8012044 <_vfiprintf_r+0x228>)
 8011fac:	bb1b      	cbnz	r3, 8011ff6 <_vfiprintf_r+0x1da>
 8011fae:	9b03      	ldr	r3, [sp, #12]
 8011fb0:	3307      	adds	r3, #7
 8011fb2:	f023 0307 	bic.w	r3, r3, #7
 8011fb6:	3308      	adds	r3, #8
 8011fb8:	9303      	str	r3, [sp, #12]
 8011fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fbc:	443b      	add	r3, r7
 8011fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8011fc0:	e768      	b.n	8011e94 <_vfiprintf_r+0x78>
 8011fc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fc6:	460c      	mov	r4, r1
 8011fc8:	2001      	movs	r0, #1
 8011fca:	e7a6      	b.n	8011f1a <_vfiprintf_r+0xfe>
 8011fcc:	2300      	movs	r3, #0
 8011fce:	3401      	adds	r4, #1
 8011fd0:	9305      	str	r3, [sp, #20]
 8011fd2:	4619      	mov	r1, r3
 8011fd4:	f04f 0c0a 	mov.w	ip, #10
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fde:	3a30      	subs	r2, #48	; 0x30
 8011fe0:	2a09      	cmp	r2, #9
 8011fe2:	d903      	bls.n	8011fec <_vfiprintf_r+0x1d0>
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d0c6      	beq.n	8011f76 <_vfiprintf_r+0x15a>
 8011fe8:	9105      	str	r1, [sp, #20]
 8011fea:	e7c4      	b.n	8011f76 <_vfiprintf_r+0x15a>
 8011fec:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ff0:	4604      	mov	r4, r0
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	e7f0      	b.n	8011fd8 <_vfiprintf_r+0x1bc>
 8011ff6:	ab03      	add	r3, sp, #12
 8011ff8:	9300      	str	r3, [sp, #0]
 8011ffa:	462a      	mov	r2, r5
 8011ffc:	4b12      	ldr	r3, [pc, #72]	; (8012048 <_vfiprintf_r+0x22c>)
 8011ffe:	a904      	add	r1, sp, #16
 8012000:	4630      	mov	r0, r6
 8012002:	f7fd fb9d 	bl	800f740 <_printf_float>
 8012006:	4607      	mov	r7, r0
 8012008:	1c78      	adds	r0, r7, #1
 801200a:	d1d6      	bne.n	8011fba <_vfiprintf_r+0x19e>
 801200c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801200e:	07d9      	lsls	r1, r3, #31
 8012010:	d405      	bmi.n	801201e <_vfiprintf_r+0x202>
 8012012:	89ab      	ldrh	r3, [r5, #12]
 8012014:	059a      	lsls	r2, r3, #22
 8012016:	d402      	bmi.n	801201e <_vfiprintf_r+0x202>
 8012018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801201a:	f7fe f8fb 	bl	8010214 <__retarget_lock_release_recursive>
 801201e:	89ab      	ldrh	r3, [r5, #12]
 8012020:	065b      	lsls	r3, r3, #25
 8012022:	f53f af1d 	bmi.w	8011e60 <_vfiprintf_r+0x44>
 8012026:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012028:	e71c      	b.n	8011e64 <_vfiprintf_r+0x48>
 801202a:	ab03      	add	r3, sp, #12
 801202c:	9300      	str	r3, [sp, #0]
 801202e:	462a      	mov	r2, r5
 8012030:	4b05      	ldr	r3, [pc, #20]	; (8012048 <_vfiprintf_r+0x22c>)
 8012032:	a904      	add	r1, sp, #16
 8012034:	4630      	mov	r0, r6
 8012036:	f7fd fe27 	bl	800fc88 <_printf_i>
 801203a:	e7e4      	b.n	8012006 <_vfiprintf_r+0x1ea>
 801203c:	080140ec 	.word	0x080140ec
 8012040:	080140f6 	.word	0x080140f6
 8012044:	0800f741 	.word	0x0800f741
 8012048:	08011df9 	.word	0x08011df9
 801204c:	080140f2 	.word	0x080140f2

08012050 <__swbuf_r>:
 8012050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012052:	460e      	mov	r6, r1
 8012054:	4614      	mov	r4, r2
 8012056:	4605      	mov	r5, r0
 8012058:	b118      	cbz	r0, 8012062 <__swbuf_r+0x12>
 801205a:	6a03      	ldr	r3, [r0, #32]
 801205c:	b90b      	cbnz	r3, 8012062 <__swbuf_r+0x12>
 801205e:	f7fd ffc1 	bl	800ffe4 <__sinit>
 8012062:	69a3      	ldr	r3, [r4, #24]
 8012064:	60a3      	str	r3, [r4, #8]
 8012066:	89a3      	ldrh	r3, [r4, #12]
 8012068:	071a      	lsls	r2, r3, #28
 801206a:	d525      	bpl.n	80120b8 <__swbuf_r+0x68>
 801206c:	6923      	ldr	r3, [r4, #16]
 801206e:	b31b      	cbz	r3, 80120b8 <__swbuf_r+0x68>
 8012070:	6823      	ldr	r3, [r4, #0]
 8012072:	6922      	ldr	r2, [r4, #16]
 8012074:	1a98      	subs	r0, r3, r2
 8012076:	6963      	ldr	r3, [r4, #20]
 8012078:	b2f6      	uxtb	r6, r6
 801207a:	4283      	cmp	r3, r0
 801207c:	4637      	mov	r7, r6
 801207e:	dc04      	bgt.n	801208a <__swbuf_r+0x3a>
 8012080:	4621      	mov	r1, r4
 8012082:	4628      	mov	r0, r5
 8012084:	f7ff fdac 	bl	8011be0 <_fflush_r>
 8012088:	b9e0      	cbnz	r0, 80120c4 <__swbuf_r+0x74>
 801208a:	68a3      	ldr	r3, [r4, #8]
 801208c:	3b01      	subs	r3, #1
 801208e:	60a3      	str	r3, [r4, #8]
 8012090:	6823      	ldr	r3, [r4, #0]
 8012092:	1c5a      	adds	r2, r3, #1
 8012094:	6022      	str	r2, [r4, #0]
 8012096:	701e      	strb	r6, [r3, #0]
 8012098:	6962      	ldr	r2, [r4, #20]
 801209a:	1c43      	adds	r3, r0, #1
 801209c:	429a      	cmp	r2, r3
 801209e:	d004      	beq.n	80120aa <__swbuf_r+0x5a>
 80120a0:	89a3      	ldrh	r3, [r4, #12]
 80120a2:	07db      	lsls	r3, r3, #31
 80120a4:	d506      	bpl.n	80120b4 <__swbuf_r+0x64>
 80120a6:	2e0a      	cmp	r6, #10
 80120a8:	d104      	bne.n	80120b4 <__swbuf_r+0x64>
 80120aa:	4621      	mov	r1, r4
 80120ac:	4628      	mov	r0, r5
 80120ae:	f7ff fd97 	bl	8011be0 <_fflush_r>
 80120b2:	b938      	cbnz	r0, 80120c4 <__swbuf_r+0x74>
 80120b4:	4638      	mov	r0, r7
 80120b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120b8:	4621      	mov	r1, r4
 80120ba:	4628      	mov	r0, r5
 80120bc:	f000 f806 	bl	80120cc <__swsetup_r>
 80120c0:	2800      	cmp	r0, #0
 80120c2:	d0d5      	beq.n	8012070 <__swbuf_r+0x20>
 80120c4:	f04f 37ff 	mov.w	r7, #4294967295
 80120c8:	e7f4      	b.n	80120b4 <__swbuf_r+0x64>
	...

080120cc <__swsetup_r>:
 80120cc:	b538      	push	{r3, r4, r5, lr}
 80120ce:	4b2a      	ldr	r3, [pc, #168]	; (8012178 <__swsetup_r+0xac>)
 80120d0:	4605      	mov	r5, r0
 80120d2:	6818      	ldr	r0, [r3, #0]
 80120d4:	460c      	mov	r4, r1
 80120d6:	b118      	cbz	r0, 80120e0 <__swsetup_r+0x14>
 80120d8:	6a03      	ldr	r3, [r0, #32]
 80120da:	b90b      	cbnz	r3, 80120e0 <__swsetup_r+0x14>
 80120dc:	f7fd ff82 	bl	800ffe4 <__sinit>
 80120e0:	89a3      	ldrh	r3, [r4, #12]
 80120e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120e6:	0718      	lsls	r0, r3, #28
 80120e8:	d422      	bmi.n	8012130 <__swsetup_r+0x64>
 80120ea:	06d9      	lsls	r1, r3, #27
 80120ec:	d407      	bmi.n	80120fe <__swsetup_r+0x32>
 80120ee:	2309      	movs	r3, #9
 80120f0:	602b      	str	r3, [r5, #0]
 80120f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80120f6:	81a3      	strh	r3, [r4, #12]
 80120f8:	f04f 30ff 	mov.w	r0, #4294967295
 80120fc:	e034      	b.n	8012168 <__swsetup_r+0x9c>
 80120fe:	0758      	lsls	r0, r3, #29
 8012100:	d512      	bpl.n	8012128 <__swsetup_r+0x5c>
 8012102:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012104:	b141      	cbz	r1, 8012118 <__swsetup_r+0x4c>
 8012106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801210a:	4299      	cmp	r1, r3
 801210c:	d002      	beq.n	8012114 <__swsetup_r+0x48>
 801210e:	4628      	mov	r0, r5
 8012110:	f7fe ff0c 	bl	8010f2c <_free_r>
 8012114:	2300      	movs	r3, #0
 8012116:	6363      	str	r3, [r4, #52]	; 0x34
 8012118:	89a3      	ldrh	r3, [r4, #12]
 801211a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801211e:	81a3      	strh	r3, [r4, #12]
 8012120:	2300      	movs	r3, #0
 8012122:	6063      	str	r3, [r4, #4]
 8012124:	6923      	ldr	r3, [r4, #16]
 8012126:	6023      	str	r3, [r4, #0]
 8012128:	89a3      	ldrh	r3, [r4, #12]
 801212a:	f043 0308 	orr.w	r3, r3, #8
 801212e:	81a3      	strh	r3, [r4, #12]
 8012130:	6923      	ldr	r3, [r4, #16]
 8012132:	b94b      	cbnz	r3, 8012148 <__swsetup_r+0x7c>
 8012134:	89a3      	ldrh	r3, [r4, #12]
 8012136:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801213a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801213e:	d003      	beq.n	8012148 <__swsetup_r+0x7c>
 8012140:	4621      	mov	r1, r4
 8012142:	4628      	mov	r0, r5
 8012144:	f000 f884 	bl	8012250 <__smakebuf_r>
 8012148:	89a0      	ldrh	r0, [r4, #12]
 801214a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801214e:	f010 0301 	ands.w	r3, r0, #1
 8012152:	d00a      	beq.n	801216a <__swsetup_r+0x9e>
 8012154:	2300      	movs	r3, #0
 8012156:	60a3      	str	r3, [r4, #8]
 8012158:	6963      	ldr	r3, [r4, #20]
 801215a:	425b      	negs	r3, r3
 801215c:	61a3      	str	r3, [r4, #24]
 801215e:	6923      	ldr	r3, [r4, #16]
 8012160:	b943      	cbnz	r3, 8012174 <__swsetup_r+0xa8>
 8012162:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012166:	d1c4      	bne.n	80120f2 <__swsetup_r+0x26>
 8012168:	bd38      	pop	{r3, r4, r5, pc}
 801216a:	0781      	lsls	r1, r0, #30
 801216c:	bf58      	it	pl
 801216e:	6963      	ldrpl	r3, [r4, #20]
 8012170:	60a3      	str	r3, [r4, #8]
 8012172:	e7f4      	b.n	801215e <__swsetup_r+0x92>
 8012174:	2000      	movs	r0, #0
 8012176:	e7f7      	b.n	8012168 <__swsetup_r+0x9c>
 8012178:	200001d4 	.word	0x200001d4

0801217c <_raise_r>:
 801217c:	291f      	cmp	r1, #31
 801217e:	b538      	push	{r3, r4, r5, lr}
 8012180:	4604      	mov	r4, r0
 8012182:	460d      	mov	r5, r1
 8012184:	d904      	bls.n	8012190 <_raise_r+0x14>
 8012186:	2316      	movs	r3, #22
 8012188:	6003      	str	r3, [r0, #0]
 801218a:	f04f 30ff 	mov.w	r0, #4294967295
 801218e:	bd38      	pop	{r3, r4, r5, pc}
 8012190:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012192:	b112      	cbz	r2, 801219a <_raise_r+0x1e>
 8012194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012198:	b94b      	cbnz	r3, 80121ae <_raise_r+0x32>
 801219a:	4620      	mov	r0, r4
 801219c:	f000 f830 	bl	8012200 <_getpid_r>
 80121a0:	462a      	mov	r2, r5
 80121a2:	4601      	mov	r1, r0
 80121a4:	4620      	mov	r0, r4
 80121a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121aa:	f000 b817 	b.w	80121dc <_kill_r>
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d00a      	beq.n	80121c8 <_raise_r+0x4c>
 80121b2:	1c59      	adds	r1, r3, #1
 80121b4:	d103      	bne.n	80121be <_raise_r+0x42>
 80121b6:	2316      	movs	r3, #22
 80121b8:	6003      	str	r3, [r0, #0]
 80121ba:	2001      	movs	r0, #1
 80121bc:	e7e7      	b.n	801218e <_raise_r+0x12>
 80121be:	2400      	movs	r4, #0
 80121c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80121c4:	4628      	mov	r0, r5
 80121c6:	4798      	blx	r3
 80121c8:	2000      	movs	r0, #0
 80121ca:	e7e0      	b.n	801218e <_raise_r+0x12>

080121cc <raise>:
 80121cc:	4b02      	ldr	r3, [pc, #8]	; (80121d8 <raise+0xc>)
 80121ce:	4601      	mov	r1, r0
 80121d0:	6818      	ldr	r0, [r3, #0]
 80121d2:	f7ff bfd3 	b.w	801217c <_raise_r>
 80121d6:	bf00      	nop
 80121d8:	200001d4 	.word	0x200001d4

080121dc <_kill_r>:
 80121dc:	b538      	push	{r3, r4, r5, lr}
 80121de:	4d07      	ldr	r5, [pc, #28]	; (80121fc <_kill_r+0x20>)
 80121e0:	2300      	movs	r3, #0
 80121e2:	4604      	mov	r4, r0
 80121e4:	4608      	mov	r0, r1
 80121e6:	4611      	mov	r1, r2
 80121e8:	602b      	str	r3, [r5, #0]
 80121ea:	f7ef fb05 	bl	80017f8 <_kill>
 80121ee:	1c43      	adds	r3, r0, #1
 80121f0:	d102      	bne.n	80121f8 <_kill_r+0x1c>
 80121f2:	682b      	ldr	r3, [r5, #0]
 80121f4:	b103      	cbz	r3, 80121f8 <_kill_r+0x1c>
 80121f6:	6023      	str	r3, [r4, #0]
 80121f8:	bd38      	pop	{r3, r4, r5, pc}
 80121fa:	bf00      	nop
 80121fc:	20006df8 	.word	0x20006df8

08012200 <_getpid_r>:
 8012200:	f7ef baf2 	b.w	80017e8 <_getpid>

08012204 <__swhatbuf_r>:
 8012204:	b570      	push	{r4, r5, r6, lr}
 8012206:	460c      	mov	r4, r1
 8012208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801220c:	2900      	cmp	r1, #0
 801220e:	b096      	sub	sp, #88	; 0x58
 8012210:	4615      	mov	r5, r2
 8012212:	461e      	mov	r6, r3
 8012214:	da0d      	bge.n	8012232 <__swhatbuf_r+0x2e>
 8012216:	89a3      	ldrh	r3, [r4, #12]
 8012218:	f013 0f80 	tst.w	r3, #128	; 0x80
 801221c:	f04f 0100 	mov.w	r1, #0
 8012220:	bf0c      	ite	eq
 8012222:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012226:	2340      	movne	r3, #64	; 0x40
 8012228:	2000      	movs	r0, #0
 801222a:	6031      	str	r1, [r6, #0]
 801222c:	602b      	str	r3, [r5, #0]
 801222e:	b016      	add	sp, #88	; 0x58
 8012230:	bd70      	pop	{r4, r5, r6, pc}
 8012232:	466a      	mov	r2, sp
 8012234:	f000 f848 	bl	80122c8 <_fstat_r>
 8012238:	2800      	cmp	r0, #0
 801223a:	dbec      	blt.n	8012216 <__swhatbuf_r+0x12>
 801223c:	9901      	ldr	r1, [sp, #4]
 801223e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012242:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012246:	4259      	negs	r1, r3
 8012248:	4159      	adcs	r1, r3
 801224a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801224e:	e7eb      	b.n	8012228 <__swhatbuf_r+0x24>

08012250 <__smakebuf_r>:
 8012250:	898b      	ldrh	r3, [r1, #12]
 8012252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012254:	079d      	lsls	r5, r3, #30
 8012256:	4606      	mov	r6, r0
 8012258:	460c      	mov	r4, r1
 801225a:	d507      	bpl.n	801226c <__smakebuf_r+0x1c>
 801225c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012260:	6023      	str	r3, [r4, #0]
 8012262:	6123      	str	r3, [r4, #16]
 8012264:	2301      	movs	r3, #1
 8012266:	6163      	str	r3, [r4, #20]
 8012268:	b002      	add	sp, #8
 801226a:	bd70      	pop	{r4, r5, r6, pc}
 801226c:	ab01      	add	r3, sp, #4
 801226e:	466a      	mov	r2, sp
 8012270:	f7ff ffc8 	bl	8012204 <__swhatbuf_r>
 8012274:	9900      	ldr	r1, [sp, #0]
 8012276:	4605      	mov	r5, r0
 8012278:	4630      	mov	r0, r6
 801227a:	f7fe fecb 	bl	8011014 <_malloc_r>
 801227e:	b948      	cbnz	r0, 8012294 <__smakebuf_r+0x44>
 8012280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012284:	059a      	lsls	r2, r3, #22
 8012286:	d4ef      	bmi.n	8012268 <__smakebuf_r+0x18>
 8012288:	f023 0303 	bic.w	r3, r3, #3
 801228c:	f043 0302 	orr.w	r3, r3, #2
 8012290:	81a3      	strh	r3, [r4, #12]
 8012292:	e7e3      	b.n	801225c <__smakebuf_r+0xc>
 8012294:	89a3      	ldrh	r3, [r4, #12]
 8012296:	6020      	str	r0, [r4, #0]
 8012298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801229c:	81a3      	strh	r3, [r4, #12]
 801229e:	9b00      	ldr	r3, [sp, #0]
 80122a0:	6163      	str	r3, [r4, #20]
 80122a2:	9b01      	ldr	r3, [sp, #4]
 80122a4:	6120      	str	r0, [r4, #16]
 80122a6:	b15b      	cbz	r3, 80122c0 <__smakebuf_r+0x70>
 80122a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122ac:	4630      	mov	r0, r6
 80122ae:	f000 f81d 	bl	80122ec <_isatty_r>
 80122b2:	b128      	cbz	r0, 80122c0 <__smakebuf_r+0x70>
 80122b4:	89a3      	ldrh	r3, [r4, #12]
 80122b6:	f023 0303 	bic.w	r3, r3, #3
 80122ba:	f043 0301 	orr.w	r3, r3, #1
 80122be:	81a3      	strh	r3, [r4, #12]
 80122c0:	89a3      	ldrh	r3, [r4, #12]
 80122c2:	431d      	orrs	r5, r3
 80122c4:	81a5      	strh	r5, [r4, #12]
 80122c6:	e7cf      	b.n	8012268 <__smakebuf_r+0x18>

080122c8 <_fstat_r>:
 80122c8:	b538      	push	{r3, r4, r5, lr}
 80122ca:	4d07      	ldr	r5, [pc, #28]	; (80122e8 <_fstat_r+0x20>)
 80122cc:	2300      	movs	r3, #0
 80122ce:	4604      	mov	r4, r0
 80122d0:	4608      	mov	r0, r1
 80122d2:	4611      	mov	r1, r2
 80122d4:	602b      	str	r3, [r5, #0]
 80122d6:	f7ef faee 	bl	80018b6 <_fstat>
 80122da:	1c43      	adds	r3, r0, #1
 80122dc:	d102      	bne.n	80122e4 <_fstat_r+0x1c>
 80122de:	682b      	ldr	r3, [r5, #0]
 80122e0:	b103      	cbz	r3, 80122e4 <_fstat_r+0x1c>
 80122e2:	6023      	str	r3, [r4, #0]
 80122e4:	bd38      	pop	{r3, r4, r5, pc}
 80122e6:	bf00      	nop
 80122e8:	20006df8 	.word	0x20006df8

080122ec <_isatty_r>:
 80122ec:	b538      	push	{r3, r4, r5, lr}
 80122ee:	4d06      	ldr	r5, [pc, #24]	; (8012308 <_isatty_r+0x1c>)
 80122f0:	2300      	movs	r3, #0
 80122f2:	4604      	mov	r4, r0
 80122f4:	4608      	mov	r0, r1
 80122f6:	602b      	str	r3, [r5, #0]
 80122f8:	f7ef faed 	bl	80018d6 <_isatty>
 80122fc:	1c43      	adds	r3, r0, #1
 80122fe:	d102      	bne.n	8012306 <_isatty_r+0x1a>
 8012300:	682b      	ldr	r3, [r5, #0]
 8012302:	b103      	cbz	r3, 8012306 <_isatty_r+0x1a>
 8012304:	6023      	str	r3, [r4, #0]
 8012306:	bd38      	pop	{r3, r4, r5, pc}
 8012308:	20006df8 	.word	0x20006df8

0801230c <_init>:
 801230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801230e:	bf00      	nop
 8012310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012312:	bc08      	pop	{r3}
 8012314:	469e      	mov	lr, r3
 8012316:	4770      	bx	lr

08012318 <_fini>:
 8012318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801231a:	bf00      	nop
 801231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801231e:	bc08      	pop	{r3}
 8012320:	469e      	mov	lr, r3
 8012322:	4770      	bx	lr
