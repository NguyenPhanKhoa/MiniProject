
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001eac  0800ebe8  0800ebe8  0001ebe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a94  08010a94  00030340  2**0
                  CONTENTS
  4 .ARM          00000008  08010a94  08010a94  00020a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a9c  08010a9c  00030340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a9c  08010a9c  00020a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010aa0  08010aa0  00020aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000340  20000000  08010aa4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030340  2**0
                  CONTENTS
 10 .bss          00002094  20000340  20000340  00030340  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200023d4  200023d4  00030340  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030340  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dc2d  00000000  00000000  000303b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004fc4  00000000  00000000  0004dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ad8  00000000  00000000  00052fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000145e  00000000  00000000  00054a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a09a  00000000  00000000  00055ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000223d2  00000000  00000000  0007ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4b94  00000000  00000000  000a234a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008054  00000000  00000000  00186ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0018ef34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000340 	.word	0x20000340
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ebd0 	.word	0x0800ebd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000344 	.word	0x20000344
 80001ec:	0800ebd0 	.word	0x0800ebd0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ec8:	b089      	sub	sp, #36	; 0x24
 8000eca:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f002 f8c0 	bl	8003050 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_GYRO_Init();
 8000ed0:	f001 fa04 	bl	80022dc <BSP_GYRO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f880 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 f966 	bl	80011a8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000edc:	f00a fada 	bl	800b494 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000ee0:	f000 f8ec 	bl	80010bc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ee4:	f000 f92a 	bl	800113c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000ee8:	f001 fa72 	bl	80023d0 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000eec:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f001 faef 	bl	80024d4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f001 fb50 	bl	800259c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000efc:	f001 fd9a 	bl	8002a34 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000f00:	4830      	ldr	r0, [pc, #192]	; (8000fc4 <main+0x100>)
 8000f02:	f001 fba7 	bl	8002654 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000f06:	482f      	ldr	r0, [pc, #188]	; (8000fc4 <main+0x100>)
 8000f08:	f001 fb70 	bl	80025ec <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f001 fb54 	bl	80025bc <BSP_LCD_SetTextColor>
    //write text
  int16_t XCir = 160;
 8000f14:	23a0      	movs	r3, #160	; 0xa0
 8000f16:	81fb      	strh	r3, [r7, #14]
  int16_t YCir = 120;
 8000f18:	2378      	movs	r3, #120	; 0x78
 8000f1a:	81bb      	strh	r3, [r7, #12]
  int16_t radiusCir = 50;
 8000f1c:	2332      	movs	r3, #50	; 0x32
 8000f1e:	817b      	strh	r3, [r7, #10]
  BSP_GYRO_GetXYZ(gryoData);
 8000f20:	4829      	ldr	r0, [pc, #164]	; (8000fc8 <main+0x104>)
 8000f22:	f001 fa41 	bl	80023a8 <BSP_GYRO_GetXYZ>
  float defaultHeight = gryoData[2];
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <main+0x104>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	607b      	str	r3, [r7, #4]

  if (defaultHeight <= defaultHeight - 20)
 8000f2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f30:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f38:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	d802      	bhi.n	8000f4c <main+0x88>
  {
	  startGame = true;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <main+0x108>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_LCD_FillCircle(XCir, YCir, radiusCir);
 8000f4c:	89fb      	ldrh	r3, [r7, #14]
 8000f4e:	89b9      	ldrh	r1, [r7, #12]
 8000f50:	897a      	ldrh	r2, [r7, #10]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fcce 	bl	80028f4 <BSP_LCD_FillCircle>
	  BSP_GYRO_GetXYZ(gryoData);
 8000f58:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <main+0x104>)
 8000f5a:	f001 fa25 	bl	80023a8 <BSP_GYRO_GetXYZ>
	  sprintf(gryoPrint, "X: %f \t Y: %f \t Z:%f \n", gryoData[0], gryoData[1], gryoData[2]);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <main+0x10c>)
 8000f60:	681e      	ldr	r6, [r3, #0]
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <main+0x104>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fafe 	bl	8000568 <__aeabi_f2d>
 8000f6c:	4680      	mov	r8, r0
 8000f6e:	4689      	mov	r9, r1
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <main+0x104>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff faf7 	bl	8000568 <__aeabi_f2d>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <main+0x104>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff faf0 	bl	8000568 <__aeabi_f2d>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f90:	e9cd 4500 	strd	r4, r5, [sp]
 8000f94:	4642      	mov	r2, r8
 8000f96:	464b      	mov	r3, r9
 8000f98:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <main+0x110>)
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	f00b fcbc 	bl	800c918 <siprintf>
	  CDC_Transmit_FS((uint8_t*) gryoPrint, strlen(gryoPrint));
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <main+0x10c>)
 8000fa2:	681c      	ldr	r4, [r3, #0]
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <main+0x10c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff f971 	bl	8000290 <strlen>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f00a fb2b 	bl	800b610 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8000fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbe:	f002 f8b9 	bl	8003134 <HAL_Delay>
	  BSP_LCD_FillCircle(XCir, YCir, radiusCir);
 8000fc2:	e7c3      	b.n	8000f4c <main+0x88>
 8000fc4:	ff0000ff 	.word	0xff0000ff
 8000fc8:	20000408 	.word	0x20000408
 8000fcc:	20000418 	.word	0x20000418
 8000fd0:	20000414 	.word	0x20000414
 8000fd4:	0800ebe8 	.word	0x0800ebe8

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	; 0x50
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	2230      	movs	r2, #48	; 0x30
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00b fcf9 	bl	800c9de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <SystemClock_Config+0xdc>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <SystemClock_Config+0xdc>)
 8001006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <SystemClock_Config+0xdc>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <SystemClock_Config+0xe0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a25      	ldr	r2, [pc, #148]	; (80010b8 <SystemClock_Config+0xe0>)
 8001022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <SystemClock_Config+0xe0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001034:	2301      	movs	r3, #1
 8001036:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103e:	2302      	movs	r3, #2
 8001040:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001042:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001048:	2308      	movs	r3, #8
 800104a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 800104c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001050:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001056:	2308      	movs	r3, #8
 8001058:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	4618      	mov	r0, r3
 8001060:	f005 f82a 	bl	80060b8 <HAL_RCC_OscConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800106a:	f000 f8fd 	bl	8001268 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800106e:	f004 ffd3 	bl	8006018 <HAL_PWREx_EnableOverDrive>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001078:	f000 f8f6 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2302      	movs	r3, #2
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001088:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800108c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800108e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001092:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2105      	movs	r1, #5
 800109a:	4618      	mov	r0, r3
 800109c:	f005 fa84 	bl	80065a8 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010a6:	f000 f8df 	bl	8001268 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_I2C1_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <MX_I2C1_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_I2C1_Init+0x74>)
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <MX_I2C1_Init+0x7c>)
 80010ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_I2C1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_I2C1_Init+0x74>)
 80010da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_I2C1_Init+0x74>)
 80010fa:	f003 f877 	bl	80041ec <HAL_I2C_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001104:	f000 f8b0 	bl	8001268 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001108:	2100      	movs	r1, #0
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <MX_I2C1_Init+0x74>)
 800110c:	f003 f9b2 	bl	8004474 <HAL_I2CEx_ConfigAnalogFilter>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001116:	f000 f8a7 	bl	8001268 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_I2C1_Init+0x74>)
 800111e:	f003 f9e5 	bl	80044ec <HAL_I2CEx_ConfigDigitalFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001128:	f000 f89e 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000035c 	.word	0x2000035c
 8001134:	40005400 	.word	0x40005400
 8001138:	000186a0 	.word	0x000186a0

0800113c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001142:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <MX_SPI1_Init+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001148:	f44f 7282 	mov.w	r2, #260	; 0x104
 800114c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_SPI1_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_SPI1_Init+0x64>)
 8001188:	220a      	movs	r2, #10
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_SPI1_Init+0x64>)
 800118e:	f005 fe72 	bl	8006e76 <HAL_SPI_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001198:	f000 f866 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200003b0 	.word	0x200003b0
 80011a4:	40013000 	.word	0x40013000

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <MX_GPIO_Init+0xb8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a26      	ldr	r2, [pc, #152]	; (8001260 <MX_GPIO_Init+0xb8>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <MX_GPIO_Init+0xb8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_GPIO_Init+0xb8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <MX_GPIO_Init+0xb8>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_GPIO_Init+0xb8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_GPIO_Init+0xb8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a18      	ldr	r2, [pc, #96]	; (8001260 <MX_GPIO_Init+0xb8>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_GPIO_Init+0xb8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_GPIO_Init+0xb8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a11      	ldr	r2, [pc, #68]	; (8001260 <MX_GPIO_Init+0xb8>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_GPIO_Init+0xb8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <MX_GPIO_Init+0xbc>)
 8001236:	f002 ffbf 	bl	80041b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800123a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_GPIO_Init+0xbc>)
 8001254:	f002 fcf8 	bl	8003c48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40020c00 	.word	0x40020c00

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_MspInit+0x4c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_MspInit+0x4c>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a19      	ldr	r2, [pc, #100]	; (8001348 <HAL_I2C_MspInit+0x84>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d12b      	bne.n	800133e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_I2C_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_I2C_MspInit+0x88>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_I2C_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001302:	23c0      	movs	r3, #192	; 0xc0
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001306:	2312      	movs	r3, #18
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001312:	2304      	movs	r3, #4
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <HAL_I2C_MspInit+0x8c>)
 800131e:	f002 fc93 	bl	8003c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_I2C_MspInit+0x88>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_I2C_MspInit+0x88>)
 800132c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_I2C_MspInit+0x88>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40005400 	.word	0x40005400
 800134c:	40023800 	.word	0x40023800
 8001350:	40020400 	.word	0x40020400

08001354 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <HAL_SPI_MspInit+0x84>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d12b      	bne.n	80013ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_SPI_MspInit+0x88>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_SPI_MspInit+0x88>)
 8001380:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_SPI_MspInit+0x88>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_SPI_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_SPI_MspInit+0x88>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_SPI_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013ae:	23e0      	movs	r3, #224	; 0xe0
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013be:	2305      	movs	r3, #5
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_SPI_MspInit+0x8c>)
 80013ca:	f002 fc3d 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	; 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40013000 	.word	0x40013000
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020000 	.word	0x40020000

080013e4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_SPI_MspDeInit+0x30>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d109      	bne.n	800140a <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_SPI_MspDeInit+0x34>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_SPI_MspDeInit+0x34>)
 80013fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001402:	21e0      	movs	r1, #224	; 0xe0
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_SPI_MspDeInit+0x38>)
 8001406:	f002 fdcb 	bl	8003fa0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40013000 	.word	0x40013000
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f001 fe42 	bl	80030f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <OTG_FS_IRQHandler+0x10>)
 800147a:	f003 fca0 	bl	8004dbe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20001b5c 	.word	0x20001b5c

08001488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return 1;
 800148c:	2301      	movs	r3, #1
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_kill>:

int _kill(int pid, int sig)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014a2:	f00b faef 	bl	800ca84 <__errno>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2216      	movs	r2, #22
 80014aa:	601a      	str	r2, [r3, #0]
  return -1;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_exit>:

void _exit (int status)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ffe7 	bl	8001498 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ca:	e7fe      	b.n	80014ca <_exit+0x12>

080014cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e00a      	b.n	80014f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014de:	f3af 8000 	nop.w
 80014e2:	4601      	mov	r1, r0
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	b2ca      	uxtb	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dbf0      	blt.n	80014de <_read+0x12>
  }

  return len;
 80014fc:	687b      	ldr	r3, [r7, #4]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e009      	b.n	800152c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	dbf1      	blt.n	8001518 <_write+0x12>
  }
  return len;
 8001534:	687b      	ldr	r3, [r7, #4]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <_close>:

int _close(int file)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001566:	605a      	str	r2, [r3, #4]
  return 0;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <_isatty>:

int _isatty(int file)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f00b fa54 	bl	800ca84 <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20030000 	.word	0x20030000
 8001608:	00000400 	.word	0x00000400
 800160c:	2000041c 	.word	0x2000041c
 8001610:	200023d8 	.word	0x200023d8

08001614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001670 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800163c:	480d      	ldr	r0, [pc, #52]	; (8001674 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800163e:	490e      	ldr	r1, [pc, #56]	; (8001678 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001654:	4c0b      	ldr	r4, [pc, #44]	; (8001684 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001662:	f7ff ffd7 	bl	8001614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001666:	f00b fa13 	bl	800ca90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166a:	f7ff fc2b 	bl	8000ec4 <main>
  bx  lr    
 800166e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001670:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	20000340 	.word	0x20000340
  ldr r2, =_sidata
 800167c:	08010aa4 	.word	0x08010aa4
  ldr r2, =_sbss
 8001680:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8001684:	200023d4 	.word	0x200023d4

08001688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC_IRQHandler>

0800168a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800168e:	f000 fc73 	bl	8001f78 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001692:	20ca      	movs	r0, #202	; 0xca
 8001694:	f000 f95d 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001698:	20c3      	movs	r0, #195	; 0xc3
 800169a:	f000 f967 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800169e:	2008      	movs	r0, #8
 80016a0:	f000 f964 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80016a4:	2050      	movs	r0, #80	; 0x50
 80016a6:	f000 f961 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80016aa:	20cf      	movs	r0, #207	; 0xcf
 80016ac:	f000 f951 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f000 f95b 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80016b6:	20c1      	movs	r0, #193	; 0xc1
 80016b8:	f000 f958 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80016bc:	2030      	movs	r0, #48	; 0x30
 80016be:	f000 f955 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80016c2:	20ed      	movs	r0, #237	; 0xed
 80016c4:	f000 f945 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80016c8:	2064      	movs	r0, #100	; 0x64
 80016ca:	f000 f94f 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80016ce:	2003      	movs	r0, #3
 80016d0:	f000 f94c 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80016d4:	2012      	movs	r0, #18
 80016d6:	f000 f949 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80016da:	2081      	movs	r0, #129	; 0x81
 80016dc:	f000 f946 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80016e0:	20e8      	movs	r0, #232	; 0xe8
 80016e2:	f000 f936 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80016e6:	2085      	movs	r0, #133	; 0x85
 80016e8:	f000 f940 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f000 f93d 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80016f2:	2078      	movs	r0, #120	; 0x78
 80016f4:	f000 f93a 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80016f8:	20cb      	movs	r0, #203	; 0xcb
 80016fa:	f000 f92a 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80016fe:	2039      	movs	r0, #57	; 0x39
 8001700:	f000 f934 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001704:	202c      	movs	r0, #44	; 0x2c
 8001706:	f000 f931 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f92e 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001710:	2034      	movs	r0, #52	; 0x34
 8001712:	f000 f92b 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001716:	2002      	movs	r0, #2
 8001718:	f000 f928 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800171c:	20f7      	movs	r0, #247	; 0xf7
 800171e:	f000 f918 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001722:	2020      	movs	r0, #32
 8001724:	f000 f922 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001728:	20ea      	movs	r0, #234	; 0xea
 800172a:	f000 f912 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f91c 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001734:	2000      	movs	r0, #0
 8001736:	f000 f919 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800173a:	20b1      	movs	r0, #177	; 0xb1
 800173c:	f000 f909 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001740:	2000      	movs	r0, #0
 8001742:	f000 f913 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001746:	201b      	movs	r0, #27
 8001748:	f000 f910 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800174c:	20b6      	movs	r0, #182	; 0xb6
 800174e:	f000 f900 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001752:	200a      	movs	r0, #10
 8001754:	f000 f90a 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001758:	20a2      	movs	r0, #162	; 0xa2
 800175a:	f000 f907 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800175e:	20c0      	movs	r0, #192	; 0xc0
 8001760:	f000 f8f7 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001764:	2010      	movs	r0, #16
 8001766:	f000 f901 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800176a:	20c1      	movs	r0, #193	; 0xc1
 800176c:	f000 f8f1 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001770:	2010      	movs	r0, #16
 8001772:	f000 f8fb 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001776:	20c5      	movs	r0, #197	; 0xc5
 8001778:	f000 f8eb 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800177c:	2045      	movs	r0, #69	; 0x45
 800177e:	f000 f8f5 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001782:	2015      	movs	r0, #21
 8001784:	f000 f8f2 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001788:	20c7      	movs	r0, #199	; 0xc7
 800178a:	f000 f8e2 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800178e:	2090      	movs	r0, #144	; 0x90
 8001790:	f000 f8ec 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001794:	2036      	movs	r0, #54	; 0x36
 8001796:	f000 f8dc 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800179a:	20c8      	movs	r0, #200	; 0xc8
 800179c:	f000 f8e6 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80017a0:	20f2      	movs	r0, #242	; 0xf2
 80017a2:	f000 f8d6 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 f8e0 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80017ac:	20b0      	movs	r0, #176	; 0xb0
 80017ae:	f000 f8d0 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80017b2:	20c2      	movs	r0, #194	; 0xc2
 80017b4:	f000 f8da 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80017b8:	20b6      	movs	r0, #182	; 0xb6
 80017ba:	f000 f8ca 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80017be:	200a      	movs	r0, #10
 80017c0:	f000 f8d4 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80017c4:	20a7      	movs	r0, #167	; 0xa7
 80017c6:	f000 f8d1 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80017ca:	2027      	movs	r0, #39	; 0x27
 80017cc:	f000 f8ce 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80017d0:	2004      	movs	r0, #4
 80017d2:	f000 f8cb 	bl	800196c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80017d6:	202a      	movs	r0, #42	; 0x2a
 80017d8:	f000 f8bb 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017dc:	2000      	movs	r0, #0
 80017de:	f000 f8c5 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f8c2 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f000 f8bf 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80017ee:	20ef      	movs	r0, #239	; 0xef
 80017f0:	f000 f8bc 	bl	800196c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80017f4:	202b      	movs	r0, #43	; 0x2b
 80017f6:	f000 f8ac 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f8b6 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001800:	2000      	movs	r0, #0
 8001802:	f000 f8b3 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001806:	2001      	movs	r0, #1
 8001808:	f000 f8b0 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800180c:	203f      	movs	r0, #63	; 0x3f
 800180e:	f000 f8ad 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001812:	20f6      	movs	r0, #246	; 0xf6
 8001814:	f000 f89d 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001818:	2001      	movs	r0, #1
 800181a:	f000 f8a7 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f8a4 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001824:	2006      	movs	r0, #6
 8001826:	f000 f8a1 	bl	800196c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800182a:	202c      	movs	r0, #44	; 0x2c
 800182c:	f000 f891 	bl	8001952 <ili9341_WriteReg>
  LCD_Delay(200);
 8001830:	20c8      	movs	r0, #200	; 0xc8
 8001832:	f000 fc8f 	bl	8002154 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001836:	2026      	movs	r0, #38	; 0x26
 8001838:	f000 f88b 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800183c:	2001      	movs	r0, #1
 800183e:	f000 f895 	bl	800196c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001842:	20e0      	movs	r0, #224	; 0xe0
 8001844:	f000 f885 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001848:	200f      	movs	r0, #15
 800184a:	f000 f88f 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800184e:	2029      	movs	r0, #41	; 0x29
 8001850:	f000 f88c 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001854:	2024      	movs	r0, #36	; 0x24
 8001856:	f000 f889 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800185a:	200c      	movs	r0, #12
 800185c:	f000 f886 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001860:	200e      	movs	r0, #14
 8001862:	f000 f883 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001866:	2009      	movs	r0, #9
 8001868:	f000 f880 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800186c:	204e      	movs	r0, #78	; 0x4e
 800186e:	f000 f87d 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001872:	2078      	movs	r0, #120	; 0x78
 8001874:	f000 f87a 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001878:	203c      	movs	r0, #60	; 0x3c
 800187a:	f000 f877 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800187e:	2009      	movs	r0, #9
 8001880:	f000 f874 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001884:	2013      	movs	r0, #19
 8001886:	f000 f871 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800188a:	2005      	movs	r0, #5
 800188c:	f000 f86e 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001890:	2017      	movs	r0, #23
 8001892:	f000 f86b 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001896:	2011      	movs	r0, #17
 8001898:	f000 f868 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800189c:	2000      	movs	r0, #0
 800189e:	f000 f865 	bl	800196c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80018a2:	20e1      	movs	r0, #225	; 0xe1
 80018a4:	f000 f855 	bl	8001952 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f000 f85f 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80018ae:	2016      	movs	r0, #22
 80018b0:	f000 f85c 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80018b4:	201b      	movs	r0, #27
 80018b6:	f000 f859 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80018ba:	2004      	movs	r0, #4
 80018bc:	f000 f856 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018c0:	2011      	movs	r0, #17
 80018c2:	f000 f853 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80018c6:	2007      	movs	r0, #7
 80018c8:	f000 f850 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80018cc:	2031      	movs	r0, #49	; 0x31
 80018ce:	f000 f84d 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80018d2:	2033      	movs	r0, #51	; 0x33
 80018d4:	f000 f84a 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80018d8:	2042      	movs	r0, #66	; 0x42
 80018da:	f000 f847 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018de:	2005      	movs	r0, #5
 80018e0:	f000 f844 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80018e4:	200c      	movs	r0, #12
 80018e6:	f000 f841 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80018ea:	200a      	movs	r0, #10
 80018ec:	f000 f83e 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80018f0:	2028      	movs	r0, #40	; 0x28
 80018f2:	f000 f83b 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80018f6:	202f      	movs	r0, #47	; 0x2f
 80018f8:	f000 f838 	bl	800196c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80018fc:	200f      	movs	r0, #15
 80018fe:	f000 f835 	bl	800196c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001902:	2011      	movs	r0, #17
 8001904:	f000 f825 	bl	8001952 <ili9341_WriteReg>
  LCD_Delay(200);
 8001908:	20c8      	movs	r0, #200	; 0xc8
 800190a:	f000 fc23 	bl	8002154 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800190e:	2029      	movs	r0, #41	; 0x29
 8001910:	f000 f81f 	bl	8001952 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001914:	202c      	movs	r0, #44	; 0x2c
 8001916:	f000 f81c 	bl	8001952 <ili9341_WriteReg>
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}

0800191e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001922:	f000 fb29 	bl	8001f78 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001926:	2103      	movs	r1, #3
 8001928:	20d3      	movs	r0, #211	; 0xd3
 800192a:	f000 f82c 	bl	8001986 <ili9341_ReadData>
 800192e:	4603      	mov	r3, r0
 8001930:	b29b      	uxth	r3, r3
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}

08001936 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800193a:	2029      	movs	r0, #41	; 0x29
 800193c:	f000 f809 	bl	8001952 <ili9341_WriteReg>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001948:	2028      	movs	r0, #40	; 0x28
 800194a:	f000 f802 	bl	8001952 <ili9341_WriteReg>
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}

08001952 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fba4 	bl	80020ac <LCD_IO_WriteReg>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fb75 	bl	8002068 <LCD_IO_WriteData>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	460a      	mov	r2, r1
 8001990:	80fb      	strh	r3, [r7, #6]
 8001992:	4613      	mov	r3, r2
 8001994:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001996:	797a      	ldrb	r2, [r7, #5]
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fba7 	bl	80020f0 <LCD_IO_ReadData>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80019b0:	23f0      	movs	r3, #240	; 0xf0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80019c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80019dc:	f000 fbc6 	bl	800216c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80019e6:	f107 030f 	add.w	r3, r7, #15
 80019ea:	2201      	movs	r2, #1
 80019ec:	2120      	movs	r1, #32
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fc08 	bl	8002204 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80019fe:	f107 030f 	add.w	r3, r7, #15
 8001a02:	2201      	movs	r2, #1
 8001a04:	2123      	movs	r1, #35	; 0x23
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fbfc 	bl	8002204 <GYRO_IO_Write>
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001a28:	f000 fba0 	bl	800216c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001a2c:	1dfb      	adds	r3, r7, #7
 8001a2e:	2201      	movs	r2, #1
 8001a30:	210f      	movs	r1, #15
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fc18 	bl	8002268 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001a38:	79fb      	ldrb	r3, [r7, #7]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001a48:	1dfb      	adds	r3, r7, #7
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2124      	movs	r1, #36	; 0x24
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fc0a 	bl	8002268 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	2201      	movs	r2, #1
 8001a62:	2124      	movs	r1, #36	; 0x24
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fbcd 	bl	8002204 <GYRO_IO_Write>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b084      	sub	sp, #16
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001a86:	f107 030f 	add.w	r3, r7, #15
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fbb8 	bl	8002204 <GYRO_IO_Write>
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001aae:	f107 030f 	add.w	r3, r7, #15
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2130      	movs	r1, #48	; 0x30
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fbd6 	bl	8002268 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001abc:	f107 030e 	add.w	r3, r7, #14
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2122      	movs	r1, #34	; 0x22
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 fbcf 	bl	8002268 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	121b      	asrs	r3, r3, #8
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001ae8:	7bbb      	ldrb	r3, [r7, #14]
 8001aea:	f023 0320 	bic.w	r3, r3, #32
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	7bbb      	ldrb	r3, [r7, #14]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001afe:	f107 030f 	add.w	r3, r7, #15
 8001b02:	2201      	movs	r2, #1
 8001b04:	2130      	movs	r1, #48	; 0x30
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fb7c 	bl	8002204 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001b0c:	f107 030e 	add.w	r3, r7, #14
 8001b10:	2201      	movs	r2, #1
 8001b12:	2122      	movs	r1, #34	; 0x22
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 fb75 	bl	8002204 <GYRO_IO_Write>
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b2c:	f107 030f 	add.w	r3, r7, #15
 8001b30:	2201      	movs	r2, #1
 8001b32:	2122      	movs	r1, #34	; 0x22
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fb97 	bl	8002268 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10a      	bne.n	8001b56 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e00c      	b.n	8001b70 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d109      	bne.n	8001b70 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	f023 0308 	bic.w	r3, r3, #8
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b70:	f107 030f 	add.w	r3, r7, #15
 8001b74:	2201      	movs	r2, #1
 8001b76:	2122      	movs	r1, #34	; 0x22
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fb43 	bl	8002204 <GYRO_IO_Write>
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001b90:	f107 030f 	add.w	r3, r7, #15
 8001b94:	2201      	movs	r2, #1
 8001b96:	2122      	movs	r1, #34	; 0x22
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fb65 	bl	8002268 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d107      	bne.n	8001bb4 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	e009      	b.n	8001bc8 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d106      	bne.n	8001bc8 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	f023 0308 	bic.w	r3, r3, #8
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001bc8:	f107 030f 	add.w	r3, r7, #15
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2122      	movs	r1, #34	; 0x22
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fb17 	bl	8002204 <GYRO_IO_Write>
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001be8:	f107 030f 	add.w	r3, r7, #15
 8001bec:	2201      	movs	r2, #1
 8001bee:	2121      	movs	r1, #33	; 0x21
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 fb39 	bl	8002268 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001c0a:	f107 030f 	add.w	r3, r7, #15
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2121      	movs	r1, #33	; 0x21
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 faf6 	bl	8002204 <GYRO_IO_Write>
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001c2a:	f107 030f 	add.w	r3, r7, #15
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2124      	movs	r1, #36	; 0x24
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fb18 	bl	8002268 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	f023 0310 	bic.w	r3, r3, #16
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001c4c:	f107 030f 	add.w	r3, r7, #15
 8001c50:	2201      	movs	r2, #1
 8001c52:	2124      	movs	r1, #36	; 0x24
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fad5 	bl	8002204 <GYRO_IO_Write>
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
 8001c70:	2300      	movs	r3, #0
 8001c72:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001c8c:	f107 030f 	add.w	r3, r7, #15
 8001c90:	2201      	movs	r2, #1
 8001c92:	2123      	movs	r1, #35	; 0x23
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fae7 	bl	8002268 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001c9a:	f107 0318 	add.w	r3, r7, #24
 8001c9e:	2206      	movs	r2, #6
 8001ca0:	2128      	movs	r1, #40	; 0x28
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 fae0 	bl	8002268 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d123      	bne.n	8001cfa <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
 8001cb6:	e01c      	b.n	8001cf2 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	3328      	adds	r3, #40	; 0x28
 8001cc0:	443b      	add	r3, r7
 8001cc2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	3328      	adds	r3, #40	; 0x28
 8001cd2:	443b      	add	r3, r7
 8001cd4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	3328      	adds	r3, #40	; 0x28
 8001ce6:	443b      	add	r3, r7
 8001ce8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	dddf      	ble.n	8001cb8 <L3GD20_ReadXYZAngRate+0x54>
 8001cf8:	e022      	b.n	8001d40 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
 8001cfe:	e01c      	b.n	8001d3a <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	3328      	adds	r3, #40	; 0x28
 8001d06:	443b      	add	r3, r7
 8001d08:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	3301      	adds	r3, #1
 8001d18:	3328      	adds	r3, #40	; 0x28
 8001d1a:	443b      	add	r3, r7
 8001d1c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	b21a      	sxth	r2, r3
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	3328      	adds	r3, #40	; 0x28
 8001d2e:	443b      	add	r3, r7
 8001d30:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	3301      	adds	r3, #1
 8001d38:	623b      	str	r3, [r7, #32]
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	dddf      	ble.n	8001d00 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d00c      	beq.n	8001d64 <L3GD20_ReadXYZAngRate+0x100>
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	dc0d      	bgt.n	8001d6a <L3GD20_ReadXYZAngRate+0x106>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <L3GD20_ReadXYZAngRate+0xf4>
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d003      	beq.n	8001d5e <L3GD20_ReadXYZAngRate+0xfa>
 8001d56:	e008      	b.n	8001d6a <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <L3GD20_ReadXYZAngRate+0x14c>)
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001d5c:	e005      	b.n	8001d6a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <L3GD20_ReadXYZAngRate+0x150>)
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001d62:	e002      	b.n	8001d6a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <L3GD20_ReadXYZAngRate+0x154>)
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001d68:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	e016      	b.n	8001d9e <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	3328      	adds	r3, #40	; 0x28
 8001d76:	443b      	add	r3, r7
 8001d78:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d94:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	623b      	str	r3, [r7, #32]
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	dde5      	ble.n	8001d70 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3728      	adds	r7, #40	; 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	410c0000 	.word	0x410c0000
 8001db4:	418c0000 	.word	0x418c0000
 8001db8:	428c0000 	.word	0x428c0000

08001dbc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001dc0:	4819      	ldr	r0, [pc, #100]	; (8001e28 <SPIx_Init+0x6c>)
 8001dc2:	f005 fcf8 	bl	80077b6 <HAL_SPI_GetState>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d12b      	bne.n	8001e24 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <SPIx_Init+0x6c>)
 8001dce:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <SPIx_Init+0x70>)
 8001dd0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <SPIx_Init+0x6c>)
 8001dd4:	2218      	movs	r2, #24
 8001dd6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <SPIx_Init+0x6c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <SPIx_Init+0x6c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <SPIx_Init+0x6c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <SPIx_Init+0x6c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <SPIx_Init+0x6c>)
 8001df2:	2207      	movs	r2, #7
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <SPIx_Init+0x6c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <SPIx_Init+0x6c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <SPIx_Init+0x6c>)
 8001e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e08:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <SPIx_Init+0x6c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SPIx_Init+0x6c>)
 8001e12:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e16:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <SPIx_Init+0x6c>)
 8001e1a:	f000 f873 	bl	8001f04 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001e1e:	4802      	ldr	r0, [pc, #8]	; (8001e28 <SPIx_Init+0x6c>)
 8001e20:	f005 f829 	bl	8006e76 <HAL_SPI_Init>
  } 
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000420 	.word	0x20000420
 8001e2c:	40015000 	.word	0x40015000

08001e30 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <SPIx_Read+0x38>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f107 0108 	add.w	r1, r7, #8
 8001e4a:	4808      	ldr	r0, [pc, #32]	; (8001e6c <SPIx_Read+0x3c>)
 8001e4c:	f005 fa00 	bl	8007250 <HAL_SPI_Receive>
 8001e50:	4603      	mov	r3, r0
 8001e52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001e5a:	f000 f847 	bl	8001eec <SPIx_Error>
  }
  
  return readvalue;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000070 	.word	0x20000070
 8001e6c:	20000420 	.word	0x20000420

08001e70 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <SPIx_Write+0x34>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	1db9      	adds	r1, r7, #6
 8001e84:	2201      	movs	r2, #1
 8001e86:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <SPIx_Write+0x38>)
 8001e88:	f005 f8a6 	bl	8006fd8 <HAL_SPI_Transmit>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001e96:	f000 f829 	bl	8001eec <SPIx_Error>
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000070 	.word	0x20000070
 8001ea8:	20000420 	.word	0x20000420

08001eac <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <SPIx_WriteRead+0x38>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f107 020f 	add.w	r2, r7, #15
 8001ec2:	1df9      	adds	r1, r7, #7
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <SPIx_WriteRead+0x3c>)
 8001eca:	f005 fad2 	bl	8007472 <HAL_SPI_TransmitReceive>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001ed4:	f000 f80a 	bl	8001eec <SPIx_Error>
  }
  
  return receivedbyte;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000070 	.word	0x20000070
 8001ee8:	20000420 	.word	0x20000420

08001eec <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <SPIx_Error+0x14>)
 8001ef2:	f005 f849 	bl	8006f88 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001ef6:	f7ff ff61 	bl	8001dbc <SPIx_Init>
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000420 	.word	0x20000420

08001f04 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <SPIx_MspInit+0x6c>)
 8001f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f14:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <SPIx_MspInit+0x6c>)
 8001f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f1a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <SPIx_MspInit+0x6c>)
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <SPIx_MspInit+0x6c>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <SPIx_MspInit+0x6c>)
 8001f32:	f043 0320 	orr.w	r3, r3, #32
 8001f36:	6313      	str	r3, [r2, #48]	; 0x30
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <SPIx_MspInit+0x6c>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001f44:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001f52:	2301      	movs	r3, #1
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001f56:	2305      	movs	r3, #5
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <SPIx_MspInit+0x70>)
 8001f62:	f001 fe71 	bl	8003c48 <HAL_GPIO_Init>
}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	; 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40021400 	.word	0x40021400

08001f78 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001f7e:	4b36      	ldr	r3, [pc, #216]	; (8002058 <LCD_IO_Init+0xe0>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d164      	bne.n	8002050 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001f86:	4b34      	ldr	r3, [pc, #208]	; (8002058 <LCD_IO_Init+0xe0>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	4b32      	ldr	r3, [pc, #200]	; (800205c <LCD_IO_Init+0xe4>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	4a31      	ldr	r2, [pc, #196]	; (800205c <LCD_IO_Init+0xe4>)
 8001f96:	f043 0308 	orr.w	r3, r3, #8
 8001f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	; (800205c <LCD_IO_Init+0xe4>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4827      	ldr	r0, [pc, #156]	; (8002060 <LCD_IO_Init+0xe8>)
 8001fc2:	f001 fe41 	bl	8003c48 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <LCD_IO_Init+0xe4>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a23      	ldr	r2, [pc, #140]	; (800205c <LCD_IO_Init+0xe4>)
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <LCD_IO_Init+0xe4>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4819      	ldr	r0, [pc, #100]	; (8002060 <LCD_IO_Init+0xe8>)
 8001ffc:	f001 fe24 	bl	8003c48 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002000:	2300      	movs	r3, #0
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <LCD_IO_Init+0xe4>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <LCD_IO_Init+0xe4>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	6313      	str	r3, [r2, #48]	; 0x30
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <LCD_IO_Init+0xe4>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800201c:	2304      	movs	r3, #4
 800201e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002020:	2301      	movs	r3, #1
 8002022:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002028:	2302      	movs	r3, #2
 800202a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4619      	mov	r1, r3
 8002032:	480c      	ldr	r0, [pc, #48]	; (8002064 <LCD_IO_Init+0xec>)
 8002034:	f001 fe08 	bl	8003c48 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002038:	2200      	movs	r2, #0
 800203a:	2104      	movs	r1, #4
 800203c:	4809      	ldr	r0, [pc, #36]	; (8002064 <LCD_IO_Init+0xec>)
 800203e:	f002 f8bb 	bl	80041b8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002042:	2201      	movs	r2, #1
 8002044:	2104      	movs	r1, #4
 8002046:	4807      	ldr	r0, [pc, #28]	; (8002064 <LCD_IO_Init+0xec>)
 8002048:	f002 f8b6 	bl	80041b8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800204c:	f7ff feb6 	bl	8001dbc <SPIx_Init>
  }
}
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000478 	.word	0x20000478
 800205c:	40023800 	.word	0x40023800
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40020800 	.word	0x40020800

08002068 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002072:	2201      	movs	r2, #1
 8002074:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002078:	480a      	ldr	r0, [pc, #40]	; (80020a4 <LCD_IO_WriteData+0x3c>)
 800207a:	f002 f89d 	bl	80041b8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800207e:	2200      	movs	r2, #0
 8002080:	2104      	movs	r1, #4
 8002082:	4809      	ldr	r0, [pc, #36]	; (80020a8 <LCD_IO_WriteData+0x40>)
 8002084:	f002 f898 	bl	80041b8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fef0 	bl	8001e70 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002090:	2201      	movs	r2, #1
 8002092:	2104      	movs	r1, #4
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <LCD_IO_WriteData+0x40>)
 8002096:	f002 f88f 	bl	80041b8 <HAL_GPIO_WritePin>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40020c00 	.word	0x40020c00
 80020a8:	40020800 	.word	0x40020800

080020ac <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80020b6:	2200      	movs	r2, #0
 80020b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020bc:	480a      	ldr	r0, [pc, #40]	; (80020e8 <LCD_IO_WriteReg+0x3c>)
 80020be:	f002 f87b 	bl	80041b8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80020c2:	2200      	movs	r2, #0
 80020c4:	2104      	movs	r1, #4
 80020c6:	4809      	ldr	r0, [pc, #36]	; (80020ec <LCD_IO_WriteReg+0x40>)
 80020c8:	f002 f876 	bl	80041b8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fecd 	bl	8001e70 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80020d6:	2201      	movs	r2, #1
 80020d8:	2104      	movs	r1, #4
 80020da:	4804      	ldr	r0, [pc, #16]	; (80020ec <LCD_IO_WriteReg+0x40>)
 80020dc:	f002 f86c 	bl	80041b8 <HAL_GPIO_WritePin>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40020800 	.word	0x40020800

080020f0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	460a      	mov	r2, r1
 80020fa:	80fb      	strh	r3, [r7, #6]
 80020fc:	4613      	mov	r3, r2
 80020fe:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002104:	2200      	movs	r2, #0
 8002106:	2104      	movs	r1, #4
 8002108:	4810      	ldr	r0, [pc, #64]	; (800214c <LCD_IO_ReadData+0x5c>)
 800210a:	f002 f855 	bl	80041b8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002114:	480e      	ldr	r0, [pc, #56]	; (8002150 <LCD_IO_ReadData+0x60>)
 8002116:	f002 f84f 	bl	80041b8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fea7 	bl	8001e70 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002122:	797b      	ldrb	r3, [r7, #5]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fe83 	bl	8001e30 <SPIx_Read>
 800212a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002132:	4807      	ldr	r0, [pc, #28]	; (8002150 <LCD_IO_ReadData+0x60>)
 8002134:	f002 f840 	bl	80041b8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002138:	2201      	movs	r2, #1
 800213a:	2104      	movs	r1, #4
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <LCD_IO_ReadData+0x5c>)
 800213e:	f002 f83b 	bl	80041b8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40020800 	.word	0x40020800
 8002150:	40020c00 	.word	0x40020c00

08002154 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 ffe9 	bl	8003134 <HAL_Delay>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <GYRO_IO_Init+0x8c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <GYRO_IO_Init+0x8c>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <GYRO_IO_Init+0x8c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800218e:	2302      	movs	r3, #2
 8002190:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002192:	2301      	movs	r3, #1
 8002194:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800219a:	2301      	movs	r3, #1
 800219c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	4619      	mov	r1, r3
 80021a4:	4815      	ldr	r0, [pc, #84]	; (80021fc <GYRO_IO_Init+0x90>)
 80021a6:	f001 fd4f 	bl	8003c48 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80021aa:	2201      	movs	r2, #1
 80021ac:	2102      	movs	r1, #2
 80021ae:	4813      	ldr	r0, [pc, #76]	; (80021fc <GYRO_IO_Init+0x90>)
 80021b0:	f002 f802 	bl	80041b8 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <GYRO_IO_Init+0x8c>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <GYRO_IO_Init+0x8c>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6313      	str	r3, [r2, #48]	; 0x30
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <GYRO_IO_Init+0x8c>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80021d0:	2306      	movs	r3, #6
 80021d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80021d8:	2302      	movs	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	4619      	mov	r1, r3
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <GYRO_IO_Init+0x94>)
 80021e8:	f001 fd2e 	bl	8003c48 <HAL_GPIO_Init>

  SPIx_Init();
 80021ec:	f7ff fde6 	bl	8001dbc <SPIx_Init>
}
 80021f0:	bf00      	nop
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020000 	.word	0x40020000

08002204 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
 8002210:	4613      	mov	r3, r2
 8002212:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002214:	883b      	ldrh	r3, [r7, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d903      	bls.n	8002222 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002220:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002222:	2200      	movs	r2, #0
 8002224:	2102      	movs	r1, #2
 8002226:	480f      	ldr	r0, [pc, #60]	; (8002264 <GYRO_IO_Write+0x60>)
 8002228:	f001 ffc6 	bl	80041b8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fe3c 	bl	8001eac <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002234:	e00a      	b.n	800224c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fe36 	bl	8001eac <SPIx_WriteRead>
    NumByteToWrite--;
 8002240:	883b      	ldrh	r3, [r7, #0]
 8002242:	3b01      	subs	r3, #1
 8002244:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3301      	adds	r3, #1
 800224a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800224c:	883b      	ldrh	r3, [r7, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f1      	bne.n	8002236 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002252:	2201      	movs	r2, #1
 8002254:	2102      	movs	r1, #2
 8002256:	4803      	ldr	r0, [pc, #12]	; (8002264 <GYRO_IO_Write+0x60>)
 8002258:	f001 ffae 	bl	80041b8 <HAL_GPIO_WritePin>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40020800 	.word	0x40020800

08002268 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
 8002274:	4613      	mov	r3, r2
 8002276:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002278:	883b      	ldrh	r3, [r7, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d904      	bls.n	8002288 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002284:	70fb      	strb	r3, [r7, #3]
 8002286:	e003      	b.n	8002290 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800228e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002290:	2200      	movs	r2, #0
 8002292:	2102      	movs	r1, #2
 8002294:	4810      	ldr	r0, [pc, #64]	; (80022d8 <GYRO_IO_Read+0x70>)
 8002296:	f001 ff8f 	bl	80041b8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fe05 	bl	8001eac <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80022a2:	e00c      	b.n	80022be <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff fe01 	bl	8001eac <SPIx_WriteRead>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80022b2:	883b      	ldrh	r3, [r7, #0]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3301      	adds	r3, #1
 80022bc:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80022be:	883b      	ldrh	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ef      	bne.n	80022a4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80022c4:	2201      	movs	r2, #1
 80022c6:	2102      	movs	r1, #2
 80022c8:	4803      	ldr	r0, [pc, #12]	; (80022d8 <GYRO_IO_Read+0x70>)
 80022ca:	f001 ff75 	bl	80041b8 <HAL_GPIO_WritePin>
}  
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40020800 	.word	0x40020800

080022dc <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80022e6:	2300      	movs	r3, #0
 80022e8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80022ea:	2300      	movs	r3, #0
 80022ec:	703b      	strb	r3, [r7, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80022f2:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <BSP_GYRO_Init+0xc4>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	4798      	blx	r3
 80022f8:	4603      	mov	r3, r0
 80022fa:	2bd4      	cmp	r3, #212	; 0xd4
 80022fc:	d005      	beq.n	800230a <BSP_GYRO_Init+0x2e>
 80022fe:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <BSP_GYRO_Init+0xc4>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4798      	blx	r3
 8002304:	4603      	mov	r3, r0
 8002306:	2bd5      	cmp	r3, #213	; 0xd5
 8002308:	d145      	bne.n	8002396 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800230a:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <BSP_GYRO_Init+0xc8>)
 800230c:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <BSP_GYRO_Init+0xc4>)
 800230e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002310:	2308      	movs	r3, #8
 8002312:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002314:	2300      	movs	r3, #0
 8002316:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002318:	2307      	movs	r3, #7
 800231a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 800231c:	2330      	movs	r3, #48	; 0x30
 800231e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002320:	2300      	movs	r3, #0
 8002322:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002324:	2300      	movs	r3, #0
 8002326:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002328:	2310      	movs	r3, #16
 800232a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800232c:	793a      	ldrb	r2, [r7, #4]
 800232e:	797b      	ldrb	r3, [r7, #5]
 8002330:	4313      	orrs	r3, r2
 8002332:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002334:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002336:	4313      	orrs	r3, r2
 8002338:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800233a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800233c:	4313      	orrs	r3, r2
 800233e:	b2db      	uxtb	r3, r3
 8002340:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002342:	7a3a      	ldrb	r2, [r7, #8]
 8002344:	7a7b      	ldrb	r3, [r7, #9]
 8002346:	4313      	orrs	r3, r2
 8002348:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800234a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800234c:	4313      	orrs	r3, r2
 800234e:	b2db      	uxtb	r3, r3
 8002350:	b29b      	uxth	r3, r3
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b29a      	uxth	r2, r3
 8002356:	89bb      	ldrh	r3, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <BSP_GYRO_Init+0xc8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	89ba      	ldrh	r2, [r7, #12]
 8002364:	4610      	mov	r0, r2
 8002366:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002368:	2300      	movs	r3, #0
 800236a:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 800236c:	2300      	movs	r3, #0
 800236e:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002370:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002372:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002374:	4313      	orrs	r3, r2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <BSP_GYRO_Init+0xc8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	89ba      	ldrh	r2, [r7, #12]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	4610      	mov	r0, r2
 8002386:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <BSP_GYRO_Init+0xc8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	2010      	movs	r0, #16
 8002390:	4798      	blx	r3

    ret = GYRO_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	2000003c 	.word	0x2000003c
 80023a4:	2000047c 	.word	0x2000047c

080023a8 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <BSP_GYRO_GetXYZ+0x24>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <BSP_GYRO_GetXYZ+0x24>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
  }
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	2000047c 	.word	0x2000047c

080023d0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <BSP_LCD_Init+0xbc>)
 80023d6:	4a2e      	ldr	r2, [pc, #184]	; (8002490 <BSP_LCD_Init+0xc0>)
 80023d8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80023da:	4b2c      	ldr	r3, [pc, #176]	; (800248c <BSP_LCD_Init+0xbc>)
 80023dc:	2209      	movs	r2, #9
 80023de:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80023e0:	4b2a      	ldr	r3, [pc, #168]	; (800248c <BSP_LCD_Init+0xbc>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <BSP_LCD_Init+0xbc>)
 80023e8:	221d      	movs	r2, #29
 80023ea:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <BSP_LCD_Init+0xbc>)
 80023ee:	2203      	movs	r2, #3
 80023f0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <BSP_LCD_Init+0xbc>)
 80023f4:	f240 120d 	movw	r2, #269	; 0x10d
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <BSP_LCD_Init+0xbc>)
 80023fc:	f240 1243 	movw	r2, #323	; 0x143
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <BSP_LCD_Init+0xbc>)
 8002404:	f240 1217 	movw	r2, #279	; 0x117
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <BSP_LCD_Init+0xbc>)
 800240c:	f240 1247 	movw	r2, #327	; 0x147
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <BSP_LCD_Init+0xbc>)
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <BSP_LCD_Init+0xbc>)
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002422:	4b1a      	ldr	r3, [pc, #104]	; (800248c <BSP_LCD_Init+0xbc>)
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <BSP_LCD_Init+0xc4>)
 800242c:	2208      	movs	r2, #8
 800242e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002430:	4b18      	ldr	r3, [pc, #96]	; (8002494 <BSP_LCD_Init+0xc4>)
 8002432:	22c0      	movs	r2, #192	; 0xc0
 8002434:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <BSP_LCD_Init+0xc4>)
 8002438:	2204      	movs	r2, #4
 800243a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <BSP_LCD_Init+0xc4>)
 800243e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002442:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002444:	4813      	ldr	r0, [pc, #76]	; (8002494 <BSP_LCD_Init+0xc4>)
 8002446:	f004 fabb 	bl	80069c0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <BSP_LCD_Init+0xbc>)
 800244c:	2200      	movs	r2, #0
 800244e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <BSP_LCD_Init+0xbc>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <BSP_LCD_Init+0xbc>)
 8002458:	2200      	movs	r2, #0
 800245a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <BSP_LCD_Init+0xbc>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002462:	f000 faf7 	bl	8002a54 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002466:	4809      	ldr	r0, [pc, #36]	; (800248c <BSP_LCD_Init+0xbc>)
 8002468:	f002 f880 	bl	800456c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <BSP_LCD_Init+0xc8>)
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <BSP_LCD_Init+0xcc>)
 8002470:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <BSP_LCD_Init+0xc8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800247a:	f000 fc1f 	bl	8002cbc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800247e:	4808      	ldr	r0, [pc, #32]	; (80024a0 <BSP_LCD_Init+0xd0>)
 8002480:	f000 f8ce 	bl	8002620 <BSP_LCD_SetFont>

  return LCD_OK;
 8002484:	2300      	movs	r3, #0
}  
 8002486:	4618      	mov	r0, r3
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000480 	.word	0x20000480
 8002490:	40016800 	.word	0x40016800
 8002494:	20000568 	.word	0x20000568
 8002498:	200005b4 	.word	0x200005b4
 800249c:	20000004 	.word	0x20000004
 80024a0:	20000074 	.word	0x20000074

080024a4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <BSP_LCD_GetXSize+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	4798      	blx	r3
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200005b4 	.word	0x200005b4

080024bc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <BSP_LCD_GetYSize+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	4798      	blx	r3
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200005b4 	.word	0x200005b4

080024d4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b090      	sub	sp, #64	; 0x40
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80024e4:	f7ff ffde 	bl	80024a4 <BSP_LCD_GetXSize>
 80024e8:	4603      	mov	r3, r0
 80024ea:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80024f0:	f7ff ffe4 	bl	80024bc <BSP_LCD_GetYSize>
 80024f4:	4603      	mov	r3, r0
 80024f6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002500:	23ff      	movs	r3, #255	; 0xff
 8002502:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800251a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002520:	2307      	movs	r3, #7
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002524:	f7ff ffbe 	bl	80024a4 <BSP_LCD_GetXSize>
 8002528:	4603      	mov	r3, r0
 800252a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800252c:	f7ff ffc6 	bl	80024bc <BSP_LCD_GetYSize>
 8002530:	4603      	mov	r3, r0
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	f107 030c 	add.w	r3, r7, #12
 800253a:	4619      	mov	r1, r3
 800253c:	4814      	ldr	r0, [pc, #80]	; (8002590 <BSP_LCD_LayerDefaultInit+0xbc>)
 800253e:	f002 f8ef 	bl	8004720 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002542:	88fa      	ldrh	r2, [r7, #6]
 8002544:	4913      	ldr	r1, [pc, #76]	; (8002594 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	3304      	adds	r3, #4
 8002552:	f04f 32ff 	mov.w	r2, #4294967295
 8002556:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	490e      	ldr	r1, [pc, #56]	; (8002594 <BSP_LCD_LayerDefaultInit+0xc0>)
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3308      	adds	r3, #8
 8002568:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <BSP_LCD_LayerDefaultInit+0xc4>)
 800256a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800256c:	88fa      	ldrh	r2, [r7, #6]
 800256e:	4909      	ldr	r1, [pc, #36]	; (8002594 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800257e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002582:	f002 f90b 	bl	800479c <HAL_LTDC_EnableDither>
}
 8002586:	bf00      	nop
 8002588:	3740      	adds	r7, #64	; 0x40
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000480 	.word	0x20000480
 8002594:	2000059c 	.word	0x2000059c
 8002598:	20000074 	.word	0x20000074

0800259c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <BSP_LCD_SelectLayer+0x1c>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000598 	.word	0x20000598

080025bc <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <BSP_LCD_SetTextColor+0x28>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <BSP_LCD_SetTextColor+0x2c>)
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	601a      	str	r2, [r3, #0]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	20000598 	.word	0x20000598
 80025e8:	2000059c 	.word	0x2000059c

080025ec <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <BSP_LCD_SetBackColor+0x2c>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4908      	ldr	r1, [pc, #32]	; (800261c <BSP_LCD_SetBackColor+0x30>)
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3304      	adds	r3, #4
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	601a      	str	r2, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000598 	.word	0x20000598
 800261c:	2000059c 	.word	0x2000059c

08002620 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <BSP_LCD_SetFont+0x2c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4908      	ldr	r1, [pc, #32]	; (8002650 <BSP_LCD_SetFont+0x30>)
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3308      	adds	r3, #8
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	601a      	str	r2, [r3, #0]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000598 	.word	0x20000598
 8002650:	2000059c 	.word	0x2000059c

08002654 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002656:	b085      	sub	sp, #20
 8002658:	af02      	add	r7, sp, #8
 800265a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <BSP_LCD_Clear+0x48>)
 800265e:	681c      	ldr	r4, [r3, #0]
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <BSP_LCD_Clear+0x48>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <BSP_LCD_Clear+0x4c>)
 8002666:	2134      	movs	r1, #52	; 0x34
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	335c      	adds	r3, #92	; 0x5c
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461e      	mov	r6, r3
 8002674:	f7ff ff16 	bl	80024a4 <BSP_LCD_GetXSize>
 8002678:	4605      	mov	r5, r0
 800267a:	f7ff ff1f 	bl	80024bc <BSP_LCD_GetYSize>
 800267e:	4602      	mov	r2, r0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	2300      	movs	r3, #0
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	462a      	mov	r2, r5
 800268c:	4631      	mov	r1, r6
 800268e:	4620      	mov	r0, r4
 8002690:	f000 fadc 	bl	8002c4c <FillBuffer>
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800269c:	20000598 	.word	0x20000598
 80026a0:	20000480 	.word	0x20000480

080026a4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	4603      	mov	r3, r0
 80026ac:	80fb      	strh	r3, [r7, #6]
 80026ae:	460b      	mov	r3, r1
 80026b0:	80bb      	strh	r3, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <BSP_LCD_DrawHLine+0x70>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a16      	ldr	r2, [pc, #88]	; (8002718 <BSP_LCD_DrawHLine+0x74>)
 80026c0:	2134      	movs	r1, #52	; 0x34
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	335c      	adds	r3, #92	; 0x5c
 80026ca:	681c      	ldr	r4, [r3, #0]
 80026cc:	f7ff feea 	bl	80024a4 <BSP_LCD_GetXSize>
 80026d0:	4602      	mov	r2, r0
 80026d2:	88bb      	ldrh	r3, [r7, #4]
 80026d4:	fb03 f202 	mul.w	r2, r3, r2
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4423      	add	r3, r4
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <BSP_LCD_DrawHLine+0x70>)
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	68f9      	ldr	r1, [r7, #12]
 80026e8:	887c      	ldrh	r4, [r7, #2]
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <BSP_LCD_DrawHLine+0x70>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4d0b      	ldr	r5, [pc, #44]	; (800271c <BSP_LCD_DrawHLine+0x78>)
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	442b      	add	r3, r5
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	2300      	movs	r3, #0
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2301      	movs	r3, #1
 8002704:	4622      	mov	r2, r4
 8002706:	f000 faa1 	bl	8002c4c <FillBuffer>
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bdb0      	pop	{r4, r5, r7, pc}
 8002712:	bf00      	nop
 8002714:	20000598 	.word	0x20000598
 8002718:	20000480 	.word	0x20000480
 800271c:	2000059c 	.word	0x2000059c

08002720 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
 800272a:	460b      	mov	r3, r1
 800272c:	80bb      	strh	r3, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	f1c3 0303 	rsb	r3, r3, #3
 800273a:	617b      	str	r3, [r7, #20]
  curx = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002740:	887b      	ldrh	r3, [r7, #2]
 8002742:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002744:	e0c7      	b.n	80028d6 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	b29a      	uxth	r2, r3
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	4413      	add	r3, r2
 800274e:	b298      	uxth	r0, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	b29b      	uxth	r3, r3
 8002754:	88ba      	ldrh	r2, [r7, #4]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	b299      	uxth	r1, r3
 800275a:	4b64      	ldr	r3, [pc, #400]	; (80028ec <BSP_LCD_DrawCircle+0x1cc>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4c64      	ldr	r4, [pc, #400]	; (80028f0 <BSP_LCD_DrawCircle+0x1d0>)
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4423      	add	r3, r4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	f000 fa47 	bl	8002c00 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	b29b      	uxth	r3, r3
 8002776:	88fa      	ldrh	r2, [r7, #6]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	b298      	uxth	r0, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	b29b      	uxth	r3, r3
 8002780:	88ba      	ldrh	r2, [r7, #4]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	b299      	uxth	r1, r3
 8002786:	4b59      	ldr	r3, [pc, #356]	; (80028ec <BSP_LCD_DrawCircle+0x1cc>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4c59      	ldr	r4, [pc, #356]	; (80028f0 <BSP_LCD_DrawCircle+0x1d0>)
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4423      	add	r3, r4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	f000 fa31 	bl	8002c00 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	4413      	add	r3, r2
 80027a6:	b298      	uxth	r0, r3
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	88ba      	ldrh	r2, [r7, #4]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	b299      	uxth	r1, r3
 80027b2:	4b4e      	ldr	r3, [pc, #312]	; (80028ec <BSP_LCD_DrawCircle+0x1cc>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4c4e      	ldr	r4, [pc, #312]	; (80028f0 <BSP_LCD_DrawCircle+0x1d0>)
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4423      	add	r3, r4
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	f000 fa1b 	bl	8002c00 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	88fa      	ldrh	r2, [r7, #6]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	b298      	uxth	r0, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	88ba      	ldrh	r2, [r7, #4]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	b299      	uxth	r1, r3
 80027de:	4b43      	ldr	r3, [pc, #268]	; (80028ec <BSP_LCD_DrawCircle+0x1cc>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4c43      	ldr	r4, [pc, #268]	; (80028f0 <BSP_LCD_DrawCircle+0x1d0>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4423      	add	r3, r4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	f000 fa05 	bl	8002c00 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	4413      	add	r3, r2
 80027fe:	b298      	uxth	r0, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	b29a      	uxth	r2, r3
 8002804:	88bb      	ldrh	r3, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	b299      	uxth	r1, r3
 800280a:	4b38      	ldr	r3, [pc, #224]	; (80028ec <BSP_LCD_DrawCircle+0x1cc>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4c38      	ldr	r4, [pc, #224]	; (80028f0 <BSP_LCD_DrawCircle+0x1d0>)
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4423      	add	r3, r4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	f000 f9ef 	bl	8002c00 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	b29b      	uxth	r3, r3
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	b298      	uxth	r0, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	b29a      	uxth	r2, r3
 8002830:	88bb      	ldrh	r3, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	b299      	uxth	r1, r3
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <BSP_LCD_DrawCircle+0x1cc>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4c2d      	ldr	r4, [pc, #180]	; (80028f0 <BSP_LCD_DrawCircle+0x1d0>)
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4423      	add	r3, r4
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	f000 f9d9 	bl	8002c00 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	b29a      	uxth	r2, r3
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	4413      	add	r3, r2
 8002856:	b298      	uxth	r0, r3
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	b29a      	uxth	r2, r3
 800285c:	88bb      	ldrh	r3, [r7, #4]
 800285e:	4413      	add	r3, r2
 8002860:	b299      	uxth	r1, r3
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <BSP_LCD_DrawCircle+0x1cc>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4c22      	ldr	r4, [pc, #136]	; (80028f0 <BSP_LCD_DrawCircle+0x1d0>)
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4423      	add	r3, r4
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	f000 f9c3 	bl	8002c00 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	b29b      	uxth	r3, r3
 800287e:	88fa      	ldrh	r2, [r7, #6]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	b298      	uxth	r0, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	b29a      	uxth	r2, r3
 8002888:	88bb      	ldrh	r3, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	b299      	uxth	r1, r3
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <BSP_LCD_DrawCircle+0x1cc>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4c17      	ldr	r4, [pc, #92]	; (80028f0 <BSP_LCD_DrawCircle+0x1d0>)
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4423      	add	r3, r4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	f000 f9ad 	bl	8002c00 <BSP_LCD_DrawPixel>

    if (d < 0)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	da06      	bge.n	80028ba <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	009a      	lsls	r2, r3, #2
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	4413      	add	r3, r2
 80028b4:	3306      	adds	r3, #6
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e00a      	b.n	80028d0 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	009a      	lsls	r2, r3, #2
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	4413      	add	r3, r2
 80028c6:	330a      	adds	r3, #10
 80028c8:	617b      	str	r3, [r7, #20]
      cury--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	3301      	adds	r3, #1
 80028d4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	429a      	cmp	r2, r3
 80028dc:	f67f af33 	bls.w	8002746 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd90      	pop	{r4, r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000598 	.word	0x20000598
 80028f0:	2000059c 	.word	0x2000059c

080028f4 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
 80028fe:	460b      	mov	r3, r1
 8002900:	80bb      	strh	r3, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	f1c3 0303 	rsb	r3, r3, #3
 800290e:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002914:	887b      	ldrh	r3, [r7, #2]
 8002916:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002918:	4b44      	ldr	r3, [pc, #272]	; (8002a2c <BSP_LCD_FillCircle+0x138>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4944      	ldr	r1, [pc, #272]	; (8002a30 <BSP_LCD_FillCircle+0x13c>)
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fe46 	bl	80025bc <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002930:	e061      	b.n	80029f6 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d021      	beq.n	800297c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	b29b      	uxth	r3, r3
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	b298      	uxth	r0, r3
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	b29a      	uxth	r2, r3
 8002946:	88bb      	ldrh	r3, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	b299      	uxth	r1, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	b29b      	uxth	r3, r3
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	f7ff fea5 	bl	80026a4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	b29b      	uxth	r3, r3
 800295e:	88fa      	ldrh	r2, [r7, #6]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	b298      	uxth	r0, r3
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	b29b      	uxth	r3, r3
 8002968:	88ba      	ldrh	r2, [r7, #4]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	b299      	uxth	r1, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	b29b      	uxth	r3, r3
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	b29b      	uxth	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	f7ff fe94 	bl	80026a4 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d021      	beq.n	80029c6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	b29b      	uxth	r3, r3
 8002986:	88fa      	ldrh	r2, [r7, #6]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	b298      	uxth	r0, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	b29b      	uxth	r3, r3
 8002990:	88ba      	ldrh	r2, [r7, #4]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	b299      	uxth	r1, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	b29b      	uxth	r3, r3
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	b29b      	uxth	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	f7ff fe80 	bl	80026a4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	b298      	uxth	r0, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	88bb      	ldrh	r3, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	b299      	uxth	r1, r3
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	f7ff fe6f 	bl	80026a4 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da06      	bge.n	80029da <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	009a      	lsls	r2, r3, #2
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	4413      	add	r3, r2
 80029d4:	3306      	adds	r3, #6
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e00a      	b.n	80029f0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	009a      	lsls	r2, r3, #2
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	4413      	add	r3, r2
 80029e6:	330a      	adds	r3, #10
 80029e8:	617b      	str	r3, [r7, #20]
      cury--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	3301      	adds	r3, #1
 80029f4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d999      	bls.n	8002932 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <BSP_LCD_FillCircle+0x138>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	490b      	ldr	r1, [pc, #44]	; (8002a30 <BSP_LCD_FillCircle+0x13c>)
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fdd3 	bl	80025bc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	88b9      	ldrh	r1, [r7, #4]
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fe7f 	bl	8002720 <BSP_LCD_DrawCircle>
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000598 	.word	0x20000598
 8002a30:	2000059c 	.word	0x2000059c

08002a34 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <BSP_LCD_DisplayOn+0x1c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002a42:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <BSP_LCD_DisplayOn+0x1c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4798      	blx	r3
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200005b4 	.word	0x200005b4

08002a54 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08e      	sub	sp, #56	; 0x38
 8002a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	4b61      	ldr	r3, [pc, #388]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4a60      	ldr	r2, [pc, #384]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002a64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a68:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6a:	4b5e      	ldr	r3, [pc, #376]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	4b5a      	ldr	r3, [pc, #360]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a59      	ldr	r2, [pc, #356]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002a80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b57      	ldr	r3, [pc, #348]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a4b      	ldr	r2, [pc, #300]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b49      	ldr	r3, [pc, #292]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	4b45      	ldr	r3, [pc, #276]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a44      	ldr	r2, [pc, #272]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b42      	ldr	r3, [pc, #264]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a3d      	ldr	r2, [pc, #244]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002af0:	f043 0308 	orr.w	r3, r3, #8
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a36      	ldr	r2, [pc, #216]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002b0c:	f043 0320 	orr.w	r3, r3, #32
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a2f      	ldr	r2, [pc, #188]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <BSP_LCD_MspInit+0x190>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002b3a:	f641 0358 	movw	r3, #6232	; 0x1858
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002b4c:	230e      	movs	r3, #14
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b54:	4619      	mov	r1, r3
 8002b56:	4824      	ldr	r0, [pc, #144]	; (8002be8 <BSP_LCD_MspInit+0x194>)
 8002b58:	f001 f876 	bl	8003c48 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002b5c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b66:	4619      	mov	r1, r3
 8002b68:	4820      	ldr	r0, [pc, #128]	; (8002bec <BSP_LCD_MspInit+0x198>)
 8002b6a:	f001 f86d 	bl	8003c48 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002b6e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	4619      	mov	r1, r3
 8002b7a:	481d      	ldr	r0, [pc, #116]	; (8002bf0 <BSP_LCD_MspInit+0x19c>)
 8002b7c:	f001 f864 	bl	8003c48 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002b80:	2348      	movs	r3, #72	; 0x48
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b88:	4619      	mov	r1, r3
 8002b8a:	481a      	ldr	r0, [pc, #104]	; (8002bf4 <BSP_LCD_MspInit+0x1a0>)
 8002b8c:	f001 f85c 	bl	8003c48 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4816      	ldr	r0, [pc, #88]	; (8002bf8 <BSP_LCD_MspInit+0x1a4>)
 8002b9e:	f001 f853 	bl	8003c48 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002ba2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bac:	4619      	mov	r1, r3
 8002bae:	4813      	ldr	r0, [pc, #76]	; (8002bfc <BSP_LCD_MspInit+0x1a8>)
 8002bb0:	f001 f84a 	bl	8003c48 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002bb8:	2309      	movs	r3, #9
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480a      	ldr	r0, [pc, #40]	; (8002bec <BSP_LCD_MspInit+0x198>)
 8002bc4:	f001 f840 	bl	8003c48 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4809      	ldr	r0, [pc, #36]	; (8002bfc <BSP_LCD_MspInit+0x1a8>)
 8002bd6:	f001 f837 	bl	8003c48 <HAL_GPIO_Init>
}
 8002bda:	bf00      	nop
 8002bdc:	3738      	adds	r7, #56	; 0x38
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40020800 	.word	0x40020800
 8002bf4:	40020c00 	.word	0x40020c00
 8002bf8:	40021400 	.word	0x40021400
 8002bfc:	40021800 	.word	0x40021800

08002c00 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002c00:	b5b0      	push	{r4, r5, r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	603a      	str	r2, [r7, #0]
 8002c0a:	80fb      	strh	r3, [r7, #6]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <BSP_LCD_DrawPixel+0x44>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0c      	ldr	r2, [pc, #48]	; (8002c48 <BSP_LCD_DrawPixel+0x48>)
 8002c16:	2134      	movs	r1, #52	; 0x34
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	335c      	adds	r3, #92	; 0x5c
 8002c20:	681c      	ldr	r4, [r3, #0]
 8002c22:	88bd      	ldrh	r5, [r7, #4]
 8002c24:	f7ff fc3e 	bl	80024a4 <BSP_LCD_GetXSize>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	fb03 f205 	mul.w	r2, r3, r5
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4423      	add	r3, r4
 8002c36:	461a      	mov	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bdb0      	pop	{r4, r5, r7, pc}
 8002c44:	20000598 	.word	0x20000598
 8002c48:	20000480 	.word	0x20000480

08002c4c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002c5a:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <FillBuffer+0x68>)
 8002c5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c60:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002c62:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <FillBuffer+0x68>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002c68:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <FillBuffer+0x68>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <FillBuffer+0x68>)
 8002c70:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <FillBuffer+0x6c>)
 8002c72:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002c74:	480f      	ldr	r0, [pc, #60]	; (8002cb4 <FillBuffer+0x68>)
 8002c76:	f000 fd51 	bl	800371c <HAL_DMA2D_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d115      	bne.n	8002cac <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002c80:	68f9      	ldr	r1, [r7, #12]
 8002c82:	480c      	ldr	r0, [pc, #48]	; (8002cb4 <FillBuffer+0x68>)
 8002c84:	f000 feb2 	bl	80039ec <HAL_DMA2D_ConfigLayer>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10e      	bne.n	8002cac <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69f9      	ldr	r1, [r7, #28]
 8002c98:	4806      	ldr	r0, [pc, #24]	; (8002cb4 <FillBuffer+0x68>)
 8002c9a:	f000 fd92 	bl	80037c2 <HAL_DMA2D_Start>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d103      	bne.n	8002cac <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002ca4:	210a      	movs	r1, #10
 8002ca6:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <FillBuffer+0x68>)
 8002ca8:	f000 fdb6 	bl	8003818 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000528 	.word	0x20000528
 8002cb8:	4002b000 	.word	0x4002b000

08002cbc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002cc0:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002cc2:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <BSP_SDRAM_Init+0xb0>)
 8002cc4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <BSP_SDRAM_Init+0xb4>)
 8002cc8:	2202      	movs	r2, #2
 8002cca:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002ccc:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <BSP_SDRAM_Init+0xb4>)
 8002cce:	2207      	movs	r2, #7
 8002cd0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002cd2:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <BSP_SDRAM_Init+0xb4>)
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <BSP_SDRAM_Init+0xb4>)
 8002cda:	2207      	movs	r2, #7
 8002cdc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <BSP_SDRAM_Init+0xb4>)
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002ce4:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <BSP_SDRAM_Init+0xb4>)
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002cea:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <BSP_SDRAM_Init+0xb4>)
 8002cec:	2202      	movs	r2, #2
 8002cee:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002cfe:	2204      	movs	r2, #4
 8002d00:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002d02:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002d04:	2210      	movs	r2, #16
 8002d06:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002d10:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002d14:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d22:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002d24:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002d2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d30:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002d32:	2100      	movs	r1, #0
 8002d34:	480c      	ldr	r0, [pc, #48]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002d36:	f000 f87f 	bl	8002e38 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002d3a:	490d      	ldr	r1, [pc, #52]	; (8002d70 <BSP_SDRAM_Init+0xb4>)
 8002d3c:	480a      	ldr	r0, [pc, #40]	; (8002d68 <BSP_SDRAM_Init+0xac>)
 8002d3e:	f003 ffff 	bl	8006d40 <HAL_SDRAM_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <BSP_SDRAM_Init+0xb8>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e002      	b.n	8002d56 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <BSP_SDRAM_Init+0xb8>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002d56:	f240 506a 	movw	r0, #1386	; 0x56a
 8002d5a:	f000 f80d 	bl	8002d78 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <BSP_SDRAM_Init+0xb8>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	200005b8 	.word	0x200005b8
 8002d6c:	a0000140 	.word	0xa0000140
 8002d70:	200005ec 	.word	0x200005ec
 8002d74:	2000007c 	.word	0x2000007c

08002d78 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002d84:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d8a:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002d90:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002da0:	4923      	ldr	r1, [pc, #140]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002da2:	4824      	ldr	r0, [pc, #144]	; (8002e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002da4:	f004 f80a 	bl	8006dbc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002da8:	2001      	movs	r0, #1
 8002daa:	f000 f9c3 	bl	8003134 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002db0:	2202      	movs	r2, #2
 8002db2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002db4:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002db6:	2208      	movs	r2, #8
 8002db8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002dba:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dca:	4919      	ldr	r1, [pc, #100]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dcc:	4819      	ldr	r0, [pc, #100]	; (8002e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002dce:	f003 fff5 	bl	8006dbc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dda:	2208      	movs	r2, #8
 8002ddc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002de0:	2204      	movs	r2, #4
 8002de2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dee:	4910      	ldr	r1, [pc, #64]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002df0:	4810      	ldr	r0, [pc, #64]	; (8002e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002df2:	f003 ffe3 	bl	8006dbc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002df6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002dfa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dfe:	2204      	movs	r2, #4
 8002e00:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e04:	2208      	movs	r2, #8
 8002e06:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e12:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e18:	4905      	ldr	r1, [pc, #20]	; (8002e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e1a:	4806      	ldr	r0, [pc, #24]	; (8002e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e1c:	f003 ffce 	bl	8006dbc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4804      	ldr	r0, [pc, #16]	; (8002e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e24:	f003 ffff 	bl	8006e26 <HAL_SDRAM_ProgramRefreshRate>
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000608 	.word	0x20000608
 8002e34:	200005b8 	.word	0x200005b8

08002e38 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b090      	sub	sp, #64	; 0x40
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80ec 	beq.w	8003022 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4e:	4b77      	ldr	r3, [pc, #476]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	4a76      	ldr	r2, [pc, #472]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6393      	str	r3, [r2, #56]	; 0x38
 8002e5a:	4b74      	ldr	r3, [pc, #464]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	4b70      	ldr	r3, [pc, #448]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a6f      	ldr	r2, [pc, #444]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b6d      	ldr	r3, [pc, #436]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	4b69      	ldr	r3, [pc, #420]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a68      	ldr	r2, [pc, #416]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b66      	ldr	r3, [pc, #408]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	4b62      	ldr	r3, [pc, #392]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a61      	ldr	r2, [pc, #388]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b5f      	ldr	r3, [pc, #380]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	4b5b      	ldr	r3, [pc, #364]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a5a      	ldr	r2, [pc, #360]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002ec4:	f043 0308 	orr.w	r3, r3, #8
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b58      	ldr	r3, [pc, #352]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	4b54      	ldr	r3, [pc, #336]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a53      	ldr	r2, [pc, #332]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002ee0:	f043 0310 	orr.w	r3, r3, #16
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b51      	ldr	r3, [pc, #324]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	4b4d      	ldr	r3, [pc, #308]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a4c      	ldr	r2, [pc, #304]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002efc:	f043 0320 	orr.w	r3, r3, #32
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b4a      	ldr	r3, [pc, #296]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b46      	ldr	r3, [pc, #280]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a45      	ldr	r2, [pc, #276]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b43      	ldr	r3, [pc, #268]	; (800302c <BSP_SDRAM_MspInit+0x1f4>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002f36:	230c      	movs	r3, #12
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002f3a:	2360      	movs	r3, #96	; 0x60
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f42:	4619      	mov	r1, r3
 8002f44:	483a      	ldr	r0, [pc, #232]	; (8003030 <BSP_SDRAM_MspInit+0x1f8>)
 8002f46:	f000 fe7f 	bl	8003c48 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f52:	4619      	mov	r1, r3
 8002f54:	4837      	ldr	r0, [pc, #220]	; (8003034 <BSP_SDRAM_MspInit+0x1fc>)
 8002f56:	f000 fe77 	bl	8003c48 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002f5a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f64:	4619      	mov	r1, r3
 8002f66:	4834      	ldr	r0, [pc, #208]	; (8003038 <BSP_SDRAM_MspInit+0x200>)
 8002f68:	f000 fe6e 	bl	8003c48 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002f6c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f76:	4619      	mov	r1, r3
 8002f78:	4830      	ldr	r0, [pc, #192]	; (800303c <BSP_SDRAM_MspInit+0x204>)
 8002f7a:	f000 fe65 	bl	8003c48 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002f7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f88:	4619      	mov	r1, r3
 8002f8a:	482d      	ldr	r0, [pc, #180]	; (8003040 <BSP_SDRAM_MspInit+0x208>)
 8002f8c:	f000 fe5c 	bl	8003c48 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002f90:	f248 1333 	movw	r3, #33075	; 0x8133
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4829      	ldr	r0, [pc, #164]	; (8003044 <BSP_SDRAM_MspInit+0x20c>)
 8002f9e:	f000 fe53 	bl	8003c48 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002fa2:	4b29      	ldr	r3, [pc, #164]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fbc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fbe:	4b22      	ldr	r3, [pc, #136]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fc4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002fc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fcc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002fce:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002fd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fda:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002ff6:	4a15      	ldr	r2, [pc, #84]	; (800304c <BSP_SDRAM_MspInit+0x214>)
 8002ff8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a12      	ldr	r2, [pc, #72]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8003000:	4a11      	ldr	r2, [pc, #68]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003006:	4810      	ldr	r0, [pc, #64]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 8003008:	f000 fa78 	bl	80034fc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800300c:	480e      	ldr	r0, [pc, #56]	; (8003048 <BSP_SDRAM_MspInit+0x210>)
 800300e:	f000 f9c7 	bl	80033a0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	210f      	movs	r1, #15
 8003016:	2038      	movs	r0, #56	; 0x38
 8003018:	f000 f98b 	bl	8003332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800301c:	2038      	movs	r0, #56	; 0x38
 800301e:	f000 f9a4 	bl	800336a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003022:	bf00      	nop
 8003024:	3740      	adds	r7, #64	; 0x40
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	40020400 	.word	0x40020400
 8003034:	40020800 	.word	0x40020800
 8003038:	40020c00 	.word	0x40020c00
 800303c:	40021000 	.word	0x40021000
 8003040:	40021400 	.word	0x40021400
 8003044:	40021800 	.word	0x40021800
 8003048:	20000618 	.word	0x20000618
 800304c:	40026410 	.word	0x40026410

08003050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_Init+0x40>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <HAL_Init+0x40>)
 800305a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800305e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_Init+0x40>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <HAL_Init+0x40>)
 8003066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800306a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_Init+0x40>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a07      	ldr	r2, [pc, #28]	; (8003090 <HAL_Init+0x40>)
 8003072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003078:	2003      	movs	r0, #3
 800307a:	f000 f94f 	bl	800331c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800307e:	200f      	movs	r0, #15
 8003080:	f000 f808 	bl	8003094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003084:	f7fe f8f6 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023c00 	.word	0x40023c00

08003094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800309c:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_InitTick+0x54>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_InitTick+0x58>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4619      	mov	r1, r3
 80030a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 f967 	bl	8003386 <HAL_SYSTICK_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e00e      	b.n	80030e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b0f      	cmp	r3, #15
 80030c6:	d80a      	bhi.n	80030de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030c8:	2200      	movs	r2, #0
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295
 80030d0:	f000 f92f 	bl	8003332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030d4:	4a06      	ldr	r2, [pc, #24]	; (80030f0 <HAL_InitTick+0x5c>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000000 	.word	0x20000000
 80030ec:	20000084 	.word	0x20000084
 80030f0:	20000080 	.word	0x20000080

080030f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_IncTick+0x20>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_IncTick+0x24>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4413      	add	r3, r2
 8003104:	4a04      	ldr	r2, [pc, #16]	; (8003118 <HAL_IncTick+0x24>)
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000084 	.word	0x20000084
 8003118:	20000678 	.word	0x20000678

0800311c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return uwTick;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_GetTick+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000678 	.word	0x20000678

08003134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800313c:	f7ff ffee 	bl	800311c <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d005      	beq.n	800315a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_Delay+0x44>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800315a:	bf00      	nop
 800315c:	f7ff ffde 	bl	800311c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	429a      	cmp	r2, r3
 800316a:	d8f7      	bhi.n	800315c <HAL_Delay+0x28>
  {
  }
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000084 	.word	0x20000084

0800317c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <__NVIC_SetPriorityGrouping+0x44>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003198:	4013      	ands	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ae:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <__NVIC_SetPriorityGrouping+0x44>)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	60d3      	str	r3, [r2, #12]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <__NVIC_GetPriorityGrouping+0x18>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	f003 0307 	and.w	r3, r3, #7
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	db0b      	blt.n	800320a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	f003 021f 	and.w	r2, r3, #31
 80031f8:	4907      	ldr	r1, [pc, #28]	; (8003218 <__NVIC_EnableIRQ+0x38>)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2001      	movs	r0, #1
 8003202:	fa00 f202 	lsl.w	r2, r0, r2
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000e100 	.word	0xe000e100

0800321c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	6039      	str	r1, [r7, #0]
 8003226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322c:	2b00      	cmp	r3, #0
 800322e:	db0a      	blt.n	8003246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	490c      	ldr	r1, [pc, #48]	; (8003268 <__NVIC_SetPriority+0x4c>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	0112      	lsls	r2, r2, #4
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	440b      	add	r3, r1
 8003240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003244:	e00a      	b.n	800325c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4908      	ldr	r1, [pc, #32]	; (800326c <__NVIC_SetPriority+0x50>)
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	3b04      	subs	r3, #4
 8003254:	0112      	lsls	r2, r2, #4
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	440b      	add	r3, r1
 800325a:	761a      	strb	r2, [r3, #24]
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000e100 	.word	0xe000e100
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	; 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f1c3 0307 	rsb	r3, r3, #7
 800328a:	2b04      	cmp	r3, #4
 800328c:	bf28      	it	cs
 800328e:	2304      	movcs	r3, #4
 8003290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3304      	adds	r3, #4
 8003296:	2b06      	cmp	r3, #6
 8003298:	d902      	bls.n	80032a0 <NVIC_EncodePriority+0x30>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	3b03      	subs	r3, #3
 800329e:	e000      	b.n	80032a2 <NVIC_EncodePriority+0x32>
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a4:	f04f 32ff 	mov.w	r2, #4294967295
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43da      	mvns	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	401a      	ands	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b8:	f04f 31ff 	mov.w	r1, #4294967295
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	43d9      	mvns	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	4313      	orrs	r3, r2
         );
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3724      	adds	r7, #36	; 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e8:	d301      	bcc.n	80032ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00f      	b.n	800330e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <SysTick_Config+0x40>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f6:	210f      	movs	r1, #15
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f7ff ff8e 	bl	800321c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <SysTick_Config+0x40>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <SysTick_Config+0x40>)
 8003308:	2207      	movs	r2, #7
 800330a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	e000e010 	.word	0xe000e010

0800331c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff29 	bl	800317c <__NVIC_SetPriorityGrouping>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003344:	f7ff ff3e 	bl	80031c4 <__NVIC_GetPriorityGrouping>
 8003348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f7ff ff8e 	bl	8003270 <NVIC_EncodePriority>
 8003354:	4602      	mov	r2, r0
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff5d 	bl	800321c <__NVIC_SetPriority>
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff31 	bl	80031e0 <__NVIC_EnableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffa2 	bl	80032d8 <SysTick_Config>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033ac:	f7ff feb6 	bl	800311c <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e099      	b.n	80034f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033dc:	e00f      	b.n	80033fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033de:	f7ff fe9d 	bl	800311c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	d908      	bls.n	80033fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2203      	movs	r2, #3
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e078      	b.n	80034f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e8      	bne.n	80033de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <HAL_DMA_Init+0x158>)
 8003418:	4013      	ands	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800342a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	2b04      	cmp	r3, #4
 8003456:	d107      	bne.n	8003468 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	4313      	orrs	r3, r2
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 0307 	bic.w	r3, r3, #7
 800347e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	2b04      	cmp	r3, #4
 8003490:	d117      	bne.n	80034c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00e      	beq.n	80034c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f8bd 	bl	8003624 <DMA_CheckFifoParam>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2240      	movs	r2, #64	; 0x40
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034be:	2301      	movs	r3, #1
 80034c0:	e016      	b.n	80034f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f874 	bl	80035b8 <DMA_CalcBaseAndBitshift>
 80034d0:	4603      	mov	r3, r0
 80034d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	223f      	movs	r2, #63	; 0x3f
 80034da:	409a      	lsls	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	f010803f 	.word	0xf010803f

080034fc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e050      	b.n	80035b0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d101      	bne.n	800351e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	e048      	b.n	80035b0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2200      	movs	r2, #0
 800354c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2221      	movs	r2, #33	; 0x21
 800355c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f82a 	bl	80035b8 <DMA_CalcBaseAndBitshift>
 8003564:	4603      	mov	r3, r0
 8003566:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003590:	223f      	movs	r2, #63	; 0x3f
 8003592:	409a      	lsls	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	3b10      	subs	r3, #16
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <DMA_CalcBaseAndBitshift+0x64>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035d2:	4a13      	ldr	r2, [pc, #76]	; (8003620 <DMA_CalcBaseAndBitshift+0x68>)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d909      	bls.n	80035fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	659a      	str	r2, [r3, #88]	; 0x58
 80035f8:	e007      	b.n	800360a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	aaaaaaab 	.word	0xaaaaaaab
 8003620:	08010718 	.word	0x08010718

08003624 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11f      	bne.n	800367e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d856      	bhi.n	80036f2 <DMA_CheckFifoParam+0xce>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <DMA_CheckFifoParam+0x28>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	0800365d 	.word	0x0800365d
 8003650:	0800366f 	.word	0x0800366f
 8003654:	0800365d 	.word	0x0800365d
 8003658:	080036f3 	.word	0x080036f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d046      	beq.n	80036f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366c:	e043      	b.n	80036f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003676:	d140      	bne.n	80036fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367c:	e03d      	b.n	80036fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003686:	d121      	bne.n	80036cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d837      	bhi.n	80036fe <DMA_CheckFifoParam+0xda>
 800368e:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <DMA_CheckFifoParam+0x70>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	080036a5 	.word	0x080036a5
 8003698:	080036ab 	.word	0x080036ab
 800369c:	080036a5 	.word	0x080036a5
 80036a0:	080036bd 	.word	0x080036bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      break;
 80036a8:	e030      	b.n	800370c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d025      	beq.n	8003702 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ba:	e022      	b.n	8003702 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036c4:	d11f      	bne.n	8003706 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036ca:	e01c      	b.n	8003706 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d903      	bls.n	80036da <DMA_CheckFifoParam+0xb6>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d003      	beq.n	80036e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036d8:	e018      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
      break;
 80036de:	e015      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00e      	beq.n	800370a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      break;
 80036f0:	e00b      	b.n	800370a <DMA_CheckFifoParam+0xe6>
      break;
 80036f2:	bf00      	nop
 80036f4:	e00a      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036f6:	bf00      	nop
 80036f8:	e008      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036fa:	bf00      	nop
 80036fc:	e006      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 80036fe:	bf00      	nop
 8003700:	e004      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;   
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <DMA_CheckFifoParam+0xe8>
      break;
 800370a:	bf00      	nop
    }
  } 
  
  return status; 
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop

0800371c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e03b      	b.n	80037a6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f833 	bl	80037ae <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	f023 0107 	bic.w	r1, r3, #7
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003786:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68d1      	ldr	r1, [r2, #12]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	430b      	orrs	r3, r1
 8003794:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af02      	add	r7, sp, #8
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_DMA2D_Start+0x1c>
 80037da:	2302      	movs	r3, #2
 80037dc:	e018      	b.n	8003810 <HAL_DMA2D_Start+0x4e>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2202      	movs	r2, #2
 80037ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f989 	bl	8003b10 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d056      	beq.n	80038e2 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003834:	f7ff fc72 	bl	800311c <HAL_GetTick>
 8003838:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800383a:	e04b      	b.n	80038d4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800384a:	2b00      	cmp	r3, #0
 800384c:	d023      	beq.n	8003896 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385c:	f043 0202 	orr.w	r2, r3, #2
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2221      	movs	r2, #33	; 0x21
 8003880:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2204      	movs	r2, #4
 8003886:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0a5      	b.n	80039e2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d01a      	beq.n	80038d4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7ff fc3d 	bl	800311c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <HAL_DMA2D_PollForTransfer+0x9c>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10f      	bne.n	80038d4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2203      	movs	r2, #3
 80038c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e086      	b.n	80039e2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ac      	beq.n	800383c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d061      	beq.n	80039c8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003904:	f7ff fc0a 	bl	800311c <HAL_GetTick>
 8003908:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800390a:	e056      	b.n	80039ba <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02e      	beq.n	800397c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	f043 0204 	orr.w	r2, r3, #4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	f043 0202 	orr.w	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	f043 0201 	orr.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2229      	movs	r2, #41	; 0x29
 8003966:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2204      	movs	r2, #4
 800396c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e032      	b.n	80039e2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d01a      	beq.n	80039ba <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003984:	f7ff fbca 	bl	800311c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d302      	bcc.n	800399a <HAL_DMA2D_PollForTransfer+0x182>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10f      	bne.n	80039ba <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	f043 0220 	orr.w	r2, r3, #32
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2203      	movs	r2, #3
 80039aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e013      	b.n	80039e2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0a1      	beq.n	800390c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2212      	movs	r2, #18
 80039ce:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_DMA2D_ConfigLayer+0x20>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e079      	b.n	8003b00 <HAL_DMA2D_ConfigLayer+0x114>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	3318      	adds	r3, #24
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003a36:	4b35      	ldr	r3, [pc, #212]	; (8003b0c <HAL_DMA2D_ConfigLayer+0x120>)
 8003a38:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b0a      	cmp	r3, #10
 8003a40:	d003      	beq.n	8003a4a <HAL_DMA2D_ConfigLayer+0x5e>
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b09      	cmp	r3, #9
 8003a48:	d107      	bne.n	8003a5a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e005      	b.n	8003a66 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	061b      	lsls	r3, r3, #24
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d120      	bne.n	8003aae <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	ea02 0103 	and.w	r1, r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b0a      	cmp	r3, #10
 8003a94:	d003      	beq.n	8003a9e <HAL_DMA2D_ConfigLayer+0xb2>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b09      	cmp	r3, #9
 8003a9c:	d127      	bne.n	8003aee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8003aac:	e01f      	b.n	8003aee <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	ea02 0103 	and.w	r1, r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b0a      	cmp	r3, #10
 8003ad6:	d003      	beq.n	8003ae0 <HAL_DMA2D_ConfigLayer+0xf4>
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b09      	cmp	r3, #9
 8003ade:	d106      	bne.n	8003aee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003aec:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	ff03000f 	.word	0xff03000f

08003b10 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b08b      	sub	sp, #44	; 0x2c
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	041a      	lsls	r2, r3, #16
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b48:	d174      	bne.n	8003c34 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b50:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b58:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b60:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d108      	bne.n	8003b82 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b80:	e053      	b.n	8003c2a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d106      	bne.n	8003b98 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
 8003b96:	e048      	b.n	8003c2a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d111      	bne.n	8003bc4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	0cdb      	lsrs	r3, r3, #19
 8003ba4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	0a9b      	lsrs	r3, r3, #10
 8003baa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	08db      	lsrs	r3, r3, #3
 8003bb0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	02db      	lsls	r3, r3, #11
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	e032      	b.n	8003c2a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d117      	bne.n	8003bfc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	0fdb      	lsrs	r3, r3, #31
 8003bd0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	0cdb      	lsrs	r3, r3, #19
 8003bd6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	0adb      	lsrs	r3, r3, #11
 8003bdc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	08db      	lsrs	r3, r3, #3
 8003be2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	029b      	lsls	r3, r3, #10
 8003bec:	431a      	orrs	r2, r3
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	03db      	lsls	r3, r3, #15
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfa:	e016      	b.n	8003c2a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	0f1b      	lsrs	r3, r3, #28
 8003c00:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	0d1b      	lsrs	r3, r3, #20
 8003c06:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	0b1b      	lsrs	r3, r3, #12
 8003c0c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	011a      	lsls	r2, r3, #4
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	031b      	lsls	r3, r3, #12
 8003c22:	4313      	orrs	r3, r2
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003c32:	e003      	b.n	8003c3c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	60da      	str	r2, [r3, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	372c      	adds	r7, #44	; 0x2c
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b089      	sub	sp, #36	; 0x24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	e177      	b.n	8003f54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c64:	2201      	movs	r2, #1
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	f040 8166 	bne.w	8003f4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d005      	beq.n	8003c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d130      	bne.n	8003cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 0201 	and.w	r2, r3, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d017      	beq.n	8003d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	2203      	movs	r2, #3
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d123      	bne.n	8003d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	08da      	lsrs	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3208      	adds	r2, #8
 8003d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	220f      	movs	r2, #15
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	08da      	lsrs	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3208      	adds	r2, #8
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0203 	and.w	r2, r3, #3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80c0 	beq.w	8003f4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	4b66      	ldr	r3, [pc, #408]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	4a65      	ldr	r2, [pc, #404]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dde:	4b63      	ldr	r3, [pc, #396]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dea:	4a61      	ldr	r2, [pc, #388]	; (8003f70 <HAL_GPIO_Init+0x328>)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	3302      	adds	r3, #2
 8003df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	220f      	movs	r2, #15
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_GPIO_Init+0x32c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d037      	beq.n	8003e86 <HAL_GPIO_Init+0x23e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a57      	ldr	r2, [pc, #348]	; (8003f78 <HAL_GPIO_Init+0x330>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d031      	beq.n	8003e82 <HAL_GPIO_Init+0x23a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a56      	ldr	r2, [pc, #344]	; (8003f7c <HAL_GPIO_Init+0x334>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02b      	beq.n	8003e7e <HAL_GPIO_Init+0x236>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a55      	ldr	r2, [pc, #340]	; (8003f80 <HAL_GPIO_Init+0x338>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d025      	beq.n	8003e7a <HAL_GPIO_Init+0x232>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a54      	ldr	r2, [pc, #336]	; (8003f84 <HAL_GPIO_Init+0x33c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01f      	beq.n	8003e76 <HAL_GPIO_Init+0x22e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a53      	ldr	r2, [pc, #332]	; (8003f88 <HAL_GPIO_Init+0x340>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d019      	beq.n	8003e72 <HAL_GPIO_Init+0x22a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a52      	ldr	r2, [pc, #328]	; (8003f8c <HAL_GPIO_Init+0x344>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_GPIO_Init+0x226>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a51      	ldr	r2, [pc, #324]	; (8003f90 <HAL_GPIO_Init+0x348>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00d      	beq.n	8003e6a <HAL_GPIO_Init+0x222>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a50      	ldr	r2, [pc, #320]	; (8003f94 <HAL_GPIO_Init+0x34c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <HAL_GPIO_Init+0x21e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4f      	ldr	r2, [pc, #316]	; (8003f98 <HAL_GPIO_Init+0x350>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <HAL_GPIO_Init+0x21a>
 8003e5e:	2309      	movs	r3, #9
 8003e60:	e012      	b.n	8003e88 <HAL_GPIO_Init+0x240>
 8003e62:	230a      	movs	r3, #10
 8003e64:	e010      	b.n	8003e88 <HAL_GPIO_Init+0x240>
 8003e66:	2308      	movs	r3, #8
 8003e68:	e00e      	b.n	8003e88 <HAL_GPIO_Init+0x240>
 8003e6a:	2307      	movs	r3, #7
 8003e6c:	e00c      	b.n	8003e88 <HAL_GPIO_Init+0x240>
 8003e6e:	2306      	movs	r3, #6
 8003e70:	e00a      	b.n	8003e88 <HAL_GPIO_Init+0x240>
 8003e72:	2305      	movs	r3, #5
 8003e74:	e008      	b.n	8003e88 <HAL_GPIO_Init+0x240>
 8003e76:	2304      	movs	r3, #4
 8003e78:	e006      	b.n	8003e88 <HAL_GPIO_Init+0x240>
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e004      	b.n	8003e88 <HAL_GPIO_Init+0x240>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e002      	b.n	8003e88 <HAL_GPIO_Init+0x240>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_GPIO_Init+0x240>
 8003e86:	2300      	movs	r3, #0
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	f002 0203 	and.w	r2, r2, #3
 8003e8e:	0092      	lsls	r2, r2, #2
 8003e90:	4093      	lsls	r3, r2
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e98:	4935      	ldr	r1, [pc, #212]	; (8003f70 <HAL_GPIO_Init+0x328>)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ea6:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <HAL_GPIO_Init+0x354>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eca:	4a34      	ldr	r2, [pc, #208]	; (8003f9c <HAL_GPIO_Init+0x354>)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ed0:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <HAL_GPIO_Init+0x354>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ef4:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <HAL_GPIO_Init+0x354>)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003efa:	4b28      	ldr	r3, [pc, #160]	; (8003f9c <HAL_GPIO_Init+0x354>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4013      	ands	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f1e:	4a1f      	ldr	r2, [pc, #124]	; (8003f9c <HAL_GPIO_Init+0x354>)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_GPIO_Init+0x354>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <HAL_GPIO_Init+0x354>)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	3301      	adds	r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b0f      	cmp	r3, #15
 8003f58:	f67f ae84 	bls.w	8003c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	3724      	adds	r7, #36	; 0x24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40013800 	.word	0x40013800
 8003f74:	40020000 	.word	0x40020000
 8003f78:	40020400 	.word	0x40020400
 8003f7c:	40020800 	.word	0x40020800
 8003f80:	40020c00 	.word	0x40020c00
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40021400 	.word	0x40021400
 8003f8c:	40021800 	.word	0x40021800
 8003f90:	40021c00 	.word	0x40021c00
 8003f94:	40022000 	.word	0x40022000
 8003f98:	40022400 	.word	0x40022400
 8003f9c:	40013c00 	.word	0x40013c00

08003fa0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	e0d9      	b.n	8004170 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	f040 80c9 	bne.w	800416a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003fd8:	4a6b      	ldr	r2, [pc, #428]	; (8004188 <HAL_GPIO_DeInit+0x1e8>)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	3302      	adds	r3, #2
 8003fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	220f      	movs	r2, #15
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a63      	ldr	r2, [pc, #396]	; (800418c <HAL_GPIO_DeInit+0x1ec>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d037      	beq.n	8004072 <HAL_GPIO_DeInit+0xd2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a62      	ldr	r2, [pc, #392]	; (8004190 <HAL_GPIO_DeInit+0x1f0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d031      	beq.n	800406e <HAL_GPIO_DeInit+0xce>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a61      	ldr	r2, [pc, #388]	; (8004194 <HAL_GPIO_DeInit+0x1f4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d02b      	beq.n	800406a <HAL_GPIO_DeInit+0xca>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a60      	ldr	r2, [pc, #384]	; (8004198 <HAL_GPIO_DeInit+0x1f8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d025      	beq.n	8004066 <HAL_GPIO_DeInit+0xc6>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a5f      	ldr	r2, [pc, #380]	; (800419c <HAL_GPIO_DeInit+0x1fc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01f      	beq.n	8004062 <HAL_GPIO_DeInit+0xc2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a5e      	ldr	r2, [pc, #376]	; (80041a0 <HAL_GPIO_DeInit+0x200>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d019      	beq.n	800405e <HAL_GPIO_DeInit+0xbe>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a5d      	ldr	r2, [pc, #372]	; (80041a4 <HAL_GPIO_DeInit+0x204>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <HAL_GPIO_DeInit+0xba>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a5c      	ldr	r2, [pc, #368]	; (80041a8 <HAL_GPIO_DeInit+0x208>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00d      	beq.n	8004056 <HAL_GPIO_DeInit+0xb6>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a5b      	ldr	r2, [pc, #364]	; (80041ac <HAL_GPIO_DeInit+0x20c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <HAL_GPIO_DeInit+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a5a      	ldr	r2, [pc, #360]	; (80041b0 <HAL_GPIO_DeInit+0x210>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <HAL_GPIO_DeInit+0xae>
 800404a:	2309      	movs	r3, #9
 800404c:	e012      	b.n	8004074 <HAL_GPIO_DeInit+0xd4>
 800404e:	230a      	movs	r3, #10
 8004050:	e010      	b.n	8004074 <HAL_GPIO_DeInit+0xd4>
 8004052:	2308      	movs	r3, #8
 8004054:	e00e      	b.n	8004074 <HAL_GPIO_DeInit+0xd4>
 8004056:	2307      	movs	r3, #7
 8004058:	e00c      	b.n	8004074 <HAL_GPIO_DeInit+0xd4>
 800405a:	2306      	movs	r3, #6
 800405c:	e00a      	b.n	8004074 <HAL_GPIO_DeInit+0xd4>
 800405e:	2305      	movs	r3, #5
 8004060:	e008      	b.n	8004074 <HAL_GPIO_DeInit+0xd4>
 8004062:	2304      	movs	r3, #4
 8004064:	e006      	b.n	8004074 <HAL_GPIO_DeInit+0xd4>
 8004066:	2303      	movs	r3, #3
 8004068:	e004      	b.n	8004074 <HAL_GPIO_DeInit+0xd4>
 800406a:	2302      	movs	r3, #2
 800406c:	e002      	b.n	8004074 <HAL_GPIO_DeInit+0xd4>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <HAL_GPIO_DeInit+0xd4>
 8004072:	2300      	movs	r3, #0
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	f002 0203 	and.w	r2, r2, #3
 800407a:	0092      	lsls	r2, r2, #2
 800407c:	4093      	lsls	r3, r2
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	429a      	cmp	r2, r3
 8004082:	d132      	bne.n	80040ea <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004084:	4b4b      	ldr	r3, [pc, #300]	; (80041b4 <HAL_GPIO_DeInit+0x214>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	43db      	mvns	r3, r3
 800408c:	4949      	ldr	r1, [pc, #292]	; (80041b4 <HAL_GPIO_DeInit+0x214>)
 800408e:	4013      	ands	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004092:	4b48      	ldr	r3, [pc, #288]	; (80041b4 <HAL_GPIO_DeInit+0x214>)
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	43db      	mvns	r3, r3
 800409a:	4946      	ldr	r1, [pc, #280]	; (80041b4 <HAL_GPIO_DeInit+0x214>)
 800409c:	4013      	ands	r3, r2
 800409e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80040a0:	4b44      	ldr	r3, [pc, #272]	; (80041b4 <HAL_GPIO_DeInit+0x214>)
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	4942      	ldr	r1, [pc, #264]	; (80041b4 <HAL_GPIO_DeInit+0x214>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80040ae:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <HAL_GPIO_DeInit+0x214>)
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	493f      	ldr	r1, [pc, #252]	; (80041b4 <HAL_GPIO_DeInit+0x214>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	220f      	movs	r2, #15
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80040cc:	4a2e      	ldr	r2, [pc, #184]	; (8004188 <HAL_GPIO_DeInit+0x1e8>)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	3302      	adds	r3, #2
 80040d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	43da      	mvns	r2, r3
 80040dc:	482a      	ldr	r0, [pc, #168]	; (8004188 <HAL_GPIO_DeInit+0x1e8>)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	400a      	ands	r2, r1
 80040e4:	3302      	adds	r3, #2
 80040e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	2103      	movs	r1, #3
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	08da      	lsrs	r2, r3, #3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3208      	adds	r2, #8
 8004108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	220f      	movs	r2, #15
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	08d2      	lsrs	r2, r2, #3
 8004120:	4019      	ands	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3208      	adds	r2, #8
 8004126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	2103      	movs	r1, #3
 8004134:	fa01 f303 	lsl.w	r3, r1, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	401a      	ands	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	2101      	movs	r1, #1
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	fa01 f303 	lsl.w	r3, r1, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2103      	movs	r1, #3
 800415e:	fa01 f303 	lsl.w	r3, r1, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	401a      	ands	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	3301      	adds	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b0f      	cmp	r3, #15
 8004174:	f67f af22 	bls.w	8003fbc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40013800 	.word	0x40013800
 800418c:	40020000 	.word	0x40020000
 8004190:	40020400 	.word	0x40020400
 8004194:	40020800 	.word	0x40020800
 8004198:	40020c00 	.word	0x40020c00
 800419c:	40021000 	.word	0x40021000
 80041a0:	40021400 	.word	0x40021400
 80041a4:	40021800 	.word	0x40021800
 80041a8:	40021c00 	.word	0x40021c00
 80041ac:	40022000 	.word	0x40022000
 80041b0:	40022400 	.word	0x40022400
 80041b4:	40013c00 	.word	0x40013c00

080041b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]
 80041c4:	4613      	mov	r3, r2
 80041c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c8:	787b      	ldrb	r3, [r7, #1]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ce:	887a      	ldrh	r2, [r7, #2]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041d4:	e003      	b.n	80041de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	041a      	lsls	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	619a      	str	r2, [r3, #24]
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e12b      	b.n	8004456 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fd f856 	bl	80012c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2224      	movs	r2, #36	; 0x24
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800423e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800424e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004250:	f002 fba2 	bl	8006998 <HAL_RCC_GetPCLK1Freq>
 8004254:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4a81      	ldr	r2, [pc, #516]	; (8004460 <HAL_I2C_Init+0x274>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d807      	bhi.n	8004270 <HAL_I2C_Init+0x84>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a80      	ldr	r2, [pc, #512]	; (8004464 <HAL_I2C_Init+0x278>)
 8004264:	4293      	cmp	r3, r2
 8004266:	bf94      	ite	ls
 8004268:	2301      	movls	r3, #1
 800426a:	2300      	movhi	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e006      	b.n	800427e <HAL_I2C_Init+0x92>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a7d      	ldr	r2, [pc, #500]	; (8004468 <HAL_I2C_Init+0x27c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	bf94      	ite	ls
 8004278:	2301      	movls	r3, #1
 800427a:	2300      	movhi	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e0e7      	b.n	8004456 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4a78      	ldr	r2, [pc, #480]	; (800446c <HAL_I2C_Init+0x280>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	0c9b      	lsrs	r3, r3, #18
 8004290:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a6a      	ldr	r2, [pc, #424]	; (8004460 <HAL_I2C_Init+0x274>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d802      	bhi.n	80042c0 <HAL_I2C_Init+0xd4>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	3301      	adds	r3, #1
 80042be:	e009      	b.n	80042d4 <HAL_I2C_Init+0xe8>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	4a69      	ldr	r2, [pc, #420]	; (8004470 <HAL_I2C_Init+0x284>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	3301      	adds	r3, #1
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	430b      	orrs	r3, r1
 80042da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	495c      	ldr	r1, [pc, #368]	; (8004460 <HAL_I2C_Init+0x274>)
 80042f0:	428b      	cmp	r3, r1
 80042f2:	d819      	bhi.n	8004328 <HAL_I2C_Init+0x13c>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1e59      	subs	r1, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004302:	1c59      	adds	r1, r3, #1
 8004304:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004308:	400b      	ands	r3, r1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_I2C_Init+0x138>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1e59      	subs	r1, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	fbb1 f3f3 	udiv	r3, r1, r3
 800431c:	3301      	adds	r3, #1
 800431e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004322:	e051      	b.n	80043c8 <HAL_I2C_Init+0x1dc>
 8004324:	2304      	movs	r3, #4
 8004326:	e04f      	b.n	80043c8 <HAL_I2C_Init+0x1dc>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d111      	bne.n	8004354 <HAL_I2C_Init+0x168>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1e58      	subs	r0, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6859      	ldr	r1, [r3, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	440b      	add	r3, r1
 800433e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004342:	3301      	adds	r3, #1
 8004344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e012      	b.n	800437a <HAL_I2C_Init+0x18e>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1e58      	subs	r0, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	0099      	lsls	r1, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	fbb0 f3f3 	udiv	r3, r0, r3
 800436a:	3301      	adds	r3, #1
 800436c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Init+0x196>
 800437e:	2301      	movs	r3, #1
 8004380:	e022      	b.n	80043c8 <HAL_I2C_Init+0x1dc>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10e      	bne.n	80043a8 <HAL_I2C_Init+0x1bc>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1e58      	subs	r0, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6859      	ldr	r1, [r3, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	440b      	add	r3, r1
 8004398:	fbb0 f3f3 	udiv	r3, r0, r3
 800439c:	3301      	adds	r3, #1
 800439e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a6:	e00f      	b.n	80043c8 <HAL_I2C_Init+0x1dc>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1e58      	subs	r0, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6859      	ldr	r1, [r3, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	0099      	lsls	r1, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	6809      	ldr	r1, [r1, #0]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6911      	ldr	r1, [r2, #16]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	68d2      	ldr	r2, [r2, #12]
 8004402:	4311      	orrs	r1, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	430b      	orrs	r3, r1
 800440a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	000186a0 	.word	0x000186a0
 8004464:	001e847f 	.word	0x001e847f
 8004468:	003d08ff 	.word	0x003d08ff
 800446c:	431bde83 	.word	0x431bde83
 8004470:	10624dd3 	.word	0x10624dd3

08004474 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b20      	cmp	r3, #32
 8004488:	d129      	bne.n	80044de <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2224      	movs	r2, #36	; 0x24
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0210 	bic.w	r2, r2, #16
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e000      	b.n	80044e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80044de:	2302      	movs	r3, #2
  }
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b20      	cmp	r3, #32
 8004504:	d12a      	bne.n	800455c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2224      	movs	r2, #36	; 0x24
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004526:	89fb      	ldrh	r3, [r7, #14]
 8004528:	f023 030f 	bic.w	r3, r3, #15
 800452c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	b29a      	uxth	r2, r3
 8004532:	89fb      	ldrh	r3, [r7, #14]
 8004534:	4313      	orrs	r3, r2
 8004536:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	89fa      	ldrh	r2, [r7, #14]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e000      	b.n	800455e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e0bf      	b.n	80046fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8ba 	bl	800470c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80045ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6999      	ldr	r1, [r3, #24]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6899      	ldr	r1, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b4a      	ldr	r3, [pc, #296]	; (8004708 <HAL_LTDC_Init+0x19c>)
 80045e0:	400b      	ands	r3, r1
 80045e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6899      	ldr	r1, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68d9      	ldr	r1, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b3e      	ldr	r3, [pc, #248]	; (8004708 <HAL_LTDC_Init+0x19c>)
 800460e:	400b      	ands	r3, r1
 8004610:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	041b      	lsls	r3, r3, #16
 8004618:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68d9      	ldr	r1, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6919      	ldr	r1, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4b33      	ldr	r3, [pc, #204]	; (8004708 <HAL_LTDC_Init+0x19c>)
 800463c:	400b      	ands	r3, r1
 800463e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	041b      	lsls	r3, r3, #16
 8004646:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6919      	ldr	r1, [r3, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6959      	ldr	r1, [r3, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4b27      	ldr	r3, [pc, #156]	; (8004708 <HAL_LTDC_Init+0x19c>)
 800466a:	400b      	ands	r3, r1
 800466c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6959      	ldr	r1, [r3, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80046ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0206 	orr.w	r2, r2, #6
 80046da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	f000f800 	.word	0xf000f800

0800470c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004720:	b5b0      	push	{r4, r5, r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_LTDC_ConfigLayer+0x1a>
 8004736:	2302      	movs	r3, #2
 8004738:	e02c      	b.n	8004794 <HAL_LTDC_ConfigLayer+0x74>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2134      	movs	r1, #52	; 0x34
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4614      	mov	r4, r2
 800475e:	461d      	mov	r5, r3
 8004760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800476a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f83b 	bl	80047f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2201      	movs	r2, #1
 8004780:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bdb0      	pop	{r4, r5, r7, pc}

0800479c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <HAL_LTDC_EnableDither+0x16>
 80047ae:	2302      	movs	r3, #2
 80047b0:	e016      	b.n	80047e0 <HAL_LTDC_EnableDither+0x44>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_LTDC_EnableDither+0x50>)
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	4a09      	ldr	r2, [pc, #36]	; (80047ec <HAL_LTDC_EnableDither+0x50>)
 80047c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047cc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	40016800 	.word	0x40016800

080047f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	0c1b      	lsrs	r3, r3, #16
 8004808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480c:	4413      	add	r3, r2
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	01db      	lsls	r3, r3, #7
 800481c:	4413      	add	r3, r2
 800481e:	3384      	adds	r3, #132	; 0x84
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	4611      	mov	r1, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	01d2      	lsls	r2, r2, #7
 800482c:	440a      	add	r2, r1
 800482e:	3284      	adds	r2, #132	; 0x84
 8004830:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004834:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004846:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004848:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4619      	mov	r1, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	01db      	lsls	r3, r3, #7
 8004854:	440b      	add	r3, r1
 8004856:	3384      	adds	r3, #132	; 0x84
 8004858:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800485e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800486e:	4413      	add	r3, r2
 8004870:	041b      	lsls	r3, r3, #16
 8004872:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	01db      	lsls	r3, r3, #7
 800487e:	4413      	add	r3, r2
 8004880:	3384      	adds	r3, #132	; 0x84
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	4611      	mov	r1, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	01d2      	lsls	r2, r2, #7
 800488e:	440a      	add	r2, r1
 8004890:	3284      	adds	r2, #132	; 0x84
 8004892:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004896:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048a6:	4413      	add	r3, r2
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4619      	mov	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	01db      	lsls	r3, r3, #7
 80048b4:	440b      	add	r3, r1
 80048b6:	3384      	adds	r3, #132	; 0x84
 80048b8:	4619      	mov	r1, r3
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4313      	orrs	r3, r2
 80048be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	01db      	lsls	r3, r3, #7
 80048ca:	4413      	add	r3, r2
 80048cc:	3384      	adds	r3, #132	; 0x84
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	4611      	mov	r1, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	01d2      	lsls	r2, r2, #7
 80048da:	440a      	add	r2, r1
 80048dc:	3284      	adds	r2, #132	; 0x84
 80048de:	f023 0307 	bic.w	r3, r3, #7
 80048e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	01db      	lsls	r3, r3, #7
 80048ee:	4413      	add	r3, r2
 80048f0:	3384      	adds	r3, #132	; 0x84
 80048f2:	461a      	mov	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800490a:	041b      	lsls	r3, r3, #16
 800490c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	01db      	lsls	r3, r3, #7
 8004920:	4413      	add	r3, r2
 8004922:	3384      	adds	r3, #132	; 0x84
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	01db      	lsls	r3, r3, #7
 8004930:	4413      	add	r3, r2
 8004932:	3384      	adds	r3, #132	; 0x84
 8004934:	461a      	mov	r2, r3
 8004936:	2300      	movs	r3, #0
 8004938:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004940:	461a      	mov	r2, r3
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	431a      	orrs	r2, r3
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	431a      	orrs	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4619      	mov	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	01db      	lsls	r3, r3, #7
 8004954:	440b      	add	r3, r1
 8004956:	3384      	adds	r3, #132	; 0x84
 8004958:	4619      	mov	r1, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	01db      	lsls	r3, r3, #7
 800496a:	4413      	add	r3, r2
 800496c:	3384      	adds	r3, #132	; 0x84
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	4611      	mov	r1, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	01d2      	lsls	r2, r2, #7
 800497a:	440a      	add	r2, r1
 800497c:	3284      	adds	r2, #132	; 0x84
 800497e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004982:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	01db      	lsls	r3, r3, #7
 800498e:	4413      	add	r3, r2
 8004990:	3384      	adds	r3, #132	; 0x84
 8004992:	461a      	mov	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	01db      	lsls	r3, r3, #7
 80049a4:	4413      	add	r3, r2
 80049a6:	3384      	adds	r3, #132	; 0x84
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	4611      	mov	r1, r2
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	01d2      	lsls	r2, r2, #7
 80049b4:	440a      	add	r2, r1
 80049b6:	3284      	adds	r2, #132	; 0x84
 80049b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80049bc:	f023 0307 	bic.w	r3, r3, #7
 80049c0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	69da      	ldr	r2, [r3, #28]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	6809      	ldr	r1, [r1, #0]
 80049ce:	4608      	mov	r0, r1
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	01c9      	lsls	r1, r1, #7
 80049d4:	4401      	add	r1, r0
 80049d6:	3184      	adds	r1, #132	; 0x84
 80049d8:	4313      	orrs	r3, r2
 80049da:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	01db      	lsls	r3, r3, #7
 80049e6:	4413      	add	r3, r2
 80049e8:	3384      	adds	r3, #132	; 0x84
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	01db      	lsls	r3, r3, #7
 80049f6:	4413      	add	r3, r2
 80049f8:	3384      	adds	r3, #132	; 0x84
 80049fa:	461a      	mov	r2, r3
 80049fc:	2300      	movs	r3, #0
 80049fe:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	01db      	lsls	r3, r3, #7
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3384      	adds	r3, #132	; 0x84
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d102      	bne.n	8004a24 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004a1e:	2304      	movs	r3, #4
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	e01b      	b.n	8004a5c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d102      	bne.n	8004a32 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	61fb      	str	r3, [r7, #28]
 8004a30:	e014      	b.n	8004a5c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d00b      	beq.n	8004a52 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d007      	beq.n	8004a52 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d003      	beq.n	8004a52 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a4e:	2b07      	cmp	r3, #7
 8004a50:	d102      	bne.n	8004a58 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004a52:	2302      	movs	r3, #2
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	e001      	b.n	8004a5c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	01db      	lsls	r3, r3, #7
 8004a66:	4413      	add	r3, r2
 8004a68:	3384      	adds	r3, #132	; 0x84
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	4611      	mov	r1, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	01d2      	lsls	r2, r2, #7
 8004a76:	440a      	add	r2, r1
 8004a78:	3284      	adds	r2, #132	; 0x84
 8004a7a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004a7e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	6859      	ldr	r1, [r3, #4]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	1acb      	subs	r3, r1, r3
 8004a96:	69f9      	ldr	r1, [r7, #28]
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a9e:	68f9      	ldr	r1, [r7, #12]
 8004aa0:	6809      	ldr	r1, [r1, #0]
 8004aa2:	4608      	mov	r0, r1
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	01c9      	lsls	r1, r1, #7
 8004aa8:	4401      	add	r1, r0
 8004aaa:	3184      	adds	r1, #132	; 0x84
 8004aac:	4313      	orrs	r3, r2
 8004aae:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	01db      	lsls	r3, r3, #7
 8004aba:	4413      	add	r3, r2
 8004abc:	3384      	adds	r3, #132	; 0x84
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	01d2      	lsls	r2, r2, #7
 8004aca:	440a      	add	r2, r1
 8004acc:	3284      	adds	r2, #132	; 0x84
 8004ace:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ad2:	f023 0307 	bic.w	r3, r3, #7
 8004ad6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	01db      	lsls	r3, r3, #7
 8004ae2:	4413      	add	r3, r2
 8004ae4:	3384      	adds	r3, #132	; 0x84
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	01db      	lsls	r3, r3, #7
 8004af8:	4413      	add	r3, r2
 8004afa:	3384      	adds	r3, #132	; 0x84
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	4611      	mov	r1, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	01d2      	lsls	r2, r2, #7
 8004b08:	440a      	add	r2, r1
 8004b0a:	3284      	adds	r2, #132	; 0x84
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6013      	str	r3, [r2, #0]
}
 8004b12:	bf00      	nop
 8004b14:	3724      	adds	r7, #36	; 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b20:	b08f      	sub	sp, #60	; 0x3c
 8004b22:	af0a      	add	r7, sp, #40	; 0x28
 8004b24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e10f      	b.n	8004d50 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f006 fea8 	bl	800b8a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2203      	movs	r2, #3
 8004b54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d102      	bne.n	8004b6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f003 f98f 	bl	8007e92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	687e      	ldr	r6, [r7, #4]
 8004b7c:	466d      	mov	r5, sp
 8004b7e:	f106 0410 	add.w	r4, r6, #16
 8004b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b92:	1d33      	adds	r3, r6, #4
 8004b94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b96:	6838      	ldr	r0, [r7, #0]
 8004b98:	f003 f866 	bl	8007c68 <USB_CoreInit>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e0d0      	b.n	8004d50 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f003 f97d 	bl	8007eb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
 8004bbe:	e04a      	b.n	8004c56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bc0:	7bfa      	ldrb	r2, [r7, #15]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	333d      	adds	r3, #61	; 0x3d
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bd4:	7bfa      	ldrb	r2, [r7, #15]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	333c      	adds	r3, #60	; 0x3c
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004be8:	7bfa      	ldrb	r2, [r7, #15]
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	b298      	uxth	r0, r3
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3344      	adds	r3, #68	; 0x44
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c00:	7bfa      	ldrb	r2, [r7, #15]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3340      	adds	r3, #64	; 0x40
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3348      	adds	r3, #72	; 0x48
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	334c      	adds	r3, #76	; 0x4c
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c3c:	7bfa      	ldrb	r2, [r7, #15]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	3354      	adds	r3, #84	; 0x54
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	3301      	adds	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	7bfa      	ldrb	r2, [r7, #15]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d3af      	bcc.n	8004bc0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]
 8004c64:	e044      	b.n	8004cf0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c66:	7bfa      	ldrb	r2, [r7, #15]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c7c:	7bfa      	ldrb	r2, [r7, #15]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004c8e:	7bfa      	ldrb	r2, [r7, #15]
 8004c90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c92:	7bfa      	ldrb	r2, [r7, #15]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ca8:	7bfa      	ldrb	r2, [r7, #15]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cbe:	7bfa      	ldrb	r2, [r7, #15]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cd4:	7bfa      	ldrb	r2, [r7, #15]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	3301      	adds	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
 8004cf0:	7bfa      	ldrb	r2, [r7, #15]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d3b5      	bcc.n	8004c66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	687e      	ldr	r6, [r7, #4]
 8004d02:	466d      	mov	r5, sp
 8004d04:	f106 0410 	add.w	r4, r6, #16
 8004d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d14:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d18:	1d33      	adds	r3, r6, #4
 8004d1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d1c:	6838      	ldr	r0, [r7, #0]
 8004d1e:	f003 f915 	bl	8007f4c <USB_DevInit>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e00d      	b.n	8004d50 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f004 fa64 	bl	8009216 <USB_DevDisconnect>

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_PCD_Start+0x1c>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e020      	b.n	8004db6 <HAL_PCD_Start+0x5e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d109      	bne.n	8004d98 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d005      	beq.n	8004d98 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f003 f867 	bl	8007e70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f004 fa14 	bl	80091d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004dbe:	b590      	push	{r4, r7, lr}
 8004dc0:	b08d      	sub	sp, #52	; 0x34
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f004 fad2 	bl	800937e <USB_GetMode>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f040 848a 	bne.w	80056f6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f004 fa36 	bl	8009258 <USB_ReadInterrupts>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8480 	beq.w	80056f4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	0a1b      	lsrs	r3, r3, #8
 8004dfe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f004 fa23 	bl	8009258 <USB_ReadInterrupts>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d107      	bne.n	8004e2c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695a      	ldr	r2, [r3, #20]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f002 0202 	and.w	r2, r2, #2
 8004e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f004 fa11 	bl	8009258 <USB_ReadInterrupts>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d161      	bne.n	8004f04 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0210 	bic.w	r2, r2, #16
 8004e4e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	f003 020f 	and.w	r2, r3, #15
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	0c5b      	lsrs	r3, r3, #17
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d124      	bne.n	8004ec6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d035      	beq.n	8004ef4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6a38      	ldr	r0, [r7, #32]
 8004e9c:	f004 f848 	bl	8008f30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eac:	441a      	add	r2, r3
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	6a1a      	ldr	r2, [r3, #32]
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ebe:	441a      	add	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	621a      	str	r2, [r3, #32]
 8004ec4:	e016      	b.n	8004ef4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	0c5b      	lsrs	r3, r3, #17
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	2b06      	cmp	r3, #6
 8004ed0:	d110      	bne.n	8004ef4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ed8:	2208      	movs	r2, #8
 8004eda:	4619      	mov	r1, r3
 8004edc:	6a38      	ldr	r0, [r7, #32]
 8004ede:	f004 f827 	bl	8008f30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	6a1a      	ldr	r2, [r3, #32]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eee:	441a      	add	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0210 	orr.w	r2, r2, #16
 8004f02:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f004 f9a5 	bl	8009258 <USB_ReadInterrupts>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f18:	f040 80a7 	bne.w	800506a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f004 f9aa 	bl	800927e <USB_ReadDevAllOutEpInterrupt>
 8004f2a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f2c:	e099      	b.n	8005062 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 808e 	beq.w	8005056 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f004 f9ce 	bl	80092e6 <USB_ReadDevOutEPInterrupt>
 8004f4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00c      	beq.n	8004f70 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f62:	461a      	mov	r2, r3
 8004f64:	2301      	movs	r3, #1
 8004f66:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fec2 	bl	8005cf4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00c      	beq.n	8004f94 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f86:	461a      	mov	r2, r3
 8004f88:	2308      	movs	r3, #8
 8004f8a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 ff98 	bl	8005ec4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d008      	beq.n	8004fb0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	461a      	mov	r2, r3
 8004fac:	2310      	movs	r3, #16
 8004fae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d030      	beq.n	800501c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d109      	bne.n	8004fda <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fd8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fdc:	4613      	mov	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4413      	add	r3, r2
 8004fec:	3304      	adds	r3, #4
 8004fee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	78db      	ldrb	r3, [r3, #3]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d108      	bne.n	800500a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	b2db      	uxtb	r3, r3
 8005002:	4619      	mov	r1, r3
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f006 fd51 	bl	800baac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	461a      	mov	r2, r3
 8005018:	2302      	movs	r3, #2
 800501a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	461a      	mov	r2, r3
 8005034:	2320      	movs	r3, #32
 8005036:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	461a      	mov	r2, r3
 8005050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005054:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	3301      	adds	r3, #1
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	f47f af62 	bne.w	8004f2e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f004 f8f2 	bl	8009258 <USB_ReadInterrupts>
 8005074:	4603      	mov	r3, r0
 8005076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800507a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800507e:	f040 80db 	bne.w	8005238 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f004 f913 	bl	80092b2 <USB_ReadDevAllInEpInterrupt>
 800508c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005092:	e0cd      	b.n	8005230 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80c2 	beq.w	8005224 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f004 f939 	bl	8009322 <USB_ReadDevInEPInterrupt>
 80050b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d057      	beq.n	800516c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	2201      	movs	r2, #1
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	69f9      	ldr	r1, [r7, #28]
 80050d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050dc:	4013      	ands	r3, r2
 80050de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	461a      	mov	r2, r3
 80050ee:	2301      	movs	r3, #1
 80050f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d132      	bne.n	8005160 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fe:	4613      	mov	r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	334c      	adds	r3, #76	; 0x4c
 800510a:	6819      	ldr	r1, [r3, #0]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4403      	add	r3, r0
 800511a:	3348      	adds	r3, #72	; 0x48
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4419      	add	r1, r3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005124:	4613      	mov	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4403      	add	r3, r0
 800512e:	334c      	adds	r3, #76	; 0x4c
 8005130:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	d113      	bne.n	8005160 <HAL_PCD_IRQHandler+0x3a2>
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513c:	4613      	mov	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	3354      	adds	r3, #84	; 0x54
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d108      	bne.n	8005160 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005158:	461a      	mov	r2, r3
 800515a:	2101      	movs	r1, #1
 800515c:	f004 f940 	bl	80093e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f006 fc1b 	bl	800b9a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005182:	461a      	mov	r2, r3
 8005184:	2308      	movs	r3, #8
 8005186:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519e:	461a      	mov	r2, r3
 80051a0:	2310      	movs	r3, #16
 80051a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ba:	461a      	mov	r2, r3
 80051bc:	2340      	movs	r3, #64	; 0x40
 80051be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d023      	beq.n	8005212 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80051ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051cc:	6a38      	ldr	r0, [r7, #32]
 80051ce:	f003 f821 	bl	8008214 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80051d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d4:	4613      	mov	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	3338      	adds	r3, #56	; 0x38
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4413      	add	r3, r2
 80051e2:	3304      	adds	r3, #4
 80051e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	78db      	ldrb	r3, [r3, #3]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d108      	bne.n	8005200 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f006 fc68 	bl	800bad0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	461a      	mov	r2, r3
 800520e:	2302      	movs	r3, #2
 8005210:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800521c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fcdb 	bl	8005bda <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	3301      	adds	r3, #1
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	2b00      	cmp	r3, #0
 8005234:	f47f af2e 	bne.w	8005094 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f004 f80b 	bl	8009258 <USB_ReadInterrupts>
 8005242:	4603      	mov	r3, r0
 8005244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800524c:	d122      	bne.n	8005294 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005268:	2b01      	cmp	r3, #1
 800526a:	d108      	bne.n	800527e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005274:	2100      	movs	r1, #0
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fec2 	bl	8006000 <HAL_PCDEx_LPM_Callback>
 800527c:	e002      	b.n	8005284 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f006 fc06 	bl	800ba90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695a      	ldr	r2, [r3, #20]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005292:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f003 ffdd 	bl	8009258 <USB_ReadInterrupts>
 800529e:	4603      	mov	r3, r0
 80052a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a8:	d112      	bne.n	80052d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d102      	bne.n	80052c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f006 fbc2 	bl	800ba44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80052ce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f003 ffbf 	bl	8009258 <USB_ReadInterrupts>
 80052da:	4603      	mov	r3, r0
 80052dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e4:	f040 80b7 	bne.w	8005456 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2110      	movs	r1, #16
 8005302:	4618      	mov	r0, r3
 8005304:	f002 ff86 	bl	8008214 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005308:	2300      	movs	r3, #0
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800530c:	e046      	b.n	800539c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531a:	461a      	mov	r2, r3
 800531c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005320:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005340:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534e:	461a      	mov	r2, r3
 8005350:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005354:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005366:	0151      	lsls	r1, r2, #5
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	440a      	add	r2, r1
 800536c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005370:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005374:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005390:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005394:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	3301      	adds	r3, #1
 800539a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d3b3      	bcc.n	800530e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80053b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d016      	beq.n	80053f0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d2:	f043 030b 	orr.w	r3, r3, #11
 80053d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e8:	f043 030b 	orr.w	r3, r3, #11
 80053ec:	6453      	str	r3, [r2, #68]	; 0x44
 80053ee:	e015      	b.n	800541c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005402:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005406:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005416:	f043 030b 	orr.w	r3, r3, #11
 800541a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800542a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800542e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005440:	461a      	mov	r2, r3
 8005442:	f003 ffcd 	bl	80093e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005454:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f003 fefc 	bl	8009258 <USB_ReadInterrupts>
 8005460:	4603      	mov	r3, r0
 8005462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800546a:	d124      	bne.n	80054b6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4618      	mov	r0, r3
 8005472:	f003 ff92 	bl	800939a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f002 ff47 	bl	800830e <USB_GetDevSpeed>
 8005480:	4603      	mov	r3, r0
 8005482:	461a      	mov	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681c      	ldr	r4, [r3, #0]
 800548c:	f001 fa78 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 8005490:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005496:	b2db      	uxtb	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	4620      	mov	r0, r4
 800549c:	f002 fc46 	bl	8007d2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f006 faa6 	bl	800b9f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80054b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f003 fecc 	bl	8009258 <USB_ReadInterrupts>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d10a      	bne.n	80054e0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f006 fa83 	bl	800b9d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f002 0208 	and.w	r2, r2, #8
 80054de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f003 feb7 	bl	8009258 <USB_ReadInterrupts>
 80054ea:	4603      	mov	r3, r0
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	2b80      	cmp	r3, #128	; 0x80
 80054f2:	d122      	bne.n	800553a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005500:	2301      	movs	r3, #1
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
 8005504:	e014      	b.n	8005530 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550a:	4613      	mov	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d105      	bne.n	800552a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	b2db      	uxtb	r3, r3
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fb27 	bl	8005b78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	3301      	adds	r3, #1
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005536:	429a      	cmp	r2, r3
 8005538:	d3e5      	bcc.n	8005506 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f003 fe8a 	bl	8009258 <USB_ReadInterrupts>
 8005544:	4603      	mov	r3, r0
 8005546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800554a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554e:	d13b      	bne.n	80055c8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005550:	2301      	movs	r3, #1
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
 8005554:	e02b      	b.n	80055ae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3340      	adds	r3, #64	; 0x40
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d115      	bne.n	80055a8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800557c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800557e:	2b00      	cmp	r3, #0
 8005580:	da12      	bge.n	80055a8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005586:	4613      	mov	r3, r2
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	333f      	adds	r3, #63	; 0x3f
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	b2db      	uxtb	r3, r3
 800559a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fae8 	bl	8005b78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	3301      	adds	r3, #1
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d3ce      	bcc.n	8005556 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695a      	ldr	r2, [r3, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80055c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f003 fe43 	bl	8009258 <USB_ReadInterrupts>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055dc:	d155      	bne.n	800568a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055de:	2301      	movs	r3, #1
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
 80055e2:	e045      	b.n	8005670 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f8:	4613      	mov	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d12e      	bne.n	800566a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800560c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800560e:	2b00      	cmp	r3, #0
 8005610:	da2b      	bge.n	800566a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800561e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005622:	429a      	cmp	r2, r3
 8005624:	d121      	bne.n	800566a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562a:	4613      	mov	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005638:	2201      	movs	r2, #1
 800563a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005666:	6053      	str	r3, [r2, #4]
            break;
 8005668:	e007      	b.n	800567a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	3301      	adds	r3, #1
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005676:	429a      	cmp	r2, r3
 8005678:	d3b4      	bcc.n	80055e4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695a      	ldr	r2, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f003 fde2 	bl	8009258 <USB_ReadInterrupts>
 8005694:	4603      	mov	r3, r0
 8005696:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569e:	d10a      	bne.n	80056b6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f006 fa27 	bl	800baf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80056b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f003 fdcc 	bl	8009258 <USB_ReadInterrupts>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d115      	bne.n	80056f6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f006 fa17 	bl	800bb10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6859      	ldr	r1, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
 80056f2:	e000      	b.n	80056f6 <HAL_PCD_IRQHandler+0x938>
      return;
 80056f4:	bf00      	nop
    }
  }
}
 80056f6:	3734      	adds	r7, #52	; 0x34
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd90      	pop	{r4, r7, pc}

080056fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_PCD_SetAddress+0x1a>
 8005712:	2302      	movs	r3, #2
 8005714:	e013      	b.n	800573e <HAL_PCD_SetAddress+0x42>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	4611      	mov	r1, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f003 fd2a 	bl	8009188 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	4608      	mov	r0, r1
 8005750:	4611      	mov	r1, r2
 8005752:	461a      	mov	r2, r3
 8005754:	4603      	mov	r3, r0
 8005756:	70fb      	strb	r3, [r7, #3]
 8005758:	460b      	mov	r3, r1
 800575a:	803b      	strh	r3, [r7, #0]
 800575c:	4613      	mov	r3, r2
 800575e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005768:	2b00      	cmp	r3, #0
 800576a:	da0f      	bge.n	800578c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	f003 020f 	and.w	r2, r3, #15
 8005772:	4613      	mov	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	3338      	adds	r3, #56	; 0x38
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	4413      	add	r3, r2
 8005780:	3304      	adds	r3, #4
 8005782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	705a      	strb	r2, [r3, #1]
 800578a:	e00f      	b.n	80057ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	f003 020f 	and.w	r2, r3, #15
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	3304      	adds	r3, #4
 80057a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80057b8:	883a      	ldrh	r2, [r7, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	78ba      	ldrb	r2, [r7, #2]
 80057c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d004      	beq.n	80057d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80057d6:	78bb      	ldrb	r3, [r7, #2]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d102      	bne.n	80057e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_PCD_EP_Open+0xaa>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e00e      	b.n	800580e <HAL_PCD_EP_Open+0xc8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	4618      	mov	r0, r3
 8005800:	f002 fdaa 	bl	8008358 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800580c:	7afb      	ldrb	r3, [r7, #11]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005826:	2b00      	cmp	r3, #0
 8005828:	da0f      	bge.n	800584a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	f003 020f 	and.w	r2, r3, #15
 8005830:	4613      	mov	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	3338      	adds	r3, #56	; 0x38
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	4413      	add	r3, r2
 800583e:	3304      	adds	r3, #4
 8005840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	705a      	strb	r2, [r3, #1]
 8005848:	e00f      	b.n	800586a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	4613      	mov	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	4413      	add	r3, r2
 8005860:	3304      	adds	r3, #4
 8005862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	b2da      	uxtb	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_PCD_EP_Close+0x6e>
 8005880:	2302      	movs	r3, #2
 8005882:	e00e      	b.n	80058a2 <HAL_PCD_EP_Close+0x8c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68f9      	ldr	r1, [r7, #12]
 8005892:	4618      	mov	r0, r3
 8005894:	f002 fde8 	bl	8008468 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b086      	sub	sp, #24
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	460b      	mov	r3, r1
 80058b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058ba:	7afb      	ldrb	r3, [r7, #11]
 80058bc:	f003 020f 	and.w	r2, r3, #15
 80058c0:	4613      	mov	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	3304      	adds	r3, #4
 80058d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2200      	movs	r2, #0
 80058e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2200      	movs	r2, #0
 80058ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ec:	7afb      	ldrb	r3, [r7, #11]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d102      	bne.n	8005906 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005906:	7afb      	ldrb	r3, [r7, #11]
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	2b00      	cmp	r3, #0
 800590e:	d109      	bne.n	8005924 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	6979      	ldr	r1, [r7, #20]
 800591e:	f003 f8c7 	bl	8008ab0 <USB_EP0StartXfer>
 8005922:	e008      	b.n	8005936 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	6979      	ldr	r1, [r7, #20]
 8005932:	f002 fe75 	bl	8008620 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005962:	681b      	ldr	r3, [r3, #0]
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	607a      	str	r2, [r7, #4]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	460b      	mov	r3, r1
 800597e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005980:	7afb      	ldrb	r3, [r7, #11]
 8005982:	f003 020f 	and.w	r2, r3, #15
 8005986:	4613      	mov	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	3338      	adds	r3, #56	; 0x38
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	3304      	adds	r3, #4
 8005996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2200      	movs	r2, #0
 80059a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2201      	movs	r2, #1
 80059ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059b0:	7afb      	ldrb	r3, [r7, #11]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d102      	bne.n	80059ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	6979      	ldr	r1, [r7, #20]
 80059e2:	f003 f865 	bl	8008ab0 <USB_EP0StartXfer>
 80059e6:	e008      	b.n	80059fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	6979      	ldr	r1, [r7, #20]
 80059f6:	f002 fe13 	bl	8008620 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	f003 020f 	and.w	r2, r3, #15
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d901      	bls.n	8005a22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e050      	b.n	8005ac4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	da0f      	bge.n	8005a4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	f003 020f 	and.w	r2, r3, #15
 8005a30:	4613      	mov	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	4413      	add	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	3338      	adds	r3, #56	; 0x38
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	3304      	adds	r3, #4
 8005a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	705a      	strb	r2, [r3, #1]
 8005a48:	e00d      	b.n	8005a66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a4a:	78fa      	ldrb	r2, [r7, #3]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_PCD_EP_SetStall+0x82>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e01e      	b.n	8005ac4 <HAL_PCD_EP_SetStall+0xc0>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f003 faa3 	bl	8008fe0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	b2d9      	uxtb	r1, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f003 fc93 	bl	80093e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	f003 020f 	and.w	r2, r3, #15
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d901      	bls.n	8005aea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e042      	b.n	8005b70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	da0f      	bge.n	8005b12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	f003 020f 	and.w	r2, r3, #15
 8005af8:	4613      	mov	r3, r2
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	3338      	adds	r3, #56	; 0x38
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	4413      	add	r3, r2
 8005b06:	3304      	adds	r3, #4
 8005b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	705a      	strb	r2, [r3, #1]
 8005b10:	e00f      	b.n	8005b32 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	f003 020f 	and.w	r2, r3, #15
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	4413      	add	r3, r2
 8005b28:	3304      	adds	r3, #4
 8005b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_PCD_EP_ClrStall+0x86>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e00e      	b.n	8005b70 <HAL_PCD_EP_ClrStall+0xa4>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f003 faab 	bl	80090bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	da0c      	bge.n	8005ba6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	f003 020f 	and.w	r2, r3, #15
 8005b92:	4613      	mov	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	3338      	adds	r3, #56	; 0x38
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e00c      	b.n	8005bc0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ba6:	78fb      	ldrb	r3, [r7, #3]
 8005ba8:	f003 020f 	and.w	r2, r3, #15
 8005bac:	4613      	mov	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	4413      	add	r3, r2
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68f9      	ldr	r1, [r7, #12]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f003 f8ca 	bl	8008d60 <USB_EPStopXfer>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b08a      	sub	sp, #40	; 0x28
 8005bde:	af02      	add	r7, sp, #8
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	3338      	adds	r3, #56	; 0x38
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	3304      	adds	r3, #4
 8005c00:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a1a      	ldr	r2, [r3, #32]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d901      	bls.n	8005c12 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e06c      	b.n	8005cec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d902      	bls.n	8005c2e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	3303      	adds	r3, #3
 8005c32:	089b      	lsrs	r3, r3, #2
 8005c34:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c36:	e02b      	b.n	8005c90 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d902      	bls.n	8005c54 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	3303      	adds	r3, #3
 8005c58:	089b      	lsrs	r3, r3, #2
 8005c5a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6919      	ldr	r1, [r3, #16]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	4603      	mov	r3, r0
 8005c72:	6978      	ldr	r0, [r7, #20]
 8005c74:	f003 f91e 	bl	8008eb4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	441a      	add	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a1a      	ldr	r2, [r3, #32]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	441a      	add	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d809      	bhi.n	8005cba <PCD_WriteEmptyTxFifo+0xe0>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1a      	ldr	r2, [r3, #32]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d203      	bcs.n	8005cba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1be      	bne.n	8005c38 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d811      	bhi.n	8005cea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	2201      	movs	r2, #1
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	6939      	ldr	r1, [r7, #16]
 8005ce2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3720      	adds	r7, #32
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	333c      	adds	r3, #60	; 0x3c
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d17b      	bne.n	8005e22 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d015      	beq.n	8005d60 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	4a61      	ldr	r2, [pc, #388]	; (8005ebc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	f240 80b9 	bls.w	8005eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80b3 	beq.w	8005eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d56:	461a      	mov	r2, r3
 8005d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d5c:	6093      	str	r3, [r2, #8]
 8005d5e:	e0a7      	b.n	8005eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d009      	beq.n	8005d7e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	461a      	mov	r2, r3
 8005d78:	2320      	movs	r3, #32
 8005d7a:	6093      	str	r3, [r2, #8]
 8005d7c:	e098      	b.n	8005eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f040 8093 	bne.w	8005eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	4a4b      	ldr	r2, [pc, #300]	; (8005ebc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d90f      	bls.n	8005db2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	461a      	mov	r2, r3
 8005daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dae:	6093      	str	r3, [r2, #8]
 8005db0:	e07e      	b.n	8005eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	0159      	lsls	r1, r3, #5
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	440b      	add	r3, r1
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dde:	1ad2      	subs	r2, r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d114      	bne.n	8005e14 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d109      	bne.n	8005e06 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	2101      	movs	r1, #1
 8005e00:	f003 faee 	bl	80093e0 <USB_EP0_OutStart>
 8005e04:	e006      	b.n	8005e14 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	441a      	add	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f005 fda6 	bl	800b96c <HAL_PCD_DataOutStageCallback>
 8005e20:	e046      	b.n	8005eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	4a26      	ldr	r2, [pc, #152]	; (8005ec0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d124      	bne.n	8005e74 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e40:	461a      	mov	r2, r3
 8005e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e46:	6093      	str	r3, [r2, #8]
 8005e48:	e032      	b.n	8005eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	461a      	mov	r2, r3
 8005e62:	2320      	movs	r3, #32
 8005e64:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f005 fd7d 	bl	800b96c <HAL_PCD_DataOutStageCallback>
 8005e72:	e01d      	b.n	8005eb0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d114      	bne.n	8005ea4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d108      	bne.n	8005ea4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	f003 fa9e 	bl	80093e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f005 fd5e 	bl	800b96c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	4f54300a 	.word	0x4f54300a
 8005ec0:	4f54310a 	.word	0x4f54310a

08005ec4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	333c      	adds	r3, #60	; 0x3c
 8005edc:	3304      	adds	r3, #4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d90e      	bls.n	8005f18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	461a      	mov	r2, r3
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f005 fd15 	bl	800b948 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d90c      	bls.n	8005f40 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d108      	bne.n	8005f40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	f003 fa50 	bl	80093e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	4f54300a 	.word	0x4f54300a

08005f50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d107      	bne.n	8005f7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f6e:	883b      	ldrh	r3, [r7, #0]
 8005f70:	0419      	lsls	r1, r3, #16
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005f7c:	e028      	b.n	8005fd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	0c1b      	lsrs	r3, r3, #16
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	4413      	add	r3, r2
 8005f8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]
 8005f90:	e00d      	b.n	8005fae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	3340      	adds	r3, #64	; 0x40
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	0c1b      	lsrs	r3, r3, #16
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	3301      	adds	r3, #1
 8005fac:	73fb      	strb	r3, [r7, #15]
 8005fae:	7bfa      	ldrb	r2, [r7, #15]
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d3ec      	bcc.n	8005f92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005fb8:	883b      	ldrh	r3, [r7, #0]
 8005fba:	0418      	lsls	r0, r3, #16
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6819      	ldr	r1, [r3, #0]
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	4302      	orrs	r2, r0
 8005fc8:	3340      	adds	r3, #64	; 0x40
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	887a      	ldrh	r2, [r7, #2]
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	4a1f      	ldr	r2, [pc, #124]	; (80060a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800602c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006030:	6413      	str	r3, [r2, #64]	; 0x40
 8006032:	4b1d      	ldr	r3, [pc, #116]	; (80060a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800603e:	4b1b      	ldr	r3, [pc, #108]	; (80060ac <HAL_PWREx_EnableOverDrive+0x94>)
 8006040:	2201      	movs	r2, #1
 8006042:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006044:	f7fd f86a 	bl	800311c <HAL_GetTick>
 8006048:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800604a:	e009      	b.n	8006060 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800604c:	f7fd f866 	bl	800311c <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800605a:	d901      	bls.n	8006060 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e01f      	b.n	80060a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006060:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800606c:	d1ee      	bne.n	800604c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800606e:	4b11      	ldr	r3, [pc, #68]	; (80060b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006070:	2201      	movs	r2, #1
 8006072:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006074:	f7fd f852 	bl	800311c <HAL_GetTick>
 8006078:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800607a:	e009      	b.n	8006090 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800607c:	f7fd f84e 	bl	800311c <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800608a:	d901      	bls.n	8006090 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e007      	b.n	80060a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800609c:	d1ee      	bne.n	800607c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40023800 	.word	0x40023800
 80060ac:	420e0040 	.word	0x420e0040
 80060b0:	40007000 	.word	0x40007000
 80060b4:	420e0044 	.word	0x420e0044

080060b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e267      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d075      	beq.n	80061c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060d6:	4b88      	ldr	r3, [pc, #544]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 030c 	and.w	r3, r3, #12
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d00c      	beq.n	80060fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060e2:	4b85      	ldr	r3, [pc, #532]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d112      	bne.n	8006114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060ee:	4b82      	ldr	r3, [pc, #520]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060fa:	d10b      	bne.n	8006114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fc:	4b7e      	ldr	r3, [pc, #504]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d05b      	beq.n	80061c0 <HAL_RCC_OscConfig+0x108>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d157      	bne.n	80061c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e242      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611c:	d106      	bne.n	800612c <HAL_RCC_OscConfig+0x74>
 800611e:	4b76      	ldr	r3, [pc, #472]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a75      	ldr	r2, [pc, #468]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e01d      	b.n	8006168 <HAL_RCC_OscConfig+0xb0>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006134:	d10c      	bne.n	8006150 <HAL_RCC_OscConfig+0x98>
 8006136:	4b70      	ldr	r3, [pc, #448]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a6f      	ldr	r2, [pc, #444]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800613c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	4b6d      	ldr	r3, [pc, #436]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a6c      	ldr	r2, [pc, #432]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	e00b      	b.n	8006168 <HAL_RCC_OscConfig+0xb0>
 8006150:	4b69      	ldr	r3, [pc, #420]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a68      	ldr	r2, [pc, #416]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	4b66      	ldr	r3, [pc, #408]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a65      	ldr	r2, [pc, #404]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d013      	beq.n	8006198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006170:	f7fc ffd4 	bl	800311c <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006178:	f7fc ffd0 	bl	800311c <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b64      	cmp	r3, #100	; 0x64
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e207      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800618a:	4b5b      	ldr	r3, [pc, #364]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0xc0>
 8006196:	e014      	b.n	80061c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006198:	f7fc ffc0 	bl	800311c <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061a0:	f7fc ffbc 	bl	800311c <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	; 0x64
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e1f3      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061b2:	4b51      	ldr	r3, [pc, #324]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f0      	bne.n	80061a0 <HAL_RCC_OscConfig+0xe8>
 80061be:	e000      	b.n	80061c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d063      	beq.n	8006296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061ce:	4b4a      	ldr	r3, [pc, #296]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00b      	beq.n	80061f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061da:	4b47      	ldr	r3, [pc, #284]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d11c      	bne.n	8006220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061e6:	4b44      	ldr	r3, [pc, #272]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d116      	bne.n	8006220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061f2:	4b41      	ldr	r3, [pc, #260]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_RCC_OscConfig+0x152>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d001      	beq.n	800620a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e1c7      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620a:	4b3b      	ldr	r3, [pc, #236]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	4937      	ldr	r1, [pc, #220]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800621e:	e03a      	b.n	8006296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006228:	4b34      	ldr	r3, [pc, #208]	; (80062fc <HAL_RCC_OscConfig+0x244>)
 800622a:	2201      	movs	r2, #1
 800622c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fc ff75 	bl	800311c <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006236:	f7fc ff71 	bl	800311c <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e1a8      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006248:	4b2b      	ldr	r3, [pc, #172]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0f0      	beq.n	8006236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006254:	4b28      	ldr	r3, [pc, #160]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	4925      	ldr	r1, [pc, #148]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006264:	4313      	orrs	r3, r2
 8006266:	600b      	str	r3, [r1, #0]
 8006268:	e015      	b.n	8006296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800626a:	4b24      	ldr	r3, [pc, #144]	; (80062fc <HAL_RCC_OscConfig+0x244>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fc ff54 	bl	800311c <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006278:	f7fc ff50 	bl	800311c <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e187      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800628a:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d036      	beq.n	8006310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d016      	beq.n	80062d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062aa:	4b15      	ldr	r3, [pc, #84]	; (8006300 <HAL_RCC_OscConfig+0x248>)
 80062ac:	2201      	movs	r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b0:	f7fc ff34 	bl	800311c <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b8:	f7fc ff30 	bl	800311c <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e167      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ca:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80062cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f0      	beq.n	80062b8 <HAL_RCC_OscConfig+0x200>
 80062d6:	e01b      	b.n	8006310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062d8:	4b09      	ldr	r3, [pc, #36]	; (8006300 <HAL_RCC_OscConfig+0x248>)
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062de:	f7fc ff1d 	bl	800311c <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062e4:	e00e      	b.n	8006304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062e6:	f7fc ff19 	bl	800311c <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d907      	bls.n	8006304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e150      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
 80062f8:	40023800 	.word	0x40023800
 80062fc:	42470000 	.word	0x42470000
 8006300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006304:	4b88      	ldr	r3, [pc, #544]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1ea      	bne.n	80062e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8097 	beq.w	800644c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800631e:	2300      	movs	r3, #0
 8006320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006322:	4b81      	ldr	r3, [pc, #516]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10f      	bne.n	800634e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800632e:	2300      	movs	r3, #0
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	4b7d      	ldr	r3, [pc, #500]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	4a7c      	ldr	r2, [pc, #496]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800633c:	6413      	str	r3, [r2, #64]	; 0x40
 800633e:	4b7a      	ldr	r3, [pc, #488]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006346:	60bb      	str	r3, [r7, #8]
 8006348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800634a:	2301      	movs	r3, #1
 800634c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800634e:	4b77      	ldr	r3, [pc, #476]	; (800652c <HAL_RCC_OscConfig+0x474>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d118      	bne.n	800638c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800635a:	4b74      	ldr	r3, [pc, #464]	; (800652c <HAL_RCC_OscConfig+0x474>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a73      	ldr	r2, [pc, #460]	; (800652c <HAL_RCC_OscConfig+0x474>)
 8006360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006366:	f7fc fed9 	bl	800311c <HAL_GetTick>
 800636a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636c:	e008      	b.n	8006380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800636e:	f7fc fed5 	bl	800311c <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e10c      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006380:	4b6a      	ldr	r3, [pc, #424]	; (800652c <HAL_RCC_OscConfig+0x474>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0f0      	beq.n	800636e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d106      	bne.n	80063a2 <HAL_RCC_OscConfig+0x2ea>
 8006394:	4b64      	ldr	r3, [pc, #400]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006398:	4a63      	ldr	r2, [pc, #396]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 800639a:	f043 0301 	orr.w	r3, r3, #1
 800639e:	6713      	str	r3, [r2, #112]	; 0x70
 80063a0:	e01c      	b.n	80063dc <HAL_RCC_OscConfig+0x324>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b05      	cmp	r3, #5
 80063a8:	d10c      	bne.n	80063c4 <HAL_RCC_OscConfig+0x30c>
 80063aa:	4b5f      	ldr	r3, [pc, #380]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	4a5e      	ldr	r2, [pc, #376]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063b0:	f043 0304 	orr.w	r3, r3, #4
 80063b4:	6713      	str	r3, [r2, #112]	; 0x70
 80063b6:	4b5c      	ldr	r3, [pc, #368]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ba:	4a5b      	ldr	r2, [pc, #364]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	6713      	str	r3, [r2, #112]	; 0x70
 80063c2:	e00b      	b.n	80063dc <HAL_RCC_OscConfig+0x324>
 80063c4:	4b58      	ldr	r3, [pc, #352]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c8:	4a57      	ldr	r2, [pc, #348]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063ca:	f023 0301 	bic.w	r3, r3, #1
 80063ce:	6713      	str	r3, [r2, #112]	; 0x70
 80063d0:	4b55      	ldr	r3, [pc, #340]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d4:	4a54      	ldr	r2, [pc, #336]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063d6:	f023 0304 	bic.w	r3, r3, #4
 80063da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d015      	beq.n	8006410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e4:	f7fc fe9a 	bl	800311c <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ea:	e00a      	b.n	8006402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ec:	f7fc fe96 	bl	800311c <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e0cb      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006402:	4b49      	ldr	r3, [pc, #292]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0ee      	beq.n	80063ec <HAL_RCC_OscConfig+0x334>
 800640e:	e014      	b.n	800643a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006410:	f7fc fe84 	bl	800311c <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006416:	e00a      	b.n	800642e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006418:	f7fc fe80 	bl	800311c <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	; 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e0b5      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800642e:	4b3e      	ldr	r3, [pc, #248]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1ee      	bne.n	8006418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d105      	bne.n	800644c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006440:	4b39      	ldr	r3, [pc, #228]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	4a38      	ldr	r2, [pc, #224]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800644a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80a1 	beq.w	8006598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006456:	4b34      	ldr	r3, [pc, #208]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
 800645e:	2b08      	cmp	r3, #8
 8006460:	d05c      	beq.n	800651c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d141      	bne.n	80064ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800646a:	4b31      	ldr	r3, [pc, #196]	; (8006530 <HAL_RCC_OscConfig+0x478>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006470:	f7fc fe54 	bl	800311c <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006478:	f7fc fe50 	bl	800311c <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e087      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800648a:	4b27      	ldr	r3, [pc, #156]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69da      	ldr	r2, [r3, #28]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	019b      	lsls	r3, r3, #6
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	3b01      	subs	r3, #1
 80064b0:	041b      	lsls	r3, r3, #16
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	061b      	lsls	r3, r3, #24
 80064ba:	491b      	ldr	r1, [pc, #108]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064c0:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <HAL_RCC_OscConfig+0x478>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c6:	f7fc fe29 	bl	800311c <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ce:	f7fc fe25 	bl	800311c <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e05c      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064e0:	4b11      	ldr	r3, [pc, #68]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0f0      	beq.n	80064ce <HAL_RCC_OscConfig+0x416>
 80064ec:	e054      	b.n	8006598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ee:	4b10      	ldr	r3, [pc, #64]	; (8006530 <HAL_RCC_OscConfig+0x478>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f4:	f7fc fe12 	bl	800311c <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064fc:	f7fc fe0e 	bl	800311c <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e045      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800650e:	4b06      	ldr	r3, [pc, #24]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0x444>
 800651a:	e03d      	b.n	8006598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d107      	bne.n	8006534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e038      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
 8006528:	40023800 	.word	0x40023800
 800652c:	40007000 	.word	0x40007000
 8006530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006534:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <HAL_RCC_OscConfig+0x4ec>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d028      	beq.n	8006594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800654c:	429a      	cmp	r2, r3
 800654e:	d121      	bne.n	8006594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800655a:	429a      	cmp	r2, r3
 800655c:	d11a      	bne.n	8006594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006564:	4013      	ands	r3, r2
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800656a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800656c:	4293      	cmp	r3, r2
 800656e:	d111      	bne.n	8006594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	3b01      	subs	r3, #1
 800657e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006580:	429a      	cmp	r2, r3
 8006582:	d107      	bne.n	8006594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006590:	429a      	cmp	r2, r3
 8006592:	d001      	beq.n	8006598 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40023800 	.word	0x40023800

080065a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0cc      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065bc:	4b68      	ldr	r3, [pc, #416]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d90c      	bls.n	80065e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ca:	4b65      	ldr	r3, [pc, #404]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d2:	4b63      	ldr	r3, [pc, #396]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d001      	beq.n	80065e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e0b8      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d020      	beq.n	8006632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d005      	beq.n	8006608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065fc:	4b59      	ldr	r3, [pc, #356]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	4a58      	ldr	r2, [pc, #352]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006614:	4b53      	ldr	r3, [pc, #332]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	4a52      	ldr	r2, [pc, #328]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 800661a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800661e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006620:	4b50      	ldr	r3, [pc, #320]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	494d      	ldr	r1, [pc, #308]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	4313      	orrs	r3, r2
 8006630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d044      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d107      	bne.n	8006656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006646:	4b47      	ldr	r3, [pc, #284]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d119      	bne.n	8006686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e07f      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b02      	cmp	r3, #2
 800665c:	d003      	beq.n	8006666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006662:	2b03      	cmp	r3, #3
 8006664:	d107      	bne.n	8006676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006666:	4b3f      	ldr	r3, [pc, #252]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e06f      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006676:	4b3b      	ldr	r3, [pc, #236]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e067      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006686:	4b37      	ldr	r3, [pc, #220]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f023 0203 	bic.w	r2, r3, #3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	4934      	ldr	r1, [pc, #208]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006694:	4313      	orrs	r3, r2
 8006696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006698:	f7fc fd40 	bl	800311c <HAL_GetTick>
 800669c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800669e:	e00a      	b.n	80066b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066a0:	f7fc fd3c 	bl	800311c <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e04f      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b6:	4b2b      	ldr	r3, [pc, #172]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 020c 	and.w	r2, r3, #12
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d1eb      	bne.n	80066a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066c8:	4b25      	ldr	r3, [pc, #148]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d20c      	bcs.n	80066f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d6:	4b22      	ldr	r3, [pc, #136]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066de:	4b20      	ldr	r3, [pc, #128]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d001      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e032      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066fc:	4b19      	ldr	r3, [pc, #100]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4916      	ldr	r1, [pc, #88]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	4313      	orrs	r3, r2
 800670c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	2b00      	cmp	r3, #0
 8006718:	d009      	beq.n	800672e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800671a:	4b12      	ldr	r3, [pc, #72]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	490e      	ldr	r1, [pc, #56]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	4313      	orrs	r3, r2
 800672c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800672e:	f000 f821 	bl	8006774 <HAL_RCC_GetSysClockFreq>
 8006732:	4602      	mov	r2, r0
 8006734:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	091b      	lsrs	r3, r3, #4
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	490a      	ldr	r1, [pc, #40]	; (8006768 <HAL_RCC_ClockConfig+0x1c0>)
 8006740:	5ccb      	ldrb	r3, [r1, r3]
 8006742:	fa22 f303 	lsr.w	r3, r2, r3
 8006746:	4a09      	ldr	r2, [pc, #36]	; (800676c <HAL_RCC_ClockConfig+0x1c4>)
 8006748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800674a:	4b09      	ldr	r3, [pc, #36]	; (8006770 <HAL_RCC_ClockConfig+0x1c8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f7fc fca0 	bl	8003094 <HAL_InitTick>

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	40023c00 	.word	0x40023c00
 8006764:	40023800 	.word	0x40023800
 8006768:	0800ec48 	.word	0x0800ec48
 800676c:	20000000 	.word	0x20000000
 8006770:	20000080 	.word	0x20000080

08006774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006778:	b094      	sub	sp, #80	; 0x50
 800677a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	647b      	str	r3, [r7, #68]	; 0x44
 8006780:	2300      	movs	r3, #0
 8006782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006784:	2300      	movs	r3, #0
 8006786:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800678c:	4b79      	ldr	r3, [pc, #484]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f003 030c 	and.w	r3, r3, #12
 8006794:	2b08      	cmp	r3, #8
 8006796:	d00d      	beq.n	80067b4 <HAL_RCC_GetSysClockFreq+0x40>
 8006798:	2b08      	cmp	r3, #8
 800679a:	f200 80e1 	bhi.w	8006960 <HAL_RCC_GetSysClockFreq+0x1ec>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_RCC_GetSysClockFreq+0x34>
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d003      	beq.n	80067ae <HAL_RCC_GetSysClockFreq+0x3a>
 80067a6:	e0db      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067a8:	4b73      	ldr	r3, [pc, #460]	; (8006978 <HAL_RCC_GetSysClockFreq+0x204>)
 80067aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80067ac:	e0db      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067ae:	4b73      	ldr	r3, [pc, #460]	; (800697c <HAL_RCC_GetSysClockFreq+0x208>)
 80067b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067b2:	e0d8      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067b4:	4b6f      	ldr	r3, [pc, #444]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067be:	4b6d      	ldr	r3, [pc, #436]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d063      	beq.n	8006892 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ca:	4b6a      	ldr	r3, [pc, #424]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	099b      	lsrs	r3, r3, #6
 80067d0:	2200      	movs	r2, #0
 80067d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80067d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067dc:	633b      	str	r3, [r7, #48]	; 0x30
 80067de:	2300      	movs	r3, #0
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34
 80067e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80067e6:	4622      	mov	r2, r4
 80067e8:	462b      	mov	r3, r5
 80067ea:	f04f 0000 	mov.w	r0, #0
 80067ee:	f04f 0100 	mov.w	r1, #0
 80067f2:	0159      	lsls	r1, r3, #5
 80067f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067f8:	0150      	lsls	r0, r2, #5
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4621      	mov	r1, r4
 8006800:	1a51      	subs	r1, r2, r1
 8006802:	6139      	str	r1, [r7, #16]
 8006804:	4629      	mov	r1, r5
 8006806:	eb63 0301 	sbc.w	r3, r3, r1
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006818:	4659      	mov	r1, fp
 800681a:	018b      	lsls	r3, r1, #6
 800681c:	4651      	mov	r1, sl
 800681e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006822:	4651      	mov	r1, sl
 8006824:	018a      	lsls	r2, r1, #6
 8006826:	4651      	mov	r1, sl
 8006828:	ebb2 0801 	subs.w	r8, r2, r1
 800682c:	4659      	mov	r1, fp
 800682e:	eb63 0901 	sbc.w	r9, r3, r1
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800683e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006846:	4690      	mov	r8, r2
 8006848:	4699      	mov	r9, r3
 800684a:	4623      	mov	r3, r4
 800684c:	eb18 0303 	adds.w	r3, r8, r3
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	462b      	mov	r3, r5
 8006854:	eb49 0303 	adc.w	r3, r9, r3
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	f04f 0200 	mov.w	r2, #0
 800685e:	f04f 0300 	mov.w	r3, #0
 8006862:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006866:	4629      	mov	r1, r5
 8006868:	024b      	lsls	r3, r1, #9
 800686a:	4621      	mov	r1, r4
 800686c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006870:	4621      	mov	r1, r4
 8006872:	024a      	lsls	r2, r1, #9
 8006874:	4610      	mov	r0, r2
 8006876:	4619      	mov	r1, r3
 8006878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800687a:	2200      	movs	r2, #0
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
 800687e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006880:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006884:	f7fa f9a0 	bl	8000bc8 <__aeabi_uldivmod>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4613      	mov	r3, r2
 800688e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006890:	e058      	b.n	8006944 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006892:	4b38      	ldr	r3, [pc, #224]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	099b      	lsrs	r3, r3, #6
 8006898:	2200      	movs	r2, #0
 800689a:	4618      	mov	r0, r3
 800689c:	4611      	mov	r1, r2
 800689e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068a2:	623b      	str	r3, [r7, #32]
 80068a4:	2300      	movs	r3, #0
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
 80068a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068ac:	4642      	mov	r2, r8
 80068ae:	464b      	mov	r3, r9
 80068b0:	f04f 0000 	mov.w	r0, #0
 80068b4:	f04f 0100 	mov.w	r1, #0
 80068b8:	0159      	lsls	r1, r3, #5
 80068ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068be:	0150      	lsls	r0, r2, #5
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4641      	mov	r1, r8
 80068c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80068ca:	4649      	mov	r1, r9
 80068cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068e4:	ebb2 040a 	subs.w	r4, r2, sl
 80068e8:	eb63 050b 	sbc.w	r5, r3, fp
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	00eb      	lsls	r3, r5, #3
 80068f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068fa:	00e2      	lsls	r2, r4, #3
 80068fc:	4614      	mov	r4, r2
 80068fe:	461d      	mov	r5, r3
 8006900:	4643      	mov	r3, r8
 8006902:	18e3      	adds	r3, r4, r3
 8006904:	603b      	str	r3, [r7, #0]
 8006906:	464b      	mov	r3, r9
 8006908:	eb45 0303 	adc.w	r3, r5, r3
 800690c:	607b      	str	r3, [r7, #4]
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800691a:	4629      	mov	r1, r5
 800691c:	028b      	lsls	r3, r1, #10
 800691e:	4621      	mov	r1, r4
 8006920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006924:	4621      	mov	r1, r4
 8006926:	028a      	lsls	r2, r1, #10
 8006928:	4610      	mov	r0, r2
 800692a:	4619      	mov	r1, r3
 800692c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692e:	2200      	movs	r2, #0
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	61fa      	str	r2, [r7, #28]
 8006934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006938:	f7fa f946 	bl	8000bc8 <__aeabi_uldivmod>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4613      	mov	r3, r2
 8006942:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006944:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	0c1b      	lsrs	r3, r3, #16
 800694a:	f003 0303 	and.w	r3, r3, #3
 800694e:	3301      	adds	r3, #1
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006958:	fbb2 f3f3 	udiv	r3, r2, r3
 800695c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800695e:	e002      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <HAL_RCC_GetSysClockFreq+0x204>)
 8006962:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006968:	4618      	mov	r0, r3
 800696a:	3750      	adds	r7, #80	; 0x50
 800696c:	46bd      	mov	sp, r7
 800696e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006972:	bf00      	nop
 8006974:	40023800 	.word	0x40023800
 8006978:	00f42400 	.word	0x00f42400
 800697c:	007a1200 	.word	0x007a1200

08006980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <HAL_RCC_GetHCLKFreq+0x14>)
 8006986:	681b      	ldr	r3, [r3, #0]
}
 8006988:	4618      	mov	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000000 	.word	0x20000000

08006998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800699c:	f7ff fff0 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 80069a0:	4602      	mov	r2, r0
 80069a2:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	0a9b      	lsrs	r3, r3, #10
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	4903      	ldr	r1, [pc, #12]	; (80069bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ae:	5ccb      	ldrb	r3, [r1, r3]
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	40023800 	.word	0x40023800
 80069bc:	0800ec58 	.word	0x0800ec58

080069c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10b      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d105      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d075      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069f4:	4b91      	ldr	r3, [pc, #580]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069fa:	f7fc fb8f 	bl	800311c <HAL_GetTick>
 80069fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a00:	e008      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a02:	f7fc fb8b 	bl	800311c <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e189      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a14:	4b8a      	ldr	r3, [pc, #552]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f0      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d009      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	019a      	lsls	r2, r3, #6
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	071b      	lsls	r3, r3, #28
 8006a38:	4981      	ldr	r1, [pc, #516]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01f      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a4c:	4b7c      	ldr	r3, [pc, #496]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a52:	0f1b      	lsrs	r3, r3, #28
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	019a      	lsls	r2, r3, #6
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	061b      	lsls	r3, r3, #24
 8006a66:	431a      	orrs	r2, r3
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	071b      	lsls	r3, r3, #28
 8006a6c:	4974      	ldr	r1, [pc, #464]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a74:	4b72      	ldr	r3, [pc, #456]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a7a:	f023 021f 	bic.w	r2, r3, #31
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	496e      	ldr	r1, [pc, #440]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00d      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	019a      	lsls	r2, r3, #6
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	061b      	lsls	r3, r3, #24
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	071b      	lsls	r3, r3, #28
 8006aac:	4964      	ldr	r1, [pc, #400]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ab4:	4b61      	ldr	r3, [pc, #388]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aba:	f7fc fb2f 	bl	800311c <HAL_GetTick>
 8006abe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ac2:	f7fc fb2b 	bl	800311c <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e129      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ad4:	4b5a      	ldr	r3, [pc, #360]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0f0      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d105      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d079      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006af8:	4b52      	ldr	r3, [pc, #328]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006afe:	f7fc fb0d 	bl	800311c <HAL_GetTick>
 8006b02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b04:	e008      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006b06:	f7fc fb09 	bl	800311c <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e107      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b18:	4b49      	ldr	r3, [pc, #292]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b24:	d0ef      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d020      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b32:	4b43      	ldr	r3, [pc, #268]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b38:	0f1b      	lsrs	r3, r3, #28
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	019a      	lsls	r2, r3, #6
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	061b      	lsls	r3, r3, #24
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	071b      	lsls	r3, r3, #28
 8006b52:	493b      	ldr	r1, [pc, #236]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b5a:	4b39      	ldr	r3, [pc, #228]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	4934      	ldr	r1, [pc, #208]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01e      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b80:	4b2f      	ldr	r3, [pc, #188]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b86:	0e1b      	lsrs	r3, r3, #24
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	019a      	lsls	r2, r3, #6
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	061b      	lsls	r3, r3, #24
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	071b      	lsls	r3, r3, #28
 8006ba0:	4927      	ldr	r1, [pc, #156]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ba8:	4b25      	ldr	r3, [pc, #148]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	4922      	ldr	r1, [pc, #136]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006bbe:	4b21      	ldr	r3, [pc, #132]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bc4:	f7fc faaa 	bl	800311c <HAL_GetTick>
 8006bc8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006bcc:	f7fc faa6 	bl	800311c <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e0a4      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bde:	4b18      	ldr	r3, [pc, #96]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bea:	d1ef      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 808b 	beq.w	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	4a0f      	ldr	r2, [pc, #60]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c08:	6413      	str	r3, [r2, #64]	; 0x40
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c16:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a0b      	ldr	r2, [pc, #44]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c22:	f7fc fa7b 	bl	800311c <HAL_GetTick>
 8006c26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c28:	e010      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c2a:	f7fc fa77 	bl	800311c <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d909      	bls.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e075      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006c3c:	42470068 	.word	0x42470068
 8006c40:	40023800 	.word	0x40023800
 8006c44:	42470070 	.word	0x42470070
 8006c48:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c4c:	4b38      	ldr	r3, [pc, #224]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0e8      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c58:	4b36      	ldr	r3, [pc, #216]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d02f      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d028      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c76:	4b2f      	ldr	r3, [pc, #188]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c80:	4b2d      	ldr	r3, [pc, #180]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006c82:	2201      	movs	r2, #1
 8006c84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c86:	4b2c      	ldr	r3, [pc, #176]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c8c:	4a29      	ldr	r2, [pc, #164]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c92:	4b28      	ldr	r3, [pc, #160]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d114      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c9e:	f7fc fa3d 	bl	800311c <HAL_GetTick>
 8006ca2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca4:	e00a      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca6:	f7fc fa39 	bl	800311c <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e035      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbc:	4b1d      	ldr	r3, [pc, #116]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0ee      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cd4:	d10d      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006cd6:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cea:	4912      	ldr	r1, [pc, #72]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	608b      	str	r3, [r1, #8]
 8006cf0:	e005      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006cf2:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	4a0f      	ldr	r2, [pc, #60]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cf8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cfc:	6093      	str	r3, [r2, #8]
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d0a:	490a      	ldr	r1, [pc, #40]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0310 	and.w	r3, r3, #16
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d004      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006d22:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006d24:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40007000 	.word	0x40007000
 8006d34:	40023800 	.word	0x40023800
 8006d38:	42470e40 	.word	0x42470e40
 8006d3c:	424711e0 	.word	0x424711e0

08006d40 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e025      	b.n	8006da0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d106      	bne.n	8006d6e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f81d 	bl	8006da8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f000 fe57 	bl	8007a34 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	f000 feac 	bl	8007aee <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006dce:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d101      	bne.n	8006dda <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e021      	b.n	8006e1e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d002      	beq.n	8006de6 <HAL_SDRAM_SendCommand+0x2a>
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b05      	cmp	r3, #5
 8006de4:	d118      	bne.n	8006e18 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2202      	movs	r2, #2
 8006dea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fee2 	bl	8007bc0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d104      	bne.n	8006e0e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2205      	movs	r2, #5
 8006e08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006e0c:	e006      	b.n	8006e1c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006e16:	e001      	b.n	8006e1c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d101      	bne.n	8006e40 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e016      	b.n	8006e6e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d10f      	bne.n	8006e6c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 feed 	bl	8007c3a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e000      	b.n	8006e6e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e07b      	b.n	8006f80 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d108      	bne.n	8006ea2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e98:	d009      	beq.n	8006eae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	61da      	str	r2, [r3, #28]
 8006ea0:	e005      	b.n	8006eae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d106      	bne.n	8006ece <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fa fa43 	bl	8001354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f00:	431a      	orrs	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	ea42 0103 	orr.w	r1, r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	0c1b      	lsrs	r3, r3, #16
 8006f4c:	f003 0104 	and.w	r1, r3, #4
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	f003 0210 	and.w	r2, r3, #16
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69da      	ldr	r2, [r3, #28]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e01a      	b.n	8006fd0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fa fa16 	bl	80013e4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_SPI_Transmit+0x22>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e126      	b.n	8007248 <HAL_SPI_Transmit+0x270>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007002:	f7fc f88b 	bl	800311c <HAL_GetTick>
 8007006:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	d002      	beq.n	800701e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007018:	2302      	movs	r3, #2
 800701a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800701c:	e10b      	b.n	8007236 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <HAL_SPI_Transmit+0x52>
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d102      	bne.n	8007030 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800702e:	e102      	b.n	8007236 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2203      	movs	r2, #3
 8007034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	88fa      	ldrh	r2, [r7, #6]
 8007048:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	88fa      	ldrh	r2, [r7, #6]
 800704e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007076:	d10f      	bne.n	8007098 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007086:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007096:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d007      	beq.n	80070b6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070be:	d14b      	bne.n	8007158 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <HAL_SPI_Transmit+0xf6>
 80070c8:	8afb      	ldrh	r3, [r7, #22]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d13e      	bne.n	800714c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d2:	881a      	ldrh	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070de:	1c9a      	adds	r2, r3, #2
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070f2:	e02b      	b.n	800714c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d112      	bne.n	8007128 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	881a      	ldrh	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007112:	1c9a      	adds	r2, r3, #2
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800711c:	b29b      	uxth	r3, r3
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	86da      	strh	r2, [r3, #54]	; 0x36
 8007126:	e011      	b.n	800714c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007128:	f7fb fff8 	bl	800311c <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d803      	bhi.n	8007140 <HAL_SPI_Transmit+0x168>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713e:	d102      	bne.n	8007146 <HAL_SPI_Transmit+0x16e>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d102      	bne.n	800714c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	77fb      	strb	r3, [r7, #31]
          goto error;
 800714a:	e074      	b.n	8007236 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1ce      	bne.n	80070f4 <HAL_SPI_Transmit+0x11c>
 8007156:	e04c      	b.n	80071f2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_SPI_Transmit+0x18e>
 8007160:	8afb      	ldrh	r3, [r7, #22]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d140      	bne.n	80071e8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	330c      	adds	r3, #12
 8007170:	7812      	ldrb	r2, [r2, #0]
 8007172:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007182:	b29b      	uxth	r3, r3
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800718c:	e02c      	b.n	80071e8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b02      	cmp	r3, #2
 800719a:	d113      	bne.n	80071c4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	330c      	adds	r3, #12
 80071a6:	7812      	ldrb	r2, [r2, #0]
 80071a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80071c2:	e011      	b.n	80071e8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071c4:	f7fb ffaa 	bl	800311c <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d803      	bhi.n	80071dc <HAL_SPI_Transmit+0x204>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d102      	bne.n	80071e2 <HAL_SPI_Transmit+0x20a>
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d102      	bne.n	80071e8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071e6:	e026      	b.n	8007236 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1cd      	bne.n	800718e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fbda 	bl	80079b0 <SPI_EndRxTxTransaction>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2220      	movs	r2, #32
 8007206:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007210:	2300      	movs	r3, #0
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	77fb      	strb	r3, [r7, #31]
 8007232:	e000      	b.n	8007236 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007234:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007246:	7ffb      	ldrb	r3, [r7, #31]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3720      	adds	r7, #32
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b088      	sub	sp, #32
 8007254:	af02      	add	r7, sp, #8
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	4613      	mov	r3, r2
 800725e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800726c:	d112      	bne.n	8007294 <HAL_SPI_Receive+0x44>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10e      	bne.n	8007294 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2204      	movs	r2, #4
 800727a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800727e:	88fa      	ldrh	r2, [r7, #6]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4613      	mov	r3, r2
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f8f1 	bl	8007472 <HAL_SPI_TransmitReceive>
 8007290:	4603      	mov	r3, r0
 8007292:	e0ea      	b.n	800746a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_SPI_Receive+0x52>
 800729e:	2302      	movs	r3, #2
 80072a0:	e0e3      	b.n	800746a <HAL_SPI_Receive+0x21a>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072aa:	f7fb ff37 	bl	800311c <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d002      	beq.n	80072c2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80072bc:	2302      	movs	r3, #2
 80072be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072c0:	e0ca      	b.n	8007458 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <HAL_SPI_Receive+0x7e>
 80072c8:	88fb      	ldrh	r3, [r7, #6]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d102      	bne.n	80072d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072d2:	e0c1      	b.n	8007458 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2204      	movs	r2, #4
 80072d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	88fa      	ldrh	r2, [r7, #6]
 80072ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	88fa      	ldrh	r2, [r7, #6]
 80072f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800731a:	d10f      	bne.n	800733c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800732a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800733a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d007      	beq.n	800735a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007358:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d162      	bne.n	8007428 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007362:	e02e      	b.n	80073c2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b01      	cmp	r3, #1
 8007370:	d115      	bne.n	800739e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f103 020c 	add.w	r2, r3, #12
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	7812      	ldrb	r2, [r2, #0]
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800739c:	e011      	b.n	80073c2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800739e:	f7fb febd 	bl	800311c <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d803      	bhi.n	80073b6 <HAL_SPI_Receive+0x166>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b4:	d102      	bne.n	80073bc <HAL_SPI_Receive+0x16c>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d102      	bne.n	80073c2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073c0:	e04a      	b.n	8007458 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1cb      	bne.n	8007364 <HAL_SPI_Receive+0x114>
 80073cc:	e031      	b.n	8007432 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d113      	bne.n	8007404 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e6:	b292      	uxth	r2, r2
 80073e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	1c9a      	adds	r2, r3, #2
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007402:	e011      	b.n	8007428 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007404:	f7fb fe8a 	bl	800311c <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d803      	bhi.n	800741c <HAL_SPI_Receive+0x1cc>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d102      	bne.n	8007422 <HAL_SPI_Receive+0x1d2>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d102      	bne.n	8007428 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007426:	e017      	b.n	8007458 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1cd      	bne.n	80073ce <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 fa54 	bl	80078e4 <SPI_EndRxTransaction>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2220      	movs	r2, #32
 8007446:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
 8007454:	e000      	b.n	8007458 <HAL_SPI_Receive+0x208>
  }

error :
 8007456:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b08c      	sub	sp, #48	; 0x30
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007480:	2301      	movs	r3, #1
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x26>
 8007494:	2302      	movs	r3, #2
 8007496:	e18a      	b.n	80077ae <HAL_SPI_TransmitReceive+0x33c>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074a0:	f7fb fe3c 	bl	800311c <HAL_GetTick>
 80074a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074b6:	887b      	ldrh	r3, [r7, #2]
 80074b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d00f      	beq.n	80074e2 <HAL_SPI_TransmitReceive+0x70>
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c8:	d107      	bne.n	80074da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d103      	bne.n	80074da <HAL_SPI_TransmitReceive+0x68>
 80074d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d003      	beq.n	80074e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80074da:	2302      	movs	r3, #2
 80074dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074e0:	e15b      	b.n	800779a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <HAL_SPI_TransmitReceive+0x82>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <HAL_SPI_TransmitReceive+0x82>
 80074ee:	887b      	ldrh	r3, [r7, #2]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d103      	bne.n	80074fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074fa:	e14e      	b.n	800779a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b04      	cmp	r3, #4
 8007506:	d003      	beq.n	8007510 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2205      	movs	r2, #5
 800750c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	887a      	ldrh	r2, [r7, #2]
 8007520:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	887a      	ldrh	r2, [r7, #2]
 8007526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	887a      	ldrh	r2, [r7, #2]
 8007532:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	887a      	ldrh	r2, [r7, #2]
 8007538:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007550:	2b40      	cmp	r3, #64	; 0x40
 8007552:	d007      	beq.n	8007564 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800756c:	d178      	bne.n	8007660 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <HAL_SPI_TransmitReceive+0x10a>
 8007576:	8b7b      	ldrh	r3, [r7, #26]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d166      	bne.n	800764a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	881a      	ldrh	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758c:	1c9a      	adds	r2, r3, #2
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007596:	b29b      	uxth	r3, r3
 8007598:	3b01      	subs	r3, #1
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075a0:	e053      	b.n	800764a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d11b      	bne.n	80075e8 <HAL_SPI_TransmitReceive+0x176>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d016      	beq.n	80075e8 <HAL_SPI_TransmitReceive+0x176>
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d113      	bne.n	80075e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	881a      	ldrh	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d0:	1c9a      	adds	r2, r3, #2
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075da:	b29b      	uxth	r3, r3
 80075dc:	3b01      	subs	r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d119      	bne.n	800762a <HAL_SPI_TransmitReceive+0x1b8>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d014      	beq.n	800762a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760a:	b292      	uxth	r2, r2
 800760c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	1c9a      	adds	r2, r3, #2
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b29a      	uxth	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007626:	2301      	movs	r3, #1
 8007628:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800762a:	f7fb fd77 	bl	800311c <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007636:	429a      	cmp	r2, r3
 8007638:	d807      	bhi.n	800764a <HAL_SPI_TransmitReceive+0x1d8>
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007640:	d003      	beq.n	800764a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007648:	e0a7      	b.n	800779a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1a6      	bne.n	80075a2 <HAL_SPI_TransmitReceive+0x130>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007658:	b29b      	uxth	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1a1      	bne.n	80075a2 <HAL_SPI_TransmitReceive+0x130>
 800765e:	e07c      	b.n	800775a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <HAL_SPI_TransmitReceive+0x1fc>
 8007668:	8b7b      	ldrh	r3, [r7, #26]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d16b      	bne.n	8007746 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	330c      	adds	r3, #12
 8007678:	7812      	ldrb	r2, [r2, #0]
 800767a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800768a:	b29b      	uxth	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007694:	e057      	b.n	8007746 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d11c      	bne.n	80076de <HAL_SPI_TransmitReceive+0x26c>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d017      	beq.n	80076de <HAL_SPI_TransmitReceive+0x26c>
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d114      	bne.n	80076de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	330c      	adds	r3, #12
 80076be:	7812      	ldrb	r2, [r2, #0]
 80076c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d119      	bne.n	8007720 <HAL_SPI_TransmitReceive+0x2ae>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d014      	beq.n	8007720 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29a      	uxth	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800771c:	2301      	movs	r3, #1
 800771e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007720:	f7fb fcfc 	bl	800311c <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800772c:	429a      	cmp	r2, r3
 800772e:	d803      	bhi.n	8007738 <HAL_SPI_TransmitReceive+0x2c6>
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	d102      	bne.n	800773e <HAL_SPI_TransmitReceive+0x2cc>
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	2b00      	cmp	r3, #0
 800773c:	d103      	bne.n	8007746 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007744:	e029      	b.n	800779a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800774a:	b29b      	uxth	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1a2      	bne.n	8007696 <HAL_SPI_TransmitReceive+0x224>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007754:	b29b      	uxth	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d19d      	bne.n	8007696 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800775a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 f926 	bl	80079b0 <SPI_EndRxTxTransaction>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d006      	beq.n	8007778 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007776:	e010      	b.n	800779a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10b      	bne.n	8007798 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	e000      	b.n	800779a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007798:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3730      	adds	r7, #48	; 0x30
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077c4:	b2db      	uxtb	r3, r3
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b088      	sub	sp, #32
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	603b      	str	r3, [r7, #0]
 80077e0:	4613      	mov	r3, r2
 80077e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077e4:	f7fb fc9a 	bl	800311c <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	1a9b      	subs	r3, r3, r2
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	4413      	add	r3, r2
 80077f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077f4:	f7fb fc92 	bl	800311c <HAL_GetTick>
 80077f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077fa:	4b39      	ldr	r3, [pc, #228]	; (80078e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	015b      	lsls	r3, r3, #5
 8007800:	0d1b      	lsrs	r3, r3, #20
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	fb02 f303 	mul.w	r3, r2, r3
 8007808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800780a:	e054      	b.n	80078b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d050      	beq.n	80078b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007814:	f7fb fc82 	bl	800311c <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	69fa      	ldr	r2, [r7, #28]
 8007820:	429a      	cmp	r2, r3
 8007822:	d902      	bls.n	800782a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d13d      	bne.n	80078a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007842:	d111      	bne.n	8007868 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784c:	d004      	beq.n	8007858 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007856:	d107      	bne.n	8007868 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007870:	d10f      	bne.n	8007892 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e017      	b.n	80078d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4013      	ands	r3, r2
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	bf0c      	ite	eq
 80078c6:	2301      	moveq	r3, #1
 80078c8:	2300      	movne	r3, #0
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d19b      	bne.n	800780c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000000 	.word	0x20000000

080078e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f8:	d111      	bne.n	800791e <SPI_EndRxTransaction+0x3a>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007902:	d004      	beq.n	800790e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800790c:	d107      	bne.n	800791e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800791c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007926:	d12a      	bne.n	800797e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007930:	d012      	beq.n	8007958 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2200      	movs	r2, #0
 800793a:	2180      	movs	r1, #128	; 0x80
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff ff49 	bl	80077d4 <SPI_WaitFlagStateUntilTimeout>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d02d      	beq.n	80079a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794c:	f043 0220 	orr.w	r2, r3, #32
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e026      	b.n	80079a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2200      	movs	r2, #0
 8007960:	2101      	movs	r1, #1
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f7ff ff36 	bl	80077d4 <SPI_WaitFlagStateUntilTimeout>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d01a      	beq.n	80079a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	f043 0220 	orr.w	r2, r3, #32
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e013      	b.n	80079a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2200      	movs	r2, #0
 8007986:	2101      	movs	r1, #1
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7ff ff23 	bl	80077d4 <SPI_WaitFlagStateUntilTimeout>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007998:	f043 0220 	orr.w	r2, r3, #32
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e000      	b.n	80079a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80079bc:	4b1b      	ldr	r3, [pc, #108]	; (8007a2c <SPI_EndRxTxTransaction+0x7c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1b      	ldr	r2, [pc, #108]	; (8007a30 <SPI_EndRxTxTransaction+0x80>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	0d5b      	lsrs	r3, r3, #21
 80079c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079cc:	fb02 f303 	mul.w	r3, r2, r3
 80079d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079da:	d112      	bne.n	8007a02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	2180      	movs	r1, #128	; 0x80
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff fef4 	bl	80077d4 <SPI_WaitFlagStateUntilTimeout>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d016      	beq.n	8007a20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f6:	f043 0220 	orr.w	r2, r3, #32
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e00f      	b.n	8007a22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a18:	2b80      	cmp	r3, #128	; 0x80
 8007a1a:	d0f2      	beq.n	8007a02 <SPI_EndRxTxTransaction+0x52>
 8007a1c:	e000      	b.n	8007a20 <SPI_EndRxTxTransaction+0x70>
        break;
 8007a1e:	bf00      	nop
  }

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20000000 	.word	0x20000000
 8007a30:	165e9f81 	.word	0x165e9f81

08007a34 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d123      	bne.n	8007a8e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	6851      	ldr	r1, [r2, #4]
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	6892      	ldr	r2, [r2, #8]
 8007a5a:	4311      	orrs	r1, r2
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	68d2      	ldr	r2, [r2, #12]
 8007a60:	4311      	orrs	r1, r2
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	6912      	ldr	r2, [r2, #16]
 8007a66:	4311      	orrs	r1, r2
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	6952      	ldr	r2, [r2, #20]
 8007a6c:	4311      	orrs	r1, r2
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	6992      	ldr	r2, [r2, #24]
 8007a72:	4311      	orrs	r1, r2
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	69d2      	ldr	r2, [r2, #28]
 8007a78:	4311      	orrs	r1, r2
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	6a12      	ldr	r2, [r2, #32]
 8007a7e:	4311      	orrs	r1, r2
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a84:	430a      	orrs	r2, r1
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	e028      	b.n	8007ae0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	69d9      	ldr	r1, [r3, #28]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	4319      	orrs	r1, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007ab4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	6851      	ldr	r1, [r2, #4]
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	6892      	ldr	r2, [r2, #8]
 8007ac0:	4311      	orrs	r1, r2
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	68d2      	ldr	r2, [r2, #12]
 8007ac6:	4311      	orrs	r1, r2
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	6912      	ldr	r2, [r2, #16]
 8007acc:	4311      	orrs	r1, r2
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	6952      	ldr	r2, [r2, #20]
 8007ad2:	4311      	orrs	r1, r2
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	6992      	ldr	r2, [r2, #24]
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b085      	sub	sp, #20
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d128      	bne.n	8007b52 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	1e59      	subs	r1, r3, #1
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	4319      	orrs	r1, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	021b      	lsls	r3, r3, #8
 8007b20:	4319      	orrs	r1, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	031b      	lsls	r3, r3, #12
 8007b2a:	4319      	orrs	r1, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	041b      	lsls	r3, r3, #16
 8007b34:	4319      	orrs	r1, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	051b      	lsls	r3, r3, #20
 8007b3e:	4319      	orrs	r1, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	061b      	lsls	r3, r3, #24
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	609a      	str	r2, [r3, #8]
 8007b50:	e02f      	b.n	8007bb2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	68d2      	ldr	r2, [r2, #12]
 8007b62:	3a01      	subs	r2, #1
 8007b64:	0311      	lsls	r1, r2, #12
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	6952      	ldr	r2, [r2, #20]
 8007b6a:	3a01      	subs	r2, #1
 8007b6c:	0512      	lsls	r2, r2, #20
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	431a      	orrs	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	1e59      	subs	r1, r3, #1
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	4319      	orrs	r1, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	4319      	orrs	r1, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	041b      	lsls	r3, r3, #16
 8007ba0:	4319      	orrs	r1, r3
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	061b      	lsls	r3, r3, #24
 8007baa:	430b      	orrs	r3, r1
 8007bac:	431a      	orrs	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	0d9b      	lsrs	r3, r3, #22
 8007bd6:	059b      	lsls	r3, r3, #22
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	6811      	ldr	r1, [r2, #0]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	6852      	ldr	r2, [r2, #4]
 8007be0:	4311      	orrs	r1, r2
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	6892      	ldr	r2, [r2, #8]
 8007be6:	3a01      	subs	r2, #1
 8007be8:	0152      	lsls	r2, r2, #5
 8007bea:	4311      	orrs	r1, r2
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	68d2      	ldr	r2, [r2, #12]
 8007bf0:	0252      	lsls	r2, r2, #9
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8007bfa:	f7fb fa8f 	bl	800311c <HAL_GetTick>
 8007bfe:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007c00:	e010      	b.n	8007c24 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d00c      	beq.n	8007c24 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <FMC_SDRAM_SendCommand+0x60>
 8007c10:	f7fb fa84 	bl	800311c <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d201      	bcs.n	8007c24 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e006      	b.n	8007c32 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d0e8      	beq.n	8007c02 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007c4c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	0052      	lsls	r2, r2, #1
 8007c54:	431a      	orrs	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c68:	b084      	sub	sp, #16
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	f107 001c 	add.w	r0, r7, #28
 8007c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d122      	bne.n	8007cc6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d105      	bne.n	8007cba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f001 fbee 	bl	800949c <USB_CoreReset>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73fb      	strb	r3, [r7, #15]
 8007cc4:	e01a      	b.n	8007cfc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 fbe2 	bl	800949c <USB_CoreReset>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	639a      	str	r2, [r3, #56]	; 0x38
 8007cee:	e005      	b.n	8007cfc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d10b      	bne.n	8007d1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f043 0206 	orr.w	r2, r3, #6
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f043 0220 	orr.w	r2, r3, #32
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d26:	b004      	add	sp, #16
 8007d28:	4770      	bx	lr
	...

08007d2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d165      	bne.n	8007e0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4a41      	ldr	r2, [pc, #260]	; (8007e48 <USB_SetTurnaroundTime+0x11c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d906      	bls.n	8007d56 <USB_SetTurnaroundTime+0x2a>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4a40      	ldr	r2, [pc, #256]	; (8007e4c <USB_SetTurnaroundTime+0x120>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d202      	bcs.n	8007d56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d50:	230f      	movs	r3, #15
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	e062      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	4a3c      	ldr	r2, [pc, #240]	; (8007e4c <USB_SetTurnaroundTime+0x120>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d306      	bcc.n	8007d6c <USB_SetTurnaroundTime+0x40>
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4a3b      	ldr	r2, [pc, #236]	; (8007e50 <USB_SetTurnaroundTime+0x124>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d202      	bcs.n	8007d6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007d66:	230e      	movs	r3, #14
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	e057      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	4a38      	ldr	r2, [pc, #224]	; (8007e50 <USB_SetTurnaroundTime+0x124>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d306      	bcc.n	8007d82 <USB_SetTurnaroundTime+0x56>
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4a37      	ldr	r2, [pc, #220]	; (8007e54 <USB_SetTurnaroundTime+0x128>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d202      	bcs.n	8007d82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007d7c:	230d      	movs	r3, #13
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	e04c      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	4a33      	ldr	r2, [pc, #204]	; (8007e54 <USB_SetTurnaroundTime+0x128>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d306      	bcc.n	8007d98 <USB_SetTurnaroundTime+0x6c>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	4a32      	ldr	r2, [pc, #200]	; (8007e58 <USB_SetTurnaroundTime+0x12c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d802      	bhi.n	8007d98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d92:	230c      	movs	r3, #12
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e041      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4a2f      	ldr	r2, [pc, #188]	; (8007e58 <USB_SetTurnaroundTime+0x12c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d906      	bls.n	8007dae <USB_SetTurnaroundTime+0x82>
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	4a2e      	ldr	r2, [pc, #184]	; (8007e5c <USB_SetTurnaroundTime+0x130>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d802      	bhi.n	8007dae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007da8:	230b      	movs	r3, #11
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	e036      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4a2a      	ldr	r2, [pc, #168]	; (8007e5c <USB_SetTurnaroundTime+0x130>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d906      	bls.n	8007dc4 <USB_SetTurnaroundTime+0x98>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	4a29      	ldr	r2, [pc, #164]	; (8007e60 <USB_SetTurnaroundTime+0x134>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d802      	bhi.n	8007dc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007dbe:	230a      	movs	r3, #10
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	e02b      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4a26      	ldr	r2, [pc, #152]	; (8007e60 <USB_SetTurnaroundTime+0x134>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d906      	bls.n	8007dda <USB_SetTurnaroundTime+0xae>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	4a25      	ldr	r2, [pc, #148]	; (8007e64 <USB_SetTurnaroundTime+0x138>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d202      	bcs.n	8007dda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007dd4:	2309      	movs	r3, #9
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	e020      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	4a21      	ldr	r2, [pc, #132]	; (8007e64 <USB_SetTurnaroundTime+0x138>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d306      	bcc.n	8007df0 <USB_SetTurnaroundTime+0xc4>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	4a20      	ldr	r2, [pc, #128]	; (8007e68 <USB_SetTurnaroundTime+0x13c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d802      	bhi.n	8007df0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007dea:	2308      	movs	r3, #8
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	e015      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4a1d      	ldr	r2, [pc, #116]	; (8007e68 <USB_SetTurnaroundTime+0x13c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d906      	bls.n	8007e06 <USB_SetTurnaroundTime+0xda>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4a1c      	ldr	r2, [pc, #112]	; (8007e6c <USB_SetTurnaroundTime+0x140>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d202      	bcs.n	8007e06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e00:	2307      	movs	r3, #7
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e00a      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007e06:	2306      	movs	r3, #6
 8007e08:	617b      	str	r3, [r7, #20]
 8007e0a:	e007      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d102      	bne.n	8007e18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007e12:	2309      	movs	r3, #9
 8007e14:	617b      	str	r3, [r7, #20]
 8007e16:	e001      	b.n	8007e1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007e18:	2309      	movs	r3, #9
 8007e1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	029b      	lsls	r3, r3, #10
 8007e30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007e34:	431a      	orrs	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	371c      	adds	r7, #28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	00d8acbf 	.word	0x00d8acbf
 8007e4c:	00e4e1c0 	.word	0x00e4e1c0
 8007e50:	00f42400 	.word	0x00f42400
 8007e54:	01067380 	.word	0x01067380
 8007e58:	011a499f 	.word	0x011a499f
 8007e5c:	01312cff 	.word	0x01312cff
 8007e60:	014ca43f 	.word	0x014ca43f
 8007e64:	016e3600 	.word	0x016e3600
 8007e68:	01a6ab1f 	.word	0x01a6ab1f
 8007e6c:	01e84800 	.word	0x01e84800

08007e70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f043 0201 	orr.w	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f023 0201 	bic.w	r2, r3, #1
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d115      	bne.n	8007f02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	f7fb f926 	bl	8003134 <HAL_Delay>
      ms++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fa45 	bl	800937e <USB_GetMode>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d01e      	beq.n	8007f38 <USB_SetCurrentMode+0x84>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b31      	cmp	r3, #49	; 0x31
 8007efe:	d9f0      	bls.n	8007ee2 <USB_SetCurrentMode+0x2e>
 8007f00:	e01a      	b.n	8007f38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d115      	bne.n	8007f34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f14:	2001      	movs	r0, #1
 8007f16:	f7fb f90d 	bl	8003134 <HAL_Delay>
      ms++;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 fa2c 	bl	800937e <USB_GetMode>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <USB_SetCurrentMode+0x84>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b31      	cmp	r3, #49	; 0x31
 8007f30:	d9f0      	bls.n	8007f14 <USB_SetCurrentMode+0x60>
 8007f32:	e001      	b.n	8007f38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e005      	b.n	8007f44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b32      	cmp	r3, #50	; 0x32
 8007f3c:	d101      	bne.n	8007f42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e000      	b.n	8007f44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b086      	sub	sp, #24
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f66:	2300      	movs	r3, #0
 8007f68:	613b      	str	r3, [r7, #16]
 8007f6a:	e009      	b.n	8007f80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	3340      	adds	r3, #64	; 0x40
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	2200      	movs	r2, #0
 8007f78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	613b      	str	r3, [r7, #16]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2b0e      	cmp	r3, #14
 8007f84:	d9f2      	bls.n	8007f6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11c      	bne.n	8007fc6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f9a:	f043 0302 	orr.w	r3, r3, #2
 8007f9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	639a      	str	r2, [r3, #56]	; 0x38
 8007fc4:	e00b      	b.n	8007fde <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	680b      	ldr	r3, [r1, #0]
 8007ffc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	2b01      	cmp	r3, #1
 8008002:	d10c      	bne.n	800801e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d104      	bne.n	8008014 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800800a:	2100      	movs	r1, #0
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f965 	bl	80082dc <USB_SetDevSpeed>
 8008012:	e008      	b.n	8008026 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008014:	2101      	movs	r1, #1
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f960 	bl	80082dc <USB_SetDevSpeed>
 800801c:	e003      	b.n	8008026 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800801e:	2103      	movs	r1, #3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f95b 	bl	80082dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008026:	2110      	movs	r1, #16
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f8f3 	bl	8008214 <USB_FlushTxFifo>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f91f 	bl	800827c <USB_FlushRxFifo>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804e:	461a      	mov	r2, r3
 8008050:	2300      	movs	r3, #0
 8008052:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805a:	461a      	mov	r2, r3
 800805c:	2300      	movs	r3, #0
 800805e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008066:	461a      	mov	r2, r3
 8008068:	2300      	movs	r3, #0
 800806a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800806c:	2300      	movs	r3, #0
 800806e:	613b      	str	r3, [r7, #16]
 8008070:	e043      	b.n	80080fa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008088:	d118      	bne.n	80080bc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10a      	bne.n	80080a6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809c:	461a      	mov	r2, r3
 800809e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	e013      	b.n	80080ce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b2:	461a      	mov	r2, r3
 80080b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e008      	b.n	80080ce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c8:	461a      	mov	r2, r3
 80080ca:	2300      	movs	r3, #0
 80080cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080da:	461a      	mov	r2, r3
 80080dc:	2300      	movs	r3, #0
 80080de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	461a      	mov	r2, r3
 80080ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	3301      	adds	r3, #1
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d3b7      	bcc.n	8008072 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008102:	2300      	movs	r3, #0
 8008104:	613b      	str	r3, [r7, #16]
 8008106:	e043      	b.n	8008190 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800811a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800811e:	d118      	bne.n	8008152 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008132:	461a      	mov	r2, r3
 8008134:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	e013      	b.n	8008164 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008148:	461a      	mov	r2, r3
 800814a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	e008      	b.n	8008164 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815e:	461a      	mov	r2, r3
 8008160:	2300      	movs	r3, #0
 8008162:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008170:	461a      	mov	r2, r3
 8008172:	2300      	movs	r3, #0
 8008174:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	015a      	lsls	r2, r3, #5
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4413      	add	r3, r2
 800817e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008182:	461a      	mov	r2, r3
 8008184:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008188:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	3301      	adds	r3, #1
 800818e:	613b      	str	r3, [r7, #16]
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	429a      	cmp	r2, r3
 8008196:	d3b7      	bcc.n	8008108 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80081b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d105      	bne.n	80081cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	f043 0210 	orr.w	r2, r3, #16
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <USB_DevInit+0x2c4>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	f043 0208 	orr.w	r2, r3, #8
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d107      	bne.n	8008200 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081f8:	f043 0304 	orr.w	r3, r3, #4
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008200:	7dfb      	ldrb	r3, [r7, #23]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800820c:	b004      	add	sp, #16
 800820e:	4770      	bx	lr
 8008210:	803c3800 	.word	0x803c3800

08008214 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4a13      	ldr	r2, [pc, #76]	; (8008278 <USB_FlushTxFifo+0x64>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d901      	bls.n	8008234 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e01b      	b.n	800826c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	daf2      	bge.n	8008222 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	019b      	lsls	r3, r3, #6
 8008244:	f043 0220 	orr.w	r2, r3, #32
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4a08      	ldr	r2, [pc, #32]	; (8008278 <USB_FlushTxFifo+0x64>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d901      	bls.n	800825e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e006      	b.n	800826c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b20      	cmp	r3, #32
 8008268:	d0f0      	beq.n	800824c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	00030d40 	.word	0x00030d40

0800827c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	3301      	adds	r3, #1
 800828c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4a11      	ldr	r2, [pc, #68]	; (80082d8 <USB_FlushRxFifo+0x5c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d901      	bls.n	800829a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e018      	b.n	80082cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	daf2      	bge.n	8008288 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2210      	movs	r2, #16
 80082aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3301      	adds	r3, #1
 80082b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	4a08      	ldr	r2, [pc, #32]	; (80082d8 <USB_FlushRxFifo+0x5c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d901      	bls.n	80082be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e006      	b.n	80082cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	f003 0310 	and.w	r3, r3, #16
 80082c6:	2b10      	cmp	r3, #16
 80082c8:	d0f0      	beq.n	80082ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	00030d40 	.word	0x00030d40

080082dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	68f9      	ldr	r1, [r7, #12]
 80082f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082fc:	4313      	orrs	r3, r2
 80082fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800830e:	b480      	push	{r7}
 8008310:	b087      	sub	sp, #28
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f003 0306 	and.w	r3, r3, #6
 8008326:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800832e:	2300      	movs	r3, #0
 8008330:	75fb      	strb	r3, [r7, #23]
 8008332:	e00a      	b.n	800834a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d002      	beq.n	8008340 <USB_GetDevSpeed+0x32>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b06      	cmp	r3, #6
 800833e:	d102      	bne.n	8008346 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008340:	2302      	movs	r3, #2
 8008342:	75fb      	strb	r3, [r7, #23]
 8008344:	e001      	b.n	800834a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008346:	230f      	movs	r3, #15
 8008348:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800834a:	7dfb      	ldrb	r3, [r7, #23]
}
 800834c:	4618      	mov	r0, r3
 800834e:	371c      	adds	r7, #28
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	785b      	ldrb	r3, [r3, #1]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d13a      	bne.n	80083ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837a:	69da      	ldr	r2, [r3, #28]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	f003 030f 	and.w	r3, r3, #15
 8008384:	2101      	movs	r1, #1
 8008386:	fa01 f303 	lsl.w	r3, r1, r3
 800838a:	b29b      	uxth	r3, r3
 800838c:	68f9      	ldr	r1, [r7, #12]
 800838e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008392:	4313      	orrs	r3, r2
 8008394:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d155      	bne.n	8008458 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	791b      	ldrb	r3, [r3, #4]
 80083c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	059b      	lsls	r3, r3, #22
 80083ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083d0:	4313      	orrs	r3, r2
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	0151      	lsls	r1, r2, #5
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	440a      	add	r2, r1
 80083da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	e036      	b.n	8008458 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f0:	69da      	ldr	r2, [r3, #28]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	f003 030f 	and.w	r3, r3, #15
 80083fa:	2101      	movs	r1, #1
 80083fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008400:	041b      	lsls	r3, r3, #16
 8008402:	68f9      	ldr	r1, [r7, #12]
 8008404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008408:	4313      	orrs	r3, r2
 800840a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d11a      	bne.n	8008458 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	791b      	ldrb	r3, [r3, #4]
 800843c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800843e:	430b      	orrs	r3, r1
 8008440:	4313      	orrs	r3, r2
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	0151      	lsls	r1, r2, #5
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	440a      	add	r2, r1
 800844a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800844e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008456:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
	...

08008468 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	785b      	ldrb	r3, [r3, #1]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d161      	bne.n	8008548 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800849a:	d11f      	bne.n	80084dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	0151      	lsls	r1, r2, #5
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	440a      	add	r2, r1
 80084b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	0151      	lsls	r1, r2, #5
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	440a      	add	r2, r1
 80084d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	f003 030f 	and.w	r3, r3, #15
 80084ec:	2101      	movs	r1, #1
 80084ee:	fa01 f303 	lsl.w	r3, r1, r3
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	43db      	mvns	r3, r3
 80084f6:	68f9      	ldr	r1, [r7, #12]
 80084f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084fc:	4013      	ands	r3, r2
 80084fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008506:	69da      	ldr	r2, [r3, #28]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	f003 030f 	and.w	r3, r3, #15
 8008510:	2101      	movs	r1, #1
 8008512:	fa01 f303 	lsl.w	r3, r1, r3
 8008516:	b29b      	uxth	r3, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008520:	4013      	ands	r3, r2
 8008522:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	0159      	lsls	r1, r3, #5
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	440b      	add	r3, r1
 800853a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853e:	4619      	mov	r1, r3
 8008540:	4b35      	ldr	r3, [pc, #212]	; (8008618 <USB_DeactivateEndpoint+0x1b0>)
 8008542:	4013      	ands	r3, r2
 8008544:	600b      	str	r3, [r1, #0]
 8008546:	e060      	b.n	800860a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800855a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800855e:	d11f      	bne.n	80085a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	440a      	add	r2, r1
 8008576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800857a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800857e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800859a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800859e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	2101      	movs	r1, #1
 80085b2:	fa01 f303 	lsl.w	r3, r1, r3
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	43db      	mvns	r3, r3
 80085ba:	68f9      	ldr	r1, [r7, #12]
 80085bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085c0:	4013      	ands	r3, r2
 80085c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ca:	69da      	ldr	r2, [r3, #28]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	2101      	movs	r1, #1
 80085d6:	fa01 f303 	lsl.w	r3, r1, r3
 80085da:	041b      	lsls	r3, r3, #16
 80085dc:	43db      	mvns	r3, r3
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085e4:	4013      	ands	r3, r2
 80085e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	0159      	lsls	r1, r3, #5
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	440b      	add	r3, r1
 80085fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008602:	4619      	mov	r1, r3
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <USB_DeactivateEndpoint+0x1b4>)
 8008606:	4013      	ands	r3, r2
 8008608:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	ec337800 	.word	0xec337800
 800861c:	eff37800 	.word	0xeff37800

08008620 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08a      	sub	sp, #40	; 0x28
 8008624:	af02      	add	r7, sp, #8
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	4613      	mov	r3, r2
 800862c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	785b      	ldrb	r3, [r3, #1]
 800863c:	2b01      	cmp	r3, #1
 800863e:	f040 815c 	bne.w	80088fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d132      	bne.n	80086b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	69fa      	ldr	r2, [r7, #28]
 800865e:	440a      	add	r2, r1
 8008660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008664:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008668:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800866c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	69ba      	ldr	r2, [r7, #24]
 800867e:	0151      	lsls	r1, r2, #5
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	440a      	add	r2, r1
 8008684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800868c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	0151      	lsls	r1, r2, #5
 80086a0:	69fa      	ldr	r2, [r7, #28]
 80086a2:	440a      	add	r2, r1
 80086a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086a8:	0cdb      	lsrs	r3, r3, #19
 80086aa:	04db      	lsls	r3, r3, #19
 80086ac:	6113      	str	r3, [r2, #16]
 80086ae:	e074      	b.n	800879a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	0151      	lsls	r1, r2, #5
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	440a      	add	r2, r1
 80086c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ca:	0cdb      	lsrs	r3, r3, #19
 80086cc:	04db      	lsls	r3, r3, #19
 80086ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008700:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6999      	ldr	r1, [r3, #24]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	440b      	add	r3, r1
 800870c:	1e59      	subs	r1, r3, #1
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	fbb1 f3f3 	udiv	r3, r1, r3
 8008716:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008718:	4b9d      	ldr	r3, [pc, #628]	; (8008990 <USB_EPStartXfer+0x370>)
 800871a:	400b      	ands	r3, r1
 800871c:	69b9      	ldr	r1, [r7, #24]
 800871e:	0148      	lsls	r0, r1, #5
 8008720:	69f9      	ldr	r1, [r7, #28]
 8008722:	4401      	add	r1, r0
 8008724:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008728:	4313      	orrs	r3, r2
 800872a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008738:	691a      	ldr	r2, [r3, #16]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008742:	69b9      	ldr	r1, [r7, #24]
 8008744:	0148      	lsls	r0, r1, #5
 8008746:	69f9      	ldr	r1, [r7, #28]
 8008748:	4401      	add	r1, r0
 800874a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800874e:	4313      	orrs	r3, r2
 8008750:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	791b      	ldrb	r3, [r3, #4]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d11f      	bne.n	800879a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008774:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008778:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	0151      	lsls	r1, r2, #5
 800878c:	69fa      	ldr	r2, [r7, #28]
 800878e:	440a      	add	r2, r1
 8008790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008794:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008798:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d14b      	bne.n	8008838 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d009      	beq.n	80087bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b4:	461a      	mov	r2, r3
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	791b      	ldrb	r3, [r3, #4]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d128      	bne.n	8008816 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d110      	bne.n	80087f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	0151      	lsls	r1, r2, #5
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	440a      	add	r2, r1
 80087ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	e00f      	b.n	8008816 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	69fa      	ldr	r2, [r7, #28]
 800880a:	440a      	add	r2, r1
 800880c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008814:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	0151      	lsls	r1, r2, #5
 8008828:	69fa      	ldr	r2, [r7, #28]
 800882a:	440a      	add	r2, r1
 800882c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008830:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	e133      	b.n	8008aa0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	0151      	lsls	r1, r2, #5
 800884a:	69fa      	ldr	r2, [r7, #28]
 800884c:	440a      	add	r2, r1
 800884e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008852:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008856:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	791b      	ldrb	r3, [r3, #4]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d015      	beq.n	800888c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 811b 	beq.w	8008aa0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	f003 030f 	and.w	r3, r3, #15
 800887a:	2101      	movs	r1, #1
 800887c:	fa01 f303 	lsl.w	r3, r1, r3
 8008880:	69f9      	ldr	r1, [r7, #28]
 8008882:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008886:	4313      	orrs	r3, r2
 8008888:	634b      	str	r3, [r1, #52]	; 0x34
 800888a:	e109      	b.n	8008aa0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008898:	2b00      	cmp	r3, #0
 800889a:	d110      	bne.n	80088be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	0151      	lsls	r1, r2, #5
 80088ae:	69fa      	ldr	r2, [r7, #28]
 80088b0:	440a      	add	r2, r1
 80088b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	e00f      	b.n	80088de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	69fa      	ldr	r2, [r7, #28]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6919      	ldr	r1, [r3, #16]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	781a      	ldrb	r2, [r3, #0]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	b298      	uxth	r0, r3
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	4603      	mov	r3, r0
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 fade 	bl	8008eb4 <USB_WritePacket>
 80088f8:	e0d2      	b.n	8008aa0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	69fa      	ldr	r2, [r7, #28]
 800890e:	440a      	add	r2, r1
 8008910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008914:	0cdb      	lsrs	r3, r3, #19
 8008916:	04db      	lsls	r3, r3, #19
 8008918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	440a      	add	r2, r1
 8008930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008934:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008938:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800893c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d126      	bne.n	8008994 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008952:	691a      	ldr	r2, [r3, #16]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800895c:	69b9      	ldr	r1, [r7, #24]
 800895e:	0148      	lsls	r0, r1, #5
 8008960:	69f9      	ldr	r1, [r7, #28]
 8008962:	4401      	add	r1, r0
 8008964:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008968:	4313      	orrs	r3, r2
 800896a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	440a      	add	r2, r1
 8008982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800898a:	6113      	str	r3, [r2, #16]
 800898c:	e03a      	b.n	8008a04 <USB_EPStartXfer+0x3e4>
 800898e:	bf00      	nop
 8008990:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	699a      	ldr	r2, [r3, #24]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4413      	add	r3, r2
 800899e:	1e5a      	subs	r2, r3, #1
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	8afa      	ldrh	r2, [r7, #22]
 80089b0:	fb03 f202 	mul.w	r2, r3, r2
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c4:	691a      	ldr	r2, [r3, #16]
 80089c6:	8afb      	ldrh	r3, [r7, #22]
 80089c8:	04d9      	lsls	r1, r3, #19
 80089ca:	4b38      	ldr	r3, [pc, #224]	; (8008aac <USB_EPStartXfer+0x48c>)
 80089cc:	400b      	ands	r3, r1
 80089ce:	69b9      	ldr	r1, [r7, #24]
 80089d0:	0148      	lsls	r0, r1, #5
 80089d2:	69f9      	ldr	r1, [r7, #28]
 80089d4:	4401      	add	r1, r0
 80089d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089da:	4313      	orrs	r3, r2
 80089dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ea:	691a      	ldr	r2, [r3, #16]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089f4:	69b9      	ldr	r1, [r7, #24]
 80089f6:	0148      	lsls	r0, r1, #5
 80089f8:	69f9      	ldr	r1, [r7, #28]
 80089fa:	4401      	add	r1, r0
 80089fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a00:	4313      	orrs	r3, r2
 8008a02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d10d      	bne.n	8008a26 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d009      	beq.n	8008a26 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6919      	ldr	r1, [r3, #16]
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a22:	460a      	mov	r2, r1
 8008a24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	791b      	ldrb	r3, [r3, #4]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d128      	bne.n	8008a80 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d110      	bne.n	8008a60 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	0151      	lsls	r1, r2, #5
 8008a50:	69fa      	ldr	r2, [r7, #28]
 8008a52:	440a      	add	r2, r1
 8008a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	e00f      	b.n	8008a80 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	0151      	lsls	r1, r2, #5
 8008a72:	69fa      	ldr	r2, [r7, #28]
 8008a74:	440a      	add	r2, r1
 8008a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3720      	adds	r7, #32
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	1ff80000 	.word	0x1ff80000

08008ab0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	f040 80ce 	bne.w	8008c6e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d132      	bne.n	8008b40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008af8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008afc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	0151      	lsls	r1, r2, #5
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	440a      	add	r2, r1
 8008b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	0151      	lsls	r1, r2, #5
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	440a      	add	r2, r1
 8008b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b38:	0cdb      	lsrs	r3, r3, #19
 8008b3a:	04db      	lsls	r3, r3, #19
 8008b3c:	6113      	str	r3, [r2, #16]
 8008b3e:	e04e      	b.n	8008bde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	0151      	lsls	r1, r2, #5
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	440a      	add	r2, r1
 8008b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b5a:	0cdb      	lsrs	r3, r3, #19
 8008b5c:	04db      	lsls	r3, r3, #19
 8008b5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	0151      	lsls	r1, r2, #5
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	440a      	add	r2, r1
 8008b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	699a      	ldr	r2, [r3, #24]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d903      	bls.n	8008b98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	0151      	lsls	r1, r2, #5
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	440a      	add	r2, r1
 8008bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc4:	691a      	ldr	r2, [r3, #16]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bce:	6939      	ldr	r1, [r7, #16]
 8008bd0:	0148      	lsls	r0, r1, #5
 8008bd2:	6979      	ldr	r1, [r7, #20]
 8008bd4:	4401      	add	r1, r0
 8008bd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d11e      	bne.n	8008c22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d009      	beq.n	8008c00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	e097      	b.n	8008d52 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	0151      	lsls	r1, r2, #5
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	440a      	add	r2, r1
 8008c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 8083 	beq.w	8008d52 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	f003 030f 	and.w	r3, r3, #15
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c62:	6979      	ldr	r1, [r7, #20]
 8008c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	634b      	str	r3, [r1, #52]	; 0x34
 8008c6c:	e071      	b.n	8008d52 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	0151      	lsls	r1, r2, #5
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	440a      	add	r2, r1
 8008c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c88:	0cdb      	lsrs	r3, r3, #19
 8008c8a:	04db      	lsls	r3, r3, #19
 8008c8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	015a      	lsls	r2, r3, #5
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	0151      	lsls	r1, r2, #5
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ca8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	68da      	ldr	r2, [r3, #12]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	0151      	lsls	r1, r2, #5
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	440a      	add	r2, r1
 8008ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d00:	6939      	ldr	r1, [r7, #16]
 8008d02:	0148      	lsls	r0, r1, #5
 8008d04:	6979      	ldr	r1, [r7, #20]
 8008d06:	4401      	add	r1, r0
 8008d08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d10d      	bne.n	8008d32 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d009      	beq.n	8008d32 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	6919      	ldr	r1, [r3, #16]
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d2e:	460a      	mov	r2, r1
 8008d30:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	0151      	lsls	r1, r2, #5
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	440a      	add	r2, r1
 8008d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	785b      	ldrb	r3, [r3, #1]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d14a      	bne.n	8008e14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d96:	f040 8086 	bne.w	8008ea6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	7812      	ldrb	r2, [r2, #0]
 8008dae:	0151      	lsls	r1, r2, #5
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	440a      	add	r2, r1
 8008db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008dbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	7812      	ldrb	r2, [r2, #0]
 8008dd2:	0151      	lsls	r1, r2, #5
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	440a      	add	r2, r1
 8008dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ddc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008de0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3301      	adds	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f242 7210 	movw	r2, #10000	; 0x2710
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d902      	bls.n	8008df8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	75fb      	strb	r3, [r7, #23]
          break;
 8008df6:	e056      	b.n	8008ea6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e10:	d0e7      	beq.n	8008de2 <USB_EPStopXfer+0x82>
 8008e12:	e048      	b.n	8008ea6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e2c:	d13b      	bne.n	8008ea6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	7812      	ldrb	r2, [r2, #0]
 8008e42:	0151      	lsls	r1, r2, #5
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	440a      	add	r2, r1
 8008e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	7812      	ldrb	r2, [r2, #0]
 8008e66:	0151      	lsls	r1, r2, #5
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	440a      	add	r2, r1
 8008e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d902      	bls.n	8008e8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	75fb      	strb	r3, [r7, #23]
          break;
 8008e8a:	e00c      	b.n	8008ea6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	015a      	lsls	r2, r3, #5
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	4413      	add	r3, r2
 8008e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ea4:	d0e7      	beq.n	8008e76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	371c      	adds	r7, #28
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b089      	sub	sp, #36	; 0x24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	71fb      	strb	r3, [r7, #7]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008ed2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d123      	bne.n	8008f22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008eda:	88bb      	ldrh	r3, [r7, #4]
 8008edc:	3303      	adds	r3, #3
 8008ede:	089b      	lsrs	r3, r3, #2
 8008ee0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	e018      	b.n	8008f1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ee8:	79fb      	ldrb	r3, [r7, #7]
 8008eea:	031a      	lsls	r2, r3, #12
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	3301      	adds	r3, #1
 8008f00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	3301      	adds	r3, #1
 8008f06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	3301      	adds	r3, #1
 8008f12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	3301      	adds	r3, #1
 8008f18:	61bb      	str	r3, [r7, #24]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d3e2      	bcc.n	8008ee8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3724      	adds	r7, #36	; 0x24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b08b      	sub	sp, #44	; 0x2c
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	089b      	lsrs	r3, r3, #2
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008f4e:	88fb      	ldrh	r3, [r7, #6]
 8008f50:	f003 0303 	and.w	r3, r3, #3
 8008f54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008f56:	2300      	movs	r3, #0
 8008f58:	623b      	str	r3, [r7, #32]
 8008f5a:	e014      	b.n	8008f86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	601a      	str	r2, [r3, #0]
    pDest++;
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	3301      	adds	r3, #1
 8008f72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	3301      	adds	r3, #1
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	3301      	adds	r3, #1
 8008f84:	623b      	str	r3, [r7, #32]
 8008f86:	6a3a      	ldr	r2, [r7, #32]
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d3e6      	bcc.n	8008f5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008f8e:	8bfb      	ldrh	r3, [r7, #30]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01e      	beq.n	8008fd2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f107 0310 	add.w	r3, r7, #16
 8008fa4:	6812      	ldr	r2, [r2, #0]
 8008fa6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	701a      	strb	r2, [r3, #0]
      i++;
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	623b      	str	r3, [r7, #32]
      pDest++;
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008fc6:	8bfb      	ldrh	r3, [r7, #30]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008fcc:	8bfb      	ldrh	r3, [r7, #30]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1ea      	bne.n	8008fa8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	372c      	adds	r7, #44	; 0x2c
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	785b      	ldrb	r3, [r3, #1]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d12c      	bne.n	8009056 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	db12      	blt.n	8009034 <USB_EPSetStall+0x54>
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00f      	beq.n	8009034 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	015a      	lsls	r2, r3, #5
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	4413      	add	r3, r2
 800901c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	0151      	lsls	r1, r2, #5
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	440a      	add	r2, r1
 800902a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800902e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009032:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	0151      	lsls	r1, r2, #5
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	440a      	add	r2, r1
 800904a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800904e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	e02b      	b.n	80090ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4413      	add	r3, r2
 800905e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	db12      	blt.n	800908e <USB_EPSetStall+0xae>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00f      	beq.n	800908e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	0151      	lsls	r1, r2, #5
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	440a      	add	r2, r1
 8009084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009088:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800908c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	4413      	add	r3, r2
 8009096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	0151      	lsls	r1, r2, #5
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	440a      	add	r2, r1
 80090a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d128      	bne.n	800912a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	0151      	lsls	r1, r2, #5
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	440a      	add	r2, r1
 80090ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	791b      	ldrb	r3, [r3, #4]
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d003      	beq.n	8009108 <USB_EPClearStall+0x4c>
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	791b      	ldrb	r3, [r3, #4]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d138      	bne.n	800917a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	440a      	add	r2, r1
 800911e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	e027      	b.n	800917a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	440a      	add	r2, r1
 8009140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009144:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009148:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	791b      	ldrb	r3, [r3, #4]
 800914e:	2b03      	cmp	r3, #3
 8009150:	d003      	beq.n	800915a <USB_EPClearStall+0x9e>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	791b      	ldrb	r3, [r3, #4]
 8009156:	2b02      	cmp	r3, #2
 8009158:	d10f      	bne.n	800917a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	0151      	lsls	r1, r2, #5
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	440a      	add	r2, r1
 8009170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009178:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80091aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	011b      	lsls	r3, r3, #4
 80091b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80091bc:	68f9      	ldr	r1, [r7, #12]
 80091be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091c2:	4313      	orrs	r3, r2
 80091c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091ee:	f023 0303 	bic.w	r3, r3, #3
 80091f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009202:	f023 0302 	bic.w	r3, r3, #2
 8009206:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009216:	b480      	push	{r7}
 8009218:	b085      	sub	sp, #20
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009230:	f023 0303 	bic.w	r3, r3, #3
 8009234:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009244:	f043 0302 	orr.w	r3, r3, #2
 8009248:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	695b      	ldr	r3, [r3, #20]
 8009264:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	4013      	ands	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009270:	68fb      	ldr	r3, [r7, #12]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800927e:	b480      	push	{r7}
 8009280:	b085      	sub	sp, #20
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	4013      	ands	r3, r2
 80092a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	0c1b      	lsrs	r3, r3, #16
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ce:	69db      	ldr	r3, [r3, #28]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	4013      	ands	r3, r2
 80092d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	b29b      	uxth	r3, r3
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b085      	sub	sp, #20
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	460b      	mov	r3, r1
 80092f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80092f6:	78fb      	ldrb	r3, [r7, #3]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	4013      	ands	r3, r2
 8009312:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009314:	68bb      	ldr	r3, [r7, #8]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009322:	b480      	push	{r7}
 8009324:	b087      	sub	sp, #28
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	460b      	mov	r3, r1
 800932c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009344:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009346:	78fb      	ldrb	r3, [r7, #3]
 8009348:	f003 030f 	and.w	r3, r3, #15
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	fa22 f303 	lsr.w	r3, r2, r3
 8009352:	01db      	lsls	r3, r3, #7
 8009354:	b2db      	uxtb	r3, r3
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	4313      	orrs	r3, r2
 800935a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	4013      	ands	r3, r2
 800936e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009370:	68bb      	ldr	r3, [r7, #8]
}
 8009372:	4618      	mov	r0, r3
 8009374:	371c      	adds	r7, #28
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	f003 0301 	and.w	r3, r3, #1
}
 800938e:	4618      	mov	r0, r3
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800939a:	b480      	push	{r7}
 800939c:	b085      	sub	sp, #20
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80093b8:	f023 0307 	bic.w	r3, r3, #7
 80093bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	460b      	mov	r3, r1
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	333c      	adds	r3, #60	; 0x3c
 80093f6:	3304      	adds	r3, #4
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	4a26      	ldr	r2, [pc, #152]	; (8009498 <USB_EP0_OutStart+0xb8>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d90a      	bls.n	800941a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009414:	d101      	bne.n	800941a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	e037      	b.n	800948a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009420:	461a      	mov	r2, r3
 8009422:	2300      	movs	r3, #0
 8009424:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009438:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009448:	f043 0318 	orr.w	r3, r3, #24
 800944c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800945c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009460:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009462:	7afb      	ldrb	r3, [r7, #11]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d10f      	bne.n	8009488 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946e:	461a      	mov	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009482:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009486:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	371c      	adds	r7, #28
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	4f54300a 	.word	0x4f54300a

0800949c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	3301      	adds	r3, #1
 80094ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4a13      	ldr	r2, [pc, #76]	; (8009500 <USB_CoreReset+0x64>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d901      	bls.n	80094ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e01b      	b.n	80094f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	daf2      	bge.n	80094a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f043 0201 	orr.w	r2, r3, #1
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3301      	adds	r3, #1
 80094d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4a09      	ldr	r2, [pc, #36]	; (8009500 <USB_CoreReset+0x64>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d901      	bls.n	80094e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e006      	b.n	80094f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d0f0      	beq.n	80094d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3714      	adds	r7, #20
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	00030d40 	.word	0x00030d40

08009504 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009510:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009514:	f002 fc94 	bl	800be40 <USBD_static_malloc>
 8009518:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d109      	bne.n	8009534 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	32b0      	adds	r2, #176	; 0xb0
 800952a:	2100      	movs	r1, #0
 800952c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009530:	2302      	movs	r3, #2
 8009532:	e0d4      	b.n	80096de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009534:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009538:	2100      	movs	r1, #0
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f003 fa4f 	bl	800c9de <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	32b0      	adds	r2, #176	; 0xb0
 800954a:	68f9      	ldr	r1, [r7, #12]
 800954c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	32b0      	adds	r2, #176	; 0xb0
 800955a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7c1b      	ldrb	r3, [r3, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d138      	bne.n	80095de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800956c:	4b5e      	ldr	r3, [pc, #376]	; (80096e8 <USBD_CDC_Init+0x1e4>)
 800956e:	7819      	ldrb	r1, [r3, #0]
 8009570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009574:	2202      	movs	r2, #2
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f002 fb3f 	bl	800bbfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800957c:	4b5a      	ldr	r3, [pc, #360]	; (80096e8 <USBD_CDC_Init+0x1e4>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	f003 020f 	and.w	r2, r3, #15
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	4613      	mov	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	440b      	add	r3, r1
 8009590:	3324      	adds	r3, #36	; 0x24
 8009592:	2201      	movs	r2, #1
 8009594:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009596:	4b55      	ldr	r3, [pc, #340]	; (80096ec <USBD_CDC_Init+0x1e8>)
 8009598:	7819      	ldrb	r1, [r3, #0]
 800959a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800959e:	2202      	movs	r2, #2
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f002 fb2a 	bl	800bbfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80095a6:	4b51      	ldr	r3, [pc, #324]	; (80096ec <USBD_CDC_Init+0x1e8>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	f003 020f 	and.w	r2, r3, #15
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095be:	2201      	movs	r2, #1
 80095c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80095c2:	4b4b      	ldr	r3, [pc, #300]	; (80096f0 <USBD_CDC_Init+0x1ec>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	f003 020f 	and.w	r2, r3, #15
 80095ca:	6879      	ldr	r1, [r7, #4]
 80095cc:	4613      	mov	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	440b      	add	r3, r1
 80095d6:	3326      	adds	r3, #38	; 0x26
 80095d8:	2210      	movs	r2, #16
 80095da:	801a      	strh	r2, [r3, #0]
 80095dc:	e035      	b.n	800964a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80095de:	4b42      	ldr	r3, [pc, #264]	; (80096e8 <USBD_CDC_Init+0x1e4>)
 80095e0:	7819      	ldrb	r1, [r3, #0]
 80095e2:	2340      	movs	r3, #64	; 0x40
 80095e4:	2202      	movs	r2, #2
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f002 fb07 	bl	800bbfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80095ec:	4b3e      	ldr	r3, [pc, #248]	; (80096e8 <USBD_CDC_Init+0x1e4>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f003 020f 	and.w	r2, r3, #15
 80095f4:	6879      	ldr	r1, [r7, #4]
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	440b      	add	r3, r1
 8009600:	3324      	adds	r3, #36	; 0x24
 8009602:	2201      	movs	r2, #1
 8009604:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009606:	4b39      	ldr	r3, [pc, #228]	; (80096ec <USBD_CDC_Init+0x1e8>)
 8009608:	7819      	ldrb	r1, [r3, #0]
 800960a:	2340      	movs	r3, #64	; 0x40
 800960c:	2202      	movs	r2, #2
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f002 faf3 	bl	800bbfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009614:	4b35      	ldr	r3, [pc, #212]	; (80096ec <USBD_CDC_Init+0x1e8>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f003 020f 	and.w	r2, r3, #15
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	440b      	add	r3, r1
 8009628:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800962c:	2201      	movs	r2, #1
 800962e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009630:	4b2f      	ldr	r3, [pc, #188]	; (80096f0 <USBD_CDC_Init+0x1ec>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	f003 020f 	and.w	r2, r3, #15
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	440b      	add	r3, r1
 8009644:	3326      	adds	r3, #38	; 0x26
 8009646:	2210      	movs	r2, #16
 8009648:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800964a:	4b29      	ldr	r3, [pc, #164]	; (80096f0 <USBD_CDC_Init+0x1ec>)
 800964c:	7819      	ldrb	r1, [r3, #0]
 800964e:	2308      	movs	r3, #8
 8009650:	2203      	movs	r2, #3
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f002 fad1 	bl	800bbfa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009658:	4b25      	ldr	r3, [pc, #148]	; (80096f0 <USBD_CDC_Init+0x1ec>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	f003 020f 	and.w	r2, r3, #15
 8009660:	6879      	ldr	r1, [r7, #4]
 8009662:	4613      	mov	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	440b      	add	r3, r1
 800966c:	3324      	adds	r3, #36	; 0x24
 800966e:	2201      	movs	r2, #1
 8009670:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	33b0      	adds	r3, #176	; 0xb0
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80096a8:	2302      	movs	r3, #2
 80096aa:	e018      	b.n	80096de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7c1b      	ldrb	r3, [r3, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80096b4:	4b0d      	ldr	r3, [pc, #52]	; (80096ec <USBD_CDC_Init+0x1e8>)
 80096b6:	7819      	ldrb	r1, [r3, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f002 fb88 	bl	800bdd8 <USBD_LL_PrepareReceive>
 80096c8:	e008      	b.n	80096dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80096ca:	4b08      	ldr	r3, [pc, #32]	; (80096ec <USBD_CDC_Init+0x1e8>)
 80096cc:	7819      	ldrb	r1, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096d4:	2340      	movs	r3, #64	; 0x40
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f002 fb7e 	bl	800bdd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	2000010f 	.word	0x2000010f
 80096ec:	20000110 	.word	0x20000110
 80096f0:	20000111 	.word	0x20000111

080096f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009700:	4b3a      	ldr	r3, [pc, #232]	; (80097ec <USBD_CDC_DeInit+0xf8>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f002 fa9d 	bl	800bc46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800970c:	4b37      	ldr	r3, [pc, #220]	; (80097ec <USBD_CDC_DeInit+0xf8>)
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	f003 020f 	and.w	r2, r3, #15
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	3324      	adds	r3, #36	; 0x24
 8009722:	2200      	movs	r2, #0
 8009724:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009726:	4b32      	ldr	r3, [pc, #200]	; (80097f0 <USBD_CDC_DeInit+0xfc>)
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f002 fa8a 	bl	800bc46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009732:	4b2f      	ldr	r3, [pc, #188]	; (80097f0 <USBD_CDC_DeInit+0xfc>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	f003 020f 	and.w	r2, r3, #15
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	440b      	add	r3, r1
 8009746:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800974a:	2200      	movs	r2, #0
 800974c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800974e:	4b29      	ldr	r3, [pc, #164]	; (80097f4 <USBD_CDC_DeInit+0x100>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f002 fa76 	bl	800bc46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800975a:	4b26      	ldr	r3, [pc, #152]	; (80097f4 <USBD_CDC_DeInit+0x100>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	f003 020f 	and.w	r2, r3, #15
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	3324      	adds	r3, #36	; 0x24
 8009770:	2200      	movs	r2, #0
 8009772:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009774:	4b1f      	ldr	r3, [pc, #124]	; (80097f4 <USBD_CDC_DeInit+0x100>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	f003 020f 	and.w	r2, r3, #15
 800977c:	6879      	ldr	r1, [r7, #4]
 800977e:	4613      	mov	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	440b      	add	r3, r1
 8009788:	3326      	adds	r3, #38	; 0x26
 800978a:	2200      	movs	r2, #0
 800978c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	32b0      	adds	r2, #176	; 0xb0
 8009798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d01f      	beq.n	80097e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	33b0      	adds	r3, #176	; 0xb0
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	32b0      	adds	r2, #176	; 0xb0
 80097be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f002 fb4a 	bl	800be5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	32b0      	adds	r2, #176	; 0xb0
 80097d2:	2100      	movs	r1, #0
 80097d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	2000010f 	.word	0x2000010f
 80097f0:	20000110 	.word	0x20000110
 80097f4:	20000111 	.word	0x20000111

080097f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	32b0      	adds	r2, #176	; 0xb0
 800980c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009810:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009824:	2303      	movs	r3, #3
 8009826:	e0bf      	b.n	80099a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009830:	2b00      	cmp	r3, #0
 8009832:	d050      	beq.n	80098d6 <USBD_CDC_Setup+0xde>
 8009834:	2b20      	cmp	r3, #32
 8009836:	f040 80af 	bne.w	8009998 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	88db      	ldrh	r3, [r3, #6]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d03a      	beq.n	80098b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	b25b      	sxtb	r3, r3
 8009848:	2b00      	cmp	r3, #0
 800984a:	da1b      	bge.n	8009884 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	33b0      	adds	r3, #176	; 0xb0
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009862:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	88d2      	ldrh	r2, [r2, #6]
 8009868:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	88db      	ldrh	r3, [r3, #6]
 800986e:	2b07      	cmp	r3, #7
 8009870:	bf28      	it	cs
 8009872:	2307      	movcs	r3, #7
 8009874:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	89fa      	ldrh	r2, [r7, #14]
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f001 fd89 	bl	800b394 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009882:	e090      	b.n	80099a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	785a      	ldrb	r2, [r3, #1]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	88db      	ldrh	r3, [r3, #6]
 8009892:	2b3f      	cmp	r3, #63	; 0x3f
 8009894:	d803      	bhi.n	800989e <USBD_CDC_Setup+0xa6>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	88db      	ldrh	r3, [r3, #6]
 800989a:	b2da      	uxtb	r2, r3
 800989c:	e000      	b.n	80098a0 <USBD_CDC_Setup+0xa8>
 800989e:	2240      	movs	r2, #64	; 0x40
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80098a6:	6939      	ldr	r1, [r7, #16]
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80098ae:	461a      	mov	r2, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f001 fd9b 	bl	800b3ec <USBD_CtlPrepareRx>
      break;
 80098b6:	e076      	b.n	80099a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	33b0      	adds	r3, #176	; 0xb0
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	7850      	ldrb	r0, [r2, #1]
 80098ce:	2200      	movs	r2, #0
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	4798      	blx	r3
      break;
 80098d4:	e067      	b.n	80099a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	2b0b      	cmp	r3, #11
 80098dc:	d851      	bhi.n	8009982 <USBD_CDC_Setup+0x18a>
 80098de:	a201      	add	r2, pc, #4	; (adr r2, 80098e4 <USBD_CDC_Setup+0xec>)
 80098e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e4:	08009915 	.word	0x08009915
 80098e8:	08009991 	.word	0x08009991
 80098ec:	08009983 	.word	0x08009983
 80098f0:	08009983 	.word	0x08009983
 80098f4:	08009983 	.word	0x08009983
 80098f8:	08009983 	.word	0x08009983
 80098fc:	08009983 	.word	0x08009983
 8009900:	08009983 	.word	0x08009983
 8009904:	08009983 	.word	0x08009983
 8009908:	08009983 	.word	0x08009983
 800990c:	0800993f 	.word	0x0800993f
 8009910:	08009969 	.word	0x08009969
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b03      	cmp	r3, #3
 800991e:	d107      	bne.n	8009930 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009920:	f107 030a 	add.w	r3, r7, #10
 8009924:	2202      	movs	r2, #2
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f001 fd33 	bl	800b394 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800992e:	e032      	b.n	8009996 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f001 fcbd 	bl	800b2b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009938:	2303      	movs	r3, #3
 800993a:	75fb      	strb	r3, [r7, #23]
          break;
 800993c:	e02b      	b.n	8009996 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b03      	cmp	r3, #3
 8009948:	d107      	bne.n	800995a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800994a:	f107 030d 	add.w	r3, r7, #13
 800994e:	2201      	movs	r2, #1
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f001 fd1e 	bl	800b394 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009958:	e01d      	b.n	8009996 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 fca8 	bl	800b2b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009962:	2303      	movs	r3, #3
 8009964:	75fb      	strb	r3, [r7, #23]
          break;
 8009966:	e016      	b.n	8009996 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b03      	cmp	r3, #3
 8009972:	d00f      	beq.n	8009994 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 fc9b 	bl	800b2b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800997c:	2303      	movs	r3, #3
 800997e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009980:	e008      	b.n	8009994 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f001 fc94 	bl	800b2b2 <USBD_CtlError>
          ret = USBD_FAIL;
 800998a:	2303      	movs	r3, #3
 800998c:	75fb      	strb	r3, [r7, #23]
          break;
 800998e:	e002      	b.n	8009996 <USBD_CDC_Setup+0x19e>
          break;
 8009990:	bf00      	nop
 8009992:	e008      	b.n	80099a6 <USBD_CDC_Setup+0x1ae>
          break;
 8009994:	bf00      	nop
      }
      break;
 8009996:	e006      	b.n	80099a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f001 fc89 	bl	800b2b2 <USBD_CtlError>
      ret = USBD_FAIL;
 80099a0:	2303      	movs	r3, #3
 80099a2:	75fb      	strb	r3, [r7, #23]
      break;
 80099a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	32b0      	adds	r2, #176	; 0xb0
 80099ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e065      	b.n	8009aa6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	32b0      	adds	r2, #176	; 0xb0
 80099e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	f003 020f 	and.w	r2, r3, #15
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	4613      	mov	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	440b      	add	r3, r1
 80099fc:	3318      	adds	r3, #24
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d02f      	beq.n	8009a64 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	f003 020f 	and.w	r2, r3, #15
 8009a0a:	6879      	ldr	r1, [r7, #4]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	440b      	add	r3, r1
 8009a16:	3318      	adds	r3, #24
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	78fb      	ldrb	r3, [r7, #3]
 8009a1c:	f003 010f 	and.w	r1, r3, #15
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	460b      	mov	r3, r1
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	440b      	add	r3, r1
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4403      	add	r3, r0
 8009a2c:	3348      	adds	r3, #72	; 0x48
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a34:	fb01 f303 	mul.w	r3, r1, r3
 8009a38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d112      	bne.n	8009a64 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	f003 020f 	and.w	r2, r3, #15
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	440b      	add	r3, r1
 8009a50:	3318      	adds	r3, #24
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009a56:	78f9      	ldrb	r1, [r7, #3]
 8009a58:	2300      	movs	r3, #0
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f002 f99a 	bl	800bd96 <USBD_LL_Transmit>
 8009a62:	e01f      	b.n	8009aa4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	33b0      	adds	r3, #176	; 0xb0
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d010      	beq.n	8009aa4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	33b0      	adds	r3, #176	; 0xb0
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009aa0:	78fa      	ldrb	r2, [r7, #3]
 8009aa2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	32b0      	adds	r2, #176	; 0xb0
 8009ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	32b0      	adds	r2, #176	; 0xb0
 8009ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d101      	bne.n	8009ae0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e01a      	b.n	8009b16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f002 f998 	bl	800be1a <USBD_LL_GetRxDataSize>
 8009aea:	4602      	mov	r2, r0
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	33b0      	adds	r3, #176	; 0xb0
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009b10:	4611      	mov	r1, r2
 8009b12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b084      	sub	sp, #16
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	32b0      	adds	r2, #176	; 0xb0
 8009b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e025      	b.n	8009b8c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	33b0      	adds	r3, #176	; 0xb0
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d01a      	beq.n	8009b8a <USBD_CDC_EP0_RxReady+0x6c>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009b5a:	2bff      	cmp	r3, #255	; 0xff
 8009b5c:	d015      	beq.n	8009b8a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	33b0      	adds	r3, #176	; 0xb0
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009b76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b7e:	b292      	uxth	r2, r2
 8009b80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	22ff      	movs	r2, #255	; 0xff
 8009b86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b9c:	2182      	movs	r1, #130	; 0x82
 8009b9e:	4818      	ldr	r0, [pc, #96]	; (8009c00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ba0:	f000 fd4f 	bl	800a642 <USBD_GetEpDesc>
 8009ba4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	4815      	ldr	r0, [pc, #84]	; (8009c00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009baa:	f000 fd4a 	bl	800a642 <USBD_GetEpDesc>
 8009bae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009bb0:	2181      	movs	r1, #129	; 0x81
 8009bb2:	4813      	ldr	r0, [pc, #76]	; (8009c00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009bb4:	f000 fd45 	bl	800a642 <USBD_GetEpDesc>
 8009bb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	2210      	movs	r2, #16
 8009bc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d006      	beq.n	8009bda <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bd4:	711a      	strb	r2, [r3, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d006      	beq.n	8009bee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009be8:	711a      	strb	r2, [r3, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2243      	movs	r2, #67	; 0x43
 8009bf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009bf4:	4b02      	ldr	r3, [pc, #8]	; (8009c00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	200000cc 	.word	0x200000cc

08009c04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c0c:	2182      	movs	r1, #130	; 0x82
 8009c0e:	4818      	ldr	r0, [pc, #96]	; (8009c70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c10:	f000 fd17 	bl	800a642 <USBD_GetEpDesc>
 8009c14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c16:	2101      	movs	r1, #1
 8009c18:	4815      	ldr	r0, [pc, #84]	; (8009c70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c1a:	f000 fd12 	bl	800a642 <USBD_GetEpDesc>
 8009c1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c20:	2181      	movs	r1, #129	; 0x81
 8009c22:	4813      	ldr	r0, [pc, #76]	; (8009c70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c24:	f000 fd0d 	bl	800a642 <USBD_GetEpDesc>
 8009c28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	2210      	movs	r2, #16
 8009c34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d006      	beq.n	8009c4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	711a      	strb	r2, [r3, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f042 0202 	orr.w	r2, r2, #2
 8009c48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d006      	beq.n	8009c5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	711a      	strb	r2, [r3, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f042 0202 	orr.w	r2, r2, #2
 8009c5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2243      	movs	r2, #67	; 0x43
 8009c62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c64:	4b02      	ldr	r3, [pc, #8]	; (8009c70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	200000cc 	.word	0x200000cc

08009c74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c7c:	2182      	movs	r1, #130	; 0x82
 8009c7e:	4818      	ldr	r0, [pc, #96]	; (8009ce0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c80:	f000 fcdf 	bl	800a642 <USBD_GetEpDesc>
 8009c84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c86:	2101      	movs	r1, #1
 8009c88:	4815      	ldr	r0, [pc, #84]	; (8009ce0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c8a:	f000 fcda 	bl	800a642 <USBD_GetEpDesc>
 8009c8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c90:	2181      	movs	r1, #129	; 0x81
 8009c92:	4813      	ldr	r0, [pc, #76]	; (8009ce0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c94:	f000 fcd5 	bl	800a642 <USBD_GetEpDesc>
 8009c98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	2210      	movs	r2, #16
 8009ca4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d006      	beq.n	8009cba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cb4:	711a      	strb	r2, [r3, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d006      	beq.n	8009cce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cc8:	711a      	strb	r2, [r3, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2243      	movs	r2, #67	; 0x43
 8009cd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009cd4:	4b02      	ldr	r3, [pc, #8]	; (8009ce0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	200000cc 	.word	0x200000cc

08009ce4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	220a      	movs	r2, #10
 8009cf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009cf2:	4b03      	ldr	r3, [pc, #12]	; (8009d00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	20000088 	.word	0x20000088

08009d04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e009      	b.n	8009d2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	33b0      	adds	r3, #176	; 0xb0
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b087      	sub	sp, #28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	32b0      	adds	r2, #176	; 0xb0
 8009d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d52:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e008      	b.n	8009d70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	371c      	adds	r7, #28
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	32b0      	adds	r2, #176	; 0xb0
 8009d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e004      	b.n	8009daa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
	...

08009db8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	32b0      	adds	r2, #176	; 0xb0
 8009dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	32b0      	adds	r2, #176	; 0xb0
 8009dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e025      	b.n	8009e36 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d11f      	bne.n	8009e34 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009dfc:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <USBD_CDC_TransmitPacket+0x88>)
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	f003 020f 	and.w	r2, r3, #15
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4403      	add	r3, r0
 8009e16:	3318      	adds	r3, #24
 8009e18:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009e1a:	4b09      	ldr	r3, [pc, #36]	; (8009e40 <USBD_CDC_TransmitPacket+0x88>)
 8009e1c:	7819      	ldrb	r1, [r3, #0]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f001 ffb3 	bl	800bd96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	2000010f 	.word	0x2000010f

08009e44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	32b0      	adds	r2, #176	; 0xb0
 8009e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	32b0      	adds	r2, #176	; 0xb0
 8009e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e018      	b.n	8009ea4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	7c1b      	ldrb	r3, [r3, #16]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10a      	bne.n	8009e90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e7a:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <USBD_CDC_ReceivePacket+0x68>)
 8009e7c:	7819      	ldrb	r1, [r3, #0]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 ffa5 	bl	800bdd8 <USBD_LL_PrepareReceive>
 8009e8e:	e008      	b.n	8009ea2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e90:	4b06      	ldr	r3, [pc, #24]	; (8009eac <USBD_CDC_ReceivePacket+0x68>)
 8009e92:	7819      	ldrb	r1, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e9a:	2340      	movs	r3, #64	; 0x40
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f001 ff9b 	bl	800bdd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	20000110 	.word	0x20000110

08009eb0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e01f      	b.n	8009f08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	79fa      	ldrb	r2, [r7, #7]
 8009efa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f001 fe15 	bl	800bb2c <USBD_LL_Init>
 8009f02:	4603      	mov	r3, r0
 8009f04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e025      	b.n	8009f74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	32ae      	adds	r2, #174	; 0xae
 8009f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00f      	beq.n	8009f64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	32ae      	adds	r2, #174	; 0xae
 8009f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	f107 020e 	add.w	r2, r7, #14
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4798      	blx	r3
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009f6a:	1c5a      	adds	r2, r3, #1
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f001 fe1d 	bl	800bbc4 <USBD_LL_Start>
 8009f8a:	4603      	mov	r3, r0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d009      	beq.n	8009fd8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	78fa      	ldrb	r2, [r7, #3]
 8009fce:	4611      	mov	r1, r2
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	4798      	blx	r3
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	460b      	mov	r3, r1
 8009fec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	78fa      	ldrb	r2, [r7, #3]
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	4798      	blx	r3
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a008:	2303      	movs	r3, #3
 800a00a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b084      	sub	sp, #16
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
 800a01e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	4618      	mov	r0, r3
 800a02a:	f001 f908 	bl	800b23e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a03c:	461a      	mov	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a04a:	f003 031f 	and.w	r3, r3, #31
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d01a      	beq.n	800a088 <USBD_LL_SetupStage+0x72>
 800a052:	2b02      	cmp	r3, #2
 800a054:	d822      	bhi.n	800a09c <USBD_LL_SetupStage+0x86>
 800a056:	2b00      	cmp	r3, #0
 800a058:	d002      	beq.n	800a060 <USBD_LL_SetupStage+0x4a>
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d00a      	beq.n	800a074 <USBD_LL_SetupStage+0x5e>
 800a05e:	e01d      	b.n	800a09c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fb5f 	bl	800a72c <USBD_StdDevReq>
 800a06e:	4603      	mov	r3, r0
 800a070:	73fb      	strb	r3, [r7, #15]
      break;
 800a072:	e020      	b.n	800a0b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fbc7 	bl	800a810 <USBD_StdItfReq>
 800a082:	4603      	mov	r3, r0
 800a084:	73fb      	strb	r3, [r7, #15]
      break;
 800a086:	e016      	b.n	800a0b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a08e:	4619      	mov	r1, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fc29 	bl	800a8e8 <USBD_StdEPReq>
 800a096:	4603      	mov	r3, r0
 800a098:	73fb      	strb	r3, [r7, #15]
      break;
 800a09a:	e00c      	b.n	800a0b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f001 fdea 	bl	800bc84 <USBD_LL_StallEP>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b4:	bf00      	nop
  }

  return ret;
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a0d2:	7afb      	ldrb	r3, [r7, #11]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d16e      	bne.n	800a1b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a0de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	f040 8098 	bne.w	800a21c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	689a      	ldr	r2, [r3, #8]
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d913      	bls.n	800a120 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	689a      	ldr	r2, [r3, #8]
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	1ad2      	subs	r2, r2, r3
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	4293      	cmp	r3, r2
 800a110:	bf28      	it	cs
 800a112:	4613      	movcs	r3, r2
 800a114:	461a      	mov	r2, r3
 800a116:	6879      	ldr	r1, [r7, #4]
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f001 f984 	bl	800b426 <USBD_CtlContinueRx>
 800a11e:	e07d      	b.n	800a21c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a126:	f003 031f 	and.w	r3, r3, #31
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d014      	beq.n	800a158 <USBD_LL_DataOutStage+0x98>
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d81d      	bhi.n	800a16e <USBD_LL_DataOutStage+0xae>
 800a132:	2b00      	cmp	r3, #0
 800a134:	d002      	beq.n	800a13c <USBD_LL_DataOutStage+0x7c>
 800a136:	2b01      	cmp	r3, #1
 800a138:	d003      	beq.n	800a142 <USBD_LL_DataOutStage+0x82>
 800a13a:	e018      	b.n	800a16e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	75bb      	strb	r3, [r7, #22]
            break;
 800a140:	e018      	b.n	800a174 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	4619      	mov	r1, r3
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 fa5e 	bl	800a60e <USBD_CoreFindIF>
 800a152:	4603      	mov	r3, r0
 800a154:	75bb      	strb	r3, [r7, #22]
            break;
 800a156:	e00d      	b.n	800a174 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	4619      	mov	r1, r3
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 fa60 	bl	800a628 <USBD_CoreFindEP>
 800a168:	4603      	mov	r3, r0
 800a16a:	75bb      	strb	r3, [r7, #22]
            break;
 800a16c:	e002      	b.n	800a174 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a16e:	2300      	movs	r3, #0
 800a170:	75bb      	strb	r3, [r7, #22]
            break;
 800a172:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a174:	7dbb      	ldrb	r3, [r7, #22]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d119      	bne.n	800a1ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b03      	cmp	r3, #3
 800a184:	d113      	bne.n	800a1ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a186:	7dba      	ldrb	r2, [r7, #22]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	32ae      	adds	r2, #174	; 0xae
 800a18c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00b      	beq.n	800a1ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a196:	7dba      	ldrb	r2, [r7, #22]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a19e:	7dba      	ldrb	r2, [r7, #22]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	32ae      	adds	r2, #174	; 0xae
 800a1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f001 f94a 	bl	800b448 <USBD_CtlSendStatus>
 800a1b4:	e032      	b.n	800a21c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
 800a1b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	4619      	mov	r1, r3
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 fa31 	bl	800a628 <USBD_CoreFindEP>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1ca:	7dbb      	ldrb	r3, [r7, #22]
 800a1cc:	2bff      	cmp	r3, #255	; 0xff
 800a1ce:	d025      	beq.n	800a21c <USBD_LL_DataOutStage+0x15c>
 800a1d0:	7dbb      	ldrb	r3, [r7, #22]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d122      	bne.n	800a21c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d117      	bne.n	800a212 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a1e2:	7dba      	ldrb	r2, [r7, #22]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	32ae      	adds	r2, #174	; 0xae
 800a1e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00f      	beq.n	800a212 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a1f2:	7dba      	ldrb	r2, [r7, #22]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a1fa:	7dba      	ldrb	r2, [r7, #22]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	32ae      	adds	r2, #174	; 0xae
 800a200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	7afa      	ldrb	r2, [r7, #11]
 800a208:	4611      	mov	r1, r2
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	4798      	blx	r3
 800a20e:	4603      	mov	r3, r0
 800a210:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a212:	7dfb      	ldrb	r3, [r7, #23]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	e000      	b.n	800a21e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b086      	sub	sp, #24
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	60f8      	str	r0, [r7, #12]
 800a22e:	460b      	mov	r3, r1
 800a230:	607a      	str	r2, [r7, #4]
 800a232:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a234:	7afb      	ldrb	r3, [r7, #11]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d16f      	bne.n	800a31a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3314      	adds	r3, #20
 800a23e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a246:	2b02      	cmp	r3, #2
 800a248:	d15a      	bne.n	800a300 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	689a      	ldr	r2, [r3, #8]
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	429a      	cmp	r2, r3
 800a254:	d914      	bls.n	800a280 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	1ad2      	subs	r2, r2, r3
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	461a      	mov	r2, r3
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f001 f8ac 	bl	800b3ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a272:	2300      	movs	r3, #0
 800a274:	2200      	movs	r2, #0
 800a276:	2100      	movs	r1, #0
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f001 fdad 	bl	800bdd8 <USBD_LL_PrepareReceive>
 800a27e:	e03f      	b.n	800a300 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	68da      	ldr	r2, [r3, #12]
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d11c      	bne.n	800a2c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a294:	429a      	cmp	r2, r3
 800a296:	d316      	bcc.n	800a2c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d20f      	bcs.n	800a2c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f001 f88d 	bl	800b3ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2100      	movs	r1, #0
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f001 fd8a 	bl	800bdd8 <USBD_LL_PrepareReceive>
 800a2c4:	e01c      	b.n	800a300 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d10f      	bne.n	800a2f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d009      	beq.n	800a2f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2f2:	2180      	movs	r1, #128	; 0x80
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f001 fcc5 	bl	800bc84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f001 f8b7 	bl	800b46e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d03a      	beq.n	800a380 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7ff fe42 	bl	8009f94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a318:	e032      	b.n	800a380 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a31a:	7afb      	ldrb	r3, [r7, #11]
 800a31c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a320:	b2db      	uxtb	r3, r3
 800a322:	4619      	mov	r1, r3
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f97f 	bl	800a628 <USBD_CoreFindEP>
 800a32a:	4603      	mov	r3, r0
 800a32c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a32e:	7dfb      	ldrb	r3, [r7, #23]
 800a330:	2bff      	cmp	r3, #255	; 0xff
 800a332:	d025      	beq.n	800a380 <USBD_LL_DataInStage+0x15a>
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d122      	bne.n	800a380 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b03      	cmp	r3, #3
 800a344:	d11c      	bne.n	800a380 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a346:	7dfa      	ldrb	r2, [r7, #23]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	32ae      	adds	r2, #174	; 0xae
 800a34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d014      	beq.n	800a380 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a356:	7dfa      	ldrb	r2, [r7, #23]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a35e:	7dfa      	ldrb	r2, [r7, #23]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	32ae      	adds	r2, #174	; 0xae
 800a364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	7afa      	ldrb	r2, [r7, #11]
 800a36c:	4611      	mov	r1, r2
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	4798      	blx	r3
 800a372:	4603      	mov	r3, r0
 800a374:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a376:	7dbb      	ldrb	r3, [r7, #22]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a37c:	7dbb      	ldrb	r3, [r7, #22]
 800a37e:	e000      	b.n	800a382 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d014      	beq.n	800a3f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00e      	beq.n	800a3f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	6852      	ldr	r2, [r2, #4]
 800a3de:	b2d2      	uxtb	r2, r2
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	4798      	blx	r3
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3f0:	2340      	movs	r3, #64	; 0x40
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f001 fbff 	bl	800bbfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2240      	movs	r2, #64	; 0x40
 800a408:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a40c:	2340      	movs	r3, #64	; 0x40
 800a40e:	2200      	movs	r2, #0
 800a410:	2180      	movs	r1, #128	; 0x80
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 fbf1 	bl	800bbfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2240      	movs	r2, #64	; 0x40
 800a422:	621a      	str	r2, [r3, #32]

  return ret;
 800a424:	7bfb      	ldrb	r3, [r7, #15]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	460b      	mov	r3, r1
 800a438:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	78fa      	ldrb	r2, [r7, #3]
 800a43e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	370c      	adds	r7, #12
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a44e:	b480      	push	{r7}
 800a450:	b083      	sub	sp, #12
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2204      	movs	r2, #4
 800a468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b04      	cmp	r3, #4
 800a48c:	d106      	bne.n	800a49c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a494:	b2da      	uxtb	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d110      	bne.n	800a4e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00b      	beq.n	800a4e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4da:	69db      	ldr	r3, [r3, #28]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	32ae      	adds	r2, #174	; 0xae
 800a500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a508:	2303      	movs	r3, #3
 800a50a:	e01c      	b.n	800a546 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b03      	cmp	r3, #3
 800a516:	d115      	bne.n	800a544 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	32ae      	adds	r2, #174	; 0xae
 800a522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00b      	beq.n	800a544 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	32ae      	adds	r2, #174	; 0xae
 800a536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	78fa      	ldrb	r2, [r7, #3]
 800a53e:	4611      	mov	r1, r2
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	32ae      	adds	r2, #174	; 0xae
 800a564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e01c      	b.n	800a5aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d115      	bne.n	800a5a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	32ae      	adds	r2, #174	; 0xae
 800a586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00b      	beq.n	800a5a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	32ae      	adds	r2, #174	; 0xae
 800a59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a0:	78fa      	ldrb	r2, [r7, #3]
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b083      	sub	sp, #12
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00e      	beq.n	800a604 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	6852      	ldr	r2, [r2, #4]
 800a5f2:	b2d2      	uxtb	r2, r2
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	4798      	blx	r3
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a600:	2303      	movs	r3, #3
 800a602:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a604:	7bfb      	ldrb	r3, [r7, #15]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a60e:	b480      	push	{r7}
 800a610:	b083      	sub	sp, #12
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	460b      	mov	r3, r1
 800a618:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a61a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a634:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b086      	sub	sp, #24
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	460b      	mov	r3, r1
 800a64c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a656:	2300      	movs	r3, #0
 800a658:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	885b      	ldrh	r3, [r3, #2]
 800a65e:	b29a      	uxth	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	b29b      	uxth	r3, r3
 800a666:	429a      	cmp	r2, r3
 800a668:	d920      	bls.n	800a6ac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a672:	e013      	b.n	800a69c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a674:	f107 030a 	add.w	r3, r7, #10
 800a678:	4619      	mov	r1, r3
 800a67a:	6978      	ldr	r0, [r7, #20]
 800a67c:	f000 f81b 	bl	800a6b6 <USBD_GetNextDesc>
 800a680:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	785b      	ldrb	r3, [r3, #1]
 800a686:	2b05      	cmp	r3, #5
 800a688:	d108      	bne.n	800a69c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	789b      	ldrb	r3, [r3, #2]
 800a692:	78fa      	ldrb	r2, [r7, #3]
 800a694:	429a      	cmp	r2, r3
 800a696:	d008      	beq.n	800a6aa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a698:	2300      	movs	r3, #0
 800a69a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	885b      	ldrh	r3, [r3, #2]
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	897b      	ldrh	r3, [r7, #10]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d8e5      	bhi.n	800a674 <USBD_GetEpDesc+0x32>
 800a6a8:	e000      	b.n	800a6ac <USBD_GetEpDesc+0x6a>
          break;
 800a6aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a6ac:	693b      	ldr	r3, [r7, #16]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b085      	sub	sp, #20
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	881a      	ldrh	r2, [r3, #0]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	4413      	add	r3, r2
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4413      	add	r3, r2
 800a6e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	3301      	adds	r3, #1
 800a706:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a70e:	8a3b      	ldrh	r3, [r7, #16]
 800a710:	021b      	lsls	r3, r3, #8
 800a712:	b21a      	sxth	r2, r3
 800a714:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a718:	4313      	orrs	r3, r2
 800a71a:	b21b      	sxth	r3, r3
 800a71c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a71e:	89fb      	ldrh	r3, [r7, #14]
}
 800a720:	4618      	mov	r0, r3
 800a722:	371c      	adds	r7, #28
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a742:	2b40      	cmp	r3, #64	; 0x40
 800a744:	d005      	beq.n	800a752 <USBD_StdDevReq+0x26>
 800a746:	2b40      	cmp	r3, #64	; 0x40
 800a748:	d857      	bhi.n	800a7fa <USBD_StdDevReq+0xce>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00f      	beq.n	800a76e <USBD_StdDevReq+0x42>
 800a74e:	2b20      	cmp	r3, #32
 800a750:	d153      	bne.n	800a7fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	32ae      	adds	r2, #174	; 0xae
 800a75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	4798      	blx	r3
 800a768:	4603      	mov	r3, r0
 800a76a:	73fb      	strb	r3, [r7, #15]
      break;
 800a76c:	e04a      	b.n	800a804 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	785b      	ldrb	r3, [r3, #1]
 800a772:	2b09      	cmp	r3, #9
 800a774:	d83b      	bhi.n	800a7ee <USBD_StdDevReq+0xc2>
 800a776:	a201      	add	r2, pc, #4	; (adr r2, 800a77c <USBD_StdDevReq+0x50>)
 800a778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77c:	0800a7d1 	.word	0x0800a7d1
 800a780:	0800a7e5 	.word	0x0800a7e5
 800a784:	0800a7ef 	.word	0x0800a7ef
 800a788:	0800a7db 	.word	0x0800a7db
 800a78c:	0800a7ef 	.word	0x0800a7ef
 800a790:	0800a7af 	.word	0x0800a7af
 800a794:	0800a7a5 	.word	0x0800a7a5
 800a798:	0800a7ef 	.word	0x0800a7ef
 800a79c:	0800a7c7 	.word	0x0800a7c7
 800a7a0:	0800a7b9 	.word	0x0800a7b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fa3c 	bl	800ac24 <USBD_GetDescriptor>
          break;
 800a7ac:	e024      	b.n	800a7f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fba1 	bl	800aef8 <USBD_SetAddress>
          break;
 800a7b6:	e01f      	b.n	800a7f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fbe0 	bl	800af80 <USBD_SetConfig>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73fb      	strb	r3, [r7, #15]
          break;
 800a7c4:	e018      	b.n	800a7f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fc83 	bl	800b0d4 <USBD_GetConfig>
          break;
 800a7ce:	e013      	b.n	800a7f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a7d0:	6839      	ldr	r1, [r7, #0]
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fcb4 	bl	800b140 <USBD_GetStatus>
          break;
 800a7d8:	e00e      	b.n	800a7f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fce3 	bl	800b1a8 <USBD_SetFeature>
          break;
 800a7e2:	e009      	b.n	800a7f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fd07 	bl	800b1fa <USBD_ClrFeature>
          break;
 800a7ec:	e004      	b.n	800a7f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fd5e 	bl	800b2b2 <USBD_CtlError>
          break;
 800a7f6:	bf00      	nop
      }
      break;
 800a7f8:	e004      	b.n	800a804 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fd58 	bl	800b2b2 <USBD_CtlError>
      break;
 800a802:	bf00      	nop
  }

  return ret;
 800a804:	7bfb      	ldrb	r3, [r7, #15]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop

0800a810 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a826:	2b40      	cmp	r3, #64	; 0x40
 800a828:	d005      	beq.n	800a836 <USBD_StdItfReq+0x26>
 800a82a:	2b40      	cmp	r3, #64	; 0x40
 800a82c:	d852      	bhi.n	800a8d4 <USBD_StdItfReq+0xc4>
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d001      	beq.n	800a836 <USBD_StdItfReq+0x26>
 800a832:	2b20      	cmp	r3, #32
 800a834:	d14e      	bne.n	800a8d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	3b01      	subs	r3, #1
 800a840:	2b02      	cmp	r3, #2
 800a842:	d840      	bhi.n	800a8c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	889b      	ldrh	r3, [r3, #4]
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d836      	bhi.n	800a8bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	889b      	ldrh	r3, [r3, #4]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7ff fed9 	bl	800a60e <USBD_CoreFindIF>
 800a85c:	4603      	mov	r3, r0
 800a85e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a860:	7bbb      	ldrb	r3, [r7, #14]
 800a862:	2bff      	cmp	r3, #255	; 0xff
 800a864:	d01d      	beq.n	800a8a2 <USBD_StdItfReq+0x92>
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d11a      	bne.n	800a8a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a86c:	7bba      	ldrb	r2, [r7, #14]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	32ae      	adds	r2, #174	; 0xae
 800a872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00f      	beq.n	800a89c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a87c:	7bba      	ldrb	r2, [r7, #14]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a884:	7bba      	ldrb	r2, [r7, #14]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	32ae      	adds	r2, #174	; 0xae
 800a88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	6839      	ldr	r1, [r7, #0]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	4798      	blx	r3
 800a896:	4603      	mov	r3, r0
 800a898:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a89a:	e004      	b.n	800a8a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a89c:	2303      	movs	r3, #3
 800a89e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a8a0:	e001      	b.n	800a8a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	88db      	ldrh	r3, [r3, #6]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d110      	bne.n	800a8d0 <USBD_StdItfReq+0xc0>
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10d      	bne.n	800a8d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fdc7 	bl	800b448 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8ba:	e009      	b.n	800a8d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a8bc:	6839      	ldr	r1, [r7, #0]
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fcf7 	bl	800b2b2 <USBD_CtlError>
          break;
 800a8c4:	e004      	b.n	800a8d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fcf2 	bl	800b2b2 <USBD_CtlError>
          break;
 800a8ce:	e000      	b.n	800a8d2 <USBD_StdItfReq+0xc2>
          break;
 800a8d0:	bf00      	nop
      }
      break;
 800a8d2:	e004      	b.n	800a8de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a8d4:	6839      	ldr	r1, [r7, #0]
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fceb 	bl	800b2b2 <USBD_CtlError>
      break;
 800a8dc:	bf00      	nop
  }

  return ret;
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	889b      	ldrh	r3, [r3, #4]
 800a8fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a904:	2b40      	cmp	r3, #64	; 0x40
 800a906:	d007      	beq.n	800a918 <USBD_StdEPReq+0x30>
 800a908:	2b40      	cmp	r3, #64	; 0x40
 800a90a:	f200 817f 	bhi.w	800ac0c <USBD_StdEPReq+0x324>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d02a      	beq.n	800a968 <USBD_StdEPReq+0x80>
 800a912:	2b20      	cmp	r3, #32
 800a914:	f040 817a 	bne.w	800ac0c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a918:	7bbb      	ldrb	r3, [r7, #14]
 800a91a:	4619      	mov	r1, r3
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7ff fe83 	bl	800a628 <USBD_CoreFindEP>
 800a922:	4603      	mov	r3, r0
 800a924:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a926:	7b7b      	ldrb	r3, [r7, #13]
 800a928:	2bff      	cmp	r3, #255	; 0xff
 800a92a:	f000 8174 	beq.w	800ac16 <USBD_StdEPReq+0x32e>
 800a92e:	7b7b      	ldrb	r3, [r7, #13]
 800a930:	2b00      	cmp	r3, #0
 800a932:	f040 8170 	bne.w	800ac16 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a936:	7b7a      	ldrb	r2, [r7, #13]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a93e:	7b7a      	ldrb	r2, [r7, #13]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	32ae      	adds	r2, #174	; 0xae
 800a944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 8163 	beq.w	800ac16 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a950:	7b7a      	ldrb	r2, [r7, #13]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	32ae      	adds	r2, #174	; 0xae
 800a956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	4798      	blx	r3
 800a962:	4603      	mov	r3, r0
 800a964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a966:	e156      	b.n	800ac16 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	785b      	ldrb	r3, [r3, #1]
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	d008      	beq.n	800a982 <USBD_StdEPReq+0x9a>
 800a970:	2b03      	cmp	r3, #3
 800a972:	f300 8145 	bgt.w	800ac00 <USBD_StdEPReq+0x318>
 800a976:	2b00      	cmp	r3, #0
 800a978:	f000 809b 	beq.w	800aab2 <USBD_StdEPReq+0x1ca>
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d03c      	beq.n	800a9fa <USBD_StdEPReq+0x112>
 800a980:	e13e      	b.n	800ac00 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d002      	beq.n	800a994 <USBD_StdEPReq+0xac>
 800a98e:	2b03      	cmp	r3, #3
 800a990:	d016      	beq.n	800a9c0 <USBD_StdEPReq+0xd8>
 800a992:	e02c      	b.n	800a9ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a994:	7bbb      	ldrb	r3, [r7, #14]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00d      	beq.n	800a9b6 <USBD_StdEPReq+0xce>
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	2b80      	cmp	r3, #128	; 0x80
 800a99e:	d00a      	beq.n	800a9b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f001 f96d 	bl	800bc84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9aa:	2180      	movs	r1, #128	; 0x80
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f001 f969 	bl	800bc84 <USBD_LL_StallEP>
 800a9b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9b4:	e020      	b.n	800a9f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fc7a 	bl	800b2b2 <USBD_CtlError>
              break;
 800a9be:	e01b      	b.n	800a9f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	885b      	ldrh	r3, [r3, #2]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10e      	bne.n	800a9e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00b      	beq.n	800a9e6 <USBD_StdEPReq+0xfe>
 800a9ce:	7bbb      	ldrb	r3, [r7, #14]
 800a9d0:	2b80      	cmp	r3, #128	; 0x80
 800a9d2:	d008      	beq.n	800a9e6 <USBD_StdEPReq+0xfe>
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	88db      	ldrh	r3, [r3, #6]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d104      	bne.n	800a9e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 f94f 	bl	800bc84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fd2e 	bl	800b448 <USBD_CtlSendStatus>

              break;
 800a9ec:	e004      	b.n	800a9f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fc5e 	bl	800b2b2 <USBD_CtlError>
              break;
 800a9f6:	bf00      	nop
          }
          break;
 800a9f8:	e107      	b.n	800ac0a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d002      	beq.n	800aa0c <USBD_StdEPReq+0x124>
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d016      	beq.n	800aa38 <USBD_StdEPReq+0x150>
 800aa0a:	e04b      	b.n	800aaa4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00d      	beq.n	800aa2e <USBD_StdEPReq+0x146>
 800aa12:	7bbb      	ldrb	r3, [r7, #14]
 800aa14:	2b80      	cmp	r3, #128	; 0x80
 800aa16:	d00a      	beq.n	800aa2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f001 f931 	bl	800bc84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa22:	2180      	movs	r1, #128	; 0x80
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f001 f92d 	bl	800bc84 <USBD_LL_StallEP>
 800aa2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa2c:	e040      	b.n	800aab0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fc3e 	bl	800b2b2 <USBD_CtlError>
              break;
 800aa36:	e03b      	b.n	800aab0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	885b      	ldrh	r3, [r3, #2]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d136      	bne.n	800aaae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa40:	7bbb      	ldrb	r3, [r7, #14]
 800aa42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d004      	beq.n	800aa54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f001 f937 	bl	800bcc2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fcf7 	bl	800b448 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff fde2 	bl	800a628 <USBD_CoreFindEP>
 800aa64:	4603      	mov	r3, r0
 800aa66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa68:	7b7b      	ldrb	r3, [r7, #13]
 800aa6a:	2bff      	cmp	r3, #255	; 0xff
 800aa6c:	d01f      	beq.n	800aaae <USBD_StdEPReq+0x1c6>
 800aa6e:	7b7b      	ldrb	r3, [r7, #13]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d11c      	bne.n	800aaae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aa74:	7b7a      	ldrb	r2, [r7, #13]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aa7c:	7b7a      	ldrb	r2, [r7, #13]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	32ae      	adds	r2, #174	; 0xae
 800aa82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d010      	beq.n	800aaae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa8c:	7b7a      	ldrb	r2, [r7, #13]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	32ae      	adds	r2, #174	; 0xae
 800aa92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	4798      	blx	r3
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aaa2:	e004      	b.n	800aaae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fc03 	bl	800b2b2 <USBD_CtlError>
              break;
 800aaac:	e000      	b.n	800aab0 <USBD_StdEPReq+0x1c8>
              break;
 800aaae:	bf00      	nop
          }
          break;
 800aab0:	e0ab      	b.n	800ac0a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d002      	beq.n	800aac4 <USBD_StdEPReq+0x1dc>
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d032      	beq.n	800ab28 <USBD_StdEPReq+0x240>
 800aac2:	e097      	b.n	800abf4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aac4:	7bbb      	ldrb	r3, [r7, #14]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d007      	beq.n	800aada <USBD_StdEPReq+0x1f2>
 800aaca:	7bbb      	ldrb	r3, [r7, #14]
 800aacc:	2b80      	cmp	r3, #128	; 0x80
 800aace:	d004      	beq.n	800aada <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fbed 	bl	800b2b2 <USBD_CtlError>
                break;
 800aad8:	e091      	b.n	800abfe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aada:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	da0b      	bge.n	800aafa <USBD_StdEPReq+0x212>
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
 800aae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aae8:	4613      	mov	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	3310      	adds	r3, #16
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	e00b      	b.n	800ab12 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
 800aafc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab00:	4613      	mov	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	4413      	add	r3, r2
 800ab10:	3304      	adds	r3, #4
 800ab12:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2200      	movs	r2, #0
 800ab18:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fc37 	bl	800b394 <USBD_CtlSendData>
              break;
 800ab26:	e06a      	b.n	800abfe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	da11      	bge.n	800ab54 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	f003 020f 	and.w	r2, r3, #15
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	440b      	add	r3, r1
 800ab42:	3324      	adds	r3, #36	; 0x24
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d117      	bne.n	800ab7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fbb0 	bl	800b2b2 <USBD_CtlError>
                  break;
 800ab52:	e054      	b.n	800abfe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab54:	7bbb      	ldrb	r3, [r7, #14]
 800ab56:	f003 020f 	and.w	r2, r3, #15
 800ab5a:	6879      	ldr	r1, [r7, #4]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	440b      	add	r3, r1
 800ab66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d104      	bne.n	800ab7a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fb9d 	bl	800b2b2 <USBD_CtlError>
                  break;
 800ab78:	e041      	b.n	800abfe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	da0b      	bge.n	800ab9a <USBD_StdEPReq+0x2b2>
 800ab82:	7bbb      	ldrb	r3, [r7, #14]
 800ab84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab88:	4613      	mov	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4413      	add	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	3310      	adds	r3, #16
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	4413      	add	r3, r2
 800ab96:	3304      	adds	r3, #4
 800ab98:	e00b      	b.n	800abb2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
 800ab9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aba0:	4613      	mov	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	4413      	add	r3, r2
 800abb0:	3304      	adds	r3, #4
 800abb2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d002      	beq.n	800abc0 <USBD_StdEPReq+0x2d8>
 800abba:	7bbb      	ldrb	r3, [r7, #14]
 800abbc:	2b80      	cmp	r3, #128	; 0x80
 800abbe:	d103      	bne.n	800abc8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	2200      	movs	r2, #0
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	e00e      	b.n	800abe6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800abc8:	7bbb      	ldrb	r3, [r7, #14]
 800abca:	4619      	mov	r1, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f001 f897 	bl	800bd00 <USBD_LL_IsStallEP>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d003      	beq.n	800abe0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2201      	movs	r2, #1
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	e002      	b.n	800abe6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	2202      	movs	r2, #2
 800abea:	4619      	mov	r1, r3
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fbd1 	bl	800b394 <USBD_CtlSendData>
              break;
 800abf2:	e004      	b.n	800abfe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fb5b 	bl	800b2b2 <USBD_CtlError>
              break;
 800abfc:	bf00      	nop
          }
          break;
 800abfe:	e004      	b.n	800ac0a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ac00:	6839      	ldr	r1, [r7, #0]
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fb55 	bl	800b2b2 <USBD_CtlError>
          break;
 800ac08:	bf00      	nop
      }
      break;
 800ac0a:	e005      	b.n	800ac18 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fb4f 	bl	800b2b2 <USBD_CtlError>
      break;
 800ac14:	e000      	b.n	800ac18 <USBD_StdEPReq+0x330>
      break;
 800ac16:	bf00      	nop
  }

  return ret;
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
	...

0800ac24 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	885b      	ldrh	r3, [r3, #2]
 800ac3e:	0a1b      	lsrs	r3, r3, #8
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	3b01      	subs	r3, #1
 800ac44:	2b06      	cmp	r3, #6
 800ac46:	f200 8128 	bhi.w	800ae9a <USBD_GetDescriptor+0x276>
 800ac4a:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <USBD_GetDescriptor+0x2c>)
 800ac4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac50:	0800ac6d 	.word	0x0800ac6d
 800ac54:	0800ac85 	.word	0x0800ac85
 800ac58:	0800acc5 	.word	0x0800acc5
 800ac5c:	0800ae9b 	.word	0x0800ae9b
 800ac60:	0800ae9b 	.word	0x0800ae9b
 800ac64:	0800ae3b 	.word	0x0800ae3b
 800ac68:	0800ae67 	.word	0x0800ae67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	7c12      	ldrb	r2, [r2, #16]
 800ac78:	f107 0108 	add.w	r1, r7, #8
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	4798      	blx	r3
 800ac80:	60f8      	str	r0, [r7, #12]
      break;
 800ac82:	e112      	b.n	800aeaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	7c1b      	ldrb	r3, [r3, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10d      	bne.n	800aca8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac94:	f107 0208 	add.w	r2, r7, #8
 800ac98:	4610      	mov	r0, r2
 800ac9a:	4798      	blx	r3
 800ac9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	3301      	adds	r3, #1
 800aca2:	2202      	movs	r2, #2
 800aca4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aca6:	e100      	b.n	800aeaa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb0:	f107 0208 	add.w	r2, r7, #8
 800acb4:	4610      	mov	r0, r2
 800acb6:	4798      	blx	r3
 800acb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3301      	adds	r3, #1
 800acbe:	2202      	movs	r2, #2
 800acc0:	701a      	strb	r2, [r3, #0]
      break;
 800acc2:	e0f2      	b.n	800aeaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	885b      	ldrh	r3, [r3, #2]
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b05      	cmp	r3, #5
 800accc:	f200 80ac 	bhi.w	800ae28 <USBD_GetDescriptor+0x204>
 800acd0:	a201      	add	r2, pc, #4	; (adr r2, 800acd8 <USBD_GetDescriptor+0xb4>)
 800acd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd6:	bf00      	nop
 800acd8:	0800acf1 	.word	0x0800acf1
 800acdc:	0800ad25 	.word	0x0800ad25
 800ace0:	0800ad59 	.word	0x0800ad59
 800ace4:	0800ad8d 	.word	0x0800ad8d
 800ace8:	0800adc1 	.word	0x0800adc1
 800acec:	0800adf5 	.word	0x0800adf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00b      	beq.n	800ad14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	7c12      	ldrb	r2, [r2, #16]
 800ad08:	f107 0108 	add.w	r1, r7, #8
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	4798      	blx	r3
 800ad10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad12:	e091      	b.n	800ae38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 facb 	bl	800b2b2 <USBD_CtlError>
            err++;
 800ad1c:	7afb      	ldrb	r3, [r7, #11]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	72fb      	strb	r3, [r7, #11]
          break;
 800ad22:	e089      	b.n	800ae38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00b      	beq.n	800ad48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	7c12      	ldrb	r2, [r2, #16]
 800ad3c:	f107 0108 	add.w	r1, r7, #8
 800ad40:	4610      	mov	r0, r2
 800ad42:	4798      	blx	r3
 800ad44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad46:	e077      	b.n	800ae38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fab1 	bl	800b2b2 <USBD_CtlError>
            err++;
 800ad50:	7afb      	ldrb	r3, [r7, #11]
 800ad52:	3301      	adds	r3, #1
 800ad54:	72fb      	strb	r3, [r7, #11]
          break;
 800ad56:	e06f      	b.n	800ae38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00b      	beq.n	800ad7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	7c12      	ldrb	r2, [r2, #16]
 800ad70:	f107 0108 	add.w	r1, r7, #8
 800ad74:	4610      	mov	r0, r2
 800ad76:	4798      	blx	r3
 800ad78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad7a:	e05d      	b.n	800ae38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fa97 	bl	800b2b2 <USBD_CtlError>
            err++;
 800ad84:	7afb      	ldrb	r3, [r7, #11]
 800ad86:	3301      	adds	r3, #1
 800ad88:	72fb      	strb	r3, [r7, #11]
          break;
 800ad8a:	e055      	b.n	800ae38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00b      	beq.n	800adb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	7c12      	ldrb	r2, [r2, #16]
 800ada4:	f107 0108 	add.w	r1, r7, #8
 800ada8:	4610      	mov	r0, r2
 800adaa:	4798      	blx	r3
 800adac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adae:	e043      	b.n	800ae38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fa7d 	bl	800b2b2 <USBD_CtlError>
            err++;
 800adb8:	7afb      	ldrb	r3, [r7, #11]
 800adba:	3301      	adds	r3, #1
 800adbc:	72fb      	strb	r3, [r7, #11]
          break;
 800adbe:	e03b      	b.n	800ae38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00b      	beq.n	800ade4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	7c12      	ldrb	r2, [r2, #16]
 800add8:	f107 0108 	add.w	r1, r7, #8
 800addc:	4610      	mov	r0, r2
 800adde:	4798      	blx	r3
 800ade0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ade2:	e029      	b.n	800ae38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fa63 	bl	800b2b2 <USBD_CtlError>
            err++;
 800adec:	7afb      	ldrb	r3, [r7, #11]
 800adee:	3301      	adds	r3, #1
 800adf0:	72fb      	strb	r3, [r7, #11]
          break;
 800adf2:	e021      	b.n	800ae38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00b      	beq.n	800ae18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	7c12      	ldrb	r2, [r2, #16]
 800ae0c:	f107 0108 	add.w	r1, r7, #8
 800ae10:	4610      	mov	r0, r2
 800ae12:	4798      	blx	r3
 800ae14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae16:	e00f      	b.n	800ae38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fa49 	bl	800b2b2 <USBD_CtlError>
            err++;
 800ae20:	7afb      	ldrb	r3, [r7, #11]
 800ae22:	3301      	adds	r3, #1
 800ae24:	72fb      	strb	r3, [r7, #11]
          break;
 800ae26:	e007      	b.n	800ae38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fa41 	bl	800b2b2 <USBD_CtlError>
          err++;
 800ae30:	7afb      	ldrb	r3, [r7, #11]
 800ae32:	3301      	adds	r3, #1
 800ae34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ae36:	bf00      	nop
      }
      break;
 800ae38:	e037      	b.n	800aeaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	7c1b      	ldrb	r3, [r3, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d109      	bne.n	800ae56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae4a:	f107 0208 	add.w	r2, r7, #8
 800ae4e:	4610      	mov	r0, r2
 800ae50:	4798      	blx	r3
 800ae52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae54:	e029      	b.n	800aeaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fa2a 	bl	800b2b2 <USBD_CtlError>
        err++;
 800ae5e:	7afb      	ldrb	r3, [r7, #11]
 800ae60:	3301      	adds	r3, #1
 800ae62:	72fb      	strb	r3, [r7, #11]
      break;
 800ae64:	e021      	b.n	800aeaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	7c1b      	ldrb	r3, [r3, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10d      	bne.n	800ae8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae76:	f107 0208 	add.w	r2, r7, #8
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	4798      	blx	r3
 800ae7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3301      	adds	r3, #1
 800ae84:	2207      	movs	r2, #7
 800ae86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae88:	e00f      	b.n	800aeaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fa10 	bl	800b2b2 <USBD_CtlError>
        err++;
 800ae92:	7afb      	ldrb	r3, [r7, #11]
 800ae94:	3301      	adds	r3, #1
 800ae96:	72fb      	strb	r3, [r7, #11]
      break;
 800ae98:	e007      	b.n	800aeaa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fa08 	bl	800b2b2 <USBD_CtlError>
      err++;
 800aea2:	7afb      	ldrb	r3, [r7, #11]
 800aea4:	3301      	adds	r3, #1
 800aea6:	72fb      	strb	r3, [r7, #11]
      break;
 800aea8:	bf00      	nop
  }

  if (err != 0U)
 800aeaa:	7afb      	ldrb	r3, [r7, #11]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d11e      	bne.n	800aeee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	88db      	ldrh	r3, [r3, #6]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d016      	beq.n	800aee6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aeb8:	893b      	ldrh	r3, [r7, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00e      	beq.n	800aedc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	88da      	ldrh	r2, [r3, #6]
 800aec2:	893b      	ldrh	r3, [r7, #8]
 800aec4:	4293      	cmp	r3, r2
 800aec6:	bf28      	it	cs
 800aec8:	4613      	movcs	r3, r2
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aece:	893b      	ldrh	r3, [r7, #8]
 800aed0:	461a      	mov	r2, r3
 800aed2:	68f9      	ldr	r1, [r7, #12]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fa5d 	bl	800b394 <USBD_CtlSendData>
 800aeda:	e009      	b.n	800aef0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f9e7 	bl	800b2b2 <USBD_CtlError>
 800aee4:	e004      	b.n	800aef0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 faae 	bl	800b448 <USBD_CtlSendStatus>
 800aeec:	e000      	b.n	800aef0 <USBD_GetDescriptor+0x2cc>
    return;
 800aeee:	bf00      	nop
  }
}
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop

0800aef8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	889b      	ldrh	r3, [r3, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d131      	bne.n	800af6e <USBD_SetAddress+0x76>
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	88db      	ldrh	r3, [r3, #6]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d12d      	bne.n	800af6e <USBD_SetAddress+0x76>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	885b      	ldrh	r3, [r3, #2]
 800af16:	2b7f      	cmp	r3, #127	; 0x7f
 800af18:	d829      	bhi.n	800af6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	885b      	ldrh	r3, [r3, #2]
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	2b03      	cmp	r3, #3
 800af30:	d104      	bne.n	800af3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af32:	6839      	ldr	r1, [r7, #0]
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f9bc 	bl	800b2b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af3a:	e01d      	b.n	800af78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	7bfa      	ldrb	r2, [r7, #15]
 800af40:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af44:	7bfb      	ldrb	r3, [r7, #15]
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 ff05 	bl	800bd58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa7a 	bl	800b448 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af54:	7bfb      	ldrb	r3, [r7, #15]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d004      	beq.n	800af64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2202      	movs	r2, #2
 800af5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af62:	e009      	b.n	800af78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af6c:	e004      	b.n	800af78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f99e 	bl	800b2b2 <USBD_CtlError>
  }
}
 800af76:	bf00      	nop
 800af78:	bf00      	nop
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	885b      	ldrh	r3, [r3, #2]
 800af92:	b2da      	uxtb	r2, r3
 800af94:	4b4e      	ldr	r3, [pc, #312]	; (800b0d0 <USBD_SetConfig+0x150>)
 800af96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af98:	4b4d      	ldr	r3, [pc, #308]	; (800b0d0 <USBD_SetConfig+0x150>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d905      	bls.n	800afac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f985 	bl	800b2b2 <USBD_CtlError>
    return USBD_FAIL;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e08c      	b.n	800b0c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d002      	beq.n	800afbe <USBD_SetConfig+0x3e>
 800afb8:	2b03      	cmp	r3, #3
 800afba:	d029      	beq.n	800b010 <USBD_SetConfig+0x90>
 800afbc:	e075      	b.n	800b0aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800afbe:	4b44      	ldr	r3, [pc, #272]	; (800b0d0 <USBD_SetConfig+0x150>)
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d020      	beq.n	800b008 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800afc6:	4b42      	ldr	r3, [pc, #264]	; (800b0d0 <USBD_SetConfig+0x150>)
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afd0:	4b3f      	ldr	r3, [pc, #252]	; (800b0d0 <USBD_SetConfig+0x150>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7fe ffe7 	bl	8009faa <USBD_SetClassConfig>
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d008      	beq.n	800aff8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f962 	bl	800b2b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2202      	movs	r2, #2
 800aff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aff6:	e065      	b.n	800b0c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fa25 	bl	800b448 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2203      	movs	r2, #3
 800b002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b006:	e05d      	b.n	800b0c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fa1d 	bl	800b448 <USBD_CtlSendStatus>
      break;
 800b00e:	e059      	b.n	800b0c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b010:	4b2f      	ldr	r3, [pc, #188]	; (800b0d0 <USBD_SetConfig+0x150>)
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d112      	bne.n	800b03e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b020:	4b2b      	ldr	r3, [pc, #172]	; (800b0d0 <USBD_SetConfig+0x150>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	461a      	mov	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b02a:	4b29      	ldr	r3, [pc, #164]	; (800b0d0 <USBD_SetConfig+0x150>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7fe ffd6 	bl	8009fe2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fa06 	bl	800b448 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b03c:	e042      	b.n	800b0c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b03e:	4b24      	ldr	r3, [pc, #144]	; (800b0d0 <USBD_SetConfig+0x150>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d02a      	beq.n	800b0a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7fe ffc4 	bl	8009fe2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b05a:	4b1d      	ldr	r3, [pc, #116]	; (800b0d0 <USBD_SetConfig+0x150>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b064:	4b1a      	ldr	r3, [pc, #104]	; (800b0d0 <USBD_SetConfig+0x150>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7fe ff9d 	bl	8009faa <USBD_SetClassConfig>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00f      	beq.n	800b09a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f918 	bl	800b2b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	b2db      	uxtb	r3, r3
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7fe ffa9 	bl	8009fe2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2202      	movs	r2, #2
 800b094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b098:	e014      	b.n	800b0c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f9d4 	bl	800b448 <USBD_CtlSendStatus>
      break;
 800b0a0:	e010      	b.n	800b0c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f9d0 	bl	800b448 <USBD_CtlSendStatus>
      break;
 800b0a8:	e00c      	b.n	800b0c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f900 	bl	800b2b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0b2:	4b07      	ldr	r3, [pc, #28]	; (800b0d0 <USBD_SetConfig+0x150>)
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7fe ff92 	bl	8009fe2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c2:	bf00      	nop
  }

  return ret;
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	2000067c 	.word	0x2000067c

0800b0d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	88db      	ldrh	r3, [r3, #6]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d004      	beq.n	800b0f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 f8e2 	bl	800b2b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0ee:	e023      	b.n	800b138 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	dc02      	bgt.n	800b102 <USBD_GetConfig+0x2e>
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	dc03      	bgt.n	800b108 <USBD_GetConfig+0x34>
 800b100:	e015      	b.n	800b12e <USBD_GetConfig+0x5a>
 800b102:	2b03      	cmp	r3, #3
 800b104:	d00b      	beq.n	800b11e <USBD_GetConfig+0x4a>
 800b106:	e012      	b.n	800b12e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	3308      	adds	r3, #8
 800b112:	2201      	movs	r2, #1
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f93c 	bl	800b394 <USBD_CtlSendData>
        break;
 800b11c:	e00c      	b.n	800b138 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3304      	adds	r3, #4
 800b122:	2201      	movs	r2, #1
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f934 	bl	800b394 <USBD_CtlSendData>
        break;
 800b12c:	e004      	b.n	800b138 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f8be 	bl	800b2b2 <USBD_CtlError>
        break;
 800b136:	bf00      	nop
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b150:	b2db      	uxtb	r3, r3
 800b152:	3b01      	subs	r3, #1
 800b154:	2b02      	cmp	r3, #2
 800b156:	d81e      	bhi.n	800b196 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	88db      	ldrh	r3, [r3, #6]
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d004      	beq.n	800b16a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f8a5 	bl	800b2b2 <USBD_CtlError>
        break;
 800b168:	e01a      	b.n	800b1a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b176:	2b00      	cmp	r3, #0
 800b178:	d005      	beq.n	800b186 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	f043 0202 	orr.w	r2, r3, #2
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	330c      	adds	r3, #12
 800b18a:	2202      	movs	r2, #2
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f900 	bl	800b394 <USBD_CtlSendData>
      break;
 800b194:	e004      	b.n	800b1a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f88a 	bl	800b2b2 <USBD_CtlError>
      break;
 800b19e:	bf00      	nop
  }
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	885b      	ldrh	r3, [r3, #2]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d107      	bne.n	800b1ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f940 	bl	800b448 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b1c8:	e013      	b.n	800b1f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	885b      	ldrh	r3, [r3, #2]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d10b      	bne.n	800b1ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	889b      	ldrh	r3, [r3, #4]
 800b1d6:	0a1b      	lsrs	r3, r3, #8
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 f930 	bl	800b448 <USBD_CtlSendStatus>
}
 800b1e8:	e003      	b.n	800b1f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b1ea:	6839      	ldr	r1, [r7, #0]
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 f860 	bl	800b2b2 <USBD_CtlError>
}
 800b1f2:	bf00      	nop
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	3b01      	subs	r3, #1
 800b20e:	2b02      	cmp	r3, #2
 800b210:	d80b      	bhi.n	800b22a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	885b      	ldrh	r3, [r3, #2]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d10c      	bne.n	800b234 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f910 	bl	800b448 <USBD_CtlSendStatus>
      }
      break;
 800b228:	e004      	b.n	800b234 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f840 	bl	800b2b2 <USBD_CtlError>
      break;
 800b232:	e000      	b.n	800b236 <USBD_ClrFeature+0x3c>
      break;
 800b234:	bf00      	nop
  }
}
 800b236:	bf00      	nop
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b084      	sub	sp, #16
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	781a      	ldrb	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3301      	adds	r3, #1
 800b258:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	781a      	ldrb	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	3301      	adds	r3, #1
 800b266:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f7ff fa41 	bl	800a6f0 <SWAPBYTE>
 800b26e:	4603      	mov	r3, r0
 800b270:	461a      	mov	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3301      	adds	r3, #1
 800b27a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3301      	adds	r3, #1
 800b280:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f7ff fa34 	bl	800a6f0 <SWAPBYTE>
 800b288:	4603      	mov	r3, r0
 800b28a:	461a      	mov	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	3301      	adds	r3, #1
 800b294:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3301      	adds	r3, #1
 800b29a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	f7ff fa27 	bl	800a6f0 <SWAPBYTE>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	80da      	strh	r2, [r3, #6]
}
 800b2aa:	bf00      	nop
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2bc:	2180      	movs	r1, #128	; 0x80
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fce0 	bl	800bc84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fcdc 	bl	800bc84 <USBD_LL_StallEP>
}
 800b2cc:	bf00      	nop
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d036      	beq.n	800b358 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b2ee:	6938      	ldr	r0, [r7, #16]
 800b2f0:	f000 f836 	bl	800b360 <USBD_GetLen>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b302:	7dfb      	ldrb	r3, [r7, #23]
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	4413      	add	r3, r2
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	7812      	ldrb	r2, [r2, #0]
 800b30c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	3301      	adds	r3, #1
 800b312:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b314:	7dfb      	ldrb	r3, [r7, #23]
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	4413      	add	r3, r2
 800b31a:	2203      	movs	r2, #3
 800b31c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	3301      	adds	r3, #1
 800b322:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b324:	e013      	b.n	800b34e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b326:	7dfb      	ldrb	r3, [r7, #23]
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	4413      	add	r3, r2
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	7812      	ldrb	r2, [r2, #0]
 800b330:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	3301      	adds	r3, #1
 800b336:	613b      	str	r3, [r7, #16]
    idx++;
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	3301      	adds	r3, #1
 800b33c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	4413      	add	r3, r2
 800b344:	2200      	movs	r2, #0
 800b346:	701a      	strb	r2, [r3, #0]
    idx++;
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	3301      	adds	r3, #1
 800b34c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1e7      	bne.n	800b326 <USBD_GetString+0x52>
 800b356:	e000      	b.n	800b35a <USBD_GetString+0x86>
    return;
 800b358:	bf00      	nop
  }
}
 800b35a:	3718      	adds	r7, #24
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b368:	2300      	movs	r3, #0
 800b36a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b370:	e005      	b.n	800b37e <USBD_GetLen+0x1e>
  {
    len++;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
 800b374:	3301      	adds	r3, #1
 800b376:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	3301      	adds	r3, #1
 800b37c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1f5      	bne.n	800b372 <USBD_GetLen+0x12>
  }

  return len;
 800b386:	7bfb      	ldrb	r3, [r7, #15]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68ba      	ldr	r2, [r7, #8]
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f000 fceb 	bl	800bd96 <USBD_LL_Transmit>

  return USBD_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b084      	sub	sp, #16
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	60f8      	str	r0, [r7, #12]
 800b3d2:	60b9      	str	r1, [r7, #8]
 800b3d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	2100      	movs	r1, #0
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f000 fcda 	bl	800bd96 <USBD_LL_Transmit>

  return USBD_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2203      	movs	r2, #3
 800b3fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	2100      	movs	r1, #0
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 fcde 	bl	800bdd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	60f8      	str	r0, [r7, #12]
 800b42e:	60b9      	str	r1, [r7, #8]
 800b430:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68ba      	ldr	r2, [r7, #8]
 800b436:	2100      	movs	r1, #0
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f000 fccd 	bl	800bdd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2204      	movs	r2, #4
 800b454:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b458:	2300      	movs	r3, #0
 800b45a:	2200      	movs	r2, #0
 800b45c:	2100      	movs	r1, #0
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fc99 	bl	800bd96 <USBD_LL_Transmit>

  return USBD_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b082      	sub	sp, #8
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2205      	movs	r2, #5
 800b47a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b47e:	2300      	movs	r3, #0
 800b480:	2200      	movs	r2, #0
 800b482:	2100      	movs	r1, #0
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 fca7 	bl	800bdd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b498:	2200      	movs	r2, #0
 800b49a:	4912      	ldr	r1, [pc, #72]	; (800b4e4 <MX_USB_DEVICE_Init+0x50>)
 800b49c:	4812      	ldr	r0, [pc, #72]	; (800b4e8 <MX_USB_DEVICE_Init+0x54>)
 800b49e:	f7fe fd07 	bl	8009eb0 <USBD_Init>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d001      	beq.n	800b4ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b4a8:	f7f5 fede 	bl	8001268 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b4ac:	490f      	ldr	r1, [pc, #60]	; (800b4ec <MX_USB_DEVICE_Init+0x58>)
 800b4ae:	480e      	ldr	r0, [pc, #56]	; (800b4e8 <MX_USB_DEVICE_Init+0x54>)
 800b4b0:	f7fe fd2e 	bl	8009f10 <USBD_RegisterClass>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d001      	beq.n	800b4be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b4ba:	f7f5 fed5 	bl	8001268 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b4be:	490c      	ldr	r1, [pc, #48]	; (800b4f0 <MX_USB_DEVICE_Init+0x5c>)
 800b4c0:	4809      	ldr	r0, [pc, #36]	; (800b4e8 <MX_USB_DEVICE_Init+0x54>)
 800b4c2:	f7fe fc1f 	bl	8009d04 <USBD_CDC_RegisterInterface>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b4cc:	f7f5 fecc 	bl	8001268 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b4d0:	4805      	ldr	r0, [pc, #20]	; (800b4e8 <MX_USB_DEVICE_Init+0x54>)
 800b4d2:	f7fe fd53 	bl	8009f7c <USBD_Start>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b4dc:	f7f5 fec4 	bl	8001268 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b4e0:	bf00      	nop
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	20000128 	.word	0x20000128
 800b4e8:	20000680 	.word	0x20000680
 800b4ec:	20000094 	.word	0x20000094
 800b4f0:	20000114 	.word	0x20000114

0800b4f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	4905      	ldr	r1, [pc, #20]	; (800b510 <CDC_Init_FS+0x1c>)
 800b4fc:	4805      	ldr	r0, [pc, #20]	; (800b514 <CDC_Init_FS+0x20>)
 800b4fe:	f7fe fc1b 	bl	8009d38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b502:	4905      	ldr	r1, [pc, #20]	; (800b518 <CDC_Init_FS+0x24>)
 800b504:	4803      	ldr	r0, [pc, #12]	; (800b514 <CDC_Init_FS+0x20>)
 800b506:	f7fe fc39 	bl	8009d7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b50a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	2000115c 	.word	0x2000115c
 800b514:	20000680 	.word	0x20000680
 800b518:	2000095c 	.word	0x2000095c

0800b51c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b51c:	b480      	push	{r7}
 800b51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b520:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b522:	4618      	mov	r0, r3
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	4603      	mov	r3, r0
 800b534:	6039      	str	r1, [r7, #0]
 800b536:	71fb      	strb	r3, [r7, #7]
 800b538:	4613      	mov	r3, r2
 800b53a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b53c:	79fb      	ldrb	r3, [r7, #7]
 800b53e:	2b23      	cmp	r3, #35	; 0x23
 800b540:	d84a      	bhi.n	800b5d8 <CDC_Control_FS+0xac>
 800b542:	a201      	add	r2, pc, #4	; (adr r2, 800b548 <CDC_Control_FS+0x1c>)
 800b544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b548:	0800b5d9 	.word	0x0800b5d9
 800b54c:	0800b5d9 	.word	0x0800b5d9
 800b550:	0800b5d9 	.word	0x0800b5d9
 800b554:	0800b5d9 	.word	0x0800b5d9
 800b558:	0800b5d9 	.word	0x0800b5d9
 800b55c:	0800b5d9 	.word	0x0800b5d9
 800b560:	0800b5d9 	.word	0x0800b5d9
 800b564:	0800b5d9 	.word	0x0800b5d9
 800b568:	0800b5d9 	.word	0x0800b5d9
 800b56c:	0800b5d9 	.word	0x0800b5d9
 800b570:	0800b5d9 	.word	0x0800b5d9
 800b574:	0800b5d9 	.word	0x0800b5d9
 800b578:	0800b5d9 	.word	0x0800b5d9
 800b57c:	0800b5d9 	.word	0x0800b5d9
 800b580:	0800b5d9 	.word	0x0800b5d9
 800b584:	0800b5d9 	.word	0x0800b5d9
 800b588:	0800b5d9 	.word	0x0800b5d9
 800b58c:	0800b5d9 	.word	0x0800b5d9
 800b590:	0800b5d9 	.word	0x0800b5d9
 800b594:	0800b5d9 	.word	0x0800b5d9
 800b598:	0800b5d9 	.word	0x0800b5d9
 800b59c:	0800b5d9 	.word	0x0800b5d9
 800b5a0:	0800b5d9 	.word	0x0800b5d9
 800b5a4:	0800b5d9 	.word	0x0800b5d9
 800b5a8:	0800b5d9 	.word	0x0800b5d9
 800b5ac:	0800b5d9 	.word	0x0800b5d9
 800b5b0:	0800b5d9 	.word	0x0800b5d9
 800b5b4:	0800b5d9 	.word	0x0800b5d9
 800b5b8:	0800b5d9 	.word	0x0800b5d9
 800b5bc:	0800b5d9 	.word	0x0800b5d9
 800b5c0:	0800b5d9 	.word	0x0800b5d9
 800b5c4:	0800b5d9 	.word	0x0800b5d9
 800b5c8:	0800b5d9 	.word	0x0800b5d9
 800b5cc:	0800b5d9 	.word	0x0800b5d9
 800b5d0:	0800b5d9 	.word	0x0800b5d9
 800b5d4:	0800b5d9 	.word	0x0800b5d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b5d8:	bf00      	nop
  }

  return (USBD_OK);
 800b5da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5f2:	6879      	ldr	r1, [r7, #4]
 800b5f4:	4805      	ldr	r0, [pc, #20]	; (800b60c <CDC_Receive_FS+0x24>)
 800b5f6:	f7fe fbc1 	bl	8009d7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5fa:	4804      	ldr	r0, [pc, #16]	; (800b60c <CDC_Receive_FS+0x24>)
 800b5fc:	f7fe fc22 	bl	8009e44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b600:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b602:	4618      	mov	r0, r3
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	20000680 	.word	0x20000680

0800b610 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b620:	4b0d      	ldr	r3, [pc, #52]	; (800b658 <CDC_Transmit_FS+0x48>)
 800b622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b626:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b632:	2301      	movs	r3, #1
 800b634:	e00b      	b.n	800b64e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b636:	887b      	ldrh	r3, [r7, #2]
 800b638:	461a      	mov	r2, r3
 800b63a:	6879      	ldr	r1, [r7, #4]
 800b63c:	4806      	ldr	r0, [pc, #24]	; (800b658 <CDC_Transmit_FS+0x48>)
 800b63e:	f7fe fb7b 	bl	8009d38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b642:	4805      	ldr	r0, [pc, #20]	; (800b658 <CDC_Transmit_FS+0x48>)
 800b644:	f7fe fbb8 	bl	8009db8 <USBD_CDC_TransmitPacket>
 800b648:	4603      	mov	r3, r0
 800b64a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	20000680 	.word	0x20000680

0800b65c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b087      	sub	sp, #28
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	4613      	mov	r3, r2
 800b668:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b66a:	2300      	movs	r3, #0
 800b66c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b66e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b672:	4618      	mov	r0, r3
 800b674:	371c      	adds	r7, #28
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr
	...

0800b680 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	4603      	mov	r3, r0
 800b688:	6039      	str	r1, [r7, #0]
 800b68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	2212      	movs	r2, #18
 800b690:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b692:	4b03      	ldr	r3, [pc, #12]	; (800b6a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b694:	4618      	mov	r0, r3
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	20000144 	.word	0x20000144

0800b6a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	6039      	str	r1, [r7, #0]
 800b6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	2204      	movs	r2, #4
 800b6b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6b6:	4b03      	ldr	r3, [pc, #12]	; (800b6c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr
 800b6c4:	20000158 	.word	0x20000158

0800b6c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	6039      	str	r1, [r7, #0]
 800b6d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d105      	bne.n	800b6e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	4907      	ldr	r1, [pc, #28]	; (800b6fc <USBD_FS_ProductStrDescriptor+0x34>)
 800b6de:	4808      	ldr	r0, [pc, #32]	; (800b700 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6e0:	f7ff fdf8 	bl	800b2d4 <USBD_GetString>
 800b6e4:	e004      	b.n	800b6f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	4904      	ldr	r1, [pc, #16]	; (800b6fc <USBD_FS_ProductStrDescriptor+0x34>)
 800b6ea:	4805      	ldr	r0, [pc, #20]	; (800b700 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6ec:	f7ff fdf2 	bl	800b2d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6f0:	4b02      	ldr	r3, [pc, #8]	; (800b6fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	2000195c 	.word	0x2000195c
 800b700:	0800ec00 	.word	0x0800ec00

0800b704 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	6039      	str	r1, [r7, #0]
 800b70e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	4904      	ldr	r1, [pc, #16]	; (800b724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b714:	4804      	ldr	r0, [pc, #16]	; (800b728 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b716:	f7ff fddd 	bl	800b2d4 <USBD_GetString>
  return USBD_StrDesc;
 800b71a:	4b02      	ldr	r3, [pc, #8]	; (800b724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	2000195c 	.word	0x2000195c
 800b728:	0800ec18 	.word	0x0800ec18

0800b72c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	6039      	str	r1, [r7, #0]
 800b736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	221a      	movs	r2, #26
 800b73c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b73e:	f000 f843 	bl	800b7c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b742:	4b02      	ldr	r3, [pc, #8]	; (800b74c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b744:	4618      	mov	r0, r3
 800b746:	3708      	adds	r7, #8
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	2000015c 	.word	0x2000015c

0800b750 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	6039      	str	r1, [r7, #0]
 800b75a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d105      	bne.n	800b76e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	4907      	ldr	r1, [pc, #28]	; (800b784 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b766:	4808      	ldr	r0, [pc, #32]	; (800b788 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b768:	f7ff fdb4 	bl	800b2d4 <USBD_GetString>
 800b76c:	e004      	b.n	800b778 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	4904      	ldr	r1, [pc, #16]	; (800b784 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b772:	4805      	ldr	r0, [pc, #20]	; (800b788 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b774:	f7ff fdae 	bl	800b2d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b778:	4b02      	ldr	r3, [pc, #8]	; (800b784 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	2000195c 	.word	0x2000195c
 800b788:	0800ec2c 	.word	0x0800ec2c

0800b78c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	6039      	str	r1, [r7, #0]
 800b796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b798:	79fb      	ldrb	r3, [r7, #7]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d105      	bne.n	800b7aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	4907      	ldr	r1, [pc, #28]	; (800b7c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7a2:	4808      	ldr	r0, [pc, #32]	; (800b7c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7a4:	f7ff fd96 	bl	800b2d4 <USBD_GetString>
 800b7a8:	e004      	b.n	800b7b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	4904      	ldr	r1, [pc, #16]	; (800b7c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7ae:	4805      	ldr	r0, [pc, #20]	; (800b7c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7b0:	f7ff fd90 	bl	800b2d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7b4:	4b02      	ldr	r3, [pc, #8]	; (800b7c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	2000195c 	.word	0x2000195c
 800b7c4:	0800ec38 	.word	0x0800ec38

0800b7c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b7ce:	4b0f      	ldr	r3, [pc, #60]	; (800b80c <Get_SerialNum+0x44>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b7d4:	4b0e      	ldr	r3, [pc, #56]	; (800b810 <Get_SerialNum+0x48>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b7da:	4b0e      	ldr	r3, [pc, #56]	; (800b814 <Get_SerialNum+0x4c>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d009      	beq.n	800b802 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b7ee:	2208      	movs	r2, #8
 800b7f0:	4909      	ldr	r1, [pc, #36]	; (800b818 <Get_SerialNum+0x50>)
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f000 f814 	bl	800b820 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b7f8:	2204      	movs	r2, #4
 800b7fa:	4908      	ldr	r1, [pc, #32]	; (800b81c <Get_SerialNum+0x54>)
 800b7fc:	68b8      	ldr	r0, [r7, #8]
 800b7fe:	f000 f80f 	bl	800b820 <IntToUnicode>
  }
}
 800b802:	bf00      	nop
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	1fff7a10 	.word	0x1fff7a10
 800b810:	1fff7a14 	.word	0x1fff7a14
 800b814:	1fff7a18 	.word	0x1fff7a18
 800b818:	2000015e 	.word	0x2000015e
 800b81c:	2000016e 	.word	0x2000016e

0800b820 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b820:	b480      	push	{r7}
 800b822:	b087      	sub	sp, #28
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	4613      	mov	r3, r2
 800b82c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b832:	2300      	movs	r3, #0
 800b834:	75fb      	strb	r3, [r7, #23]
 800b836:	e027      	b.n	800b888 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	0f1b      	lsrs	r3, r3, #28
 800b83c:	2b09      	cmp	r3, #9
 800b83e:	d80b      	bhi.n	800b858 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	0f1b      	lsrs	r3, r3, #28
 800b844:	b2da      	uxtb	r2, r3
 800b846:	7dfb      	ldrb	r3, [r7, #23]
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	4619      	mov	r1, r3
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	440b      	add	r3, r1
 800b850:	3230      	adds	r2, #48	; 0x30
 800b852:	b2d2      	uxtb	r2, r2
 800b854:	701a      	strb	r2, [r3, #0]
 800b856:	e00a      	b.n	800b86e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	0f1b      	lsrs	r3, r3, #28
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	4619      	mov	r1, r3
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	440b      	add	r3, r1
 800b868:	3237      	adds	r2, #55	; 0x37
 800b86a:	b2d2      	uxtb	r2, r2
 800b86c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	011b      	lsls	r3, r3, #4
 800b872:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b874:	7dfb      	ldrb	r3, [r7, #23]
 800b876:	005b      	lsls	r3, r3, #1
 800b878:	3301      	adds	r3, #1
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	4413      	add	r3, r2
 800b87e:	2200      	movs	r2, #0
 800b880:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b882:	7dfb      	ldrb	r3, [r7, #23]
 800b884:	3301      	adds	r3, #1
 800b886:	75fb      	strb	r3, [r7, #23]
 800b888:	7dfa      	ldrb	r2, [r7, #23]
 800b88a:	79fb      	ldrb	r3, [r7, #7]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d3d3      	bcc.n	800b838 <IntToUnicode+0x18>
  }
}
 800b890:	bf00      	nop
 800b892:	bf00      	nop
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
	...

0800b8a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08a      	sub	sp, #40	; 0x28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8a8:	f107 0314 	add.w	r3, r7, #20
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	601a      	str	r2, [r3, #0]
 800b8b0:	605a      	str	r2, [r3, #4]
 800b8b2:	609a      	str	r2, [r3, #8]
 800b8b4:	60da      	str	r2, [r3, #12]
 800b8b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8c0:	d13a      	bne.n	800b938 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	613b      	str	r3, [r7, #16]
 800b8c6:	4b1e      	ldr	r3, [pc, #120]	; (800b940 <HAL_PCD_MspInit+0xa0>)
 800b8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ca:	4a1d      	ldr	r2, [pc, #116]	; (800b940 <HAL_PCD_MspInit+0xa0>)
 800b8cc:	f043 0301 	orr.w	r3, r3, #1
 800b8d0:	6313      	str	r3, [r2, #48]	; 0x30
 800b8d2:	4b1b      	ldr	r3, [pc, #108]	; (800b940 <HAL_PCD_MspInit+0xa0>)
 800b8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d6:	f003 0301 	and.w	r3, r3, #1
 800b8da:	613b      	str	r3, [r7, #16]
 800b8dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b8de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b8e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b8f0:	230a      	movs	r3, #10
 800b8f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8f4:	f107 0314 	add.w	r3, r7, #20
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4812      	ldr	r0, [pc, #72]	; (800b944 <HAL_PCD_MspInit+0xa4>)
 800b8fc:	f7f8 f9a4 	bl	8003c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b900:	4b0f      	ldr	r3, [pc, #60]	; (800b940 <HAL_PCD_MspInit+0xa0>)
 800b902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b904:	4a0e      	ldr	r2, [pc, #56]	; (800b940 <HAL_PCD_MspInit+0xa0>)
 800b906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b90a:	6353      	str	r3, [r2, #52]	; 0x34
 800b90c:	2300      	movs	r3, #0
 800b90e:	60fb      	str	r3, [r7, #12]
 800b910:	4b0b      	ldr	r3, [pc, #44]	; (800b940 <HAL_PCD_MspInit+0xa0>)
 800b912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b914:	4a0a      	ldr	r2, [pc, #40]	; (800b940 <HAL_PCD_MspInit+0xa0>)
 800b916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b91a:	6453      	str	r3, [r2, #68]	; 0x44
 800b91c:	4b08      	ldr	r3, [pc, #32]	; (800b940 <HAL_PCD_MspInit+0xa0>)
 800b91e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b924:	60fb      	str	r3, [r7, #12]
 800b926:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b928:	2200      	movs	r2, #0
 800b92a:	2100      	movs	r1, #0
 800b92c:	2043      	movs	r0, #67	; 0x43
 800b92e:	f7f7 fd00 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b932:	2043      	movs	r0, #67	; 0x43
 800b934:	f7f7 fd19 	bl	800336a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b938:	bf00      	nop
 800b93a:	3728      	adds	r7, #40	; 0x28
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	40023800 	.word	0x40023800
 800b944:	40020000 	.word	0x40020000

0800b948 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b95c:	4619      	mov	r1, r3
 800b95e:	4610      	mov	r0, r2
 800b960:	f7fe fb59 	bl	800a016 <USBD_LL_SetupStage>
}
 800b964:	bf00      	nop
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b97e:	78fa      	ldrb	r2, [r7, #3]
 800b980:	6879      	ldr	r1, [r7, #4]
 800b982:	4613      	mov	r3, r2
 800b984:	00db      	lsls	r3, r3, #3
 800b986:	4413      	add	r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	440b      	add	r3, r1
 800b98c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	78fb      	ldrb	r3, [r7, #3]
 800b994:	4619      	mov	r1, r3
 800b996:	f7fe fb93 	bl	800a0c0 <USBD_LL_DataOutStage>
}
 800b99a:	bf00      	nop
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b082      	sub	sp, #8
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b9b4:	78fa      	ldrb	r2, [r7, #3]
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	00db      	lsls	r3, r3, #3
 800b9bc:	4413      	add	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	440b      	add	r3, r1
 800b9c2:	334c      	adds	r3, #76	; 0x4c
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	78fb      	ldrb	r3, [r7, #3]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	f7fe fc2c 	bl	800a226 <USBD_LL_DataInStage>
}
 800b9ce:	bf00      	nop
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b082      	sub	sp, #8
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fe fd60 	bl	800a4aa <USBD_LL_SOF>
}
 800b9ea:	bf00      	nop
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d102      	bne.n	800ba0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ba06:	2300      	movs	r3, #0
 800ba08:	73fb      	strb	r3, [r7, #15]
 800ba0a:	e008      	b.n	800ba1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d102      	bne.n	800ba1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ba14:	2301      	movs	r3, #1
 800ba16:	73fb      	strb	r3, [r7, #15]
 800ba18:	e001      	b.n	800ba1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ba1a:	f7f5 fc25 	bl	8001268 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba24:	7bfa      	ldrb	r2, [r7, #15]
 800ba26:	4611      	mov	r1, r2
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe fd00 	bl	800a42e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fe fca8 	bl	800a38a <USBD_LL_Reset>
}
 800ba3a:	bf00      	nop
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
	...

0800ba44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fcfb 	bl	800a44e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	6812      	ldr	r2, [r2, #0]
 800ba66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba6a:	f043 0301 	orr.w	r3, r3, #1
 800ba6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d005      	beq.n	800ba84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba78:	4b04      	ldr	r3, [pc, #16]	; (800ba8c <HAL_PCD_SuspendCallback+0x48>)
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	4a03      	ldr	r2, [pc, #12]	; (800ba8c <HAL_PCD_SuspendCallback+0x48>)
 800ba7e:	f043 0306 	orr.w	r3, r3, #6
 800ba82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba84:	bf00      	nop
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	e000ed00 	.word	0xe000ed00

0800ba90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fe fceb 	bl	800a47a <USBD_LL_Resume>
}
 800baa4:	bf00      	nop
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	460b      	mov	r3, r1
 800bab6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800babe:	78fa      	ldrb	r2, [r7, #3]
 800bac0:	4611      	mov	r1, r2
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fe fd43 	bl	800a54e <USBD_LL_IsoOUTIncomplete>
}
 800bac8:	bf00      	nop
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	460b      	mov	r3, r1
 800bada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bae2:	78fa      	ldrb	r2, [r7, #3]
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fe fcff 	bl	800a4ea <USBD_LL_IsoINIncomplete>
}
 800baec:	bf00      	nop
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe fd55 	bl	800a5b2 <USBD_LL_DevConnected>
}
 800bb08:	bf00      	nop
 800bb0a:	3708      	adds	r7, #8
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fe fd52 	bl	800a5c8 <USBD_LL_DevDisconnected>
}
 800bb24:	bf00      	nop
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d13c      	bne.n	800bbb6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bb3c:	4a20      	ldr	r2, [pc, #128]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a1e      	ldr	r2, [pc, #120]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb48:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb4c:	4b1c      	ldr	r3, [pc, #112]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bb52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bb54:	4b1a      	ldr	r3, [pc, #104]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb56:	2204      	movs	r2, #4
 800bb58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bb5a:	4b19      	ldr	r3, [pc, #100]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb60:	4b17      	ldr	r3, [pc, #92]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb66:	4b16      	ldr	r3, [pc, #88]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb68:	2202      	movs	r2, #2
 800bb6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb6c:	4b14      	ldr	r3, [pc, #80]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb72:	4b13      	ldr	r3, [pc, #76]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb78:	4b11      	ldr	r3, [pc, #68]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bb7e:	4b10      	ldr	r3, [pc, #64]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb84:	4b0e      	ldr	r3, [pc, #56]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb8a:	480d      	ldr	r0, [pc, #52]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb8c:	f7f8 ffc7 	bl	8004b1e <HAL_PCD_Init>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb96:	f7f5 fb67 	bl	8001268 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bb9a:	2180      	movs	r1, #128	; 0x80
 800bb9c:	4808      	ldr	r0, [pc, #32]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bb9e:	f7fa fa1e 	bl	8005fde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bba2:	2240      	movs	r2, #64	; 0x40
 800bba4:	2100      	movs	r1, #0
 800bba6:	4806      	ldr	r0, [pc, #24]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bba8:	f7fa f9d2 	bl	8005f50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bbac:	2280      	movs	r2, #128	; 0x80
 800bbae:	2101      	movs	r1, #1
 800bbb0:	4803      	ldr	r0, [pc, #12]	; (800bbc0 <USBD_LL_Init+0x94>)
 800bbb2:	f7fa f9cd 	bl	8005f50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	20001b5c 	.word	0x20001b5c

0800bbc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7f9 f8bc 	bl	8004d58 <HAL_PCD_Start>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 f942 	bl	800be70 <USBD_Get_USB_Status>
 800bbec:	4603      	mov	r3, r0
 800bbee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	4608      	mov	r0, r1
 800bc04:	4611      	mov	r1, r2
 800bc06:	461a      	mov	r2, r3
 800bc08:	4603      	mov	r3, r0
 800bc0a:	70fb      	strb	r3, [r7, #3]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	70bb      	strb	r3, [r7, #2]
 800bc10:	4613      	mov	r3, r2
 800bc12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc14:	2300      	movs	r3, #0
 800bc16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bc22:	78bb      	ldrb	r3, [r7, #2]
 800bc24:	883a      	ldrh	r2, [r7, #0]
 800bc26:	78f9      	ldrb	r1, [r7, #3]
 800bc28:	f7f9 fd8d 	bl	8005746 <HAL_PCD_EP_Open>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 f91c 	bl	800be70 <USBD_Get_USB_Status>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b084      	sub	sp, #16
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	460b      	mov	r3, r1
 800bc50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc60:	78fa      	ldrb	r2, [r7, #3]
 800bc62:	4611      	mov	r1, r2
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7f9 fdd6 	bl	8005816 <HAL_PCD_EP_Close>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f000 f8fd 	bl	800be70 <USBD_Get_USB_Status>
 800bc76:	4603      	mov	r3, r0
 800bc78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc94:	2300      	movs	r3, #0
 800bc96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc9e:	78fa      	ldrb	r2, [r7, #3]
 800bca0:	4611      	mov	r1, r2
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7f9 feae 	bl	8005a04 <HAL_PCD_EP_SetStall>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 f8de 	bl	800be70 <USBD_Get_USB_Status>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b084      	sub	sp, #16
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
 800bcca:	460b      	mov	r3, r1
 800bccc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcdc:	78fa      	ldrb	r2, [r7, #3]
 800bcde:	4611      	mov	r1, r2
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7f9 fef3 	bl	8005acc <HAL_PCD_EP_ClrStall>
 800bce6:	4603      	mov	r3, r0
 800bce8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcea:	7bfb      	ldrb	r3, [r7, #15]
 800bcec:	4618      	mov	r0, r3
 800bcee:	f000 f8bf 	bl	800be70 <USBD_Get_USB_Status>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	da0b      	bge.n	800bd34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd1c:	78fb      	ldrb	r3, [r7, #3]
 800bd1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd22:	68f9      	ldr	r1, [r7, #12]
 800bd24:	4613      	mov	r3, r2
 800bd26:	00db      	lsls	r3, r3, #3
 800bd28:	4413      	add	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	440b      	add	r3, r1
 800bd2e:	333e      	adds	r3, #62	; 0x3e
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	e00b      	b.n	800bd4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd34:	78fb      	ldrb	r3, [r7, #3]
 800bd36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd3a:	68f9      	ldr	r1, [r7, #12]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	4413      	add	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	440b      	add	r3, r1
 800bd46:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bd4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3714      	adds	r7, #20
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	460b      	mov	r3, r1
 800bd62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd72:	78fa      	ldrb	r2, [r7, #3]
 800bd74:	4611      	mov	r1, r2
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7f9 fcc0 	bl	80056fc <HAL_PCD_SetAddress>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd80:	7bfb      	ldrb	r3, [r7, #15]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 f874 	bl	800be70 <USBD_Get_USB_Status>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b086      	sub	sp, #24
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	60f8      	str	r0, [r7, #12]
 800bd9e:	607a      	str	r2, [r7, #4]
 800bda0:	603b      	str	r3, [r7, #0]
 800bda2:	460b      	mov	r3, r1
 800bda4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bdb4:	7af9      	ldrb	r1, [r7, #11]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	f7f9 fdd9 	bl	8005970 <HAL_PCD_EP_Transmit>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 f853 	bl	800be70 <USBD_Get_USB_Status>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdce:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3718      	adds	r7, #24
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	607a      	str	r2, [r7, #4]
 800bde2:	603b      	str	r3, [r7, #0]
 800bde4:	460b      	mov	r3, r1
 800bde6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bdf6:	7af9      	ldrb	r1, [r7, #11]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	f7f9 fd55 	bl	80058aa <HAL_PCD_EP_Receive>
 800be00:	4603      	mov	r3, r0
 800be02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be04:	7dfb      	ldrb	r3, [r7, #23]
 800be06:	4618      	mov	r0, r3
 800be08:	f000 f832 	bl	800be70 <USBD_Get_USB_Status>
 800be0c:	4603      	mov	r3, r0
 800be0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be10:	7dbb      	ldrb	r3, [r7, #22]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b082      	sub	sp, #8
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	460b      	mov	r3, r1
 800be24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be2c:	78fa      	ldrb	r2, [r7, #3]
 800be2e:	4611      	mov	r1, r2
 800be30:	4618      	mov	r0, r3
 800be32:	f7f9 fd85 	bl	8005940 <HAL_PCD_EP_GetRxCount>
 800be36:	4603      	mov	r3, r0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be48:	4b03      	ldr	r3, [pc, #12]	; (800be58 <USBD_static_malloc+0x18>)
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	20002068 	.word	0x20002068

0800be5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]

}
 800be64:	bf00      	nop
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	4603      	mov	r3, r0
 800be78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be7e:	79fb      	ldrb	r3, [r7, #7]
 800be80:	2b03      	cmp	r3, #3
 800be82:	d817      	bhi.n	800beb4 <USBD_Get_USB_Status+0x44>
 800be84:	a201      	add	r2, pc, #4	; (adr r2, 800be8c <USBD_Get_USB_Status+0x1c>)
 800be86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8a:	bf00      	nop
 800be8c:	0800be9d 	.word	0x0800be9d
 800be90:	0800bea3 	.word	0x0800bea3
 800be94:	0800bea9 	.word	0x0800bea9
 800be98:	0800beaf 	.word	0x0800beaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bea0:	e00b      	b.n	800beba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bea2:	2303      	movs	r3, #3
 800bea4:	73fb      	strb	r3, [r7, #15]
    break;
 800bea6:	e008      	b.n	800beba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bea8:	2301      	movs	r3, #1
 800beaa:	73fb      	strb	r3, [r7, #15]
    break;
 800beac:	e005      	b.n	800beba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800beae:	2303      	movs	r3, #3
 800beb0:	73fb      	strb	r3, [r7, #15]
    break;
 800beb2:	e002      	b.n	800beba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800beb4:	2303      	movs	r3, #3
 800beb6:	73fb      	strb	r3, [r7, #15]
    break;
 800beb8:	bf00      	nop
  }
  return usb_status;
 800beba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3714      	adds	r7, #20
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <__cvt>:
 800bec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800becc:	ec55 4b10 	vmov	r4, r5, d0
 800bed0:	2d00      	cmp	r5, #0
 800bed2:	460e      	mov	r6, r1
 800bed4:	4619      	mov	r1, r3
 800bed6:	462b      	mov	r3, r5
 800bed8:	bfbb      	ittet	lt
 800beda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bede:	461d      	movlt	r5, r3
 800bee0:	2300      	movge	r3, #0
 800bee2:	232d      	movlt	r3, #45	; 0x2d
 800bee4:	700b      	strb	r3, [r1, #0]
 800bee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bee8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800beec:	4691      	mov	r9, r2
 800beee:	f023 0820 	bic.w	r8, r3, #32
 800bef2:	bfbc      	itt	lt
 800bef4:	4622      	movlt	r2, r4
 800bef6:	4614      	movlt	r4, r2
 800bef8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800befc:	d005      	beq.n	800bf0a <__cvt+0x42>
 800befe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bf02:	d100      	bne.n	800bf06 <__cvt+0x3e>
 800bf04:	3601      	adds	r6, #1
 800bf06:	2102      	movs	r1, #2
 800bf08:	e000      	b.n	800bf0c <__cvt+0x44>
 800bf0a:	2103      	movs	r1, #3
 800bf0c:	ab03      	add	r3, sp, #12
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	ab02      	add	r3, sp, #8
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	ec45 4b10 	vmov	d0, r4, r5
 800bf18:	4653      	mov	r3, sl
 800bf1a:	4632      	mov	r2, r6
 800bf1c:	f000 fe68 	bl	800cbf0 <_dtoa_r>
 800bf20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf24:	4607      	mov	r7, r0
 800bf26:	d102      	bne.n	800bf2e <__cvt+0x66>
 800bf28:	f019 0f01 	tst.w	r9, #1
 800bf2c:	d022      	beq.n	800bf74 <__cvt+0xac>
 800bf2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf32:	eb07 0906 	add.w	r9, r7, r6
 800bf36:	d110      	bne.n	800bf5a <__cvt+0x92>
 800bf38:	783b      	ldrb	r3, [r7, #0]
 800bf3a:	2b30      	cmp	r3, #48	; 0x30
 800bf3c:	d10a      	bne.n	800bf54 <__cvt+0x8c>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2300      	movs	r3, #0
 800bf42:	4620      	mov	r0, r4
 800bf44:	4629      	mov	r1, r5
 800bf46:	f7f4 fdcf 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf4a:	b918      	cbnz	r0, 800bf54 <__cvt+0x8c>
 800bf4c:	f1c6 0601 	rsb	r6, r6, #1
 800bf50:	f8ca 6000 	str.w	r6, [sl]
 800bf54:	f8da 3000 	ldr.w	r3, [sl]
 800bf58:	4499      	add	r9, r3
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	4620      	mov	r0, r4
 800bf60:	4629      	mov	r1, r5
 800bf62:	f7f4 fdc1 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf66:	b108      	cbz	r0, 800bf6c <__cvt+0xa4>
 800bf68:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf6c:	2230      	movs	r2, #48	; 0x30
 800bf6e:	9b03      	ldr	r3, [sp, #12]
 800bf70:	454b      	cmp	r3, r9
 800bf72:	d307      	bcc.n	800bf84 <__cvt+0xbc>
 800bf74:	9b03      	ldr	r3, [sp, #12]
 800bf76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf78:	1bdb      	subs	r3, r3, r7
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	6013      	str	r3, [r2, #0]
 800bf7e:	b004      	add	sp, #16
 800bf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf84:	1c59      	adds	r1, r3, #1
 800bf86:	9103      	str	r1, [sp, #12]
 800bf88:	701a      	strb	r2, [r3, #0]
 800bf8a:	e7f0      	b.n	800bf6e <__cvt+0xa6>

0800bf8c <__exponent>:
 800bf8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2900      	cmp	r1, #0
 800bf92:	bfb8      	it	lt
 800bf94:	4249      	neglt	r1, r1
 800bf96:	f803 2b02 	strb.w	r2, [r3], #2
 800bf9a:	bfb4      	ite	lt
 800bf9c:	222d      	movlt	r2, #45	; 0x2d
 800bf9e:	222b      	movge	r2, #43	; 0x2b
 800bfa0:	2909      	cmp	r1, #9
 800bfa2:	7042      	strb	r2, [r0, #1]
 800bfa4:	dd2a      	ble.n	800bffc <__exponent+0x70>
 800bfa6:	f10d 0207 	add.w	r2, sp, #7
 800bfaa:	4617      	mov	r7, r2
 800bfac:	260a      	movs	r6, #10
 800bfae:	4694      	mov	ip, r2
 800bfb0:	fb91 f5f6 	sdiv	r5, r1, r6
 800bfb4:	fb06 1415 	mls	r4, r6, r5, r1
 800bfb8:	3430      	adds	r4, #48	; 0x30
 800bfba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	2c63      	cmp	r4, #99	; 0x63
 800bfc2:	f102 32ff 	add.w	r2, r2, #4294967295
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	dcf1      	bgt.n	800bfae <__exponent+0x22>
 800bfca:	3130      	adds	r1, #48	; 0x30
 800bfcc:	f1ac 0402 	sub.w	r4, ip, #2
 800bfd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bfd4:	1c41      	adds	r1, r0, #1
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	42ba      	cmp	r2, r7
 800bfda:	d30a      	bcc.n	800bff2 <__exponent+0x66>
 800bfdc:	f10d 0209 	add.w	r2, sp, #9
 800bfe0:	eba2 020c 	sub.w	r2, r2, ip
 800bfe4:	42bc      	cmp	r4, r7
 800bfe6:	bf88      	it	hi
 800bfe8:	2200      	movhi	r2, #0
 800bfea:	4413      	add	r3, r2
 800bfec:	1a18      	subs	r0, r3, r0
 800bfee:	b003      	add	sp, #12
 800bff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bff2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bff6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bffa:	e7ed      	b.n	800bfd8 <__exponent+0x4c>
 800bffc:	2330      	movs	r3, #48	; 0x30
 800bffe:	3130      	adds	r1, #48	; 0x30
 800c000:	7083      	strb	r3, [r0, #2]
 800c002:	70c1      	strb	r1, [r0, #3]
 800c004:	1d03      	adds	r3, r0, #4
 800c006:	e7f1      	b.n	800bfec <__exponent+0x60>

0800c008 <_printf_float>:
 800c008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00c:	ed2d 8b02 	vpush	{d8}
 800c010:	b08d      	sub	sp, #52	; 0x34
 800c012:	460c      	mov	r4, r1
 800c014:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c018:	4616      	mov	r6, r2
 800c01a:	461f      	mov	r7, r3
 800c01c:	4605      	mov	r5, r0
 800c01e:	f000 fce7 	bl	800c9f0 <_localeconv_r>
 800c022:	f8d0 a000 	ldr.w	sl, [r0]
 800c026:	4650      	mov	r0, sl
 800c028:	f7f4 f932 	bl	8000290 <strlen>
 800c02c:	2300      	movs	r3, #0
 800c02e:	930a      	str	r3, [sp, #40]	; 0x28
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	9305      	str	r3, [sp, #20]
 800c034:	f8d8 3000 	ldr.w	r3, [r8]
 800c038:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c03c:	3307      	adds	r3, #7
 800c03e:	f023 0307 	bic.w	r3, r3, #7
 800c042:	f103 0208 	add.w	r2, r3, #8
 800c046:	f8c8 2000 	str.w	r2, [r8]
 800c04a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c04e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c052:	9307      	str	r3, [sp, #28]
 800c054:	f8cd 8018 	str.w	r8, [sp, #24]
 800c058:	ee08 0a10 	vmov	s16, r0
 800c05c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c064:	4b9e      	ldr	r3, [pc, #632]	; (800c2e0 <_printf_float+0x2d8>)
 800c066:	f04f 32ff 	mov.w	r2, #4294967295
 800c06a:	f7f4 fd6f 	bl	8000b4c <__aeabi_dcmpun>
 800c06e:	bb88      	cbnz	r0, 800c0d4 <_printf_float+0xcc>
 800c070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c074:	4b9a      	ldr	r3, [pc, #616]	; (800c2e0 <_printf_float+0x2d8>)
 800c076:	f04f 32ff 	mov.w	r2, #4294967295
 800c07a:	f7f4 fd49 	bl	8000b10 <__aeabi_dcmple>
 800c07e:	bb48      	cbnz	r0, 800c0d4 <_printf_float+0xcc>
 800c080:	2200      	movs	r2, #0
 800c082:	2300      	movs	r3, #0
 800c084:	4640      	mov	r0, r8
 800c086:	4649      	mov	r1, r9
 800c088:	f7f4 fd38 	bl	8000afc <__aeabi_dcmplt>
 800c08c:	b110      	cbz	r0, 800c094 <_printf_float+0x8c>
 800c08e:	232d      	movs	r3, #45	; 0x2d
 800c090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c094:	4a93      	ldr	r2, [pc, #588]	; (800c2e4 <_printf_float+0x2dc>)
 800c096:	4b94      	ldr	r3, [pc, #592]	; (800c2e8 <_printf_float+0x2e0>)
 800c098:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c09c:	bf94      	ite	ls
 800c09e:	4690      	movls	r8, r2
 800c0a0:	4698      	movhi	r8, r3
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	6123      	str	r3, [r4, #16]
 800c0a6:	9b05      	ldr	r3, [sp, #20]
 800c0a8:	f023 0304 	bic.w	r3, r3, #4
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	f04f 0900 	mov.w	r9, #0
 800c0b2:	9700      	str	r7, [sp, #0]
 800c0b4:	4633      	mov	r3, r6
 800c0b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f000 f9da 	bl	800c474 <_printf_common>
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	f040 8090 	bne.w	800c1e6 <_printf_float+0x1de>
 800c0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ca:	b00d      	add	sp, #52	; 0x34
 800c0cc:	ecbd 8b02 	vpop	{d8}
 800c0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d4:	4642      	mov	r2, r8
 800c0d6:	464b      	mov	r3, r9
 800c0d8:	4640      	mov	r0, r8
 800c0da:	4649      	mov	r1, r9
 800c0dc:	f7f4 fd36 	bl	8000b4c <__aeabi_dcmpun>
 800c0e0:	b140      	cbz	r0, 800c0f4 <_printf_float+0xec>
 800c0e2:	464b      	mov	r3, r9
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	bfbc      	itt	lt
 800c0e8:	232d      	movlt	r3, #45	; 0x2d
 800c0ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c0ee:	4a7f      	ldr	r2, [pc, #508]	; (800c2ec <_printf_float+0x2e4>)
 800c0f0:	4b7f      	ldr	r3, [pc, #508]	; (800c2f0 <_printf_float+0x2e8>)
 800c0f2:	e7d1      	b.n	800c098 <_printf_float+0x90>
 800c0f4:	6863      	ldr	r3, [r4, #4]
 800c0f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c0fa:	9206      	str	r2, [sp, #24]
 800c0fc:	1c5a      	adds	r2, r3, #1
 800c0fe:	d13f      	bne.n	800c180 <_printf_float+0x178>
 800c100:	2306      	movs	r3, #6
 800c102:	6063      	str	r3, [r4, #4]
 800c104:	9b05      	ldr	r3, [sp, #20]
 800c106:	6861      	ldr	r1, [r4, #4]
 800c108:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c10c:	2300      	movs	r3, #0
 800c10e:	9303      	str	r3, [sp, #12]
 800c110:	ab0a      	add	r3, sp, #40	; 0x28
 800c112:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c116:	ab09      	add	r3, sp, #36	; 0x24
 800c118:	ec49 8b10 	vmov	d0, r8, r9
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	6022      	str	r2, [r4, #0]
 800c120:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c124:	4628      	mov	r0, r5
 800c126:	f7ff fecf 	bl	800bec8 <__cvt>
 800c12a:	9b06      	ldr	r3, [sp, #24]
 800c12c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c12e:	2b47      	cmp	r3, #71	; 0x47
 800c130:	4680      	mov	r8, r0
 800c132:	d108      	bne.n	800c146 <_printf_float+0x13e>
 800c134:	1cc8      	adds	r0, r1, #3
 800c136:	db02      	blt.n	800c13e <_printf_float+0x136>
 800c138:	6863      	ldr	r3, [r4, #4]
 800c13a:	4299      	cmp	r1, r3
 800c13c:	dd41      	ble.n	800c1c2 <_printf_float+0x1ba>
 800c13e:	f1ab 0302 	sub.w	r3, fp, #2
 800c142:	fa5f fb83 	uxtb.w	fp, r3
 800c146:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c14a:	d820      	bhi.n	800c18e <_printf_float+0x186>
 800c14c:	3901      	subs	r1, #1
 800c14e:	465a      	mov	r2, fp
 800c150:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c154:	9109      	str	r1, [sp, #36]	; 0x24
 800c156:	f7ff ff19 	bl	800bf8c <__exponent>
 800c15a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c15c:	1813      	adds	r3, r2, r0
 800c15e:	2a01      	cmp	r2, #1
 800c160:	4681      	mov	r9, r0
 800c162:	6123      	str	r3, [r4, #16]
 800c164:	dc02      	bgt.n	800c16c <_printf_float+0x164>
 800c166:	6822      	ldr	r2, [r4, #0]
 800c168:	07d2      	lsls	r2, r2, #31
 800c16a:	d501      	bpl.n	800c170 <_printf_float+0x168>
 800c16c:	3301      	adds	r3, #1
 800c16e:	6123      	str	r3, [r4, #16]
 800c170:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c174:	2b00      	cmp	r3, #0
 800c176:	d09c      	beq.n	800c0b2 <_printf_float+0xaa>
 800c178:	232d      	movs	r3, #45	; 0x2d
 800c17a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c17e:	e798      	b.n	800c0b2 <_printf_float+0xaa>
 800c180:	9a06      	ldr	r2, [sp, #24]
 800c182:	2a47      	cmp	r2, #71	; 0x47
 800c184:	d1be      	bne.n	800c104 <_printf_float+0xfc>
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1bc      	bne.n	800c104 <_printf_float+0xfc>
 800c18a:	2301      	movs	r3, #1
 800c18c:	e7b9      	b.n	800c102 <_printf_float+0xfa>
 800c18e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c192:	d118      	bne.n	800c1c6 <_printf_float+0x1be>
 800c194:	2900      	cmp	r1, #0
 800c196:	6863      	ldr	r3, [r4, #4]
 800c198:	dd0b      	ble.n	800c1b2 <_printf_float+0x1aa>
 800c19a:	6121      	str	r1, [r4, #16]
 800c19c:	b913      	cbnz	r3, 800c1a4 <_printf_float+0x19c>
 800c19e:	6822      	ldr	r2, [r4, #0]
 800c1a0:	07d0      	lsls	r0, r2, #31
 800c1a2:	d502      	bpl.n	800c1aa <_printf_float+0x1a2>
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	440b      	add	r3, r1
 800c1a8:	6123      	str	r3, [r4, #16]
 800c1aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800c1ac:	f04f 0900 	mov.w	r9, #0
 800c1b0:	e7de      	b.n	800c170 <_printf_float+0x168>
 800c1b2:	b913      	cbnz	r3, 800c1ba <_printf_float+0x1b2>
 800c1b4:	6822      	ldr	r2, [r4, #0]
 800c1b6:	07d2      	lsls	r2, r2, #31
 800c1b8:	d501      	bpl.n	800c1be <_printf_float+0x1b6>
 800c1ba:	3302      	adds	r3, #2
 800c1bc:	e7f4      	b.n	800c1a8 <_printf_float+0x1a0>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e7f2      	b.n	800c1a8 <_printf_float+0x1a0>
 800c1c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1c8:	4299      	cmp	r1, r3
 800c1ca:	db05      	blt.n	800c1d8 <_printf_float+0x1d0>
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	6121      	str	r1, [r4, #16]
 800c1d0:	07d8      	lsls	r0, r3, #31
 800c1d2:	d5ea      	bpl.n	800c1aa <_printf_float+0x1a2>
 800c1d4:	1c4b      	adds	r3, r1, #1
 800c1d6:	e7e7      	b.n	800c1a8 <_printf_float+0x1a0>
 800c1d8:	2900      	cmp	r1, #0
 800c1da:	bfd4      	ite	le
 800c1dc:	f1c1 0202 	rsble	r2, r1, #2
 800c1e0:	2201      	movgt	r2, #1
 800c1e2:	4413      	add	r3, r2
 800c1e4:	e7e0      	b.n	800c1a8 <_printf_float+0x1a0>
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	055a      	lsls	r2, r3, #21
 800c1ea:	d407      	bmi.n	800c1fc <_printf_float+0x1f4>
 800c1ec:	6923      	ldr	r3, [r4, #16]
 800c1ee:	4642      	mov	r2, r8
 800c1f0:	4631      	mov	r1, r6
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	47b8      	blx	r7
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	d12c      	bne.n	800c254 <_printf_float+0x24c>
 800c1fa:	e764      	b.n	800c0c6 <_printf_float+0xbe>
 800c1fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c200:	f240 80e0 	bls.w	800c3c4 <_printf_float+0x3bc>
 800c204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c208:	2200      	movs	r2, #0
 800c20a:	2300      	movs	r3, #0
 800c20c:	f7f4 fc6c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c210:	2800      	cmp	r0, #0
 800c212:	d034      	beq.n	800c27e <_printf_float+0x276>
 800c214:	4a37      	ldr	r2, [pc, #220]	; (800c2f4 <_printf_float+0x2ec>)
 800c216:	2301      	movs	r3, #1
 800c218:	4631      	mov	r1, r6
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b8      	blx	r7
 800c21e:	3001      	adds	r0, #1
 800c220:	f43f af51 	beq.w	800c0c6 <_printf_float+0xbe>
 800c224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c228:	429a      	cmp	r2, r3
 800c22a:	db02      	blt.n	800c232 <_printf_float+0x22a>
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	07d8      	lsls	r0, r3, #31
 800c230:	d510      	bpl.n	800c254 <_printf_float+0x24c>
 800c232:	ee18 3a10 	vmov	r3, s16
 800c236:	4652      	mov	r2, sl
 800c238:	4631      	mov	r1, r6
 800c23a:	4628      	mov	r0, r5
 800c23c:	47b8      	blx	r7
 800c23e:	3001      	adds	r0, #1
 800c240:	f43f af41 	beq.w	800c0c6 <_printf_float+0xbe>
 800c244:	f04f 0800 	mov.w	r8, #0
 800c248:	f104 091a 	add.w	r9, r4, #26
 800c24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c24e:	3b01      	subs	r3, #1
 800c250:	4543      	cmp	r3, r8
 800c252:	dc09      	bgt.n	800c268 <_printf_float+0x260>
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	079b      	lsls	r3, r3, #30
 800c258:	f100 8107 	bmi.w	800c46a <_printf_float+0x462>
 800c25c:	68e0      	ldr	r0, [r4, #12]
 800c25e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c260:	4298      	cmp	r0, r3
 800c262:	bfb8      	it	lt
 800c264:	4618      	movlt	r0, r3
 800c266:	e730      	b.n	800c0ca <_printf_float+0xc2>
 800c268:	2301      	movs	r3, #1
 800c26a:	464a      	mov	r2, r9
 800c26c:	4631      	mov	r1, r6
 800c26e:	4628      	mov	r0, r5
 800c270:	47b8      	blx	r7
 800c272:	3001      	adds	r0, #1
 800c274:	f43f af27 	beq.w	800c0c6 <_printf_float+0xbe>
 800c278:	f108 0801 	add.w	r8, r8, #1
 800c27c:	e7e6      	b.n	800c24c <_printf_float+0x244>
 800c27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c280:	2b00      	cmp	r3, #0
 800c282:	dc39      	bgt.n	800c2f8 <_printf_float+0x2f0>
 800c284:	4a1b      	ldr	r2, [pc, #108]	; (800c2f4 <_printf_float+0x2ec>)
 800c286:	2301      	movs	r3, #1
 800c288:	4631      	mov	r1, r6
 800c28a:	4628      	mov	r0, r5
 800c28c:	47b8      	blx	r7
 800c28e:	3001      	adds	r0, #1
 800c290:	f43f af19 	beq.w	800c0c6 <_printf_float+0xbe>
 800c294:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c298:	4313      	orrs	r3, r2
 800c29a:	d102      	bne.n	800c2a2 <_printf_float+0x29a>
 800c29c:	6823      	ldr	r3, [r4, #0]
 800c29e:	07d9      	lsls	r1, r3, #31
 800c2a0:	d5d8      	bpl.n	800c254 <_printf_float+0x24c>
 800c2a2:	ee18 3a10 	vmov	r3, s16
 800c2a6:	4652      	mov	r2, sl
 800c2a8:	4631      	mov	r1, r6
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	47b8      	blx	r7
 800c2ae:	3001      	adds	r0, #1
 800c2b0:	f43f af09 	beq.w	800c0c6 <_printf_float+0xbe>
 800c2b4:	f04f 0900 	mov.w	r9, #0
 800c2b8:	f104 0a1a 	add.w	sl, r4, #26
 800c2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2be:	425b      	negs	r3, r3
 800c2c0:	454b      	cmp	r3, r9
 800c2c2:	dc01      	bgt.n	800c2c8 <_printf_float+0x2c0>
 800c2c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c6:	e792      	b.n	800c1ee <_printf_float+0x1e6>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	4652      	mov	r2, sl
 800c2cc:	4631      	mov	r1, r6
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	47b8      	blx	r7
 800c2d2:	3001      	adds	r0, #1
 800c2d4:	f43f aef7 	beq.w	800c0c6 <_printf_float+0xbe>
 800c2d8:	f109 0901 	add.w	r9, r9, #1
 800c2dc:	e7ee      	b.n	800c2bc <_printf_float+0x2b4>
 800c2de:	bf00      	nop
 800c2e0:	7fefffff 	.word	0x7fefffff
 800c2e4:	08010720 	.word	0x08010720
 800c2e8:	08010724 	.word	0x08010724
 800c2ec:	08010728 	.word	0x08010728
 800c2f0:	0801072c 	.word	0x0801072c
 800c2f4:	08010730 	.word	0x08010730
 800c2f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	bfa8      	it	ge
 800c300:	461a      	movge	r2, r3
 800c302:	2a00      	cmp	r2, #0
 800c304:	4691      	mov	r9, r2
 800c306:	dc37      	bgt.n	800c378 <_printf_float+0x370>
 800c308:	f04f 0b00 	mov.w	fp, #0
 800c30c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c310:	f104 021a 	add.w	r2, r4, #26
 800c314:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c316:	9305      	str	r3, [sp, #20]
 800c318:	eba3 0309 	sub.w	r3, r3, r9
 800c31c:	455b      	cmp	r3, fp
 800c31e:	dc33      	bgt.n	800c388 <_printf_float+0x380>
 800c320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c324:	429a      	cmp	r2, r3
 800c326:	db3b      	blt.n	800c3a0 <_printf_float+0x398>
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	07da      	lsls	r2, r3, #31
 800c32c:	d438      	bmi.n	800c3a0 <_printf_float+0x398>
 800c32e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c332:	eba2 0903 	sub.w	r9, r2, r3
 800c336:	9b05      	ldr	r3, [sp, #20]
 800c338:	1ad2      	subs	r2, r2, r3
 800c33a:	4591      	cmp	r9, r2
 800c33c:	bfa8      	it	ge
 800c33e:	4691      	movge	r9, r2
 800c340:	f1b9 0f00 	cmp.w	r9, #0
 800c344:	dc35      	bgt.n	800c3b2 <_printf_float+0x3aa>
 800c346:	f04f 0800 	mov.w	r8, #0
 800c34a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c34e:	f104 0a1a 	add.w	sl, r4, #26
 800c352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c356:	1a9b      	subs	r3, r3, r2
 800c358:	eba3 0309 	sub.w	r3, r3, r9
 800c35c:	4543      	cmp	r3, r8
 800c35e:	f77f af79 	ble.w	800c254 <_printf_float+0x24c>
 800c362:	2301      	movs	r3, #1
 800c364:	4652      	mov	r2, sl
 800c366:	4631      	mov	r1, r6
 800c368:	4628      	mov	r0, r5
 800c36a:	47b8      	blx	r7
 800c36c:	3001      	adds	r0, #1
 800c36e:	f43f aeaa 	beq.w	800c0c6 <_printf_float+0xbe>
 800c372:	f108 0801 	add.w	r8, r8, #1
 800c376:	e7ec      	b.n	800c352 <_printf_float+0x34a>
 800c378:	4613      	mov	r3, r2
 800c37a:	4631      	mov	r1, r6
 800c37c:	4642      	mov	r2, r8
 800c37e:	4628      	mov	r0, r5
 800c380:	47b8      	blx	r7
 800c382:	3001      	adds	r0, #1
 800c384:	d1c0      	bne.n	800c308 <_printf_float+0x300>
 800c386:	e69e      	b.n	800c0c6 <_printf_float+0xbe>
 800c388:	2301      	movs	r3, #1
 800c38a:	4631      	mov	r1, r6
 800c38c:	4628      	mov	r0, r5
 800c38e:	9205      	str	r2, [sp, #20]
 800c390:	47b8      	blx	r7
 800c392:	3001      	adds	r0, #1
 800c394:	f43f ae97 	beq.w	800c0c6 <_printf_float+0xbe>
 800c398:	9a05      	ldr	r2, [sp, #20]
 800c39a:	f10b 0b01 	add.w	fp, fp, #1
 800c39e:	e7b9      	b.n	800c314 <_printf_float+0x30c>
 800c3a0:	ee18 3a10 	vmov	r3, s16
 800c3a4:	4652      	mov	r2, sl
 800c3a6:	4631      	mov	r1, r6
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	47b8      	blx	r7
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	d1be      	bne.n	800c32e <_printf_float+0x326>
 800c3b0:	e689      	b.n	800c0c6 <_printf_float+0xbe>
 800c3b2:	9a05      	ldr	r2, [sp, #20]
 800c3b4:	464b      	mov	r3, r9
 800c3b6:	4442      	add	r2, r8
 800c3b8:	4631      	mov	r1, r6
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	47b8      	blx	r7
 800c3be:	3001      	adds	r0, #1
 800c3c0:	d1c1      	bne.n	800c346 <_printf_float+0x33e>
 800c3c2:	e680      	b.n	800c0c6 <_printf_float+0xbe>
 800c3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3c6:	2a01      	cmp	r2, #1
 800c3c8:	dc01      	bgt.n	800c3ce <_printf_float+0x3c6>
 800c3ca:	07db      	lsls	r3, r3, #31
 800c3cc:	d53a      	bpl.n	800c444 <_printf_float+0x43c>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	4642      	mov	r2, r8
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	47b8      	blx	r7
 800c3d8:	3001      	adds	r0, #1
 800c3da:	f43f ae74 	beq.w	800c0c6 <_printf_float+0xbe>
 800c3de:	ee18 3a10 	vmov	r3, s16
 800c3e2:	4652      	mov	r2, sl
 800c3e4:	4631      	mov	r1, r6
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	47b8      	blx	r7
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	f43f ae6b 	beq.w	800c0c6 <_printf_float+0xbe>
 800c3f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c3fc:	f7f4 fb74 	bl	8000ae8 <__aeabi_dcmpeq>
 800c400:	b9d8      	cbnz	r0, 800c43a <_printf_float+0x432>
 800c402:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c406:	f108 0201 	add.w	r2, r8, #1
 800c40a:	4631      	mov	r1, r6
 800c40c:	4628      	mov	r0, r5
 800c40e:	47b8      	blx	r7
 800c410:	3001      	adds	r0, #1
 800c412:	d10e      	bne.n	800c432 <_printf_float+0x42a>
 800c414:	e657      	b.n	800c0c6 <_printf_float+0xbe>
 800c416:	2301      	movs	r3, #1
 800c418:	4652      	mov	r2, sl
 800c41a:	4631      	mov	r1, r6
 800c41c:	4628      	mov	r0, r5
 800c41e:	47b8      	blx	r7
 800c420:	3001      	adds	r0, #1
 800c422:	f43f ae50 	beq.w	800c0c6 <_printf_float+0xbe>
 800c426:	f108 0801 	add.w	r8, r8, #1
 800c42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c42c:	3b01      	subs	r3, #1
 800c42e:	4543      	cmp	r3, r8
 800c430:	dcf1      	bgt.n	800c416 <_printf_float+0x40e>
 800c432:	464b      	mov	r3, r9
 800c434:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c438:	e6da      	b.n	800c1f0 <_printf_float+0x1e8>
 800c43a:	f04f 0800 	mov.w	r8, #0
 800c43e:	f104 0a1a 	add.w	sl, r4, #26
 800c442:	e7f2      	b.n	800c42a <_printf_float+0x422>
 800c444:	2301      	movs	r3, #1
 800c446:	4642      	mov	r2, r8
 800c448:	e7df      	b.n	800c40a <_printf_float+0x402>
 800c44a:	2301      	movs	r3, #1
 800c44c:	464a      	mov	r2, r9
 800c44e:	4631      	mov	r1, r6
 800c450:	4628      	mov	r0, r5
 800c452:	47b8      	blx	r7
 800c454:	3001      	adds	r0, #1
 800c456:	f43f ae36 	beq.w	800c0c6 <_printf_float+0xbe>
 800c45a:	f108 0801 	add.w	r8, r8, #1
 800c45e:	68e3      	ldr	r3, [r4, #12]
 800c460:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c462:	1a5b      	subs	r3, r3, r1
 800c464:	4543      	cmp	r3, r8
 800c466:	dcf0      	bgt.n	800c44a <_printf_float+0x442>
 800c468:	e6f8      	b.n	800c25c <_printf_float+0x254>
 800c46a:	f04f 0800 	mov.w	r8, #0
 800c46e:	f104 0919 	add.w	r9, r4, #25
 800c472:	e7f4      	b.n	800c45e <_printf_float+0x456>

0800c474 <_printf_common>:
 800c474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c478:	4616      	mov	r6, r2
 800c47a:	4699      	mov	r9, r3
 800c47c:	688a      	ldr	r2, [r1, #8]
 800c47e:	690b      	ldr	r3, [r1, #16]
 800c480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c484:	4293      	cmp	r3, r2
 800c486:	bfb8      	it	lt
 800c488:	4613      	movlt	r3, r2
 800c48a:	6033      	str	r3, [r6, #0]
 800c48c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c490:	4607      	mov	r7, r0
 800c492:	460c      	mov	r4, r1
 800c494:	b10a      	cbz	r2, 800c49a <_printf_common+0x26>
 800c496:	3301      	adds	r3, #1
 800c498:	6033      	str	r3, [r6, #0]
 800c49a:	6823      	ldr	r3, [r4, #0]
 800c49c:	0699      	lsls	r1, r3, #26
 800c49e:	bf42      	ittt	mi
 800c4a0:	6833      	ldrmi	r3, [r6, #0]
 800c4a2:	3302      	addmi	r3, #2
 800c4a4:	6033      	strmi	r3, [r6, #0]
 800c4a6:	6825      	ldr	r5, [r4, #0]
 800c4a8:	f015 0506 	ands.w	r5, r5, #6
 800c4ac:	d106      	bne.n	800c4bc <_printf_common+0x48>
 800c4ae:	f104 0a19 	add.w	sl, r4, #25
 800c4b2:	68e3      	ldr	r3, [r4, #12]
 800c4b4:	6832      	ldr	r2, [r6, #0]
 800c4b6:	1a9b      	subs	r3, r3, r2
 800c4b8:	42ab      	cmp	r3, r5
 800c4ba:	dc26      	bgt.n	800c50a <_printf_common+0x96>
 800c4bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4c0:	1e13      	subs	r3, r2, #0
 800c4c2:	6822      	ldr	r2, [r4, #0]
 800c4c4:	bf18      	it	ne
 800c4c6:	2301      	movne	r3, #1
 800c4c8:	0692      	lsls	r2, r2, #26
 800c4ca:	d42b      	bmi.n	800c524 <_printf_common+0xb0>
 800c4cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4d0:	4649      	mov	r1, r9
 800c4d2:	4638      	mov	r0, r7
 800c4d4:	47c0      	blx	r8
 800c4d6:	3001      	adds	r0, #1
 800c4d8:	d01e      	beq.n	800c518 <_printf_common+0xa4>
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	6922      	ldr	r2, [r4, #16]
 800c4de:	f003 0306 	and.w	r3, r3, #6
 800c4e2:	2b04      	cmp	r3, #4
 800c4e4:	bf02      	ittt	eq
 800c4e6:	68e5      	ldreq	r5, [r4, #12]
 800c4e8:	6833      	ldreq	r3, [r6, #0]
 800c4ea:	1aed      	subeq	r5, r5, r3
 800c4ec:	68a3      	ldr	r3, [r4, #8]
 800c4ee:	bf0c      	ite	eq
 800c4f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4f4:	2500      	movne	r5, #0
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	bfc4      	itt	gt
 800c4fa:	1a9b      	subgt	r3, r3, r2
 800c4fc:	18ed      	addgt	r5, r5, r3
 800c4fe:	2600      	movs	r6, #0
 800c500:	341a      	adds	r4, #26
 800c502:	42b5      	cmp	r5, r6
 800c504:	d11a      	bne.n	800c53c <_printf_common+0xc8>
 800c506:	2000      	movs	r0, #0
 800c508:	e008      	b.n	800c51c <_printf_common+0xa8>
 800c50a:	2301      	movs	r3, #1
 800c50c:	4652      	mov	r2, sl
 800c50e:	4649      	mov	r1, r9
 800c510:	4638      	mov	r0, r7
 800c512:	47c0      	blx	r8
 800c514:	3001      	adds	r0, #1
 800c516:	d103      	bne.n	800c520 <_printf_common+0xac>
 800c518:	f04f 30ff 	mov.w	r0, #4294967295
 800c51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c520:	3501      	adds	r5, #1
 800c522:	e7c6      	b.n	800c4b2 <_printf_common+0x3e>
 800c524:	18e1      	adds	r1, r4, r3
 800c526:	1c5a      	adds	r2, r3, #1
 800c528:	2030      	movs	r0, #48	; 0x30
 800c52a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c52e:	4422      	add	r2, r4
 800c530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c538:	3302      	adds	r3, #2
 800c53a:	e7c7      	b.n	800c4cc <_printf_common+0x58>
 800c53c:	2301      	movs	r3, #1
 800c53e:	4622      	mov	r2, r4
 800c540:	4649      	mov	r1, r9
 800c542:	4638      	mov	r0, r7
 800c544:	47c0      	blx	r8
 800c546:	3001      	adds	r0, #1
 800c548:	d0e6      	beq.n	800c518 <_printf_common+0xa4>
 800c54a:	3601      	adds	r6, #1
 800c54c:	e7d9      	b.n	800c502 <_printf_common+0x8e>
	...

0800c550 <_printf_i>:
 800c550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c554:	7e0f      	ldrb	r7, [r1, #24]
 800c556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c558:	2f78      	cmp	r7, #120	; 0x78
 800c55a:	4691      	mov	r9, r2
 800c55c:	4680      	mov	r8, r0
 800c55e:	460c      	mov	r4, r1
 800c560:	469a      	mov	sl, r3
 800c562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c566:	d807      	bhi.n	800c578 <_printf_i+0x28>
 800c568:	2f62      	cmp	r7, #98	; 0x62
 800c56a:	d80a      	bhi.n	800c582 <_printf_i+0x32>
 800c56c:	2f00      	cmp	r7, #0
 800c56e:	f000 80d4 	beq.w	800c71a <_printf_i+0x1ca>
 800c572:	2f58      	cmp	r7, #88	; 0x58
 800c574:	f000 80c0 	beq.w	800c6f8 <_printf_i+0x1a8>
 800c578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c57c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c580:	e03a      	b.n	800c5f8 <_printf_i+0xa8>
 800c582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c586:	2b15      	cmp	r3, #21
 800c588:	d8f6      	bhi.n	800c578 <_printf_i+0x28>
 800c58a:	a101      	add	r1, pc, #4	; (adr r1, 800c590 <_printf_i+0x40>)
 800c58c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c590:	0800c5e9 	.word	0x0800c5e9
 800c594:	0800c5fd 	.word	0x0800c5fd
 800c598:	0800c579 	.word	0x0800c579
 800c59c:	0800c579 	.word	0x0800c579
 800c5a0:	0800c579 	.word	0x0800c579
 800c5a4:	0800c579 	.word	0x0800c579
 800c5a8:	0800c5fd 	.word	0x0800c5fd
 800c5ac:	0800c579 	.word	0x0800c579
 800c5b0:	0800c579 	.word	0x0800c579
 800c5b4:	0800c579 	.word	0x0800c579
 800c5b8:	0800c579 	.word	0x0800c579
 800c5bc:	0800c701 	.word	0x0800c701
 800c5c0:	0800c629 	.word	0x0800c629
 800c5c4:	0800c6bb 	.word	0x0800c6bb
 800c5c8:	0800c579 	.word	0x0800c579
 800c5cc:	0800c579 	.word	0x0800c579
 800c5d0:	0800c723 	.word	0x0800c723
 800c5d4:	0800c579 	.word	0x0800c579
 800c5d8:	0800c629 	.word	0x0800c629
 800c5dc:	0800c579 	.word	0x0800c579
 800c5e0:	0800c579 	.word	0x0800c579
 800c5e4:	0800c6c3 	.word	0x0800c6c3
 800c5e8:	682b      	ldr	r3, [r5, #0]
 800c5ea:	1d1a      	adds	r2, r3, #4
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	602a      	str	r2, [r5, #0]
 800c5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	e09f      	b.n	800c73c <_printf_i+0x1ec>
 800c5fc:	6820      	ldr	r0, [r4, #0]
 800c5fe:	682b      	ldr	r3, [r5, #0]
 800c600:	0607      	lsls	r7, r0, #24
 800c602:	f103 0104 	add.w	r1, r3, #4
 800c606:	6029      	str	r1, [r5, #0]
 800c608:	d501      	bpl.n	800c60e <_printf_i+0xbe>
 800c60a:	681e      	ldr	r6, [r3, #0]
 800c60c:	e003      	b.n	800c616 <_printf_i+0xc6>
 800c60e:	0646      	lsls	r6, r0, #25
 800c610:	d5fb      	bpl.n	800c60a <_printf_i+0xba>
 800c612:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c616:	2e00      	cmp	r6, #0
 800c618:	da03      	bge.n	800c622 <_printf_i+0xd2>
 800c61a:	232d      	movs	r3, #45	; 0x2d
 800c61c:	4276      	negs	r6, r6
 800c61e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c622:	485a      	ldr	r0, [pc, #360]	; (800c78c <_printf_i+0x23c>)
 800c624:	230a      	movs	r3, #10
 800c626:	e012      	b.n	800c64e <_printf_i+0xfe>
 800c628:	682b      	ldr	r3, [r5, #0]
 800c62a:	6820      	ldr	r0, [r4, #0]
 800c62c:	1d19      	adds	r1, r3, #4
 800c62e:	6029      	str	r1, [r5, #0]
 800c630:	0605      	lsls	r5, r0, #24
 800c632:	d501      	bpl.n	800c638 <_printf_i+0xe8>
 800c634:	681e      	ldr	r6, [r3, #0]
 800c636:	e002      	b.n	800c63e <_printf_i+0xee>
 800c638:	0641      	lsls	r1, r0, #25
 800c63a:	d5fb      	bpl.n	800c634 <_printf_i+0xe4>
 800c63c:	881e      	ldrh	r6, [r3, #0]
 800c63e:	4853      	ldr	r0, [pc, #332]	; (800c78c <_printf_i+0x23c>)
 800c640:	2f6f      	cmp	r7, #111	; 0x6f
 800c642:	bf0c      	ite	eq
 800c644:	2308      	moveq	r3, #8
 800c646:	230a      	movne	r3, #10
 800c648:	2100      	movs	r1, #0
 800c64a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c64e:	6865      	ldr	r5, [r4, #4]
 800c650:	60a5      	str	r5, [r4, #8]
 800c652:	2d00      	cmp	r5, #0
 800c654:	bfa2      	ittt	ge
 800c656:	6821      	ldrge	r1, [r4, #0]
 800c658:	f021 0104 	bicge.w	r1, r1, #4
 800c65c:	6021      	strge	r1, [r4, #0]
 800c65e:	b90e      	cbnz	r6, 800c664 <_printf_i+0x114>
 800c660:	2d00      	cmp	r5, #0
 800c662:	d04b      	beq.n	800c6fc <_printf_i+0x1ac>
 800c664:	4615      	mov	r5, r2
 800c666:	fbb6 f1f3 	udiv	r1, r6, r3
 800c66a:	fb03 6711 	mls	r7, r3, r1, r6
 800c66e:	5dc7      	ldrb	r7, [r0, r7]
 800c670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c674:	4637      	mov	r7, r6
 800c676:	42bb      	cmp	r3, r7
 800c678:	460e      	mov	r6, r1
 800c67a:	d9f4      	bls.n	800c666 <_printf_i+0x116>
 800c67c:	2b08      	cmp	r3, #8
 800c67e:	d10b      	bne.n	800c698 <_printf_i+0x148>
 800c680:	6823      	ldr	r3, [r4, #0]
 800c682:	07de      	lsls	r6, r3, #31
 800c684:	d508      	bpl.n	800c698 <_printf_i+0x148>
 800c686:	6923      	ldr	r3, [r4, #16]
 800c688:	6861      	ldr	r1, [r4, #4]
 800c68a:	4299      	cmp	r1, r3
 800c68c:	bfde      	ittt	le
 800c68e:	2330      	movle	r3, #48	; 0x30
 800c690:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c694:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c698:	1b52      	subs	r2, r2, r5
 800c69a:	6122      	str	r2, [r4, #16]
 800c69c:	f8cd a000 	str.w	sl, [sp]
 800c6a0:	464b      	mov	r3, r9
 800c6a2:	aa03      	add	r2, sp, #12
 800c6a4:	4621      	mov	r1, r4
 800c6a6:	4640      	mov	r0, r8
 800c6a8:	f7ff fee4 	bl	800c474 <_printf_common>
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	d14a      	bne.n	800c746 <_printf_i+0x1f6>
 800c6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b4:	b004      	add	sp, #16
 800c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	f043 0320 	orr.w	r3, r3, #32
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	4833      	ldr	r0, [pc, #204]	; (800c790 <_printf_i+0x240>)
 800c6c4:	2778      	movs	r7, #120	; 0x78
 800c6c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	6829      	ldr	r1, [r5, #0]
 800c6ce:	061f      	lsls	r7, r3, #24
 800c6d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6d4:	d402      	bmi.n	800c6dc <_printf_i+0x18c>
 800c6d6:	065f      	lsls	r7, r3, #25
 800c6d8:	bf48      	it	mi
 800c6da:	b2b6      	uxthmi	r6, r6
 800c6dc:	07df      	lsls	r7, r3, #31
 800c6de:	bf48      	it	mi
 800c6e0:	f043 0320 	orrmi.w	r3, r3, #32
 800c6e4:	6029      	str	r1, [r5, #0]
 800c6e6:	bf48      	it	mi
 800c6e8:	6023      	strmi	r3, [r4, #0]
 800c6ea:	b91e      	cbnz	r6, 800c6f4 <_printf_i+0x1a4>
 800c6ec:	6823      	ldr	r3, [r4, #0]
 800c6ee:	f023 0320 	bic.w	r3, r3, #32
 800c6f2:	6023      	str	r3, [r4, #0]
 800c6f4:	2310      	movs	r3, #16
 800c6f6:	e7a7      	b.n	800c648 <_printf_i+0xf8>
 800c6f8:	4824      	ldr	r0, [pc, #144]	; (800c78c <_printf_i+0x23c>)
 800c6fa:	e7e4      	b.n	800c6c6 <_printf_i+0x176>
 800c6fc:	4615      	mov	r5, r2
 800c6fe:	e7bd      	b.n	800c67c <_printf_i+0x12c>
 800c700:	682b      	ldr	r3, [r5, #0]
 800c702:	6826      	ldr	r6, [r4, #0]
 800c704:	6961      	ldr	r1, [r4, #20]
 800c706:	1d18      	adds	r0, r3, #4
 800c708:	6028      	str	r0, [r5, #0]
 800c70a:	0635      	lsls	r5, r6, #24
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	d501      	bpl.n	800c714 <_printf_i+0x1c4>
 800c710:	6019      	str	r1, [r3, #0]
 800c712:	e002      	b.n	800c71a <_printf_i+0x1ca>
 800c714:	0670      	lsls	r0, r6, #25
 800c716:	d5fb      	bpl.n	800c710 <_printf_i+0x1c0>
 800c718:	8019      	strh	r1, [r3, #0]
 800c71a:	2300      	movs	r3, #0
 800c71c:	6123      	str	r3, [r4, #16]
 800c71e:	4615      	mov	r5, r2
 800c720:	e7bc      	b.n	800c69c <_printf_i+0x14c>
 800c722:	682b      	ldr	r3, [r5, #0]
 800c724:	1d1a      	adds	r2, r3, #4
 800c726:	602a      	str	r2, [r5, #0]
 800c728:	681d      	ldr	r5, [r3, #0]
 800c72a:	6862      	ldr	r2, [r4, #4]
 800c72c:	2100      	movs	r1, #0
 800c72e:	4628      	mov	r0, r5
 800c730:	f7f3 fd5e 	bl	80001f0 <memchr>
 800c734:	b108      	cbz	r0, 800c73a <_printf_i+0x1ea>
 800c736:	1b40      	subs	r0, r0, r5
 800c738:	6060      	str	r0, [r4, #4]
 800c73a:	6863      	ldr	r3, [r4, #4]
 800c73c:	6123      	str	r3, [r4, #16]
 800c73e:	2300      	movs	r3, #0
 800c740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c744:	e7aa      	b.n	800c69c <_printf_i+0x14c>
 800c746:	6923      	ldr	r3, [r4, #16]
 800c748:	462a      	mov	r2, r5
 800c74a:	4649      	mov	r1, r9
 800c74c:	4640      	mov	r0, r8
 800c74e:	47d0      	blx	sl
 800c750:	3001      	adds	r0, #1
 800c752:	d0ad      	beq.n	800c6b0 <_printf_i+0x160>
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	079b      	lsls	r3, r3, #30
 800c758:	d413      	bmi.n	800c782 <_printf_i+0x232>
 800c75a:	68e0      	ldr	r0, [r4, #12]
 800c75c:	9b03      	ldr	r3, [sp, #12]
 800c75e:	4298      	cmp	r0, r3
 800c760:	bfb8      	it	lt
 800c762:	4618      	movlt	r0, r3
 800c764:	e7a6      	b.n	800c6b4 <_printf_i+0x164>
 800c766:	2301      	movs	r3, #1
 800c768:	4632      	mov	r2, r6
 800c76a:	4649      	mov	r1, r9
 800c76c:	4640      	mov	r0, r8
 800c76e:	47d0      	blx	sl
 800c770:	3001      	adds	r0, #1
 800c772:	d09d      	beq.n	800c6b0 <_printf_i+0x160>
 800c774:	3501      	adds	r5, #1
 800c776:	68e3      	ldr	r3, [r4, #12]
 800c778:	9903      	ldr	r1, [sp, #12]
 800c77a:	1a5b      	subs	r3, r3, r1
 800c77c:	42ab      	cmp	r3, r5
 800c77e:	dcf2      	bgt.n	800c766 <_printf_i+0x216>
 800c780:	e7eb      	b.n	800c75a <_printf_i+0x20a>
 800c782:	2500      	movs	r5, #0
 800c784:	f104 0619 	add.w	r6, r4, #25
 800c788:	e7f5      	b.n	800c776 <_printf_i+0x226>
 800c78a:	bf00      	nop
 800c78c:	08010732 	.word	0x08010732
 800c790:	08010743 	.word	0x08010743

0800c794 <std>:
 800c794:	2300      	movs	r3, #0
 800c796:	b510      	push	{r4, lr}
 800c798:	4604      	mov	r4, r0
 800c79a:	e9c0 3300 	strd	r3, r3, [r0]
 800c79e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7a2:	6083      	str	r3, [r0, #8]
 800c7a4:	8181      	strh	r1, [r0, #12]
 800c7a6:	6643      	str	r3, [r0, #100]	; 0x64
 800c7a8:	81c2      	strh	r2, [r0, #14]
 800c7aa:	6183      	str	r3, [r0, #24]
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	2208      	movs	r2, #8
 800c7b0:	305c      	adds	r0, #92	; 0x5c
 800c7b2:	f000 f914 	bl	800c9de <memset>
 800c7b6:	4b0d      	ldr	r3, [pc, #52]	; (800c7ec <std+0x58>)
 800c7b8:	6263      	str	r3, [r4, #36]	; 0x24
 800c7ba:	4b0d      	ldr	r3, [pc, #52]	; (800c7f0 <std+0x5c>)
 800c7bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7be:	4b0d      	ldr	r3, [pc, #52]	; (800c7f4 <std+0x60>)
 800c7c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7c2:	4b0d      	ldr	r3, [pc, #52]	; (800c7f8 <std+0x64>)
 800c7c4:	6323      	str	r3, [r4, #48]	; 0x30
 800c7c6:	4b0d      	ldr	r3, [pc, #52]	; (800c7fc <std+0x68>)
 800c7c8:	6224      	str	r4, [r4, #32]
 800c7ca:	429c      	cmp	r4, r3
 800c7cc:	d006      	beq.n	800c7dc <std+0x48>
 800c7ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c7d2:	4294      	cmp	r4, r2
 800c7d4:	d002      	beq.n	800c7dc <std+0x48>
 800c7d6:	33d0      	adds	r3, #208	; 0xd0
 800c7d8:	429c      	cmp	r4, r3
 800c7da:	d105      	bne.n	800c7e8 <std+0x54>
 800c7dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7e4:	f000 b978 	b.w	800cad8 <__retarget_lock_init_recursive>
 800c7e8:	bd10      	pop	{r4, pc}
 800c7ea:	bf00      	nop
 800c7ec:	0800c959 	.word	0x0800c959
 800c7f0:	0800c97b 	.word	0x0800c97b
 800c7f4:	0800c9b3 	.word	0x0800c9b3
 800c7f8:	0800c9d7 	.word	0x0800c9d7
 800c7fc:	20002288 	.word	0x20002288

0800c800 <stdio_exit_handler>:
 800c800:	4a02      	ldr	r2, [pc, #8]	; (800c80c <stdio_exit_handler+0xc>)
 800c802:	4903      	ldr	r1, [pc, #12]	; (800c810 <stdio_exit_handler+0x10>)
 800c804:	4803      	ldr	r0, [pc, #12]	; (800c814 <stdio_exit_handler+0x14>)
 800c806:	f000 b869 	b.w	800c8dc <_fwalk_sglue>
 800c80a:	bf00      	nop
 800c80c:	20000178 	.word	0x20000178
 800c810:	0800e489 	.word	0x0800e489
 800c814:	20000184 	.word	0x20000184

0800c818 <cleanup_stdio>:
 800c818:	6841      	ldr	r1, [r0, #4]
 800c81a:	4b0c      	ldr	r3, [pc, #48]	; (800c84c <cleanup_stdio+0x34>)
 800c81c:	4299      	cmp	r1, r3
 800c81e:	b510      	push	{r4, lr}
 800c820:	4604      	mov	r4, r0
 800c822:	d001      	beq.n	800c828 <cleanup_stdio+0x10>
 800c824:	f001 fe30 	bl	800e488 <_fflush_r>
 800c828:	68a1      	ldr	r1, [r4, #8]
 800c82a:	4b09      	ldr	r3, [pc, #36]	; (800c850 <cleanup_stdio+0x38>)
 800c82c:	4299      	cmp	r1, r3
 800c82e:	d002      	beq.n	800c836 <cleanup_stdio+0x1e>
 800c830:	4620      	mov	r0, r4
 800c832:	f001 fe29 	bl	800e488 <_fflush_r>
 800c836:	68e1      	ldr	r1, [r4, #12]
 800c838:	4b06      	ldr	r3, [pc, #24]	; (800c854 <cleanup_stdio+0x3c>)
 800c83a:	4299      	cmp	r1, r3
 800c83c:	d004      	beq.n	800c848 <cleanup_stdio+0x30>
 800c83e:	4620      	mov	r0, r4
 800c840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c844:	f001 be20 	b.w	800e488 <_fflush_r>
 800c848:	bd10      	pop	{r4, pc}
 800c84a:	bf00      	nop
 800c84c:	20002288 	.word	0x20002288
 800c850:	200022f0 	.word	0x200022f0
 800c854:	20002358 	.word	0x20002358

0800c858 <global_stdio_init.part.0>:
 800c858:	b510      	push	{r4, lr}
 800c85a:	4b0b      	ldr	r3, [pc, #44]	; (800c888 <global_stdio_init.part.0+0x30>)
 800c85c:	4c0b      	ldr	r4, [pc, #44]	; (800c88c <global_stdio_init.part.0+0x34>)
 800c85e:	4a0c      	ldr	r2, [pc, #48]	; (800c890 <global_stdio_init.part.0+0x38>)
 800c860:	601a      	str	r2, [r3, #0]
 800c862:	4620      	mov	r0, r4
 800c864:	2200      	movs	r2, #0
 800c866:	2104      	movs	r1, #4
 800c868:	f7ff ff94 	bl	800c794 <std>
 800c86c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c870:	2201      	movs	r2, #1
 800c872:	2109      	movs	r1, #9
 800c874:	f7ff ff8e 	bl	800c794 <std>
 800c878:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c87c:	2202      	movs	r2, #2
 800c87e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c882:	2112      	movs	r1, #18
 800c884:	f7ff bf86 	b.w	800c794 <std>
 800c888:	200023c0 	.word	0x200023c0
 800c88c:	20002288 	.word	0x20002288
 800c890:	0800c801 	.word	0x0800c801

0800c894 <__sfp_lock_acquire>:
 800c894:	4801      	ldr	r0, [pc, #4]	; (800c89c <__sfp_lock_acquire+0x8>)
 800c896:	f000 b920 	b.w	800cada <__retarget_lock_acquire_recursive>
 800c89a:	bf00      	nop
 800c89c:	200023c9 	.word	0x200023c9

0800c8a0 <__sfp_lock_release>:
 800c8a0:	4801      	ldr	r0, [pc, #4]	; (800c8a8 <__sfp_lock_release+0x8>)
 800c8a2:	f000 b91b 	b.w	800cadc <__retarget_lock_release_recursive>
 800c8a6:	bf00      	nop
 800c8a8:	200023c9 	.word	0x200023c9

0800c8ac <__sinit>:
 800c8ac:	b510      	push	{r4, lr}
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	f7ff fff0 	bl	800c894 <__sfp_lock_acquire>
 800c8b4:	6a23      	ldr	r3, [r4, #32]
 800c8b6:	b11b      	cbz	r3, 800c8c0 <__sinit+0x14>
 800c8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8bc:	f7ff bff0 	b.w	800c8a0 <__sfp_lock_release>
 800c8c0:	4b04      	ldr	r3, [pc, #16]	; (800c8d4 <__sinit+0x28>)
 800c8c2:	6223      	str	r3, [r4, #32]
 800c8c4:	4b04      	ldr	r3, [pc, #16]	; (800c8d8 <__sinit+0x2c>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1f5      	bne.n	800c8b8 <__sinit+0xc>
 800c8cc:	f7ff ffc4 	bl	800c858 <global_stdio_init.part.0>
 800c8d0:	e7f2      	b.n	800c8b8 <__sinit+0xc>
 800c8d2:	bf00      	nop
 800c8d4:	0800c819 	.word	0x0800c819
 800c8d8:	200023c0 	.word	0x200023c0

0800c8dc <_fwalk_sglue>:
 800c8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8e0:	4607      	mov	r7, r0
 800c8e2:	4688      	mov	r8, r1
 800c8e4:	4614      	mov	r4, r2
 800c8e6:	2600      	movs	r6, #0
 800c8e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8ec:	f1b9 0901 	subs.w	r9, r9, #1
 800c8f0:	d505      	bpl.n	800c8fe <_fwalk_sglue+0x22>
 800c8f2:	6824      	ldr	r4, [r4, #0]
 800c8f4:	2c00      	cmp	r4, #0
 800c8f6:	d1f7      	bne.n	800c8e8 <_fwalk_sglue+0xc>
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8fe:	89ab      	ldrh	r3, [r5, #12]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d907      	bls.n	800c914 <_fwalk_sglue+0x38>
 800c904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c908:	3301      	adds	r3, #1
 800c90a:	d003      	beq.n	800c914 <_fwalk_sglue+0x38>
 800c90c:	4629      	mov	r1, r5
 800c90e:	4638      	mov	r0, r7
 800c910:	47c0      	blx	r8
 800c912:	4306      	orrs	r6, r0
 800c914:	3568      	adds	r5, #104	; 0x68
 800c916:	e7e9      	b.n	800c8ec <_fwalk_sglue+0x10>

0800c918 <siprintf>:
 800c918:	b40e      	push	{r1, r2, r3}
 800c91a:	b500      	push	{lr}
 800c91c:	b09c      	sub	sp, #112	; 0x70
 800c91e:	ab1d      	add	r3, sp, #116	; 0x74
 800c920:	9002      	str	r0, [sp, #8]
 800c922:	9006      	str	r0, [sp, #24]
 800c924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c928:	4809      	ldr	r0, [pc, #36]	; (800c950 <siprintf+0x38>)
 800c92a:	9107      	str	r1, [sp, #28]
 800c92c:	9104      	str	r1, [sp, #16]
 800c92e:	4909      	ldr	r1, [pc, #36]	; (800c954 <siprintf+0x3c>)
 800c930:	f853 2b04 	ldr.w	r2, [r3], #4
 800c934:	9105      	str	r1, [sp, #20]
 800c936:	6800      	ldr	r0, [r0, #0]
 800c938:	9301      	str	r3, [sp, #4]
 800c93a:	a902      	add	r1, sp, #8
 800c93c:	f001 fc20 	bl	800e180 <_svfiprintf_r>
 800c940:	9b02      	ldr	r3, [sp, #8]
 800c942:	2200      	movs	r2, #0
 800c944:	701a      	strb	r2, [r3, #0]
 800c946:	b01c      	add	sp, #112	; 0x70
 800c948:	f85d eb04 	ldr.w	lr, [sp], #4
 800c94c:	b003      	add	sp, #12
 800c94e:	4770      	bx	lr
 800c950:	200001d0 	.word	0x200001d0
 800c954:	ffff0208 	.word	0xffff0208

0800c958 <__sread>:
 800c958:	b510      	push	{r4, lr}
 800c95a:	460c      	mov	r4, r1
 800c95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c960:	f000 f86c 	bl	800ca3c <_read_r>
 800c964:	2800      	cmp	r0, #0
 800c966:	bfab      	itete	ge
 800c968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c96a:	89a3      	ldrhlt	r3, [r4, #12]
 800c96c:	181b      	addge	r3, r3, r0
 800c96e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c972:	bfac      	ite	ge
 800c974:	6563      	strge	r3, [r4, #84]	; 0x54
 800c976:	81a3      	strhlt	r3, [r4, #12]
 800c978:	bd10      	pop	{r4, pc}

0800c97a <__swrite>:
 800c97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c97e:	461f      	mov	r7, r3
 800c980:	898b      	ldrh	r3, [r1, #12]
 800c982:	05db      	lsls	r3, r3, #23
 800c984:	4605      	mov	r5, r0
 800c986:	460c      	mov	r4, r1
 800c988:	4616      	mov	r6, r2
 800c98a:	d505      	bpl.n	800c998 <__swrite+0x1e>
 800c98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c990:	2302      	movs	r3, #2
 800c992:	2200      	movs	r2, #0
 800c994:	f000 f840 	bl	800ca18 <_lseek_r>
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c99e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9a2:	81a3      	strh	r3, [r4, #12]
 800c9a4:	4632      	mov	r2, r6
 800c9a6:	463b      	mov	r3, r7
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ae:	f000 b857 	b.w	800ca60 <_write_r>

0800c9b2 <__sseek>:
 800c9b2:	b510      	push	{r4, lr}
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ba:	f000 f82d 	bl	800ca18 <_lseek_r>
 800c9be:	1c43      	adds	r3, r0, #1
 800c9c0:	89a3      	ldrh	r3, [r4, #12]
 800c9c2:	bf15      	itete	ne
 800c9c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9ce:	81a3      	strheq	r3, [r4, #12]
 800c9d0:	bf18      	it	ne
 800c9d2:	81a3      	strhne	r3, [r4, #12]
 800c9d4:	bd10      	pop	{r4, pc}

0800c9d6 <__sclose>:
 800c9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9da:	f000 b80d 	b.w	800c9f8 <_close_r>

0800c9de <memset>:
 800c9de:	4402      	add	r2, r0
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d100      	bne.n	800c9e8 <memset+0xa>
 800c9e6:	4770      	bx	lr
 800c9e8:	f803 1b01 	strb.w	r1, [r3], #1
 800c9ec:	e7f9      	b.n	800c9e2 <memset+0x4>
	...

0800c9f0 <_localeconv_r>:
 800c9f0:	4800      	ldr	r0, [pc, #0]	; (800c9f4 <_localeconv_r+0x4>)
 800c9f2:	4770      	bx	lr
 800c9f4:	200002c4 	.word	0x200002c4

0800c9f8 <_close_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	4d06      	ldr	r5, [pc, #24]	; (800ca14 <_close_r+0x1c>)
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	4604      	mov	r4, r0
 800ca00:	4608      	mov	r0, r1
 800ca02:	602b      	str	r3, [r5, #0]
 800ca04:	f7f4 fd9b 	bl	800153e <_close>
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	d102      	bne.n	800ca12 <_close_r+0x1a>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	b103      	cbz	r3, 800ca12 <_close_r+0x1a>
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	bd38      	pop	{r3, r4, r5, pc}
 800ca14:	200023c4 	.word	0x200023c4

0800ca18 <_lseek_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4d07      	ldr	r5, [pc, #28]	; (800ca38 <_lseek_r+0x20>)
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	4608      	mov	r0, r1
 800ca20:	4611      	mov	r1, r2
 800ca22:	2200      	movs	r2, #0
 800ca24:	602a      	str	r2, [r5, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	f7f4 fdb0 	bl	800158c <_lseek>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_lseek_r+0x1e>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_lseek_r+0x1e>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	200023c4 	.word	0x200023c4

0800ca3c <_read_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4d07      	ldr	r5, [pc, #28]	; (800ca5c <_read_r+0x20>)
 800ca40:	4604      	mov	r4, r0
 800ca42:	4608      	mov	r0, r1
 800ca44:	4611      	mov	r1, r2
 800ca46:	2200      	movs	r2, #0
 800ca48:	602a      	str	r2, [r5, #0]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f7f4 fd3e 	bl	80014cc <_read>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_read_r+0x1e>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_read_r+0x1e>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	200023c4 	.word	0x200023c4

0800ca60 <_write_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4d07      	ldr	r5, [pc, #28]	; (800ca80 <_write_r+0x20>)
 800ca64:	4604      	mov	r4, r0
 800ca66:	4608      	mov	r0, r1
 800ca68:	4611      	mov	r1, r2
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	602a      	str	r2, [r5, #0]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	f7f4 fd49 	bl	8001506 <_write>
 800ca74:	1c43      	adds	r3, r0, #1
 800ca76:	d102      	bne.n	800ca7e <_write_r+0x1e>
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	b103      	cbz	r3, 800ca7e <_write_r+0x1e>
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	bd38      	pop	{r3, r4, r5, pc}
 800ca80:	200023c4 	.word	0x200023c4

0800ca84 <__errno>:
 800ca84:	4b01      	ldr	r3, [pc, #4]	; (800ca8c <__errno+0x8>)
 800ca86:	6818      	ldr	r0, [r3, #0]
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	200001d0 	.word	0x200001d0

0800ca90 <__libc_init_array>:
 800ca90:	b570      	push	{r4, r5, r6, lr}
 800ca92:	4d0d      	ldr	r5, [pc, #52]	; (800cac8 <__libc_init_array+0x38>)
 800ca94:	4c0d      	ldr	r4, [pc, #52]	; (800cacc <__libc_init_array+0x3c>)
 800ca96:	1b64      	subs	r4, r4, r5
 800ca98:	10a4      	asrs	r4, r4, #2
 800ca9a:	2600      	movs	r6, #0
 800ca9c:	42a6      	cmp	r6, r4
 800ca9e:	d109      	bne.n	800cab4 <__libc_init_array+0x24>
 800caa0:	4d0b      	ldr	r5, [pc, #44]	; (800cad0 <__libc_init_array+0x40>)
 800caa2:	4c0c      	ldr	r4, [pc, #48]	; (800cad4 <__libc_init_array+0x44>)
 800caa4:	f002 f894 	bl	800ebd0 <_init>
 800caa8:	1b64      	subs	r4, r4, r5
 800caaa:	10a4      	asrs	r4, r4, #2
 800caac:	2600      	movs	r6, #0
 800caae:	42a6      	cmp	r6, r4
 800cab0:	d105      	bne.n	800cabe <__libc_init_array+0x2e>
 800cab2:	bd70      	pop	{r4, r5, r6, pc}
 800cab4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cab8:	4798      	blx	r3
 800caba:	3601      	adds	r6, #1
 800cabc:	e7ee      	b.n	800ca9c <__libc_init_array+0xc>
 800cabe:	f855 3b04 	ldr.w	r3, [r5], #4
 800cac2:	4798      	blx	r3
 800cac4:	3601      	adds	r6, #1
 800cac6:	e7f2      	b.n	800caae <__libc_init_array+0x1e>
 800cac8:	08010a9c 	.word	0x08010a9c
 800cacc:	08010a9c 	.word	0x08010a9c
 800cad0:	08010a9c 	.word	0x08010a9c
 800cad4:	08010aa0 	.word	0x08010aa0

0800cad8 <__retarget_lock_init_recursive>:
 800cad8:	4770      	bx	lr

0800cada <__retarget_lock_acquire_recursive>:
 800cada:	4770      	bx	lr

0800cadc <__retarget_lock_release_recursive>:
 800cadc:	4770      	bx	lr

0800cade <quorem>:
 800cade:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae2:	6903      	ldr	r3, [r0, #16]
 800cae4:	690c      	ldr	r4, [r1, #16]
 800cae6:	42a3      	cmp	r3, r4
 800cae8:	4607      	mov	r7, r0
 800caea:	db7e      	blt.n	800cbea <quorem+0x10c>
 800caec:	3c01      	subs	r4, #1
 800caee:	f101 0814 	add.w	r8, r1, #20
 800caf2:	f100 0514 	add.w	r5, r0, #20
 800caf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cafa:	9301      	str	r3, [sp, #4]
 800cafc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb04:	3301      	adds	r3, #1
 800cb06:	429a      	cmp	r2, r3
 800cb08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb10:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb14:	d331      	bcc.n	800cb7a <quorem+0x9c>
 800cb16:	f04f 0e00 	mov.w	lr, #0
 800cb1a:	4640      	mov	r0, r8
 800cb1c:	46ac      	mov	ip, r5
 800cb1e:	46f2      	mov	sl, lr
 800cb20:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb24:	b293      	uxth	r3, r2
 800cb26:	fb06 e303 	mla	r3, r6, r3, lr
 800cb2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb2e:	0c1a      	lsrs	r2, r3, #16
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	ebaa 0303 	sub.w	r3, sl, r3
 800cb36:	f8dc a000 	ldr.w	sl, [ip]
 800cb3a:	fa13 f38a 	uxtah	r3, r3, sl
 800cb3e:	fb06 220e 	mla	r2, r6, lr, r2
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	9b00      	ldr	r3, [sp, #0]
 800cb46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb4a:	b292      	uxth	r2, r2
 800cb4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb54:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb58:	4581      	cmp	r9, r0
 800cb5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb5e:	f84c 3b04 	str.w	r3, [ip], #4
 800cb62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb66:	d2db      	bcs.n	800cb20 <quorem+0x42>
 800cb68:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb6c:	b92b      	cbnz	r3, 800cb7a <quorem+0x9c>
 800cb6e:	9b01      	ldr	r3, [sp, #4]
 800cb70:	3b04      	subs	r3, #4
 800cb72:	429d      	cmp	r5, r3
 800cb74:	461a      	mov	r2, r3
 800cb76:	d32c      	bcc.n	800cbd2 <quorem+0xf4>
 800cb78:	613c      	str	r4, [r7, #16]
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	f001 f9a6 	bl	800decc <__mcmp>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	db22      	blt.n	800cbca <quorem+0xec>
 800cb84:	3601      	adds	r6, #1
 800cb86:	4629      	mov	r1, r5
 800cb88:	2000      	movs	r0, #0
 800cb8a:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb8e:	f8d1 c000 	ldr.w	ip, [r1]
 800cb92:	b293      	uxth	r3, r2
 800cb94:	1ac3      	subs	r3, r0, r3
 800cb96:	0c12      	lsrs	r2, r2, #16
 800cb98:	fa13 f38c 	uxtah	r3, r3, ip
 800cb9c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbaa:	45c1      	cmp	r9, r8
 800cbac:	f841 3b04 	str.w	r3, [r1], #4
 800cbb0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cbb4:	d2e9      	bcs.n	800cb8a <quorem+0xac>
 800cbb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbbe:	b922      	cbnz	r2, 800cbca <quorem+0xec>
 800cbc0:	3b04      	subs	r3, #4
 800cbc2:	429d      	cmp	r5, r3
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	d30a      	bcc.n	800cbde <quorem+0x100>
 800cbc8:	613c      	str	r4, [r7, #16]
 800cbca:	4630      	mov	r0, r6
 800cbcc:	b003      	add	sp, #12
 800cbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd2:	6812      	ldr	r2, [r2, #0]
 800cbd4:	3b04      	subs	r3, #4
 800cbd6:	2a00      	cmp	r2, #0
 800cbd8:	d1ce      	bne.n	800cb78 <quorem+0x9a>
 800cbda:	3c01      	subs	r4, #1
 800cbdc:	e7c9      	b.n	800cb72 <quorem+0x94>
 800cbde:	6812      	ldr	r2, [r2, #0]
 800cbe0:	3b04      	subs	r3, #4
 800cbe2:	2a00      	cmp	r2, #0
 800cbe4:	d1f0      	bne.n	800cbc8 <quorem+0xea>
 800cbe6:	3c01      	subs	r4, #1
 800cbe8:	e7eb      	b.n	800cbc2 <quorem+0xe4>
 800cbea:	2000      	movs	r0, #0
 800cbec:	e7ee      	b.n	800cbcc <quorem+0xee>
	...

0800cbf0 <_dtoa_r>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	ed2d 8b04 	vpush	{d8-d9}
 800cbf8:	69c5      	ldr	r5, [r0, #28]
 800cbfa:	b093      	sub	sp, #76	; 0x4c
 800cbfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cc00:	ec57 6b10 	vmov	r6, r7, d0
 800cc04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cc08:	9107      	str	r1, [sp, #28]
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	920a      	str	r2, [sp, #40]	; 0x28
 800cc0e:	930d      	str	r3, [sp, #52]	; 0x34
 800cc10:	b975      	cbnz	r5, 800cc30 <_dtoa_r+0x40>
 800cc12:	2010      	movs	r0, #16
 800cc14:	f000 fe2a 	bl	800d86c <malloc>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	61e0      	str	r0, [r4, #28]
 800cc1c:	b920      	cbnz	r0, 800cc28 <_dtoa_r+0x38>
 800cc1e:	4bae      	ldr	r3, [pc, #696]	; (800ced8 <_dtoa_r+0x2e8>)
 800cc20:	21ef      	movs	r1, #239	; 0xef
 800cc22:	48ae      	ldr	r0, [pc, #696]	; (800cedc <_dtoa_r+0x2ec>)
 800cc24:	f001 fc90 	bl	800e548 <__assert_func>
 800cc28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc2c:	6005      	str	r5, [r0, #0]
 800cc2e:	60c5      	str	r5, [r0, #12]
 800cc30:	69e3      	ldr	r3, [r4, #28]
 800cc32:	6819      	ldr	r1, [r3, #0]
 800cc34:	b151      	cbz	r1, 800cc4c <_dtoa_r+0x5c>
 800cc36:	685a      	ldr	r2, [r3, #4]
 800cc38:	604a      	str	r2, [r1, #4]
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	4093      	lsls	r3, r2
 800cc3e:	608b      	str	r3, [r1, #8]
 800cc40:	4620      	mov	r0, r4
 800cc42:	f000 ff07 	bl	800da54 <_Bfree>
 800cc46:	69e3      	ldr	r3, [r4, #28]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	601a      	str	r2, [r3, #0]
 800cc4c:	1e3b      	subs	r3, r7, #0
 800cc4e:	bfbb      	ittet	lt
 800cc50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cc54:	9303      	strlt	r3, [sp, #12]
 800cc56:	2300      	movge	r3, #0
 800cc58:	2201      	movlt	r2, #1
 800cc5a:	bfac      	ite	ge
 800cc5c:	f8c8 3000 	strge.w	r3, [r8]
 800cc60:	f8c8 2000 	strlt.w	r2, [r8]
 800cc64:	4b9e      	ldr	r3, [pc, #632]	; (800cee0 <_dtoa_r+0x2f0>)
 800cc66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cc6a:	ea33 0308 	bics.w	r3, r3, r8
 800cc6e:	d11b      	bne.n	800cca8 <_dtoa_r+0xb8>
 800cc70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc72:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc76:	6013      	str	r3, [r2, #0]
 800cc78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800cc7c:	4333      	orrs	r3, r6
 800cc7e:	f000 8593 	beq.w	800d7a8 <_dtoa_r+0xbb8>
 800cc82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc84:	b963      	cbnz	r3, 800cca0 <_dtoa_r+0xb0>
 800cc86:	4b97      	ldr	r3, [pc, #604]	; (800cee4 <_dtoa_r+0x2f4>)
 800cc88:	e027      	b.n	800ccda <_dtoa_r+0xea>
 800cc8a:	4b97      	ldr	r3, [pc, #604]	; (800cee8 <_dtoa_r+0x2f8>)
 800cc8c:	9300      	str	r3, [sp, #0]
 800cc8e:	3308      	adds	r3, #8
 800cc90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc92:	6013      	str	r3, [r2, #0]
 800cc94:	9800      	ldr	r0, [sp, #0]
 800cc96:	b013      	add	sp, #76	; 0x4c
 800cc98:	ecbd 8b04 	vpop	{d8-d9}
 800cc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca0:	4b90      	ldr	r3, [pc, #576]	; (800cee4 <_dtoa_r+0x2f4>)
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	3303      	adds	r3, #3
 800cca6:	e7f3      	b.n	800cc90 <_dtoa_r+0xa0>
 800cca8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccac:	2200      	movs	r2, #0
 800ccae:	ec51 0b17 	vmov	r0, r1, d7
 800ccb2:	eeb0 8a47 	vmov.f32	s16, s14
 800ccb6:	eef0 8a67 	vmov.f32	s17, s15
 800ccba:	2300      	movs	r3, #0
 800ccbc:	f7f3 ff14 	bl	8000ae8 <__aeabi_dcmpeq>
 800ccc0:	4681      	mov	r9, r0
 800ccc2:	b160      	cbz	r0, 800ccde <_dtoa_r+0xee>
 800ccc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	6013      	str	r3, [r2, #0]
 800ccca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f000 8568 	beq.w	800d7a2 <_dtoa_r+0xbb2>
 800ccd2:	4b86      	ldr	r3, [pc, #536]	; (800ceec <_dtoa_r+0x2fc>)
 800ccd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ccd6:	6013      	str	r3, [r2, #0]
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	e7da      	b.n	800cc94 <_dtoa_r+0xa4>
 800ccde:	aa10      	add	r2, sp, #64	; 0x40
 800cce0:	a911      	add	r1, sp, #68	; 0x44
 800cce2:	4620      	mov	r0, r4
 800cce4:	eeb0 0a48 	vmov.f32	s0, s16
 800cce8:	eef0 0a68 	vmov.f32	s1, s17
 800ccec:	f001 f994 	bl	800e018 <__d2b>
 800ccf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ccf4:	4682      	mov	sl, r0
 800ccf6:	2d00      	cmp	r5, #0
 800ccf8:	d07f      	beq.n	800cdfa <_dtoa_r+0x20a>
 800ccfa:	ee18 3a90 	vmov	r3, s17
 800ccfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cd06:	ec51 0b18 	vmov	r0, r1, d8
 800cd0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cd0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cd16:	4619      	mov	r1, r3
 800cd18:	2200      	movs	r2, #0
 800cd1a:	4b75      	ldr	r3, [pc, #468]	; (800cef0 <_dtoa_r+0x300>)
 800cd1c:	f7f3 fac4 	bl	80002a8 <__aeabi_dsub>
 800cd20:	a367      	add	r3, pc, #412	; (adr r3, 800cec0 <_dtoa_r+0x2d0>)
 800cd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd26:	f7f3 fc77 	bl	8000618 <__aeabi_dmul>
 800cd2a:	a367      	add	r3, pc, #412	; (adr r3, 800cec8 <_dtoa_r+0x2d8>)
 800cd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd30:	f7f3 fabc 	bl	80002ac <__adddf3>
 800cd34:	4606      	mov	r6, r0
 800cd36:	4628      	mov	r0, r5
 800cd38:	460f      	mov	r7, r1
 800cd3a:	f7f3 fc03 	bl	8000544 <__aeabi_i2d>
 800cd3e:	a364      	add	r3, pc, #400	; (adr r3, 800ced0 <_dtoa_r+0x2e0>)
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	f7f3 fc68 	bl	8000618 <__aeabi_dmul>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4630      	mov	r0, r6
 800cd4e:	4639      	mov	r1, r7
 800cd50:	f7f3 faac 	bl	80002ac <__adddf3>
 800cd54:	4606      	mov	r6, r0
 800cd56:	460f      	mov	r7, r1
 800cd58:	f7f3 ff0e 	bl	8000b78 <__aeabi_d2iz>
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	4683      	mov	fp, r0
 800cd60:	2300      	movs	r3, #0
 800cd62:	4630      	mov	r0, r6
 800cd64:	4639      	mov	r1, r7
 800cd66:	f7f3 fec9 	bl	8000afc <__aeabi_dcmplt>
 800cd6a:	b148      	cbz	r0, 800cd80 <_dtoa_r+0x190>
 800cd6c:	4658      	mov	r0, fp
 800cd6e:	f7f3 fbe9 	bl	8000544 <__aeabi_i2d>
 800cd72:	4632      	mov	r2, r6
 800cd74:	463b      	mov	r3, r7
 800cd76:	f7f3 feb7 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd7a:	b908      	cbnz	r0, 800cd80 <_dtoa_r+0x190>
 800cd7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd80:	f1bb 0f16 	cmp.w	fp, #22
 800cd84:	d857      	bhi.n	800ce36 <_dtoa_r+0x246>
 800cd86:	4b5b      	ldr	r3, [pc, #364]	; (800cef4 <_dtoa_r+0x304>)
 800cd88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd90:	ec51 0b18 	vmov	r0, r1, d8
 800cd94:	f7f3 feb2 	bl	8000afc <__aeabi_dcmplt>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d04e      	beq.n	800ce3a <_dtoa_r+0x24a>
 800cd9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cda0:	2300      	movs	r3, #0
 800cda2:	930c      	str	r3, [sp, #48]	; 0x30
 800cda4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cda6:	1b5b      	subs	r3, r3, r5
 800cda8:	1e5a      	subs	r2, r3, #1
 800cdaa:	bf45      	ittet	mi
 800cdac:	f1c3 0301 	rsbmi	r3, r3, #1
 800cdb0:	9305      	strmi	r3, [sp, #20]
 800cdb2:	2300      	movpl	r3, #0
 800cdb4:	2300      	movmi	r3, #0
 800cdb6:	9206      	str	r2, [sp, #24]
 800cdb8:	bf54      	ite	pl
 800cdba:	9305      	strpl	r3, [sp, #20]
 800cdbc:	9306      	strmi	r3, [sp, #24]
 800cdbe:	f1bb 0f00 	cmp.w	fp, #0
 800cdc2:	db3c      	blt.n	800ce3e <_dtoa_r+0x24e>
 800cdc4:	9b06      	ldr	r3, [sp, #24]
 800cdc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800cdca:	445b      	add	r3, fp
 800cdcc:	9306      	str	r3, [sp, #24]
 800cdce:	2300      	movs	r3, #0
 800cdd0:	9308      	str	r3, [sp, #32]
 800cdd2:	9b07      	ldr	r3, [sp, #28]
 800cdd4:	2b09      	cmp	r3, #9
 800cdd6:	d868      	bhi.n	800ceaa <_dtoa_r+0x2ba>
 800cdd8:	2b05      	cmp	r3, #5
 800cdda:	bfc4      	itt	gt
 800cddc:	3b04      	subgt	r3, #4
 800cdde:	9307      	strgt	r3, [sp, #28]
 800cde0:	9b07      	ldr	r3, [sp, #28]
 800cde2:	f1a3 0302 	sub.w	r3, r3, #2
 800cde6:	bfcc      	ite	gt
 800cde8:	2500      	movgt	r5, #0
 800cdea:	2501      	movle	r5, #1
 800cdec:	2b03      	cmp	r3, #3
 800cdee:	f200 8085 	bhi.w	800cefc <_dtoa_r+0x30c>
 800cdf2:	e8df f003 	tbb	[pc, r3]
 800cdf6:	3b2e      	.short	0x3b2e
 800cdf8:	5839      	.short	0x5839
 800cdfa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cdfe:	441d      	add	r5, r3
 800ce00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ce04:	2b20      	cmp	r3, #32
 800ce06:	bfc1      	itttt	gt
 800ce08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ce0c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ce10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ce14:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ce18:	bfd6      	itet	le
 800ce1a:	f1c3 0320 	rsble	r3, r3, #32
 800ce1e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ce22:	fa06 f003 	lslle.w	r0, r6, r3
 800ce26:	f7f3 fb7d 	bl	8000524 <__aeabi_ui2d>
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ce30:	3d01      	subs	r5, #1
 800ce32:	920e      	str	r2, [sp, #56]	; 0x38
 800ce34:	e76f      	b.n	800cd16 <_dtoa_r+0x126>
 800ce36:	2301      	movs	r3, #1
 800ce38:	e7b3      	b.n	800cda2 <_dtoa_r+0x1b2>
 800ce3a:	900c      	str	r0, [sp, #48]	; 0x30
 800ce3c:	e7b2      	b.n	800cda4 <_dtoa_r+0x1b4>
 800ce3e:	9b05      	ldr	r3, [sp, #20]
 800ce40:	eba3 030b 	sub.w	r3, r3, fp
 800ce44:	9305      	str	r3, [sp, #20]
 800ce46:	f1cb 0300 	rsb	r3, fp, #0
 800ce4a:	9308      	str	r3, [sp, #32]
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce50:	e7bf      	b.n	800cdd2 <_dtoa_r+0x1e2>
 800ce52:	2300      	movs	r3, #0
 800ce54:	9309      	str	r3, [sp, #36]	; 0x24
 800ce56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	dc52      	bgt.n	800cf02 <_dtoa_r+0x312>
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	9301      	str	r3, [sp, #4]
 800ce60:	9304      	str	r3, [sp, #16]
 800ce62:	461a      	mov	r2, r3
 800ce64:	920a      	str	r2, [sp, #40]	; 0x28
 800ce66:	e00b      	b.n	800ce80 <_dtoa_r+0x290>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e7f3      	b.n	800ce54 <_dtoa_r+0x264>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce72:	445b      	add	r3, fp
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	3301      	adds	r3, #1
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	9304      	str	r3, [sp, #16]
 800ce7c:	bfb8      	it	lt
 800ce7e:	2301      	movlt	r3, #1
 800ce80:	69e0      	ldr	r0, [r4, #28]
 800ce82:	2100      	movs	r1, #0
 800ce84:	2204      	movs	r2, #4
 800ce86:	f102 0614 	add.w	r6, r2, #20
 800ce8a:	429e      	cmp	r6, r3
 800ce8c:	d93d      	bls.n	800cf0a <_dtoa_r+0x31a>
 800ce8e:	6041      	str	r1, [r0, #4]
 800ce90:	4620      	mov	r0, r4
 800ce92:	f000 fd9f 	bl	800d9d4 <_Balloc>
 800ce96:	9000      	str	r0, [sp, #0]
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d139      	bne.n	800cf10 <_dtoa_r+0x320>
 800ce9c:	4b16      	ldr	r3, [pc, #88]	; (800cef8 <_dtoa_r+0x308>)
 800ce9e:	4602      	mov	r2, r0
 800cea0:	f240 11af 	movw	r1, #431	; 0x1af
 800cea4:	e6bd      	b.n	800cc22 <_dtoa_r+0x32>
 800cea6:	2301      	movs	r3, #1
 800cea8:	e7e1      	b.n	800ce6e <_dtoa_r+0x27e>
 800ceaa:	2501      	movs	r5, #1
 800ceac:	2300      	movs	r3, #0
 800ceae:	9307      	str	r3, [sp, #28]
 800ceb0:	9509      	str	r5, [sp, #36]	; 0x24
 800ceb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb6:	9301      	str	r3, [sp, #4]
 800ceb8:	9304      	str	r3, [sp, #16]
 800ceba:	2200      	movs	r2, #0
 800cebc:	2312      	movs	r3, #18
 800cebe:	e7d1      	b.n	800ce64 <_dtoa_r+0x274>
 800cec0:	636f4361 	.word	0x636f4361
 800cec4:	3fd287a7 	.word	0x3fd287a7
 800cec8:	8b60c8b3 	.word	0x8b60c8b3
 800cecc:	3fc68a28 	.word	0x3fc68a28
 800ced0:	509f79fb 	.word	0x509f79fb
 800ced4:	3fd34413 	.word	0x3fd34413
 800ced8:	08010761 	.word	0x08010761
 800cedc:	08010778 	.word	0x08010778
 800cee0:	7ff00000 	.word	0x7ff00000
 800cee4:	0801075d 	.word	0x0801075d
 800cee8:	08010754 	.word	0x08010754
 800ceec:	08010731 	.word	0x08010731
 800cef0:	3ff80000 	.word	0x3ff80000
 800cef4:	08010868 	.word	0x08010868
 800cef8:	080107d0 	.word	0x080107d0
 800cefc:	2301      	movs	r3, #1
 800cefe:	9309      	str	r3, [sp, #36]	; 0x24
 800cf00:	e7d7      	b.n	800ceb2 <_dtoa_r+0x2c2>
 800cf02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	9304      	str	r3, [sp, #16]
 800cf08:	e7ba      	b.n	800ce80 <_dtoa_r+0x290>
 800cf0a:	3101      	adds	r1, #1
 800cf0c:	0052      	lsls	r2, r2, #1
 800cf0e:	e7ba      	b.n	800ce86 <_dtoa_r+0x296>
 800cf10:	69e3      	ldr	r3, [r4, #28]
 800cf12:	9a00      	ldr	r2, [sp, #0]
 800cf14:	601a      	str	r2, [r3, #0]
 800cf16:	9b04      	ldr	r3, [sp, #16]
 800cf18:	2b0e      	cmp	r3, #14
 800cf1a:	f200 80a8 	bhi.w	800d06e <_dtoa_r+0x47e>
 800cf1e:	2d00      	cmp	r5, #0
 800cf20:	f000 80a5 	beq.w	800d06e <_dtoa_r+0x47e>
 800cf24:	f1bb 0f00 	cmp.w	fp, #0
 800cf28:	dd38      	ble.n	800cf9c <_dtoa_r+0x3ac>
 800cf2a:	4bc0      	ldr	r3, [pc, #768]	; (800d22c <_dtoa_r+0x63c>)
 800cf2c:	f00b 020f 	and.w	r2, fp, #15
 800cf30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cf38:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cf3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cf40:	d019      	beq.n	800cf76 <_dtoa_r+0x386>
 800cf42:	4bbb      	ldr	r3, [pc, #748]	; (800d230 <_dtoa_r+0x640>)
 800cf44:	ec51 0b18 	vmov	r0, r1, d8
 800cf48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf4c:	f7f3 fc8e 	bl	800086c <__aeabi_ddiv>
 800cf50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf54:	f008 080f 	and.w	r8, r8, #15
 800cf58:	2503      	movs	r5, #3
 800cf5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d230 <_dtoa_r+0x640>
 800cf5e:	f1b8 0f00 	cmp.w	r8, #0
 800cf62:	d10a      	bne.n	800cf7a <_dtoa_r+0x38a>
 800cf64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf68:	4632      	mov	r2, r6
 800cf6a:	463b      	mov	r3, r7
 800cf6c:	f7f3 fc7e 	bl	800086c <__aeabi_ddiv>
 800cf70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf74:	e02b      	b.n	800cfce <_dtoa_r+0x3de>
 800cf76:	2502      	movs	r5, #2
 800cf78:	e7ef      	b.n	800cf5a <_dtoa_r+0x36a>
 800cf7a:	f018 0f01 	tst.w	r8, #1
 800cf7e:	d008      	beq.n	800cf92 <_dtoa_r+0x3a2>
 800cf80:	4630      	mov	r0, r6
 800cf82:	4639      	mov	r1, r7
 800cf84:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cf88:	f7f3 fb46 	bl	8000618 <__aeabi_dmul>
 800cf8c:	3501      	adds	r5, #1
 800cf8e:	4606      	mov	r6, r0
 800cf90:	460f      	mov	r7, r1
 800cf92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cf96:	f109 0908 	add.w	r9, r9, #8
 800cf9a:	e7e0      	b.n	800cf5e <_dtoa_r+0x36e>
 800cf9c:	f000 809f 	beq.w	800d0de <_dtoa_r+0x4ee>
 800cfa0:	f1cb 0600 	rsb	r6, fp, #0
 800cfa4:	4ba1      	ldr	r3, [pc, #644]	; (800d22c <_dtoa_r+0x63c>)
 800cfa6:	4fa2      	ldr	r7, [pc, #648]	; (800d230 <_dtoa_r+0x640>)
 800cfa8:	f006 020f 	and.w	r2, r6, #15
 800cfac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb4:	ec51 0b18 	vmov	r0, r1, d8
 800cfb8:	f7f3 fb2e 	bl	8000618 <__aeabi_dmul>
 800cfbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfc0:	1136      	asrs	r6, r6, #4
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	2502      	movs	r5, #2
 800cfc6:	2e00      	cmp	r6, #0
 800cfc8:	d17e      	bne.n	800d0c8 <_dtoa_r+0x4d8>
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d1d0      	bne.n	800cf70 <_dtoa_r+0x380>
 800cfce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f000 8084 	beq.w	800d0e2 <_dtoa_r+0x4f2>
 800cfda:	4b96      	ldr	r3, [pc, #600]	; (800d234 <_dtoa_r+0x644>)
 800cfdc:	2200      	movs	r2, #0
 800cfde:	4640      	mov	r0, r8
 800cfe0:	4649      	mov	r1, r9
 800cfe2:	f7f3 fd8b 	bl	8000afc <__aeabi_dcmplt>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d07b      	beq.n	800d0e2 <_dtoa_r+0x4f2>
 800cfea:	9b04      	ldr	r3, [sp, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d078      	beq.n	800d0e2 <_dtoa_r+0x4f2>
 800cff0:	9b01      	ldr	r3, [sp, #4]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	dd39      	ble.n	800d06a <_dtoa_r+0x47a>
 800cff6:	4b90      	ldr	r3, [pc, #576]	; (800d238 <_dtoa_r+0x648>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	4640      	mov	r0, r8
 800cffc:	4649      	mov	r1, r9
 800cffe:	f7f3 fb0b 	bl	8000618 <__aeabi_dmul>
 800d002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d006:	9e01      	ldr	r6, [sp, #4]
 800d008:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d00c:	3501      	adds	r5, #1
 800d00e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d012:	4628      	mov	r0, r5
 800d014:	f7f3 fa96 	bl	8000544 <__aeabi_i2d>
 800d018:	4642      	mov	r2, r8
 800d01a:	464b      	mov	r3, r9
 800d01c:	f7f3 fafc 	bl	8000618 <__aeabi_dmul>
 800d020:	4b86      	ldr	r3, [pc, #536]	; (800d23c <_dtoa_r+0x64c>)
 800d022:	2200      	movs	r2, #0
 800d024:	f7f3 f942 	bl	80002ac <__adddf3>
 800d028:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d030:	9303      	str	r3, [sp, #12]
 800d032:	2e00      	cmp	r6, #0
 800d034:	d158      	bne.n	800d0e8 <_dtoa_r+0x4f8>
 800d036:	4b82      	ldr	r3, [pc, #520]	; (800d240 <_dtoa_r+0x650>)
 800d038:	2200      	movs	r2, #0
 800d03a:	4640      	mov	r0, r8
 800d03c:	4649      	mov	r1, r9
 800d03e:	f7f3 f933 	bl	80002a8 <__aeabi_dsub>
 800d042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d046:	4680      	mov	r8, r0
 800d048:	4689      	mov	r9, r1
 800d04a:	f7f3 fd75 	bl	8000b38 <__aeabi_dcmpgt>
 800d04e:	2800      	cmp	r0, #0
 800d050:	f040 8296 	bne.w	800d580 <_dtoa_r+0x990>
 800d054:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d058:	4640      	mov	r0, r8
 800d05a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d05e:	4649      	mov	r1, r9
 800d060:	f7f3 fd4c 	bl	8000afc <__aeabi_dcmplt>
 800d064:	2800      	cmp	r0, #0
 800d066:	f040 8289 	bne.w	800d57c <_dtoa_r+0x98c>
 800d06a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d06e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d070:	2b00      	cmp	r3, #0
 800d072:	f2c0 814e 	blt.w	800d312 <_dtoa_r+0x722>
 800d076:	f1bb 0f0e 	cmp.w	fp, #14
 800d07a:	f300 814a 	bgt.w	800d312 <_dtoa_r+0x722>
 800d07e:	4b6b      	ldr	r3, [pc, #428]	; (800d22c <_dtoa_r+0x63c>)
 800d080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d084:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f280 80dc 	bge.w	800d248 <_dtoa_r+0x658>
 800d090:	9b04      	ldr	r3, [sp, #16]
 800d092:	2b00      	cmp	r3, #0
 800d094:	f300 80d8 	bgt.w	800d248 <_dtoa_r+0x658>
 800d098:	f040 826f 	bne.w	800d57a <_dtoa_r+0x98a>
 800d09c:	4b68      	ldr	r3, [pc, #416]	; (800d240 <_dtoa_r+0x650>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	4640      	mov	r0, r8
 800d0a2:	4649      	mov	r1, r9
 800d0a4:	f7f3 fab8 	bl	8000618 <__aeabi_dmul>
 800d0a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0ac:	f7f3 fd3a 	bl	8000b24 <__aeabi_dcmpge>
 800d0b0:	9e04      	ldr	r6, [sp, #16]
 800d0b2:	4637      	mov	r7, r6
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	f040 8245 	bne.w	800d544 <_dtoa_r+0x954>
 800d0ba:	9d00      	ldr	r5, [sp, #0]
 800d0bc:	2331      	movs	r3, #49	; 0x31
 800d0be:	f805 3b01 	strb.w	r3, [r5], #1
 800d0c2:	f10b 0b01 	add.w	fp, fp, #1
 800d0c6:	e241      	b.n	800d54c <_dtoa_r+0x95c>
 800d0c8:	07f2      	lsls	r2, r6, #31
 800d0ca:	d505      	bpl.n	800d0d8 <_dtoa_r+0x4e8>
 800d0cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0d0:	f7f3 faa2 	bl	8000618 <__aeabi_dmul>
 800d0d4:	3501      	adds	r5, #1
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	1076      	asrs	r6, r6, #1
 800d0da:	3708      	adds	r7, #8
 800d0dc:	e773      	b.n	800cfc6 <_dtoa_r+0x3d6>
 800d0de:	2502      	movs	r5, #2
 800d0e0:	e775      	b.n	800cfce <_dtoa_r+0x3de>
 800d0e2:	9e04      	ldr	r6, [sp, #16]
 800d0e4:	465f      	mov	r7, fp
 800d0e6:	e792      	b.n	800d00e <_dtoa_r+0x41e>
 800d0e8:	9900      	ldr	r1, [sp, #0]
 800d0ea:	4b50      	ldr	r3, [pc, #320]	; (800d22c <_dtoa_r+0x63c>)
 800d0ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0f0:	4431      	add	r1, r6
 800d0f2:	9102      	str	r1, [sp, #8]
 800d0f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0f6:	eeb0 9a47 	vmov.f32	s18, s14
 800d0fa:	eef0 9a67 	vmov.f32	s19, s15
 800d0fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d102:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d106:	2900      	cmp	r1, #0
 800d108:	d044      	beq.n	800d194 <_dtoa_r+0x5a4>
 800d10a:	494e      	ldr	r1, [pc, #312]	; (800d244 <_dtoa_r+0x654>)
 800d10c:	2000      	movs	r0, #0
 800d10e:	f7f3 fbad 	bl	800086c <__aeabi_ddiv>
 800d112:	ec53 2b19 	vmov	r2, r3, d9
 800d116:	f7f3 f8c7 	bl	80002a8 <__aeabi_dsub>
 800d11a:	9d00      	ldr	r5, [sp, #0]
 800d11c:	ec41 0b19 	vmov	d9, r0, r1
 800d120:	4649      	mov	r1, r9
 800d122:	4640      	mov	r0, r8
 800d124:	f7f3 fd28 	bl	8000b78 <__aeabi_d2iz>
 800d128:	4606      	mov	r6, r0
 800d12a:	f7f3 fa0b 	bl	8000544 <__aeabi_i2d>
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	4640      	mov	r0, r8
 800d134:	4649      	mov	r1, r9
 800d136:	f7f3 f8b7 	bl	80002a8 <__aeabi_dsub>
 800d13a:	3630      	adds	r6, #48	; 0x30
 800d13c:	f805 6b01 	strb.w	r6, [r5], #1
 800d140:	ec53 2b19 	vmov	r2, r3, d9
 800d144:	4680      	mov	r8, r0
 800d146:	4689      	mov	r9, r1
 800d148:	f7f3 fcd8 	bl	8000afc <__aeabi_dcmplt>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d164      	bne.n	800d21a <_dtoa_r+0x62a>
 800d150:	4642      	mov	r2, r8
 800d152:	464b      	mov	r3, r9
 800d154:	4937      	ldr	r1, [pc, #220]	; (800d234 <_dtoa_r+0x644>)
 800d156:	2000      	movs	r0, #0
 800d158:	f7f3 f8a6 	bl	80002a8 <__aeabi_dsub>
 800d15c:	ec53 2b19 	vmov	r2, r3, d9
 800d160:	f7f3 fccc 	bl	8000afc <__aeabi_dcmplt>
 800d164:	2800      	cmp	r0, #0
 800d166:	f040 80b6 	bne.w	800d2d6 <_dtoa_r+0x6e6>
 800d16a:	9b02      	ldr	r3, [sp, #8]
 800d16c:	429d      	cmp	r5, r3
 800d16e:	f43f af7c 	beq.w	800d06a <_dtoa_r+0x47a>
 800d172:	4b31      	ldr	r3, [pc, #196]	; (800d238 <_dtoa_r+0x648>)
 800d174:	ec51 0b19 	vmov	r0, r1, d9
 800d178:	2200      	movs	r2, #0
 800d17a:	f7f3 fa4d 	bl	8000618 <__aeabi_dmul>
 800d17e:	4b2e      	ldr	r3, [pc, #184]	; (800d238 <_dtoa_r+0x648>)
 800d180:	ec41 0b19 	vmov	d9, r0, r1
 800d184:	2200      	movs	r2, #0
 800d186:	4640      	mov	r0, r8
 800d188:	4649      	mov	r1, r9
 800d18a:	f7f3 fa45 	bl	8000618 <__aeabi_dmul>
 800d18e:	4680      	mov	r8, r0
 800d190:	4689      	mov	r9, r1
 800d192:	e7c5      	b.n	800d120 <_dtoa_r+0x530>
 800d194:	ec51 0b17 	vmov	r0, r1, d7
 800d198:	f7f3 fa3e 	bl	8000618 <__aeabi_dmul>
 800d19c:	9b02      	ldr	r3, [sp, #8]
 800d19e:	9d00      	ldr	r5, [sp, #0]
 800d1a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1a2:	ec41 0b19 	vmov	d9, r0, r1
 800d1a6:	4649      	mov	r1, r9
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	f7f3 fce5 	bl	8000b78 <__aeabi_d2iz>
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	f7f3 f9c8 	bl	8000544 <__aeabi_i2d>
 800d1b4:	3630      	adds	r6, #48	; 0x30
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	4640      	mov	r0, r8
 800d1bc:	4649      	mov	r1, r9
 800d1be:	f7f3 f873 	bl	80002a8 <__aeabi_dsub>
 800d1c2:	f805 6b01 	strb.w	r6, [r5], #1
 800d1c6:	9b02      	ldr	r3, [sp, #8]
 800d1c8:	429d      	cmp	r5, r3
 800d1ca:	4680      	mov	r8, r0
 800d1cc:	4689      	mov	r9, r1
 800d1ce:	f04f 0200 	mov.w	r2, #0
 800d1d2:	d124      	bne.n	800d21e <_dtoa_r+0x62e>
 800d1d4:	4b1b      	ldr	r3, [pc, #108]	; (800d244 <_dtoa_r+0x654>)
 800d1d6:	ec51 0b19 	vmov	r0, r1, d9
 800d1da:	f7f3 f867 	bl	80002ac <__adddf3>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	4640      	mov	r0, r8
 800d1e4:	4649      	mov	r1, r9
 800d1e6:	f7f3 fca7 	bl	8000b38 <__aeabi_dcmpgt>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	d173      	bne.n	800d2d6 <_dtoa_r+0x6e6>
 800d1ee:	ec53 2b19 	vmov	r2, r3, d9
 800d1f2:	4914      	ldr	r1, [pc, #80]	; (800d244 <_dtoa_r+0x654>)
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	f7f3 f857 	bl	80002a8 <__aeabi_dsub>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	4640      	mov	r0, r8
 800d200:	4649      	mov	r1, r9
 800d202:	f7f3 fc7b 	bl	8000afc <__aeabi_dcmplt>
 800d206:	2800      	cmp	r0, #0
 800d208:	f43f af2f 	beq.w	800d06a <_dtoa_r+0x47a>
 800d20c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d20e:	1e6b      	subs	r3, r5, #1
 800d210:	930f      	str	r3, [sp, #60]	; 0x3c
 800d212:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d216:	2b30      	cmp	r3, #48	; 0x30
 800d218:	d0f8      	beq.n	800d20c <_dtoa_r+0x61c>
 800d21a:	46bb      	mov	fp, r7
 800d21c:	e04a      	b.n	800d2b4 <_dtoa_r+0x6c4>
 800d21e:	4b06      	ldr	r3, [pc, #24]	; (800d238 <_dtoa_r+0x648>)
 800d220:	f7f3 f9fa 	bl	8000618 <__aeabi_dmul>
 800d224:	4680      	mov	r8, r0
 800d226:	4689      	mov	r9, r1
 800d228:	e7bd      	b.n	800d1a6 <_dtoa_r+0x5b6>
 800d22a:	bf00      	nop
 800d22c:	08010868 	.word	0x08010868
 800d230:	08010840 	.word	0x08010840
 800d234:	3ff00000 	.word	0x3ff00000
 800d238:	40240000 	.word	0x40240000
 800d23c:	401c0000 	.word	0x401c0000
 800d240:	40140000 	.word	0x40140000
 800d244:	3fe00000 	.word	0x3fe00000
 800d248:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d24c:	9d00      	ldr	r5, [sp, #0]
 800d24e:	4642      	mov	r2, r8
 800d250:	464b      	mov	r3, r9
 800d252:	4630      	mov	r0, r6
 800d254:	4639      	mov	r1, r7
 800d256:	f7f3 fb09 	bl	800086c <__aeabi_ddiv>
 800d25a:	f7f3 fc8d 	bl	8000b78 <__aeabi_d2iz>
 800d25e:	9001      	str	r0, [sp, #4]
 800d260:	f7f3 f970 	bl	8000544 <__aeabi_i2d>
 800d264:	4642      	mov	r2, r8
 800d266:	464b      	mov	r3, r9
 800d268:	f7f3 f9d6 	bl	8000618 <__aeabi_dmul>
 800d26c:	4602      	mov	r2, r0
 800d26e:	460b      	mov	r3, r1
 800d270:	4630      	mov	r0, r6
 800d272:	4639      	mov	r1, r7
 800d274:	f7f3 f818 	bl	80002a8 <__aeabi_dsub>
 800d278:	9e01      	ldr	r6, [sp, #4]
 800d27a:	9f04      	ldr	r7, [sp, #16]
 800d27c:	3630      	adds	r6, #48	; 0x30
 800d27e:	f805 6b01 	strb.w	r6, [r5], #1
 800d282:	9e00      	ldr	r6, [sp, #0]
 800d284:	1bae      	subs	r6, r5, r6
 800d286:	42b7      	cmp	r7, r6
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	d134      	bne.n	800d2f8 <_dtoa_r+0x708>
 800d28e:	f7f3 f80d 	bl	80002ac <__adddf3>
 800d292:	4642      	mov	r2, r8
 800d294:	464b      	mov	r3, r9
 800d296:	4606      	mov	r6, r0
 800d298:	460f      	mov	r7, r1
 800d29a:	f7f3 fc4d 	bl	8000b38 <__aeabi_dcmpgt>
 800d29e:	b9c8      	cbnz	r0, 800d2d4 <_dtoa_r+0x6e4>
 800d2a0:	4642      	mov	r2, r8
 800d2a2:	464b      	mov	r3, r9
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	4639      	mov	r1, r7
 800d2a8:	f7f3 fc1e 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2ac:	b110      	cbz	r0, 800d2b4 <_dtoa_r+0x6c4>
 800d2ae:	9b01      	ldr	r3, [sp, #4]
 800d2b0:	07db      	lsls	r3, r3, #31
 800d2b2:	d40f      	bmi.n	800d2d4 <_dtoa_r+0x6e4>
 800d2b4:	4651      	mov	r1, sl
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f000 fbcc 	bl	800da54 <_Bfree>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2c0:	702b      	strb	r3, [r5, #0]
 800d2c2:	f10b 0301 	add.w	r3, fp, #1
 800d2c6:	6013      	str	r3, [r2, #0]
 800d2c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f43f ace2 	beq.w	800cc94 <_dtoa_r+0xa4>
 800d2d0:	601d      	str	r5, [r3, #0]
 800d2d2:	e4df      	b.n	800cc94 <_dtoa_r+0xa4>
 800d2d4:	465f      	mov	r7, fp
 800d2d6:	462b      	mov	r3, r5
 800d2d8:	461d      	mov	r5, r3
 800d2da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2de:	2a39      	cmp	r2, #57	; 0x39
 800d2e0:	d106      	bne.n	800d2f0 <_dtoa_r+0x700>
 800d2e2:	9a00      	ldr	r2, [sp, #0]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d1f7      	bne.n	800d2d8 <_dtoa_r+0x6e8>
 800d2e8:	9900      	ldr	r1, [sp, #0]
 800d2ea:	2230      	movs	r2, #48	; 0x30
 800d2ec:	3701      	adds	r7, #1
 800d2ee:	700a      	strb	r2, [r1, #0]
 800d2f0:	781a      	ldrb	r2, [r3, #0]
 800d2f2:	3201      	adds	r2, #1
 800d2f4:	701a      	strb	r2, [r3, #0]
 800d2f6:	e790      	b.n	800d21a <_dtoa_r+0x62a>
 800d2f8:	4ba3      	ldr	r3, [pc, #652]	; (800d588 <_dtoa_r+0x998>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f7f3 f98c 	bl	8000618 <__aeabi_dmul>
 800d300:	2200      	movs	r2, #0
 800d302:	2300      	movs	r3, #0
 800d304:	4606      	mov	r6, r0
 800d306:	460f      	mov	r7, r1
 800d308:	f7f3 fbee 	bl	8000ae8 <__aeabi_dcmpeq>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d09e      	beq.n	800d24e <_dtoa_r+0x65e>
 800d310:	e7d0      	b.n	800d2b4 <_dtoa_r+0x6c4>
 800d312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d314:	2a00      	cmp	r2, #0
 800d316:	f000 80ca 	beq.w	800d4ae <_dtoa_r+0x8be>
 800d31a:	9a07      	ldr	r2, [sp, #28]
 800d31c:	2a01      	cmp	r2, #1
 800d31e:	f300 80ad 	bgt.w	800d47c <_dtoa_r+0x88c>
 800d322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d324:	2a00      	cmp	r2, #0
 800d326:	f000 80a5 	beq.w	800d474 <_dtoa_r+0x884>
 800d32a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d32e:	9e08      	ldr	r6, [sp, #32]
 800d330:	9d05      	ldr	r5, [sp, #20]
 800d332:	9a05      	ldr	r2, [sp, #20]
 800d334:	441a      	add	r2, r3
 800d336:	9205      	str	r2, [sp, #20]
 800d338:	9a06      	ldr	r2, [sp, #24]
 800d33a:	2101      	movs	r1, #1
 800d33c:	441a      	add	r2, r3
 800d33e:	4620      	mov	r0, r4
 800d340:	9206      	str	r2, [sp, #24]
 800d342:	f000 fc3d 	bl	800dbc0 <__i2b>
 800d346:	4607      	mov	r7, r0
 800d348:	b165      	cbz	r5, 800d364 <_dtoa_r+0x774>
 800d34a:	9b06      	ldr	r3, [sp, #24]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	dd09      	ble.n	800d364 <_dtoa_r+0x774>
 800d350:	42ab      	cmp	r3, r5
 800d352:	9a05      	ldr	r2, [sp, #20]
 800d354:	bfa8      	it	ge
 800d356:	462b      	movge	r3, r5
 800d358:	1ad2      	subs	r2, r2, r3
 800d35a:	9205      	str	r2, [sp, #20]
 800d35c:	9a06      	ldr	r2, [sp, #24]
 800d35e:	1aed      	subs	r5, r5, r3
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	9306      	str	r3, [sp, #24]
 800d364:	9b08      	ldr	r3, [sp, #32]
 800d366:	b1f3      	cbz	r3, 800d3a6 <_dtoa_r+0x7b6>
 800d368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f000 80a3 	beq.w	800d4b6 <_dtoa_r+0x8c6>
 800d370:	2e00      	cmp	r6, #0
 800d372:	dd10      	ble.n	800d396 <_dtoa_r+0x7a6>
 800d374:	4639      	mov	r1, r7
 800d376:	4632      	mov	r2, r6
 800d378:	4620      	mov	r0, r4
 800d37a:	f000 fce1 	bl	800dd40 <__pow5mult>
 800d37e:	4652      	mov	r2, sl
 800d380:	4601      	mov	r1, r0
 800d382:	4607      	mov	r7, r0
 800d384:	4620      	mov	r0, r4
 800d386:	f000 fc31 	bl	800dbec <__multiply>
 800d38a:	4651      	mov	r1, sl
 800d38c:	4680      	mov	r8, r0
 800d38e:	4620      	mov	r0, r4
 800d390:	f000 fb60 	bl	800da54 <_Bfree>
 800d394:	46c2      	mov	sl, r8
 800d396:	9b08      	ldr	r3, [sp, #32]
 800d398:	1b9a      	subs	r2, r3, r6
 800d39a:	d004      	beq.n	800d3a6 <_dtoa_r+0x7b6>
 800d39c:	4651      	mov	r1, sl
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f000 fcce 	bl	800dd40 <__pow5mult>
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	2101      	movs	r1, #1
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f000 fc09 	bl	800dbc0 <__i2b>
 800d3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	4606      	mov	r6, r0
 800d3b4:	f340 8081 	ble.w	800d4ba <_dtoa_r+0x8ca>
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	4601      	mov	r1, r0
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f000 fcbf 	bl	800dd40 <__pow5mult>
 800d3c2:	9b07      	ldr	r3, [sp, #28]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	4606      	mov	r6, r0
 800d3c8:	dd7a      	ble.n	800d4c0 <_dtoa_r+0x8d0>
 800d3ca:	f04f 0800 	mov.w	r8, #0
 800d3ce:	6933      	ldr	r3, [r6, #16]
 800d3d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d3d4:	6918      	ldr	r0, [r3, #16]
 800d3d6:	f000 fba5 	bl	800db24 <__hi0bits>
 800d3da:	f1c0 0020 	rsb	r0, r0, #32
 800d3de:	9b06      	ldr	r3, [sp, #24]
 800d3e0:	4418      	add	r0, r3
 800d3e2:	f010 001f 	ands.w	r0, r0, #31
 800d3e6:	f000 8094 	beq.w	800d512 <_dtoa_r+0x922>
 800d3ea:	f1c0 0320 	rsb	r3, r0, #32
 800d3ee:	2b04      	cmp	r3, #4
 800d3f0:	f340 8085 	ble.w	800d4fe <_dtoa_r+0x90e>
 800d3f4:	9b05      	ldr	r3, [sp, #20]
 800d3f6:	f1c0 001c 	rsb	r0, r0, #28
 800d3fa:	4403      	add	r3, r0
 800d3fc:	9305      	str	r3, [sp, #20]
 800d3fe:	9b06      	ldr	r3, [sp, #24]
 800d400:	4403      	add	r3, r0
 800d402:	4405      	add	r5, r0
 800d404:	9306      	str	r3, [sp, #24]
 800d406:	9b05      	ldr	r3, [sp, #20]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	dd05      	ble.n	800d418 <_dtoa_r+0x828>
 800d40c:	4651      	mov	r1, sl
 800d40e:	461a      	mov	r2, r3
 800d410:	4620      	mov	r0, r4
 800d412:	f000 fcef 	bl	800ddf4 <__lshift>
 800d416:	4682      	mov	sl, r0
 800d418:	9b06      	ldr	r3, [sp, #24]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	dd05      	ble.n	800d42a <_dtoa_r+0x83a>
 800d41e:	4631      	mov	r1, r6
 800d420:	461a      	mov	r2, r3
 800d422:	4620      	mov	r0, r4
 800d424:	f000 fce6 	bl	800ddf4 <__lshift>
 800d428:	4606      	mov	r6, r0
 800d42a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d072      	beq.n	800d516 <_dtoa_r+0x926>
 800d430:	4631      	mov	r1, r6
 800d432:	4650      	mov	r0, sl
 800d434:	f000 fd4a 	bl	800decc <__mcmp>
 800d438:	2800      	cmp	r0, #0
 800d43a:	da6c      	bge.n	800d516 <_dtoa_r+0x926>
 800d43c:	2300      	movs	r3, #0
 800d43e:	4651      	mov	r1, sl
 800d440:	220a      	movs	r2, #10
 800d442:	4620      	mov	r0, r4
 800d444:	f000 fb28 	bl	800da98 <__multadd>
 800d448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d44a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d44e:	4682      	mov	sl, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	f000 81b0 	beq.w	800d7b6 <_dtoa_r+0xbc6>
 800d456:	2300      	movs	r3, #0
 800d458:	4639      	mov	r1, r7
 800d45a:	220a      	movs	r2, #10
 800d45c:	4620      	mov	r0, r4
 800d45e:	f000 fb1b 	bl	800da98 <__multadd>
 800d462:	9b01      	ldr	r3, [sp, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	4607      	mov	r7, r0
 800d468:	f300 8096 	bgt.w	800d598 <_dtoa_r+0x9a8>
 800d46c:	9b07      	ldr	r3, [sp, #28]
 800d46e:	2b02      	cmp	r3, #2
 800d470:	dc59      	bgt.n	800d526 <_dtoa_r+0x936>
 800d472:	e091      	b.n	800d598 <_dtoa_r+0x9a8>
 800d474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d476:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d47a:	e758      	b.n	800d32e <_dtoa_r+0x73e>
 800d47c:	9b04      	ldr	r3, [sp, #16]
 800d47e:	1e5e      	subs	r6, r3, #1
 800d480:	9b08      	ldr	r3, [sp, #32]
 800d482:	42b3      	cmp	r3, r6
 800d484:	bfbf      	itttt	lt
 800d486:	9b08      	ldrlt	r3, [sp, #32]
 800d488:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d48a:	9608      	strlt	r6, [sp, #32]
 800d48c:	1af3      	sublt	r3, r6, r3
 800d48e:	bfb4      	ite	lt
 800d490:	18d2      	addlt	r2, r2, r3
 800d492:	1b9e      	subge	r6, r3, r6
 800d494:	9b04      	ldr	r3, [sp, #16]
 800d496:	bfbc      	itt	lt
 800d498:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d49a:	2600      	movlt	r6, #0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	bfb7      	itett	lt
 800d4a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d4a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d4a8:	1a9d      	sublt	r5, r3, r2
 800d4aa:	2300      	movlt	r3, #0
 800d4ac:	e741      	b.n	800d332 <_dtoa_r+0x742>
 800d4ae:	9e08      	ldr	r6, [sp, #32]
 800d4b0:	9d05      	ldr	r5, [sp, #20]
 800d4b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d4b4:	e748      	b.n	800d348 <_dtoa_r+0x758>
 800d4b6:	9a08      	ldr	r2, [sp, #32]
 800d4b8:	e770      	b.n	800d39c <_dtoa_r+0x7ac>
 800d4ba:	9b07      	ldr	r3, [sp, #28]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	dc19      	bgt.n	800d4f4 <_dtoa_r+0x904>
 800d4c0:	9b02      	ldr	r3, [sp, #8]
 800d4c2:	b9bb      	cbnz	r3, 800d4f4 <_dtoa_r+0x904>
 800d4c4:	9b03      	ldr	r3, [sp, #12]
 800d4c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4ca:	b99b      	cbnz	r3, 800d4f4 <_dtoa_r+0x904>
 800d4cc:	9b03      	ldr	r3, [sp, #12]
 800d4ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4d2:	0d1b      	lsrs	r3, r3, #20
 800d4d4:	051b      	lsls	r3, r3, #20
 800d4d6:	b183      	cbz	r3, 800d4fa <_dtoa_r+0x90a>
 800d4d8:	9b05      	ldr	r3, [sp, #20]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	9305      	str	r3, [sp, #20]
 800d4de:	9b06      	ldr	r3, [sp, #24]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	9306      	str	r3, [sp, #24]
 800d4e4:	f04f 0801 	mov.w	r8, #1
 800d4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f47f af6f 	bne.w	800d3ce <_dtoa_r+0x7de>
 800d4f0:	2001      	movs	r0, #1
 800d4f2:	e774      	b.n	800d3de <_dtoa_r+0x7ee>
 800d4f4:	f04f 0800 	mov.w	r8, #0
 800d4f8:	e7f6      	b.n	800d4e8 <_dtoa_r+0x8f8>
 800d4fa:	4698      	mov	r8, r3
 800d4fc:	e7f4      	b.n	800d4e8 <_dtoa_r+0x8f8>
 800d4fe:	d082      	beq.n	800d406 <_dtoa_r+0x816>
 800d500:	9a05      	ldr	r2, [sp, #20]
 800d502:	331c      	adds	r3, #28
 800d504:	441a      	add	r2, r3
 800d506:	9205      	str	r2, [sp, #20]
 800d508:	9a06      	ldr	r2, [sp, #24]
 800d50a:	441a      	add	r2, r3
 800d50c:	441d      	add	r5, r3
 800d50e:	9206      	str	r2, [sp, #24]
 800d510:	e779      	b.n	800d406 <_dtoa_r+0x816>
 800d512:	4603      	mov	r3, r0
 800d514:	e7f4      	b.n	800d500 <_dtoa_r+0x910>
 800d516:	9b04      	ldr	r3, [sp, #16]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	dc37      	bgt.n	800d58c <_dtoa_r+0x99c>
 800d51c:	9b07      	ldr	r3, [sp, #28]
 800d51e:	2b02      	cmp	r3, #2
 800d520:	dd34      	ble.n	800d58c <_dtoa_r+0x99c>
 800d522:	9b04      	ldr	r3, [sp, #16]
 800d524:	9301      	str	r3, [sp, #4]
 800d526:	9b01      	ldr	r3, [sp, #4]
 800d528:	b963      	cbnz	r3, 800d544 <_dtoa_r+0x954>
 800d52a:	4631      	mov	r1, r6
 800d52c:	2205      	movs	r2, #5
 800d52e:	4620      	mov	r0, r4
 800d530:	f000 fab2 	bl	800da98 <__multadd>
 800d534:	4601      	mov	r1, r0
 800d536:	4606      	mov	r6, r0
 800d538:	4650      	mov	r0, sl
 800d53a:	f000 fcc7 	bl	800decc <__mcmp>
 800d53e:	2800      	cmp	r0, #0
 800d540:	f73f adbb 	bgt.w	800d0ba <_dtoa_r+0x4ca>
 800d544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d546:	9d00      	ldr	r5, [sp, #0]
 800d548:	ea6f 0b03 	mvn.w	fp, r3
 800d54c:	f04f 0800 	mov.w	r8, #0
 800d550:	4631      	mov	r1, r6
 800d552:	4620      	mov	r0, r4
 800d554:	f000 fa7e 	bl	800da54 <_Bfree>
 800d558:	2f00      	cmp	r7, #0
 800d55a:	f43f aeab 	beq.w	800d2b4 <_dtoa_r+0x6c4>
 800d55e:	f1b8 0f00 	cmp.w	r8, #0
 800d562:	d005      	beq.n	800d570 <_dtoa_r+0x980>
 800d564:	45b8      	cmp	r8, r7
 800d566:	d003      	beq.n	800d570 <_dtoa_r+0x980>
 800d568:	4641      	mov	r1, r8
 800d56a:	4620      	mov	r0, r4
 800d56c:	f000 fa72 	bl	800da54 <_Bfree>
 800d570:	4639      	mov	r1, r7
 800d572:	4620      	mov	r0, r4
 800d574:	f000 fa6e 	bl	800da54 <_Bfree>
 800d578:	e69c      	b.n	800d2b4 <_dtoa_r+0x6c4>
 800d57a:	2600      	movs	r6, #0
 800d57c:	4637      	mov	r7, r6
 800d57e:	e7e1      	b.n	800d544 <_dtoa_r+0x954>
 800d580:	46bb      	mov	fp, r7
 800d582:	4637      	mov	r7, r6
 800d584:	e599      	b.n	800d0ba <_dtoa_r+0x4ca>
 800d586:	bf00      	nop
 800d588:	40240000 	.word	0x40240000
 800d58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f000 80c8 	beq.w	800d724 <_dtoa_r+0xb34>
 800d594:	9b04      	ldr	r3, [sp, #16]
 800d596:	9301      	str	r3, [sp, #4]
 800d598:	2d00      	cmp	r5, #0
 800d59a:	dd05      	ble.n	800d5a8 <_dtoa_r+0x9b8>
 800d59c:	4639      	mov	r1, r7
 800d59e:	462a      	mov	r2, r5
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f000 fc27 	bl	800ddf4 <__lshift>
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	f1b8 0f00 	cmp.w	r8, #0
 800d5ac:	d05b      	beq.n	800d666 <_dtoa_r+0xa76>
 800d5ae:	6879      	ldr	r1, [r7, #4]
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f000 fa0f 	bl	800d9d4 <_Balloc>
 800d5b6:	4605      	mov	r5, r0
 800d5b8:	b928      	cbnz	r0, 800d5c6 <_dtoa_r+0x9d6>
 800d5ba:	4b83      	ldr	r3, [pc, #524]	; (800d7c8 <_dtoa_r+0xbd8>)
 800d5bc:	4602      	mov	r2, r0
 800d5be:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d5c2:	f7ff bb2e 	b.w	800cc22 <_dtoa_r+0x32>
 800d5c6:	693a      	ldr	r2, [r7, #16]
 800d5c8:	3202      	adds	r2, #2
 800d5ca:	0092      	lsls	r2, r2, #2
 800d5cc:	f107 010c 	add.w	r1, r7, #12
 800d5d0:	300c      	adds	r0, #12
 800d5d2:	f000 ffab 	bl	800e52c <memcpy>
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	4629      	mov	r1, r5
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f000 fc0a 	bl	800ddf4 <__lshift>
 800d5e0:	9b00      	ldr	r3, [sp, #0]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	9304      	str	r3, [sp, #16]
 800d5e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	9308      	str	r3, [sp, #32]
 800d5ee:	9b02      	ldr	r3, [sp, #8]
 800d5f0:	f003 0301 	and.w	r3, r3, #1
 800d5f4:	46b8      	mov	r8, r7
 800d5f6:	9306      	str	r3, [sp, #24]
 800d5f8:	4607      	mov	r7, r0
 800d5fa:	9b04      	ldr	r3, [sp, #16]
 800d5fc:	4631      	mov	r1, r6
 800d5fe:	3b01      	subs	r3, #1
 800d600:	4650      	mov	r0, sl
 800d602:	9301      	str	r3, [sp, #4]
 800d604:	f7ff fa6b 	bl	800cade <quorem>
 800d608:	4641      	mov	r1, r8
 800d60a:	9002      	str	r0, [sp, #8]
 800d60c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d610:	4650      	mov	r0, sl
 800d612:	f000 fc5b 	bl	800decc <__mcmp>
 800d616:	463a      	mov	r2, r7
 800d618:	9005      	str	r0, [sp, #20]
 800d61a:	4631      	mov	r1, r6
 800d61c:	4620      	mov	r0, r4
 800d61e:	f000 fc71 	bl	800df04 <__mdiff>
 800d622:	68c2      	ldr	r2, [r0, #12]
 800d624:	4605      	mov	r5, r0
 800d626:	bb02      	cbnz	r2, 800d66a <_dtoa_r+0xa7a>
 800d628:	4601      	mov	r1, r0
 800d62a:	4650      	mov	r0, sl
 800d62c:	f000 fc4e 	bl	800decc <__mcmp>
 800d630:	4602      	mov	r2, r0
 800d632:	4629      	mov	r1, r5
 800d634:	4620      	mov	r0, r4
 800d636:	9209      	str	r2, [sp, #36]	; 0x24
 800d638:	f000 fa0c 	bl	800da54 <_Bfree>
 800d63c:	9b07      	ldr	r3, [sp, #28]
 800d63e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d640:	9d04      	ldr	r5, [sp, #16]
 800d642:	ea43 0102 	orr.w	r1, r3, r2
 800d646:	9b06      	ldr	r3, [sp, #24]
 800d648:	4319      	orrs	r1, r3
 800d64a:	d110      	bne.n	800d66e <_dtoa_r+0xa7e>
 800d64c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d650:	d029      	beq.n	800d6a6 <_dtoa_r+0xab6>
 800d652:	9b05      	ldr	r3, [sp, #20]
 800d654:	2b00      	cmp	r3, #0
 800d656:	dd02      	ble.n	800d65e <_dtoa_r+0xa6e>
 800d658:	9b02      	ldr	r3, [sp, #8]
 800d65a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d65e:	9b01      	ldr	r3, [sp, #4]
 800d660:	f883 9000 	strb.w	r9, [r3]
 800d664:	e774      	b.n	800d550 <_dtoa_r+0x960>
 800d666:	4638      	mov	r0, r7
 800d668:	e7ba      	b.n	800d5e0 <_dtoa_r+0x9f0>
 800d66a:	2201      	movs	r2, #1
 800d66c:	e7e1      	b.n	800d632 <_dtoa_r+0xa42>
 800d66e:	9b05      	ldr	r3, [sp, #20]
 800d670:	2b00      	cmp	r3, #0
 800d672:	db04      	blt.n	800d67e <_dtoa_r+0xa8e>
 800d674:	9907      	ldr	r1, [sp, #28]
 800d676:	430b      	orrs	r3, r1
 800d678:	9906      	ldr	r1, [sp, #24]
 800d67a:	430b      	orrs	r3, r1
 800d67c:	d120      	bne.n	800d6c0 <_dtoa_r+0xad0>
 800d67e:	2a00      	cmp	r2, #0
 800d680:	dded      	ble.n	800d65e <_dtoa_r+0xa6e>
 800d682:	4651      	mov	r1, sl
 800d684:	2201      	movs	r2, #1
 800d686:	4620      	mov	r0, r4
 800d688:	f000 fbb4 	bl	800ddf4 <__lshift>
 800d68c:	4631      	mov	r1, r6
 800d68e:	4682      	mov	sl, r0
 800d690:	f000 fc1c 	bl	800decc <__mcmp>
 800d694:	2800      	cmp	r0, #0
 800d696:	dc03      	bgt.n	800d6a0 <_dtoa_r+0xab0>
 800d698:	d1e1      	bne.n	800d65e <_dtoa_r+0xa6e>
 800d69a:	f019 0f01 	tst.w	r9, #1
 800d69e:	d0de      	beq.n	800d65e <_dtoa_r+0xa6e>
 800d6a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d6a4:	d1d8      	bne.n	800d658 <_dtoa_r+0xa68>
 800d6a6:	9a01      	ldr	r2, [sp, #4]
 800d6a8:	2339      	movs	r3, #57	; 0x39
 800d6aa:	7013      	strb	r3, [r2, #0]
 800d6ac:	462b      	mov	r3, r5
 800d6ae:	461d      	mov	r5, r3
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d6b6:	2a39      	cmp	r2, #57	; 0x39
 800d6b8:	d06c      	beq.n	800d794 <_dtoa_r+0xba4>
 800d6ba:	3201      	adds	r2, #1
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	e747      	b.n	800d550 <_dtoa_r+0x960>
 800d6c0:	2a00      	cmp	r2, #0
 800d6c2:	dd07      	ble.n	800d6d4 <_dtoa_r+0xae4>
 800d6c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d6c8:	d0ed      	beq.n	800d6a6 <_dtoa_r+0xab6>
 800d6ca:	9a01      	ldr	r2, [sp, #4]
 800d6cc:	f109 0301 	add.w	r3, r9, #1
 800d6d0:	7013      	strb	r3, [r2, #0]
 800d6d2:	e73d      	b.n	800d550 <_dtoa_r+0x960>
 800d6d4:	9b04      	ldr	r3, [sp, #16]
 800d6d6:	9a08      	ldr	r2, [sp, #32]
 800d6d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d043      	beq.n	800d768 <_dtoa_r+0xb78>
 800d6e0:	4651      	mov	r1, sl
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	220a      	movs	r2, #10
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f000 f9d6 	bl	800da98 <__multadd>
 800d6ec:	45b8      	cmp	r8, r7
 800d6ee:	4682      	mov	sl, r0
 800d6f0:	f04f 0300 	mov.w	r3, #0
 800d6f4:	f04f 020a 	mov.w	r2, #10
 800d6f8:	4641      	mov	r1, r8
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	d107      	bne.n	800d70e <_dtoa_r+0xb1e>
 800d6fe:	f000 f9cb 	bl	800da98 <__multadd>
 800d702:	4680      	mov	r8, r0
 800d704:	4607      	mov	r7, r0
 800d706:	9b04      	ldr	r3, [sp, #16]
 800d708:	3301      	adds	r3, #1
 800d70a:	9304      	str	r3, [sp, #16]
 800d70c:	e775      	b.n	800d5fa <_dtoa_r+0xa0a>
 800d70e:	f000 f9c3 	bl	800da98 <__multadd>
 800d712:	4639      	mov	r1, r7
 800d714:	4680      	mov	r8, r0
 800d716:	2300      	movs	r3, #0
 800d718:	220a      	movs	r2, #10
 800d71a:	4620      	mov	r0, r4
 800d71c:	f000 f9bc 	bl	800da98 <__multadd>
 800d720:	4607      	mov	r7, r0
 800d722:	e7f0      	b.n	800d706 <_dtoa_r+0xb16>
 800d724:	9b04      	ldr	r3, [sp, #16]
 800d726:	9301      	str	r3, [sp, #4]
 800d728:	9d00      	ldr	r5, [sp, #0]
 800d72a:	4631      	mov	r1, r6
 800d72c:	4650      	mov	r0, sl
 800d72e:	f7ff f9d6 	bl	800cade <quorem>
 800d732:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d736:	9b00      	ldr	r3, [sp, #0]
 800d738:	f805 9b01 	strb.w	r9, [r5], #1
 800d73c:	1aea      	subs	r2, r5, r3
 800d73e:	9b01      	ldr	r3, [sp, #4]
 800d740:	4293      	cmp	r3, r2
 800d742:	dd07      	ble.n	800d754 <_dtoa_r+0xb64>
 800d744:	4651      	mov	r1, sl
 800d746:	2300      	movs	r3, #0
 800d748:	220a      	movs	r2, #10
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 f9a4 	bl	800da98 <__multadd>
 800d750:	4682      	mov	sl, r0
 800d752:	e7ea      	b.n	800d72a <_dtoa_r+0xb3a>
 800d754:	9b01      	ldr	r3, [sp, #4]
 800d756:	2b00      	cmp	r3, #0
 800d758:	bfc8      	it	gt
 800d75a:	461d      	movgt	r5, r3
 800d75c:	9b00      	ldr	r3, [sp, #0]
 800d75e:	bfd8      	it	le
 800d760:	2501      	movle	r5, #1
 800d762:	441d      	add	r5, r3
 800d764:	f04f 0800 	mov.w	r8, #0
 800d768:	4651      	mov	r1, sl
 800d76a:	2201      	movs	r2, #1
 800d76c:	4620      	mov	r0, r4
 800d76e:	f000 fb41 	bl	800ddf4 <__lshift>
 800d772:	4631      	mov	r1, r6
 800d774:	4682      	mov	sl, r0
 800d776:	f000 fba9 	bl	800decc <__mcmp>
 800d77a:	2800      	cmp	r0, #0
 800d77c:	dc96      	bgt.n	800d6ac <_dtoa_r+0xabc>
 800d77e:	d102      	bne.n	800d786 <_dtoa_r+0xb96>
 800d780:	f019 0f01 	tst.w	r9, #1
 800d784:	d192      	bne.n	800d6ac <_dtoa_r+0xabc>
 800d786:	462b      	mov	r3, r5
 800d788:	461d      	mov	r5, r3
 800d78a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d78e:	2a30      	cmp	r2, #48	; 0x30
 800d790:	d0fa      	beq.n	800d788 <_dtoa_r+0xb98>
 800d792:	e6dd      	b.n	800d550 <_dtoa_r+0x960>
 800d794:	9a00      	ldr	r2, [sp, #0]
 800d796:	429a      	cmp	r2, r3
 800d798:	d189      	bne.n	800d6ae <_dtoa_r+0xabe>
 800d79a:	f10b 0b01 	add.w	fp, fp, #1
 800d79e:	2331      	movs	r3, #49	; 0x31
 800d7a0:	e796      	b.n	800d6d0 <_dtoa_r+0xae0>
 800d7a2:	4b0a      	ldr	r3, [pc, #40]	; (800d7cc <_dtoa_r+0xbdc>)
 800d7a4:	f7ff ba99 	b.w	800ccda <_dtoa_r+0xea>
 800d7a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f47f aa6d 	bne.w	800cc8a <_dtoa_r+0x9a>
 800d7b0:	4b07      	ldr	r3, [pc, #28]	; (800d7d0 <_dtoa_r+0xbe0>)
 800d7b2:	f7ff ba92 	b.w	800ccda <_dtoa_r+0xea>
 800d7b6:	9b01      	ldr	r3, [sp, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	dcb5      	bgt.n	800d728 <_dtoa_r+0xb38>
 800d7bc:	9b07      	ldr	r3, [sp, #28]
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	f73f aeb1 	bgt.w	800d526 <_dtoa_r+0x936>
 800d7c4:	e7b0      	b.n	800d728 <_dtoa_r+0xb38>
 800d7c6:	bf00      	nop
 800d7c8:	080107d0 	.word	0x080107d0
 800d7cc:	08010730 	.word	0x08010730
 800d7d0:	08010754 	.word	0x08010754

0800d7d4 <_free_r>:
 800d7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7d6:	2900      	cmp	r1, #0
 800d7d8:	d044      	beq.n	800d864 <_free_r+0x90>
 800d7da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7de:	9001      	str	r0, [sp, #4]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f1a1 0404 	sub.w	r4, r1, #4
 800d7e6:	bfb8      	it	lt
 800d7e8:	18e4      	addlt	r4, r4, r3
 800d7ea:	f000 f8e7 	bl	800d9bc <__malloc_lock>
 800d7ee:	4a1e      	ldr	r2, [pc, #120]	; (800d868 <_free_r+0x94>)
 800d7f0:	9801      	ldr	r0, [sp, #4]
 800d7f2:	6813      	ldr	r3, [r2, #0]
 800d7f4:	b933      	cbnz	r3, 800d804 <_free_r+0x30>
 800d7f6:	6063      	str	r3, [r4, #4]
 800d7f8:	6014      	str	r4, [r2, #0]
 800d7fa:	b003      	add	sp, #12
 800d7fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d800:	f000 b8e2 	b.w	800d9c8 <__malloc_unlock>
 800d804:	42a3      	cmp	r3, r4
 800d806:	d908      	bls.n	800d81a <_free_r+0x46>
 800d808:	6825      	ldr	r5, [r4, #0]
 800d80a:	1961      	adds	r1, r4, r5
 800d80c:	428b      	cmp	r3, r1
 800d80e:	bf01      	itttt	eq
 800d810:	6819      	ldreq	r1, [r3, #0]
 800d812:	685b      	ldreq	r3, [r3, #4]
 800d814:	1949      	addeq	r1, r1, r5
 800d816:	6021      	streq	r1, [r4, #0]
 800d818:	e7ed      	b.n	800d7f6 <_free_r+0x22>
 800d81a:	461a      	mov	r2, r3
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	b10b      	cbz	r3, 800d824 <_free_r+0x50>
 800d820:	42a3      	cmp	r3, r4
 800d822:	d9fa      	bls.n	800d81a <_free_r+0x46>
 800d824:	6811      	ldr	r1, [r2, #0]
 800d826:	1855      	adds	r5, r2, r1
 800d828:	42a5      	cmp	r5, r4
 800d82a:	d10b      	bne.n	800d844 <_free_r+0x70>
 800d82c:	6824      	ldr	r4, [r4, #0]
 800d82e:	4421      	add	r1, r4
 800d830:	1854      	adds	r4, r2, r1
 800d832:	42a3      	cmp	r3, r4
 800d834:	6011      	str	r1, [r2, #0]
 800d836:	d1e0      	bne.n	800d7fa <_free_r+0x26>
 800d838:	681c      	ldr	r4, [r3, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	6053      	str	r3, [r2, #4]
 800d83e:	440c      	add	r4, r1
 800d840:	6014      	str	r4, [r2, #0]
 800d842:	e7da      	b.n	800d7fa <_free_r+0x26>
 800d844:	d902      	bls.n	800d84c <_free_r+0x78>
 800d846:	230c      	movs	r3, #12
 800d848:	6003      	str	r3, [r0, #0]
 800d84a:	e7d6      	b.n	800d7fa <_free_r+0x26>
 800d84c:	6825      	ldr	r5, [r4, #0]
 800d84e:	1961      	adds	r1, r4, r5
 800d850:	428b      	cmp	r3, r1
 800d852:	bf04      	itt	eq
 800d854:	6819      	ldreq	r1, [r3, #0]
 800d856:	685b      	ldreq	r3, [r3, #4]
 800d858:	6063      	str	r3, [r4, #4]
 800d85a:	bf04      	itt	eq
 800d85c:	1949      	addeq	r1, r1, r5
 800d85e:	6021      	streq	r1, [r4, #0]
 800d860:	6054      	str	r4, [r2, #4]
 800d862:	e7ca      	b.n	800d7fa <_free_r+0x26>
 800d864:	b003      	add	sp, #12
 800d866:	bd30      	pop	{r4, r5, pc}
 800d868:	200023cc 	.word	0x200023cc

0800d86c <malloc>:
 800d86c:	4b02      	ldr	r3, [pc, #8]	; (800d878 <malloc+0xc>)
 800d86e:	4601      	mov	r1, r0
 800d870:	6818      	ldr	r0, [r3, #0]
 800d872:	f000 b823 	b.w	800d8bc <_malloc_r>
 800d876:	bf00      	nop
 800d878:	200001d0 	.word	0x200001d0

0800d87c <sbrk_aligned>:
 800d87c:	b570      	push	{r4, r5, r6, lr}
 800d87e:	4e0e      	ldr	r6, [pc, #56]	; (800d8b8 <sbrk_aligned+0x3c>)
 800d880:	460c      	mov	r4, r1
 800d882:	6831      	ldr	r1, [r6, #0]
 800d884:	4605      	mov	r5, r0
 800d886:	b911      	cbnz	r1, 800d88e <sbrk_aligned+0x12>
 800d888:	f000 fe40 	bl	800e50c <_sbrk_r>
 800d88c:	6030      	str	r0, [r6, #0]
 800d88e:	4621      	mov	r1, r4
 800d890:	4628      	mov	r0, r5
 800d892:	f000 fe3b 	bl	800e50c <_sbrk_r>
 800d896:	1c43      	adds	r3, r0, #1
 800d898:	d00a      	beq.n	800d8b0 <sbrk_aligned+0x34>
 800d89a:	1cc4      	adds	r4, r0, #3
 800d89c:	f024 0403 	bic.w	r4, r4, #3
 800d8a0:	42a0      	cmp	r0, r4
 800d8a2:	d007      	beq.n	800d8b4 <sbrk_aligned+0x38>
 800d8a4:	1a21      	subs	r1, r4, r0
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	f000 fe30 	bl	800e50c <_sbrk_r>
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d101      	bne.n	800d8b4 <sbrk_aligned+0x38>
 800d8b0:	f04f 34ff 	mov.w	r4, #4294967295
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	bd70      	pop	{r4, r5, r6, pc}
 800d8b8:	200023d0 	.word	0x200023d0

0800d8bc <_malloc_r>:
 800d8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8c0:	1ccd      	adds	r5, r1, #3
 800d8c2:	f025 0503 	bic.w	r5, r5, #3
 800d8c6:	3508      	adds	r5, #8
 800d8c8:	2d0c      	cmp	r5, #12
 800d8ca:	bf38      	it	cc
 800d8cc:	250c      	movcc	r5, #12
 800d8ce:	2d00      	cmp	r5, #0
 800d8d0:	4607      	mov	r7, r0
 800d8d2:	db01      	blt.n	800d8d8 <_malloc_r+0x1c>
 800d8d4:	42a9      	cmp	r1, r5
 800d8d6:	d905      	bls.n	800d8e4 <_malloc_r+0x28>
 800d8d8:	230c      	movs	r3, #12
 800d8da:	603b      	str	r3, [r7, #0]
 800d8dc:	2600      	movs	r6, #0
 800d8de:	4630      	mov	r0, r6
 800d8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d9b8 <_malloc_r+0xfc>
 800d8e8:	f000 f868 	bl	800d9bc <__malloc_lock>
 800d8ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d8f0:	461c      	mov	r4, r3
 800d8f2:	bb5c      	cbnz	r4, 800d94c <_malloc_r+0x90>
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	4638      	mov	r0, r7
 800d8f8:	f7ff ffc0 	bl	800d87c <sbrk_aligned>
 800d8fc:	1c43      	adds	r3, r0, #1
 800d8fe:	4604      	mov	r4, r0
 800d900:	d155      	bne.n	800d9ae <_malloc_r+0xf2>
 800d902:	f8d8 4000 	ldr.w	r4, [r8]
 800d906:	4626      	mov	r6, r4
 800d908:	2e00      	cmp	r6, #0
 800d90a:	d145      	bne.n	800d998 <_malloc_r+0xdc>
 800d90c:	2c00      	cmp	r4, #0
 800d90e:	d048      	beq.n	800d9a2 <_malloc_r+0xe6>
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	4631      	mov	r1, r6
 800d914:	4638      	mov	r0, r7
 800d916:	eb04 0903 	add.w	r9, r4, r3
 800d91a:	f000 fdf7 	bl	800e50c <_sbrk_r>
 800d91e:	4581      	cmp	r9, r0
 800d920:	d13f      	bne.n	800d9a2 <_malloc_r+0xe6>
 800d922:	6821      	ldr	r1, [r4, #0]
 800d924:	1a6d      	subs	r5, r5, r1
 800d926:	4629      	mov	r1, r5
 800d928:	4638      	mov	r0, r7
 800d92a:	f7ff ffa7 	bl	800d87c <sbrk_aligned>
 800d92e:	3001      	adds	r0, #1
 800d930:	d037      	beq.n	800d9a2 <_malloc_r+0xe6>
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	442b      	add	r3, r5
 800d936:	6023      	str	r3, [r4, #0]
 800d938:	f8d8 3000 	ldr.w	r3, [r8]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d038      	beq.n	800d9b2 <_malloc_r+0xf6>
 800d940:	685a      	ldr	r2, [r3, #4]
 800d942:	42a2      	cmp	r2, r4
 800d944:	d12b      	bne.n	800d99e <_malloc_r+0xe2>
 800d946:	2200      	movs	r2, #0
 800d948:	605a      	str	r2, [r3, #4]
 800d94a:	e00f      	b.n	800d96c <_malloc_r+0xb0>
 800d94c:	6822      	ldr	r2, [r4, #0]
 800d94e:	1b52      	subs	r2, r2, r5
 800d950:	d41f      	bmi.n	800d992 <_malloc_r+0xd6>
 800d952:	2a0b      	cmp	r2, #11
 800d954:	d917      	bls.n	800d986 <_malloc_r+0xca>
 800d956:	1961      	adds	r1, r4, r5
 800d958:	42a3      	cmp	r3, r4
 800d95a:	6025      	str	r5, [r4, #0]
 800d95c:	bf18      	it	ne
 800d95e:	6059      	strne	r1, [r3, #4]
 800d960:	6863      	ldr	r3, [r4, #4]
 800d962:	bf08      	it	eq
 800d964:	f8c8 1000 	streq.w	r1, [r8]
 800d968:	5162      	str	r2, [r4, r5]
 800d96a:	604b      	str	r3, [r1, #4]
 800d96c:	4638      	mov	r0, r7
 800d96e:	f104 060b 	add.w	r6, r4, #11
 800d972:	f000 f829 	bl	800d9c8 <__malloc_unlock>
 800d976:	f026 0607 	bic.w	r6, r6, #7
 800d97a:	1d23      	adds	r3, r4, #4
 800d97c:	1af2      	subs	r2, r6, r3
 800d97e:	d0ae      	beq.n	800d8de <_malloc_r+0x22>
 800d980:	1b9b      	subs	r3, r3, r6
 800d982:	50a3      	str	r3, [r4, r2]
 800d984:	e7ab      	b.n	800d8de <_malloc_r+0x22>
 800d986:	42a3      	cmp	r3, r4
 800d988:	6862      	ldr	r2, [r4, #4]
 800d98a:	d1dd      	bne.n	800d948 <_malloc_r+0x8c>
 800d98c:	f8c8 2000 	str.w	r2, [r8]
 800d990:	e7ec      	b.n	800d96c <_malloc_r+0xb0>
 800d992:	4623      	mov	r3, r4
 800d994:	6864      	ldr	r4, [r4, #4]
 800d996:	e7ac      	b.n	800d8f2 <_malloc_r+0x36>
 800d998:	4634      	mov	r4, r6
 800d99a:	6876      	ldr	r6, [r6, #4]
 800d99c:	e7b4      	b.n	800d908 <_malloc_r+0x4c>
 800d99e:	4613      	mov	r3, r2
 800d9a0:	e7cc      	b.n	800d93c <_malloc_r+0x80>
 800d9a2:	230c      	movs	r3, #12
 800d9a4:	603b      	str	r3, [r7, #0]
 800d9a6:	4638      	mov	r0, r7
 800d9a8:	f000 f80e 	bl	800d9c8 <__malloc_unlock>
 800d9ac:	e797      	b.n	800d8de <_malloc_r+0x22>
 800d9ae:	6025      	str	r5, [r4, #0]
 800d9b0:	e7dc      	b.n	800d96c <_malloc_r+0xb0>
 800d9b2:	605b      	str	r3, [r3, #4]
 800d9b4:	deff      	udf	#255	; 0xff
 800d9b6:	bf00      	nop
 800d9b8:	200023cc 	.word	0x200023cc

0800d9bc <__malloc_lock>:
 800d9bc:	4801      	ldr	r0, [pc, #4]	; (800d9c4 <__malloc_lock+0x8>)
 800d9be:	f7ff b88c 	b.w	800cada <__retarget_lock_acquire_recursive>
 800d9c2:	bf00      	nop
 800d9c4:	200023c8 	.word	0x200023c8

0800d9c8 <__malloc_unlock>:
 800d9c8:	4801      	ldr	r0, [pc, #4]	; (800d9d0 <__malloc_unlock+0x8>)
 800d9ca:	f7ff b887 	b.w	800cadc <__retarget_lock_release_recursive>
 800d9ce:	bf00      	nop
 800d9d0:	200023c8 	.word	0x200023c8

0800d9d4 <_Balloc>:
 800d9d4:	b570      	push	{r4, r5, r6, lr}
 800d9d6:	69c6      	ldr	r6, [r0, #28]
 800d9d8:	4604      	mov	r4, r0
 800d9da:	460d      	mov	r5, r1
 800d9dc:	b976      	cbnz	r6, 800d9fc <_Balloc+0x28>
 800d9de:	2010      	movs	r0, #16
 800d9e0:	f7ff ff44 	bl	800d86c <malloc>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	61e0      	str	r0, [r4, #28]
 800d9e8:	b920      	cbnz	r0, 800d9f4 <_Balloc+0x20>
 800d9ea:	4b18      	ldr	r3, [pc, #96]	; (800da4c <_Balloc+0x78>)
 800d9ec:	4818      	ldr	r0, [pc, #96]	; (800da50 <_Balloc+0x7c>)
 800d9ee:	216b      	movs	r1, #107	; 0x6b
 800d9f0:	f000 fdaa 	bl	800e548 <__assert_func>
 800d9f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9f8:	6006      	str	r6, [r0, #0]
 800d9fa:	60c6      	str	r6, [r0, #12]
 800d9fc:	69e6      	ldr	r6, [r4, #28]
 800d9fe:	68f3      	ldr	r3, [r6, #12]
 800da00:	b183      	cbz	r3, 800da24 <_Balloc+0x50>
 800da02:	69e3      	ldr	r3, [r4, #28]
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da0a:	b9b8      	cbnz	r0, 800da3c <_Balloc+0x68>
 800da0c:	2101      	movs	r1, #1
 800da0e:	fa01 f605 	lsl.w	r6, r1, r5
 800da12:	1d72      	adds	r2, r6, #5
 800da14:	0092      	lsls	r2, r2, #2
 800da16:	4620      	mov	r0, r4
 800da18:	f000 fdb4 	bl	800e584 <_calloc_r>
 800da1c:	b160      	cbz	r0, 800da38 <_Balloc+0x64>
 800da1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da22:	e00e      	b.n	800da42 <_Balloc+0x6e>
 800da24:	2221      	movs	r2, #33	; 0x21
 800da26:	2104      	movs	r1, #4
 800da28:	4620      	mov	r0, r4
 800da2a:	f000 fdab 	bl	800e584 <_calloc_r>
 800da2e:	69e3      	ldr	r3, [r4, #28]
 800da30:	60f0      	str	r0, [r6, #12]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1e4      	bne.n	800da02 <_Balloc+0x2e>
 800da38:	2000      	movs	r0, #0
 800da3a:	bd70      	pop	{r4, r5, r6, pc}
 800da3c:	6802      	ldr	r2, [r0, #0]
 800da3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da42:	2300      	movs	r3, #0
 800da44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da48:	e7f7      	b.n	800da3a <_Balloc+0x66>
 800da4a:	bf00      	nop
 800da4c:	08010761 	.word	0x08010761
 800da50:	080107e1 	.word	0x080107e1

0800da54 <_Bfree>:
 800da54:	b570      	push	{r4, r5, r6, lr}
 800da56:	69c6      	ldr	r6, [r0, #28]
 800da58:	4605      	mov	r5, r0
 800da5a:	460c      	mov	r4, r1
 800da5c:	b976      	cbnz	r6, 800da7c <_Bfree+0x28>
 800da5e:	2010      	movs	r0, #16
 800da60:	f7ff ff04 	bl	800d86c <malloc>
 800da64:	4602      	mov	r2, r0
 800da66:	61e8      	str	r0, [r5, #28]
 800da68:	b920      	cbnz	r0, 800da74 <_Bfree+0x20>
 800da6a:	4b09      	ldr	r3, [pc, #36]	; (800da90 <_Bfree+0x3c>)
 800da6c:	4809      	ldr	r0, [pc, #36]	; (800da94 <_Bfree+0x40>)
 800da6e:	218f      	movs	r1, #143	; 0x8f
 800da70:	f000 fd6a 	bl	800e548 <__assert_func>
 800da74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da78:	6006      	str	r6, [r0, #0]
 800da7a:	60c6      	str	r6, [r0, #12]
 800da7c:	b13c      	cbz	r4, 800da8e <_Bfree+0x3a>
 800da7e:	69eb      	ldr	r3, [r5, #28]
 800da80:	6862      	ldr	r2, [r4, #4]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da88:	6021      	str	r1, [r4, #0]
 800da8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da8e:	bd70      	pop	{r4, r5, r6, pc}
 800da90:	08010761 	.word	0x08010761
 800da94:	080107e1 	.word	0x080107e1

0800da98 <__multadd>:
 800da98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da9c:	690d      	ldr	r5, [r1, #16]
 800da9e:	4607      	mov	r7, r0
 800daa0:	460c      	mov	r4, r1
 800daa2:	461e      	mov	r6, r3
 800daa4:	f101 0c14 	add.w	ip, r1, #20
 800daa8:	2000      	movs	r0, #0
 800daaa:	f8dc 3000 	ldr.w	r3, [ip]
 800daae:	b299      	uxth	r1, r3
 800dab0:	fb02 6101 	mla	r1, r2, r1, r6
 800dab4:	0c1e      	lsrs	r6, r3, #16
 800dab6:	0c0b      	lsrs	r3, r1, #16
 800dab8:	fb02 3306 	mla	r3, r2, r6, r3
 800dabc:	b289      	uxth	r1, r1
 800dabe:	3001      	adds	r0, #1
 800dac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dac4:	4285      	cmp	r5, r0
 800dac6:	f84c 1b04 	str.w	r1, [ip], #4
 800daca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dace:	dcec      	bgt.n	800daaa <__multadd+0x12>
 800dad0:	b30e      	cbz	r6, 800db16 <__multadd+0x7e>
 800dad2:	68a3      	ldr	r3, [r4, #8]
 800dad4:	42ab      	cmp	r3, r5
 800dad6:	dc19      	bgt.n	800db0c <__multadd+0x74>
 800dad8:	6861      	ldr	r1, [r4, #4]
 800dada:	4638      	mov	r0, r7
 800dadc:	3101      	adds	r1, #1
 800dade:	f7ff ff79 	bl	800d9d4 <_Balloc>
 800dae2:	4680      	mov	r8, r0
 800dae4:	b928      	cbnz	r0, 800daf2 <__multadd+0x5a>
 800dae6:	4602      	mov	r2, r0
 800dae8:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <__multadd+0x84>)
 800daea:	480d      	ldr	r0, [pc, #52]	; (800db20 <__multadd+0x88>)
 800daec:	21ba      	movs	r1, #186	; 0xba
 800daee:	f000 fd2b 	bl	800e548 <__assert_func>
 800daf2:	6922      	ldr	r2, [r4, #16]
 800daf4:	3202      	adds	r2, #2
 800daf6:	f104 010c 	add.w	r1, r4, #12
 800dafa:	0092      	lsls	r2, r2, #2
 800dafc:	300c      	adds	r0, #12
 800dafe:	f000 fd15 	bl	800e52c <memcpy>
 800db02:	4621      	mov	r1, r4
 800db04:	4638      	mov	r0, r7
 800db06:	f7ff ffa5 	bl	800da54 <_Bfree>
 800db0a:	4644      	mov	r4, r8
 800db0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db10:	3501      	adds	r5, #1
 800db12:	615e      	str	r6, [r3, #20]
 800db14:	6125      	str	r5, [r4, #16]
 800db16:	4620      	mov	r0, r4
 800db18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db1c:	080107d0 	.word	0x080107d0
 800db20:	080107e1 	.word	0x080107e1

0800db24 <__hi0bits>:
 800db24:	0c03      	lsrs	r3, r0, #16
 800db26:	041b      	lsls	r3, r3, #16
 800db28:	b9d3      	cbnz	r3, 800db60 <__hi0bits+0x3c>
 800db2a:	0400      	lsls	r0, r0, #16
 800db2c:	2310      	movs	r3, #16
 800db2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db32:	bf04      	itt	eq
 800db34:	0200      	lsleq	r0, r0, #8
 800db36:	3308      	addeq	r3, #8
 800db38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db3c:	bf04      	itt	eq
 800db3e:	0100      	lsleq	r0, r0, #4
 800db40:	3304      	addeq	r3, #4
 800db42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db46:	bf04      	itt	eq
 800db48:	0080      	lsleq	r0, r0, #2
 800db4a:	3302      	addeq	r3, #2
 800db4c:	2800      	cmp	r0, #0
 800db4e:	db05      	blt.n	800db5c <__hi0bits+0x38>
 800db50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800db54:	f103 0301 	add.w	r3, r3, #1
 800db58:	bf08      	it	eq
 800db5a:	2320      	moveq	r3, #32
 800db5c:	4618      	mov	r0, r3
 800db5e:	4770      	bx	lr
 800db60:	2300      	movs	r3, #0
 800db62:	e7e4      	b.n	800db2e <__hi0bits+0xa>

0800db64 <__lo0bits>:
 800db64:	6803      	ldr	r3, [r0, #0]
 800db66:	f013 0207 	ands.w	r2, r3, #7
 800db6a:	d00c      	beq.n	800db86 <__lo0bits+0x22>
 800db6c:	07d9      	lsls	r1, r3, #31
 800db6e:	d422      	bmi.n	800dbb6 <__lo0bits+0x52>
 800db70:	079a      	lsls	r2, r3, #30
 800db72:	bf49      	itett	mi
 800db74:	085b      	lsrmi	r3, r3, #1
 800db76:	089b      	lsrpl	r3, r3, #2
 800db78:	6003      	strmi	r3, [r0, #0]
 800db7a:	2201      	movmi	r2, #1
 800db7c:	bf5c      	itt	pl
 800db7e:	6003      	strpl	r3, [r0, #0]
 800db80:	2202      	movpl	r2, #2
 800db82:	4610      	mov	r0, r2
 800db84:	4770      	bx	lr
 800db86:	b299      	uxth	r1, r3
 800db88:	b909      	cbnz	r1, 800db8e <__lo0bits+0x2a>
 800db8a:	0c1b      	lsrs	r3, r3, #16
 800db8c:	2210      	movs	r2, #16
 800db8e:	b2d9      	uxtb	r1, r3
 800db90:	b909      	cbnz	r1, 800db96 <__lo0bits+0x32>
 800db92:	3208      	adds	r2, #8
 800db94:	0a1b      	lsrs	r3, r3, #8
 800db96:	0719      	lsls	r1, r3, #28
 800db98:	bf04      	itt	eq
 800db9a:	091b      	lsreq	r3, r3, #4
 800db9c:	3204      	addeq	r2, #4
 800db9e:	0799      	lsls	r1, r3, #30
 800dba0:	bf04      	itt	eq
 800dba2:	089b      	lsreq	r3, r3, #2
 800dba4:	3202      	addeq	r2, #2
 800dba6:	07d9      	lsls	r1, r3, #31
 800dba8:	d403      	bmi.n	800dbb2 <__lo0bits+0x4e>
 800dbaa:	085b      	lsrs	r3, r3, #1
 800dbac:	f102 0201 	add.w	r2, r2, #1
 800dbb0:	d003      	beq.n	800dbba <__lo0bits+0x56>
 800dbb2:	6003      	str	r3, [r0, #0]
 800dbb4:	e7e5      	b.n	800db82 <__lo0bits+0x1e>
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	e7e3      	b.n	800db82 <__lo0bits+0x1e>
 800dbba:	2220      	movs	r2, #32
 800dbbc:	e7e1      	b.n	800db82 <__lo0bits+0x1e>
	...

0800dbc0 <__i2b>:
 800dbc0:	b510      	push	{r4, lr}
 800dbc2:	460c      	mov	r4, r1
 800dbc4:	2101      	movs	r1, #1
 800dbc6:	f7ff ff05 	bl	800d9d4 <_Balloc>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	b928      	cbnz	r0, 800dbda <__i2b+0x1a>
 800dbce:	4b05      	ldr	r3, [pc, #20]	; (800dbe4 <__i2b+0x24>)
 800dbd0:	4805      	ldr	r0, [pc, #20]	; (800dbe8 <__i2b+0x28>)
 800dbd2:	f240 1145 	movw	r1, #325	; 0x145
 800dbd6:	f000 fcb7 	bl	800e548 <__assert_func>
 800dbda:	2301      	movs	r3, #1
 800dbdc:	6144      	str	r4, [r0, #20]
 800dbde:	6103      	str	r3, [r0, #16]
 800dbe0:	bd10      	pop	{r4, pc}
 800dbe2:	bf00      	nop
 800dbe4:	080107d0 	.word	0x080107d0
 800dbe8:	080107e1 	.word	0x080107e1

0800dbec <__multiply>:
 800dbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf0:	4691      	mov	r9, r2
 800dbf2:	690a      	ldr	r2, [r1, #16]
 800dbf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	bfb8      	it	lt
 800dbfc:	460b      	movlt	r3, r1
 800dbfe:	460c      	mov	r4, r1
 800dc00:	bfbc      	itt	lt
 800dc02:	464c      	movlt	r4, r9
 800dc04:	4699      	movlt	r9, r3
 800dc06:	6927      	ldr	r7, [r4, #16]
 800dc08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc0c:	68a3      	ldr	r3, [r4, #8]
 800dc0e:	6861      	ldr	r1, [r4, #4]
 800dc10:	eb07 060a 	add.w	r6, r7, sl
 800dc14:	42b3      	cmp	r3, r6
 800dc16:	b085      	sub	sp, #20
 800dc18:	bfb8      	it	lt
 800dc1a:	3101      	addlt	r1, #1
 800dc1c:	f7ff feda 	bl	800d9d4 <_Balloc>
 800dc20:	b930      	cbnz	r0, 800dc30 <__multiply+0x44>
 800dc22:	4602      	mov	r2, r0
 800dc24:	4b44      	ldr	r3, [pc, #272]	; (800dd38 <__multiply+0x14c>)
 800dc26:	4845      	ldr	r0, [pc, #276]	; (800dd3c <__multiply+0x150>)
 800dc28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dc2c:	f000 fc8c 	bl	800e548 <__assert_func>
 800dc30:	f100 0514 	add.w	r5, r0, #20
 800dc34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc38:	462b      	mov	r3, r5
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	4543      	cmp	r3, r8
 800dc3e:	d321      	bcc.n	800dc84 <__multiply+0x98>
 800dc40:	f104 0314 	add.w	r3, r4, #20
 800dc44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc48:	f109 0314 	add.w	r3, r9, #20
 800dc4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dc50:	9202      	str	r2, [sp, #8]
 800dc52:	1b3a      	subs	r2, r7, r4
 800dc54:	3a15      	subs	r2, #21
 800dc56:	f022 0203 	bic.w	r2, r2, #3
 800dc5a:	3204      	adds	r2, #4
 800dc5c:	f104 0115 	add.w	r1, r4, #21
 800dc60:	428f      	cmp	r7, r1
 800dc62:	bf38      	it	cc
 800dc64:	2204      	movcc	r2, #4
 800dc66:	9201      	str	r2, [sp, #4]
 800dc68:	9a02      	ldr	r2, [sp, #8]
 800dc6a:	9303      	str	r3, [sp, #12]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d80c      	bhi.n	800dc8a <__multiply+0x9e>
 800dc70:	2e00      	cmp	r6, #0
 800dc72:	dd03      	ble.n	800dc7c <__multiply+0x90>
 800dc74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d05b      	beq.n	800dd34 <__multiply+0x148>
 800dc7c:	6106      	str	r6, [r0, #16]
 800dc7e:	b005      	add	sp, #20
 800dc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc84:	f843 2b04 	str.w	r2, [r3], #4
 800dc88:	e7d8      	b.n	800dc3c <__multiply+0x50>
 800dc8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc8e:	f1ba 0f00 	cmp.w	sl, #0
 800dc92:	d024      	beq.n	800dcde <__multiply+0xf2>
 800dc94:	f104 0e14 	add.w	lr, r4, #20
 800dc98:	46a9      	mov	r9, r5
 800dc9a:	f04f 0c00 	mov.w	ip, #0
 800dc9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dca2:	f8d9 1000 	ldr.w	r1, [r9]
 800dca6:	fa1f fb82 	uxth.w	fp, r2
 800dcaa:	b289      	uxth	r1, r1
 800dcac:	fb0a 110b 	mla	r1, sl, fp, r1
 800dcb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dcb4:	f8d9 2000 	ldr.w	r2, [r9]
 800dcb8:	4461      	add	r1, ip
 800dcba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dcbe:	fb0a c20b 	mla	r2, sl, fp, ip
 800dcc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dcc6:	b289      	uxth	r1, r1
 800dcc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dccc:	4577      	cmp	r7, lr
 800dcce:	f849 1b04 	str.w	r1, [r9], #4
 800dcd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dcd6:	d8e2      	bhi.n	800dc9e <__multiply+0xb2>
 800dcd8:	9a01      	ldr	r2, [sp, #4]
 800dcda:	f845 c002 	str.w	ip, [r5, r2]
 800dcde:	9a03      	ldr	r2, [sp, #12]
 800dce0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dce4:	3304      	adds	r3, #4
 800dce6:	f1b9 0f00 	cmp.w	r9, #0
 800dcea:	d021      	beq.n	800dd30 <__multiply+0x144>
 800dcec:	6829      	ldr	r1, [r5, #0]
 800dcee:	f104 0c14 	add.w	ip, r4, #20
 800dcf2:	46ae      	mov	lr, r5
 800dcf4:	f04f 0a00 	mov.w	sl, #0
 800dcf8:	f8bc b000 	ldrh.w	fp, [ip]
 800dcfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd00:	fb09 220b 	mla	r2, r9, fp, r2
 800dd04:	4452      	add	r2, sl
 800dd06:	b289      	uxth	r1, r1
 800dd08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd0c:	f84e 1b04 	str.w	r1, [lr], #4
 800dd10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dd14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd18:	f8be 1000 	ldrh.w	r1, [lr]
 800dd1c:	fb09 110a 	mla	r1, r9, sl, r1
 800dd20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dd24:	4567      	cmp	r7, ip
 800dd26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd2a:	d8e5      	bhi.n	800dcf8 <__multiply+0x10c>
 800dd2c:	9a01      	ldr	r2, [sp, #4]
 800dd2e:	50a9      	str	r1, [r5, r2]
 800dd30:	3504      	adds	r5, #4
 800dd32:	e799      	b.n	800dc68 <__multiply+0x7c>
 800dd34:	3e01      	subs	r6, #1
 800dd36:	e79b      	b.n	800dc70 <__multiply+0x84>
 800dd38:	080107d0 	.word	0x080107d0
 800dd3c:	080107e1 	.word	0x080107e1

0800dd40 <__pow5mult>:
 800dd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd44:	4615      	mov	r5, r2
 800dd46:	f012 0203 	ands.w	r2, r2, #3
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	460f      	mov	r7, r1
 800dd4e:	d007      	beq.n	800dd60 <__pow5mult+0x20>
 800dd50:	4c25      	ldr	r4, [pc, #148]	; (800dde8 <__pow5mult+0xa8>)
 800dd52:	3a01      	subs	r2, #1
 800dd54:	2300      	movs	r3, #0
 800dd56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd5a:	f7ff fe9d 	bl	800da98 <__multadd>
 800dd5e:	4607      	mov	r7, r0
 800dd60:	10ad      	asrs	r5, r5, #2
 800dd62:	d03d      	beq.n	800dde0 <__pow5mult+0xa0>
 800dd64:	69f4      	ldr	r4, [r6, #28]
 800dd66:	b97c      	cbnz	r4, 800dd88 <__pow5mult+0x48>
 800dd68:	2010      	movs	r0, #16
 800dd6a:	f7ff fd7f 	bl	800d86c <malloc>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	61f0      	str	r0, [r6, #28]
 800dd72:	b928      	cbnz	r0, 800dd80 <__pow5mult+0x40>
 800dd74:	4b1d      	ldr	r3, [pc, #116]	; (800ddec <__pow5mult+0xac>)
 800dd76:	481e      	ldr	r0, [pc, #120]	; (800ddf0 <__pow5mult+0xb0>)
 800dd78:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dd7c:	f000 fbe4 	bl	800e548 <__assert_func>
 800dd80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd84:	6004      	str	r4, [r0, #0]
 800dd86:	60c4      	str	r4, [r0, #12]
 800dd88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dd8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd90:	b94c      	cbnz	r4, 800dda6 <__pow5mult+0x66>
 800dd92:	f240 2171 	movw	r1, #625	; 0x271
 800dd96:	4630      	mov	r0, r6
 800dd98:	f7ff ff12 	bl	800dbc0 <__i2b>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800dda2:	4604      	mov	r4, r0
 800dda4:	6003      	str	r3, [r0, #0]
 800dda6:	f04f 0900 	mov.w	r9, #0
 800ddaa:	07eb      	lsls	r3, r5, #31
 800ddac:	d50a      	bpl.n	800ddc4 <__pow5mult+0x84>
 800ddae:	4639      	mov	r1, r7
 800ddb0:	4622      	mov	r2, r4
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f7ff ff1a 	bl	800dbec <__multiply>
 800ddb8:	4639      	mov	r1, r7
 800ddba:	4680      	mov	r8, r0
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	f7ff fe49 	bl	800da54 <_Bfree>
 800ddc2:	4647      	mov	r7, r8
 800ddc4:	106d      	asrs	r5, r5, #1
 800ddc6:	d00b      	beq.n	800dde0 <__pow5mult+0xa0>
 800ddc8:	6820      	ldr	r0, [r4, #0]
 800ddca:	b938      	cbnz	r0, 800dddc <__pow5mult+0x9c>
 800ddcc:	4622      	mov	r2, r4
 800ddce:	4621      	mov	r1, r4
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	f7ff ff0b 	bl	800dbec <__multiply>
 800ddd6:	6020      	str	r0, [r4, #0]
 800ddd8:	f8c0 9000 	str.w	r9, [r0]
 800dddc:	4604      	mov	r4, r0
 800ddde:	e7e4      	b.n	800ddaa <__pow5mult+0x6a>
 800dde0:	4638      	mov	r0, r7
 800dde2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dde6:	bf00      	nop
 800dde8:	08010930 	.word	0x08010930
 800ddec:	08010761 	.word	0x08010761
 800ddf0:	080107e1 	.word	0x080107e1

0800ddf4 <__lshift>:
 800ddf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	6849      	ldr	r1, [r1, #4]
 800ddfc:	6923      	ldr	r3, [r4, #16]
 800ddfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de02:	68a3      	ldr	r3, [r4, #8]
 800de04:	4607      	mov	r7, r0
 800de06:	4691      	mov	r9, r2
 800de08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de0c:	f108 0601 	add.w	r6, r8, #1
 800de10:	42b3      	cmp	r3, r6
 800de12:	db0b      	blt.n	800de2c <__lshift+0x38>
 800de14:	4638      	mov	r0, r7
 800de16:	f7ff fddd 	bl	800d9d4 <_Balloc>
 800de1a:	4605      	mov	r5, r0
 800de1c:	b948      	cbnz	r0, 800de32 <__lshift+0x3e>
 800de1e:	4602      	mov	r2, r0
 800de20:	4b28      	ldr	r3, [pc, #160]	; (800dec4 <__lshift+0xd0>)
 800de22:	4829      	ldr	r0, [pc, #164]	; (800dec8 <__lshift+0xd4>)
 800de24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800de28:	f000 fb8e 	bl	800e548 <__assert_func>
 800de2c:	3101      	adds	r1, #1
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	e7ee      	b.n	800de10 <__lshift+0x1c>
 800de32:	2300      	movs	r3, #0
 800de34:	f100 0114 	add.w	r1, r0, #20
 800de38:	f100 0210 	add.w	r2, r0, #16
 800de3c:	4618      	mov	r0, r3
 800de3e:	4553      	cmp	r3, sl
 800de40:	db33      	blt.n	800deaa <__lshift+0xb6>
 800de42:	6920      	ldr	r0, [r4, #16]
 800de44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de48:	f104 0314 	add.w	r3, r4, #20
 800de4c:	f019 091f 	ands.w	r9, r9, #31
 800de50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de58:	d02b      	beq.n	800deb2 <__lshift+0xbe>
 800de5a:	f1c9 0e20 	rsb	lr, r9, #32
 800de5e:	468a      	mov	sl, r1
 800de60:	2200      	movs	r2, #0
 800de62:	6818      	ldr	r0, [r3, #0]
 800de64:	fa00 f009 	lsl.w	r0, r0, r9
 800de68:	4310      	orrs	r0, r2
 800de6a:	f84a 0b04 	str.w	r0, [sl], #4
 800de6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de72:	459c      	cmp	ip, r3
 800de74:	fa22 f20e 	lsr.w	r2, r2, lr
 800de78:	d8f3      	bhi.n	800de62 <__lshift+0x6e>
 800de7a:	ebac 0304 	sub.w	r3, ip, r4
 800de7e:	3b15      	subs	r3, #21
 800de80:	f023 0303 	bic.w	r3, r3, #3
 800de84:	3304      	adds	r3, #4
 800de86:	f104 0015 	add.w	r0, r4, #21
 800de8a:	4584      	cmp	ip, r0
 800de8c:	bf38      	it	cc
 800de8e:	2304      	movcc	r3, #4
 800de90:	50ca      	str	r2, [r1, r3]
 800de92:	b10a      	cbz	r2, 800de98 <__lshift+0xa4>
 800de94:	f108 0602 	add.w	r6, r8, #2
 800de98:	3e01      	subs	r6, #1
 800de9a:	4638      	mov	r0, r7
 800de9c:	612e      	str	r6, [r5, #16]
 800de9e:	4621      	mov	r1, r4
 800dea0:	f7ff fdd8 	bl	800da54 <_Bfree>
 800dea4:	4628      	mov	r0, r5
 800dea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800deae:	3301      	adds	r3, #1
 800deb0:	e7c5      	b.n	800de3e <__lshift+0x4a>
 800deb2:	3904      	subs	r1, #4
 800deb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800deb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800debc:	459c      	cmp	ip, r3
 800debe:	d8f9      	bhi.n	800deb4 <__lshift+0xc0>
 800dec0:	e7ea      	b.n	800de98 <__lshift+0xa4>
 800dec2:	bf00      	nop
 800dec4:	080107d0 	.word	0x080107d0
 800dec8:	080107e1 	.word	0x080107e1

0800decc <__mcmp>:
 800decc:	b530      	push	{r4, r5, lr}
 800dece:	6902      	ldr	r2, [r0, #16]
 800ded0:	690c      	ldr	r4, [r1, #16]
 800ded2:	1b12      	subs	r2, r2, r4
 800ded4:	d10e      	bne.n	800def4 <__mcmp+0x28>
 800ded6:	f100 0314 	add.w	r3, r0, #20
 800deda:	3114      	adds	r1, #20
 800dedc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dee0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dee4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dee8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800deec:	42a5      	cmp	r5, r4
 800deee:	d003      	beq.n	800def8 <__mcmp+0x2c>
 800def0:	d305      	bcc.n	800defe <__mcmp+0x32>
 800def2:	2201      	movs	r2, #1
 800def4:	4610      	mov	r0, r2
 800def6:	bd30      	pop	{r4, r5, pc}
 800def8:	4283      	cmp	r3, r0
 800defa:	d3f3      	bcc.n	800dee4 <__mcmp+0x18>
 800defc:	e7fa      	b.n	800def4 <__mcmp+0x28>
 800defe:	f04f 32ff 	mov.w	r2, #4294967295
 800df02:	e7f7      	b.n	800def4 <__mcmp+0x28>

0800df04 <__mdiff>:
 800df04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df08:	460c      	mov	r4, r1
 800df0a:	4606      	mov	r6, r0
 800df0c:	4611      	mov	r1, r2
 800df0e:	4620      	mov	r0, r4
 800df10:	4690      	mov	r8, r2
 800df12:	f7ff ffdb 	bl	800decc <__mcmp>
 800df16:	1e05      	subs	r5, r0, #0
 800df18:	d110      	bne.n	800df3c <__mdiff+0x38>
 800df1a:	4629      	mov	r1, r5
 800df1c:	4630      	mov	r0, r6
 800df1e:	f7ff fd59 	bl	800d9d4 <_Balloc>
 800df22:	b930      	cbnz	r0, 800df32 <__mdiff+0x2e>
 800df24:	4b3a      	ldr	r3, [pc, #232]	; (800e010 <__mdiff+0x10c>)
 800df26:	4602      	mov	r2, r0
 800df28:	f240 2137 	movw	r1, #567	; 0x237
 800df2c:	4839      	ldr	r0, [pc, #228]	; (800e014 <__mdiff+0x110>)
 800df2e:	f000 fb0b 	bl	800e548 <__assert_func>
 800df32:	2301      	movs	r3, #1
 800df34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3c:	bfa4      	itt	ge
 800df3e:	4643      	movge	r3, r8
 800df40:	46a0      	movge	r8, r4
 800df42:	4630      	mov	r0, r6
 800df44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df48:	bfa6      	itte	ge
 800df4a:	461c      	movge	r4, r3
 800df4c:	2500      	movge	r5, #0
 800df4e:	2501      	movlt	r5, #1
 800df50:	f7ff fd40 	bl	800d9d4 <_Balloc>
 800df54:	b920      	cbnz	r0, 800df60 <__mdiff+0x5c>
 800df56:	4b2e      	ldr	r3, [pc, #184]	; (800e010 <__mdiff+0x10c>)
 800df58:	4602      	mov	r2, r0
 800df5a:	f240 2145 	movw	r1, #581	; 0x245
 800df5e:	e7e5      	b.n	800df2c <__mdiff+0x28>
 800df60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df64:	6926      	ldr	r6, [r4, #16]
 800df66:	60c5      	str	r5, [r0, #12]
 800df68:	f104 0914 	add.w	r9, r4, #20
 800df6c:	f108 0514 	add.w	r5, r8, #20
 800df70:	f100 0e14 	add.w	lr, r0, #20
 800df74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800df78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800df7c:	f108 0210 	add.w	r2, r8, #16
 800df80:	46f2      	mov	sl, lr
 800df82:	2100      	movs	r1, #0
 800df84:	f859 3b04 	ldr.w	r3, [r9], #4
 800df88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df8c:	fa11 f88b 	uxtah	r8, r1, fp
 800df90:	b299      	uxth	r1, r3
 800df92:	0c1b      	lsrs	r3, r3, #16
 800df94:	eba8 0801 	sub.w	r8, r8, r1
 800df98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dfa0:	fa1f f888 	uxth.w	r8, r8
 800dfa4:	1419      	asrs	r1, r3, #16
 800dfa6:	454e      	cmp	r6, r9
 800dfa8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dfac:	f84a 3b04 	str.w	r3, [sl], #4
 800dfb0:	d8e8      	bhi.n	800df84 <__mdiff+0x80>
 800dfb2:	1b33      	subs	r3, r6, r4
 800dfb4:	3b15      	subs	r3, #21
 800dfb6:	f023 0303 	bic.w	r3, r3, #3
 800dfba:	3304      	adds	r3, #4
 800dfbc:	3415      	adds	r4, #21
 800dfbe:	42a6      	cmp	r6, r4
 800dfc0:	bf38      	it	cc
 800dfc2:	2304      	movcc	r3, #4
 800dfc4:	441d      	add	r5, r3
 800dfc6:	4473      	add	r3, lr
 800dfc8:	469e      	mov	lr, r3
 800dfca:	462e      	mov	r6, r5
 800dfcc:	4566      	cmp	r6, ip
 800dfce:	d30e      	bcc.n	800dfee <__mdiff+0xea>
 800dfd0:	f10c 0203 	add.w	r2, ip, #3
 800dfd4:	1b52      	subs	r2, r2, r5
 800dfd6:	f022 0203 	bic.w	r2, r2, #3
 800dfda:	3d03      	subs	r5, #3
 800dfdc:	45ac      	cmp	ip, r5
 800dfde:	bf38      	it	cc
 800dfe0:	2200      	movcc	r2, #0
 800dfe2:	4413      	add	r3, r2
 800dfe4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dfe8:	b17a      	cbz	r2, 800e00a <__mdiff+0x106>
 800dfea:	6107      	str	r7, [r0, #16]
 800dfec:	e7a4      	b.n	800df38 <__mdiff+0x34>
 800dfee:	f856 8b04 	ldr.w	r8, [r6], #4
 800dff2:	fa11 f288 	uxtah	r2, r1, r8
 800dff6:	1414      	asrs	r4, r2, #16
 800dff8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dffc:	b292      	uxth	r2, r2
 800dffe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e002:	f84e 2b04 	str.w	r2, [lr], #4
 800e006:	1421      	asrs	r1, r4, #16
 800e008:	e7e0      	b.n	800dfcc <__mdiff+0xc8>
 800e00a:	3f01      	subs	r7, #1
 800e00c:	e7ea      	b.n	800dfe4 <__mdiff+0xe0>
 800e00e:	bf00      	nop
 800e010:	080107d0 	.word	0x080107d0
 800e014:	080107e1 	.word	0x080107e1

0800e018 <__d2b>:
 800e018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e01c:	460f      	mov	r7, r1
 800e01e:	2101      	movs	r1, #1
 800e020:	ec59 8b10 	vmov	r8, r9, d0
 800e024:	4616      	mov	r6, r2
 800e026:	f7ff fcd5 	bl	800d9d4 <_Balloc>
 800e02a:	4604      	mov	r4, r0
 800e02c:	b930      	cbnz	r0, 800e03c <__d2b+0x24>
 800e02e:	4602      	mov	r2, r0
 800e030:	4b24      	ldr	r3, [pc, #144]	; (800e0c4 <__d2b+0xac>)
 800e032:	4825      	ldr	r0, [pc, #148]	; (800e0c8 <__d2b+0xb0>)
 800e034:	f240 310f 	movw	r1, #783	; 0x30f
 800e038:	f000 fa86 	bl	800e548 <__assert_func>
 800e03c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e044:	bb2d      	cbnz	r5, 800e092 <__d2b+0x7a>
 800e046:	9301      	str	r3, [sp, #4]
 800e048:	f1b8 0300 	subs.w	r3, r8, #0
 800e04c:	d026      	beq.n	800e09c <__d2b+0x84>
 800e04e:	4668      	mov	r0, sp
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	f7ff fd87 	bl	800db64 <__lo0bits>
 800e056:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e05a:	b1e8      	cbz	r0, 800e098 <__d2b+0x80>
 800e05c:	f1c0 0320 	rsb	r3, r0, #32
 800e060:	fa02 f303 	lsl.w	r3, r2, r3
 800e064:	430b      	orrs	r3, r1
 800e066:	40c2      	lsrs	r2, r0
 800e068:	6163      	str	r3, [r4, #20]
 800e06a:	9201      	str	r2, [sp, #4]
 800e06c:	9b01      	ldr	r3, [sp, #4]
 800e06e:	61a3      	str	r3, [r4, #24]
 800e070:	2b00      	cmp	r3, #0
 800e072:	bf14      	ite	ne
 800e074:	2202      	movne	r2, #2
 800e076:	2201      	moveq	r2, #1
 800e078:	6122      	str	r2, [r4, #16]
 800e07a:	b1bd      	cbz	r5, 800e0ac <__d2b+0x94>
 800e07c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e080:	4405      	add	r5, r0
 800e082:	603d      	str	r5, [r7, #0]
 800e084:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e088:	6030      	str	r0, [r6, #0]
 800e08a:	4620      	mov	r0, r4
 800e08c:	b003      	add	sp, #12
 800e08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e096:	e7d6      	b.n	800e046 <__d2b+0x2e>
 800e098:	6161      	str	r1, [r4, #20]
 800e09a:	e7e7      	b.n	800e06c <__d2b+0x54>
 800e09c:	a801      	add	r0, sp, #4
 800e09e:	f7ff fd61 	bl	800db64 <__lo0bits>
 800e0a2:	9b01      	ldr	r3, [sp, #4]
 800e0a4:	6163      	str	r3, [r4, #20]
 800e0a6:	3020      	adds	r0, #32
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	e7e5      	b.n	800e078 <__d2b+0x60>
 800e0ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e0b4:	6038      	str	r0, [r7, #0]
 800e0b6:	6918      	ldr	r0, [r3, #16]
 800e0b8:	f7ff fd34 	bl	800db24 <__hi0bits>
 800e0bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0c0:	e7e2      	b.n	800e088 <__d2b+0x70>
 800e0c2:	bf00      	nop
 800e0c4:	080107d0 	.word	0x080107d0
 800e0c8:	080107e1 	.word	0x080107e1

0800e0cc <__ssputs_r>:
 800e0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d0:	688e      	ldr	r6, [r1, #8]
 800e0d2:	461f      	mov	r7, r3
 800e0d4:	42be      	cmp	r6, r7
 800e0d6:	680b      	ldr	r3, [r1, #0]
 800e0d8:	4682      	mov	sl, r0
 800e0da:	460c      	mov	r4, r1
 800e0dc:	4690      	mov	r8, r2
 800e0de:	d82c      	bhi.n	800e13a <__ssputs_r+0x6e>
 800e0e0:	898a      	ldrh	r2, [r1, #12]
 800e0e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0e6:	d026      	beq.n	800e136 <__ssputs_r+0x6a>
 800e0e8:	6965      	ldr	r5, [r4, #20]
 800e0ea:	6909      	ldr	r1, [r1, #16]
 800e0ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0f0:	eba3 0901 	sub.w	r9, r3, r1
 800e0f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0f8:	1c7b      	adds	r3, r7, #1
 800e0fa:	444b      	add	r3, r9
 800e0fc:	106d      	asrs	r5, r5, #1
 800e0fe:	429d      	cmp	r5, r3
 800e100:	bf38      	it	cc
 800e102:	461d      	movcc	r5, r3
 800e104:	0553      	lsls	r3, r2, #21
 800e106:	d527      	bpl.n	800e158 <__ssputs_r+0x8c>
 800e108:	4629      	mov	r1, r5
 800e10a:	f7ff fbd7 	bl	800d8bc <_malloc_r>
 800e10e:	4606      	mov	r6, r0
 800e110:	b360      	cbz	r0, 800e16c <__ssputs_r+0xa0>
 800e112:	6921      	ldr	r1, [r4, #16]
 800e114:	464a      	mov	r2, r9
 800e116:	f000 fa09 	bl	800e52c <memcpy>
 800e11a:	89a3      	ldrh	r3, [r4, #12]
 800e11c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e124:	81a3      	strh	r3, [r4, #12]
 800e126:	6126      	str	r6, [r4, #16]
 800e128:	6165      	str	r5, [r4, #20]
 800e12a:	444e      	add	r6, r9
 800e12c:	eba5 0509 	sub.w	r5, r5, r9
 800e130:	6026      	str	r6, [r4, #0]
 800e132:	60a5      	str	r5, [r4, #8]
 800e134:	463e      	mov	r6, r7
 800e136:	42be      	cmp	r6, r7
 800e138:	d900      	bls.n	800e13c <__ssputs_r+0x70>
 800e13a:	463e      	mov	r6, r7
 800e13c:	6820      	ldr	r0, [r4, #0]
 800e13e:	4632      	mov	r2, r6
 800e140:	4641      	mov	r1, r8
 800e142:	f000 f9c9 	bl	800e4d8 <memmove>
 800e146:	68a3      	ldr	r3, [r4, #8]
 800e148:	1b9b      	subs	r3, r3, r6
 800e14a:	60a3      	str	r3, [r4, #8]
 800e14c:	6823      	ldr	r3, [r4, #0]
 800e14e:	4433      	add	r3, r6
 800e150:	6023      	str	r3, [r4, #0]
 800e152:	2000      	movs	r0, #0
 800e154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e158:	462a      	mov	r2, r5
 800e15a:	f000 fa3b 	bl	800e5d4 <_realloc_r>
 800e15e:	4606      	mov	r6, r0
 800e160:	2800      	cmp	r0, #0
 800e162:	d1e0      	bne.n	800e126 <__ssputs_r+0x5a>
 800e164:	6921      	ldr	r1, [r4, #16]
 800e166:	4650      	mov	r0, sl
 800e168:	f7ff fb34 	bl	800d7d4 <_free_r>
 800e16c:	230c      	movs	r3, #12
 800e16e:	f8ca 3000 	str.w	r3, [sl]
 800e172:	89a3      	ldrh	r3, [r4, #12]
 800e174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e178:	81a3      	strh	r3, [r4, #12]
 800e17a:	f04f 30ff 	mov.w	r0, #4294967295
 800e17e:	e7e9      	b.n	800e154 <__ssputs_r+0x88>

0800e180 <_svfiprintf_r>:
 800e180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e184:	4698      	mov	r8, r3
 800e186:	898b      	ldrh	r3, [r1, #12]
 800e188:	061b      	lsls	r3, r3, #24
 800e18a:	b09d      	sub	sp, #116	; 0x74
 800e18c:	4607      	mov	r7, r0
 800e18e:	460d      	mov	r5, r1
 800e190:	4614      	mov	r4, r2
 800e192:	d50e      	bpl.n	800e1b2 <_svfiprintf_r+0x32>
 800e194:	690b      	ldr	r3, [r1, #16]
 800e196:	b963      	cbnz	r3, 800e1b2 <_svfiprintf_r+0x32>
 800e198:	2140      	movs	r1, #64	; 0x40
 800e19a:	f7ff fb8f 	bl	800d8bc <_malloc_r>
 800e19e:	6028      	str	r0, [r5, #0]
 800e1a0:	6128      	str	r0, [r5, #16]
 800e1a2:	b920      	cbnz	r0, 800e1ae <_svfiprintf_r+0x2e>
 800e1a4:	230c      	movs	r3, #12
 800e1a6:	603b      	str	r3, [r7, #0]
 800e1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ac:	e0d0      	b.n	800e350 <_svfiprintf_r+0x1d0>
 800e1ae:	2340      	movs	r3, #64	; 0x40
 800e1b0:	616b      	str	r3, [r5, #20]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e1b6:	2320      	movs	r3, #32
 800e1b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1c0:	2330      	movs	r3, #48	; 0x30
 800e1c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e368 <_svfiprintf_r+0x1e8>
 800e1c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1ca:	f04f 0901 	mov.w	r9, #1
 800e1ce:	4623      	mov	r3, r4
 800e1d0:	469a      	mov	sl, r3
 800e1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1d6:	b10a      	cbz	r2, 800e1dc <_svfiprintf_r+0x5c>
 800e1d8:	2a25      	cmp	r2, #37	; 0x25
 800e1da:	d1f9      	bne.n	800e1d0 <_svfiprintf_r+0x50>
 800e1dc:	ebba 0b04 	subs.w	fp, sl, r4
 800e1e0:	d00b      	beq.n	800e1fa <_svfiprintf_r+0x7a>
 800e1e2:	465b      	mov	r3, fp
 800e1e4:	4622      	mov	r2, r4
 800e1e6:	4629      	mov	r1, r5
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	f7ff ff6f 	bl	800e0cc <__ssputs_r>
 800e1ee:	3001      	adds	r0, #1
 800e1f0:	f000 80a9 	beq.w	800e346 <_svfiprintf_r+0x1c6>
 800e1f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1f6:	445a      	add	r2, fp
 800e1f8:	9209      	str	r2, [sp, #36]	; 0x24
 800e1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	f000 80a1 	beq.w	800e346 <_svfiprintf_r+0x1c6>
 800e204:	2300      	movs	r3, #0
 800e206:	f04f 32ff 	mov.w	r2, #4294967295
 800e20a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e20e:	f10a 0a01 	add.w	sl, sl, #1
 800e212:	9304      	str	r3, [sp, #16]
 800e214:	9307      	str	r3, [sp, #28]
 800e216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e21a:	931a      	str	r3, [sp, #104]	; 0x68
 800e21c:	4654      	mov	r4, sl
 800e21e:	2205      	movs	r2, #5
 800e220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e224:	4850      	ldr	r0, [pc, #320]	; (800e368 <_svfiprintf_r+0x1e8>)
 800e226:	f7f1 ffe3 	bl	80001f0 <memchr>
 800e22a:	9a04      	ldr	r2, [sp, #16]
 800e22c:	b9d8      	cbnz	r0, 800e266 <_svfiprintf_r+0xe6>
 800e22e:	06d0      	lsls	r0, r2, #27
 800e230:	bf44      	itt	mi
 800e232:	2320      	movmi	r3, #32
 800e234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e238:	0711      	lsls	r1, r2, #28
 800e23a:	bf44      	itt	mi
 800e23c:	232b      	movmi	r3, #43	; 0x2b
 800e23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e242:	f89a 3000 	ldrb.w	r3, [sl]
 800e246:	2b2a      	cmp	r3, #42	; 0x2a
 800e248:	d015      	beq.n	800e276 <_svfiprintf_r+0xf6>
 800e24a:	9a07      	ldr	r2, [sp, #28]
 800e24c:	4654      	mov	r4, sl
 800e24e:	2000      	movs	r0, #0
 800e250:	f04f 0c0a 	mov.w	ip, #10
 800e254:	4621      	mov	r1, r4
 800e256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e25a:	3b30      	subs	r3, #48	; 0x30
 800e25c:	2b09      	cmp	r3, #9
 800e25e:	d94d      	bls.n	800e2fc <_svfiprintf_r+0x17c>
 800e260:	b1b0      	cbz	r0, 800e290 <_svfiprintf_r+0x110>
 800e262:	9207      	str	r2, [sp, #28]
 800e264:	e014      	b.n	800e290 <_svfiprintf_r+0x110>
 800e266:	eba0 0308 	sub.w	r3, r0, r8
 800e26a:	fa09 f303 	lsl.w	r3, r9, r3
 800e26e:	4313      	orrs	r3, r2
 800e270:	9304      	str	r3, [sp, #16]
 800e272:	46a2      	mov	sl, r4
 800e274:	e7d2      	b.n	800e21c <_svfiprintf_r+0x9c>
 800e276:	9b03      	ldr	r3, [sp, #12]
 800e278:	1d19      	adds	r1, r3, #4
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	9103      	str	r1, [sp, #12]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	bfbb      	ittet	lt
 800e282:	425b      	neglt	r3, r3
 800e284:	f042 0202 	orrlt.w	r2, r2, #2
 800e288:	9307      	strge	r3, [sp, #28]
 800e28a:	9307      	strlt	r3, [sp, #28]
 800e28c:	bfb8      	it	lt
 800e28e:	9204      	strlt	r2, [sp, #16]
 800e290:	7823      	ldrb	r3, [r4, #0]
 800e292:	2b2e      	cmp	r3, #46	; 0x2e
 800e294:	d10c      	bne.n	800e2b0 <_svfiprintf_r+0x130>
 800e296:	7863      	ldrb	r3, [r4, #1]
 800e298:	2b2a      	cmp	r3, #42	; 0x2a
 800e29a:	d134      	bne.n	800e306 <_svfiprintf_r+0x186>
 800e29c:	9b03      	ldr	r3, [sp, #12]
 800e29e:	1d1a      	adds	r2, r3, #4
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	9203      	str	r2, [sp, #12]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	bfb8      	it	lt
 800e2a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2ac:	3402      	adds	r4, #2
 800e2ae:	9305      	str	r3, [sp, #20]
 800e2b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e378 <_svfiprintf_r+0x1f8>
 800e2b4:	7821      	ldrb	r1, [r4, #0]
 800e2b6:	2203      	movs	r2, #3
 800e2b8:	4650      	mov	r0, sl
 800e2ba:	f7f1 ff99 	bl	80001f0 <memchr>
 800e2be:	b138      	cbz	r0, 800e2d0 <_svfiprintf_r+0x150>
 800e2c0:	9b04      	ldr	r3, [sp, #16]
 800e2c2:	eba0 000a 	sub.w	r0, r0, sl
 800e2c6:	2240      	movs	r2, #64	; 0x40
 800e2c8:	4082      	lsls	r2, r0
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	3401      	adds	r4, #1
 800e2ce:	9304      	str	r3, [sp, #16]
 800e2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2d4:	4825      	ldr	r0, [pc, #148]	; (800e36c <_svfiprintf_r+0x1ec>)
 800e2d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2da:	2206      	movs	r2, #6
 800e2dc:	f7f1 ff88 	bl	80001f0 <memchr>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d038      	beq.n	800e356 <_svfiprintf_r+0x1d6>
 800e2e4:	4b22      	ldr	r3, [pc, #136]	; (800e370 <_svfiprintf_r+0x1f0>)
 800e2e6:	bb1b      	cbnz	r3, 800e330 <_svfiprintf_r+0x1b0>
 800e2e8:	9b03      	ldr	r3, [sp, #12]
 800e2ea:	3307      	adds	r3, #7
 800e2ec:	f023 0307 	bic.w	r3, r3, #7
 800e2f0:	3308      	adds	r3, #8
 800e2f2:	9303      	str	r3, [sp, #12]
 800e2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2f6:	4433      	add	r3, r6
 800e2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2fa:	e768      	b.n	800e1ce <_svfiprintf_r+0x4e>
 800e2fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e300:	460c      	mov	r4, r1
 800e302:	2001      	movs	r0, #1
 800e304:	e7a6      	b.n	800e254 <_svfiprintf_r+0xd4>
 800e306:	2300      	movs	r3, #0
 800e308:	3401      	adds	r4, #1
 800e30a:	9305      	str	r3, [sp, #20]
 800e30c:	4619      	mov	r1, r3
 800e30e:	f04f 0c0a 	mov.w	ip, #10
 800e312:	4620      	mov	r0, r4
 800e314:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e318:	3a30      	subs	r2, #48	; 0x30
 800e31a:	2a09      	cmp	r2, #9
 800e31c:	d903      	bls.n	800e326 <_svfiprintf_r+0x1a6>
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d0c6      	beq.n	800e2b0 <_svfiprintf_r+0x130>
 800e322:	9105      	str	r1, [sp, #20]
 800e324:	e7c4      	b.n	800e2b0 <_svfiprintf_r+0x130>
 800e326:	fb0c 2101 	mla	r1, ip, r1, r2
 800e32a:	4604      	mov	r4, r0
 800e32c:	2301      	movs	r3, #1
 800e32e:	e7f0      	b.n	800e312 <_svfiprintf_r+0x192>
 800e330:	ab03      	add	r3, sp, #12
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	462a      	mov	r2, r5
 800e336:	4b0f      	ldr	r3, [pc, #60]	; (800e374 <_svfiprintf_r+0x1f4>)
 800e338:	a904      	add	r1, sp, #16
 800e33a:	4638      	mov	r0, r7
 800e33c:	f7fd fe64 	bl	800c008 <_printf_float>
 800e340:	1c42      	adds	r2, r0, #1
 800e342:	4606      	mov	r6, r0
 800e344:	d1d6      	bne.n	800e2f4 <_svfiprintf_r+0x174>
 800e346:	89ab      	ldrh	r3, [r5, #12]
 800e348:	065b      	lsls	r3, r3, #25
 800e34a:	f53f af2d 	bmi.w	800e1a8 <_svfiprintf_r+0x28>
 800e34e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e350:	b01d      	add	sp, #116	; 0x74
 800e352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e356:	ab03      	add	r3, sp, #12
 800e358:	9300      	str	r3, [sp, #0]
 800e35a:	462a      	mov	r2, r5
 800e35c:	4b05      	ldr	r3, [pc, #20]	; (800e374 <_svfiprintf_r+0x1f4>)
 800e35e:	a904      	add	r1, sp, #16
 800e360:	4638      	mov	r0, r7
 800e362:	f7fe f8f5 	bl	800c550 <_printf_i>
 800e366:	e7eb      	b.n	800e340 <_svfiprintf_r+0x1c0>
 800e368:	0801093c 	.word	0x0801093c
 800e36c:	08010946 	.word	0x08010946
 800e370:	0800c009 	.word	0x0800c009
 800e374:	0800e0cd 	.word	0x0800e0cd
 800e378:	08010942 	.word	0x08010942

0800e37c <__sflush_r>:
 800e37c:	898a      	ldrh	r2, [r1, #12]
 800e37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e382:	4605      	mov	r5, r0
 800e384:	0710      	lsls	r0, r2, #28
 800e386:	460c      	mov	r4, r1
 800e388:	d458      	bmi.n	800e43c <__sflush_r+0xc0>
 800e38a:	684b      	ldr	r3, [r1, #4]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	dc05      	bgt.n	800e39c <__sflush_r+0x20>
 800e390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e392:	2b00      	cmp	r3, #0
 800e394:	dc02      	bgt.n	800e39c <__sflush_r+0x20>
 800e396:	2000      	movs	r0, #0
 800e398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e39e:	2e00      	cmp	r6, #0
 800e3a0:	d0f9      	beq.n	800e396 <__sflush_r+0x1a>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e3a8:	682f      	ldr	r7, [r5, #0]
 800e3aa:	6a21      	ldr	r1, [r4, #32]
 800e3ac:	602b      	str	r3, [r5, #0]
 800e3ae:	d032      	beq.n	800e416 <__sflush_r+0x9a>
 800e3b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e3b2:	89a3      	ldrh	r3, [r4, #12]
 800e3b4:	075a      	lsls	r2, r3, #29
 800e3b6:	d505      	bpl.n	800e3c4 <__sflush_r+0x48>
 800e3b8:	6863      	ldr	r3, [r4, #4]
 800e3ba:	1ac0      	subs	r0, r0, r3
 800e3bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3be:	b10b      	cbz	r3, 800e3c4 <__sflush_r+0x48>
 800e3c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3c2:	1ac0      	subs	r0, r0, r3
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3ca:	6a21      	ldr	r1, [r4, #32]
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	47b0      	blx	r6
 800e3d0:	1c43      	adds	r3, r0, #1
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	d106      	bne.n	800e3e4 <__sflush_r+0x68>
 800e3d6:	6829      	ldr	r1, [r5, #0]
 800e3d8:	291d      	cmp	r1, #29
 800e3da:	d82b      	bhi.n	800e434 <__sflush_r+0xb8>
 800e3dc:	4a29      	ldr	r2, [pc, #164]	; (800e484 <__sflush_r+0x108>)
 800e3de:	410a      	asrs	r2, r1
 800e3e0:	07d6      	lsls	r6, r2, #31
 800e3e2:	d427      	bmi.n	800e434 <__sflush_r+0xb8>
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	6062      	str	r2, [r4, #4]
 800e3e8:	04d9      	lsls	r1, r3, #19
 800e3ea:	6922      	ldr	r2, [r4, #16]
 800e3ec:	6022      	str	r2, [r4, #0]
 800e3ee:	d504      	bpl.n	800e3fa <__sflush_r+0x7e>
 800e3f0:	1c42      	adds	r2, r0, #1
 800e3f2:	d101      	bne.n	800e3f8 <__sflush_r+0x7c>
 800e3f4:	682b      	ldr	r3, [r5, #0]
 800e3f6:	b903      	cbnz	r3, 800e3fa <__sflush_r+0x7e>
 800e3f8:	6560      	str	r0, [r4, #84]	; 0x54
 800e3fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3fc:	602f      	str	r7, [r5, #0]
 800e3fe:	2900      	cmp	r1, #0
 800e400:	d0c9      	beq.n	800e396 <__sflush_r+0x1a>
 800e402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e406:	4299      	cmp	r1, r3
 800e408:	d002      	beq.n	800e410 <__sflush_r+0x94>
 800e40a:	4628      	mov	r0, r5
 800e40c:	f7ff f9e2 	bl	800d7d4 <_free_r>
 800e410:	2000      	movs	r0, #0
 800e412:	6360      	str	r0, [r4, #52]	; 0x34
 800e414:	e7c0      	b.n	800e398 <__sflush_r+0x1c>
 800e416:	2301      	movs	r3, #1
 800e418:	4628      	mov	r0, r5
 800e41a:	47b0      	blx	r6
 800e41c:	1c41      	adds	r1, r0, #1
 800e41e:	d1c8      	bne.n	800e3b2 <__sflush_r+0x36>
 800e420:	682b      	ldr	r3, [r5, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d0c5      	beq.n	800e3b2 <__sflush_r+0x36>
 800e426:	2b1d      	cmp	r3, #29
 800e428:	d001      	beq.n	800e42e <__sflush_r+0xb2>
 800e42a:	2b16      	cmp	r3, #22
 800e42c:	d101      	bne.n	800e432 <__sflush_r+0xb6>
 800e42e:	602f      	str	r7, [r5, #0]
 800e430:	e7b1      	b.n	800e396 <__sflush_r+0x1a>
 800e432:	89a3      	ldrh	r3, [r4, #12]
 800e434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e438:	81a3      	strh	r3, [r4, #12]
 800e43a:	e7ad      	b.n	800e398 <__sflush_r+0x1c>
 800e43c:	690f      	ldr	r7, [r1, #16]
 800e43e:	2f00      	cmp	r7, #0
 800e440:	d0a9      	beq.n	800e396 <__sflush_r+0x1a>
 800e442:	0793      	lsls	r3, r2, #30
 800e444:	680e      	ldr	r6, [r1, #0]
 800e446:	bf08      	it	eq
 800e448:	694b      	ldreq	r3, [r1, #20]
 800e44a:	600f      	str	r7, [r1, #0]
 800e44c:	bf18      	it	ne
 800e44e:	2300      	movne	r3, #0
 800e450:	eba6 0807 	sub.w	r8, r6, r7
 800e454:	608b      	str	r3, [r1, #8]
 800e456:	f1b8 0f00 	cmp.w	r8, #0
 800e45a:	dd9c      	ble.n	800e396 <__sflush_r+0x1a>
 800e45c:	6a21      	ldr	r1, [r4, #32]
 800e45e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e460:	4643      	mov	r3, r8
 800e462:	463a      	mov	r2, r7
 800e464:	4628      	mov	r0, r5
 800e466:	47b0      	blx	r6
 800e468:	2800      	cmp	r0, #0
 800e46a:	dc06      	bgt.n	800e47a <__sflush_r+0xfe>
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e472:	81a3      	strh	r3, [r4, #12]
 800e474:	f04f 30ff 	mov.w	r0, #4294967295
 800e478:	e78e      	b.n	800e398 <__sflush_r+0x1c>
 800e47a:	4407      	add	r7, r0
 800e47c:	eba8 0800 	sub.w	r8, r8, r0
 800e480:	e7e9      	b.n	800e456 <__sflush_r+0xda>
 800e482:	bf00      	nop
 800e484:	dfbffffe 	.word	0xdfbffffe

0800e488 <_fflush_r>:
 800e488:	b538      	push	{r3, r4, r5, lr}
 800e48a:	690b      	ldr	r3, [r1, #16]
 800e48c:	4605      	mov	r5, r0
 800e48e:	460c      	mov	r4, r1
 800e490:	b913      	cbnz	r3, 800e498 <_fflush_r+0x10>
 800e492:	2500      	movs	r5, #0
 800e494:	4628      	mov	r0, r5
 800e496:	bd38      	pop	{r3, r4, r5, pc}
 800e498:	b118      	cbz	r0, 800e4a2 <_fflush_r+0x1a>
 800e49a:	6a03      	ldr	r3, [r0, #32]
 800e49c:	b90b      	cbnz	r3, 800e4a2 <_fflush_r+0x1a>
 800e49e:	f7fe fa05 	bl	800c8ac <__sinit>
 800e4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d0f3      	beq.n	800e492 <_fflush_r+0xa>
 800e4aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4ac:	07d0      	lsls	r0, r2, #31
 800e4ae:	d404      	bmi.n	800e4ba <_fflush_r+0x32>
 800e4b0:	0599      	lsls	r1, r3, #22
 800e4b2:	d402      	bmi.n	800e4ba <_fflush_r+0x32>
 800e4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4b6:	f7fe fb10 	bl	800cada <__retarget_lock_acquire_recursive>
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	4621      	mov	r1, r4
 800e4be:	f7ff ff5d 	bl	800e37c <__sflush_r>
 800e4c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4c4:	07da      	lsls	r2, r3, #31
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	d4e4      	bmi.n	800e494 <_fflush_r+0xc>
 800e4ca:	89a3      	ldrh	r3, [r4, #12]
 800e4cc:	059b      	lsls	r3, r3, #22
 800e4ce:	d4e1      	bmi.n	800e494 <_fflush_r+0xc>
 800e4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4d2:	f7fe fb03 	bl	800cadc <__retarget_lock_release_recursive>
 800e4d6:	e7dd      	b.n	800e494 <_fflush_r+0xc>

0800e4d8 <memmove>:
 800e4d8:	4288      	cmp	r0, r1
 800e4da:	b510      	push	{r4, lr}
 800e4dc:	eb01 0402 	add.w	r4, r1, r2
 800e4e0:	d902      	bls.n	800e4e8 <memmove+0x10>
 800e4e2:	4284      	cmp	r4, r0
 800e4e4:	4623      	mov	r3, r4
 800e4e6:	d807      	bhi.n	800e4f8 <memmove+0x20>
 800e4e8:	1e43      	subs	r3, r0, #1
 800e4ea:	42a1      	cmp	r1, r4
 800e4ec:	d008      	beq.n	800e500 <memmove+0x28>
 800e4ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4f6:	e7f8      	b.n	800e4ea <memmove+0x12>
 800e4f8:	4402      	add	r2, r0
 800e4fa:	4601      	mov	r1, r0
 800e4fc:	428a      	cmp	r2, r1
 800e4fe:	d100      	bne.n	800e502 <memmove+0x2a>
 800e500:	bd10      	pop	{r4, pc}
 800e502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e50a:	e7f7      	b.n	800e4fc <memmove+0x24>

0800e50c <_sbrk_r>:
 800e50c:	b538      	push	{r3, r4, r5, lr}
 800e50e:	4d06      	ldr	r5, [pc, #24]	; (800e528 <_sbrk_r+0x1c>)
 800e510:	2300      	movs	r3, #0
 800e512:	4604      	mov	r4, r0
 800e514:	4608      	mov	r0, r1
 800e516:	602b      	str	r3, [r5, #0]
 800e518:	f7f3 f846 	bl	80015a8 <_sbrk>
 800e51c:	1c43      	adds	r3, r0, #1
 800e51e:	d102      	bne.n	800e526 <_sbrk_r+0x1a>
 800e520:	682b      	ldr	r3, [r5, #0]
 800e522:	b103      	cbz	r3, 800e526 <_sbrk_r+0x1a>
 800e524:	6023      	str	r3, [r4, #0]
 800e526:	bd38      	pop	{r3, r4, r5, pc}
 800e528:	200023c4 	.word	0x200023c4

0800e52c <memcpy>:
 800e52c:	440a      	add	r2, r1
 800e52e:	4291      	cmp	r1, r2
 800e530:	f100 33ff 	add.w	r3, r0, #4294967295
 800e534:	d100      	bne.n	800e538 <memcpy+0xc>
 800e536:	4770      	bx	lr
 800e538:	b510      	push	{r4, lr}
 800e53a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e53e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e542:	4291      	cmp	r1, r2
 800e544:	d1f9      	bne.n	800e53a <memcpy+0xe>
 800e546:	bd10      	pop	{r4, pc}

0800e548 <__assert_func>:
 800e548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e54a:	4614      	mov	r4, r2
 800e54c:	461a      	mov	r2, r3
 800e54e:	4b09      	ldr	r3, [pc, #36]	; (800e574 <__assert_func+0x2c>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4605      	mov	r5, r0
 800e554:	68d8      	ldr	r0, [r3, #12]
 800e556:	b14c      	cbz	r4, 800e56c <__assert_func+0x24>
 800e558:	4b07      	ldr	r3, [pc, #28]	; (800e578 <__assert_func+0x30>)
 800e55a:	9100      	str	r1, [sp, #0]
 800e55c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e560:	4906      	ldr	r1, [pc, #24]	; (800e57c <__assert_func+0x34>)
 800e562:	462b      	mov	r3, r5
 800e564:	f000 f872 	bl	800e64c <fiprintf>
 800e568:	f000 f882 	bl	800e670 <abort>
 800e56c:	4b04      	ldr	r3, [pc, #16]	; (800e580 <__assert_func+0x38>)
 800e56e:	461c      	mov	r4, r3
 800e570:	e7f3      	b.n	800e55a <__assert_func+0x12>
 800e572:	bf00      	nop
 800e574:	200001d0 	.word	0x200001d0
 800e578:	08010957 	.word	0x08010957
 800e57c:	08010964 	.word	0x08010964
 800e580:	08010992 	.word	0x08010992

0800e584 <_calloc_r>:
 800e584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e586:	fba1 2402 	umull	r2, r4, r1, r2
 800e58a:	b94c      	cbnz	r4, 800e5a0 <_calloc_r+0x1c>
 800e58c:	4611      	mov	r1, r2
 800e58e:	9201      	str	r2, [sp, #4]
 800e590:	f7ff f994 	bl	800d8bc <_malloc_r>
 800e594:	9a01      	ldr	r2, [sp, #4]
 800e596:	4605      	mov	r5, r0
 800e598:	b930      	cbnz	r0, 800e5a8 <_calloc_r+0x24>
 800e59a:	4628      	mov	r0, r5
 800e59c:	b003      	add	sp, #12
 800e59e:	bd30      	pop	{r4, r5, pc}
 800e5a0:	220c      	movs	r2, #12
 800e5a2:	6002      	str	r2, [r0, #0]
 800e5a4:	2500      	movs	r5, #0
 800e5a6:	e7f8      	b.n	800e59a <_calloc_r+0x16>
 800e5a8:	4621      	mov	r1, r4
 800e5aa:	f7fe fa18 	bl	800c9de <memset>
 800e5ae:	e7f4      	b.n	800e59a <_calloc_r+0x16>

0800e5b0 <__ascii_mbtowc>:
 800e5b0:	b082      	sub	sp, #8
 800e5b2:	b901      	cbnz	r1, 800e5b6 <__ascii_mbtowc+0x6>
 800e5b4:	a901      	add	r1, sp, #4
 800e5b6:	b142      	cbz	r2, 800e5ca <__ascii_mbtowc+0x1a>
 800e5b8:	b14b      	cbz	r3, 800e5ce <__ascii_mbtowc+0x1e>
 800e5ba:	7813      	ldrb	r3, [r2, #0]
 800e5bc:	600b      	str	r3, [r1, #0]
 800e5be:	7812      	ldrb	r2, [r2, #0]
 800e5c0:	1e10      	subs	r0, r2, #0
 800e5c2:	bf18      	it	ne
 800e5c4:	2001      	movne	r0, #1
 800e5c6:	b002      	add	sp, #8
 800e5c8:	4770      	bx	lr
 800e5ca:	4610      	mov	r0, r2
 800e5cc:	e7fb      	b.n	800e5c6 <__ascii_mbtowc+0x16>
 800e5ce:	f06f 0001 	mvn.w	r0, #1
 800e5d2:	e7f8      	b.n	800e5c6 <__ascii_mbtowc+0x16>

0800e5d4 <_realloc_r>:
 800e5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d8:	4680      	mov	r8, r0
 800e5da:	4614      	mov	r4, r2
 800e5dc:	460e      	mov	r6, r1
 800e5de:	b921      	cbnz	r1, 800e5ea <_realloc_r+0x16>
 800e5e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	f7ff b969 	b.w	800d8bc <_malloc_r>
 800e5ea:	b92a      	cbnz	r2, 800e5f8 <_realloc_r+0x24>
 800e5ec:	f7ff f8f2 	bl	800d7d4 <_free_r>
 800e5f0:	4625      	mov	r5, r4
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5f8:	f000 f841 	bl	800e67e <_malloc_usable_size_r>
 800e5fc:	4284      	cmp	r4, r0
 800e5fe:	4607      	mov	r7, r0
 800e600:	d802      	bhi.n	800e608 <_realloc_r+0x34>
 800e602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e606:	d812      	bhi.n	800e62e <_realloc_r+0x5a>
 800e608:	4621      	mov	r1, r4
 800e60a:	4640      	mov	r0, r8
 800e60c:	f7ff f956 	bl	800d8bc <_malloc_r>
 800e610:	4605      	mov	r5, r0
 800e612:	2800      	cmp	r0, #0
 800e614:	d0ed      	beq.n	800e5f2 <_realloc_r+0x1e>
 800e616:	42bc      	cmp	r4, r7
 800e618:	4622      	mov	r2, r4
 800e61a:	4631      	mov	r1, r6
 800e61c:	bf28      	it	cs
 800e61e:	463a      	movcs	r2, r7
 800e620:	f7ff ff84 	bl	800e52c <memcpy>
 800e624:	4631      	mov	r1, r6
 800e626:	4640      	mov	r0, r8
 800e628:	f7ff f8d4 	bl	800d7d4 <_free_r>
 800e62c:	e7e1      	b.n	800e5f2 <_realloc_r+0x1e>
 800e62e:	4635      	mov	r5, r6
 800e630:	e7df      	b.n	800e5f2 <_realloc_r+0x1e>

0800e632 <__ascii_wctomb>:
 800e632:	b149      	cbz	r1, 800e648 <__ascii_wctomb+0x16>
 800e634:	2aff      	cmp	r2, #255	; 0xff
 800e636:	bf85      	ittet	hi
 800e638:	238a      	movhi	r3, #138	; 0x8a
 800e63a:	6003      	strhi	r3, [r0, #0]
 800e63c:	700a      	strbls	r2, [r1, #0]
 800e63e:	f04f 30ff 	movhi.w	r0, #4294967295
 800e642:	bf98      	it	ls
 800e644:	2001      	movls	r0, #1
 800e646:	4770      	bx	lr
 800e648:	4608      	mov	r0, r1
 800e64a:	4770      	bx	lr

0800e64c <fiprintf>:
 800e64c:	b40e      	push	{r1, r2, r3}
 800e64e:	b503      	push	{r0, r1, lr}
 800e650:	4601      	mov	r1, r0
 800e652:	ab03      	add	r3, sp, #12
 800e654:	4805      	ldr	r0, [pc, #20]	; (800e66c <fiprintf+0x20>)
 800e656:	f853 2b04 	ldr.w	r2, [r3], #4
 800e65a:	6800      	ldr	r0, [r0, #0]
 800e65c:	9301      	str	r3, [sp, #4]
 800e65e:	f000 f83f 	bl	800e6e0 <_vfiprintf_r>
 800e662:	b002      	add	sp, #8
 800e664:	f85d eb04 	ldr.w	lr, [sp], #4
 800e668:	b003      	add	sp, #12
 800e66a:	4770      	bx	lr
 800e66c:	200001d0 	.word	0x200001d0

0800e670 <abort>:
 800e670:	b508      	push	{r3, lr}
 800e672:	2006      	movs	r0, #6
 800e674:	f000 fa0c 	bl	800ea90 <raise>
 800e678:	2001      	movs	r0, #1
 800e67a:	f7f2 ff1d 	bl	80014b8 <_exit>

0800e67e <_malloc_usable_size_r>:
 800e67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e682:	1f18      	subs	r0, r3, #4
 800e684:	2b00      	cmp	r3, #0
 800e686:	bfbc      	itt	lt
 800e688:	580b      	ldrlt	r3, [r1, r0]
 800e68a:	18c0      	addlt	r0, r0, r3
 800e68c:	4770      	bx	lr

0800e68e <__sfputc_r>:
 800e68e:	6893      	ldr	r3, [r2, #8]
 800e690:	3b01      	subs	r3, #1
 800e692:	2b00      	cmp	r3, #0
 800e694:	b410      	push	{r4}
 800e696:	6093      	str	r3, [r2, #8]
 800e698:	da08      	bge.n	800e6ac <__sfputc_r+0x1e>
 800e69a:	6994      	ldr	r4, [r2, #24]
 800e69c:	42a3      	cmp	r3, r4
 800e69e:	db01      	blt.n	800e6a4 <__sfputc_r+0x16>
 800e6a0:	290a      	cmp	r1, #10
 800e6a2:	d103      	bne.n	800e6ac <__sfputc_r+0x1e>
 800e6a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6a8:	f000 b934 	b.w	800e914 <__swbuf_r>
 800e6ac:	6813      	ldr	r3, [r2, #0]
 800e6ae:	1c58      	adds	r0, r3, #1
 800e6b0:	6010      	str	r0, [r2, #0]
 800e6b2:	7019      	strb	r1, [r3, #0]
 800e6b4:	4608      	mov	r0, r1
 800e6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <__sfputs_r>:
 800e6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6be:	4606      	mov	r6, r0
 800e6c0:	460f      	mov	r7, r1
 800e6c2:	4614      	mov	r4, r2
 800e6c4:	18d5      	adds	r5, r2, r3
 800e6c6:	42ac      	cmp	r4, r5
 800e6c8:	d101      	bne.n	800e6ce <__sfputs_r+0x12>
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	e007      	b.n	800e6de <__sfputs_r+0x22>
 800e6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6d2:	463a      	mov	r2, r7
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	f7ff ffda 	bl	800e68e <__sfputc_r>
 800e6da:	1c43      	adds	r3, r0, #1
 800e6dc:	d1f3      	bne.n	800e6c6 <__sfputs_r+0xa>
 800e6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e6e0 <_vfiprintf_r>:
 800e6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e4:	460d      	mov	r5, r1
 800e6e6:	b09d      	sub	sp, #116	; 0x74
 800e6e8:	4614      	mov	r4, r2
 800e6ea:	4698      	mov	r8, r3
 800e6ec:	4606      	mov	r6, r0
 800e6ee:	b118      	cbz	r0, 800e6f8 <_vfiprintf_r+0x18>
 800e6f0:	6a03      	ldr	r3, [r0, #32]
 800e6f2:	b90b      	cbnz	r3, 800e6f8 <_vfiprintf_r+0x18>
 800e6f4:	f7fe f8da 	bl	800c8ac <__sinit>
 800e6f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6fa:	07d9      	lsls	r1, r3, #31
 800e6fc:	d405      	bmi.n	800e70a <_vfiprintf_r+0x2a>
 800e6fe:	89ab      	ldrh	r3, [r5, #12]
 800e700:	059a      	lsls	r2, r3, #22
 800e702:	d402      	bmi.n	800e70a <_vfiprintf_r+0x2a>
 800e704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e706:	f7fe f9e8 	bl	800cada <__retarget_lock_acquire_recursive>
 800e70a:	89ab      	ldrh	r3, [r5, #12]
 800e70c:	071b      	lsls	r3, r3, #28
 800e70e:	d501      	bpl.n	800e714 <_vfiprintf_r+0x34>
 800e710:	692b      	ldr	r3, [r5, #16]
 800e712:	b99b      	cbnz	r3, 800e73c <_vfiprintf_r+0x5c>
 800e714:	4629      	mov	r1, r5
 800e716:	4630      	mov	r0, r6
 800e718:	f000 f93a 	bl	800e990 <__swsetup_r>
 800e71c:	b170      	cbz	r0, 800e73c <_vfiprintf_r+0x5c>
 800e71e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e720:	07dc      	lsls	r4, r3, #31
 800e722:	d504      	bpl.n	800e72e <_vfiprintf_r+0x4e>
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	b01d      	add	sp, #116	; 0x74
 800e72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72e:	89ab      	ldrh	r3, [r5, #12]
 800e730:	0598      	lsls	r0, r3, #22
 800e732:	d4f7      	bmi.n	800e724 <_vfiprintf_r+0x44>
 800e734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e736:	f7fe f9d1 	bl	800cadc <__retarget_lock_release_recursive>
 800e73a:	e7f3      	b.n	800e724 <_vfiprintf_r+0x44>
 800e73c:	2300      	movs	r3, #0
 800e73e:	9309      	str	r3, [sp, #36]	; 0x24
 800e740:	2320      	movs	r3, #32
 800e742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e746:	f8cd 800c 	str.w	r8, [sp, #12]
 800e74a:	2330      	movs	r3, #48	; 0x30
 800e74c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e900 <_vfiprintf_r+0x220>
 800e750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e754:	f04f 0901 	mov.w	r9, #1
 800e758:	4623      	mov	r3, r4
 800e75a:	469a      	mov	sl, r3
 800e75c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e760:	b10a      	cbz	r2, 800e766 <_vfiprintf_r+0x86>
 800e762:	2a25      	cmp	r2, #37	; 0x25
 800e764:	d1f9      	bne.n	800e75a <_vfiprintf_r+0x7a>
 800e766:	ebba 0b04 	subs.w	fp, sl, r4
 800e76a:	d00b      	beq.n	800e784 <_vfiprintf_r+0xa4>
 800e76c:	465b      	mov	r3, fp
 800e76e:	4622      	mov	r2, r4
 800e770:	4629      	mov	r1, r5
 800e772:	4630      	mov	r0, r6
 800e774:	f7ff ffa2 	bl	800e6bc <__sfputs_r>
 800e778:	3001      	adds	r0, #1
 800e77a:	f000 80a9 	beq.w	800e8d0 <_vfiprintf_r+0x1f0>
 800e77e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e780:	445a      	add	r2, fp
 800e782:	9209      	str	r2, [sp, #36]	; 0x24
 800e784:	f89a 3000 	ldrb.w	r3, [sl]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f000 80a1 	beq.w	800e8d0 <_vfiprintf_r+0x1f0>
 800e78e:	2300      	movs	r3, #0
 800e790:	f04f 32ff 	mov.w	r2, #4294967295
 800e794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e798:	f10a 0a01 	add.w	sl, sl, #1
 800e79c:	9304      	str	r3, [sp, #16]
 800e79e:	9307      	str	r3, [sp, #28]
 800e7a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7a4:	931a      	str	r3, [sp, #104]	; 0x68
 800e7a6:	4654      	mov	r4, sl
 800e7a8:	2205      	movs	r2, #5
 800e7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ae:	4854      	ldr	r0, [pc, #336]	; (800e900 <_vfiprintf_r+0x220>)
 800e7b0:	f7f1 fd1e 	bl	80001f0 <memchr>
 800e7b4:	9a04      	ldr	r2, [sp, #16]
 800e7b6:	b9d8      	cbnz	r0, 800e7f0 <_vfiprintf_r+0x110>
 800e7b8:	06d1      	lsls	r1, r2, #27
 800e7ba:	bf44      	itt	mi
 800e7bc:	2320      	movmi	r3, #32
 800e7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7c2:	0713      	lsls	r3, r2, #28
 800e7c4:	bf44      	itt	mi
 800e7c6:	232b      	movmi	r3, #43	; 0x2b
 800e7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e7d0:	2b2a      	cmp	r3, #42	; 0x2a
 800e7d2:	d015      	beq.n	800e800 <_vfiprintf_r+0x120>
 800e7d4:	9a07      	ldr	r2, [sp, #28]
 800e7d6:	4654      	mov	r4, sl
 800e7d8:	2000      	movs	r0, #0
 800e7da:	f04f 0c0a 	mov.w	ip, #10
 800e7de:	4621      	mov	r1, r4
 800e7e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7e4:	3b30      	subs	r3, #48	; 0x30
 800e7e6:	2b09      	cmp	r3, #9
 800e7e8:	d94d      	bls.n	800e886 <_vfiprintf_r+0x1a6>
 800e7ea:	b1b0      	cbz	r0, 800e81a <_vfiprintf_r+0x13a>
 800e7ec:	9207      	str	r2, [sp, #28]
 800e7ee:	e014      	b.n	800e81a <_vfiprintf_r+0x13a>
 800e7f0:	eba0 0308 	sub.w	r3, r0, r8
 800e7f4:	fa09 f303 	lsl.w	r3, r9, r3
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	9304      	str	r3, [sp, #16]
 800e7fc:	46a2      	mov	sl, r4
 800e7fe:	e7d2      	b.n	800e7a6 <_vfiprintf_r+0xc6>
 800e800:	9b03      	ldr	r3, [sp, #12]
 800e802:	1d19      	adds	r1, r3, #4
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	9103      	str	r1, [sp, #12]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	bfbb      	ittet	lt
 800e80c:	425b      	neglt	r3, r3
 800e80e:	f042 0202 	orrlt.w	r2, r2, #2
 800e812:	9307      	strge	r3, [sp, #28]
 800e814:	9307      	strlt	r3, [sp, #28]
 800e816:	bfb8      	it	lt
 800e818:	9204      	strlt	r2, [sp, #16]
 800e81a:	7823      	ldrb	r3, [r4, #0]
 800e81c:	2b2e      	cmp	r3, #46	; 0x2e
 800e81e:	d10c      	bne.n	800e83a <_vfiprintf_r+0x15a>
 800e820:	7863      	ldrb	r3, [r4, #1]
 800e822:	2b2a      	cmp	r3, #42	; 0x2a
 800e824:	d134      	bne.n	800e890 <_vfiprintf_r+0x1b0>
 800e826:	9b03      	ldr	r3, [sp, #12]
 800e828:	1d1a      	adds	r2, r3, #4
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	9203      	str	r2, [sp, #12]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	bfb8      	it	lt
 800e832:	f04f 33ff 	movlt.w	r3, #4294967295
 800e836:	3402      	adds	r4, #2
 800e838:	9305      	str	r3, [sp, #20]
 800e83a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e910 <_vfiprintf_r+0x230>
 800e83e:	7821      	ldrb	r1, [r4, #0]
 800e840:	2203      	movs	r2, #3
 800e842:	4650      	mov	r0, sl
 800e844:	f7f1 fcd4 	bl	80001f0 <memchr>
 800e848:	b138      	cbz	r0, 800e85a <_vfiprintf_r+0x17a>
 800e84a:	9b04      	ldr	r3, [sp, #16]
 800e84c:	eba0 000a 	sub.w	r0, r0, sl
 800e850:	2240      	movs	r2, #64	; 0x40
 800e852:	4082      	lsls	r2, r0
 800e854:	4313      	orrs	r3, r2
 800e856:	3401      	adds	r4, #1
 800e858:	9304      	str	r3, [sp, #16]
 800e85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e85e:	4829      	ldr	r0, [pc, #164]	; (800e904 <_vfiprintf_r+0x224>)
 800e860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e864:	2206      	movs	r2, #6
 800e866:	f7f1 fcc3 	bl	80001f0 <memchr>
 800e86a:	2800      	cmp	r0, #0
 800e86c:	d03f      	beq.n	800e8ee <_vfiprintf_r+0x20e>
 800e86e:	4b26      	ldr	r3, [pc, #152]	; (800e908 <_vfiprintf_r+0x228>)
 800e870:	bb1b      	cbnz	r3, 800e8ba <_vfiprintf_r+0x1da>
 800e872:	9b03      	ldr	r3, [sp, #12]
 800e874:	3307      	adds	r3, #7
 800e876:	f023 0307 	bic.w	r3, r3, #7
 800e87a:	3308      	adds	r3, #8
 800e87c:	9303      	str	r3, [sp, #12]
 800e87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e880:	443b      	add	r3, r7
 800e882:	9309      	str	r3, [sp, #36]	; 0x24
 800e884:	e768      	b.n	800e758 <_vfiprintf_r+0x78>
 800e886:	fb0c 3202 	mla	r2, ip, r2, r3
 800e88a:	460c      	mov	r4, r1
 800e88c:	2001      	movs	r0, #1
 800e88e:	e7a6      	b.n	800e7de <_vfiprintf_r+0xfe>
 800e890:	2300      	movs	r3, #0
 800e892:	3401      	adds	r4, #1
 800e894:	9305      	str	r3, [sp, #20]
 800e896:	4619      	mov	r1, r3
 800e898:	f04f 0c0a 	mov.w	ip, #10
 800e89c:	4620      	mov	r0, r4
 800e89e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8a2:	3a30      	subs	r2, #48	; 0x30
 800e8a4:	2a09      	cmp	r2, #9
 800e8a6:	d903      	bls.n	800e8b0 <_vfiprintf_r+0x1d0>
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d0c6      	beq.n	800e83a <_vfiprintf_r+0x15a>
 800e8ac:	9105      	str	r1, [sp, #20]
 800e8ae:	e7c4      	b.n	800e83a <_vfiprintf_r+0x15a>
 800e8b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e7f0      	b.n	800e89c <_vfiprintf_r+0x1bc>
 800e8ba:	ab03      	add	r3, sp, #12
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	462a      	mov	r2, r5
 800e8c0:	4b12      	ldr	r3, [pc, #72]	; (800e90c <_vfiprintf_r+0x22c>)
 800e8c2:	a904      	add	r1, sp, #16
 800e8c4:	4630      	mov	r0, r6
 800e8c6:	f7fd fb9f 	bl	800c008 <_printf_float>
 800e8ca:	4607      	mov	r7, r0
 800e8cc:	1c78      	adds	r0, r7, #1
 800e8ce:	d1d6      	bne.n	800e87e <_vfiprintf_r+0x19e>
 800e8d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8d2:	07d9      	lsls	r1, r3, #31
 800e8d4:	d405      	bmi.n	800e8e2 <_vfiprintf_r+0x202>
 800e8d6:	89ab      	ldrh	r3, [r5, #12]
 800e8d8:	059a      	lsls	r2, r3, #22
 800e8da:	d402      	bmi.n	800e8e2 <_vfiprintf_r+0x202>
 800e8dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8de:	f7fe f8fd 	bl	800cadc <__retarget_lock_release_recursive>
 800e8e2:	89ab      	ldrh	r3, [r5, #12]
 800e8e4:	065b      	lsls	r3, r3, #25
 800e8e6:	f53f af1d 	bmi.w	800e724 <_vfiprintf_r+0x44>
 800e8ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8ec:	e71c      	b.n	800e728 <_vfiprintf_r+0x48>
 800e8ee:	ab03      	add	r3, sp, #12
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	462a      	mov	r2, r5
 800e8f4:	4b05      	ldr	r3, [pc, #20]	; (800e90c <_vfiprintf_r+0x22c>)
 800e8f6:	a904      	add	r1, sp, #16
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	f7fd fe29 	bl	800c550 <_printf_i>
 800e8fe:	e7e4      	b.n	800e8ca <_vfiprintf_r+0x1ea>
 800e900:	0801093c 	.word	0x0801093c
 800e904:	08010946 	.word	0x08010946
 800e908:	0800c009 	.word	0x0800c009
 800e90c:	0800e6bd 	.word	0x0800e6bd
 800e910:	08010942 	.word	0x08010942

0800e914 <__swbuf_r>:
 800e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e916:	460e      	mov	r6, r1
 800e918:	4614      	mov	r4, r2
 800e91a:	4605      	mov	r5, r0
 800e91c:	b118      	cbz	r0, 800e926 <__swbuf_r+0x12>
 800e91e:	6a03      	ldr	r3, [r0, #32]
 800e920:	b90b      	cbnz	r3, 800e926 <__swbuf_r+0x12>
 800e922:	f7fd ffc3 	bl	800c8ac <__sinit>
 800e926:	69a3      	ldr	r3, [r4, #24]
 800e928:	60a3      	str	r3, [r4, #8]
 800e92a:	89a3      	ldrh	r3, [r4, #12]
 800e92c:	071a      	lsls	r2, r3, #28
 800e92e:	d525      	bpl.n	800e97c <__swbuf_r+0x68>
 800e930:	6923      	ldr	r3, [r4, #16]
 800e932:	b31b      	cbz	r3, 800e97c <__swbuf_r+0x68>
 800e934:	6823      	ldr	r3, [r4, #0]
 800e936:	6922      	ldr	r2, [r4, #16]
 800e938:	1a98      	subs	r0, r3, r2
 800e93a:	6963      	ldr	r3, [r4, #20]
 800e93c:	b2f6      	uxtb	r6, r6
 800e93e:	4283      	cmp	r3, r0
 800e940:	4637      	mov	r7, r6
 800e942:	dc04      	bgt.n	800e94e <__swbuf_r+0x3a>
 800e944:	4621      	mov	r1, r4
 800e946:	4628      	mov	r0, r5
 800e948:	f7ff fd9e 	bl	800e488 <_fflush_r>
 800e94c:	b9e0      	cbnz	r0, 800e988 <__swbuf_r+0x74>
 800e94e:	68a3      	ldr	r3, [r4, #8]
 800e950:	3b01      	subs	r3, #1
 800e952:	60a3      	str	r3, [r4, #8]
 800e954:	6823      	ldr	r3, [r4, #0]
 800e956:	1c5a      	adds	r2, r3, #1
 800e958:	6022      	str	r2, [r4, #0]
 800e95a:	701e      	strb	r6, [r3, #0]
 800e95c:	6962      	ldr	r2, [r4, #20]
 800e95e:	1c43      	adds	r3, r0, #1
 800e960:	429a      	cmp	r2, r3
 800e962:	d004      	beq.n	800e96e <__swbuf_r+0x5a>
 800e964:	89a3      	ldrh	r3, [r4, #12]
 800e966:	07db      	lsls	r3, r3, #31
 800e968:	d506      	bpl.n	800e978 <__swbuf_r+0x64>
 800e96a:	2e0a      	cmp	r6, #10
 800e96c:	d104      	bne.n	800e978 <__swbuf_r+0x64>
 800e96e:	4621      	mov	r1, r4
 800e970:	4628      	mov	r0, r5
 800e972:	f7ff fd89 	bl	800e488 <_fflush_r>
 800e976:	b938      	cbnz	r0, 800e988 <__swbuf_r+0x74>
 800e978:	4638      	mov	r0, r7
 800e97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e97c:	4621      	mov	r1, r4
 800e97e:	4628      	mov	r0, r5
 800e980:	f000 f806 	bl	800e990 <__swsetup_r>
 800e984:	2800      	cmp	r0, #0
 800e986:	d0d5      	beq.n	800e934 <__swbuf_r+0x20>
 800e988:	f04f 37ff 	mov.w	r7, #4294967295
 800e98c:	e7f4      	b.n	800e978 <__swbuf_r+0x64>
	...

0800e990 <__swsetup_r>:
 800e990:	b538      	push	{r3, r4, r5, lr}
 800e992:	4b2a      	ldr	r3, [pc, #168]	; (800ea3c <__swsetup_r+0xac>)
 800e994:	4605      	mov	r5, r0
 800e996:	6818      	ldr	r0, [r3, #0]
 800e998:	460c      	mov	r4, r1
 800e99a:	b118      	cbz	r0, 800e9a4 <__swsetup_r+0x14>
 800e99c:	6a03      	ldr	r3, [r0, #32]
 800e99e:	b90b      	cbnz	r3, 800e9a4 <__swsetup_r+0x14>
 800e9a0:	f7fd ff84 	bl	800c8ac <__sinit>
 800e9a4:	89a3      	ldrh	r3, [r4, #12]
 800e9a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9aa:	0718      	lsls	r0, r3, #28
 800e9ac:	d422      	bmi.n	800e9f4 <__swsetup_r+0x64>
 800e9ae:	06d9      	lsls	r1, r3, #27
 800e9b0:	d407      	bmi.n	800e9c2 <__swsetup_r+0x32>
 800e9b2:	2309      	movs	r3, #9
 800e9b4:	602b      	str	r3, [r5, #0]
 800e9b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e9ba:	81a3      	strh	r3, [r4, #12]
 800e9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c0:	e034      	b.n	800ea2c <__swsetup_r+0x9c>
 800e9c2:	0758      	lsls	r0, r3, #29
 800e9c4:	d512      	bpl.n	800e9ec <__swsetup_r+0x5c>
 800e9c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9c8:	b141      	cbz	r1, 800e9dc <__swsetup_r+0x4c>
 800e9ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9ce:	4299      	cmp	r1, r3
 800e9d0:	d002      	beq.n	800e9d8 <__swsetup_r+0x48>
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	f7fe fefe 	bl	800d7d4 <_free_r>
 800e9d8:	2300      	movs	r3, #0
 800e9da:	6363      	str	r3, [r4, #52]	; 0x34
 800e9dc:	89a3      	ldrh	r3, [r4, #12]
 800e9de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e9e2:	81a3      	strh	r3, [r4, #12]
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	6063      	str	r3, [r4, #4]
 800e9e8:	6923      	ldr	r3, [r4, #16]
 800e9ea:	6023      	str	r3, [r4, #0]
 800e9ec:	89a3      	ldrh	r3, [r4, #12]
 800e9ee:	f043 0308 	orr.w	r3, r3, #8
 800e9f2:	81a3      	strh	r3, [r4, #12]
 800e9f4:	6923      	ldr	r3, [r4, #16]
 800e9f6:	b94b      	cbnz	r3, 800ea0c <__swsetup_r+0x7c>
 800e9f8:	89a3      	ldrh	r3, [r4, #12]
 800e9fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e9fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea02:	d003      	beq.n	800ea0c <__swsetup_r+0x7c>
 800ea04:	4621      	mov	r1, r4
 800ea06:	4628      	mov	r0, r5
 800ea08:	f000 f884 	bl	800eb14 <__smakebuf_r>
 800ea0c:	89a0      	ldrh	r0, [r4, #12]
 800ea0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea12:	f010 0301 	ands.w	r3, r0, #1
 800ea16:	d00a      	beq.n	800ea2e <__swsetup_r+0x9e>
 800ea18:	2300      	movs	r3, #0
 800ea1a:	60a3      	str	r3, [r4, #8]
 800ea1c:	6963      	ldr	r3, [r4, #20]
 800ea1e:	425b      	negs	r3, r3
 800ea20:	61a3      	str	r3, [r4, #24]
 800ea22:	6923      	ldr	r3, [r4, #16]
 800ea24:	b943      	cbnz	r3, 800ea38 <__swsetup_r+0xa8>
 800ea26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea2a:	d1c4      	bne.n	800e9b6 <__swsetup_r+0x26>
 800ea2c:	bd38      	pop	{r3, r4, r5, pc}
 800ea2e:	0781      	lsls	r1, r0, #30
 800ea30:	bf58      	it	pl
 800ea32:	6963      	ldrpl	r3, [r4, #20]
 800ea34:	60a3      	str	r3, [r4, #8]
 800ea36:	e7f4      	b.n	800ea22 <__swsetup_r+0x92>
 800ea38:	2000      	movs	r0, #0
 800ea3a:	e7f7      	b.n	800ea2c <__swsetup_r+0x9c>
 800ea3c:	200001d0 	.word	0x200001d0

0800ea40 <_raise_r>:
 800ea40:	291f      	cmp	r1, #31
 800ea42:	b538      	push	{r3, r4, r5, lr}
 800ea44:	4604      	mov	r4, r0
 800ea46:	460d      	mov	r5, r1
 800ea48:	d904      	bls.n	800ea54 <_raise_r+0x14>
 800ea4a:	2316      	movs	r3, #22
 800ea4c:	6003      	str	r3, [r0, #0]
 800ea4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea52:	bd38      	pop	{r3, r4, r5, pc}
 800ea54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ea56:	b112      	cbz	r2, 800ea5e <_raise_r+0x1e>
 800ea58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea5c:	b94b      	cbnz	r3, 800ea72 <_raise_r+0x32>
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f000 f830 	bl	800eac4 <_getpid_r>
 800ea64:	462a      	mov	r2, r5
 800ea66:	4601      	mov	r1, r0
 800ea68:	4620      	mov	r0, r4
 800ea6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea6e:	f000 b817 	b.w	800eaa0 <_kill_r>
 800ea72:	2b01      	cmp	r3, #1
 800ea74:	d00a      	beq.n	800ea8c <_raise_r+0x4c>
 800ea76:	1c59      	adds	r1, r3, #1
 800ea78:	d103      	bne.n	800ea82 <_raise_r+0x42>
 800ea7a:	2316      	movs	r3, #22
 800ea7c:	6003      	str	r3, [r0, #0]
 800ea7e:	2001      	movs	r0, #1
 800ea80:	e7e7      	b.n	800ea52 <_raise_r+0x12>
 800ea82:	2400      	movs	r4, #0
 800ea84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea88:	4628      	mov	r0, r5
 800ea8a:	4798      	blx	r3
 800ea8c:	2000      	movs	r0, #0
 800ea8e:	e7e0      	b.n	800ea52 <_raise_r+0x12>

0800ea90 <raise>:
 800ea90:	4b02      	ldr	r3, [pc, #8]	; (800ea9c <raise+0xc>)
 800ea92:	4601      	mov	r1, r0
 800ea94:	6818      	ldr	r0, [r3, #0]
 800ea96:	f7ff bfd3 	b.w	800ea40 <_raise_r>
 800ea9a:	bf00      	nop
 800ea9c:	200001d0 	.word	0x200001d0

0800eaa0 <_kill_r>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	4d07      	ldr	r5, [pc, #28]	; (800eac0 <_kill_r+0x20>)
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	4608      	mov	r0, r1
 800eaaa:	4611      	mov	r1, r2
 800eaac:	602b      	str	r3, [r5, #0]
 800eaae:	f7f2 fcf3 	bl	8001498 <_kill>
 800eab2:	1c43      	adds	r3, r0, #1
 800eab4:	d102      	bne.n	800eabc <_kill_r+0x1c>
 800eab6:	682b      	ldr	r3, [r5, #0]
 800eab8:	b103      	cbz	r3, 800eabc <_kill_r+0x1c>
 800eaba:	6023      	str	r3, [r4, #0]
 800eabc:	bd38      	pop	{r3, r4, r5, pc}
 800eabe:	bf00      	nop
 800eac0:	200023c4 	.word	0x200023c4

0800eac4 <_getpid_r>:
 800eac4:	f7f2 bce0 	b.w	8001488 <_getpid>

0800eac8 <__swhatbuf_r>:
 800eac8:	b570      	push	{r4, r5, r6, lr}
 800eaca:	460c      	mov	r4, r1
 800eacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ead0:	2900      	cmp	r1, #0
 800ead2:	b096      	sub	sp, #88	; 0x58
 800ead4:	4615      	mov	r5, r2
 800ead6:	461e      	mov	r6, r3
 800ead8:	da0d      	bge.n	800eaf6 <__swhatbuf_r+0x2e>
 800eada:	89a3      	ldrh	r3, [r4, #12]
 800eadc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eae0:	f04f 0100 	mov.w	r1, #0
 800eae4:	bf0c      	ite	eq
 800eae6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800eaea:	2340      	movne	r3, #64	; 0x40
 800eaec:	2000      	movs	r0, #0
 800eaee:	6031      	str	r1, [r6, #0]
 800eaf0:	602b      	str	r3, [r5, #0]
 800eaf2:	b016      	add	sp, #88	; 0x58
 800eaf4:	bd70      	pop	{r4, r5, r6, pc}
 800eaf6:	466a      	mov	r2, sp
 800eaf8:	f000 f848 	bl	800eb8c <_fstat_r>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	dbec      	blt.n	800eada <__swhatbuf_r+0x12>
 800eb00:	9901      	ldr	r1, [sp, #4]
 800eb02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800eb06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eb0a:	4259      	negs	r1, r3
 800eb0c:	4159      	adcs	r1, r3
 800eb0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb12:	e7eb      	b.n	800eaec <__swhatbuf_r+0x24>

0800eb14 <__smakebuf_r>:
 800eb14:	898b      	ldrh	r3, [r1, #12]
 800eb16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb18:	079d      	lsls	r5, r3, #30
 800eb1a:	4606      	mov	r6, r0
 800eb1c:	460c      	mov	r4, r1
 800eb1e:	d507      	bpl.n	800eb30 <__smakebuf_r+0x1c>
 800eb20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb24:	6023      	str	r3, [r4, #0]
 800eb26:	6123      	str	r3, [r4, #16]
 800eb28:	2301      	movs	r3, #1
 800eb2a:	6163      	str	r3, [r4, #20]
 800eb2c:	b002      	add	sp, #8
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
 800eb30:	ab01      	add	r3, sp, #4
 800eb32:	466a      	mov	r2, sp
 800eb34:	f7ff ffc8 	bl	800eac8 <__swhatbuf_r>
 800eb38:	9900      	ldr	r1, [sp, #0]
 800eb3a:	4605      	mov	r5, r0
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	f7fe febd 	bl	800d8bc <_malloc_r>
 800eb42:	b948      	cbnz	r0, 800eb58 <__smakebuf_r+0x44>
 800eb44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb48:	059a      	lsls	r2, r3, #22
 800eb4a:	d4ef      	bmi.n	800eb2c <__smakebuf_r+0x18>
 800eb4c:	f023 0303 	bic.w	r3, r3, #3
 800eb50:	f043 0302 	orr.w	r3, r3, #2
 800eb54:	81a3      	strh	r3, [r4, #12]
 800eb56:	e7e3      	b.n	800eb20 <__smakebuf_r+0xc>
 800eb58:	89a3      	ldrh	r3, [r4, #12]
 800eb5a:	6020      	str	r0, [r4, #0]
 800eb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb60:	81a3      	strh	r3, [r4, #12]
 800eb62:	9b00      	ldr	r3, [sp, #0]
 800eb64:	6163      	str	r3, [r4, #20]
 800eb66:	9b01      	ldr	r3, [sp, #4]
 800eb68:	6120      	str	r0, [r4, #16]
 800eb6a:	b15b      	cbz	r3, 800eb84 <__smakebuf_r+0x70>
 800eb6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb70:	4630      	mov	r0, r6
 800eb72:	f000 f81d 	bl	800ebb0 <_isatty_r>
 800eb76:	b128      	cbz	r0, 800eb84 <__smakebuf_r+0x70>
 800eb78:	89a3      	ldrh	r3, [r4, #12]
 800eb7a:	f023 0303 	bic.w	r3, r3, #3
 800eb7e:	f043 0301 	orr.w	r3, r3, #1
 800eb82:	81a3      	strh	r3, [r4, #12]
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	431d      	orrs	r5, r3
 800eb88:	81a5      	strh	r5, [r4, #12]
 800eb8a:	e7cf      	b.n	800eb2c <__smakebuf_r+0x18>

0800eb8c <_fstat_r>:
 800eb8c:	b538      	push	{r3, r4, r5, lr}
 800eb8e:	4d07      	ldr	r5, [pc, #28]	; (800ebac <_fstat_r+0x20>)
 800eb90:	2300      	movs	r3, #0
 800eb92:	4604      	mov	r4, r0
 800eb94:	4608      	mov	r0, r1
 800eb96:	4611      	mov	r1, r2
 800eb98:	602b      	str	r3, [r5, #0]
 800eb9a:	f7f2 fcdc 	bl	8001556 <_fstat>
 800eb9e:	1c43      	adds	r3, r0, #1
 800eba0:	d102      	bne.n	800eba8 <_fstat_r+0x1c>
 800eba2:	682b      	ldr	r3, [r5, #0]
 800eba4:	b103      	cbz	r3, 800eba8 <_fstat_r+0x1c>
 800eba6:	6023      	str	r3, [r4, #0]
 800eba8:	bd38      	pop	{r3, r4, r5, pc}
 800ebaa:	bf00      	nop
 800ebac:	200023c4 	.word	0x200023c4

0800ebb0 <_isatty_r>:
 800ebb0:	b538      	push	{r3, r4, r5, lr}
 800ebb2:	4d06      	ldr	r5, [pc, #24]	; (800ebcc <_isatty_r+0x1c>)
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	4608      	mov	r0, r1
 800ebba:	602b      	str	r3, [r5, #0]
 800ebbc:	f7f2 fcdb 	bl	8001576 <_isatty>
 800ebc0:	1c43      	adds	r3, r0, #1
 800ebc2:	d102      	bne.n	800ebca <_isatty_r+0x1a>
 800ebc4:	682b      	ldr	r3, [r5, #0]
 800ebc6:	b103      	cbz	r3, 800ebca <_isatty_r+0x1a>
 800ebc8:	6023      	str	r3, [r4, #0]
 800ebca:	bd38      	pop	{r3, r4, r5, pc}
 800ebcc:	200023c4 	.word	0x200023c4

0800ebd0 <_init>:
 800ebd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebd2:	bf00      	nop
 800ebd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebd6:	bc08      	pop	{r3}
 800ebd8:	469e      	mov	lr, r3
 800ebda:	4770      	bx	lr

0800ebdc <_fini>:
 800ebdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebde:	bf00      	nop
 800ebe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebe2:	bc08      	pop	{r3}
 800ebe4:	469e      	mov	lr, r3
 800ebe6:	4770      	bx	lr
