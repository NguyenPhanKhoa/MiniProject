
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012194  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f44  08012348  08012348  00022348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801428c  0801428c  00030344  2**0
                  CONTENTS
  4 .ARM          00000008  0801428c  0801428c  0002428c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014294  08014294  00030344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014294  08014294  00024294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014298  08014298  00024298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0801429c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030344  2**0
                  CONTENTS
 10 .bss          00006ac8  20000344  20000344  00030344  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006e0c  20006e0c  00030344  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002d446  00000000  00000000  000303b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006cbe  00000000  00000000  0005d7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002898  00000000  00000000  000644c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f2c  00000000  00000000  00066d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a8bb  00000000  00000000  00068c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030aed  00000000  00000000  0007353f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f7950  00000000  00000000  000a402c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bc38  00000000  00000000  0019b97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001a75b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000344 	.word	0x20000344
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801232c 	.word	0x0801232c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000348 	.word	0x20000348
 80001ec:	0801232c 	.word	0x0801232c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ec8:	b089      	sub	sp, #36	; 0x24
 8000eca:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f002 fa86 	bl	80033dc <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_GYRO_Init();
 8000ed0:	f001 fbca 	bl	8002668 <BSP_GYRO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f8b0 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 fa32 	bl	8001340 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000edc:	f000 f91e 	bl	800111c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ee0:	f000 f95c 	bl	800119c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000ee4:	f000 f990 	bl	8001208 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ee8:	f000 f9dc 	bl	80012a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000eec:	f001 fc36 	bl	800275c <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000ef0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 fcb3 	bl	8002860 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000efa:	2001      	movs	r0, #1
 8000efc:	f001 fd14 	bl	8002928 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000f00:	f001 ff5e 	bl	8002dc0 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000f04:	483e      	ldr	r0, [pc, #248]	; (8001000 <main+0x13c>)
 8000f06:	f001 fd6b 	bl	80029e0 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000f0a:	483d      	ldr	r0, [pc, #244]	; (8001000 <main+0x13c>)
 8000f0c:	f001 fd34 	bl	8002978 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f001 fd18 	bl	8002948 <BSP_LCD_SetTextColor>
    //write text
  int16_t XCir = 160;
 8000f18:	23a0      	movs	r3, #160	; 0xa0
 8000f1a:	81fb      	strh	r3, [r7, #14]
  int16_t YCir = 120;
 8000f1c:	2378      	movs	r3, #120	; 0x78
 8000f1e:	81bb      	strh	r3, [r7, #12]
  int16_t radiusCir = 50;
 8000f20:	2332      	movs	r3, #50	; 0x32
 8000f22:	817b      	strh	r3, [r7, #10]
  BSP_GYRO_GetXYZ(gyroData);
 8000f24:	4837      	ldr	r0, [pc, #220]	; (8001004 <main+0x140>)
 8000f26:	f001 fc05 	bl	8002734 <BSP_GYRO_GetXYZ>
  float defaultHeight = gyroData[2];
 8000f2a:	4b36      	ldr	r3, [pc, #216]	; (8001004 <main+0x140>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	607b      	str	r3, [r7, #4]

  if (defaultHeight <= defaultHeight - 20)
 8000f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f34:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f48:	d802      	bhi.n	8000f50 <main+0x8c>
  {
	  startGame = true;
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <main+0x144>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f50:	f00b f8fe 	bl	800c150 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask1, NULL, &Task01_attributes);
 8000f54:	4a2d      	ldr	r2, [pc, #180]	; (800100c <main+0x148>)
 8000f56:	2100      	movs	r1, #0
 8000f58:	482d      	ldr	r0, [pc, #180]	; (8001010 <main+0x14c>)
 8000f5a:	f00b f943 	bl	800c1e4 <osThreadNew>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a2c      	ldr	r2, [pc, #176]	; (8001014 <main+0x150>)
 8000f62:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000f64:	4a2c      	ldr	r2, [pc, #176]	; (8001018 <main+0x154>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	482c      	ldr	r0, [pc, #176]	; (800101c <main+0x158>)
 8000f6a:	f00b f93b 	bl	800c1e4 <osThreadNew>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a2b      	ldr	r2, [pc, #172]	; (8001020 <main+0x15c>)
 8000f72:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8000f74:	4a2b      	ldr	r2, [pc, #172]	; (8001024 <main+0x160>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	482b      	ldr	r0, [pc, #172]	; (8001028 <main+0x164>)
 8000f7a:	f00b f933 	bl	800c1e4 <osThreadNew>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a2a      	ldr	r2, [pc, #168]	; (800102c <main+0x168>)
 8000f82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f84:	f00b f908 	bl	800c198 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_LCD_FillCircle(XCir, YCir, radiusCir);
 8000f88:	89fb      	ldrh	r3, [r7, #14]
 8000f8a:	89b9      	ldrh	r1, [r7, #12]
 8000f8c:	897a      	ldrh	r2, [r7, #10]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fe76 	bl	8002c80 <BSP_LCD_FillCircle>
	  BSP_GYRO_GetXYZ(gyroData);
 8000f94:	481b      	ldr	r0, [pc, #108]	; (8001004 <main+0x140>)
 8000f96:	f001 fbcd 	bl	8002734 <BSP_GYRO_GetXYZ>
	  sprintf(gyroPrint, "X: %f \t Y: %f \t Z:%f \n", gyroData[0], gyroData[1], gyroData[2]);
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <main+0x16c>)
 8000f9c:	681e      	ldr	r6, [r3, #0]
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <main+0x140>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fae0 	bl	8000568 <__aeabi_f2d>
 8000fa8:	4680      	mov	r8, r0
 8000faa:	4689      	mov	r9, r1
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <main+0x140>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fad9 	bl	8000568 <__aeabi_f2d>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	460d      	mov	r5, r1
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <main+0x140>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fad2 	bl	8000568 <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fcc:	e9cd 4500 	strd	r4, r5, [sp]
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	464b      	mov	r3, r9
 8000fd4:	4917      	ldr	r1, [pc, #92]	; (8001034 <main+0x170>)
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	f00f f84a 	bl	8010070 <siprintf>
	  CDC_Transmit_FS((uint8_t*) gyroPrint, strlen(gyroPrint));
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <main+0x16c>)
 8000fde:	681c      	ldr	r4, [r3, #0]
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <main+0x16c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff f953 	bl	8000290 <strlen>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f00d feb9 	bl	800ed68 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8000ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffa:	f002 fa31 	bl	8003460 <HAL_Delay>
	  BSP_LCD_FillCircle(XCir, YCir, radiusCir);
 8000ffe:	e7c3      	b.n	8000f88 <main+0xc4>
 8001000:	ff0000ff 	.word	0xff0000ff
 8001004:	200004a8 	.word	0x200004a8
 8001008:	200004b8 	.word	0x200004b8
 800100c:	080123d8 	.word	0x080123d8
 8001010:	08001401 	.word	0x08001401
 8001014:	2000049c 	.word	0x2000049c
 8001018:	080123fc 	.word	0x080123fc
 800101c:	08001415 	.word	0x08001415
 8001020:	200004a0 	.word	0x200004a0
 8001024:	08012420 	.word	0x08012420
 8001028:	08001425 	.word	0x08001425
 800102c:	200004a4 	.word	0x200004a4
 8001030:	200004b4 	.word	0x200004b4
 8001034:	08012360 	.word	0x08012360

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	; 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	2230      	movs	r2, #48	; 0x30
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f00f f875 	bl	8010136 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <SystemClock_Config+0xdc>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	4a2b      	ldr	r2, [pc, #172]	; (8001114 <SystemClock_Config+0xdc>)
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106a:	6413      	str	r3, [r2, #64]	; 0x40
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <SystemClock_Config+0xdc>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <SystemClock_Config+0xe0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a25      	ldr	r2, [pc, #148]	; (8001118 <SystemClock_Config+0xe0>)
 8001082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <SystemClock_Config+0xe0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001094:	2301      	movs	r3, #1
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a8:	2308      	movs	r3, #8
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 80010ac:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80010b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80010b6:	2308      	movs	r3, #8
 80010b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 f960 	bl	8006384 <HAL_RCC_OscConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010ca:	f000 f9c5 	bl	8001458 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010ce:	f005 f909 	bl	80062e4 <HAL_PWREx_EnableOverDrive>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010d8:	f000 f9be 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010dc:	230f      	movs	r3, #15
 80010de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e0:	2302      	movs	r3, #2
 80010e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2105      	movs	r1, #5
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 fbba 	bl	8006874 <HAL_RCC_ClockConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001106:	f000 f9a7 	bl	8001458 <Error_Handler>
  }
}
 800110a:	bf00      	nop
 800110c:	3750      	adds	r7, #80	; 0x50
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40007000 	.word	0x40007000

0800111c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_I2C1_Init+0x74>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <MX_I2C1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_I2C1_Init+0x74>)
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <MX_I2C1_Init+0x7c>)
 800112a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_I2C1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_I2C1_Init+0x74>)
 800113a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_I2C1_Init+0x74>)
 800115a:	f003 f9ad 	bl	80044b8 <HAL_I2C_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001164:	f000 f978 	bl	8001458 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001168:	2100      	movs	r1, #0
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <MX_I2C1_Init+0x74>)
 800116c:	f003 fae8 	bl	8004740 <HAL_I2CEx_ConfigAnalogFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001176:	f000 f96f 	bl	8001458 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800117a:	2100      	movs	r1, #0
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_I2C1_Init+0x74>)
 800117e:	f003 fb1b 	bl	80047b8 <HAL_I2CEx_ConfigDigitalFilter>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001188:	f000 f966 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000360 	.word	0x20000360
 8001194:	40005400 	.word	0x40005400
 8001198:	000186a0 	.word	0x000186a0

0800119c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <MX_SPI1_Init+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e8:	220a      	movs	r2, #10
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_SPI1_Init+0x64>)
 80011ee:	f005 ffda 	bl	80071a6 <HAL_SPI_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f8:	f000 f92e 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200003b4 	.word	0x200003b4
 8001204:	40013000 	.word	0x40013000

08001208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_TIM2_Init+0x98>)
 8001226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_TIM2_Init+0x98>)
 800122e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001232:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_TIM2_Init+0x98>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_TIM2_Init+0x98>)
 800123c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001240:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_TIM2_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_TIM2_Init+0x98>)
 800124a:	2280      	movs	r2, #128	; 0x80
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124e:	4814      	ldr	r0, [pc, #80]	; (80012a0 <MX_TIM2_Init+0x98>)
 8001250:	f006 fd88 	bl	8007d64 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800125a:	f000 f8fd 	bl	8001458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_TIM2_Init+0x98>)
 800126c:	f006 ff42 	bl	80080f4 <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001276:	f000 f8ef 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_TIM2_Init+0x98>)
 8001288:	f007 f95e 	bl	8008548 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001292:	f000 f8e1 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000040c 	.word	0x2000040c

080012a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	463b      	mov	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_TIM3_Init+0x94>)
 80012c2:	4a1e      	ldr	r2, [pc, #120]	; (800133c <MX_TIM3_Init+0x98>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <MX_TIM3_Init+0x94>)
 80012c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_TIM3_Init+0x94>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_TIM3_Init+0x94>)
 80012d6:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80012da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_TIM3_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <MX_TIM3_Init+0x94>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012e8:	4813      	ldr	r0, [pc, #76]	; (8001338 <MX_TIM3_Init+0x94>)
 80012ea:	f006 fd3b 	bl	8007d64 <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012f4:	f000 f8b0 	bl	8001458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <MX_TIM3_Init+0x94>)
 8001306:	f006 fef5 	bl	80080f4 <HAL_TIM_ConfigClockSource>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001310:	f000 f8a2 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_TIM3_Init+0x94>)
 8001322:	f007 f911 	bl	8008548 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800132c:	f000 f894 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000454 	.word	0x20000454
 800133c:	40000400 	.word	0x40000400

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <MX_GPIO_Init+0xb8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <MX_GPIO_Init+0xb8>)
 8001360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <MX_GPIO_Init+0xb8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <MX_GPIO_Init+0xb8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <MX_GPIO_Init+0xb8>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <MX_GPIO_Init+0xb8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_GPIO_Init+0xb8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <MX_GPIO_Init+0xb8>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_GPIO_Init+0xb8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <MX_GPIO_Init+0xb8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <MX_GPIO_Init+0xb8>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_GPIO_Init+0xb8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <MX_GPIO_Init+0xbc>)
 80013ce:	f003 f859 	bl	8004484 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD11 PD12 PD13 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80013d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <MX_GPIO_Init+0xbc>)
 80013ec:	f002 fd92 	bl	8003f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020c00 	.word	0x40020c00

08001400 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001408:	f00d fbf0 	bl	800ebec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800140c:	2001      	movs	r0, #1
 800140e:	f00a ff7b 	bl	800c308 <osDelay>
 8001412:	e7fb      	b.n	800140c <StartTask1+0xc>

08001414 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f00a ff73 	bl	800c308 <osDelay>
 8001422:	e7fb      	b.n	800141c <StartTask02+0x8>

08001424 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800142c:	2001      	movs	r0, #1
 800142e:	f00a ff6b 	bl	800c308 <osDelay>
 8001432:	e7fb      	b.n	800142c <StartTask03+0x8>

08001434 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001446:	f001 ffeb 	bl	8003420 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40001000 	.word	0x40001000

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>
	...

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_MspInit+0x54>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a11      	ldr	r2, [pc, #68]	; (80014b8 <HAL_MspInit+0x54>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_MspInit+0x54>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_MspInit+0x54>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_MspInit+0x54>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_MspInit+0x54>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	210f      	movs	r1, #15
 80014a6:	f06f 0001 	mvn.w	r0, #1
 80014aa:	f002 f8b5 	bl	8003618 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_I2C_MspInit+0x84>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12b      	bne.n	8001536 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_I2C_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_I2C_MspInit+0x88>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_I2C_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014fa:	23c0      	movs	r3, #192	; 0xc0
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800150a:	2304      	movs	r3, #4
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <HAL_I2C_MspInit+0x8c>)
 8001516:	f002 fcfd 	bl	8003f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_I2C_MspInit+0x88>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_I2C_MspInit+0x88>)
 8001524:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_I2C_MspInit+0x88>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40005400 	.word	0x40005400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400

0800154c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_SPI_MspInit+0x84>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d12b      	bne.n	80015c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_SPI_MspInit+0x88>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <HAL_SPI_MspInit+0x88>)
 8001578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_SPI_MspInit+0x88>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_SPI_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <HAL_SPI_MspInit+0x88>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_SPI_MspInit+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015a6:	23e0      	movs	r3, #224	; 0xe0
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015b6:	2305      	movs	r3, #5
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_SPI_MspInit+0x8c>)
 80015c2:	f002 fca7 	bl	8003f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40013000 	.word	0x40013000
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_SPI_MspDeInit+0x30>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d109      	bne.n	8001602 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_SPI_MspDeInit+0x34>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_SPI_MspDeInit+0x34>)
 80015f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80015fa:	21e0      	movs	r1, #224	; 0xe0
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_SPI_MspDeInit+0x38>)
 80015fe:	f002 fe35 	bl	800426c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40013000 	.word	0x40013000
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000

08001618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001628:	d116      	bne.n	8001658 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_TIM_Base_MspInit+0x80>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_TIM_Base_MspInit+0x80>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_TIM_Base_MspInit+0x80>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2105      	movs	r1, #5
 800164a:	201c      	movs	r0, #28
 800164c:	f001 ffe4 	bl	8003618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001650:	201c      	movs	r0, #28
 8001652:	f001 fffd 	bl	8003650 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001656:	e01a      	b.n	800168e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0f      	ldr	r2, [pc, #60]	; (800169c <HAL_TIM_Base_MspInit+0x84>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d115      	bne.n	800168e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_TIM_Base_MspInit+0x80>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_TIM_Base_MspInit+0x80>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_TIM_Base_MspInit+0x80>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2105      	movs	r1, #5
 8001682:	201d      	movs	r0, #29
 8001684:	f001 ffc8 	bl	8003618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001688:	201d      	movs	r0, #29
 800168a:	f001 ffe1 	bl	8003650 <HAL_NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40000400 	.word	0x40000400

080016a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b33      	ldr	r3, [pc, #204]	; (8001784 <HAL_InitTick+0xe4>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a32      	ldr	r2, [pc, #200]	; (8001784 <HAL_InitTick+0xe4>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <HAL_InitTick+0xe4>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016cc:	f107 0210 	add.w	r2, r7, #16
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f005 fad8 	bl	8006c8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d103      	bne.n	80016ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016e6:	f005 fabd 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 80016ea:	6378      	str	r0, [r7, #52]	; 0x34
 80016ec:	e004      	b.n	80016f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016ee:	f005 fab9 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 80016f2:	4603      	mov	r3, r0
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fa:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_InitTick+0xe8>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	0c9b      	lsrs	r3, r3, #18
 8001702:	3b01      	subs	r3, #1
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <HAL_InitTick+0xec>)
 8001708:	4a21      	ldr	r2, [pc, #132]	; (8001790 <HAL_InitTick+0xf0>)
 800170a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_InitTick+0xec>)
 800170e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001712:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001714:	4a1d      	ldr	r2, [pc, #116]	; (800178c <HAL_InitTick+0xec>)
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001718:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_InitTick+0xec>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_InitTick+0xec>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_InitTick+0xec>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800172c:	4817      	ldr	r0, [pc, #92]	; (800178c <HAL_InitTick+0xec>)
 800172e:	f006 fb19 	bl	8007d64 <HAL_TIM_Base_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001738:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800173c:	2b00      	cmp	r3, #0
 800173e:	d11b      	bne.n	8001778 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001740:	4812      	ldr	r0, [pc, #72]	; (800178c <HAL_InitTick+0xec>)
 8001742:	f006 fb5f 	bl	8007e04 <HAL_TIM_Base_Start_IT>
 8001746:	4603      	mov	r3, r0
 8001748:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800174c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001750:	2b00      	cmp	r3, #0
 8001752:	d111      	bne.n	8001778 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001754:	2036      	movs	r0, #54	; 0x36
 8001756:	f001 ff7b 	bl	8003650 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d808      	bhi.n	8001772 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	2036      	movs	r0, #54	; 0x36
 8001766:	f001 ff57 	bl	8003618 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_InitTick+0xf4>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e002      	b.n	8001778 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001778:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800177c:	4618      	mov	r0, r3
 800177e:	3738      	adds	r7, #56	; 0x38
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	431bde83 	.word	0x431bde83
 800178c:	200004bc 	.word	0x200004bc
 8001790:	40001000 	.word	0x40001000
 8001794:	20000080 	.word	0x20000080

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM2_IRQHandler+0x10>)
 80017ca:	f006 fb8b 	bl	8007ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000040c 	.word	0x2000040c

080017d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <TIM3_IRQHandler+0x10>)
 80017de:	f006 fb81 	bl	8007ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000454 	.word	0x20000454

080017ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <TIM6_DAC_IRQHandler+0x10>)
 80017f2:	f006 fb77 	bl	8007ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200004bc 	.word	0x200004bc

08001800 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <OTG_FS_IRQHandler+0x10>)
 8001806:	f003 fc40 	bl	800508a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20006594 	.word	0x20006594

08001814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_kill>:

int _kill(int pid, int sig)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800182e:	f00e fcd5 	bl	80101dc <__errno>
 8001832:	4603      	mov	r3, r0
 8001834:	2216      	movs	r2, #22
 8001836:	601a      	str	r2, [r3, #0]
  return -1;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_exit>:

void _exit (int status)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ffe7 	bl	8001824 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001856:	e7fe      	b.n	8001856 <_exit+0x12>

08001858 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e00a      	b.n	8001880 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800186a:	f3af 8000 	nop.w
 800186e:	4601      	mov	r1, r0
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	60ba      	str	r2, [r7, #8]
 8001876:	b2ca      	uxtb	r2, r1
 8001878:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	dbf0      	blt.n	800186a <_read+0x12>
  }

  return len;
 8001888:	687b      	ldr	r3, [r7, #4]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e009      	b.n	80018b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	60ba      	str	r2, [r7, #8]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf1      	blt.n	80018a4 <_write+0x12>
  }
  return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_close>:

int _close(int file)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f2:	605a      	str	r2, [r3, #4]
  return 0;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_isatty>:

int _isatty(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f00e fc3a 	bl	80101dc <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20030000 	.word	0x20030000
 8001994:	00000400 	.word	0x00000400
 8001998:	20000504 	.word	0x20000504
 800199c:	20006e10 	.word	0x20006e10

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019fc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ca:	490e      	ldr	r1, [pc, #56]	; (8001a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e0:	4c0b      	ldr	r4, [pc, #44]	; (8001a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ee:	f7ff ffd7 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f00e fbf9 	bl	80101e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7ff fa65 	bl	8000ec4 <main>
  bx  lr    
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001a08:	0801429c 	.word	0x0801429c
  ldr r2, =_sbss
 8001a0c:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001a10:	20006e0c 	.word	0x20006e0c

08001a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC_IRQHandler>

08001a16 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001a1a:	f000 fc73 	bl	8002304 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001a1e:	20ca      	movs	r0, #202	; 0xca
 8001a20:	f000 f95d 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001a24:	20c3      	movs	r0, #195	; 0xc3
 8001a26:	f000 f967 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001a2a:	2008      	movs	r0, #8
 8001a2c:	f000 f964 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001a30:	2050      	movs	r0, #80	; 0x50
 8001a32:	f000 f961 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001a36:	20cf      	movs	r0, #207	; 0xcf
 8001a38:	f000 f951 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f000 f95b 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001a42:	20c1      	movs	r0, #193	; 0xc1
 8001a44:	f000 f958 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001a48:	2030      	movs	r0, #48	; 0x30
 8001a4a:	f000 f955 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001a4e:	20ed      	movs	r0, #237	; 0xed
 8001a50:	f000 f945 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001a54:	2064      	movs	r0, #100	; 0x64
 8001a56:	f000 f94f 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001a5a:	2003      	movs	r0, #3
 8001a5c:	f000 f94c 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001a60:	2012      	movs	r0, #18
 8001a62:	f000 f949 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001a66:	2081      	movs	r0, #129	; 0x81
 8001a68:	f000 f946 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001a6c:	20e8      	movs	r0, #232	; 0xe8
 8001a6e:	f000 f936 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001a72:	2085      	movs	r0, #133	; 0x85
 8001a74:	f000 f940 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f000 f93d 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001a7e:	2078      	movs	r0, #120	; 0x78
 8001a80:	f000 f93a 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001a84:	20cb      	movs	r0, #203	; 0xcb
 8001a86:	f000 f92a 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001a8a:	2039      	movs	r0, #57	; 0x39
 8001a8c:	f000 f934 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001a90:	202c      	movs	r0, #44	; 0x2c
 8001a92:	f000 f931 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 f92e 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001a9c:	2034      	movs	r0, #52	; 0x34
 8001a9e:	f000 f92b 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f000 f928 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001aa8:	20f7      	movs	r0, #247	; 0xf7
 8001aaa:	f000 f918 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001aae:	2020      	movs	r0, #32
 8001ab0:	f000 f922 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001ab4:	20ea      	movs	r0, #234	; 0xea
 8001ab6:	f000 f912 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 f91c 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f000 f919 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001ac6:	20b1      	movs	r0, #177	; 0xb1
 8001ac8:	f000 f909 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f000 f913 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001ad2:	201b      	movs	r0, #27
 8001ad4:	f000 f910 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001ad8:	20b6      	movs	r0, #182	; 0xb6
 8001ada:	f000 f900 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001ade:	200a      	movs	r0, #10
 8001ae0:	f000 f90a 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001ae4:	20a2      	movs	r0, #162	; 0xa2
 8001ae6:	f000 f907 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001aea:	20c0      	movs	r0, #192	; 0xc0
 8001aec:	f000 f8f7 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001af0:	2010      	movs	r0, #16
 8001af2:	f000 f901 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001af6:	20c1      	movs	r0, #193	; 0xc1
 8001af8:	f000 f8f1 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001afc:	2010      	movs	r0, #16
 8001afe:	f000 f8fb 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001b02:	20c5      	movs	r0, #197	; 0xc5
 8001b04:	f000 f8eb 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001b08:	2045      	movs	r0, #69	; 0x45
 8001b0a:	f000 f8f5 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001b0e:	2015      	movs	r0, #21
 8001b10:	f000 f8f2 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001b14:	20c7      	movs	r0, #199	; 0xc7
 8001b16:	f000 f8e2 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001b1a:	2090      	movs	r0, #144	; 0x90
 8001b1c:	f000 f8ec 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001b20:	2036      	movs	r0, #54	; 0x36
 8001b22:	f000 f8dc 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001b26:	20c8      	movs	r0, #200	; 0xc8
 8001b28:	f000 f8e6 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001b2c:	20f2      	movs	r0, #242	; 0xf2
 8001b2e:	f000 f8d6 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f8e0 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001b38:	20b0      	movs	r0, #176	; 0xb0
 8001b3a:	f000 f8d0 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001b3e:	20c2      	movs	r0, #194	; 0xc2
 8001b40:	f000 f8da 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001b44:	20b6      	movs	r0, #182	; 0xb6
 8001b46:	f000 f8ca 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001b4a:	200a      	movs	r0, #10
 8001b4c:	f000 f8d4 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001b50:	20a7      	movs	r0, #167	; 0xa7
 8001b52:	f000 f8d1 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001b56:	2027      	movs	r0, #39	; 0x27
 8001b58:	f000 f8ce 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b5c:	2004      	movs	r0, #4
 8001b5e:	f000 f8cb 	bl	8001cf8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001b62:	202a      	movs	r0, #42	; 0x2a
 8001b64:	f000 f8bb 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f000 f8c5 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f8c2 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f000 f8bf 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001b7a:	20ef      	movs	r0, #239	; 0xef
 8001b7c:	f000 f8bc 	bl	8001cf8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001b80:	202b      	movs	r0, #43	; 0x2b
 8001b82:	f000 f8ac 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 f8b6 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f000 f8b3 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f000 f8b0 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001b98:	203f      	movs	r0, #63	; 0x3f
 8001b9a:	f000 f8ad 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001b9e:	20f6      	movs	r0, #246	; 0xf6
 8001ba0:	f000 f89d 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f000 f8a7 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 f8a4 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001bb0:	2006      	movs	r0, #6
 8001bb2:	f000 f8a1 	bl	8001cf8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001bb6:	202c      	movs	r0, #44	; 0x2c
 8001bb8:	f000 f891 	bl	8001cde <ili9341_WriteReg>
  LCD_Delay(200);
 8001bbc:	20c8      	movs	r0, #200	; 0xc8
 8001bbe:	f000 fc8f 	bl	80024e0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001bc2:	2026      	movs	r0, #38	; 0x26
 8001bc4:	f000 f88b 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f000 f895 	bl	8001cf8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001bce:	20e0      	movs	r0, #224	; 0xe0
 8001bd0:	f000 f885 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001bd4:	200f      	movs	r0, #15
 8001bd6:	f000 f88f 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001bda:	2029      	movs	r0, #41	; 0x29
 8001bdc:	f000 f88c 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001be0:	2024      	movs	r0, #36	; 0x24
 8001be2:	f000 f889 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001be6:	200c      	movs	r0, #12
 8001be8:	f000 f886 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001bec:	200e      	movs	r0, #14
 8001bee:	f000 f883 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001bf2:	2009      	movs	r0, #9
 8001bf4:	f000 f880 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001bf8:	204e      	movs	r0, #78	; 0x4e
 8001bfa:	f000 f87d 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001bfe:	2078      	movs	r0, #120	; 0x78
 8001c00:	f000 f87a 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001c04:	203c      	movs	r0, #60	; 0x3c
 8001c06:	f000 f877 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001c0a:	2009      	movs	r0, #9
 8001c0c:	f000 f874 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001c10:	2013      	movs	r0, #19
 8001c12:	f000 f871 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001c16:	2005      	movs	r0, #5
 8001c18:	f000 f86e 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001c1c:	2017      	movs	r0, #23
 8001c1e:	f000 f86b 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001c22:	2011      	movs	r0, #17
 8001c24:	f000 f868 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f000 f865 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001c2e:	20e1      	movs	r0, #225	; 0xe1
 8001c30:	f000 f855 	bl	8001cde <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001c34:	2000      	movs	r0, #0
 8001c36:	f000 f85f 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001c3a:	2016      	movs	r0, #22
 8001c3c:	f000 f85c 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001c40:	201b      	movs	r0, #27
 8001c42:	f000 f859 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001c46:	2004      	movs	r0, #4
 8001c48:	f000 f856 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001c4c:	2011      	movs	r0, #17
 8001c4e:	f000 f853 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001c52:	2007      	movs	r0, #7
 8001c54:	f000 f850 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001c58:	2031      	movs	r0, #49	; 0x31
 8001c5a:	f000 f84d 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001c5e:	2033      	movs	r0, #51	; 0x33
 8001c60:	f000 f84a 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001c64:	2042      	movs	r0, #66	; 0x42
 8001c66:	f000 f847 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001c6a:	2005      	movs	r0, #5
 8001c6c:	f000 f844 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001c70:	200c      	movs	r0, #12
 8001c72:	f000 f841 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001c76:	200a      	movs	r0, #10
 8001c78:	f000 f83e 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001c7c:	2028      	movs	r0, #40	; 0x28
 8001c7e:	f000 f83b 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001c82:	202f      	movs	r0, #47	; 0x2f
 8001c84:	f000 f838 	bl	8001cf8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001c88:	200f      	movs	r0, #15
 8001c8a:	f000 f835 	bl	8001cf8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001c8e:	2011      	movs	r0, #17
 8001c90:	f000 f825 	bl	8001cde <ili9341_WriteReg>
  LCD_Delay(200);
 8001c94:	20c8      	movs	r0, #200	; 0xc8
 8001c96:	f000 fc23 	bl	80024e0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c9a:	2029      	movs	r0, #41	; 0x29
 8001c9c:	f000 f81f 	bl	8001cde <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001ca0:	202c      	movs	r0, #44	; 0x2c
 8001ca2:	f000 f81c 	bl	8001cde <ili9341_WriteReg>
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001cae:	f000 fb29 	bl	8002304 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	20d3      	movs	r0, #211	; 0xd3
 8001cb6:	f000 f82c 	bl	8001d12 <ili9341_ReadData>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b29b      	uxth	r3, r3
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001cc6:	2029      	movs	r0, #41	; 0x29
 8001cc8:	f000 f809 	bl	8001cde <ili9341_WriteReg>
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001cd4:	2028      	movs	r0, #40	; 0x28
 8001cd6:	f000 f802 	bl	8001cde <ili9341_WriteReg>
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 fba4 	bl	8002438 <LCD_IO_WriteReg>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fb75 	bl	80023f4 <LCD_IO_WriteData>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	460a      	mov	r2, r1
 8001d1c:	80fb      	strh	r3, [r7, #6]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001d22:	797a      	ldrb	r2, [r7, #5]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fba7 	bl	800247c <LCD_IO_ReadData>
 8001d2e:	4603      	mov	r3, r0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001d3c:	23f0      	movs	r3, #240	; 0xf0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001d4c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001d68:	f000 fbc6 	bl	80024f8 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001d72:	f107 030f 	add.w	r3, r7, #15
 8001d76:	2201      	movs	r2, #1
 8001d78:	2120      	movs	r1, #32
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fc08 	bl	8002590 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001d8a:	f107 030f 	add.w	r3, r7, #15
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2123      	movs	r1, #35	; 0x23
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fbfc 	bl	8002590 <GYRO_IO_Write>
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001db4:	f000 fba0 	bl	80024f8 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	2201      	movs	r2, #1
 8001dbc:	210f      	movs	r1, #15
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fc18 	bl	80025f4 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001dd4:	1dfb      	adds	r3, r7, #7
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	2124      	movs	r1, #36	; 0x24
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fc0a 	bl	80025f4 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	2201      	movs	r2, #1
 8001dee:	2124      	movs	r1, #36	; 0x24
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fbcd 	bl	8002590 <GYRO_IO_Write>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001e12:	f107 030f 	add.w	r3, r7, #15
 8001e16:	2201      	movs	r2, #1
 8001e18:	2120      	movs	r1, #32
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fbb8 	bl	8002590 <GYRO_IO_Write>
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	2300      	movs	r3, #0
 8001e38:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001e3a:	f107 030f 	add.w	r3, r7, #15
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2130      	movs	r1, #48	; 0x30
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fbd6 	bl	80025f4 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001e48:	f107 030e 	add.w	r3, r7, #14
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2122      	movs	r1, #34	; 0x22
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fbcf 	bl	80025f4 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	121b      	asrs	r3, r3, #8
 8001e66:	b25a      	sxtb	r2, r3
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	f023 0320 	bic.w	r3, r3, #32
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	7bbb      	ldrb	r3, [r7, #14]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001e8a:	f107 030f 	add.w	r3, r7, #15
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2130      	movs	r1, #48	; 0x30
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fb7c 	bl	8002590 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001e98:	f107 030e 	add.w	r3, r7, #14
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2122      	movs	r1, #34	; 0x22
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fb75 	bl	8002590 <GYRO_IO_Write>
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001eb8:	f107 030f 	add.w	r3, r7, #15
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2122      	movs	r1, #34	; 0x22
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fb97 	bl	80025f4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e00c      	b.n	8001efc <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d109      	bne.n	8001efc <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	f023 0308 	bic.w	r3, r3, #8
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001efc:	f107 030f 	add.w	r3, r7, #15
 8001f00:	2201      	movs	r2, #1
 8001f02:	2122      	movs	r1, #34	; 0x22
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fb43 	bl	8002590 <GYRO_IO_Write>
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001f1c:	f107 030f 	add.w	r3, r7, #15
 8001f20:	2201      	movs	r2, #1
 8001f22:	2122      	movs	r1, #34	; 0x22
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fb65 	bl	80025f4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	73fb      	strb	r3, [r7, #15]
 8001f3e:	e009      	b.n	8001f54 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d106      	bne.n	8001f54 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	f023 0308 	bic.w	r3, r3, #8
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001f54:	f107 030f 	add.w	r3, r7, #15
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2122      	movs	r1, #34	; 0x22
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fb17 	bl	8002590 <GYRO_IO_Write>
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001f74:	f107 030f 	add.w	r3, r7, #15
 8001f78:	2201      	movs	r2, #1
 8001f7a:	2121      	movs	r1, #33	; 0x21
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fb39 	bl	80025f4 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001f96:	f107 030f 	add.w	r3, r7, #15
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2121      	movs	r1, #33	; 0x21
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 faf6 	bl	8002590 <GYRO_IO_Write>
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001fb6:	f107 030f 	add.w	r3, r7, #15
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2124      	movs	r1, #36	; 0x24
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fb18 	bl	80025f4 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	f023 0310 	bic.w	r3, r3, #16
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001fd8:	f107 030f 	add.w	r3, r7, #15
 8001fdc:	2201      	movs	r2, #1
 8001fde:	2124      	movs	r1, #36	; 0x24
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fad5 	bl	8002590 <GYRO_IO_Write>
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002018:	f107 030f 	add.w	r3, r7, #15
 800201c:	2201      	movs	r2, #1
 800201e:	2123      	movs	r1, #35	; 0x23
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fae7 	bl	80025f4 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8002026:	f107 0318 	add.w	r3, r7, #24
 800202a:	2206      	movs	r2, #6
 800202c:	2128      	movs	r1, #40	; 0x28
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fae0 	bl	80025f4 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d123      	bne.n	8002086 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	e01c      	b.n	800207e <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	3301      	adds	r3, #1
 800204a:	3328      	adds	r3, #40	; 0x28
 800204c:	443b      	add	r3, r7
 800204e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002052:	b29b      	uxth	r3, r3
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	b29a      	uxth	r2, r3
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	3328      	adds	r3, #40	; 0x28
 800205e:	443b      	add	r3, r7
 8002060:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002064:	b29b      	uxth	r3, r3
 8002066:	4413      	add	r3, r2
 8002068:	b29b      	uxth	r3, r3
 800206a:	b21a      	sxth	r2, r3
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	3328      	adds	r3, #40	; 0x28
 8002072:	443b      	add	r3, r7
 8002074:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	3301      	adds	r3, #1
 800207c:	623b      	str	r3, [r7, #32]
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b02      	cmp	r3, #2
 8002082:	dddf      	ble.n	8002044 <L3GD20_ReadXYZAngRate+0x54>
 8002084:	e022      	b.n	80020cc <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
 800208a:	e01c      	b.n	80020c6 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	3328      	adds	r3, #40	; 0x28
 8002092:	443b      	add	r3, r7
 8002094:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002098:	b29b      	uxth	r3, r3
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b29a      	uxth	r2, r3
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	3301      	adds	r3, #1
 80020a4:	3328      	adds	r3, #40	; 0x28
 80020a6:	443b      	add	r3, r7
 80020a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	3328      	adds	r3, #40	; 0x28
 80020ba:	443b      	add	r3, r7
 80020bc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	3301      	adds	r3, #1
 80020c4:	623b      	str	r3, [r7, #32]
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	dddf      	ble.n	800208c <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d00c      	beq.n	80020f0 <L3GD20_ReadXYZAngRate+0x100>
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	dc0d      	bgt.n	80020f6 <L3GD20_ReadXYZAngRate+0x106>
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <L3GD20_ReadXYZAngRate+0xf4>
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d003      	beq.n	80020ea <L3GD20_ReadXYZAngRate+0xfa>
 80020e2:	e008      	b.n	80020f6 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <L3GD20_ReadXYZAngRate+0x14c>)
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80020e8:	e005      	b.n	80020f6 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <L3GD20_ReadXYZAngRate+0x150>)
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80020ee:	e002      	b.n	80020f6 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <L3GD20_ReadXYZAngRate+0x154>)
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80020f4:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
 80020fa:	e016      	b.n	800212a <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	3328      	adds	r3, #40	; 0x28
 8002102:	443b      	add	r3, r7
 8002104:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	3301      	adds	r3, #1
 8002128:	623b      	str	r3, [r7, #32]
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	2b02      	cmp	r3, #2
 800212e:	dde5      	ble.n	80020fc <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3728      	adds	r7, #40	; 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	410c0000 	.word	0x410c0000
 8002140:	418c0000 	.word	0x418c0000
 8002144:	428c0000 	.word	0x428c0000

08002148 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800214c:	4819      	ldr	r0, [pc, #100]	; (80021b4 <SPIx_Init+0x6c>)
 800214e:	f005 fcca 	bl	8007ae6 <HAL_SPI_GetState>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d12b      	bne.n	80021b0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <SPIx_Init+0x6c>)
 800215a:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <SPIx_Init+0x70>)
 800215c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <SPIx_Init+0x6c>)
 8002160:	2218      	movs	r2, #24
 8002162:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <SPIx_Init+0x6c>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <SPIx_Init+0x6c>)
 800216c:	2200      	movs	r2, #0
 800216e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <SPIx_Init+0x6c>)
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <SPIx_Init+0x6c>)
 8002178:	2200      	movs	r2, #0
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <SPIx_Init+0x6c>)
 800217e:	2207      	movs	r2, #7
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <SPIx_Init+0x6c>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <SPIx_Init+0x6c>)
 800218a:	2200      	movs	r2, #0
 800218c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <SPIx_Init+0x6c>)
 8002190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002194:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <SPIx_Init+0x6c>)
 8002198:	2200      	movs	r2, #0
 800219a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SPIx_Init+0x6c>)
 800219e:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80021a4:	4803      	ldr	r0, [pc, #12]	; (80021b4 <SPIx_Init+0x6c>)
 80021a6:	f000 f873 	bl	8002290 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80021aa:	4802      	ldr	r0, [pc, #8]	; (80021b4 <SPIx_Init+0x6c>)
 80021ac:	f004 fffb 	bl	80071a6 <HAL_SPI_Init>
  } 
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000508 	.word	0x20000508
 80021b8:	40015000 	.word	0x40015000

080021bc <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <SPIx_Read+0x38>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f107 0108 	add.w	r1, r7, #8
 80021d6:	4808      	ldr	r0, [pc, #32]	; (80021f8 <SPIx_Read+0x3c>)
 80021d8:	f005 f9d2 	bl	8007580 <HAL_SPI_Receive>
 80021dc:	4603      	mov	r3, r0
 80021de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80021e6:	f000 f847 	bl	8002278 <SPIx_Error>
  }
  
  return readvalue;
 80021ea:	68bb      	ldr	r3, [r7, #8]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000070 	.word	0x20000070
 80021f8:	20000508 	.word	0x20000508

080021fc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <SPIx_Write+0x34>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	1db9      	adds	r1, r7, #6
 8002210:	2201      	movs	r2, #1
 8002212:	4808      	ldr	r0, [pc, #32]	; (8002234 <SPIx_Write+0x38>)
 8002214:	f005 f878 	bl	8007308 <HAL_SPI_Transmit>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002222:	f000 f829 	bl	8002278 <SPIx_Error>
  }
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000070 	.word	0x20000070
 8002234:	20000508 	.word	0x20000508

08002238 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af02      	add	r7, sp, #8
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <SPIx_WriteRead+0x38>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f107 020f 	add.w	r2, r7, #15
 800224e:	1df9      	adds	r1, r7, #7
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2301      	movs	r3, #1
 8002254:	4807      	ldr	r0, [pc, #28]	; (8002274 <SPIx_WriteRead+0x3c>)
 8002256:	f005 faa4 	bl	80077a2 <HAL_SPI_TransmitReceive>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002260:	f000 f80a 	bl	8002278 <SPIx_Error>
  }
  
  return receivedbyte;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000070 	.word	0x20000070
 8002274:	20000508 	.word	0x20000508

08002278 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800227c:	4803      	ldr	r0, [pc, #12]	; (800228c <SPIx_Error+0x14>)
 800227e:	f005 f81b 	bl	80072b8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002282:	f7ff ff61 	bl	8002148 <SPIx_Init>
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000508 	.word	0x20000508

08002290 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <SPIx_MspInit+0x6c>)
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	4a16      	ldr	r2, [pc, #88]	; (80022fc <SPIx_MspInit+0x6c>)
 80022a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a6:	6453      	str	r3, [r2, #68]	; 0x44
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <SPIx_MspInit+0x6c>)
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <SPIx_MspInit+0x6c>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	4a0f      	ldr	r2, [pc, #60]	; (80022fc <SPIx_MspInit+0x6c>)
 80022be:	f043 0320 	orr.w	r3, r3, #32
 80022c2:	6313      	str	r3, [r2, #48]	; 0x30
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <SPIx_MspInit+0x6c>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80022d0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80022da:	2302      	movs	r3, #2
 80022dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80022de:	2301      	movs	r3, #1
 80022e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80022e2:	2305      	movs	r3, #5
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4804      	ldr	r0, [pc, #16]	; (8002300 <SPIx_MspInit+0x70>)
 80022ee:	f001 fe11 	bl	8003f14 <HAL_GPIO_Init>
}
 80022f2:	bf00      	nop
 80022f4:	3728      	adds	r7, #40	; 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40021400 	.word	0x40021400

08002304 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800230a:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <LCD_IO_Init+0xe0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d164      	bne.n	80023dc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002312:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <LCD_IO_Init+0xe0>)
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <LCD_IO_Init+0xe4>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	4a31      	ldr	r2, [pc, #196]	; (80023e8 <LCD_IO_Init+0xe4>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6313      	str	r3, [r2, #48]	; 0x30
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <LCD_IO_Init+0xe4>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002338:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800233a:	2301      	movs	r3, #1
 800233c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002342:	2302      	movs	r3, #2
 8002344:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	4619      	mov	r1, r3
 800234c:	4827      	ldr	r0, [pc, #156]	; (80023ec <LCD_IO_Init+0xe8>)
 800234e:	f001 fde1 	bl	8003f14 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <LCD_IO_Init+0xe4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a23      	ldr	r2, [pc, #140]	; (80023e8 <LCD_IO_Init+0xe4>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <LCD_IO_Init+0xe4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800236e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002372:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002374:	2301      	movs	r3, #1
 8002376:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800237c:	2302      	movs	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	4619      	mov	r1, r3
 8002386:	4819      	ldr	r0, [pc, #100]	; (80023ec <LCD_IO_Init+0xe8>)
 8002388:	f001 fdc4 	bl	8003f14 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <LCD_IO_Init+0xe4>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <LCD_IO_Init+0xe4>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6313      	str	r3, [r2, #48]	; 0x30
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <LCD_IO_Init+0xe4>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80023a8:	2304      	movs	r3, #4
 80023aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80023ac:	2301      	movs	r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023b4:	2302      	movs	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	4619      	mov	r1, r3
 80023be:	480c      	ldr	r0, [pc, #48]	; (80023f0 <LCD_IO_Init+0xec>)
 80023c0:	f001 fda8 	bl	8003f14 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80023c4:	2200      	movs	r2, #0
 80023c6:	2104      	movs	r1, #4
 80023c8:	4809      	ldr	r0, [pc, #36]	; (80023f0 <LCD_IO_Init+0xec>)
 80023ca:	f002 f85b 	bl	8004484 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80023ce:	2201      	movs	r2, #1
 80023d0:	2104      	movs	r1, #4
 80023d2:	4807      	ldr	r0, [pc, #28]	; (80023f0 <LCD_IO_Init+0xec>)
 80023d4:	f002 f856 	bl	8004484 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80023d8:	f7ff feb6 	bl	8002148 <SPIx_Init>
  }
}
 80023dc:	bf00      	nop
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000560 	.word	0x20000560
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40020c00 	.word	0x40020c00
 80023f0:	40020800 	.word	0x40020800

080023f4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80023fe:	2201      	movs	r2, #1
 8002400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002404:	480a      	ldr	r0, [pc, #40]	; (8002430 <LCD_IO_WriteData+0x3c>)
 8002406:	f002 f83d 	bl	8004484 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800240a:	2200      	movs	r2, #0
 800240c:	2104      	movs	r1, #4
 800240e:	4809      	ldr	r0, [pc, #36]	; (8002434 <LCD_IO_WriteData+0x40>)
 8002410:	f002 f838 	bl	8004484 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fef0 	bl	80021fc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800241c:	2201      	movs	r2, #1
 800241e:	2104      	movs	r1, #4
 8002420:	4804      	ldr	r0, [pc, #16]	; (8002434 <LCD_IO_WriteData+0x40>)
 8002422:	f002 f82f 	bl	8004484 <HAL_GPIO_WritePin>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40020800 	.word	0x40020800

08002438 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002442:	2200      	movs	r2, #0
 8002444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002448:	480a      	ldr	r0, [pc, #40]	; (8002474 <LCD_IO_WriteReg+0x3c>)
 800244a:	f002 f81b 	bl	8004484 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800244e:	2200      	movs	r2, #0
 8002450:	2104      	movs	r1, #4
 8002452:	4809      	ldr	r0, [pc, #36]	; (8002478 <LCD_IO_WriteReg+0x40>)
 8002454:	f002 f816 	bl	8004484 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	b29b      	uxth	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fecd 	bl	80021fc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002462:	2201      	movs	r2, #1
 8002464:	2104      	movs	r1, #4
 8002466:	4804      	ldr	r0, [pc, #16]	; (8002478 <LCD_IO_WriteReg+0x40>)
 8002468:	f002 f80c 	bl	8004484 <HAL_GPIO_WritePin>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40020c00 	.word	0x40020c00
 8002478:	40020800 	.word	0x40020800

0800247c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	460a      	mov	r2, r1
 8002486:	80fb      	strh	r3, [r7, #6]
 8002488:	4613      	mov	r3, r2
 800248a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002490:	2200      	movs	r2, #0
 8002492:	2104      	movs	r1, #4
 8002494:	4810      	ldr	r0, [pc, #64]	; (80024d8 <LCD_IO_ReadData+0x5c>)
 8002496:	f001 fff5 	bl	8004484 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800249a:	2200      	movs	r2, #0
 800249c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024a0:	480e      	ldr	r0, [pc, #56]	; (80024dc <LCD_IO_ReadData+0x60>)
 80024a2:	f001 ffef 	bl	8004484 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fea7 	bl	80021fc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80024ae:	797b      	ldrb	r3, [r7, #5]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fe83 	bl	80021bc <SPIx_Read>
 80024b6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80024b8:	2201      	movs	r2, #1
 80024ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024be:	4807      	ldr	r0, [pc, #28]	; (80024dc <LCD_IO_ReadData+0x60>)
 80024c0:	f001 ffe0 	bl	8004484 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80024c4:	2201      	movs	r2, #1
 80024c6:	2104      	movs	r1, #4
 80024c8:	4803      	ldr	r0, [pc, #12]	; (80024d8 <LCD_IO_ReadData+0x5c>)
 80024ca:	f001 ffdb 	bl	8004484 <HAL_GPIO_WritePin>
  
  return readvalue;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40020800 	.word	0x40020800
 80024dc:	40020c00 	.word	0x40020c00

080024e0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 ffb9 	bl	8003460 <HAL_Delay>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <GYRO_IO_Init+0x8c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <GYRO_IO_Init+0x8c>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <GYRO_IO_Init+0x8c>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800251a:	2302      	movs	r3, #2
 800251c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800251e:	2301      	movs	r3, #1
 8002520:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002526:	2301      	movs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	4619      	mov	r1, r3
 8002530:	4815      	ldr	r0, [pc, #84]	; (8002588 <GYRO_IO_Init+0x90>)
 8002532:	f001 fcef 	bl	8003f14 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8002536:	2201      	movs	r2, #1
 8002538:	2102      	movs	r1, #2
 800253a:	4813      	ldr	r0, [pc, #76]	; (8002588 <GYRO_IO_Init+0x90>)
 800253c:	f001 ffa2 	bl	8004484 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <GYRO_IO_Init+0x8c>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <GYRO_IO_Init+0x8c>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6313      	str	r3, [r2, #48]	; 0x30
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <GYRO_IO_Init+0x8c>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800255c:	2306      	movs	r3, #6
 800255e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002564:	2302      	movs	r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	; (800258c <GYRO_IO_Init+0x94>)
 8002574:	f001 fcce 	bl	8003f14 <HAL_GPIO_Init>

  SPIx_Init();
 8002578:	f7ff fde6 	bl	8002148 <SPIx_Init>
}
 800257c:	bf00      	nop
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	40020800 	.word	0x40020800
 800258c:	40020000 	.word	0x40020000

08002590 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
 800259c:	4613      	mov	r3, r2
 800259e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80025a0:	883b      	ldrh	r3, [r7, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d903      	bls.n	80025ae <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ac:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80025ae:	2200      	movs	r2, #0
 80025b0:	2102      	movs	r1, #2
 80025b2:	480f      	ldr	r0, [pc, #60]	; (80025f0 <GYRO_IO_Write+0x60>)
 80025b4:	f001 ff66 	bl	8004484 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fe3c 	bl	8002238 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80025c0:	e00a      	b.n	80025d8 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fe36 	bl	8002238 <SPIx_WriteRead>
    NumByteToWrite--;
 80025cc:	883b      	ldrh	r3, [r7, #0]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3301      	adds	r3, #1
 80025d6:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80025d8:	883b      	ldrh	r3, [r7, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f1      	bne.n	80025c2 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80025de:	2201      	movs	r2, #1
 80025e0:	2102      	movs	r1, #2
 80025e2:	4803      	ldr	r0, [pc, #12]	; (80025f0 <GYRO_IO_Write+0x60>)
 80025e4:	f001 ff4e 	bl	8004484 <HAL_GPIO_WritePin>
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40020800 	.word	0x40020800

080025f4 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
 8002600:	4613      	mov	r3, r2
 8002602:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002604:	883b      	ldrh	r3, [r7, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d904      	bls.n	8002614 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002610:	70fb      	strb	r3, [r7, #3]
 8002612:	e003      	b.n	800261c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800261a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800261c:	2200      	movs	r2, #0
 800261e:	2102      	movs	r1, #2
 8002620:	4810      	ldr	r0, [pc, #64]	; (8002664 <GYRO_IO_Read+0x70>)
 8002622:	f001 ff2f 	bl	8004484 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fe05 	bl	8002238 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800262e:	e00c      	b.n	800264a <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002630:	2000      	movs	r0, #0
 8002632:	f7ff fe01 	bl	8002238 <SPIx_WriteRead>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800263e:	883b      	ldrh	r3, [r7, #0]
 8002640:	3b01      	subs	r3, #1
 8002642:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3301      	adds	r3, #1
 8002648:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800264a:	883b      	ldrh	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ef      	bne.n	8002630 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002650:	2201      	movs	r2, #1
 8002652:	2102      	movs	r1, #2
 8002654:	4803      	ldr	r0, [pc, #12]	; (8002664 <GYRO_IO_Read+0x70>)
 8002656:	f001 ff15 	bl	8004484 <HAL_GPIO_WritePin>
}  
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40020800 	.word	0x40020800

08002668 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002672:	2300      	movs	r3, #0
 8002674:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002676:	2300      	movs	r3, #0
 8002678:	703b      	strb	r3, [r7, #0]
 800267a:	2300      	movs	r3, #0
 800267c:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800267e:	4b2b      	ldr	r3, [pc, #172]	; (800272c <BSP_GYRO_Init+0xc4>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4798      	blx	r3
 8002684:	4603      	mov	r3, r0
 8002686:	2bd4      	cmp	r3, #212	; 0xd4
 8002688:	d005      	beq.n	8002696 <BSP_GYRO_Init+0x2e>
 800268a:	4b28      	ldr	r3, [pc, #160]	; (800272c <BSP_GYRO_Init+0xc4>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4798      	blx	r3
 8002690:	4603      	mov	r3, r0
 8002692:	2bd5      	cmp	r3, #213	; 0xd5
 8002694:	d145      	bne.n	8002722 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <BSP_GYRO_Init+0xc8>)
 8002698:	4a24      	ldr	r2, [pc, #144]	; (800272c <BSP_GYRO_Init+0xc4>)
 800269a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 800269c:	2308      	movs	r3, #8
 800269e:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80026a0:	2300      	movs	r3, #0
 80026a2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80026a4:	2307      	movs	r3, #7
 80026a6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80026a8:	2330      	movs	r3, #48	; 0x30
 80026aa:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80026ac:	2300      	movs	r3, #0
 80026ae:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80026b0:	2300      	movs	r3, #0
 80026b2:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80026b4:	2310      	movs	r3, #16
 80026b6:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80026b8:	793a      	ldrb	r2, [r7, #4]
 80026ba:	797b      	ldrb	r3, [r7, #5]
 80026bc:	4313      	orrs	r3, r2
 80026be:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80026c0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80026c6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80026ce:	7a3a      	ldrb	r2, [r7, #8]
 80026d0:	7a7b      	ldrb	r3, [r7, #9]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80026d6:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80026d8:	4313      	orrs	r3, r2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	b29b      	uxth	r3, r3
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	89bb      	ldrh	r3, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <BSP_GYRO_Init+0xc8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	89ba      	ldrh	r2, [r7, #12]
 80026f0:	4610      	mov	r0, r2
 80026f2:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80026f4:	2300      	movs	r3, #0
 80026f6:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80026fc:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80026fe:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002700:	4313      	orrs	r3, r2
 8002702:	b2db      	uxtb	r3, r3
 8002704:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <BSP_GYRO_Init+0xc8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	89ba      	ldrh	r2, [r7, #12]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	4610      	mov	r0, r2
 8002712:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <BSP_GYRO_Init+0xc8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	2010      	movs	r0, #16
 800271c:	4798      	blx	r3

    ret = GYRO_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000003c 	.word	0x2000003c
 8002730:	20000564 	.word	0x20000564

08002734 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <BSP_GYRO_GetXYZ+0x24>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	2b00      	cmp	r3, #0
 8002744:	d004      	beq.n	8002750 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <BSP_GYRO_GetXYZ+0x24>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
  }
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000564 	.word	0x20000564

0800275c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <BSP_LCD_Init+0xbc>)
 8002762:	4a2e      	ldr	r2, [pc, #184]	; (800281c <BSP_LCD_Init+0xc0>)
 8002764:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002766:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <BSP_LCD_Init+0xbc>)
 8002768:	2209      	movs	r2, #9
 800276a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800276c:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <BSP_LCD_Init+0xbc>)
 800276e:	2201      	movs	r2, #1
 8002770:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <BSP_LCD_Init+0xbc>)
 8002774:	221d      	movs	r2, #29
 8002776:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <BSP_LCD_Init+0xbc>)
 800277a:	2203      	movs	r2, #3
 800277c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800277e:	4b26      	ldr	r3, [pc, #152]	; (8002818 <BSP_LCD_Init+0xbc>)
 8002780:	f240 120d 	movw	r2, #269	; 0x10d
 8002784:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <BSP_LCD_Init+0xbc>)
 8002788:	f240 1243 	movw	r2, #323	; 0x143
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800278e:	4b22      	ldr	r3, [pc, #136]	; (8002818 <BSP_LCD_Init+0xbc>)
 8002790:	f240 1217 	movw	r2, #279	; 0x117
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <BSP_LCD_Init+0xbc>)
 8002798:	f240 1247 	movw	r2, #327	; 0x147
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <BSP_LCD_Init+0xbc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80027a6:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <BSP_LCD_Init+0xbc>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <BSP_LCD_Init+0xbc>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <BSP_LCD_Init+0xc4>)
 80027b8:	2208      	movs	r2, #8
 80027ba:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <BSP_LCD_Init+0xc4>)
 80027be:	22c0      	movs	r2, #192	; 0xc0
 80027c0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <BSP_LCD_Init+0xc4>)
 80027c4:	2204      	movs	r2, #4
 80027c6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <BSP_LCD_Init+0xc4>)
 80027ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80027d0:	4813      	ldr	r0, [pc, #76]	; (8002820 <BSP_LCD_Init+0xc4>)
 80027d2:	f004 fa8d 	bl	8006cf0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <BSP_LCD_Init+0xbc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <BSP_LCD_Init+0xbc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <BSP_LCD_Init+0xbc>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <BSP_LCD_Init+0xbc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80027ee:	f000 faf7 	bl	8002de0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80027f2:	4809      	ldr	r0, [pc, #36]	; (8002818 <BSP_LCD_Init+0xbc>)
 80027f4:	f002 f820 	bl	8004838 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <BSP_LCD_Init+0xc8>)
 80027fa:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <BSP_LCD_Init+0xcc>)
 80027fc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <BSP_LCD_Init+0xc8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002806:	f000 fc1f 	bl	8003048 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800280a:	4808      	ldr	r0, [pc, #32]	; (800282c <BSP_LCD_Init+0xd0>)
 800280c:	f000 f8ce 	bl	80029ac <BSP_LCD_SetFont>

  return LCD_OK;
 8002810:	2300      	movs	r3, #0
}  
 8002812:	4618      	mov	r0, r3
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000568 	.word	0x20000568
 800281c:	40016800 	.word	0x40016800
 8002820:	20000650 	.word	0x20000650
 8002824:	2000069c 	.word	0x2000069c
 8002828:	20000004 	.word	0x20000004
 800282c:	20000074 	.word	0x20000074

08002830 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <BSP_LCD_GetXSize+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	4798      	blx	r3
 800283c:	4603      	mov	r3, r0
}
 800283e:	4618      	mov	r0, r3
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000069c 	.word	0x2000069c

08002848 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <BSP_LCD_GetYSize+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	4798      	blx	r3
 8002854:	4603      	mov	r3, r0
}
 8002856:	4618      	mov	r0, r3
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000069c 	.word	0x2000069c

08002860 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002860:	b580      	push	{r7, lr}
 8002862:	b090      	sub	sp, #64	; 0x40
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002870:	f7ff ffde 	bl	8002830 <BSP_LCD_GetXSize>
 8002874:	4603      	mov	r3, r0
 8002876:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800287c:	f7ff ffe4 	bl	8002848 <BSP_LCD_GetYSize>
 8002880:	4603      	mov	r3, r0
 8002882:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800288c:	23ff      	movs	r3, #255	; 0xff
 800288e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80028a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80028ac:	2307      	movs	r3, #7
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80028b0:	f7ff ffbe 	bl	8002830 <BSP_LCD_GetXSize>
 80028b4:	4603      	mov	r3, r0
 80028b6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80028b8:	f7ff ffc6 	bl	8002848 <BSP_LCD_GetYSize>
 80028bc:	4603      	mov	r3, r0
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80028c0:	88fa      	ldrh	r2, [r7, #6]
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	4619      	mov	r1, r3
 80028c8:	4814      	ldr	r0, [pc, #80]	; (800291c <BSP_LCD_LayerDefaultInit+0xbc>)
 80028ca:	f002 f88f 	bl	80049ec <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	4913      	ldr	r1, [pc, #76]	; (8002920 <BSP_LCD_LayerDefaultInit+0xc0>)
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3304      	adds	r3, #4
 80028de:	f04f 32ff 	mov.w	r2, #4294967295
 80028e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	490e      	ldr	r1, [pc, #56]	; (8002920 <BSP_LCD_LayerDefaultInit+0xc0>)
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3308      	adds	r3, #8
 80028f4:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <BSP_LCD_LayerDefaultInit+0xc4>)
 80028f6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	4909      	ldr	r1, [pc, #36]	; (8002920 <BSP_LCD_LayerDefaultInit+0xc0>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800290a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800290c:	4803      	ldr	r0, [pc, #12]	; (800291c <BSP_LCD_LayerDefaultInit+0xbc>)
 800290e:	f002 f8ab 	bl	8004a68 <HAL_LTDC_EnableDither>
}
 8002912:	bf00      	nop
 8002914:	3740      	adds	r7, #64	; 0x40
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000568 	.word	0x20000568
 8002920:	20000684 	.word	0x20000684
 8002924:	20000074 	.word	0x20000074

08002928 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <BSP_LCD_SelectLayer+0x1c>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6013      	str	r3, [r2, #0]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000680 	.word	0x20000680

08002948 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <BSP_LCD_SetTextColor+0x28>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4907      	ldr	r1, [pc, #28]	; (8002974 <BSP_LCD_SetTextColor+0x2c>)
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	20000680 	.word	0x20000680
 8002974:	20000684 	.word	0x20000684

08002978 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <BSP_LCD_SetBackColor+0x2c>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4908      	ldr	r1, [pc, #32]	; (80029a8 <BSP_LCD_SetBackColor+0x30>)
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3304      	adds	r3, #4
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	601a      	str	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000680 	.word	0x20000680
 80029a8:	20000684 	.word	0x20000684

080029ac <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <BSP_LCD_SetFont+0x2c>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4908      	ldr	r1, [pc, #32]	; (80029dc <BSP_LCD_SetFont+0x30>)
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3308      	adds	r3, #8
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000680 	.word	0x20000680
 80029dc:	20000684 	.word	0x20000684

080029e0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80029e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <BSP_LCD_Clear+0x48>)
 80029ea:	681c      	ldr	r4, [r3, #0]
 80029ec:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <BSP_LCD_Clear+0x48>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <BSP_LCD_Clear+0x4c>)
 80029f2:	2134      	movs	r1, #52	; 0x34
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	335c      	adds	r3, #92	; 0x5c
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461e      	mov	r6, r3
 8002a00:	f7ff ff16 	bl	8002830 <BSP_LCD_GetXSize>
 8002a04:	4605      	mov	r5, r0
 8002a06:	f7ff ff1f 	bl	8002848 <BSP_LCD_GetYSize>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	2300      	movs	r3, #0
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	462a      	mov	r2, r5
 8002a18:	4631      	mov	r1, r6
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	f000 fadc 	bl	8002fd8 <FillBuffer>
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a28:	20000680 	.word	0x20000680
 8002a2c:	20000568 	.word	0x20000568

08002a30 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	4603      	mov	r3, r0
 8002a38:	80fb      	strh	r3, [r7, #6]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	80bb      	strh	r3, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <BSP_LCD_DrawHLine+0x70>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <BSP_LCD_DrawHLine+0x74>)
 8002a4c:	2134      	movs	r1, #52	; 0x34
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	335c      	adds	r3, #92	; 0x5c
 8002a56:	681c      	ldr	r4, [r3, #0]
 8002a58:	f7ff feea 	bl	8002830 <BSP_LCD_GetXSize>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	88bb      	ldrh	r3, [r7, #4]
 8002a60:	fb03 f202 	mul.w	r2, r3, r2
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4423      	add	r3, r4
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <BSP_LCD_DrawHLine+0x70>)
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	68f9      	ldr	r1, [r7, #12]
 8002a74:	887c      	ldrh	r4, [r7, #2]
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <BSP_LCD_DrawHLine+0x70>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4d0b      	ldr	r5, [pc, #44]	; (8002aa8 <BSP_LCD_DrawHLine+0x78>)
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	442b      	add	r3, r5
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2301      	movs	r3, #1
 8002a90:	4622      	mov	r2, r4
 8002a92:	f000 faa1 	bl	8002fd8 <FillBuffer>
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000680 	.word	0x20000680
 8002aa4:	20000568 	.word	0x20000568
 8002aa8:	20000684 	.word	0x20000684

08002aac <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	80fb      	strh	r3, [r7, #6]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	80bb      	strh	r3, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002abe:	887b      	ldrh	r3, [r7, #2]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	f1c3 0303 	rsb	r3, r3, #3
 8002ac6:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002ad0:	e0c7      	b.n	8002c62 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4413      	add	r3, r2
 8002ada:	b298      	uxth	r0, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	88ba      	ldrh	r2, [r7, #4]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	b299      	uxth	r1, r3
 8002ae6:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <BSP_LCD_DrawCircle+0x1cc>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4c64      	ldr	r4, [pc, #400]	; (8002c7c <BSP_LCD_DrawCircle+0x1d0>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4423      	add	r3, r4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	f000 fa47 	bl	8002f8c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	88fa      	ldrh	r2, [r7, #6]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	b298      	uxth	r0, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	88ba      	ldrh	r2, [r7, #4]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	b299      	uxth	r1, r3
 8002b12:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <BSP_LCD_DrawCircle+0x1cc>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4c59      	ldr	r4, [pc, #356]	; (8002c7c <BSP_LCD_DrawCircle+0x1d0>)
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4423      	add	r3, r4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	f000 fa31 	bl	8002f8c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	4413      	add	r3, r2
 8002b32:	b298      	uxth	r0, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	88ba      	ldrh	r2, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	b299      	uxth	r1, r3
 8002b3e:	4b4e      	ldr	r3, [pc, #312]	; (8002c78 <BSP_LCD_DrawCircle+0x1cc>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4c4e      	ldr	r4, [pc, #312]	; (8002c7c <BSP_LCD_DrawCircle+0x1d0>)
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4423      	add	r3, r4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f000 fa1b 	bl	8002f8c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	b298      	uxth	r0, r3
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	88ba      	ldrh	r2, [r7, #4]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	b299      	uxth	r1, r3
 8002b6a:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <BSP_LCD_DrawCircle+0x1cc>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4c43      	ldr	r4, [pc, #268]	; (8002c7c <BSP_LCD_DrawCircle+0x1d0>)
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4423      	add	r3, r4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f000 fa05 	bl	8002f8c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	4413      	add	r3, r2
 8002b8a:	b298      	uxth	r0, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	88bb      	ldrh	r3, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	b299      	uxth	r1, r3
 8002b96:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <BSP_LCD_DrawCircle+0x1cc>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4c38      	ldr	r4, [pc, #224]	; (8002c7c <BSP_LCD_DrawCircle+0x1d0>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4423      	add	r3, r4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f000 f9ef 	bl	8002f8c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	88fa      	ldrh	r2, [r7, #6]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	b298      	uxth	r0, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	88bb      	ldrh	r3, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	b299      	uxth	r1, r3
 8002bc2:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <BSP_LCD_DrawCircle+0x1cc>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4c2d      	ldr	r4, [pc, #180]	; (8002c7c <BSP_LCD_DrawCircle+0x1d0>)
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4423      	add	r3, r4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f000 f9d9 	bl	8002f8c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	4413      	add	r3, r2
 8002be2:	b298      	uxth	r0, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	88bb      	ldrh	r3, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	b299      	uxth	r1, r3
 8002bee:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <BSP_LCD_DrawCircle+0x1cc>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4c22      	ldr	r4, [pc, #136]	; (8002c7c <BSP_LCD_DrawCircle+0x1d0>)
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4423      	add	r3, r4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	f000 f9c3 	bl	8002f8c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	b298      	uxth	r0, r3
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	88bb      	ldrh	r3, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	b299      	uxth	r1, r3
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <BSP_LCD_DrawCircle+0x1cc>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4c17      	ldr	r4, [pc, #92]	; (8002c7c <BSP_LCD_DrawCircle+0x1d0>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4423      	add	r3, r4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f000 f9ad 	bl	8002f8c <BSP_LCD_DrawPixel>

    if (d < 0)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	da06      	bge.n	8002c46 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	009a      	lsls	r2, r3, #2
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	4413      	add	r3, r2
 8002c40:	3306      	adds	r3, #6
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e00a      	b.n	8002c5c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	009a      	lsls	r2, r3, #2
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	4413      	add	r3, r2
 8002c52:	330a      	adds	r3, #10
 8002c54:	617b      	str	r3, [r7, #20]
      cury--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	f67f af33 	bls.w	8002ad2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd90      	pop	{r4, r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000680 	.word	0x20000680
 8002c7c:	20000684 	.word	0x20000684

08002c80 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	80fb      	strh	r3, [r7, #6]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	80bb      	strh	r3, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	f1c3 0303 	rsb	r3, r3, #3
 8002c9a:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002ca4:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <BSP_LCD_FillCircle+0x138>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4944      	ldr	r1, [pc, #272]	; (8002dbc <BSP_LCD_FillCircle+0x13c>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fe46 	bl	8002948 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002cbc:	e061      	b.n	8002d82 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d021      	beq.n	8002d08 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	b298      	uxth	r0, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	88bb      	ldrh	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	b299      	uxth	r1, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f7ff fea5 	bl	8002a30 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	88fa      	ldrh	r2, [r7, #6]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	b298      	uxth	r0, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	88ba      	ldrh	r2, [r7, #4]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	b299      	uxth	r1, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	f7ff fe94 	bl	8002a30 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d021      	beq.n	8002d52 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	b298      	uxth	r0, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	88ba      	ldrh	r2, [r7, #4]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	b299      	uxth	r1, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f7ff fe80 	bl	8002a30 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	b298      	uxth	r0, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	88bb      	ldrh	r3, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	b299      	uxth	r1, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f7ff fe6f 	bl	8002a30 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da06      	bge.n	8002d66 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	009a      	lsls	r2, r3, #2
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	4413      	add	r3, r2
 8002d60:	3306      	adds	r3, #6
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	e00a      	b.n	8002d7c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	009a      	lsls	r2, r3, #2
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	4413      	add	r3, r2
 8002d72:	330a      	adds	r3, #10
 8002d74:	617b      	str	r3, [r7, #20]
      cury--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d999      	bls.n	8002cbe <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <BSP_LCD_FillCircle+0x138>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	490b      	ldr	r1, [pc, #44]	; (8002dbc <BSP_LCD_FillCircle+0x13c>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fdd3 	bl	8002948 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	88b9      	ldrh	r1, [r7, #4]
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fe7f 	bl	8002aac <BSP_LCD_DrawCircle>
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000680 	.word	0x20000680
 8002dbc:	20000684 	.word	0x20000684

08002dc0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <BSP_LCD_DisplayOn+0x1c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002dce:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <BSP_LCD_DisplayOn+0x1c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4798      	blx	r3
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	2000069c 	.word	0x2000069c

08002de0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08e      	sub	sp, #56	; 0x38
 8002de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	4b61      	ldr	r3, [pc, #388]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	4a60      	ldr	r2, [pc, #384]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002df0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002df4:	6453      	str	r3, [r2, #68]	; 0x44
 8002df6:	4b5e      	ldr	r3, [pc, #376]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dfe:	623b      	str	r3, [r7, #32]
 8002e00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	4b5a      	ldr	r3, [pc, #360]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a59      	ldr	r2, [pc, #356]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b57      	ldr	r3, [pc, #348]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	4b53      	ldr	r3, [pc, #332]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a52      	ldr	r2, [pc, #328]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b50      	ldr	r3, [pc, #320]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	4b4c      	ldr	r3, [pc, #304]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a4b      	ldr	r2, [pc, #300]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b49      	ldr	r3, [pc, #292]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	4b45      	ldr	r3, [pc, #276]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a44      	ldr	r2, [pc, #272]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b42      	ldr	r3, [pc, #264]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	4b3e      	ldr	r3, [pc, #248]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a3d      	ldr	r2, [pc, #244]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e7c:	f043 0308 	orr.w	r3, r3, #8
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b37      	ldr	r3, [pc, #220]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a36      	ldr	r2, [pc, #216]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002e98:	f043 0320 	orr.w	r3, r3, #32
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	4b30      	ldr	r3, [pc, #192]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a2f      	ldr	r2, [pc, #188]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <BSP_LCD_MspInit+0x190>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002ec6:	f641 0358 	movw	r3, #6232	; 0x1858
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002ed8:	230e      	movs	r3, #14
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4824      	ldr	r0, [pc, #144]	; (8002f74 <BSP_LCD_MspInit+0x194>)
 8002ee4:	f001 f816 	bl	8003f14 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002ee8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4820      	ldr	r0, [pc, #128]	; (8002f78 <BSP_LCD_MspInit+0x198>)
 8002ef6:	f001 f80d 	bl	8003f14 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002efa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f04:	4619      	mov	r1, r3
 8002f06:	481d      	ldr	r0, [pc, #116]	; (8002f7c <BSP_LCD_MspInit+0x19c>)
 8002f08:	f001 f804 	bl	8003f14 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002f0c:	2348      	movs	r3, #72	; 0x48
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f14:	4619      	mov	r1, r3
 8002f16:	481a      	ldr	r0, [pc, #104]	; (8002f80 <BSP_LCD_MspInit+0x1a0>)
 8002f18:	f000 fffc 	bl	8003f14 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f26:	4619      	mov	r1, r3
 8002f28:	4816      	ldr	r0, [pc, #88]	; (8002f84 <BSP_LCD_MspInit+0x1a4>)
 8002f2a:	f000 fff3 	bl	8003f14 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002f2e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4813      	ldr	r0, [pc, #76]	; (8002f88 <BSP_LCD_MspInit+0x1a8>)
 8002f3c:	f000 ffea 	bl	8003f14 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002f40:	2303      	movs	r3, #3
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002f44:	2309      	movs	r3, #9
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	480a      	ldr	r0, [pc, #40]	; (8002f78 <BSP_LCD_MspInit+0x198>)
 8002f50:	f000 ffe0 	bl	8003f14 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002f54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4809      	ldr	r0, [pc, #36]	; (8002f88 <BSP_LCD_MspInit+0x1a8>)
 8002f62:	f000 ffd7 	bl	8003f14 <HAL_GPIO_Init>
}
 8002f66:	bf00      	nop
 8002f68:	3738      	adds	r7, #56	; 0x38
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40020000 	.word	0x40020000
 8002f78:	40020400 	.word	0x40020400
 8002f7c:	40020800 	.word	0x40020800
 8002f80:	40020c00 	.word	0x40020c00
 8002f84:	40021400 	.word	0x40021400
 8002f88:	40021800 	.word	0x40021800

08002f8c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002f8c:	b5b0      	push	{r4, r5, r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	603a      	str	r2, [r7, #0]
 8002f96:	80fb      	strh	r3, [r7, #6]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <BSP_LCD_DrawPixel+0x44>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <BSP_LCD_DrawPixel+0x48>)
 8002fa2:	2134      	movs	r1, #52	; 0x34
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	335c      	adds	r3, #92	; 0x5c
 8002fac:	681c      	ldr	r4, [r3, #0]
 8002fae:	88bd      	ldrh	r5, [r7, #4]
 8002fb0:	f7ff fc3e 	bl	8002830 <BSP_LCD_GetXSize>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	fb03 f205 	mul.w	r2, r3, r5
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4423      	add	r3, r4
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6013      	str	r3, [r2, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd0:	20000680 	.word	0x20000680
 8002fd4:	20000568 	.word	0x20000568

08002fd8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <FillBuffer+0x68>)
 8002fe8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fec:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <FillBuffer+0x68>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002ff4:	4a12      	ldr	r2, [pc, #72]	; (8003040 <FillBuffer+0x68>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <FillBuffer+0x68>)
 8002ffc:	4a11      	ldr	r2, [pc, #68]	; (8003044 <FillBuffer+0x6c>)
 8002ffe:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003000:	480f      	ldr	r0, [pc, #60]	; (8003040 <FillBuffer+0x68>)
 8003002:	f000 fcf1 	bl	80039e8 <HAL_DMA2D_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d115      	bne.n	8003038 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800300c:	68f9      	ldr	r1, [r7, #12]
 800300e:	480c      	ldr	r0, [pc, #48]	; (8003040 <FillBuffer+0x68>)
 8003010:	f000 fe52 	bl	8003cb8 <HAL_DMA2D_ConfigLayer>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10e      	bne.n	8003038 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69f9      	ldr	r1, [r7, #28]
 8003024:	4806      	ldr	r0, [pc, #24]	; (8003040 <FillBuffer+0x68>)
 8003026:	f000 fd32 	bl	8003a8e <HAL_DMA2D_Start>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d103      	bne.n	8003038 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003030:	210a      	movs	r1, #10
 8003032:	4803      	ldr	r0, [pc, #12]	; (8003040 <FillBuffer+0x68>)
 8003034:	f000 fd56 	bl	8003ae4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000610 	.word	0x20000610
 8003044:	4002b000 	.word	0x4002b000

08003048 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800304c:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 800304e:	4a2a      	ldr	r2, [pc, #168]	; (80030f8 <BSP_SDRAM_Init+0xb0>)
 8003050:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003052:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <BSP_SDRAM_Init+0xb4>)
 8003054:	2202      	movs	r2, #2
 8003056:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003058:	4b28      	ldr	r3, [pc, #160]	; (80030fc <BSP_SDRAM_Init+0xb4>)
 800305a:	2207      	movs	r2, #7
 800305c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <BSP_SDRAM_Init+0xb4>)
 8003060:	2204      	movs	r2, #4
 8003062:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003064:	4b25      	ldr	r3, [pc, #148]	; (80030fc <BSP_SDRAM_Init+0xb4>)
 8003066:	2207      	movs	r2, #7
 8003068:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800306a:	4b24      	ldr	r3, [pc, #144]	; (80030fc <BSP_SDRAM_Init+0xb4>)
 800306c:	2202      	movs	r2, #2
 800306e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <BSP_SDRAM_Init+0xb4>)
 8003072:	2202      	movs	r2, #2
 8003074:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003076:	4b21      	ldr	r3, [pc, #132]	; (80030fc <BSP_SDRAM_Init+0xb4>)
 8003078:	2202      	movs	r2, #2
 800307a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 800307e:	2201      	movs	r2, #1
 8003080:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003082:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 800308a:	2204      	movs	r2, #4
 800308c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 8003090:	2210      	movs	r2, #16
 8003092:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003094:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 800309c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80030a0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80030a2:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 80030aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ae:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80030b6:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 80030b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80030be:	2100      	movs	r1, #0
 80030c0:	480c      	ldr	r0, [pc, #48]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 80030c2:	f000 f87f 	bl	80031c4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80030c6:	490d      	ldr	r1, [pc, #52]	; (80030fc <BSP_SDRAM_Init+0xb4>)
 80030c8:	480a      	ldr	r0, [pc, #40]	; (80030f4 <BSP_SDRAM_Init+0xac>)
 80030ca:	f003 ffd1 	bl	8007070 <HAL_SDRAM_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <BSP_SDRAM_Init+0xb8>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e002      	b.n	80030e2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80030dc:	4b08      	ldr	r3, [pc, #32]	; (8003100 <BSP_SDRAM_Init+0xb8>)
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80030e2:	f240 506a 	movw	r0, #1386	; 0x56a
 80030e6:	f000 f80d 	bl	8003104 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <BSP_SDRAM_Init+0xb8>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200006a0 	.word	0x200006a0
 80030f8:	a0000140 	.word	0xa0000140
 80030fc:	200006d4 	.word	0x200006d4
 8003100:	2000007c 	.word	0x2000007c

08003104 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003110:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003118:	2208      	movs	r2, #8
 800311a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800311e:	2201      	movs	r2, #1
 8003120:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003122:	4b26      	ldr	r3, [pc, #152]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003124:	2200      	movs	r2, #0
 8003126:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800312c:	4923      	ldr	r1, [pc, #140]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800312e:	4824      	ldr	r0, [pc, #144]	; (80031c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003130:	f003 ffdc 	bl	80070ec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003134:	2001      	movs	r0, #1
 8003136:	f000 f993 	bl	8003460 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800313c:	2202      	movs	r2, #2
 800313e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003140:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003142:	2208      	movs	r2, #8
 8003144:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003148:	2201      	movs	r2, #1
 800314a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003156:	4919      	ldr	r1, [pc, #100]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003158:	4819      	ldr	r0, [pc, #100]	; (80031c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800315a:	f003 ffc7 	bl	80070ec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800315e:	4b17      	ldr	r3, [pc, #92]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003160:	2203      	movs	r2, #3
 8003162:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003164:	4b15      	ldr	r3, [pc, #84]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003166:	2208      	movs	r2, #8
 8003168:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800316a:	4b14      	ldr	r3, [pc, #80]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800316c:	2204      	movs	r2, #4
 800316e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800317a:	4910      	ldr	r1, [pc, #64]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800317c:	4810      	ldr	r0, [pc, #64]	; (80031c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800317e:	f003 ffb5 	bl	80070ec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003182:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003186:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800318a:	2204      	movs	r2, #4
 800318c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003190:	2208      	movs	r2, #8
 8003192:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003196:	2201      	movs	r2, #1
 8003198:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a07      	ldr	r2, [pc, #28]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800319e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80031a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a4:	4905      	ldr	r1, [pc, #20]	; (80031bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031a6:	4806      	ldr	r0, [pc, #24]	; (80031c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80031a8:	f003 ffa0 	bl	80070ec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4804      	ldr	r0, [pc, #16]	; (80031c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80031b0:	f003 ffd1 	bl	8007156 <HAL_SDRAM_ProgramRefreshRate>
}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	200006f0 	.word	0x200006f0
 80031c0:	200006a0 	.word	0x200006a0

080031c4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b090      	sub	sp, #64	; 0x40
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80ec 	beq.w	80033ae <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031da:	4b77      	ldr	r3, [pc, #476]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	4a76      	ldr	r2, [pc, #472]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6393      	str	r3, [r2, #56]	; 0x38
 80031e6:	4b74      	ldr	r3, [pc, #464]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
 80031f6:	4b70      	ldr	r3, [pc, #448]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a6f      	ldr	r2, [pc, #444]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 80031fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b6d      	ldr	r3, [pc, #436]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
 8003212:	4b69      	ldr	r3, [pc, #420]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a68      	ldr	r2, [pc, #416]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	623b      	str	r3, [r7, #32]
 8003228:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
 800322e:	4b62      	ldr	r3, [pc, #392]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a61      	ldr	r2, [pc, #388]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b5f      	ldr	r3, [pc, #380]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	4b5b      	ldr	r3, [pc, #364]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a5a      	ldr	r2, [pc, #360]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003250:	f043 0308 	orr.w	r3, r3, #8
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b58      	ldr	r3, [pc, #352]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	4b54      	ldr	r3, [pc, #336]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a53      	ldr	r2, [pc, #332]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 800326c:	f043 0310 	orr.w	r3, r3, #16
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b51      	ldr	r3, [pc, #324]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a4c      	ldr	r2, [pc, #304]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003288:	f043 0320 	orr.w	r3, r3, #32
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	4b46      	ldr	r3, [pc, #280]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a45      	ldr	r2, [pc, #276]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 80032a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <BSP_SDRAM_MspInit+0x1f4>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80032ba:	2302      	movs	r3, #2
 80032bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80032c2:	230c      	movs	r3, #12
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80032c6:	2360      	movs	r3, #96	; 0x60
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80032ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ce:	4619      	mov	r1, r3
 80032d0:	483a      	ldr	r0, [pc, #232]	; (80033bc <BSP_SDRAM_MspInit+0x1f8>)
 80032d2:	f000 fe1f 	bl	8003f14 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80032d6:	2301      	movs	r3, #1
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80032da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032de:	4619      	mov	r1, r3
 80032e0:	4837      	ldr	r0, [pc, #220]	; (80033c0 <BSP_SDRAM_MspInit+0x1fc>)
 80032e2:	f000 fe17 	bl	8003f14 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80032e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80032ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032f0:	4619      	mov	r1, r3
 80032f2:	4834      	ldr	r0, [pc, #208]	; (80033c4 <BSP_SDRAM_MspInit+0x200>)
 80032f4:	f000 fe0e 	bl	8003f14 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80032f8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80032fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003302:	4619      	mov	r1, r3
 8003304:	4830      	ldr	r0, [pc, #192]	; (80033c8 <BSP_SDRAM_MspInit+0x204>)
 8003306:	f000 fe05 	bl	8003f14 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800330a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003314:	4619      	mov	r1, r3
 8003316:	482d      	ldr	r0, [pc, #180]	; (80033cc <BSP_SDRAM_MspInit+0x208>)
 8003318:	f000 fdfc 	bl	8003f14 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800331c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003326:	4619      	mov	r1, r3
 8003328:	4829      	ldr	r0, [pc, #164]	; (80033d0 <BSP_SDRAM_MspInit+0x20c>)
 800332a:	f000 fdf3 	bl	8003f14 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800332e:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 8003330:	2200      	movs	r2, #0
 8003332:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003334:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 800333c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003340:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 8003344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003348:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 800334c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003350:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003352:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 8003354:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003358:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 800335c:	2200      	movs	r2, #0
 800335e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003360:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 8003362:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003366:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 800336a:	2200      	movs	r2, #0
 800336c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800336e:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 8003370:	2203      	movs	r2, #3
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 8003376:	2200      	movs	r2, #0
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800337a:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003380:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 8003382:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <BSP_SDRAM_MspInit+0x214>)
 8003384:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
 800338c:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003392:	4810      	ldr	r0, [pc, #64]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 8003394:	f000 fa18 	bl	80037c8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003398:	480e      	ldr	r0, [pc, #56]	; (80033d4 <BSP_SDRAM_MspInit+0x210>)
 800339a:	f000 f967 	bl	800366c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800339e:	2200      	movs	r2, #0
 80033a0:	210f      	movs	r1, #15
 80033a2:	2038      	movs	r0, #56	; 0x38
 80033a4:	f000 f938 	bl	8003618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80033a8:	2038      	movs	r0, #56	; 0x38
 80033aa:	f000 f951 	bl	8003650 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80033ae:	bf00      	nop
 80033b0:	3740      	adds	r7, #64	; 0x40
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40020400 	.word	0x40020400
 80033c0:	40020800 	.word	0x40020800
 80033c4:	40020c00 	.word	0x40020c00
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40021400 	.word	0x40021400
 80033d0:	40021800 	.word	0x40021800
 80033d4:	20000700 	.word	0x20000700
 80033d8:	40026410 	.word	0x40026410

080033dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_Init+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_Init+0x40>)
 80033e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_Init+0x40>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_Init+0x40>)
 80033f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_Init+0x40>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_Init+0x40>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003404:	2003      	movs	r0, #3
 8003406:	f000 f8fc 	bl	8003602 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800340a:	200f      	movs	r0, #15
 800340c:	f7fe f948 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003410:	f7fe f828 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023c00 	.word	0x40023c00

08003420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_IncTick+0x20>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_IncTick+0x24>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4413      	add	r3, r2
 8003430:	4a04      	ldr	r2, [pc, #16]	; (8003444 <HAL_IncTick+0x24>)
 8003432:	6013      	str	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000084 	.word	0x20000084
 8003444:	20000760 	.word	0x20000760

08003448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return uwTick;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_GetTick+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000760 	.word	0x20000760

08003460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003468:	f7ff ffee 	bl	8003448 <HAL_GetTick>
 800346c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003478:	d005      	beq.n	8003486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_Delay+0x44>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003486:	bf00      	nop
 8003488:	f7ff ffde 	bl	8003448 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	429a      	cmp	r2, r3
 8003496:	d8f7      	bhi.n	8003488 <HAL_Delay+0x28>
  {
  }
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000084 	.word	0x20000084

080034a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c4:	4013      	ands	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034da:	4a04      	ldr	r2, [pc, #16]	; (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	60d3      	str	r3, [r2, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <__NVIC_GetPriorityGrouping+0x18>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 0307 	and.w	r3, r3, #7
}
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	2b00      	cmp	r3, #0
 800351c:	db0b      	blt.n	8003536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4907      	ldr	r1, [pc, #28]	; (8003544 <__NVIC_EnableIRQ+0x38>)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2001      	movs	r0, #1
 800352e:	fa00 f202 	lsl.w	r2, r0, r2
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000e100 	.word	0xe000e100

08003548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	db0a      	blt.n	8003572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	490c      	ldr	r1, [pc, #48]	; (8003594 <__NVIC_SetPriority+0x4c>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	440b      	add	r3, r1
 800356c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003570:	e00a      	b.n	8003588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4908      	ldr	r1, [pc, #32]	; (8003598 <__NVIC_SetPriority+0x50>)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	3b04      	subs	r3, #4
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	440b      	add	r3, r1
 8003586:	761a      	strb	r2, [r3, #24]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000e100 	.word	0xe000e100
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f1c3 0307 	rsb	r3, r3, #7
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf28      	it	cs
 80035ba:	2304      	movcs	r3, #4
 80035bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d902      	bls.n	80035cc <NVIC_EncodePriority+0x30>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3b03      	subs	r3, #3
 80035ca:	e000      	b.n	80035ce <NVIC_EncodePriority+0x32>
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	401a      	ands	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e4:	f04f 31ff 	mov.w	r1, #4294967295
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	43d9      	mvns	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	4313      	orrs	r3, r2
         );
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ff4c 	bl	80034a8 <__NVIC_SetPriorityGrouping>
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800362a:	f7ff ff61 	bl	80034f0 <__NVIC_GetPriorityGrouping>
 800362e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f7ff ffb1 	bl	800359c <NVIC_EncodePriority>
 800363a:	4602      	mov	r2, r0
 800363c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ff80 	bl	8003548 <__NVIC_SetPriority>
}
 8003648:	bf00      	nop
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff ff54 	bl	800350c <__NVIC_EnableIRQ>
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003678:	f7ff fee6 	bl	8003448 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e099      	b.n	80037bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a8:	e00f      	b.n	80036ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036aa:	f7ff fecd 	bl	8003448 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d908      	bls.n	80036ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2203      	movs	r2, #3
 80036c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e078      	b.n	80037bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e8      	bne.n	80036aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4b38      	ldr	r3, [pc, #224]	; (80037c4 <HAL_DMA_Init+0x158>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003702:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	2b04      	cmp	r3, #4
 8003722:	d107      	bne.n	8003734 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	4313      	orrs	r3, r2
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0307 	bic.w	r3, r3, #7
 800374a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2b04      	cmp	r3, #4
 800375c:	d117      	bne.n	800378e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00e      	beq.n	800378e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f8bd 	bl	80038f0 <DMA_CheckFifoParam>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2240      	movs	r2, #64	; 0x40
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800378a:	2301      	movs	r3, #1
 800378c:	e016      	b.n	80037bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f874 	bl	8003884 <DMA_CalcBaseAndBitshift>
 800379c:	4603      	mov	r3, r0
 800379e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	223f      	movs	r2, #63	; 0x3f
 80037a6:	409a      	lsls	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	f010803f 	.word	0xf010803f

080037c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e050      	b.n	800387c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d101      	bne.n	80037ea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
 80037e8:	e048      	b.n	800387c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2200      	movs	r2, #0
 8003820:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2221      	movs	r2, #33	; 0x21
 8003828:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f82a 	bl	8003884 <DMA_CalcBaseAndBitshift>
 8003830:	4603      	mov	r3, r0
 8003832:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	223f      	movs	r2, #63	; 0x3f
 800385e:	409a      	lsls	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	3b10      	subs	r3, #16
 8003894:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800389e:	4a13      	ldr	r2, [pc, #76]	; (80038ec <DMA_CalcBaseAndBitshift+0x68>)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d909      	bls.n	80038c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ba:	f023 0303 	bic.w	r3, r3, #3
 80038be:	1d1a      	adds	r2, r3, #4
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	659a      	str	r2, [r3, #88]	; 0x58
 80038c4:	e007      	b.n	80038d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ce:	f023 0303 	bic.w	r3, r3, #3
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	aaaaaaab 	.word	0xaaaaaaab
 80038ec:	08013f14 	.word	0x08013f14

080038f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d11f      	bne.n	800394a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b03      	cmp	r3, #3
 800390e:	d856      	bhi.n	80039be <DMA_CheckFifoParam+0xce>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <DMA_CheckFifoParam+0x28>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	08003929 	.word	0x08003929
 800391c:	0800393b 	.word	0x0800393b
 8003920:	08003929 	.word	0x08003929
 8003924:	080039bf 	.word	0x080039bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d046      	beq.n	80039c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003938:	e043      	b.n	80039c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003942:	d140      	bne.n	80039c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003948:	e03d      	b.n	80039c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003952:	d121      	bne.n	8003998 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d837      	bhi.n	80039ca <DMA_CheckFifoParam+0xda>
 800395a:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <DMA_CheckFifoParam+0x70>)
 800395c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003960:	08003971 	.word	0x08003971
 8003964:	08003977 	.word	0x08003977
 8003968:	08003971 	.word	0x08003971
 800396c:	08003989 	.word	0x08003989
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
      break;
 8003974:	e030      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d025      	beq.n	80039ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003986:	e022      	b.n	80039ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003990:	d11f      	bne.n	80039d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003996:	e01c      	b.n	80039d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d903      	bls.n	80039a6 <DMA_CheckFifoParam+0xb6>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d003      	beq.n	80039ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039a4:	e018      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
      break;
 80039aa:	e015      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00e      	beq.n	80039d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      break;
 80039bc:	e00b      	b.n	80039d6 <DMA_CheckFifoParam+0xe6>
      break;
 80039be:	bf00      	nop
 80039c0:	e00a      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039c2:	bf00      	nop
 80039c4:	e008      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039c6:	bf00      	nop
 80039c8:	e006      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ca:	bf00      	nop
 80039cc:	e004      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <DMA_CheckFifoParam+0xe8>
      break;
 80039d6:	bf00      	nop
    }
  } 
  
  return status; 
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop

080039e8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e03b      	b.n	8003a72 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f833 	bl	8003a7a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a38:	f023 0107 	bic.w	r1, r3, #7
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68d1      	ldr	r1, [r2, #12]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b086      	sub	sp, #24
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_DMA2D_Start+0x1c>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e018      	b.n	8003adc <HAL_DMA2D_Start+0x4e>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f989 	bl	8003ddc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d056      	beq.n	8003bae <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b00:	f7ff fca2 	bl	8003448 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b06:	e04b      	b.n	8003ba0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d023      	beq.n	8003b62 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	f043 0202 	orr.w	r2, r3, #2
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2221      	movs	r2, #33	; 0x21
 8003b4c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2204      	movs	r2, #4
 8003b52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0a5      	b.n	8003cae <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d01a      	beq.n	8003ba0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b6a:	f7ff fc6d 	bl	8003448 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <HAL_DMA2D_PollForTransfer+0x9c>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10f      	bne.n	8003ba0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e086      	b.n	8003cae <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0ac      	beq.n	8003b08 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d061      	beq.n	8003c94 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bd0:	f7ff fc3a 	bl	8003448 <HAL_GetTick>
 8003bd4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003bd6:	e056      	b.n	8003c86 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d02e      	beq.n	8003c48 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	f043 0202 	orr.w	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	f043 0201 	orr.w	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2229      	movs	r2, #41	; 0x29
 8003c32:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2204      	movs	r2, #4
 8003c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e032      	b.n	8003cae <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d01a      	beq.n	8003c86 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c50:	f7ff fbfa 	bl	8003448 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d302      	bcc.n	8003c66 <HAL_DMA2D_PollForTransfer+0x182>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	f043 0220 	orr.w	r2, r3, #32
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2203      	movs	r2, #3
 8003c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e013      	b.n	8003cae <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0a1      	beq.n	8003bd8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2212      	movs	r2, #18
 8003c9a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_DMA2D_ConfigLayer+0x20>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e079      	b.n	8003dcc <HAL_DMA2D_ConfigLayer+0x114>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	3318      	adds	r3, #24
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003d02:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <HAL_DMA2D_ConfigLayer+0x120>)
 8003d04:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b0a      	cmp	r3, #10
 8003d0c:	d003      	beq.n	8003d16 <HAL_DMA2D_ConfigLayer+0x5e>
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b09      	cmp	r3, #9
 8003d14:	d107      	bne.n	8003d26 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	e005      	b.n	8003d32 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	061b      	lsls	r3, r3, #24
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d120      	bne.n	8003d7a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	ea02 0103 	and.w	r1, r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b0a      	cmp	r3, #10
 8003d60:	d003      	beq.n	8003d6a <HAL_DMA2D_ConfigLayer+0xb2>
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b09      	cmp	r3, #9
 8003d68:	d127      	bne.n	8003dba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
 8003d78:	e01f      	b.n	8003dba <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	ea02 0103 	and.w	r1, r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b0a      	cmp	r3, #10
 8003da2:	d003      	beq.n	8003dac <HAL_DMA2D_ConfigLayer+0xf4>
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b09      	cmp	r3, #9
 8003daa:	d106      	bne.n	8003dba <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003db8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	ff03000f 	.word	0xff03000f

08003ddc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b08b      	sub	sp, #44	; 0x2c
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	041a      	lsls	r2, r3, #16
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e14:	d174      	bne.n	8003f00 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e1c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e24:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e2c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d108      	bne.n	8003e4e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4c:	e053      	b.n	8003ef6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d106      	bne.n	8003e64 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
 8003e62:	e048      	b.n	8003ef6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d111      	bne.n	8003e90 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	0cdb      	lsrs	r3, r3, #19
 8003e70:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	0a9b      	lsrs	r3, r3, #10
 8003e76:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	08db      	lsrs	r3, r3, #3
 8003e7c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	02db      	lsls	r3, r3, #11
 8003e86:	4313      	orrs	r3, r2
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8e:	e032      	b.n	8003ef6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d117      	bne.n	8003ec8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	0fdb      	lsrs	r3, r3, #31
 8003e9c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	0cdb      	lsrs	r3, r3, #19
 8003ea2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	0adb      	lsrs	r3, r3, #11
 8003ea8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	08db      	lsrs	r3, r3, #3
 8003eae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	029b      	lsls	r3, r3, #10
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	03db      	lsls	r3, r3, #15
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec6:	e016      	b.n	8003ef6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	0f1b      	lsrs	r3, r3, #28
 8003ecc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	0d1b      	lsrs	r3, r3, #20
 8003ed2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	0b1b      	lsrs	r3, r3, #12
 8003ed8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	011a      	lsls	r2, r3, #4
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	031b      	lsls	r3, r3, #12
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003efe:	e003      	b.n	8003f08 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	60da      	str	r2, [r3, #12]
}
 8003f08:	bf00      	nop
 8003f0a:	372c      	adds	r7, #44	; 0x2c
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	; 0x24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	e177      	b.n	8004220 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f30:	2201      	movs	r2, #1
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	f040 8166 	bne.w	800421a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d005      	beq.n	8003f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d130      	bne.n	8003fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	2203      	movs	r2, #3
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 0201 	and.w	r2, r3, #1
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d017      	beq.n	8004004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	2203      	movs	r2, #3
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d123      	bne.n	8004058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	08da      	lsrs	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3208      	adds	r2, #8
 8004018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	220f      	movs	r2, #15
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	08da      	lsrs	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3208      	adds	r2, #8
 8004052:	69b9      	ldr	r1, [r7, #24]
 8004054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	2203      	movs	r2, #3
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0203 	and.w	r2, r3, #3
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80c0 	beq.w	800421a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	4b66      	ldr	r3, [pc, #408]	; (8004238 <HAL_GPIO_Init+0x324>)
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	4a65      	ldr	r2, [pc, #404]	; (8004238 <HAL_GPIO_Init+0x324>)
 80040a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040a8:	6453      	str	r3, [r2, #68]	; 0x44
 80040aa:	4b63      	ldr	r3, [pc, #396]	; (8004238 <HAL_GPIO_Init+0x324>)
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040b6:	4a61      	ldr	r2, [pc, #388]	; (800423c <HAL_GPIO_Init+0x328>)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	3302      	adds	r3, #2
 80040be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	220f      	movs	r2, #15
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a58      	ldr	r2, [pc, #352]	; (8004240 <HAL_GPIO_Init+0x32c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d037      	beq.n	8004152 <HAL_GPIO_Init+0x23e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a57      	ldr	r2, [pc, #348]	; (8004244 <HAL_GPIO_Init+0x330>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d031      	beq.n	800414e <HAL_GPIO_Init+0x23a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a56      	ldr	r2, [pc, #344]	; (8004248 <HAL_GPIO_Init+0x334>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d02b      	beq.n	800414a <HAL_GPIO_Init+0x236>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a55      	ldr	r2, [pc, #340]	; (800424c <HAL_GPIO_Init+0x338>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d025      	beq.n	8004146 <HAL_GPIO_Init+0x232>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a54      	ldr	r2, [pc, #336]	; (8004250 <HAL_GPIO_Init+0x33c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d01f      	beq.n	8004142 <HAL_GPIO_Init+0x22e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a53      	ldr	r2, [pc, #332]	; (8004254 <HAL_GPIO_Init+0x340>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d019      	beq.n	800413e <HAL_GPIO_Init+0x22a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a52      	ldr	r2, [pc, #328]	; (8004258 <HAL_GPIO_Init+0x344>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <HAL_GPIO_Init+0x226>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a51      	ldr	r2, [pc, #324]	; (800425c <HAL_GPIO_Init+0x348>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00d      	beq.n	8004136 <HAL_GPIO_Init+0x222>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a50      	ldr	r2, [pc, #320]	; (8004260 <HAL_GPIO_Init+0x34c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <HAL_GPIO_Init+0x21e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a4f      	ldr	r2, [pc, #316]	; (8004264 <HAL_GPIO_Init+0x350>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <HAL_GPIO_Init+0x21a>
 800412a:	2309      	movs	r3, #9
 800412c:	e012      	b.n	8004154 <HAL_GPIO_Init+0x240>
 800412e:	230a      	movs	r3, #10
 8004130:	e010      	b.n	8004154 <HAL_GPIO_Init+0x240>
 8004132:	2308      	movs	r3, #8
 8004134:	e00e      	b.n	8004154 <HAL_GPIO_Init+0x240>
 8004136:	2307      	movs	r3, #7
 8004138:	e00c      	b.n	8004154 <HAL_GPIO_Init+0x240>
 800413a:	2306      	movs	r3, #6
 800413c:	e00a      	b.n	8004154 <HAL_GPIO_Init+0x240>
 800413e:	2305      	movs	r3, #5
 8004140:	e008      	b.n	8004154 <HAL_GPIO_Init+0x240>
 8004142:	2304      	movs	r3, #4
 8004144:	e006      	b.n	8004154 <HAL_GPIO_Init+0x240>
 8004146:	2303      	movs	r3, #3
 8004148:	e004      	b.n	8004154 <HAL_GPIO_Init+0x240>
 800414a:	2302      	movs	r3, #2
 800414c:	e002      	b.n	8004154 <HAL_GPIO_Init+0x240>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_GPIO_Init+0x240>
 8004152:	2300      	movs	r3, #0
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	f002 0203 	and.w	r2, r2, #3
 800415a:	0092      	lsls	r2, r2, #2
 800415c:	4093      	lsls	r3, r2
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004164:	4935      	ldr	r1, [pc, #212]	; (800423c <HAL_GPIO_Init+0x328>)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	3302      	adds	r3, #2
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004172:	4b3d      	ldr	r3, [pc, #244]	; (8004268 <HAL_GPIO_Init+0x354>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004196:	4a34      	ldr	r2, [pc, #208]	; (8004268 <HAL_GPIO_Init+0x354>)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800419c:	4b32      	ldr	r3, [pc, #200]	; (8004268 <HAL_GPIO_Init+0x354>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041c0:	4a29      	ldr	r2, [pc, #164]	; (8004268 <HAL_GPIO_Init+0x354>)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041c6:	4b28      	ldr	r3, [pc, #160]	; (8004268 <HAL_GPIO_Init+0x354>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4013      	ands	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ea:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <HAL_GPIO_Init+0x354>)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_GPIO_Init+0x354>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4013      	ands	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <HAL_GPIO_Init+0x354>)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3301      	adds	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	f67f ae84 	bls.w	8003f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004228:	bf00      	nop
 800422a:	bf00      	nop
 800422c:	3724      	adds	r7, #36	; 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800
 800423c:	40013800 	.word	0x40013800
 8004240:	40020000 	.word	0x40020000
 8004244:	40020400 	.word	0x40020400
 8004248:	40020800 	.word	0x40020800
 800424c:	40020c00 	.word	0x40020c00
 8004250:	40021000 	.word	0x40021000
 8004254:	40021400 	.word	0x40021400
 8004258:	40021800 	.word	0x40021800
 800425c:	40021c00 	.word	0x40021c00
 8004260:	40022000 	.word	0x40022000
 8004264:	40022400 	.word	0x40022400
 8004268:	40013c00 	.word	0x40013c00

0800426c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	e0d9      	b.n	800443c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004288:	2201      	movs	r2, #1
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	429a      	cmp	r2, r3
 80042a0:	f040 80c9 	bne.w	8004436 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80042a4:	4a6b      	ldr	r2, [pc, #428]	; (8004454 <HAL_GPIO_DeInit+0x1e8>)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	3302      	adds	r3, #2
 80042ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	220f      	movs	r2, #15
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	4013      	ands	r3, r2
 80042c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a63      	ldr	r2, [pc, #396]	; (8004458 <HAL_GPIO_DeInit+0x1ec>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d037      	beq.n	800433e <HAL_GPIO_DeInit+0xd2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a62      	ldr	r2, [pc, #392]	; (800445c <HAL_GPIO_DeInit+0x1f0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d031      	beq.n	800433a <HAL_GPIO_DeInit+0xce>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a61      	ldr	r2, [pc, #388]	; (8004460 <HAL_GPIO_DeInit+0x1f4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d02b      	beq.n	8004336 <HAL_GPIO_DeInit+0xca>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a60      	ldr	r2, [pc, #384]	; (8004464 <HAL_GPIO_DeInit+0x1f8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d025      	beq.n	8004332 <HAL_GPIO_DeInit+0xc6>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a5f      	ldr	r2, [pc, #380]	; (8004468 <HAL_GPIO_DeInit+0x1fc>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01f      	beq.n	800432e <HAL_GPIO_DeInit+0xc2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a5e      	ldr	r2, [pc, #376]	; (800446c <HAL_GPIO_DeInit+0x200>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d019      	beq.n	800432a <HAL_GPIO_DeInit+0xbe>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a5d      	ldr	r2, [pc, #372]	; (8004470 <HAL_GPIO_DeInit+0x204>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <HAL_GPIO_DeInit+0xba>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a5c      	ldr	r2, [pc, #368]	; (8004474 <HAL_GPIO_DeInit+0x208>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00d      	beq.n	8004322 <HAL_GPIO_DeInit+0xb6>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a5b      	ldr	r2, [pc, #364]	; (8004478 <HAL_GPIO_DeInit+0x20c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d007      	beq.n	800431e <HAL_GPIO_DeInit+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a5a      	ldr	r2, [pc, #360]	; (800447c <HAL_GPIO_DeInit+0x210>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d101      	bne.n	800431a <HAL_GPIO_DeInit+0xae>
 8004316:	2309      	movs	r3, #9
 8004318:	e012      	b.n	8004340 <HAL_GPIO_DeInit+0xd4>
 800431a:	230a      	movs	r3, #10
 800431c:	e010      	b.n	8004340 <HAL_GPIO_DeInit+0xd4>
 800431e:	2308      	movs	r3, #8
 8004320:	e00e      	b.n	8004340 <HAL_GPIO_DeInit+0xd4>
 8004322:	2307      	movs	r3, #7
 8004324:	e00c      	b.n	8004340 <HAL_GPIO_DeInit+0xd4>
 8004326:	2306      	movs	r3, #6
 8004328:	e00a      	b.n	8004340 <HAL_GPIO_DeInit+0xd4>
 800432a:	2305      	movs	r3, #5
 800432c:	e008      	b.n	8004340 <HAL_GPIO_DeInit+0xd4>
 800432e:	2304      	movs	r3, #4
 8004330:	e006      	b.n	8004340 <HAL_GPIO_DeInit+0xd4>
 8004332:	2303      	movs	r3, #3
 8004334:	e004      	b.n	8004340 <HAL_GPIO_DeInit+0xd4>
 8004336:	2302      	movs	r3, #2
 8004338:	e002      	b.n	8004340 <HAL_GPIO_DeInit+0xd4>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <HAL_GPIO_DeInit+0xd4>
 800433e:	2300      	movs	r3, #0
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	f002 0203 	and.w	r2, r2, #3
 8004346:	0092      	lsls	r2, r2, #2
 8004348:	4093      	lsls	r3, r2
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	d132      	bne.n	80043b6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004350:	4b4b      	ldr	r3, [pc, #300]	; (8004480 <HAL_GPIO_DeInit+0x214>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	43db      	mvns	r3, r3
 8004358:	4949      	ldr	r1, [pc, #292]	; (8004480 <HAL_GPIO_DeInit+0x214>)
 800435a:	4013      	ands	r3, r2
 800435c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800435e:	4b48      	ldr	r3, [pc, #288]	; (8004480 <HAL_GPIO_DeInit+0x214>)
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	43db      	mvns	r3, r3
 8004366:	4946      	ldr	r1, [pc, #280]	; (8004480 <HAL_GPIO_DeInit+0x214>)
 8004368:	4013      	ands	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800436c:	4b44      	ldr	r3, [pc, #272]	; (8004480 <HAL_GPIO_DeInit+0x214>)
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	43db      	mvns	r3, r3
 8004374:	4942      	ldr	r1, [pc, #264]	; (8004480 <HAL_GPIO_DeInit+0x214>)
 8004376:	4013      	ands	r3, r2
 8004378:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800437a:	4b41      	ldr	r3, [pc, #260]	; (8004480 <HAL_GPIO_DeInit+0x214>)
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	43db      	mvns	r3, r3
 8004382:	493f      	ldr	r1, [pc, #252]	; (8004480 <HAL_GPIO_DeInit+0x214>)
 8004384:	4013      	ands	r3, r2
 8004386:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	220f      	movs	r2, #15
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004398:	4a2e      	ldr	r2, [pc, #184]	; (8004454 <HAL_GPIO_DeInit+0x1e8>)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	089b      	lsrs	r3, r3, #2
 800439e:	3302      	adds	r3, #2
 80043a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	43da      	mvns	r2, r3
 80043a8:	482a      	ldr	r0, [pc, #168]	; (8004454 <HAL_GPIO_DeInit+0x1e8>)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	089b      	lsrs	r3, r3, #2
 80043ae:	400a      	ands	r2, r1
 80043b0:	3302      	adds	r3, #2
 80043b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	2103      	movs	r1, #3
 80043c0:	fa01 f303 	lsl.w	r3, r1, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	401a      	ands	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	08da      	lsrs	r2, r3, #3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3208      	adds	r2, #8
 80043d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	220f      	movs	r2, #15
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	08d2      	lsrs	r2, r2, #3
 80043ec:	4019      	ands	r1, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3208      	adds	r2, #8
 80043f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	2103      	movs	r1, #3
 8004400:	fa01 f303 	lsl.w	r3, r1, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	401a      	ands	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	2101      	movs	r1, #1
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	401a      	ands	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	2103      	movs	r1, #3
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	401a      	ands	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	3301      	adds	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b0f      	cmp	r3, #15
 8004440:	f67f af22 	bls.w	8004288 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40013800 	.word	0x40013800
 8004458:	40020000 	.word	0x40020000
 800445c:	40020400 	.word	0x40020400
 8004460:	40020800 	.word	0x40020800
 8004464:	40020c00 	.word	0x40020c00
 8004468:	40021000 	.word	0x40021000
 800446c:	40021400 	.word	0x40021400
 8004470:	40021800 	.word	0x40021800
 8004474:	40021c00 	.word	0x40021c00
 8004478:	40022000 	.word	0x40022000
 800447c:	40022400 	.word	0x40022400
 8004480:	40013c00 	.word	0x40013c00

08004484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	807b      	strh	r3, [r7, #2]
 8004490:	4613      	mov	r3, r2
 8004492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004494:	787b      	ldrb	r3, [r7, #1]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044a0:	e003      	b.n	80044aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	041a      	lsls	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	619a      	str	r2, [r3, #24]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e12b      	b.n	8004722 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fc ffec 	bl	80014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800450a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800451a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800451c:	f002 fba2 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8004520:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4a81      	ldr	r2, [pc, #516]	; (800472c <HAL_I2C_Init+0x274>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d807      	bhi.n	800453c <HAL_I2C_Init+0x84>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a80      	ldr	r2, [pc, #512]	; (8004730 <HAL_I2C_Init+0x278>)
 8004530:	4293      	cmp	r3, r2
 8004532:	bf94      	ite	ls
 8004534:	2301      	movls	r3, #1
 8004536:	2300      	movhi	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	e006      	b.n	800454a <HAL_I2C_Init+0x92>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a7d      	ldr	r2, [pc, #500]	; (8004734 <HAL_I2C_Init+0x27c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	bf94      	ite	ls
 8004544:	2301      	movls	r3, #1
 8004546:	2300      	movhi	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e0e7      	b.n	8004722 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4a78      	ldr	r2, [pc, #480]	; (8004738 <HAL_I2C_Init+0x280>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	0c9b      	lsrs	r3, r3, #18
 800455c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a6a      	ldr	r2, [pc, #424]	; (800472c <HAL_I2C_Init+0x274>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d802      	bhi.n	800458c <HAL_I2C_Init+0xd4>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3301      	adds	r3, #1
 800458a:	e009      	b.n	80045a0 <HAL_I2C_Init+0xe8>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	4a69      	ldr	r2, [pc, #420]	; (800473c <HAL_I2C_Init+0x284>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	099b      	lsrs	r3, r3, #6
 800459e:	3301      	adds	r3, #1
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	495c      	ldr	r1, [pc, #368]	; (800472c <HAL_I2C_Init+0x274>)
 80045bc:	428b      	cmp	r3, r1
 80045be:	d819      	bhi.n	80045f4 <HAL_I2C_Init+0x13c>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1e59      	subs	r1, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ce:	1c59      	adds	r1, r3, #1
 80045d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045d4:	400b      	ands	r3, r1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_I2C_Init+0x138>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1e59      	subs	r1, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e8:	3301      	adds	r3, #1
 80045ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ee:	e051      	b.n	8004694 <HAL_I2C_Init+0x1dc>
 80045f0:	2304      	movs	r3, #4
 80045f2:	e04f      	b.n	8004694 <HAL_I2C_Init+0x1dc>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d111      	bne.n	8004620 <HAL_I2C_Init+0x168>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1e58      	subs	r0, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6859      	ldr	r1, [r3, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	440b      	add	r3, r1
 800460a:	fbb0 f3f3 	udiv	r3, r0, r3
 800460e:	3301      	adds	r3, #1
 8004610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	e012      	b.n	8004646 <HAL_I2C_Init+0x18e>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1e58      	subs	r0, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	0099      	lsls	r1, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	fbb0 f3f3 	udiv	r3, r0, r3
 8004636:	3301      	adds	r3, #1
 8004638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_I2C_Init+0x196>
 800464a:	2301      	movs	r3, #1
 800464c:	e022      	b.n	8004694 <HAL_I2C_Init+0x1dc>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10e      	bne.n	8004674 <HAL_I2C_Init+0x1bc>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1e58      	subs	r0, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6859      	ldr	r1, [r3, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	440b      	add	r3, r1
 8004664:	fbb0 f3f3 	udiv	r3, r0, r3
 8004668:	3301      	adds	r3, #1
 800466a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004672:	e00f      	b.n	8004694 <HAL_I2C_Init+0x1dc>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1e58      	subs	r0, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	0099      	lsls	r1, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	fbb0 f3f3 	udiv	r3, r0, r3
 800468a:	3301      	adds	r3, #1
 800468c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	6809      	ldr	r1, [r1, #0]
 8004698:	4313      	orrs	r3, r2
 800469a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6911      	ldr	r1, [r2, #16]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68d2      	ldr	r2, [r2, #12]
 80046ce:	4311      	orrs	r1, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	000186a0 	.word	0x000186a0
 8004730:	001e847f 	.word	0x001e847f
 8004734:	003d08ff 	.word	0x003d08ff
 8004738:	431bde83 	.word	0x431bde83
 800473c:	10624dd3 	.word	0x10624dd3

08004740 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b20      	cmp	r3, #32
 8004754:	d129      	bne.n	80047aa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2224      	movs	r2, #36	; 0x24
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0210 	bic.w	r2, r2, #16
 800477c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d12a      	bne.n	8004828 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2224      	movs	r2, #36	; 0x24
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80047f2:	89fb      	ldrh	r3, [r7, #14]
 80047f4:	f023 030f 	bic.w	r3, r3, #15
 80047f8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	89fb      	ldrh	r3, [r7, #14]
 8004800:	4313      	orrs	r3, r2
 8004802:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	89fa      	ldrh	r2, [r7, #14]
 800480a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e0bf      	b.n	80049ca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8ba 	bl	80049d8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800487a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6999      	ldr	r1, [r3, #24]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004890:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6899      	ldr	r1, [r3, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <HAL_LTDC_Init+0x19c>)
 80048ac:	400b      	ands	r3, r1
 80048ae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	041b      	lsls	r3, r3, #16
 80048b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6899      	ldr	r1, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68d9      	ldr	r1, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_LTDC_Init+0x19c>)
 80048da:	400b      	ands	r3, r1
 80048dc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68d9      	ldr	r1, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1a      	ldr	r2, [r3, #32]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6919      	ldr	r1, [r3, #16]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b33      	ldr	r3, [pc, #204]	; (80049d4 <HAL_LTDC_Init+0x19c>)
 8004908:	400b      	ands	r3, r1
 800490a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	041b      	lsls	r3, r3, #16
 8004912:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6919      	ldr	r1, [r3, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6959      	ldr	r1, [r3, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <HAL_LTDC_Init+0x19c>)
 8004936:	400b      	ands	r3, r1
 8004938:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6959      	ldr	r1, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004968:	041b      	lsls	r3, r3, #16
 800496a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0206 	orr.w	r2, r2, #6
 80049a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	f000f800 	.word	0xf000f800

080049d8 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049ec:	b5b0      	push	{r4, r5, r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_LTDC_ConfigLayer+0x1a>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e02c      	b.n	8004a60 <HAL_LTDC_ConfigLayer+0x74>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2134      	movs	r1, #52	; 0x34
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4614      	mov	r4, r2
 8004a2a:	461d      	mov	r5, r3
 8004a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f83b 	bl	8004abc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bdb0      	pop	{r4, r5, r7, pc}

08004a68 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_LTDC_EnableDither+0x16>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e016      	b.n	8004aac <HAL_LTDC_EnableDither+0x44>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_LTDC_EnableDither+0x50>)
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <HAL_LTDC_EnableDither+0x50>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40016800 	.word	0x40016800

08004abc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad8:	4413      	add	r3, r2
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	01db      	lsls	r3, r3, #7
 8004ae8:	4413      	add	r3, r2
 8004aea:	3384      	adds	r3, #132	; 0x84
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	4611      	mov	r1, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	01d2      	lsls	r2, r2, #7
 8004af8:	440a      	add	r2, r1
 8004afa:	3284      	adds	r2, #132	; 0x84
 8004afc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b00:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b12:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b14:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	01db      	lsls	r3, r3, #7
 8004b20:	440b      	add	r3, r1
 8004b22:	3384      	adds	r3, #132	; 0x84
 8004b24:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b2a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b3a:	4413      	add	r3, r2
 8004b3c:	041b      	lsls	r3, r3, #16
 8004b3e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	01db      	lsls	r3, r3, #7
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3384      	adds	r3, #132	; 0x84
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	4611      	mov	r1, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	01d2      	lsls	r2, r2, #7
 8004b5a:	440a      	add	r2, r1
 8004b5c:	3284      	adds	r2, #132	; 0x84
 8004b5e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b62:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b72:	4413      	add	r3, r2
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	01db      	lsls	r3, r3, #7
 8004b80:	440b      	add	r3, r1
 8004b82:	3384      	adds	r3, #132	; 0x84
 8004b84:	4619      	mov	r1, r3
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	01db      	lsls	r3, r3, #7
 8004b96:	4413      	add	r3, r2
 8004b98:	3384      	adds	r3, #132	; 0x84
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	01d2      	lsls	r2, r2, #7
 8004ba6:	440a      	add	r2, r1
 8004ba8:	3284      	adds	r2, #132	; 0x84
 8004baa:	f023 0307 	bic.w	r3, r3, #7
 8004bae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	01db      	lsls	r3, r3, #7
 8004bba:	4413      	add	r3, r2
 8004bbc:	3384      	adds	r3, #132	; 0x84
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	01db      	lsls	r3, r3, #7
 8004bec:	4413      	add	r3, r2
 8004bee:	3384      	adds	r3, #132	; 0x84
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	01db      	lsls	r3, r3, #7
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3384      	adds	r3, #132	; 0x84
 8004c00:	461a      	mov	r2, r3
 8004c02:	2300      	movs	r3, #0
 8004c04:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	01db      	lsls	r3, r3, #7
 8004c20:	440b      	add	r3, r1
 8004c22:	3384      	adds	r3, #132	; 0x84
 8004c24:	4619      	mov	r1, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	01db      	lsls	r3, r3, #7
 8004c36:	4413      	add	r3, r2
 8004c38:	3384      	adds	r3, #132	; 0x84
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	4611      	mov	r1, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	01d2      	lsls	r2, r2, #7
 8004c46:	440a      	add	r2, r1
 8004c48:	3284      	adds	r2, #132	; 0x84
 8004c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c4e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	01db      	lsls	r3, r3, #7
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3384      	adds	r3, #132	; 0x84
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	01db      	lsls	r3, r3, #7
 8004c70:	4413      	add	r3, r2
 8004c72:	3384      	adds	r3, #132	; 0x84
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	01d2      	lsls	r2, r2, #7
 8004c80:	440a      	add	r2, r1
 8004c82:	3284      	adds	r2, #132	; 0x84
 8004c84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c88:	f023 0307 	bic.w	r3, r3, #7
 8004c8c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	6809      	ldr	r1, [r1, #0]
 8004c9a:	4608      	mov	r0, r1
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	01c9      	lsls	r1, r1, #7
 8004ca0:	4401      	add	r1, r0
 8004ca2:	3184      	adds	r1, #132	; 0x84
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	01db      	lsls	r3, r3, #7
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3384      	adds	r3, #132	; 0x84
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	01db      	lsls	r3, r3, #7
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3384      	adds	r3, #132	; 0x84
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	2300      	movs	r3, #0
 8004cca:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	01db      	lsls	r3, r3, #7
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3384      	adds	r3, #132	; 0x84
 8004cda:	461a      	mov	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004cea:	2304      	movs	r3, #4
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	e01b      	b.n	8004d28 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d102      	bne.n	8004cfe <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	e014      	b.n	8004d28 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d00b      	beq.n	8004d1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d007      	beq.n	8004d1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d003      	beq.n	8004d1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d1a:	2b07      	cmp	r3, #7
 8004d1c:	d102      	bne.n	8004d24 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e001      	b.n	8004d28 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004d24:	2301      	movs	r3, #1
 8004d26:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	01db      	lsls	r3, r3, #7
 8004d32:	4413      	add	r3, r2
 8004d34:	3384      	adds	r3, #132	; 0x84
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	01d2      	lsls	r2, r2, #7
 8004d42:	440a      	add	r2, r1
 8004d44:	3284      	adds	r2, #132	; 0x84
 8004d46:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004d4a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	1acb      	subs	r3, r1, r3
 8004d62:	69f9      	ldr	r1, [r7, #28]
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	6809      	ldr	r1, [r1, #0]
 8004d6e:	4608      	mov	r0, r1
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	01c9      	lsls	r1, r1, #7
 8004d74:	4401      	add	r1, r0
 8004d76:	3184      	adds	r1, #132	; 0x84
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	01db      	lsls	r3, r3, #7
 8004d86:	4413      	add	r3, r2
 8004d88:	3384      	adds	r3, #132	; 0x84
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	4611      	mov	r1, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	01d2      	lsls	r2, r2, #7
 8004d96:	440a      	add	r2, r1
 8004d98:	3284      	adds	r2, #132	; 0x84
 8004d9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d9e:	f023 0307 	bic.w	r3, r3, #7
 8004da2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	01db      	lsls	r3, r3, #7
 8004dae:	4413      	add	r3, r2
 8004db0:	3384      	adds	r3, #132	; 0x84
 8004db2:	461a      	mov	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	01db      	lsls	r3, r3, #7
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3384      	adds	r3, #132	; 0x84
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	4611      	mov	r1, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	01d2      	lsls	r2, r2, #7
 8004dd4:	440a      	add	r2, r1
 8004dd6:	3284      	adds	r2, #132	; 0x84
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6013      	str	r3, [r2, #0]
}
 8004dde:	bf00      	nop
 8004de0:	3724      	adds	r7, #36	; 0x24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dec:	b08f      	sub	sp, #60	; 0x3c
 8004dee:	af0a      	add	r7, sp, #40	; 0x28
 8004df0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e10f      	b.n	800501c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f00a f8ee 	bl	800eff8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2203      	movs	r2, #3
 8004e20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f003 fe43 	bl	8008ac6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	687e      	ldr	r6, [r7, #4]
 8004e48:	466d      	mov	r5, sp
 8004e4a:	f106 0410 	add.w	r4, r6, #16
 8004e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e5e:	1d33      	adds	r3, r6, #4
 8004e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e62:	6838      	ldr	r0, [r7, #0]
 8004e64:	f003 fd1a 	bl	800889c <USB_CoreInit>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2202      	movs	r2, #2
 8004e72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e0d0      	b.n	800501c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2100      	movs	r1, #0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f003 fe31 	bl	8008ae8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
 8004e8a:	e04a      	b.n	8004f22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	333d      	adds	r3, #61	; 0x3d
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ea0:	7bfa      	ldrb	r2, [r7, #15]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	333c      	adds	r3, #60	; 0x3c
 8004eb0:	7bfa      	ldrb	r2, [r7, #15]
 8004eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004eb4:	7bfa      	ldrb	r2, [r7, #15]
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	b298      	uxth	r0, r3
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	3344      	adds	r3, #68	; 0x44
 8004ec8:	4602      	mov	r2, r0
 8004eca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ecc:	7bfa      	ldrb	r2, [r7, #15]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	3340      	adds	r3, #64	; 0x40
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ee0:	7bfa      	ldrb	r2, [r7, #15]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	3348      	adds	r3, #72	; 0x48
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ef4:	7bfa      	ldrb	r2, [r7, #15]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	334c      	adds	r3, #76	; 0x4c
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f08:	7bfa      	ldrb	r2, [r7, #15]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	3354      	adds	r3, #84	; 0x54
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	73fb      	strb	r3, [r7, #15]
 8004f22:	7bfa      	ldrb	r2, [r7, #15]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d3af      	bcc.n	8004e8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73fb      	strb	r3, [r7, #15]
 8004f30:	e044      	b.n	8004fbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f32:	7bfa      	ldrb	r2, [r7, #15]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f48:	7bfa      	ldrb	r2, [r7, #15]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f74:	7bfa      	ldrb	r2, [r7, #15]
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f8a:	7bfa      	ldrb	r2, [r7, #15]
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fa0:	7bfa      	ldrb	r2, [r7, #15]
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
 8004fbc:	7bfa      	ldrb	r2, [r7, #15]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d3b5      	bcc.n	8004f32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	687e      	ldr	r6, [r7, #4]
 8004fce:	466d      	mov	r5, sp
 8004fd0:	f106 0410 	add.w	r4, r6, #16
 8004fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fe0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fe4:	1d33      	adds	r3, r6, #4
 8004fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fe8:	6838      	ldr	r0, [r7, #0]
 8004fea:	f003 fdc9 	bl	8008b80 <USB_DevInit>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e00d      	b.n	800501c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f004 ff18 	bl	8009e4a <USB_DevDisconnect>

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005024 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_PCD_Start+0x1c>
 800503c:	2302      	movs	r3, #2
 800503e:	e020      	b.n	8005082 <HAL_PCD_Start+0x5e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	2b01      	cmp	r3, #1
 800504e:	d109      	bne.n	8005064 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005054:	2b01      	cmp	r3, #1
 8005056:	d005      	beq.n	8005064 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f003 fd1b 	bl	8008aa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f004 fec8 	bl	8009e08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800508a:	b590      	push	{r4, r7, lr}
 800508c:	b08d      	sub	sp, #52	; 0x34
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f004 ff86 	bl	8009fb2 <USB_GetMode>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f040 848a 	bne.w	80059c2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f004 feea 	bl	8009e8c <USB_ReadInterrupts>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8480 	beq.w	80059c0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	0a1b      	lsrs	r3, r3, #8
 80050ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f004 fed7 	bl	8009e8c <USB_ReadInterrupts>
 80050de:	4603      	mov	r3, r0
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d107      	bne.n	80050f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695a      	ldr	r2, [r3, #20]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f002 0202 	and.w	r2, r2, #2
 80050f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f004 fec5 	bl	8009e8c <USB_ReadInterrupts>
 8005102:	4603      	mov	r3, r0
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b10      	cmp	r3, #16
 800510a:	d161      	bne.n	80051d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0210 	bic.w	r2, r2, #16
 800511a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f003 020f 	and.w	r2, r3, #15
 8005128:	4613      	mov	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	4413      	add	r3, r2
 8005138:	3304      	adds	r3, #4
 800513a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	0c5b      	lsrs	r3, r3, #17
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	2b02      	cmp	r3, #2
 8005146:	d124      	bne.n	8005192 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d035      	beq.n	80051c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	091b      	lsrs	r3, r3, #4
 800515c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800515e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005162:	b29b      	uxth	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	6a38      	ldr	r0, [r7, #32]
 8005168:	f004 fcfc 	bl	8009b64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	091b      	lsrs	r3, r3, #4
 8005174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005178:	441a      	add	r2, r3
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	6a1a      	ldr	r2, [r3, #32]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800518a:	441a      	add	r2, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	621a      	str	r2, [r3, #32]
 8005190:	e016      	b.n	80051c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	0c5b      	lsrs	r3, r3, #17
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	2b06      	cmp	r3, #6
 800519c:	d110      	bne.n	80051c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051a4:	2208      	movs	r2, #8
 80051a6:	4619      	mov	r1, r3
 80051a8:	6a38      	ldr	r0, [r7, #32]
 80051aa:	f004 fcdb 	bl	8009b64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	6a1a      	ldr	r2, [r3, #32]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051ba:	441a      	add	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0210 	orr.w	r2, r2, #16
 80051ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f004 fe59 	bl	8009e8c <USB_ReadInterrupts>
 80051da:	4603      	mov	r3, r0
 80051dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051e4:	f040 80a7 	bne.w	8005336 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f004 fe5e 	bl	8009eb2 <USB_ReadDevAllOutEpInterrupt>
 80051f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80051f8:	e099      	b.n	800532e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 808e 	beq.w	8005322 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	4611      	mov	r1, r2
 8005210:	4618      	mov	r0, r3
 8005212:	f004 fe82 	bl	8009f1a <USB_ReadDevOutEPInterrupt>
 8005216:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00c      	beq.n	800523c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522e:	461a      	mov	r2, r3
 8005230:	2301      	movs	r3, #1
 8005232:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fec2 	bl	8005fc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00c      	beq.n	8005260 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	461a      	mov	r2, r3
 8005254:	2308      	movs	r3, #8
 8005256:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 ff98 	bl	8006190 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005276:	461a      	mov	r2, r3
 8005278:	2310      	movs	r3, #16
 800527a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d030      	beq.n	80052e8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b80      	cmp	r3, #128	; 0x80
 8005290:	d109      	bne.n	80052a6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052a4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80052a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4413      	add	r3, r2
 80052b8:	3304      	adds	r3, #4
 80052ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	78db      	ldrb	r3, [r3, #3]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d108      	bne.n	80052d6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2200      	movs	r2, #0
 80052c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f009 ff97 	bl	800f204 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e2:	461a      	mov	r2, r3
 80052e4:	2302      	movs	r3, #2
 80052e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	461a      	mov	r2, r3
 8005300:	2320      	movs	r3, #32
 8005302:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	461a      	mov	r2, r3
 800531c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005320:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	3301      	adds	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	2b00      	cmp	r3, #0
 8005332:	f47f af62 	bne.w	80051fa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f004 fda6 	bl	8009e8c <USB_ReadInterrupts>
 8005340:	4603      	mov	r3, r0
 8005342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800534a:	f040 80db 	bne.w	8005504 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f004 fdc7 	bl	8009ee6 <USB_ReadDevAllInEpInterrupt>
 8005358:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800535e:	e0cd      	b.n	80054fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80c2 	beq.w	80054f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	4611      	mov	r1, r2
 8005376:	4618      	mov	r0, r3
 8005378:	f004 fded 	bl	8009f56 <USB_ReadDevInEPInterrupt>
 800537c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d057      	beq.n	8005438 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	2201      	movs	r2, #1
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	69f9      	ldr	r1, [r7, #28]
 80053a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053a8:	4013      	ands	r3, r2
 80053aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	461a      	mov	r2, r3
 80053ba:	2301      	movs	r3, #1
 80053bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d132      	bne.n	800542c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ca:	4613      	mov	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	334c      	adds	r3, #76	; 0x4c
 80053d6:	6819      	ldr	r1, [r3, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	4613      	mov	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4403      	add	r3, r0
 80053e6:	3348      	adds	r3, #72	; 0x48
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4419      	add	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f0:	4613      	mov	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4403      	add	r3, r0
 80053fa:	334c      	adds	r3, #76	; 0x4c
 80053fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	2b00      	cmp	r3, #0
 8005402:	d113      	bne.n	800542c <HAL_PCD_IRQHandler+0x3a2>
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005408:	4613      	mov	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	3354      	adds	r3, #84	; 0x54
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d108      	bne.n	800542c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005424:	461a      	mov	r2, r3
 8005426:	2101      	movs	r1, #1
 8005428:	f004 fdf4 	bl	800a014 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	b2db      	uxtb	r3, r3
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f009 fe61 	bl	800f0fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d008      	beq.n	8005454 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544e:	461a      	mov	r2, r3
 8005450:	2308      	movs	r3, #8
 8005452:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	461a      	mov	r2, r3
 800546c:	2310      	movs	r3, #16
 800546e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d008      	beq.n	800548c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005486:	461a      	mov	r2, r3
 8005488:	2340      	movs	r3, #64	; 0x40
 800548a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d023      	beq.n	80054de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005498:	6a38      	ldr	r0, [r7, #32]
 800549a:	f003 fcd5 	bl	8008e48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800549e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a0:	4613      	mov	r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	3338      	adds	r3, #56	; 0x38
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	4413      	add	r3, r2
 80054ae:	3304      	adds	r3, #4
 80054b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	78db      	ldrb	r3, [r3, #3]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d108      	bne.n	80054cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2200      	movs	r2, #0
 80054be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f009 feae 	bl	800f228 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d8:	461a      	mov	r2, r3
 80054da:	2302      	movs	r3, #2
 80054dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80054e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fcdb 	bl	8005ea6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	3301      	adds	r3, #1
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	085b      	lsrs	r3, r3, #1
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80054fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f47f af2e 	bne.w	8005360 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f004 fcbf 	bl	8009e8c <USB_ReadInterrupts>
 800550e:	4603      	mov	r3, r0
 8005510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005518:	d122      	bne.n	8005560 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005534:	2b01      	cmp	r3, #1
 8005536:	d108      	bne.n	800554a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005540:	2100      	movs	r1, #0
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fec2 	bl	80062cc <HAL_PCDEx_LPM_Callback>
 8005548:	e002      	b.n	8005550 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f009 fe4c 	bl	800f1e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695a      	ldr	r2, [r3, #20]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800555e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4618      	mov	r0, r3
 8005566:	f004 fc91 	bl	8009e8c <USB_ReadInterrupts>
 800556a:	4603      	mov	r3, r0
 800556c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005574:	d112      	bne.n	800559c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b01      	cmp	r3, #1
 8005584:	d102      	bne.n	800558c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f009 fe08 	bl	800f19c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695a      	ldr	r2, [r3, #20]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800559a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f004 fc73 	bl	8009e8c <USB_ReadInterrupts>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b0:	f040 80b7 	bne.w	8005722 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055c2:	f023 0301 	bic.w	r3, r3, #1
 80055c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2110      	movs	r1, #16
 80055ce:	4618      	mov	r0, r3
 80055d0:	f003 fc3a 	bl	8008e48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055d4:	2300      	movs	r3, #0
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d8:	e046      	b.n	8005668 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e6:	461a      	mov	r2, r3
 80055e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	440a      	add	r2, r1
 8005604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005608:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800560c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	461a      	mov	r2, r3
 800561c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005620:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005640:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800565c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005660:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005664:	3301      	adds	r3, #1
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800566e:	429a      	cmp	r2, r3
 8005670:	d3b3      	bcc.n	80055da <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005680:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005684:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	2b00      	cmp	r3, #0
 800568c:	d016      	beq.n	80056bc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800569e:	f043 030b 	orr.w	r3, r3, #11
 80056a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056b4:	f043 030b 	orr.w	r3, r3, #11
 80056b8:	6453      	str	r3, [r2, #68]	; 0x44
 80056ba:	e015      	b.n	80056e8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80056d2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e2:	f043 030b 	orr.w	r3, r3, #11
 80056e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800570c:	461a      	mov	r2, r3
 800570e:	f004 fc81 	bl	800a014 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f004 fbb0 	bl	8009e8c <USB_ReadInterrupts>
 800572c:	4603      	mov	r3, r0
 800572e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005736:	d124      	bne.n	8005782 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f004 fc46 	bl	8009fce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f003 fbfb 	bl	8008f42 <USB_GetDevSpeed>
 800574c:	4603      	mov	r3, r0
 800574e:	461a      	mov	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681c      	ldr	r4, [r3, #0]
 8005758:	f001 fa78 	bl	8006c4c <HAL_RCC_GetHCLKFreq>
 800575c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	4620      	mov	r0, r4
 8005768:	f003 f8fa 	bl	8008960 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f009 fcec 	bl	800f14a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695a      	ldr	r2, [r3, #20]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005780:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f004 fb80 	bl	8009e8c <USB_ReadInterrupts>
 800578c:	4603      	mov	r3, r0
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b08      	cmp	r3, #8
 8005794:	d10a      	bne.n	80057ac <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f009 fcc9 	bl	800f12e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f002 0208 	and.w	r2, r2, #8
 80057aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f004 fb6b 	bl	8009e8c <USB_ReadInterrupts>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057bc:	2b80      	cmp	r3, #128	; 0x80
 80057be:	d122      	bne.n	8005806 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057cc:	2301      	movs	r3, #1
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
 80057d0:	e014      	b.n	80057fc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d6:	4613      	mov	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d105      	bne.n	80057f6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fb27 	bl	8005e44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	3301      	adds	r3, #1
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005802:	429a      	cmp	r2, r3
 8005804:	d3e5      	bcc.n	80057d2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f004 fb3e 	bl	8009e8c <USB_ReadInterrupts>
 8005810:	4603      	mov	r3, r0
 8005812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581a:	d13b      	bne.n	8005894 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800581c:	2301      	movs	r3, #1
 800581e:	627b      	str	r3, [r7, #36]	; 0x24
 8005820:	e02b      	b.n	800587a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005836:	4613      	mov	r3, r2
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	3340      	adds	r3, #64	; 0x40
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d115      	bne.n	8005874 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005848:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800584a:	2b00      	cmp	r3, #0
 800584c:	da12      	bge.n	8005874 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005852:	4613      	mov	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	333f      	adds	r3, #63	; 0x3f
 800585e:	2201      	movs	r2, #1
 8005860:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	b2db      	uxtb	r3, r3
 8005866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800586a:	b2db      	uxtb	r3, r3
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fae8 	bl	8005e44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	3301      	adds	r3, #1
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005880:	429a      	cmp	r2, r3
 8005882:	d3ce      	bcc.n	8005822 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f004 faf7 	bl	8009e8c <USB_ReadInterrupts>
 800589e:	4603      	mov	r3, r0
 80058a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058a8:	d155      	bne.n	8005956 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058aa:	2301      	movs	r3, #1
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	e045      	b.n	800593c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c4:	4613      	mov	r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d12e      	bne.n	8005936 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058da:	2b00      	cmp	r3, #0
 80058dc:	da2b      	bge.n	8005936 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80058ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d121      	bne.n	8005936 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005904:	2201      	movs	r2, #1
 8005906:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005932:	6053      	str	r3, [r2, #4]
            break;
 8005934:	e007      	b.n	8005946 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	3301      	adds	r3, #1
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005942:	429a      	cmp	r2, r3
 8005944:	d3b4      	bcc.n	80058b0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f004 fa96 	bl	8009e8c <USB_ReadInterrupts>
 8005960:	4603      	mov	r3, r0
 8005962:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d10a      	bne.n	8005982 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f009 fc6d 	bl	800f24c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f004 fa80 	bl	8009e8c <USB_ReadInterrupts>
 800598c:	4603      	mov	r3, r0
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b04      	cmp	r3, #4
 8005994:	d115      	bne.n	80059c2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f009 fc5d 	bl	800f268 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6859      	ldr	r1, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	e000      	b.n	80059c2 <HAL_PCD_IRQHandler+0x938>
      return;
 80059c0:	bf00      	nop
    }
  }
}
 80059c2:	3734      	adds	r7, #52	; 0x34
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd90      	pop	{r4, r7, pc}

080059c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_PCD_SetAddress+0x1a>
 80059de:	2302      	movs	r3, #2
 80059e0:	e013      	b.n	8005a0a <HAL_PCD_SetAddress+0x42>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	78fa      	ldrb	r2, [r7, #3]
 80059f8:	4611      	mov	r1, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f004 f9de 	bl	8009dbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	4608      	mov	r0, r1
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	461a      	mov	r2, r3
 8005a20:	4603      	mov	r3, r0
 8005a22:	70fb      	strb	r3, [r7, #3]
 8005a24:	460b      	mov	r3, r1
 8005a26:	803b      	strh	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da0f      	bge.n	8005a58 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	f003 020f 	and.w	r2, r3, #15
 8005a3e:	4613      	mov	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	3338      	adds	r3, #56	; 0x38
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	705a      	strb	r2, [r3, #1]
 8005a56:	e00f      	b.n	8005a78 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	f003 020f 	and.w	r2, r3, #15
 8005a5e:	4613      	mov	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3304      	adds	r3, #4
 8005a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a84:	883a      	ldrh	r2, [r7, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	78ba      	ldrb	r2, [r7, #2]
 8005a8e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005aa2:	78bb      	ldrb	r3, [r7, #2]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d102      	bne.n	8005aae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_PCD_EP_Open+0xaa>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e00e      	b.n	8005ada <HAL_PCD_EP_Open+0xc8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68f9      	ldr	r1, [r7, #12]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f003 fa5e 	bl	8008f8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005ad8:	7afb      	ldrb	r3, [r7, #11]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	460b      	mov	r3, r1
 8005aec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	da0f      	bge.n	8005b16 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	f003 020f 	and.w	r2, r3, #15
 8005afc:	4613      	mov	r3, r2
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	3338      	adds	r3, #56	; 0x38
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	4413      	add	r3, r2
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	705a      	strb	r2, [r3, #1]
 8005b14:	e00f      	b.n	8005b36 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	f003 020f 	and.w	r2, r3, #15
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_PCD_EP_Close+0x6e>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e00e      	b.n	8005b6e <HAL_PCD_EP_Close+0x8c>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68f9      	ldr	r1, [r7, #12]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f003 fa9c 	bl	800909c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b086      	sub	sp, #24
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
 8005b82:	460b      	mov	r3, r1
 8005b84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b86:	7afb      	ldrb	r3, [r7, #11]
 8005b88:	f003 020f 	and.w	r2, r3, #15
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bb8:	7afb      	ldrb	r3, [r7, #11]
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d102      	bne.n	8005bd2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bd2:	7afb      	ldrb	r3, [r7, #11]
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d109      	bne.n	8005bf0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	6979      	ldr	r1, [r7, #20]
 8005bea:	f003 fd7b 	bl	80096e4 <USB_EP0StartXfer>
 8005bee:	e008      	b.n	8005c02 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6818      	ldr	r0, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6979      	ldr	r1, [r7, #20]
 8005bfe:	f003 fb29 	bl	8009254 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	f003 020f 	and.w	r2, r3, #15
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005c2e:	681b      	ldr	r3, [r3, #0]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c4c:	7afb      	ldrb	r3, [r7, #11]
 8005c4e:	f003 020f 	and.w	r2, r3, #15
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	3338      	adds	r3, #56	; 0x38
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	3304      	adds	r3, #4
 8005c62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2200      	movs	r2, #0
 8005c74:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c7c:	7afb      	ldrb	r3, [r7, #11]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d102      	bne.n	8005c96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c96:	7afb      	ldrb	r3, [r7, #11]
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d109      	bne.n	8005cb4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	6979      	ldr	r1, [r7, #20]
 8005cae:	f003 fd19 	bl	80096e4 <USB_EP0StartXfer>
 8005cb2:	e008      	b.n	8005cc6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6979      	ldr	r1, [r7, #20]
 8005cc2:	f003 fac7 	bl	8009254 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	f003 020f 	and.w	r2, r3, #15
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d901      	bls.n	8005cee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e050      	b.n	8005d90 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da0f      	bge.n	8005d16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	f003 020f 	and.w	r2, r3, #15
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	3338      	adds	r3, #56	; 0x38
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	4413      	add	r3, r2
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	705a      	strb	r2, [r3, #1]
 8005d14:	e00d      	b.n	8005d32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	4413      	add	r3, r2
 8005d28:	3304      	adds	r3, #4
 8005d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_PCD_EP_SetStall+0x82>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e01e      	b.n	8005d90 <HAL_PCD_EP_SetStall+0xc0>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f003 ff57 	bl	8009c14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6818      	ldr	r0, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	b2d9      	uxtb	r1, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d80:	461a      	mov	r2, r3
 8005d82:	f004 f947 	bl	800a014 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	f003 020f 	and.w	r2, r3, #15
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d901      	bls.n	8005db6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e042      	b.n	8005e3c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005db6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	da0f      	bge.n	8005dde <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	f003 020f 	and.w	r2, r3, #15
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	3338      	adds	r3, #56	; 0x38
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	705a      	strb	r2, [r3, #1]
 8005ddc:	e00f      	b.n	8005dfe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	f003 020f 	and.w	r2, r3, #15
 8005de4:	4613      	mov	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	4413      	add	r3, r2
 8005df4:	3304      	adds	r3, #4
 8005df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_PCD_EP_ClrStall+0x86>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e00e      	b.n	8005e3c <HAL_PCD_EP_ClrStall+0xa4>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f003 ff5f 	bl	8009cf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	da0c      	bge.n	8005e72 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	f003 020f 	and.w	r2, r3, #15
 8005e5e:	4613      	mov	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	3338      	adds	r3, #56	; 0x38
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	e00c      	b.n	8005e8c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	f003 020f 	and.w	r2, r3, #15
 8005e78:	4613      	mov	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	3304      	adds	r3, #4
 8005e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68f9      	ldr	r1, [r7, #12]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f003 fd7e 	bl	8009994 <USB_EPStopXfer>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e9c:	7afb      	ldrb	r3, [r7, #11]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b08a      	sub	sp, #40	; 0x28
 8005eaa:	af02      	add	r7, sp, #8
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	3338      	adds	r3, #56	; 0x38
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	3304      	adds	r3, #4
 8005ecc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1a      	ldr	r2, [r3, #32]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d901      	bls.n	8005ede <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e06c      	b.n	8005fb8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d902      	bls.n	8005efa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	3303      	adds	r3, #3
 8005efe:	089b      	lsrs	r3, r3, #2
 8005f00:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f02:	e02b      	b.n	8005f5c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	699a      	ldr	r2, [r3, #24]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d902      	bls.n	8005f20 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	3303      	adds	r3, #3
 8005f24:	089b      	lsrs	r3, r3, #2
 8005f26:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6919      	ldr	r1, [r3, #16]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	6978      	ldr	r0, [r7, #20]
 8005f40:	f003 fdd2 	bl	8009ae8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	441a      	add	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a1a      	ldr	r2, [r3, #32]
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	441a      	add	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d809      	bhi.n	8005f86 <PCD_WriteEmptyTxFifo+0xe0>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1a      	ldr	r2, [r3, #32]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d203      	bcs.n	8005f86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1be      	bne.n	8005f04 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d811      	bhi.n	8005fb6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	2201      	movs	r2, #1
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	43db      	mvns	r3, r3
 8005fac:	6939      	ldr	r1, [r7, #16]
 8005fae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	333c      	adds	r3, #60	; 0x3c
 8005fd8:	3304      	adds	r3, #4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d17b      	bne.n	80060ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d015      	beq.n	800602c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4a61      	ldr	r2, [pc, #388]	; (8006188 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	f240 80b9 	bls.w	800617c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80b3 	beq.w	800617c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	461a      	mov	r2, r3
 8006024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006028:	6093      	str	r3, [r2, #8]
 800602a:	e0a7      	b.n	800617c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006042:	461a      	mov	r2, r3
 8006044:	2320      	movs	r3, #32
 8006046:	6093      	str	r3, [r2, #8]
 8006048:	e098      	b.n	800617c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 8093 	bne.w	800617c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	4a4b      	ldr	r2, [pc, #300]	; (8006188 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d90f      	bls.n	800607e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	461a      	mov	r2, r3
 8006076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800607a:	6093      	str	r3, [r2, #8]
 800607c:	e07e      	b.n	800617c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	4613      	mov	r3, r2
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	4413      	add	r3, r2
 8006090:	3304      	adds	r3, #4
 8006092:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	0159      	lsls	r1, r3, #5
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	440b      	add	r3, r1
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060aa:	1ad2      	subs	r2, r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d114      	bne.n	80060e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060c8:	461a      	mov	r2, r3
 80060ca:	2101      	movs	r1, #1
 80060cc:	f003 ffa2 	bl	800a014 <USB_EP0_OutStart>
 80060d0:	e006      	b.n	80060e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	441a      	add	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f008 ffec 	bl	800f0c4 <HAL_PCD_DataOutStageCallback>
 80060ec:	e046      	b.n	800617c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	4a26      	ldr	r2, [pc, #152]	; (800618c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d124      	bne.n	8006140 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	461a      	mov	r2, r3
 800610e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006112:	6093      	str	r3, [r2, #8]
 8006114:	e032      	b.n	800617c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f003 0320 	and.w	r3, r3, #32
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	461a      	mov	r2, r3
 800612e:	2320      	movs	r3, #32
 8006130:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f008 ffc3 	bl	800f0c4 <HAL_PCD_DataOutStageCallback>
 800613e:	e01d      	b.n	800617c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d114      	bne.n	8006170 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	4613      	mov	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	440b      	add	r3, r1
 8006154:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d108      	bne.n	8006170 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006168:	461a      	mov	r2, r3
 800616a:	2100      	movs	r1, #0
 800616c:	f003 ff52 	bl	800a014 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f008 ffa4 	bl	800f0c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3720      	adds	r7, #32
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	4f54300a 	.word	0x4f54300a
 800618c:	4f54310a 	.word	0x4f54310a

08006190 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	333c      	adds	r3, #60	; 0x3c
 80061a8:	3304      	adds	r3, #4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4a15      	ldr	r2, [pc, #84]	; (8006218 <PCD_EP_OutSetupPacket_int+0x88>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d90e      	bls.n	80061e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d009      	beq.n	80061e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061dc:	461a      	mov	r2, r3
 80061de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f008 ff5b 	bl	800f0a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a0a      	ldr	r2, [pc, #40]	; (8006218 <PCD_EP_OutSetupPacket_int+0x88>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d90c      	bls.n	800620c <PCD_EP_OutSetupPacket_int+0x7c>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d108      	bne.n	800620c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006204:	461a      	mov	r2, r3
 8006206:	2101      	movs	r1, #1
 8006208:	f003 ff04 	bl	800a014 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	4f54300a 	.word	0x4f54300a

0800621c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
 8006228:	4613      	mov	r3, r2
 800622a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d107      	bne.n	800624a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800623a:	883b      	ldrh	r3, [r7, #0]
 800623c:	0419      	lsls	r1, r3, #16
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	430a      	orrs	r2, r1
 8006246:	629a      	str	r2, [r3, #40]	; 0x28
 8006248:	e028      	b.n	800629c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	0c1b      	lsrs	r3, r3, #16
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	4413      	add	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]
 800625c:	e00d      	b.n	800627a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	3340      	adds	r3, #64	; 0x40
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	0c1b      	lsrs	r3, r3, #16
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	4413      	add	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	3301      	adds	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
 800627a:	7bfa      	ldrb	r2, [r7, #15]
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	3b01      	subs	r3, #1
 8006280:	429a      	cmp	r2, r3
 8006282:	d3ec      	bcc.n	800625e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006284:	883b      	ldrh	r3, [r7, #0]
 8006286:	0418      	lsls	r0, r3, #16
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6819      	ldr	r1, [r3, #0]
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	3b01      	subs	r3, #1
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	4302      	orrs	r2, r0
 8006294:	3340      	adds	r3, #64	; 0x40
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	887a      	ldrh	r2, [r7, #2]
 80062bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80062ee:	2300      	movs	r3, #0
 80062f0:	603b      	str	r3, [r7, #0]
 80062f2:	4b20      	ldr	r3, [pc, #128]	; (8006374 <HAL_PWREx_EnableOverDrive+0x90>)
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <HAL_PWREx_EnableOverDrive+0x90>)
 80062f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062fc:	6413      	str	r3, [r2, #64]	; 0x40
 80062fe:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <HAL_PWREx_EnableOverDrive+0x90>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800630a:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <HAL_PWREx_EnableOverDrive+0x94>)
 800630c:	2201      	movs	r2, #1
 800630e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006310:	f7fd f89a 	bl	8003448 <HAL_GetTick>
 8006314:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006316:	e009      	b.n	800632c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006318:	f7fd f896 	bl	8003448 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006326:	d901      	bls.n	800632c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e01f      	b.n	800636c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800632c:	4b13      	ldr	r3, [pc, #76]	; (800637c <HAL_PWREx_EnableOverDrive+0x98>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006338:	d1ee      	bne.n	8006318 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800633a:	4b11      	ldr	r3, [pc, #68]	; (8006380 <HAL_PWREx_EnableOverDrive+0x9c>)
 800633c:	2201      	movs	r2, #1
 800633e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006340:	f7fd f882 	bl	8003448 <HAL_GetTick>
 8006344:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006346:	e009      	b.n	800635c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006348:	f7fd f87e 	bl	8003448 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006356:	d901      	bls.n	800635c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e007      	b.n	800636c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <HAL_PWREx_EnableOverDrive+0x98>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006368:	d1ee      	bne.n	8006348 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40023800 	.word	0x40023800
 8006378:	420e0040 	.word	0x420e0040
 800637c:	40007000 	.word	0x40007000
 8006380:	420e0044 	.word	0x420e0044

08006384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e267      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d075      	beq.n	800648e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063a2:	4b88      	ldr	r3, [pc, #544]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d00c      	beq.n	80063c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ae:	4b85      	ldr	r3, [pc, #532]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d112      	bne.n	80063e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ba:	4b82      	ldr	r3, [pc, #520]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063c6:	d10b      	bne.n	80063e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c8:	4b7e      	ldr	r3, [pc, #504]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d05b      	beq.n	800648c <HAL_RCC_OscConfig+0x108>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d157      	bne.n	800648c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e242      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e8:	d106      	bne.n	80063f8 <HAL_RCC_OscConfig+0x74>
 80063ea:	4b76      	ldr	r3, [pc, #472]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a75      	ldr	r2, [pc, #468]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 80063f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	e01d      	b.n	8006434 <HAL_RCC_OscConfig+0xb0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006400:	d10c      	bne.n	800641c <HAL_RCC_OscConfig+0x98>
 8006402:	4b70      	ldr	r3, [pc, #448]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a6f      	ldr	r2, [pc, #444]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	4b6d      	ldr	r3, [pc, #436]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a6c      	ldr	r2, [pc, #432]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	e00b      	b.n	8006434 <HAL_RCC_OscConfig+0xb0>
 800641c:	4b69      	ldr	r3, [pc, #420]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a68      	ldr	r2, [pc, #416]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	4b66      	ldr	r3, [pc, #408]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a65      	ldr	r2, [pc, #404]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 800642e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d013      	beq.n	8006464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643c:	f7fd f804 	bl	8003448 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006444:	f7fd f800 	bl	8003448 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b64      	cmp	r3, #100	; 0x64
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e207      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006456:	4b5b      	ldr	r3, [pc, #364]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0f0      	beq.n	8006444 <HAL_RCC_OscConfig+0xc0>
 8006462:	e014      	b.n	800648e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006464:	f7fc fff0 	bl	8003448 <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800646c:	f7fc ffec 	bl	8003448 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b64      	cmp	r3, #100	; 0x64
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e1f3      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800647e:	4b51      	ldr	r3, [pc, #324]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f0      	bne.n	800646c <HAL_RCC_OscConfig+0xe8>
 800648a:	e000      	b.n	800648e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800648c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d063      	beq.n	8006562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800649a:	4b4a      	ldr	r3, [pc, #296]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 030c 	and.w	r3, r3, #12
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00b      	beq.n	80064be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064a6:	4b47      	ldr	r3, [pc, #284]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d11c      	bne.n	80064ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064b2:	4b44      	ldr	r3, [pc, #272]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d116      	bne.n	80064ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064be:	4b41      	ldr	r3, [pc, #260]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <HAL_RCC_OscConfig+0x152>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d001      	beq.n	80064d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e1c7      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d6:	4b3b      	ldr	r3, [pc, #236]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	4937      	ldr	r1, [pc, #220]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ea:	e03a      	b.n	8006562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d020      	beq.n	8006536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064f4:	4b34      	ldr	r3, [pc, #208]	; (80065c8 <HAL_RCC_OscConfig+0x244>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fa:	f7fc ffa5 	bl	8003448 <HAL_GetTick>
 80064fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006502:	f7fc ffa1 	bl	8003448 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e1a8      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006514:	4b2b      	ldr	r3, [pc, #172]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0f0      	beq.n	8006502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006520:	4b28      	ldr	r3, [pc, #160]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	4925      	ldr	r1, [pc, #148]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006530:	4313      	orrs	r3, r2
 8006532:	600b      	str	r3, [r1, #0]
 8006534:	e015      	b.n	8006562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006536:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <HAL_RCC_OscConfig+0x244>)
 8006538:	2200      	movs	r2, #0
 800653a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653c:	f7fc ff84 	bl	8003448 <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006544:	f7fc ff80 	bl	8003448 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e187      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006556:	4b1b      	ldr	r3, [pc, #108]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f0      	bne.n	8006544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d036      	beq.n	80065dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d016      	beq.n	80065a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006576:	4b15      	ldr	r3, [pc, #84]	; (80065cc <HAL_RCC_OscConfig+0x248>)
 8006578:	2201      	movs	r2, #1
 800657a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657c:	f7fc ff64 	bl	8003448 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006584:	f7fc ff60 	bl	8003448 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e167      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006596:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <HAL_RCC_OscConfig+0x240>)
 8006598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCC_OscConfig+0x200>
 80065a2:	e01b      	b.n	80065dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065a4:	4b09      	ldr	r3, [pc, #36]	; (80065cc <HAL_RCC_OscConfig+0x248>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065aa:	f7fc ff4d 	bl	8003448 <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b0:	e00e      	b.n	80065d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b2:	f7fc ff49 	bl	8003448 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d907      	bls.n	80065d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e150      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
 80065c4:	40023800 	.word	0x40023800
 80065c8:	42470000 	.word	0x42470000
 80065cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d0:	4b88      	ldr	r3, [pc, #544]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 80065d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1ea      	bne.n	80065b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8097 	beq.w	8006718 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ea:	2300      	movs	r3, #0
 80065ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ee:	4b81      	ldr	r3, [pc, #516]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10f      	bne.n	800661a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065fa:	2300      	movs	r3, #0
 80065fc:	60bb      	str	r3, [r7, #8]
 80065fe:	4b7d      	ldr	r3, [pc, #500]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	4a7c      	ldr	r2, [pc, #496]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006608:	6413      	str	r3, [r2, #64]	; 0x40
 800660a:	4b7a      	ldr	r3, [pc, #488]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006612:	60bb      	str	r3, [r7, #8]
 8006614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006616:	2301      	movs	r3, #1
 8006618:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661a:	4b77      	ldr	r3, [pc, #476]	; (80067f8 <HAL_RCC_OscConfig+0x474>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006622:	2b00      	cmp	r3, #0
 8006624:	d118      	bne.n	8006658 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006626:	4b74      	ldr	r3, [pc, #464]	; (80067f8 <HAL_RCC_OscConfig+0x474>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a73      	ldr	r2, [pc, #460]	; (80067f8 <HAL_RCC_OscConfig+0x474>)
 800662c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006632:	f7fc ff09 	bl	8003448 <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800663a:	f7fc ff05 	bl	8003448 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e10c      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664c:	4b6a      	ldr	r3, [pc, #424]	; (80067f8 <HAL_RCC_OscConfig+0x474>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d106      	bne.n	800666e <HAL_RCC_OscConfig+0x2ea>
 8006660:	4b64      	ldr	r3, [pc, #400]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	4a63      	ldr	r2, [pc, #396]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006666:	f043 0301 	orr.w	r3, r3, #1
 800666a:	6713      	str	r3, [r2, #112]	; 0x70
 800666c:	e01c      	b.n	80066a8 <HAL_RCC_OscConfig+0x324>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2b05      	cmp	r3, #5
 8006674:	d10c      	bne.n	8006690 <HAL_RCC_OscConfig+0x30c>
 8006676:	4b5f      	ldr	r3, [pc, #380]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	4a5e      	ldr	r2, [pc, #376]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 800667c:	f043 0304 	orr.w	r3, r3, #4
 8006680:	6713      	str	r3, [r2, #112]	; 0x70
 8006682:	4b5c      	ldr	r3, [pc, #368]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	4a5b      	ldr	r2, [pc, #364]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	6713      	str	r3, [r2, #112]	; 0x70
 800668e:	e00b      	b.n	80066a8 <HAL_RCC_OscConfig+0x324>
 8006690:	4b58      	ldr	r3, [pc, #352]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006694:	4a57      	ldr	r2, [pc, #348]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006696:	f023 0301 	bic.w	r3, r3, #1
 800669a:	6713      	str	r3, [r2, #112]	; 0x70
 800669c:	4b55      	ldr	r3, [pc, #340]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 800669e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a0:	4a54      	ldr	r2, [pc, #336]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 80066a2:	f023 0304 	bic.w	r3, r3, #4
 80066a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d015      	beq.n	80066dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b0:	f7fc feca 	bl	8003448 <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b6:	e00a      	b.n	80066ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066b8:	f7fc fec6 	bl	8003448 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e0cb      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ce:	4b49      	ldr	r3, [pc, #292]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0ee      	beq.n	80066b8 <HAL_RCC_OscConfig+0x334>
 80066da:	e014      	b.n	8006706 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066dc:	f7fc feb4 	bl	8003448 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e2:	e00a      	b.n	80066fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e4:	f7fc feb0 	bl	8003448 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e0b5      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fa:	4b3e      	ldr	r3, [pc, #248]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 80066fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1ee      	bne.n	80066e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006706:	7dfb      	ldrb	r3, [r7, #23]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d105      	bne.n	8006718 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800670c:	4b39      	ldr	r3, [pc, #228]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	4a38      	ldr	r2, [pc, #224]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006716:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80a1 	beq.w	8006864 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006722:	4b34      	ldr	r3, [pc, #208]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 030c 	and.w	r3, r3, #12
 800672a:	2b08      	cmp	r3, #8
 800672c:	d05c      	beq.n	80067e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d141      	bne.n	80067ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006736:	4b31      	ldr	r3, [pc, #196]	; (80067fc <HAL_RCC_OscConfig+0x478>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673c:	f7fc fe84 	bl	8003448 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006744:	f7fc fe80 	bl	8003448 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e087      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006756:	4b27      	ldr	r3, [pc, #156]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69da      	ldr	r2, [r3, #28]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	019b      	lsls	r3, r3, #6
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	085b      	lsrs	r3, r3, #1
 800677a:	3b01      	subs	r3, #1
 800677c:	041b      	lsls	r3, r3, #16
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	061b      	lsls	r3, r3, #24
 8006786:	491b      	ldr	r1, [pc, #108]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 8006788:	4313      	orrs	r3, r2
 800678a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800678c:	4b1b      	ldr	r3, [pc, #108]	; (80067fc <HAL_RCC_OscConfig+0x478>)
 800678e:	2201      	movs	r2, #1
 8006790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006792:	f7fc fe59 	bl	8003448 <HAL_GetTick>
 8006796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006798:	e008      	b.n	80067ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679a:	f7fc fe55 	bl	8003448 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e05c      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ac:	4b11      	ldr	r3, [pc, #68]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0f0      	beq.n	800679a <HAL_RCC_OscConfig+0x416>
 80067b8:	e054      	b.n	8006864 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ba:	4b10      	ldr	r3, [pc, #64]	; (80067fc <HAL_RCC_OscConfig+0x478>)
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c0:	f7fc fe42 	bl	8003448 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c8:	f7fc fe3e 	bl	8003448 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e045      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067da:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <HAL_RCC_OscConfig+0x470>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0x444>
 80067e6:	e03d      	b.n	8006864 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d107      	bne.n	8006800 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e038      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
 80067f4:	40023800 	.word	0x40023800
 80067f8:	40007000 	.word	0x40007000
 80067fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006800:	4b1b      	ldr	r3, [pc, #108]	; (8006870 <HAL_RCC_OscConfig+0x4ec>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d028      	beq.n	8006860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006818:	429a      	cmp	r2, r3
 800681a:	d121      	bne.n	8006860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006826:	429a      	cmp	r2, r3
 8006828:	d11a      	bne.n	8006860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006830:	4013      	ands	r3, r2
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006838:	4293      	cmp	r3, r2
 800683a:	d111      	bne.n	8006860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	085b      	lsrs	r3, r3, #1
 8006848:	3b01      	subs	r3, #1
 800684a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800684c:	429a      	cmp	r2, r3
 800684e:	d107      	bne.n	8006860 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800685c:	429a      	cmp	r2, r3
 800685e:	d001      	beq.n	8006864 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e000      	b.n	8006866 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40023800 	.word	0x40023800

08006874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0cc      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006888:	4b68      	ldr	r3, [pc, #416]	; (8006a2c <HAL_RCC_ClockConfig+0x1b8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d90c      	bls.n	80068b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006896:	4b65      	ldr	r3, [pc, #404]	; (8006a2c <HAL_RCC_ClockConfig+0x1b8>)
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800689e:	4b63      	ldr	r3, [pc, #396]	; (8006a2c <HAL_RCC_ClockConfig+0x1b8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 030f 	and.w	r3, r3, #15
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d001      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0b8      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d020      	beq.n	80068fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068c8:	4b59      	ldr	r3, [pc, #356]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	4a58      	ldr	r2, [pc, #352]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068e0:	4b53      	ldr	r3, [pc, #332]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	4a52      	ldr	r2, [pc, #328]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068ec:	4b50      	ldr	r3, [pc, #320]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	494d      	ldr	r1, [pc, #308]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d044      	beq.n	8006994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d107      	bne.n	8006922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006912:	4b47      	ldr	r3, [pc, #284]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d119      	bne.n	8006952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e07f      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d003      	beq.n	8006932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800692e:	2b03      	cmp	r3, #3
 8006930:	d107      	bne.n	8006942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006932:	4b3f      	ldr	r3, [pc, #252]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e06f      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006942:	4b3b      	ldr	r3, [pc, #236]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e067      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006952:	4b37      	ldr	r3, [pc, #220]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f023 0203 	bic.w	r2, r3, #3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	4934      	ldr	r1, [pc, #208]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 8006960:	4313      	orrs	r3, r2
 8006962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006964:	f7fc fd70 	bl	8003448 <HAL_GetTick>
 8006968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800696a:	e00a      	b.n	8006982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800696c:	f7fc fd6c 	bl	8003448 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	f241 3288 	movw	r2, #5000	; 0x1388
 800697a:	4293      	cmp	r3, r2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e04f      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006982:	4b2b      	ldr	r3, [pc, #172]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 020c 	and.w	r2, r3, #12
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	429a      	cmp	r2, r3
 8006992:	d1eb      	bne.n	800696c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006994:	4b25      	ldr	r3, [pc, #148]	; (8006a2c <HAL_RCC_ClockConfig+0x1b8>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 030f 	and.w	r3, r3, #15
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d20c      	bcs.n	80069bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a2:	4b22      	ldr	r3, [pc, #136]	; (8006a2c <HAL_RCC_ClockConfig+0x1b8>)
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069aa:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <HAL_RCC_ClockConfig+0x1b8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d001      	beq.n	80069bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e032      	b.n	8006a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069c8:	4b19      	ldr	r3, [pc, #100]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	4916      	ldr	r1, [pc, #88]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d009      	beq.n	80069fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069e6:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	490e      	ldr	r1, [pc, #56]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069fa:	f000 f821 	bl	8006a40 <HAL_RCC_GetSysClockFreq>
 80069fe:	4602      	mov	r2, r0
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <HAL_RCC_ClockConfig+0x1bc>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	091b      	lsrs	r3, r3, #4
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	490a      	ldr	r1, [pc, #40]	; (8006a34 <HAL_RCC_ClockConfig+0x1c0>)
 8006a0c:	5ccb      	ldrb	r3, [r1, r3]
 8006a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a12:	4a09      	ldr	r2, [pc, #36]	; (8006a38 <HAL_RCC_ClockConfig+0x1c4>)
 8006a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a16:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <HAL_RCC_ClockConfig+0x1c8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fa fe40 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40023c00 	.word	0x40023c00
 8006a30:	40023800 	.word	0x40023800
 8006a34:	08012444 	.word	0x08012444
 8006a38:	20000000 	.word	0x20000000
 8006a3c:	20000080 	.word	0x20000080

08006a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a44:	b094      	sub	sp, #80	; 0x50
 8006a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a50:	2300      	movs	r3, #0
 8006a52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a58:	4b79      	ldr	r3, [pc, #484]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 030c 	and.w	r3, r3, #12
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d00d      	beq.n	8006a80 <HAL_RCC_GetSysClockFreq+0x40>
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	f200 80e1 	bhi.w	8006c2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <HAL_RCC_GetSysClockFreq+0x34>
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d003      	beq.n	8006a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a72:	e0db      	b.n	8006c2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a74:	4b73      	ldr	r3, [pc, #460]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a78:	e0db      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a7a:	4b73      	ldr	r3, [pc, #460]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a7e:	e0d8      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a80:	4b6f      	ldr	r3, [pc, #444]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a8a:	4b6d      	ldr	r3, [pc, #436]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d063      	beq.n	8006b5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a96:	4b6a      	ldr	r3, [pc, #424]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	099b      	lsrs	r3, r3, #6
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aa0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8006aaa:	2300      	movs	r3, #0
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
 8006aae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	f04f 0000 	mov.w	r0, #0
 8006aba:	f04f 0100 	mov.w	r1, #0
 8006abe:	0159      	lsls	r1, r3, #5
 8006ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ac4:	0150      	lsls	r0, r2, #5
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4621      	mov	r1, r4
 8006acc:	1a51      	subs	r1, r2, r1
 8006ace:	6139      	str	r1, [r7, #16]
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	f04f 0200 	mov.w	r2, #0
 8006adc:	f04f 0300 	mov.w	r3, #0
 8006ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ae4:	4659      	mov	r1, fp
 8006ae6:	018b      	lsls	r3, r1, #6
 8006ae8:	4651      	mov	r1, sl
 8006aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006aee:	4651      	mov	r1, sl
 8006af0:	018a      	lsls	r2, r1, #6
 8006af2:	4651      	mov	r1, sl
 8006af4:	ebb2 0801 	subs.w	r8, r2, r1
 8006af8:	4659      	mov	r1, fp
 8006afa:	eb63 0901 	sbc.w	r9, r3, r1
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b12:	4690      	mov	r8, r2
 8006b14:	4699      	mov	r9, r3
 8006b16:	4623      	mov	r3, r4
 8006b18:	eb18 0303 	adds.w	r3, r8, r3
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	462b      	mov	r3, r5
 8006b20:	eb49 0303 	adc.w	r3, r9, r3
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b32:	4629      	mov	r1, r5
 8006b34:	024b      	lsls	r3, r1, #9
 8006b36:	4621      	mov	r1, r4
 8006b38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	024a      	lsls	r2, r1, #9
 8006b40:	4610      	mov	r0, r2
 8006b42:	4619      	mov	r1, r3
 8006b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b46:	2200      	movs	r2, #0
 8006b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b50:	f7fa f83a 	bl	8000bc8 <__aeabi_uldivmod>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4613      	mov	r3, r2
 8006b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b5c:	e058      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b5e:	4b38      	ldr	r3, [pc, #224]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	099b      	lsrs	r3, r3, #6
 8006b64:	2200      	movs	r2, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	4611      	mov	r1, r2
 8006b6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b6e:	623b      	str	r3, [r7, #32]
 8006b70:	2300      	movs	r3, #0
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
 8006b74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b78:	4642      	mov	r2, r8
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	f04f 0000 	mov.w	r0, #0
 8006b80:	f04f 0100 	mov.w	r1, #0
 8006b84:	0159      	lsls	r1, r3, #5
 8006b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b8a:	0150      	lsls	r0, r2, #5
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4641      	mov	r1, r8
 8006b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b96:	4649      	mov	r1, r9
 8006b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b9c:	f04f 0200 	mov.w	r2, #0
 8006ba0:	f04f 0300 	mov.w	r3, #0
 8006ba4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ba8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006bac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006bb0:	ebb2 040a 	subs.w	r4, r2, sl
 8006bb4:	eb63 050b 	sbc.w	r5, r3, fp
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	00eb      	lsls	r3, r5, #3
 8006bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bc6:	00e2      	lsls	r2, r4, #3
 8006bc8:	4614      	mov	r4, r2
 8006bca:	461d      	mov	r5, r3
 8006bcc:	4643      	mov	r3, r8
 8006bce:	18e3      	adds	r3, r4, r3
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	464b      	mov	r3, r9
 8006bd4:	eb45 0303 	adc.w	r3, r5, r3
 8006bd8:	607b      	str	r3, [r7, #4]
 8006bda:	f04f 0200 	mov.w	r2, #0
 8006bde:	f04f 0300 	mov.w	r3, #0
 8006be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006be6:	4629      	mov	r1, r5
 8006be8:	028b      	lsls	r3, r1, #10
 8006bea:	4621      	mov	r1, r4
 8006bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	028a      	lsls	r2, r1, #10
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	61fa      	str	r2, [r7, #28]
 8006c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c04:	f7f9 ffe0 	bl	8000bc8 <__aeabi_uldivmod>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	0c1b      	lsrs	r3, r3, #16
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c2a:	e002      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c2c:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3750      	adds	r7, #80	; 0x50
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c3e:	bf00      	nop
 8006c40:	40023800 	.word	0x40023800
 8006c44:	00f42400 	.word	0x00f42400
 8006c48:	007a1200 	.word	0x007a1200

08006c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c50:	4b03      	ldr	r3, [pc, #12]	; (8006c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c52:	681b      	ldr	r3, [r3, #0]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20000000 	.word	0x20000000

08006c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c68:	f7ff fff0 	bl	8006c4c <HAL_RCC_GetHCLKFreq>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	0a9b      	lsrs	r3, r3, #10
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	4903      	ldr	r1, [pc, #12]	; (8006c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c7a:	5ccb      	ldrb	r3, [r1, r3]
 8006c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	40023800 	.word	0x40023800
 8006c88:	08012454 	.word	0x08012454

08006c8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	220f      	movs	r2, #15
 8006c9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c9c:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f003 0203 	and.w	r2, r3, #3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ca8:	4b0f      	ldr	r3, [pc, #60]	; (8006ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006cc0:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	08db      	lsrs	r3, r3, #3
 8006cc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006cce:	4b07      	ldr	r3, [pc, #28]	; (8006cec <HAL_RCC_GetClockConfig+0x60>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 020f 	and.w	r2, r3, #15
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	601a      	str	r2, [r3, #0]
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	40023c00 	.word	0x40023c00

08006cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10b      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d105      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d075      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d24:	4b91      	ldr	r3, [pc, #580]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d2a:	f7fc fb8d 	bl	8003448 <HAL_GetTick>
 8006d2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d30:	e008      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d32:	f7fc fb89 	bl	8003448 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e189      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d44:	4b8a      	ldr	r3, [pc, #552]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f0      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d009      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	019a      	lsls	r2, r3, #6
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	071b      	lsls	r3, r3, #28
 8006d68:	4981      	ldr	r1, [pc, #516]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01f      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d7c:	4b7c      	ldr	r3, [pc, #496]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d82:	0f1b      	lsrs	r3, r3, #28
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	019a      	lsls	r2, r3, #6
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	061b      	lsls	r3, r3, #24
 8006d96:	431a      	orrs	r2, r3
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	071b      	lsls	r3, r3, #28
 8006d9c:	4974      	ldr	r1, [pc, #464]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006da4:	4b72      	ldr	r3, [pc, #456]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006daa:	f023 021f 	bic.w	r2, r3, #31
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	496e      	ldr	r1, [pc, #440]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00d      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	019a      	lsls	r2, r3, #6
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	061b      	lsls	r3, r3, #24
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	071b      	lsls	r3, r3, #28
 8006ddc:	4964      	ldr	r1, [pc, #400]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006de4:	4b61      	ldr	r3, [pc, #388]	; (8006f6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006de6:	2201      	movs	r2, #1
 8006de8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dea:	f7fc fb2d 	bl	8003448 <HAL_GetTick>
 8006dee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006df0:	e008      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006df2:	f7fc fb29 	bl	8003448 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e129      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e04:	4b5a      	ldr	r3, [pc, #360]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0f0      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d079      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e28:	4b52      	ldr	r3, [pc, #328]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e2e:	f7fc fb0b 	bl	8003448 <HAL_GetTick>
 8006e32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e34:	e008      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006e36:	f7fc fb07 	bl	8003448 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d901      	bls.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e107      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e48:	4b49      	ldr	r3, [pc, #292]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e54:	d0ef      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d020      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e62:	4b43      	ldr	r3, [pc, #268]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e68:	0f1b      	lsrs	r3, r3, #28
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	019a      	lsls	r2, r3, #6
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	061b      	lsls	r3, r3, #24
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	071b      	lsls	r3, r3, #28
 8006e82:	493b      	ldr	r1, [pc, #236]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006e8a:	4b39      	ldr	r3, [pc, #228]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	021b      	lsls	r3, r3, #8
 8006e9c:	4934      	ldr	r1, [pc, #208]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01e      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006eb0:	4b2f      	ldr	r3, [pc, #188]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb6:	0e1b      	lsrs	r3, r3, #24
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	019a      	lsls	r2, r3, #6
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	061b      	lsls	r3, r3, #24
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	071b      	lsls	r3, r3, #28
 8006ed0:	4927      	ldr	r1, [pc, #156]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ed8:	4b25      	ldr	r3, [pc, #148]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ede:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	4922      	ldr	r1, [pc, #136]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006eee:	4b21      	ldr	r3, [pc, #132]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ef4:	f7fc faa8 	bl	8003448 <HAL_GetTick>
 8006ef8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006efa:	e008      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006efc:	f7fc faa4 	bl	8003448 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e0a4      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f0e:	4b18      	ldr	r3, [pc, #96]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f1a:	d1ef      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0320 	and.w	r3, r3, #32
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 808b 	beq.w	8007040 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	4a0f      	ldr	r2, [pc, #60]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f38:	6413      	str	r3, [r2, #64]	; 0x40
 8006f3a:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a0b      	ldr	r2, [pc, #44]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f52:	f7fc fa79 	bl	8003448 <HAL_GetTick>
 8006f56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f58:	e010      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f5a:	f7fc fa75 	bl	8003448 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d909      	bls.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e075      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006f6c:	42470068 	.word	0x42470068
 8006f70:	40023800 	.word	0x40023800
 8006f74:	42470070 	.word	0x42470070
 8006f78:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f7c:	4b38      	ldr	r3, [pc, #224]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0e8      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f88:	4b36      	ldr	r3, [pc, #216]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d02f      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d028      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fa6:	4b2f      	ldr	r3, [pc, #188]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fb0:	4b2d      	ldr	r3, [pc, #180]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fb6:	4b2c      	ldr	r3, [pc, #176]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006fbc:	4a29      	ldr	r2, [pc, #164]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fc2:	4b28      	ldr	r3, [pc, #160]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d114      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006fce:	f7fc fa3b 	bl	8003448 <HAL_GetTick>
 8006fd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd4:	e00a      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fd6:	f7fc fa37 	bl	8003448 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e035      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fec:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0ee      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007004:	d10d      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007006:	4b17      	ldr	r3, [pc, #92]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701a:	4912      	ldr	r1, [pc, #72]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800701c:	4313      	orrs	r3, r2
 800701e:	608b      	str	r3, [r1, #8]
 8007020:	e005      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007022:	4b10      	ldr	r3, [pc, #64]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	4a0f      	ldr	r2, [pc, #60]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007028:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800702c:	6093      	str	r3, [r2, #8]
 800702e:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007030:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800703a:	490a      	ldr	r1, [pc, #40]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800703c:	4313      	orrs	r3, r2
 800703e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0310 	and.w	r3, r3, #16
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007054:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	40007000 	.word	0x40007000
 8007064:	40023800 	.word	0x40023800
 8007068:	42470e40 	.word	0x42470e40
 800706c:	424711e0 	.word	0x424711e0

08007070 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e025      	b.n	80070d0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d106      	bne.n	800709e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f81d 	bl	80070d8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2202      	movs	r2, #2
 80070a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f001 fad9 	bl	8008668 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	461a      	mov	r2, r3
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	f001 fb2e 	bl	8008722 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070fe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007100:	7dfb      	ldrb	r3, [r7, #23]
 8007102:	2b02      	cmp	r3, #2
 8007104:	d101      	bne.n	800710a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007106:	2302      	movs	r3, #2
 8007108:	e021      	b.n	800714e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d002      	beq.n	8007116 <HAL_SDRAM_SendCommand+0x2a>
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	2b05      	cmp	r3, #5
 8007114:	d118      	bne.n	8007148 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2202      	movs	r2, #2
 800711a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	4618      	mov	r0, r3
 8007128:	f001 fb64 	bl	80087f4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d104      	bne.n	800713e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2205      	movs	r2, #5
 8007138:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800713c:	e006      	b.n	800714c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007146:	e001      	b.n	800714c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d101      	bne.n	8007170 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800716c:	2302      	movs	r3, #2
 800716e:	e016      	b.n	800719e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b01      	cmp	r3, #1
 800717a:	d10f      	bne.n	800719c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f001 fb6f 	bl	800886e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e000      	b.n	800719e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e07b      	b.n	80072b0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d108      	bne.n	80071d2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071c8:	d009      	beq.n	80071de <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	61da      	str	r2, [r3, #28]
 80071d0:	e005      	b.n	80071de <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d106      	bne.n	80071fe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7fa f9a7 	bl	800154c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2202      	movs	r2, #2
 8007202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007214:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007226:	431a      	orrs	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007230:	431a      	orrs	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007262:	ea42 0103 	orr.w	r1, r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	0c1b      	lsrs	r3, r3, #16
 800727c:	f003 0104 	and.w	r1, r3, #4
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	f003 0210 	and.w	r2, r3, #16
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69da      	ldr	r2, [r3, #28]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800729e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e01a      	b.n	8007300 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fa f97a 	bl	80015dc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	4613      	mov	r3, r2
 8007316:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <HAL_SPI_Transmit+0x22>
 8007326:	2302      	movs	r3, #2
 8007328:	e126      	b.n	8007578 <HAL_SPI_Transmit+0x270>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007332:	f7fc f889 	bl	8003448 <HAL_GetTick>
 8007336:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b01      	cmp	r3, #1
 8007346:	d002      	beq.n	800734e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007348:	2302      	movs	r3, #2
 800734a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800734c:	e10b      	b.n	8007566 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <HAL_SPI_Transmit+0x52>
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d102      	bne.n	8007360 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800735e:	e102      	b.n	8007566 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2203      	movs	r2, #3
 8007364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	88fa      	ldrh	r2, [r7, #6]
 8007378:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	88fa      	ldrh	r2, [r7, #6]
 800737e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a6:	d10f      	bne.n	80073c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d2:	2b40      	cmp	r3, #64	; 0x40
 80073d4:	d007      	beq.n	80073e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ee:	d14b      	bne.n	8007488 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <HAL_SPI_Transmit+0xf6>
 80073f8:	8afb      	ldrh	r3, [r7, #22]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d13e      	bne.n	800747c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	881a      	ldrh	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	1c9a      	adds	r2, r3, #2
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007422:	e02b      	b.n	800747c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b02      	cmp	r3, #2
 8007430:	d112      	bne.n	8007458 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	881a      	ldrh	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	1c9a      	adds	r2, r3, #2
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	86da      	strh	r2, [r3, #54]	; 0x36
 8007456:	e011      	b.n	800747c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007458:	f7fb fff6 	bl	8003448 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d803      	bhi.n	8007470 <HAL_SPI_Transmit+0x168>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746e:	d102      	bne.n	8007476 <HAL_SPI_Transmit+0x16e>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d102      	bne.n	800747c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	77fb      	strb	r3, [r7, #31]
          goto error;
 800747a:	e074      	b.n	8007566 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1ce      	bne.n	8007424 <HAL_SPI_Transmit+0x11c>
 8007486:	e04c      	b.n	8007522 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <HAL_SPI_Transmit+0x18e>
 8007490:	8afb      	ldrh	r3, [r7, #22]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d140      	bne.n	8007518 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	330c      	adds	r3, #12
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80074bc:	e02c      	b.n	8007518 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d113      	bne.n	80074f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	330c      	adds	r3, #12
 80074d6:	7812      	ldrb	r2, [r2, #0]
 80074d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80074f2:	e011      	b.n	8007518 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074f4:	f7fb ffa8 	bl	8003448 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	429a      	cmp	r2, r3
 8007502:	d803      	bhi.n	800750c <HAL_SPI_Transmit+0x204>
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750a:	d102      	bne.n	8007512 <HAL_SPI_Transmit+0x20a>
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007516:	e026      	b.n	8007566 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1cd      	bne.n	80074be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 fbda 	bl	8007ce0 <SPI_EndRxTxTransaction>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007540:	2300      	movs	r3, #0
 8007542:	613b      	str	r3, [r7, #16]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	613b      	str	r3, [r7, #16]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	77fb      	strb	r3, [r7, #31]
 8007562:	e000      	b.n	8007566 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007564:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007576:	7ffb      	ldrb	r3, [r7, #31]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3720      	adds	r7, #32
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af02      	add	r7, sp, #8
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	4613      	mov	r3, r2
 800758e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800759c:	d112      	bne.n	80075c4 <HAL_SPI_Receive+0x44>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10e      	bne.n	80075c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2204      	movs	r2, #4
 80075aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80075ae:	88fa      	ldrh	r2, [r7, #6]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	4613      	mov	r3, r2
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 f8f1 	bl	80077a2 <HAL_SPI_TransmitReceive>
 80075c0:	4603      	mov	r3, r0
 80075c2:	e0ea      	b.n	800779a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <HAL_SPI_Receive+0x52>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e0e3      	b.n	800779a <HAL_SPI_Receive+0x21a>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075da:	f7fb ff35 	bl	8003448 <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d002      	beq.n	80075f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80075ec:	2302      	movs	r3, #2
 80075ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075f0:	e0ca      	b.n	8007788 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_SPI_Receive+0x7e>
 80075f8:	88fb      	ldrh	r3, [r7, #6]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d102      	bne.n	8007604 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007602:	e0c1      	b.n	8007788 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2204      	movs	r2, #4
 8007608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	88fa      	ldrh	r2, [r7, #6]
 800761c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	88fa      	ldrh	r2, [r7, #6]
 8007622:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800764a:	d10f      	bne.n	800766c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800765a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800766a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007676:	2b40      	cmp	r3, #64	; 0x40
 8007678:	d007      	beq.n	800768a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007688:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d162      	bne.n	8007758 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007692:	e02e      	b.n	80076f2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d115      	bne.n	80076ce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f103 020c 	add.w	r2, r3, #12
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	7812      	ldrb	r2, [r2, #0]
 80076b0:	b2d2      	uxtb	r2, r2
 80076b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076cc:	e011      	b.n	80076f2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ce:	f7fb febb 	bl	8003448 <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d803      	bhi.n	80076e6 <HAL_SPI_Receive+0x166>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e4:	d102      	bne.n	80076ec <HAL_SPI_Receive+0x16c>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d102      	bne.n	80076f2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076f0:	e04a      	b.n	8007788 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1cb      	bne.n	8007694 <HAL_SPI_Receive+0x114>
 80076fc:	e031      	b.n	8007762 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b01      	cmp	r3, #1
 800770a:	d113      	bne.n	8007734 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007716:	b292      	uxth	r2, r2
 8007718:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	1c9a      	adds	r2, r3, #2
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007728:	b29b      	uxth	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	b29a      	uxth	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007732:	e011      	b.n	8007758 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007734:	f7fb fe88 	bl	8003448 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d803      	bhi.n	800774c <HAL_SPI_Receive+0x1cc>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774a:	d102      	bne.n	8007752 <HAL_SPI_Receive+0x1d2>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007756:	e017      	b.n	8007788 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1cd      	bne.n	80076fe <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fa54 	bl	8007c14 <SPI_EndRxTransaction>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2220      	movs	r2, #32
 8007776:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	75fb      	strb	r3, [r7, #23]
 8007784:	e000      	b.n	8007788 <HAL_SPI_Receive+0x208>
  }

error :
 8007786:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007798:	7dfb      	ldrb	r3, [r7, #23]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b08c      	sub	sp, #48	; 0x30
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
 80077ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077b0:	2301      	movs	r3, #1
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_SPI_TransmitReceive+0x26>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e18a      	b.n	8007ade <HAL_SPI_TransmitReceive+0x33c>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077d0:	f7fb fe3a 	bl	8003448 <HAL_GetTick>
 80077d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077e6:	887b      	ldrh	r3, [r7, #2]
 80077e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d00f      	beq.n	8007812 <HAL_SPI_TransmitReceive+0x70>
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f8:	d107      	bne.n	800780a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d103      	bne.n	800780a <HAL_SPI_TransmitReceive+0x68>
 8007802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007806:	2b04      	cmp	r3, #4
 8007808:	d003      	beq.n	8007812 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800780a:	2302      	movs	r3, #2
 800780c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007810:	e15b      	b.n	8007aca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <HAL_SPI_TransmitReceive+0x82>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <HAL_SPI_TransmitReceive+0x82>
 800781e:	887b      	ldrh	r3, [r7, #2]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d103      	bne.n	800782c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800782a:	e14e      	b.n	8007aca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b04      	cmp	r3, #4
 8007836:	d003      	beq.n	8007840 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2205      	movs	r2, #5
 800783c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	887a      	ldrh	r2, [r7, #2]
 8007850:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	887a      	ldrh	r2, [r7, #2]
 8007856:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	887a      	ldrh	r2, [r7, #2]
 8007862:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	887a      	ldrh	r2, [r7, #2]
 8007868:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007880:	2b40      	cmp	r3, #64	; 0x40
 8007882:	d007      	beq.n	8007894 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007892:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800789c:	d178      	bne.n	8007990 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <HAL_SPI_TransmitReceive+0x10a>
 80078a6:	8b7b      	ldrh	r3, [r7, #26]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d166      	bne.n	800797a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b0:	881a      	ldrh	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078bc:	1c9a      	adds	r2, r3, #2
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078d0:	e053      	b.n	800797a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d11b      	bne.n	8007918 <HAL_SPI_TransmitReceive+0x176>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <HAL_SPI_TransmitReceive+0x176>
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d113      	bne.n	8007918 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	881a      	ldrh	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007900:	1c9a      	adds	r2, r3, #2
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800790a:	b29b      	uxth	r3, r3
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b01      	cmp	r3, #1
 8007924:	d119      	bne.n	800795a <HAL_SPI_TransmitReceive+0x1b8>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800792a:	b29b      	uxth	r3, r3
 800792c:	2b00      	cmp	r3, #0
 800792e:	d014      	beq.n	800795a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	b292      	uxth	r2, r2
 800793c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	1c9a      	adds	r2, r3, #2
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007956:	2301      	movs	r3, #1
 8007958:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800795a:	f7fb fd75 	bl	8003448 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007966:	429a      	cmp	r2, r3
 8007968:	d807      	bhi.n	800797a <HAL_SPI_TransmitReceive+0x1d8>
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007970:	d003      	beq.n	800797a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007978:	e0a7      	b.n	8007aca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1a6      	bne.n	80078d2 <HAL_SPI_TransmitReceive+0x130>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007988:	b29b      	uxth	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1a1      	bne.n	80078d2 <HAL_SPI_TransmitReceive+0x130>
 800798e:	e07c      	b.n	8007a8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <HAL_SPI_TransmitReceive+0x1fc>
 8007998:	8b7b      	ldrh	r3, [r7, #26]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d16b      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	7812      	ldrb	r2, [r2, #0]
 80079aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c4:	e057      	b.n	8007a76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d11c      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x26c>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d017      	beq.n	8007a0e <HAL_SPI_TransmitReceive+0x26c>
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d114      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	330c      	adds	r3, #12
 80079ee:	7812      	ldrb	r2, [r2, #0]
 80079f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d119      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x2ae>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d014      	beq.n	8007a50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a50:	f7fb fcfa 	bl	8003448 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d803      	bhi.n	8007a68 <HAL_SPI_TransmitReceive+0x2c6>
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d102      	bne.n	8007a6e <HAL_SPI_TransmitReceive+0x2cc>
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d103      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a74:	e029      	b.n	8007aca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1a2      	bne.n	80079c6 <HAL_SPI_TransmitReceive+0x224>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d19d      	bne.n	80079c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 f926 	bl	8007ce0 <SPI_EndRxTxTransaction>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d006      	beq.n	8007aa8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007aa6:	e010      	b.n	8007aca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10b      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	e000      	b.n	8007aca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007ac8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ada:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3730      	adds	r7, #48	; 0x30
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007af4:	b2db      	uxtb	r3, r3
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
	...

08007b04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	603b      	str	r3, [r7, #0]
 8007b10:	4613      	mov	r3, r2
 8007b12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b14:	f7fb fc98 	bl	8003448 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	1a9b      	subs	r3, r3, r2
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	4413      	add	r3, r2
 8007b22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b24:	f7fb fc90 	bl	8003448 <HAL_GetTick>
 8007b28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b2a:	4b39      	ldr	r3, [pc, #228]	; (8007c10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	015b      	lsls	r3, r3, #5
 8007b30:	0d1b      	lsrs	r3, r3, #20
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	fb02 f303 	mul.w	r3, r2, r3
 8007b38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b3a:	e054      	b.n	8007be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b42:	d050      	beq.n	8007be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b44:	f7fb fc80 	bl	8003448 <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d902      	bls.n	8007b5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d13d      	bne.n	8007bd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b72:	d111      	bne.n	8007b98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b7c:	d004      	beq.n	8007b88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b86:	d107      	bne.n	8007b98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba0:	d10f      	bne.n	8007bc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e017      	b.n	8007c06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	bf0c      	ite	eq
 8007bf6:	2301      	moveq	r3, #1
 8007bf8:	2300      	movne	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d19b      	bne.n	8007b3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3720      	adds	r7, #32
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000000 	.word	0x20000000

08007c14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c28:	d111      	bne.n	8007c4e <SPI_EndRxTransaction+0x3a>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c32:	d004      	beq.n	8007c3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c3c:	d107      	bne.n	8007c4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c4c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c56:	d12a      	bne.n	8007cae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c60:	d012      	beq.n	8007c88 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	2180      	movs	r1, #128	; 0x80
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f7ff ff49 	bl	8007b04 <SPI_WaitFlagStateUntilTimeout>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d02d      	beq.n	8007cd4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7c:	f043 0220 	orr.w	r2, r3, #32
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e026      	b.n	8007cd6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2101      	movs	r1, #1
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff ff36 	bl	8007b04 <SPI_WaitFlagStateUntilTimeout>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d01a      	beq.n	8007cd4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca2:	f043 0220 	orr.w	r2, r3, #32
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e013      	b.n	8007cd6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f7ff ff23 	bl	8007b04 <SPI_WaitFlagStateUntilTimeout>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d007      	beq.n	8007cd4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc8:	f043 0220 	orr.w	r2, r3, #32
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e000      	b.n	8007cd6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007cec:	4b1b      	ldr	r3, [pc, #108]	; (8007d5c <SPI_EndRxTxTransaction+0x7c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1b      	ldr	r2, [pc, #108]	; (8007d60 <SPI_EndRxTxTransaction+0x80>)
 8007cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf6:	0d5b      	lsrs	r3, r3, #21
 8007cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cfc:	fb02 f303 	mul.w	r3, r2, r3
 8007d00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d0a:	d112      	bne.n	8007d32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2200      	movs	r2, #0
 8007d14:	2180      	movs	r1, #128	; 0x80
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff fef4 	bl	8007b04 <SPI_WaitFlagStateUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d016      	beq.n	8007d50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e00f      	b.n	8007d52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d48:	2b80      	cmp	r3, #128	; 0x80
 8007d4a:	d0f2      	beq.n	8007d32 <SPI_EndRxTxTransaction+0x52>
 8007d4c:	e000      	b.n	8007d50 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d4e:	bf00      	nop
  }

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000000 	.word	0x20000000
 8007d60:	165e9f81 	.word	0x165e9f81

08007d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e041      	b.n	8007dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d106      	bne.n	8007d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7f9 fc44 	bl	8001618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4619      	mov	r1, r3
 8007da2:	4610      	mov	r0, r2
 8007da4:	f000 fa96 	bl	80082d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d001      	beq.n	8007e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e04e      	b.n	8007eba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68da      	ldr	r2, [r3, #12]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f042 0201 	orr.w	r2, r2, #1
 8007e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a23      	ldr	r2, [pc, #140]	; (8007ec8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d022      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0x80>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e46:	d01d      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0x80>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a1f      	ldr	r2, [pc, #124]	; (8007ecc <HAL_TIM_Base_Start_IT+0xc8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d018      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0x80>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a1e      	ldr	r2, [pc, #120]	; (8007ed0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d013      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0x80>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a1c      	ldr	r2, [pc, #112]	; (8007ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00e      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0x80>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a1b      	ldr	r2, [pc, #108]	; (8007ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d009      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0x80>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a19      	ldr	r2, [pc, #100]	; (8007edc <HAL_TIM_Base_Start_IT+0xd8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <HAL_TIM_Base_Start_IT+0x80>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a18      	ldr	r2, [pc, #96]	; (8007ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d111      	bne.n	8007ea8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b06      	cmp	r3, #6
 8007e94:	d010      	beq.n	8007eb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f042 0201 	orr.w	r2, r2, #1
 8007ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea6:	e007      	b.n	8007eb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0201 	orr.w	r2, r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	40000400 	.word	0x40000400
 8007ed0:	40000800 	.word	0x40000800
 8007ed4:	40000c00 	.word	0x40000c00
 8007ed8:	40010400 	.word	0x40010400
 8007edc:	40014000 	.word	0x40014000
 8007ee0:	40001800 	.word	0x40001800

08007ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d122      	bne.n	8007f40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d11b      	bne.n	8007f40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f06f 0202 	mvn.w	r2, #2
 8007f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f9b5 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 8007f2c:	e005      	b.n	8007f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f9a7 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f9b8 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0304 	and.w	r3, r3, #4
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d122      	bne.n	8007f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d11b      	bne.n	8007f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f06f 0204 	mvn.w	r2, #4
 8007f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2202      	movs	r2, #2
 8007f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f98b 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 8007f80:	e005      	b.n	8007f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f97d 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f98e 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0308 	and.w	r3, r3, #8
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d122      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d11b      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0208 	mvn.w	r2, #8
 8007fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2204      	movs	r2, #4
 8007fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f961 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 8007fd4:	e005      	b.n	8007fe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f953 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f964 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	2b10      	cmp	r3, #16
 8007ff4:	d122      	bne.n	800803c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b10      	cmp	r3, #16
 8008002:	d11b      	bne.n	800803c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f06f 0210 	mvn.w	r2, #16
 800800c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2208      	movs	r2, #8
 8008012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f937 	bl	8008296 <HAL_TIM_IC_CaptureCallback>
 8008028:	e005      	b.n	8008036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f929 	bl	8008282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f93a 	bl	80082aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b01      	cmp	r3, #1
 8008048:	d10e      	bne.n	8008068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b01      	cmp	r3, #1
 8008056:	d107      	bne.n	8008068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f06f 0201 	mvn.w	r2, #1
 8008060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7f9 f9e6 	bl	8001434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008072:	2b80      	cmp	r3, #128	; 0x80
 8008074:	d10e      	bne.n	8008094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008080:	2b80      	cmp	r3, #128	; 0x80
 8008082:	d107      	bne.n	8008094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800808c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fae0 	bl	8008654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809e:	2b40      	cmp	r3, #64	; 0x40
 80080a0:	d10e      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ac:	2b40      	cmp	r3, #64	; 0x40
 80080ae:	d107      	bne.n	80080c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f8ff 	bl	80082be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d10e      	bne.n	80080ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d107      	bne.n	80080ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0220 	mvn.w	r2, #32
 80080e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 faaa 	bl	8008640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_TIM_ConfigClockSource+0x1c>
 800810c:	2302      	movs	r3, #2
 800810e:	e0b4      	b.n	800827a <HAL_TIM_ConfigClockSource+0x186>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800812e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008148:	d03e      	beq.n	80081c8 <HAL_TIM_ConfigClockSource+0xd4>
 800814a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800814e:	f200 8087 	bhi.w	8008260 <HAL_TIM_ConfigClockSource+0x16c>
 8008152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008156:	f000 8086 	beq.w	8008266 <HAL_TIM_ConfigClockSource+0x172>
 800815a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815e:	d87f      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x16c>
 8008160:	2b70      	cmp	r3, #112	; 0x70
 8008162:	d01a      	beq.n	800819a <HAL_TIM_ConfigClockSource+0xa6>
 8008164:	2b70      	cmp	r3, #112	; 0x70
 8008166:	d87b      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x16c>
 8008168:	2b60      	cmp	r3, #96	; 0x60
 800816a:	d050      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x11a>
 800816c:	2b60      	cmp	r3, #96	; 0x60
 800816e:	d877      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x16c>
 8008170:	2b50      	cmp	r3, #80	; 0x50
 8008172:	d03c      	beq.n	80081ee <HAL_TIM_ConfigClockSource+0xfa>
 8008174:	2b50      	cmp	r3, #80	; 0x50
 8008176:	d873      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x16c>
 8008178:	2b40      	cmp	r3, #64	; 0x40
 800817a:	d058      	beq.n	800822e <HAL_TIM_ConfigClockSource+0x13a>
 800817c:	2b40      	cmp	r3, #64	; 0x40
 800817e:	d86f      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x16c>
 8008180:	2b30      	cmp	r3, #48	; 0x30
 8008182:	d064      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x15a>
 8008184:	2b30      	cmp	r3, #48	; 0x30
 8008186:	d86b      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x16c>
 8008188:	2b20      	cmp	r3, #32
 800818a:	d060      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x15a>
 800818c:	2b20      	cmp	r3, #32
 800818e:	d867      	bhi.n	8008260 <HAL_TIM_ConfigClockSource+0x16c>
 8008190:	2b00      	cmp	r3, #0
 8008192:	d05c      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x15a>
 8008194:	2b10      	cmp	r3, #16
 8008196:	d05a      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x15a>
 8008198:	e062      	b.n	8008260 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6818      	ldr	r0, [r3, #0]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	6899      	ldr	r1, [r3, #8]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f000 f9ad 	bl	8008508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	609a      	str	r2, [r3, #8]
      break;
 80081c6:	e04f      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	6899      	ldr	r1, [r3, #8]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f000 f996 	bl	8008508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081ea:	609a      	str	r2, [r3, #8]
      break;
 80081ec:	e03c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	6859      	ldr	r1, [r3, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f000 f90a 	bl	8008414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2150      	movs	r1, #80	; 0x50
 8008206:	4618      	mov	r0, r3
 8008208:	f000 f963 	bl	80084d2 <TIM_ITRx_SetConfig>
      break;
 800820c:	e02c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6859      	ldr	r1, [r3, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	461a      	mov	r2, r3
 800821c:	f000 f929 	bl	8008472 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2160      	movs	r1, #96	; 0x60
 8008226:	4618      	mov	r0, r3
 8008228:	f000 f953 	bl	80084d2 <TIM_ITRx_SetConfig>
      break;
 800822c:	e01c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6859      	ldr	r1, [r3, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	461a      	mov	r2, r3
 800823c:	f000 f8ea 	bl	8008414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2140      	movs	r1, #64	; 0x40
 8008246:	4618      	mov	r0, r3
 8008248:	f000 f943 	bl	80084d2 <TIM_ITRx_SetConfig>
      break;
 800824c:	e00c      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4619      	mov	r1, r3
 8008258:	4610      	mov	r0, r2
 800825a:	f000 f93a 	bl	80084d2 <TIM_ITRx_SetConfig>
      break;
 800825e:	e003      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	73fb      	strb	r3, [r7, #15]
      break;
 8008264:	e000      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800829e:	bf00      	nop
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a40      	ldr	r2, [pc, #256]	; (80083e8 <TIM_Base_SetConfig+0x114>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d013      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f2:	d00f      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a3d      	ldr	r2, [pc, #244]	; (80083ec <TIM_Base_SetConfig+0x118>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00b      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a3c      	ldr	r2, [pc, #240]	; (80083f0 <TIM_Base_SetConfig+0x11c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d007      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a3b      	ldr	r2, [pc, #236]	; (80083f4 <TIM_Base_SetConfig+0x120>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d003      	beq.n	8008314 <TIM_Base_SetConfig+0x40>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a3a      	ldr	r2, [pc, #232]	; (80083f8 <TIM_Base_SetConfig+0x124>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d108      	bne.n	8008326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a2f      	ldr	r2, [pc, #188]	; (80083e8 <TIM_Base_SetConfig+0x114>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d02b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008334:	d027      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a2c      	ldr	r2, [pc, #176]	; (80083ec <TIM_Base_SetConfig+0x118>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d023      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a2b      	ldr	r2, [pc, #172]	; (80083f0 <TIM_Base_SetConfig+0x11c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d01f      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a2a      	ldr	r2, [pc, #168]	; (80083f4 <TIM_Base_SetConfig+0x120>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d01b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a29      	ldr	r2, [pc, #164]	; (80083f8 <TIM_Base_SetConfig+0x124>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d017      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a28      	ldr	r2, [pc, #160]	; (80083fc <TIM_Base_SetConfig+0x128>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d013      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a27      	ldr	r2, [pc, #156]	; (8008400 <TIM_Base_SetConfig+0x12c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00f      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a26      	ldr	r2, [pc, #152]	; (8008404 <TIM_Base_SetConfig+0x130>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00b      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a25      	ldr	r2, [pc, #148]	; (8008408 <TIM_Base_SetConfig+0x134>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d007      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a24      	ldr	r2, [pc, #144]	; (800840c <TIM_Base_SetConfig+0x138>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d003      	beq.n	8008386 <TIM_Base_SetConfig+0xb2>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a23      	ldr	r2, [pc, #140]	; (8008410 <TIM_Base_SetConfig+0x13c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d108      	bne.n	8008398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800838c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	4313      	orrs	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a0a      	ldr	r2, [pc, #40]	; (80083e8 <TIM_Base_SetConfig+0x114>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_Base_SetConfig+0xf8>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a0c      	ldr	r2, [pc, #48]	; (80083f8 <TIM_Base_SetConfig+0x124>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d103      	bne.n	80083d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	615a      	str	r2, [r3, #20]
}
 80083da:	bf00      	nop
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40010000 	.word	0x40010000
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40010400 	.word	0x40010400
 80083fc:	40014000 	.word	0x40014000
 8008400:	40014400 	.word	0x40014400
 8008404:	40014800 	.word	0x40014800
 8008408:	40001800 	.word	0x40001800
 800840c:	40001c00 	.word	0x40001c00
 8008410:	40002000 	.word	0x40002000

08008414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	f023 0201 	bic.w	r2, r3, #1
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800843e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	011b      	lsls	r3, r3, #4
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	4313      	orrs	r3, r2
 8008448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f023 030a 	bic.w	r3, r3, #10
 8008450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4313      	orrs	r3, r2
 8008458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	621a      	str	r2, [r3, #32]
}
 8008466:	bf00      	nop
 8008468:	371c      	adds	r7, #28
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008472:	b480      	push	{r7}
 8008474:	b087      	sub	sp, #28
 8008476:	af00      	add	r7, sp, #0
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	f023 0210 	bic.w	r2, r3, #16
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800849c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	031b      	lsls	r3, r3, #12
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	621a      	str	r2, [r3, #32]
}
 80084c6:	bf00      	nop
 80084c8:	371c      	adds	r7, #28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	f043 0307 	orr.w	r3, r3, #7
 80084f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	609a      	str	r2, [r3, #8]
}
 80084fc:	bf00      	nop
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	021a      	lsls	r2, r3, #8
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	431a      	orrs	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4313      	orrs	r3, r2
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	4313      	orrs	r3, r2
 8008534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	609a      	str	r2, [r3, #8]
}
 800853c:	bf00      	nop
 800853e:	371c      	adds	r7, #28
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800855c:	2302      	movs	r3, #2
 800855e:	e05a      	b.n	8008616 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a21      	ldr	r2, [pc, #132]	; (8008624 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d022      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ac:	d01d      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a1d      	ldr	r2, [pc, #116]	; (8008628 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d018      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a1b      	ldr	r2, [pc, #108]	; (800862c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d013      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a1a      	ldr	r2, [pc, #104]	; (8008630 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00e      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a18      	ldr	r2, [pc, #96]	; (8008634 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d009      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a17      	ldr	r2, [pc, #92]	; (8008638 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d004      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a15      	ldr	r2, [pc, #84]	; (800863c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d10c      	bne.n	8008604 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	40010000 	.word	0x40010000
 8008628:	40000400 	.word	0x40000400
 800862c:	40000800 	.word	0x40000800
 8008630:	40000c00 	.word	0x40000c00
 8008634:	40010400 	.word	0x40010400
 8008638:	40014000 	.word	0x40014000
 800863c:	40001800 	.word	0x40001800

08008640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d123      	bne.n	80086c2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008682:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	6851      	ldr	r1, [r2, #4]
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	6892      	ldr	r2, [r2, #8]
 800868e:	4311      	orrs	r1, r2
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	68d2      	ldr	r2, [r2, #12]
 8008694:	4311      	orrs	r1, r2
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	6912      	ldr	r2, [r2, #16]
 800869a:	4311      	orrs	r1, r2
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	6952      	ldr	r2, [r2, #20]
 80086a0:	4311      	orrs	r1, r2
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	6992      	ldr	r2, [r2, #24]
 80086a6:	4311      	orrs	r1, r2
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	69d2      	ldr	r2, [r2, #28]
 80086ac:	4311      	orrs	r1, r2
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	6a12      	ldr	r2, [r2, #32]
 80086b2:	4311      	orrs	r1, r2
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086b8:	430a      	orrs	r2, r1
 80086ba:	431a      	orrs	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e028      	b.n	8008714 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	69d9      	ldr	r1, [r3, #28]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	4319      	orrs	r1, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d8:	430b      	orrs	r3, r1
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80086e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	6851      	ldr	r1, [r2, #4]
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	6892      	ldr	r2, [r2, #8]
 80086f4:	4311      	orrs	r1, r2
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	68d2      	ldr	r2, [r2, #12]
 80086fa:	4311      	orrs	r1, r2
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	6912      	ldr	r2, [r2, #16]
 8008700:	4311      	orrs	r1, r2
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	6952      	ldr	r2, [r2, #20]
 8008706:	4311      	orrs	r1, r2
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	6992      	ldr	r2, [r2, #24]
 800870c:	430a      	orrs	r2, r1
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008722:	b480      	push	{r7}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d128      	bne.n	8008786 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	1e59      	subs	r1, r3, #1
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	3b01      	subs	r3, #1
 8008748:	011b      	lsls	r3, r3, #4
 800874a:	4319      	orrs	r1, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	3b01      	subs	r3, #1
 8008752:	021b      	lsls	r3, r3, #8
 8008754:	4319      	orrs	r1, r3
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	3b01      	subs	r3, #1
 800875c:	031b      	lsls	r3, r3, #12
 800875e:	4319      	orrs	r1, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	3b01      	subs	r3, #1
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	4319      	orrs	r1, r3
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	3b01      	subs	r3, #1
 8008770:	051b      	lsls	r3, r3, #20
 8008772:	4319      	orrs	r1, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	3b01      	subs	r3, #1
 800877a:	061b      	lsls	r3, r3, #24
 800877c:	430b      	orrs	r3, r1
 800877e:	431a      	orrs	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	609a      	str	r2, [r3, #8]
 8008784:	e02f      	b.n	80087e6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800878e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	68d2      	ldr	r2, [r2, #12]
 8008796:	3a01      	subs	r2, #1
 8008798:	0311      	lsls	r1, r2, #12
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	6952      	ldr	r2, [r2, #20]
 800879e:	3a01      	subs	r2, #1
 80087a0:	0512      	lsls	r2, r2, #20
 80087a2:	430a      	orrs	r2, r1
 80087a4:	431a      	orrs	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	1e59      	subs	r1, r3, #1
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	3b01      	subs	r3, #1
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	4319      	orrs	r1, r3
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	021b      	lsls	r3, r3, #8
 80087ca:	4319      	orrs	r1, r3
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	041b      	lsls	r3, r3, #16
 80087d4:	4319      	orrs	r1, r3
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	3b01      	subs	r3, #1
 80087dc:	061b      	lsls	r3, r3, #24
 80087de:	430b      	orrs	r3, r1
 80087e0:	431a      	orrs	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	0d9b      	lsrs	r3, r3, #22
 800880a:	059b      	lsls	r3, r3, #22
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	6811      	ldr	r1, [r2, #0]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	6852      	ldr	r2, [r2, #4]
 8008814:	4311      	orrs	r1, r2
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	6892      	ldr	r2, [r2, #8]
 800881a:	3a01      	subs	r2, #1
 800881c:	0152      	lsls	r2, r2, #5
 800881e:	4311      	orrs	r1, r2
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	68d2      	ldr	r2, [r2, #12]
 8008824:	0252      	lsls	r2, r2, #9
 8008826:	430a      	orrs	r2, r1
 8008828:	431a      	orrs	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800882e:	f7fa fe0b 	bl	8003448 <HAL_GetTick>
 8008832:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008834:	e010      	b.n	8008858 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883c:	d00c      	beq.n	8008858 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d007      	beq.n	8008854 <FMC_SDRAM_SendCommand+0x60>
 8008844:	f7fa fe00 	bl	8003448 <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	429a      	cmp	r2, r3
 8008852:	d201      	bcs.n	8008858 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e006      	b.n	8008866 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	f003 0320 	and.w	r3, r3, #32
 8008860:	2b20      	cmp	r3, #32
 8008862:	d0e8      	beq.n	8008836 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008880:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	0052      	lsls	r2, r2, #1
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800889c:	b084      	sub	sp, #16
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	f107 001c 	add.w	r0, r7, #28
 80088aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d122      	bne.n	80088fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80088c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d105      	bne.n	80088ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fbee 	bl	800a0d0 <USB_CoreReset>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]
 80088f8:	e01a      	b.n	8008930 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fbe2 	bl	800a0d0 <USB_CoreReset>
 800890c:	4603      	mov	r3, r0
 800890e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008912:	2b00      	cmp	r3, #0
 8008914:	d106      	bne.n	8008924 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
 8008922:	e005      	b.n	8008930 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008928:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	2b01      	cmp	r3, #1
 8008934:	d10b      	bne.n	800894e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f043 0206 	orr.w	r2, r3, #6
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f043 0220 	orr.w	r2, r3, #32
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800895a:	b004      	add	sp, #16
 800895c:	4770      	bx	lr
	...

08008960 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	4613      	mov	r3, r2
 800896c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	2b02      	cmp	r3, #2
 8008972:	d165      	bne.n	8008a40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4a41      	ldr	r2, [pc, #260]	; (8008a7c <USB_SetTurnaroundTime+0x11c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d906      	bls.n	800898a <USB_SetTurnaroundTime+0x2a>
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4a40      	ldr	r2, [pc, #256]	; (8008a80 <USB_SetTurnaroundTime+0x120>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d202      	bcs.n	800898a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008984:	230f      	movs	r3, #15
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	e062      	b.n	8008a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4a3c      	ldr	r2, [pc, #240]	; (8008a80 <USB_SetTurnaroundTime+0x120>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d306      	bcc.n	80089a0 <USB_SetTurnaroundTime+0x40>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4a3b      	ldr	r2, [pc, #236]	; (8008a84 <USB_SetTurnaroundTime+0x124>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d202      	bcs.n	80089a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800899a:	230e      	movs	r3, #14
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	e057      	b.n	8008a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4a38      	ldr	r2, [pc, #224]	; (8008a84 <USB_SetTurnaroundTime+0x124>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d306      	bcc.n	80089b6 <USB_SetTurnaroundTime+0x56>
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4a37      	ldr	r2, [pc, #220]	; (8008a88 <USB_SetTurnaroundTime+0x128>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d202      	bcs.n	80089b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80089b0:	230d      	movs	r3, #13
 80089b2:	617b      	str	r3, [r7, #20]
 80089b4:	e04c      	b.n	8008a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	4a33      	ldr	r2, [pc, #204]	; (8008a88 <USB_SetTurnaroundTime+0x128>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d306      	bcc.n	80089cc <USB_SetTurnaroundTime+0x6c>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	4a32      	ldr	r2, [pc, #200]	; (8008a8c <USB_SetTurnaroundTime+0x12c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d802      	bhi.n	80089cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80089c6:	230c      	movs	r3, #12
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	e041      	b.n	8008a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4a2f      	ldr	r2, [pc, #188]	; (8008a8c <USB_SetTurnaroundTime+0x12c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d906      	bls.n	80089e2 <USB_SetTurnaroundTime+0x82>
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4a2e      	ldr	r2, [pc, #184]	; (8008a90 <USB_SetTurnaroundTime+0x130>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d802      	bhi.n	80089e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80089dc:	230b      	movs	r3, #11
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	e036      	b.n	8008a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	4a2a      	ldr	r2, [pc, #168]	; (8008a90 <USB_SetTurnaroundTime+0x130>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d906      	bls.n	80089f8 <USB_SetTurnaroundTime+0x98>
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	4a29      	ldr	r2, [pc, #164]	; (8008a94 <USB_SetTurnaroundTime+0x134>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d802      	bhi.n	80089f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80089f2:	230a      	movs	r3, #10
 80089f4:	617b      	str	r3, [r7, #20]
 80089f6:	e02b      	b.n	8008a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	4a26      	ldr	r2, [pc, #152]	; (8008a94 <USB_SetTurnaroundTime+0x134>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d906      	bls.n	8008a0e <USB_SetTurnaroundTime+0xae>
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	4a25      	ldr	r2, [pc, #148]	; (8008a98 <USB_SetTurnaroundTime+0x138>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d202      	bcs.n	8008a0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008a08:	2309      	movs	r3, #9
 8008a0a:	617b      	str	r3, [r7, #20]
 8008a0c:	e020      	b.n	8008a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	4a21      	ldr	r2, [pc, #132]	; (8008a98 <USB_SetTurnaroundTime+0x138>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d306      	bcc.n	8008a24 <USB_SetTurnaroundTime+0xc4>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	4a20      	ldr	r2, [pc, #128]	; (8008a9c <USB_SetTurnaroundTime+0x13c>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d802      	bhi.n	8008a24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008a1e:	2308      	movs	r3, #8
 8008a20:	617b      	str	r3, [r7, #20]
 8008a22:	e015      	b.n	8008a50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	4a1d      	ldr	r2, [pc, #116]	; (8008a9c <USB_SetTurnaroundTime+0x13c>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d906      	bls.n	8008a3a <USB_SetTurnaroundTime+0xda>
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	4a1c      	ldr	r2, [pc, #112]	; (8008aa0 <USB_SetTurnaroundTime+0x140>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d202      	bcs.n	8008a3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a34:	2307      	movs	r3, #7
 8008a36:	617b      	str	r3, [r7, #20]
 8008a38:	e00a      	b.n	8008a50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a3a:	2306      	movs	r3, #6
 8008a3c:	617b      	str	r3, [r7, #20]
 8008a3e:	e007      	b.n	8008a50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d102      	bne.n	8008a4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a46:	2309      	movs	r3, #9
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	e001      	b.n	8008a50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a4c:	2309      	movs	r3, #9
 8008a4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	029b      	lsls	r3, r3, #10
 8008a64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	00d8acbf 	.word	0x00d8acbf
 8008a80:	00e4e1c0 	.word	0x00e4e1c0
 8008a84:	00f42400 	.word	0x00f42400
 8008a88:	01067380 	.word	0x01067380
 8008a8c:	011a499f 	.word	0x011a499f
 8008a90:	01312cff 	.word	0x01312cff
 8008a94:	014ca43f 	.word	0x014ca43f
 8008a98:	016e3600 	.word	0x016e3600
 8008a9c:	01a6ab1f 	.word	0x01a6ab1f
 8008aa0:	01e84800 	.word	0x01e84800

08008aa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f043 0201 	orr.w	r2, r3, #1
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f023 0201 	bic.w	r2, r3, #1
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d115      	bne.n	8008b36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b16:	2001      	movs	r0, #1
 8008b18:	f7fa fca2 	bl	8003460 <HAL_Delay>
      ms++;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 fa45 	bl	8009fb2 <USB_GetMode>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d01e      	beq.n	8008b6c <USB_SetCurrentMode+0x84>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b31      	cmp	r3, #49	; 0x31
 8008b32:	d9f0      	bls.n	8008b16 <USB_SetCurrentMode+0x2e>
 8008b34:	e01a      	b.n	8008b6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b36:	78fb      	ldrb	r3, [r7, #3]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d115      	bne.n	8008b68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b48:	2001      	movs	r0, #1
 8008b4a:	f7fa fc89 	bl	8003460 <HAL_Delay>
      ms++;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3301      	adds	r3, #1
 8008b52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f001 fa2c 	bl	8009fb2 <USB_GetMode>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <USB_SetCurrentMode+0x84>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b31      	cmp	r3, #49	; 0x31
 8008b64:	d9f0      	bls.n	8008b48 <USB_SetCurrentMode+0x60>
 8008b66:	e001      	b.n	8008b6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e005      	b.n	8008b78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b32      	cmp	r3, #50	; 0x32
 8008b70:	d101      	bne.n	8008b76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b80:	b084      	sub	sp, #16
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b086      	sub	sp, #24
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	613b      	str	r3, [r7, #16]
 8008b9e:	e009      	b.n	8008bb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	3340      	adds	r3, #64	; 0x40
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	2200      	movs	r2, #0
 8008bac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	613b      	str	r3, [r7, #16]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	2b0e      	cmp	r3, #14
 8008bb8:	d9f2      	bls.n	8008ba0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d11c      	bne.n	8008bfa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bce:	f043 0302 	orr.w	r3, r3, #2
 8008bd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	639a      	str	r2, [r3, #56]	; 0x38
 8008bf8:	e00b      	b.n	8008c12 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c18:	461a      	mov	r2, r3
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c24:	4619      	mov	r1, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	680b      	ldr	r3, [r1, #0]
 8008c30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d10c      	bne.n	8008c52 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d104      	bne.n	8008c48 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c3e:	2100      	movs	r1, #0
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f965 	bl	8008f10 <USB_SetDevSpeed>
 8008c46:	e008      	b.n	8008c5a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c48:	2101      	movs	r1, #1
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f960 	bl	8008f10 <USB_SetDevSpeed>
 8008c50:	e003      	b.n	8008c5a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c52:	2103      	movs	r1, #3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f95b 	bl	8008f10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c5a:	2110      	movs	r1, #16
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f8f3 	bl	8008e48 <USB_FlushTxFifo>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d001      	beq.n	8008c6c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f91f 	bl	8008eb0 <USB_FlushRxFifo>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c82:	461a      	mov	r2, r3
 8008c84:	2300      	movs	r3, #0
 8008c86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8e:	461a      	mov	r2, r3
 8008c90:	2300      	movs	r3, #0
 8008c92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	613b      	str	r3, [r7, #16]
 8008ca4:	e043      	b.n	8008d2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cbc:	d118      	bne.n	8008cf0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	e013      	b.n	8008d02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	e008      	b.n	8008d02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	2300      	movs	r3, #0
 8008d00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	015a      	lsls	r2, r3, #5
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4413      	add	r3, r2
 8008d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0e:	461a      	mov	r2, r3
 8008d10:	2300      	movs	r3, #0
 8008d12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d20:	461a      	mov	r2, r3
 8008d22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	613b      	str	r3, [r7, #16]
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d3b7      	bcc.n	8008ca6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d36:	2300      	movs	r3, #0
 8008d38:	613b      	str	r3, [r7, #16]
 8008d3a:	e043      	b.n	8008dc4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d52:	d118      	bne.n	8008d86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10a      	bne.n	8008d70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d66:	461a      	mov	r2, r3
 8008d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	e013      	b.n	8008d98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	e008      	b.n	8008d98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d92:	461a      	mov	r2, r3
 8008d94:	2300      	movs	r3, #0
 8008d96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da4:	461a      	mov	r2, r3
 8008da6:	2300      	movs	r3, #0
 8008da8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db6:	461a      	mov	r2, r3
 8008db8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008dbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d3b7      	bcc.n	8008d3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008dec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d105      	bne.n	8008e00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	f043 0210 	orr.w	r2, r3, #16
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699a      	ldr	r2, [r3, #24]
 8008e04:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <USB_DevInit+0x2c4>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d005      	beq.n	8008e1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	f043 0208 	orr.w	r2, r3, #8
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d107      	bne.n	8008e34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e2c:	f043 0304 	orr.w	r3, r3, #4
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e40:	b004      	add	sp, #16
 8008e42:	4770      	bx	lr
 8008e44:	803c3800 	.word	0x803c3800

08008e48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4a13      	ldr	r2, [pc, #76]	; (8008eac <USB_FlushTxFifo+0x64>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d901      	bls.n	8008e68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e01b      	b.n	8008ea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	daf2      	bge.n	8008e56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	019b      	lsls	r3, r3, #6
 8008e78:	f043 0220 	orr.w	r2, r3, #32
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3301      	adds	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4a08      	ldr	r2, [pc, #32]	; (8008eac <USB_FlushTxFifo+0x64>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d901      	bls.n	8008e92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e006      	b.n	8008ea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	f003 0320 	and.w	r3, r3, #32
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	d0f0      	beq.n	8008e80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	00030d40 	.word	0x00030d40

08008eb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	4a11      	ldr	r2, [pc, #68]	; (8008f0c <USB_FlushRxFifo+0x5c>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d901      	bls.n	8008ece <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e018      	b.n	8008f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	daf2      	bge.n	8008ebc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2210      	movs	r2, #16
 8008ede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <USB_FlushRxFifo+0x5c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d901      	bls.n	8008ef2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e006      	b.n	8008f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	f003 0310 	and.w	r3, r3, #16
 8008efa:	2b10      	cmp	r3, #16
 8008efc:	d0f0      	beq.n	8008ee0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	00030d40 	.word	0x00030d40

08008f10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	78fb      	ldrb	r3, [r7, #3]
 8008f2a:	68f9      	ldr	r1, [r7, #12]
 8008f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f30:	4313      	orrs	r3, r2
 8008f32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b087      	sub	sp, #28
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f003 0306 	and.w	r3, r3, #6
 8008f5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d102      	bne.n	8008f68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f62:	2300      	movs	r3, #0
 8008f64:	75fb      	strb	r3, [r7, #23]
 8008f66:	e00a      	b.n	8008f7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d002      	beq.n	8008f74 <USB_GetDevSpeed+0x32>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b06      	cmp	r3, #6
 8008f72:	d102      	bne.n	8008f7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008f74:	2302      	movs	r3, #2
 8008f76:	75fb      	strb	r3, [r7, #23]
 8008f78:	e001      	b.n	8008f7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f7a:	230f      	movs	r3, #15
 8008f7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	785b      	ldrb	r3, [r3, #1]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d13a      	bne.n	800901e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fae:	69da      	ldr	r2, [r3, #28]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	f003 030f 	and.w	r3, r3, #15
 8008fb8:	2101      	movs	r1, #1
 8008fba:	fa01 f303 	lsl.w	r3, r1, r3
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	68f9      	ldr	r1, [r7, #12]
 8008fc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d155      	bne.n	800908c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	791b      	ldrb	r3, [r3, #4]
 8008ffa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ffc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	059b      	lsls	r3, r3, #22
 8009002:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009004:	4313      	orrs	r3, r2
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	440a      	add	r2, r1
 800900e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	e036      	b.n	800908c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009024:	69da      	ldr	r2, [r3, #28]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	f003 030f 	and.w	r3, r3, #15
 800902e:	2101      	movs	r1, #1
 8009030:	fa01 f303 	lsl.w	r3, r1, r3
 8009034:	041b      	lsls	r3, r3, #16
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800903c:	4313      	orrs	r3, r2
 800903e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d11a      	bne.n	800908c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4413      	add	r3, r2
 800905e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	791b      	ldrb	r3, [r3, #4]
 8009070:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009072:	430b      	orrs	r3, r1
 8009074:	4313      	orrs	r3, r2
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	0151      	lsls	r1, r2, #5
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	440a      	add	r2, r1
 800907e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800908a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
	...

0800909c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	785b      	ldrb	r3, [r3, #1]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d161      	bne.n	800917c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ce:	d11f      	bne.n	8009110 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	0151      	lsls	r1, r2, #5
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	440a      	add	r2, r1
 80090e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	0151      	lsls	r1, r2, #5
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	440a      	add	r2, r1
 8009106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800910a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800910e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	2101      	movs	r1, #1
 8009122:	fa01 f303 	lsl.w	r3, r1, r3
 8009126:	b29b      	uxth	r3, r3
 8009128:	43db      	mvns	r3, r3
 800912a:	68f9      	ldr	r1, [r7, #12]
 800912c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009130:	4013      	ands	r3, r2
 8009132:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913a:	69da      	ldr	r2, [r3, #28]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	f003 030f 	and.w	r3, r3, #15
 8009144:	2101      	movs	r1, #1
 8009146:	fa01 f303 	lsl.w	r3, r1, r3
 800914a:	b29b      	uxth	r3, r3
 800914c:	43db      	mvns	r3, r3
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009154:	4013      	ands	r3, r2
 8009156:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	0159      	lsls	r1, r3, #5
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	440b      	add	r3, r1
 800916e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009172:	4619      	mov	r1, r3
 8009174:	4b35      	ldr	r3, [pc, #212]	; (800924c <USB_DeactivateEndpoint+0x1b0>)
 8009176:	4013      	ands	r3, r2
 8009178:	600b      	str	r3, [r1, #0]
 800917a:	e060      	b.n	800923e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800918e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009192:	d11f      	bne.n	80091d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	0151      	lsls	r1, r2, #5
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	440a      	add	r2, r1
 80091aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	0151      	lsls	r1, r2, #5
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	440a      	add	r2, r1
 80091ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	f003 030f 	and.w	r3, r3, #15
 80091e4:	2101      	movs	r1, #1
 80091e6:	fa01 f303 	lsl.w	r3, r1, r3
 80091ea:	041b      	lsls	r3, r3, #16
 80091ec:	43db      	mvns	r3, r3
 80091ee:	68f9      	ldr	r1, [r7, #12]
 80091f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091f4:	4013      	ands	r3, r2
 80091f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fe:	69da      	ldr	r2, [r3, #28]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	f003 030f 	and.w	r3, r3, #15
 8009208:	2101      	movs	r1, #1
 800920a:	fa01 f303 	lsl.w	r3, r1, r3
 800920e:	041b      	lsls	r3, r3, #16
 8009210:	43db      	mvns	r3, r3
 8009212:	68f9      	ldr	r1, [r7, #12]
 8009214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009218:	4013      	ands	r3, r2
 800921a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	0159      	lsls	r1, r3, #5
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	440b      	add	r3, r1
 8009232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009236:	4619      	mov	r1, r3
 8009238:	4b05      	ldr	r3, [pc, #20]	; (8009250 <USB_DeactivateEndpoint+0x1b4>)
 800923a:	4013      	ands	r3, r2
 800923c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	ec337800 	.word	0xec337800
 8009250:	eff37800 	.word	0xeff37800

08009254 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08a      	sub	sp, #40	; 0x28
 8009258:	af02      	add	r7, sp, #8
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	4613      	mov	r3, r2
 8009260:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	785b      	ldrb	r3, [r3, #1]
 8009270:	2b01      	cmp	r3, #1
 8009272:	f040 815c 	bne.w	800952e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d132      	bne.n	80092e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	015a      	lsls	r2, r3, #5
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	4413      	add	r3, r2
 8009286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	0151      	lsls	r1, r2, #5
 8009290:	69fa      	ldr	r2, [r7, #28]
 8009292:	440a      	add	r2, r1
 8009294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009298:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800929c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	69fa      	ldr	r2, [r7, #28]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	0151      	lsls	r1, r2, #5
 80092d4:	69fa      	ldr	r2, [r7, #28]
 80092d6:	440a      	add	r2, r1
 80092d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092dc:	0cdb      	lsrs	r3, r3, #19
 80092de:	04db      	lsls	r3, r3, #19
 80092e0:	6113      	str	r3, [r2, #16]
 80092e2:	e074      	b.n	80093ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	0151      	lsls	r1, r2, #5
 80092f6:	69fa      	ldr	r2, [r7, #28]
 80092f8:	440a      	add	r2, r1
 80092fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092fe:	0cdb      	lsrs	r3, r3, #19
 8009300:	04db      	lsls	r3, r3, #19
 8009302:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	69fa      	ldr	r2, [r7, #28]
 8009318:	440a      	add	r2, r1
 800931a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800931e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009322:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009334:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	6999      	ldr	r1, [r3, #24]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	440b      	add	r3, r1
 8009340:	1e59      	subs	r1, r3, #1
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	fbb1 f3f3 	udiv	r3, r1, r3
 800934a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800934c:	4b9d      	ldr	r3, [pc, #628]	; (80095c4 <USB_EPStartXfer+0x370>)
 800934e:	400b      	ands	r3, r1
 8009350:	69b9      	ldr	r1, [r7, #24]
 8009352:	0148      	lsls	r0, r1, #5
 8009354:	69f9      	ldr	r1, [r7, #28]
 8009356:	4401      	add	r1, r0
 8009358:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800935c:	4313      	orrs	r3, r2
 800935e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	4413      	add	r3, r2
 8009368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800936c:	691a      	ldr	r2, [r3, #16]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009376:	69b9      	ldr	r1, [r7, #24]
 8009378:	0148      	lsls	r0, r1, #5
 800937a:	69f9      	ldr	r1, [r7, #28]
 800937c:	4401      	add	r1, r0
 800937e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009382:	4313      	orrs	r3, r2
 8009384:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	791b      	ldrb	r3, [r3, #4]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d11f      	bne.n	80093ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	0151      	lsls	r1, r2, #5
 80093a0:	69fa      	ldr	r2, [r7, #28]
 80093a2:	440a      	add	r2, r1
 80093a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80093ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	0151      	lsls	r1, r2, #5
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	440a      	add	r2, r1
 80093c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d14b      	bne.n	800946c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d009      	beq.n	80093f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e8:	461a      	mov	r2, r3
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	791b      	ldrb	r3, [r3, #4]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d128      	bne.n	800944a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009404:	2b00      	cmp	r3, #0
 8009406:	d110      	bne.n	800942a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	69ba      	ldr	r2, [r7, #24]
 8009418:	0151      	lsls	r1, r2, #5
 800941a:	69fa      	ldr	r2, [r7, #28]
 800941c:	440a      	add	r2, r1
 800941e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009422:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	e00f      	b.n	800944a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	0151      	lsls	r1, r2, #5
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	440a      	add	r2, r1
 8009440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009448:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	69ba      	ldr	r2, [r7, #24]
 800945a:	0151      	lsls	r1, r2, #5
 800945c:	69fa      	ldr	r2, [r7, #28]
 800945e:	440a      	add	r2, r1
 8009460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009464:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009468:	6013      	str	r3, [r2, #0]
 800946a:	e133      	b.n	80096d4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	0151      	lsls	r1, r2, #5
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	440a      	add	r2, r1
 8009482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800948a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	791b      	ldrb	r3, [r3, #4]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d015      	beq.n	80094c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 811b 	beq.w	80096d4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	f003 030f 	and.w	r3, r3, #15
 80094ae:	2101      	movs	r1, #1
 80094b0:	fa01 f303 	lsl.w	r3, r1, r3
 80094b4:	69f9      	ldr	r1, [r7, #28]
 80094b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ba:	4313      	orrs	r3, r2
 80094bc:	634b      	str	r3, [r1, #52]	; 0x34
 80094be:	e109      	b.n	80096d4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d110      	bne.n	80094f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	69ba      	ldr	r2, [r7, #24]
 80094e0:	0151      	lsls	r1, r2, #5
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	440a      	add	r2, r1
 80094e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	e00f      	b.n	8009512 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	0151      	lsls	r1, r2, #5
 8009504:	69fa      	ldr	r2, [r7, #28]
 8009506:	440a      	add	r2, r1
 8009508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800950c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009510:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	6919      	ldr	r1, [r3, #16]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	781a      	ldrb	r2, [r3, #0]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	b298      	uxth	r0, r3
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	4603      	mov	r3, r0
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 fade 	bl	8009ae8 <USB_WritePacket>
 800952c:	e0d2      	b.n	80096d4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	0151      	lsls	r1, r2, #5
 8009540:	69fa      	ldr	r2, [r7, #28]
 8009542:	440a      	add	r2, r1
 8009544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009548:	0cdb      	lsrs	r3, r3, #19
 800954a:	04db      	lsls	r3, r3, #19
 800954c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	0151      	lsls	r1, r2, #5
 8009560:	69fa      	ldr	r2, [r7, #28]
 8009562:	440a      	add	r2, r1
 8009564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009568:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800956c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009570:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d126      	bne.n	80095c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	4413      	add	r3, r2
 8009582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009586:	691a      	ldr	r2, [r3, #16]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009590:	69b9      	ldr	r1, [r7, #24]
 8009592:	0148      	lsls	r0, r1, #5
 8009594:	69f9      	ldr	r1, [r7, #28]
 8009596:	4401      	add	r1, r0
 8009598:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800959c:	4313      	orrs	r3, r2
 800959e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	69ba      	ldr	r2, [r7, #24]
 80095b0:	0151      	lsls	r1, r2, #5
 80095b2:	69fa      	ldr	r2, [r7, #28]
 80095b4:	440a      	add	r2, r1
 80095b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095be:	6113      	str	r3, [r2, #16]
 80095c0:	e03a      	b.n	8009638 <USB_EPStartXfer+0x3e4>
 80095c2:	bf00      	nop
 80095c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	699a      	ldr	r2, [r3, #24]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	4413      	add	r3, r2
 80095d2:	1e5a      	subs	r2, r3, #1
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	8afa      	ldrh	r2, [r7, #22]
 80095e4:	fb03 f202 	mul.w	r2, r3, r2
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f8:	691a      	ldr	r2, [r3, #16]
 80095fa:	8afb      	ldrh	r3, [r7, #22]
 80095fc:	04d9      	lsls	r1, r3, #19
 80095fe:	4b38      	ldr	r3, [pc, #224]	; (80096e0 <USB_EPStartXfer+0x48c>)
 8009600:	400b      	ands	r3, r1
 8009602:	69b9      	ldr	r1, [r7, #24]
 8009604:	0148      	lsls	r0, r1, #5
 8009606:	69f9      	ldr	r1, [r7, #28]
 8009608:	4401      	add	r1, r0
 800960a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800960e:	4313      	orrs	r3, r2
 8009610:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	015a      	lsls	r2, r3, #5
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	4413      	add	r3, r2
 800961a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961e:	691a      	ldr	r2, [r3, #16]
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009628:	69b9      	ldr	r1, [r7, #24]
 800962a:	0148      	lsls	r0, r1, #5
 800962c:	69f9      	ldr	r1, [r7, #28]
 800962e:	4401      	add	r1, r0
 8009630:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009634:	4313      	orrs	r3, r2
 8009636:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d10d      	bne.n	800965a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d009      	beq.n	800965a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6919      	ldr	r1, [r3, #16]
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009656:	460a      	mov	r2, r1
 8009658:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	791b      	ldrb	r3, [r3, #4]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d128      	bne.n	80096b4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800966e:	2b00      	cmp	r3, #0
 8009670:	d110      	bne.n	8009694 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800968c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	e00f      	b.n	80096b4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	4413      	add	r3, r2
 800969c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	0151      	lsls	r1, r2, #5
 80096a6:	69fa      	ldr	r2, [r7, #28]
 80096a8:	440a      	add	r2, r1
 80096aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	0151      	lsls	r1, r2, #5
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	440a      	add	r2, r1
 80096ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3720      	adds	r7, #32
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	1ff80000 	.word	0x1ff80000

080096e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	4613      	mov	r3, r2
 80096f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	785b      	ldrb	r3, [r3, #1]
 8009700:	2b01      	cmp	r3, #1
 8009702:	f040 80ce 	bne.w	80098a2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d132      	bne.n	8009774 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	0151      	lsls	r1, r2, #5
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	440a      	add	r2, r1
 8009724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009728:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800972c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009730:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800974c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	440a      	add	r2, r1
 8009768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800976c:	0cdb      	lsrs	r3, r3, #19
 800976e:	04db      	lsls	r3, r3, #19
 8009770:	6113      	str	r3, [r2, #16]
 8009772:	e04e      	b.n	8009812 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	4413      	add	r3, r2
 800977c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	0151      	lsls	r1, r2, #5
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	440a      	add	r2, r1
 800978a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800978e:	0cdb      	lsrs	r3, r3, #19
 8009790:	04db      	lsls	r3, r3, #19
 8009792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	699a      	ldr	r2, [r3, #24]
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d903      	bls.n	80097cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	68da      	ldr	r2, [r3, #12]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	015a      	lsls	r2, r3, #5
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	4413      	add	r3, r2
 80097d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	0151      	lsls	r1, r2, #5
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	440a      	add	r2, r1
 80097e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f8:	691a      	ldr	r2, [r3, #16]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009802:	6939      	ldr	r1, [r7, #16]
 8009804:	0148      	lsls	r0, r1, #5
 8009806:	6979      	ldr	r1, [r7, #20]
 8009808:	4401      	add	r1, r0
 800980a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800980e:	4313      	orrs	r3, r2
 8009810:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d11e      	bne.n	8009856 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d009      	beq.n	8009834 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982c:	461a      	mov	r2, r3
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	0151      	lsls	r1, r2, #5
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	440a      	add	r2, r1
 800984a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800984e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	e097      	b.n	8009986 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	4413      	add	r3, r2
 800985e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	0151      	lsls	r1, r2, #5
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	440a      	add	r2, r1
 800986c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009870:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009874:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 8083 	beq.w	8009986 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	f003 030f 	and.w	r3, r3, #15
 8009890:	2101      	movs	r1, #1
 8009892:	fa01 f303 	lsl.w	r3, r1, r3
 8009896:	6979      	ldr	r1, [r7, #20]
 8009898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800989c:	4313      	orrs	r3, r2
 800989e:	634b      	str	r3, [r1, #52]	; 0x34
 80098a0:	e071      	b.n	8009986 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	0151      	lsls	r1, r2, #5
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	440a      	add	r2, r1
 80098b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098bc:	0cdb      	lsrs	r3, r3, #19
 80098be:	04db      	lsls	r3, r3, #19
 80098c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	0151      	lsls	r1, r2, #5
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	440a      	add	r2, r1
 80098d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	68da      	ldr	r2, [r3, #12]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	68da      	ldr	r2, [r3, #12]
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	0151      	lsls	r1, r2, #5
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	440a      	add	r2, r1
 8009914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800991c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992a:	691a      	ldr	r2, [r3, #16]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009934:	6939      	ldr	r1, [r7, #16]
 8009936:	0148      	lsls	r0, r1, #5
 8009938:	6979      	ldr	r1, [r7, #20]
 800993a:	4401      	add	r1, r0
 800993c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009940:	4313      	orrs	r3, r2
 8009942:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009944:	79fb      	ldrb	r3, [r7, #7]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d10d      	bne.n	8009966 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d009      	beq.n	8009966 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	6919      	ldr	r1, [r3, #16]
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009962:	460a      	mov	r2, r1
 8009964:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	0151      	lsls	r1, r2, #5
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	440a      	add	r2, r1
 800997c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009980:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009984:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	371c      	adds	r7, #28
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	785b      	ldrb	r3, [r3, #1]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d14a      	bne.n	8009a48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099ca:	f040 8086 	bne.w	8009ada <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	7812      	ldrb	r2, [r2, #0]
 80099e2:	0151      	lsls	r1, r2, #5
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	440a      	add	r2, r1
 80099e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	0151      	lsls	r1, r2, #5
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	440a      	add	r2, r1
 8009a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d902      	bls.n	8009a2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	75fb      	strb	r3, [r7, #23]
          break;
 8009a2a:	e056      	b.n	8009ada <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a44:	d0e7      	beq.n	8009a16 <USB_EPStopXfer+0x82>
 8009a46:	e048      	b.n	8009ada <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a60:	d13b      	bne.n	8009ada <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	7812      	ldrb	r2, [r2, #0]
 8009a76:	0151      	lsls	r1, r2, #5
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	440a      	add	r2, r1
 8009a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	7812      	ldrb	r2, [r2, #0]
 8009a9a:	0151      	lsls	r1, r2, #5
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	440a      	add	r2, r1
 8009aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009aa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3301      	adds	r3, #1
 8009aae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d902      	bls.n	8009ac0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	75fb      	strb	r3, [r7, #23]
          break;
 8009abe:	e00c      	b.n	8009ada <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ad8:	d0e7      	beq.n	8009aaa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	371c      	adds	r7, #28
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b089      	sub	sp, #36	; 0x24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	4611      	mov	r1, r2
 8009af4:	461a      	mov	r2, r3
 8009af6:	460b      	mov	r3, r1
 8009af8:	71fb      	strb	r3, [r7, #7]
 8009afa:	4613      	mov	r3, r2
 8009afc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009b06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d123      	bne.n	8009b56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b0e:	88bb      	ldrh	r3, [r7, #4]
 8009b10:	3303      	adds	r3, #3
 8009b12:	089b      	lsrs	r3, r3, #2
 8009b14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b16:	2300      	movs	r3, #0
 8009b18:	61bb      	str	r3, [r7, #24]
 8009b1a:	e018      	b.n	8009b4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	031a      	lsls	r2, r3, #12
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b28:	461a      	mov	r2, r3
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	3301      	adds	r3, #1
 8009b34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	3301      	adds	r3, #1
 8009b46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	61bb      	str	r3, [r7, #24]
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d3e2      	bcc.n	8009b1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3724      	adds	r7, #36	; 0x24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b08b      	sub	sp, #44	; 0x2c
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b7a:	88fb      	ldrh	r3, [r7, #6]
 8009b7c:	089b      	lsrs	r3, r3, #2
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009b82:	88fb      	ldrh	r3, [r7, #6]
 8009b84:	f003 0303 	and.w	r3, r3, #3
 8009b88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	623b      	str	r3, [r7, #32]
 8009b8e:	e014      	b.n	8009bba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	3301      	adds	r3, #1
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	623b      	str	r3, [r7, #32]
 8009bba:	6a3a      	ldr	r2, [r7, #32]
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d3e6      	bcc.n	8009b90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009bc2:	8bfb      	ldrh	r3, [r7, #30]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d01e      	beq.n	8009c06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f107 0310 	add.w	r3, r7, #16
 8009bd8:	6812      	ldr	r2, [r2, #0]
 8009bda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	00db      	lsls	r3, r3, #3
 8009be4:	fa22 f303 	lsr.w	r3, r2, r3
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	701a      	strb	r2, [r3, #0]
      i++;
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	623b      	str	r3, [r7, #32]
      pDest++;
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009bfa:	8bfb      	ldrh	r3, [r7, #30]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c00:	8bfb      	ldrh	r3, [r7, #30]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1ea      	bne.n	8009bdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	372c      	adds	r7, #44	; 0x2c
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	785b      	ldrb	r3, [r3, #1]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d12c      	bne.n	8009c8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	db12      	blt.n	8009c68 <USB_EPSetStall+0x54>
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00f      	beq.n	8009c68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	0151      	lsls	r1, r2, #5
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	440a      	add	r2, r1
 8009c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	0151      	lsls	r1, r2, #5
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	440a      	add	r2, r1
 8009c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c86:	6013      	str	r3, [r2, #0]
 8009c88:	e02b      	b.n	8009ce2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	db12      	blt.n	8009cc2 <USB_EPSetStall+0xae>
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00f      	beq.n	8009cc2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	0151      	lsls	r1, r2, #5
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	440a      	add	r2, r1
 8009cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009cc0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	0151      	lsls	r1, r2, #5
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	440a      	add	r2, r1
 8009cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ce0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	785b      	ldrb	r3, [r3, #1]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d128      	bne.n	8009d5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	0151      	lsls	r1, r2, #5
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	440a      	add	r2, r1
 8009d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	791b      	ldrb	r3, [r3, #4]
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d003      	beq.n	8009d3c <USB_EPClearStall+0x4c>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	791b      	ldrb	r3, [r3, #4]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d138      	bne.n	8009dae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	0151      	lsls	r1, r2, #5
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	440a      	add	r2, r1
 8009d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	e027      	b.n	8009dae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	0151      	lsls	r1, r2, #5
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	440a      	add	r2, r1
 8009d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	791b      	ldrb	r3, [r3, #4]
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d003      	beq.n	8009d8e <USB_EPClearStall+0x9e>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	791b      	ldrb	r3, [r3, #4]
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d10f      	bne.n	8009dae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	0151      	lsls	r1, r2, #5
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	440a      	add	r2, r1
 8009da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009dde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	011b      	lsls	r3, r3, #4
 8009dec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009df0:	68f9      	ldr	r1, [r7, #12]
 8009df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009df6:	4313      	orrs	r3, r2
 8009df8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e22:	f023 0303 	bic.w	r3, r3, #3
 8009e26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e36:	f023 0302 	bic.w	r3, r3, #2
 8009e3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b085      	sub	sp, #20
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e64:	f023 0303 	bic.w	r3, r3, #3
 8009e68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e78:	f043 0302 	orr.w	r3, r3, #2
 8009e7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b085      	sub	sp, #20
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	0c1b      	lsrs	r3, r3, #16
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b085      	sub	sp, #20
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	4013      	ands	r3, r2
 8009f08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	b29b      	uxth	r3, r3
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b085      	sub	sp, #20
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	460b      	mov	r3, r1
 8009f24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	4013      	ands	r3, r2
 8009f46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f48:	68bb      	ldr	r3, [r7, #8]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b087      	sub	sp, #28
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	fa22 f303 	lsr.w	r3, r2, r3
 8009f86:	01db      	lsls	r3, r3, #7
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	015a      	lsls	r2, r3, #5
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	4413      	add	r3, r2
 8009f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	f003 0301 	and.w	r3, r3, #1
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b085      	sub	sp, #20
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fe8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009fec:	f023 0307 	bic.w	r3, r3, #7
 8009ff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	460b      	mov	r3, r1
 800a01e:	607a      	str	r2, [r7, #4]
 800a020:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	333c      	adds	r3, #60	; 0x3c
 800a02a:	3304      	adds	r3, #4
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	4a26      	ldr	r2, [pc, #152]	; (800a0cc <USB_EP0_OutStart+0xb8>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d90a      	bls.n	800a04e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a048:	d101      	bne.n	800a04e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	e037      	b.n	800a0be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a054:	461a      	mov	r2, r3
 800a056:	2300      	movs	r3, #0
 800a058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a06c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a07c:	f043 0318 	orr.w	r3, r3, #24
 800a080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a090:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a094:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a096:	7afb      	ldrb	r3, [r7, #11]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d10f      	bne.n	800a0bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a0ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	4f54300a 	.word	0x4f54300a

0800a0d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	4a13      	ldr	r2, [pc, #76]	; (800a134 <USB_CoreReset+0x64>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d901      	bls.n	800a0ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e01b      	b.n	800a126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	daf2      	bge.n	800a0dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	f043 0201 	orr.w	r2, r3, #1
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3301      	adds	r3, #1
 800a10a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4a09      	ldr	r2, [pc, #36]	; (800a134 <USB_CoreReset+0x64>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d901      	bls.n	800a118 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e006      	b.n	800a126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b01      	cmp	r3, #1
 800a122:	d0f0      	beq.n	800a106 <USB_CoreReset+0x36>

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	00030d40 	.word	0x00030d40

0800a138 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a144:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a148:	f005 fa26 	bl	800f598 <USBD_static_malloc>
 800a14c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d109      	bne.n	800a168 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	32b0      	adds	r2, #176	; 0xb0
 800a15e:	2100      	movs	r1, #0
 800a160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a164:	2302      	movs	r3, #2
 800a166:	e0d4      	b.n	800a312 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a168:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a16c:	2100      	movs	r1, #0
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f005 ffe1 	bl	8010136 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	32b0      	adds	r2, #176	; 0xb0
 800a17e:	68f9      	ldr	r1, [r7, #12]
 800a180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	32b0      	adds	r2, #176	; 0xb0
 800a18e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	7c1b      	ldrb	r3, [r3, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d138      	bne.n	800a212 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a1a0:	4b5e      	ldr	r3, [pc, #376]	; (800a31c <USBD_CDC_Init+0x1e4>)
 800a1a2:	7819      	ldrb	r1, [r3, #0]
 800a1a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f005 f8d1 	bl	800f352 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a1b0:	4b5a      	ldr	r3, [pc, #360]	; (800a31c <USBD_CDC_Init+0x1e4>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	f003 020f 	and.w	r2, r3, #15
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	440b      	add	r3, r1
 800a1c4:	3324      	adds	r3, #36	; 0x24
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a1ca:	4b55      	ldr	r3, [pc, #340]	; (800a320 <USBD_CDC_Init+0x1e8>)
 800a1cc:	7819      	ldrb	r1, [r3, #0]
 800a1ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f005 f8bc 	bl	800f352 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a1da:	4b51      	ldr	r3, [pc, #324]	; (800a320 <USBD_CDC_Init+0x1e8>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	f003 020f 	and.w	r2, r3, #15
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	440b      	add	r3, r1
 800a1ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a1f6:	4b4b      	ldr	r3, [pc, #300]	; (800a324 <USBD_CDC_Init+0x1ec>)
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	f003 020f 	and.w	r2, r3, #15
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4613      	mov	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	3326      	adds	r3, #38	; 0x26
 800a20c:	2210      	movs	r2, #16
 800a20e:	801a      	strh	r2, [r3, #0]
 800a210:	e035      	b.n	800a27e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a212:	4b42      	ldr	r3, [pc, #264]	; (800a31c <USBD_CDC_Init+0x1e4>)
 800a214:	7819      	ldrb	r1, [r3, #0]
 800a216:	2340      	movs	r3, #64	; 0x40
 800a218:	2202      	movs	r2, #2
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f005 f899 	bl	800f352 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a220:	4b3e      	ldr	r3, [pc, #248]	; (800a31c <USBD_CDC_Init+0x1e4>)
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	f003 020f 	and.w	r2, r3, #15
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	4613      	mov	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	440b      	add	r3, r1
 800a234:	3324      	adds	r3, #36	; 0x24
 800a236:	2201      	movs	r2, #1
 800a238:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a23a:	4b39      	ldr	r3, [pc, #228]	; (800a320 <USBD_CDC_Init+0x1e8>)
 800a23c:	7819      	ldrb	r1, [r3, #0]
 800a23e:	2340      	movs	r3, #64	; 0x40
 800a240:	2202      	movs	r2, #2
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f005 f885 	bl	800f352 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a248:	4b35      	ldr	r3, [pc, #212]	; (800a320 <USBD_CDC_Init+0x1e8>)
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	f003 020f 	and.w	r2, r3, #15
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	4613      	mov	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	440b      	add	r3, r1
 800a25c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a260:	2201      	movs	r2, #1
 800a262:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a264:	4b2f      	ldr	r3, [pc, #188]	; (800a324 <USBD_CDC_Init+0x1ec>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	f003 020f 	and.w	r2, r3, #15
 800a26c:	6879      	ldr	r1, [r7, #4]
 800a26e:	4613      	mov	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	440b      	add	r3, r1
 800a278:	3326      	adds	r3, #38	; 0x26
 800a27a:	2210      	movs	r2, #16
 800a27c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a27e:	4b29      	ldr	r3, [pc, #164]	; (800a324 <USBD_CDC_Init+0x1ec>)
 800a280:	7819      	ldrb	r1, [r3, #0]
 800a282:	2308      	movs	r3, #8
 800a284:	2203      	movs	r2, #3
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f005 f863 	bl	800f352 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a28c:	4b25      	ldr	r3, [pc, #148]	; (800a324 <USBD_CDC_Init+0x1ec>)
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	f003 020f 	and.w	r2, r3, #15
 800a294:	6879      	ldr	r1, [r7, #4]
 800a296:	4613      	mov	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	440b      	add	r3, r1
 800a2a0:	3324      	adds	r3, #36	; 0x24
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	33b0      	adds	r3, #176	; 0xb0
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	e018      	b.n	800a312 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	7c1b      	ldrb	r3, [r3, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10a      	bne.n	800a2fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2e8:	4b0d      	ldr	r3, [pc, #52]	; (800a320 <USBD_CDC_Init+0x1e8>)
 800a2ea:	7819      	ldrb	r1, [r3, #0]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f005 f91a 	bl	800f530 <USBD_LL_PrepareReceive>
 800a2fc:	e008      	b.n	800a310 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2fe:	4b08      	ldr	r3, [pc, #32]	; (800a320 <USBD_CDC_Init+0x1e8>)
 800a300:	7819      	ldrb	r1, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a308:	2340      	movs	r3, #64	; 0x40
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f005 f910 	bl	800f530 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	2000010f 	.word	0x2000010f
 800a320:	20000110 	.word	0x20000110
 800a324:	20000111 	.word	0x20000111

0800a328 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a334:	4b3a      	ldr	r3, [pc, #232]	; (800a420 <USBD_CDC_DeInit+0xf8>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f005 f82f 	bl	800f39e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a340:	4b37      	ldr	r3, [pc, #220]	; (800a420 <USBD_CDC_DeInit+0xf8>)
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	f003 020f 	and.w	r2, r3, #15
 800a348:	6879      	ldr	r1, [r7, #4]
 800a34a:	4613      	mov	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	440b      	add	r3, r1
 800a354:	3324      	adds	r3, #36	; 0x24
 800a356:	2200      	movs	r2, #0
 800a358:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a35a:	4b32      	ldr	r3, [pc, #200]	; (800a424 <USBD_CDC_DeInit+0xfc>)
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f005 f81c 	bl	800f39e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a366:	4b2f      	ldr	r3, [pc, #188]	; (800a424 <USBD_CDC_DeInit+0xfc>)
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	f003 020f 	and.w	r2, r3, #15
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	4613      	mov	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	440b      	add	r3, r1
 800a37a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a37e:	2200      	movs	r2, #0
 800a380:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a382:	4b29      	ldr	r3, [pc, #164]	; (800a428 <USBD_CDC_DeInit+0x100>)
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f005 f808 	bl	800f39e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a38e:	4b26      	ldr	r3, [pc, #152]	; (800a428 <USBD_CDC_DeInit+0x100>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	f003 020f 	and.w	r2, r3, #15
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	4613      	mov	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	440b      	add	r3, r1
 800a3a2:	3324      	adds	r3, #36	; 0x24
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a3a8:	4b1f      	ldr	r3, [pc, #124]	; (800a428 <USBD_CDC_DeInit+0x100>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	f003 020f 	and.w	r2, r3, #15
 800a3b0:	6879      	ldr	r1, [r7, #4]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	440b      	add	r3, r1
 800a3bc:	3326      	adds	r3, #38	; 0x26
 800a3be:	2200      	movs	r2, #0
 800a3c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	32b0      	adds	r2, #176	; 0xb0
 800a3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d01f      	beq.n	800a414 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	33b0      	adds	r3, #176	; 0xb0
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	32b0      	adds	r2, #176	; 0xb0
 800a3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f005 f8dc 	bl	800f5b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	32b0      	adds	r2, #176	; 0xb0
 800a406:	2100      	movs	r1, #0
 800a408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	2000010f 	.word	0x2000010f
 800a424:	20000110 	.word	0x20000110
 800a428:	20000111 	.word	0x20000111

0800a42c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b086      	sub	sp, #24
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	32b0      	adds	r2, #176	; 0xb0
 800a440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a444:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a44a:	2300      	movs	r3, #0
 800a44c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a458:	2303      	movs	r3, #3
 800a45a:	e0bf      	b.n	800a5dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a464:	2b00      	cmp	r3, #0
 800a466:	d050      	beq.n	800a50a <USBD_CDC_Setup+0xde>
 800a468:	2b20      	cmp	r3, #32
 800a46a:	f040 80af 	bne.w	800a5cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	88db      	ldrh	r3, [r3, #6]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d03a      	beq.n	800a4ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	b25b      	sxtb	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	da1b      	bge.n	800a4b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	33b0      	adds	r3, #176	; 0xb0
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a496:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	88d2      	ldrh	r2, [r2, #6]
 800a49c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	88db      	ldrh	r3, [r3, #6]
 800a4a2:	2b07      	cmp	r3, #7
 800a4a4:	bf28      	it	cs
 800a4a6:	2307      	movcs	r3, #7
 800a4a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	89fa      	ldrh	r2, [r7, #14]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 fd89 	bl	800bfc8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a4b6:	e090      	b.n	800a5da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	785a      	ldrb	r2, [r3, #1]
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	88db      	ldrh	r3, [r3, #6]
 800a4c6:	2b3f      	cmp	r3, #63	; 0x3f
 800a4c8:	d803      	bhi.n	800a4d2 <USBD_CDC_Setup+0xa6>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	88db      	ldrh	r3, [r3, #6]
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	e000      	b.n	800a4d4 <USBD_CDC_Setup+0xa8>
 800a4d2:	2240      	movs	r2, #64	; 0x40
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a4da:	6939      	ldr	r1, [r7, #16]
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f001 fd9b 	bl	800c020 <USBD_CtlPrepareRx>
      break;
 800a4ea:	e076      	b.n	800a5da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	33b0      	adds	r3, #176	; 0xb0
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	7850      	ldrb	r0, [r2, #1]
 800a502:	2200      	movs	r2, #0
 800a504:	6839      	ldr	r1, [r7, #0]
 800a506:	4798      	blx	r3
      break;
 800a508:	e067      	b.n	800a5da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	785b      	ldrb	r3, [r3, #1]
 800a50e:	2b0b      	cmp	r3, #11
 800a510:	d851      	bhi.n	800a5b6 <USBD_CDC_Setup+0x18a>
 800a512:	a201      	add	r2, pc, #4	; (adr r2, 800a518 <USBD_CDC_Setup+0xec>)
 800a514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a518:	0800a549 	.word	0x0800a549
 800a51c:	0800a5c5 	.word	0x0800a5c5
 800a520:	0800a5b7 	.word	0x0800a5b7
 800a524:	0800a5b7 	.word	0x0800a5b7
 800a528:	0800a5b7 	.word	0x0800a5b7
 800a52c:	0800a5b7 	.word	0x0800a5b7
 800a530:	0800a5b7 	.word	0x0800a5b7
 800a534:	0800a5b7 	.word	0x0800a5b7
 800a538:	0800a5b7 	.word	0x0800a5b7
 800a53c:	0800a5b7 	.word	0x0800a5b7
 800a540:	0800a573 	.word	0x0800a573
 800a544:	0800a59d 	.word	0x0800a59d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b03      	cmp	r3, #3
 800a552:	d107      	bne.n	800a564 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a554:	f107 030a 	add.w	r3, r7, #10
 800a558:	2202      	movs	r2, #2
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 fd33 	bl	800bfc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a562:	e032      	b.n	800a5ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f001 fcbd 	bl	800bee6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a56c:	2303      	movs	r3, #3
 800a56e:	75fb      	strb	r3, [r7, #23]
          break;
 800a570:	e02b      	b.n	800a5ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d107      	bne.n	800a58e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a57e:	f107 030d 	add.w	r3, r7, #13
 800a582:	2201      	movs	r2, #1
 800a584:	4619      	mov	r1, r3
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f001 fd1e 	bl	800bfc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a58c:	e01d      	b.n	800a5ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f001 fca8 	bl	800bee6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a596:	2303      	movs	r3, #3
 800a598:	75fb      	strb	r3, [r7, #23]
          break;
 800a59a:	e016      	b.n	800a5ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d00f      	beq.n	800a5c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f001 fc9b 	bl	800bee6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a5b4:	e008      	b.n	800a5c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f001 fc94 	bl	800bee6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a5c2:	e002      	b.n	800a5ca <USBD_CDC_Setup+0x19e>
          break;
 800a5c4:	bf00      	nop
 800a5c6:	e008      	b.n	800a5da <USBD_CDC_Setup+0x1ae>
          break;
 800a5c8:	bf00      	nop
      }
      break;
 800a5ca:	e006      	b.n	800a5da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f001 fc89 	bl	800bee6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	32b0      	adds	r2, #176	; 0xb0
 800a602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e065      	b.n	800a6da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	32b0      	adds	r2, #176	; 0xb0
 800a618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a61c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a61e:	78fb      	ldrb	r3, [r7, #3]
 800a620:	f003 020f 	and.w	r2, r3, #15
 800a624:	6879      	ldr	r1, [r7, #4]
 800a626:	4613      	mov	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	440b      	add	r3, r1
 800a630:	3318      	adds	r3, #24
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d02f      	beq.n	800a698 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	f003 020f 	and.w	r2, r3, #15
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	4613      	mov	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	440b      	add	r3, r1
 800a64a:	3318      	adds	r3, #24
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	f003 010f 	and.w	r1, r3, #15
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	460b      	mov	r3, r1
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	440b      	add	r3, r1
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4403      	add	r3, r0
 800a660:	3348      	adds	r3, #72	; 0x48
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	fbb2 f1f3 	udiv	r1, r2, r3
 800a668:	fb01 f303 	mul.w	r3, r1, r3
 800a66c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d112      	bne.n	800a698 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a672:	78fb      	ldrb	r3, [r7, #3]
 800a674:	f003 020f 	and.w	r2, r3, #15
 800a678:	6879      	ldr	r1, [r7, #4]
 800a67a:	4613      	mov	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4413      	add	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	440b      	add	r3, r1
 800a684:	3318      	adds	r3, #24
 800a686:	2200      	movs	r2, #0
 800a688:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a68a:	78f9      	ldrb	r1, [r7, #3]
 800a68c:	2300      	movs	r3, #0
 800a68e:	2200      	movs	r2, #0
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f004 ff2c 	bl	800f4ee <USBD_LL_Transmit>
 800a696:	e01f      	b.n	800a6d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	33b0      	adds	r3, #176	; 0xb0
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d010      	beq.n	800a6d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	33b0      	adds	r3, #176	; 0xb0
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a6d4:	78fa      	ldrb	r2, [r7, #3]
 800a6d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	32b0      	adds	r2, #176	; 0xb0
 800a6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	32b0      	adds	r2, #176	; 0xb0
 800a708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d101      	bne.n	800a714 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a710:	2303      	movs	r3, #3
 800a712:	e01a      	b.n	800a74a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f004 ff2a 	bl	800f572 <USBD_LL_GetRxDataSize>
 800a71e:	4602      	mov	r2, r0
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	33b0      	adds	r3, #176	; 0xb0
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a744:	4611      	mov	r1, r2
 800a746:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	32b0      	adds	r2, #176	; 0xb0
 800a764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a768:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a770:	2303      	movs	r3, #3
 800a772:	e025      	b.n	800a7c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	33b0      	adds	r3, #176	; 0xb0
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d01a      	beq.n	800a7be <USBD_CDC_EP0_RxReady+0x6c>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a78e:	2bff      	cmp	r3, #255	; 0xff
 800a790:	d015      	beq.n	800a7be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	33b0      	adds	r3, #176	; 0xb0
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a7aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a7b2:	b292      	uxth	r2, r2
 800a7b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	22ff      	movs	r2, #255	; 0xff
 800a7ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7d0:	2182      	movs	r1, #130	; 0x82
 800a7d2:	4818      	ldr	r0, [pc, #96]	; (800a834 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7d4:	f000 fd4f 	bl	800b276 <USBD_GetEpDesc>
 800a7d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7da:	2101      	movs	r1, #1
 800a7dc:	4815      	ldr	r0, [pc, #84]	; (800a834 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7de:	f000 fd4a 	bl	800b276 <USBD_GetEpDesc>
 800a7e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7e4:	2181      	movs	r1, #129	; 0x81
 800a7e6:	4813      	ldr	r0, [pc, #76]	; (800a834 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a7e8:	f000 fd45 	bl	800b276 <USBD_GetEpDesc>
 800a7ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	2210      	movs	r2, #16
 800a7f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d006      	beq.n	800a80e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	2200      	movs	r2, #0
 800a804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a808:	711a      	strb	r2, [r3, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d006      	beq.n	800a822 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a81c:	711a      	strb	r2, [r3, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2243      	movs	r2, #67	; 0x43
 800a826:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a828:	4b02      	ldr	r3, [pc, #8]	; (800a834 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	200000cc 	.word	0x200000cc

0800a838 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a840:	2182      	movs	r1, #130	; 0x82
 800a842:	4818      	ldr	r0, [pc, #96]	; (800a8a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a844:	f000 fd17 	bl	800b276 <USBD_GetEpDesc>
 800a848:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a84a:	2101      	movs	r1, #1
 800a84c:	4815      	ldr	r0, [pc, #84]	; (800a8a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a84e:	f000 fd12 	bl	800b276 <USBD_GetEpDesc>
 800a852:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a854:	2181      	movs	r1, #129	; 0x81
 800a856:	4813      	ldr	r0, [pc, #76]	; (800a8a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a858:	f000 fd0d 	bl	800b276 <USBD_GetEpDesc>
 800a85c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d002      	beq.n	800a86a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	2210      	movs	r2, #16
 800a868:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d006      	beq.n	800a87e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	2200      	movs	r2, #0
 800a874:	711a      	strb	r2, [r3, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f042 0202 	orr.w	r2, r2, #2
 800a87c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d006      	beq.n	800a892 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	711a      	strb	r2, [r3, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f042 0202 	orr.w	r2, r2, #2
 800a890:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2243      	movs	r2, #67	; 0x43
 800a896:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a898:	4b02      	ldr	r3, [pc, #8]	; (800a8a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3718      	adds	r7, #24
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	200000cc 	.word	0x200000cc

0800a8a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a8b0:	2182      	movs	r1, #130	; 0x82
 800a8b2:	4818      	ldr	r0, [pc, #96]	; (800a914 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a8b4:	f000 fcdf 	bl	800b276 <USBD_GetEpDesc>
 800a8b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	4815      	ldr	r0, [pc, #84]	; (800a914 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a8be:	f000 fcda 	bl	800b276 <USBD_GetEpDesc>
 800a8c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a8c4:	2181      	movs	r1, #129	; 0x81
 800a8c6:	4813      	ldr	r0, [pc, #76]	; (800a914 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a8c8:	f000 fcd5 	bl	800b276 <USBD_GetEpDesc>
 800a8cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	2210      	movs	r2, #16
 800a8d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d006      	beq.n	800a8ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8e8:	711a      	strb	r2, [r3, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8fc:	711a      	strb	r2, [r3, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2243      	movs	r2, #67	; 0x43
 800a906:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a908:	4b02      	ldr	r3, [pc, #8]	; (800a914 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3718      	adds	r7, #24
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	200000cc 	.word	0x200000cc

0800a918 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	220a      	movs	r2, #10
 800a924:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a926:	4b03      	ldr	r3, [pc, #12]	; (800a934 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	20000088 	.word	0x20000088

0800a938 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a948:	2303      	movs	r3, #3
 800a94a:	e009      	b.n	800a960 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	33b0      	adds	r3, #176	; 0xb0
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	32b0      	adds	r2, #176	; 0xb0
 800a982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a986:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a98e:	2303      	movs	r3, #3
 800a990:	e008      	b.n	800a9a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	371c      	adds	r7, #28
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	32b0      	adds	r2, #176	; 0xb0
 800a9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d101      	bne.n	800a9d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e004      	b.n	800a9de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3714      	adds	r7, #20
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
	...

0800a9ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	32b0      	adds	r2, #176	; 0xb0
 800a9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aa04:	2301      	movs	r3, #1
 800aa06:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	32b0      	adds	r2, #176	; 0xb0
 800aa12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e025      	b.n	800aa6a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d11f      	bne.n	800aa68 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800aa30:	4b10      	ldr	r3, [pc, #64]	; (800aa74 <USBD_CDC_TransmitPacket+0x88>)
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	f003 020f 	and.w	r2, r3, #15
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	4613      	mov	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4403      	add	r3, r0
 800aa4a:	3318      	adds	r3, #24
 800aa4c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800aa4e:	4b09      	ldr	r3, [pc, #36]	; (800aa74 <USBD_CDC_TransmitPacket+0x88>)
 800aa50:	7819      	ldrb	r1, [r3, #0]
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f004 fd45 	bl	800f4ee <USBD_LL_Transmit>

    ret = USBD_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	2000010f 	.word	0x2000010f

0800aa78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	32b0      	adds	r2, #176	; 0xb0
 800aa8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	32b0      	adds	r2, #176	; 0xb0
 800aa9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e018      	b.n	800aad8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	7c1b      	ldrb	r3, [r3, #16]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10a      	bne.n	800aac4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aaae:	4b0c      	ldr	r3, [pc, #48]	; (800aae0 <USBD_CDC_ReceivePacket+0x68>)
 800aab0:	7819      	ldrb	r1, [r3, #0]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f004 fd37 	bl	800f530 <USBD_LL_PrepareReceive>
 800aac2:	e008      	b.n	800aad6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aac4:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <USBD_CDC_ReceivePacket+0x68>)
 800aac6:	7819      	ldrb	r1, [r3, #0]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aace:	2340      	movs	r3, #64	; 0x40
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f004 fd2d 	bl	800f530 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20000110 	.word	0x20000110

0800aae4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d101      	bne.n	800aafc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e01f      	b.n	800ab3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	79fa      	ldrb	r2, [r7, #7]
 800ab2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f004 fba7 	bl	800f284 <USBD_LL_Init>
 800ab36:	4603      	mov	r3, r0
 800ab38:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e025      	b.n	800aba8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	32ae      	adds	r2, #174	; 0xae
 800ab6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00f      	beq.n	800ab98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	32ae      	adds	r2, #174	; 0xae
 800ab82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab88:	f107 020e 	add.w	r2, r7, #14
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
 800ab90:	4602      	mov	r2, r0
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f004 fbaf 	bl	800f31c <USBD_LL_Start>
 800abbe:	4603      	mov	r3, r0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abd0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	460b      	mov	r3, r1
 800abe8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d009      	beq.n	800ac0c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	78fa      	ldrb	r2, [r7, #3]
 800ac02:	4611      	mov	r1, r2
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	4798      	blx	r3
 800ac08:	4603      	mov	r3, r0
 800ac0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b084      	sub	sp, #16
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	78fa      	ldrb	r2, [r7, #3]
 800ac30:	4611      	mov	r1, r2
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	4798      	blx	r3
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f001 f908 	bl	800be72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ac70:	461a      	mov	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac7e:	f003 031f 	and.w	r3, r3, #31
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d01a      	beq.n	800acbc <USBD_LL_SetupStage+0x72>
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d822      	bhi.n	800acd0 <USBD_LL_SetupStage+0x86>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d002      	beq.n	800ac94 <USBD_LL_SetupStage+0x4a>
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d00a      	beq.n	800aca8 <USBD_LL_SetupStage+0x5e>
 800ac92:	e01d      	b.n	800acd0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fb5f 	bl	800b360 <USBD_StdDevReq>
 800aca2:	4603      	mov	r3, r0
 800aca4:	73fb      	strb	r3, [r7, #15]
      break;
 800aca6:	e020      	b.n	800acea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acae:	4619      	mov	r1, r3
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fbc7 	bl	800b444 <USBD_StdItfReq>
 800acb6:	4603      	mov	r3, r0
 800acb8:	73fb      	strb	r3, [r7, #15]
      break;
 800acba:	e016      	b.n	800acea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acc2:	4619      	mov	r1, r3
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 fc29 	bl	800b51c <USBD_StdEPReq>
 800acca:	4603      	mov	r3, r0
 800accc:	73fb      	strb	r3, [r7, #15]
      break;
 800acce:	e00c      	b.n	800acea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800acd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f004 fb7c 	bl	800f3dc <USBD_LL_StallEP>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]
      break;
 800ace8:	bf00      	nop
  }

  return ret;
 800acea:	7bfb      	ldrb	r3, [r7, #15]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	460b      	mov	r3, r1
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ad06:	7afb      	ldrb	r3, [r7, #11]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d16e      	bne.n	800adea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ad12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	f040 8098 	bne.w	800ae50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	689a      	ldr	r2, [r3, #8]
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d913      	bls.n	800ad54 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	689a      	ldr	r2, [r3, #8]
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	1ad2      	subs	r2, r2, r3
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	68da      	ldr	r2, [r3, #12]
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	4293      	cmp	r3, r2
 800ad44:	bf28      	it	cs
 800ad46:	4613      	movcs	r3, r2
 800ad48:	461a      	mov	r2, r3
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f001 f984 	bl	800c05a <USBD_CtlContinueRx>
 800ad52:	e07d      	b.n	800ae50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ad5a:	f003 031f 	and.w	r3, r3, #31
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d014      	beq.n	800ad8c <USBD_LL_DataOutStage+0x98>
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d81d      	bhi.n	800ada2 <USBD_LL_DataOutStage+0xae>
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <USBD_LL_DataOutStage+0x7c>
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d003      	beq.n	800ad76 <USBD_LL_DataOutStage+0x82>
 800ad6e:	e018      	b.n	800ada2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	75bb      	strb	r3, [r7, #22]
            break;
 800ad74:	e018      	b.n	800ada8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	4619      	mov	r1, r3
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 fa5e 	bl	800b242 <USBD_CoreFindIF>
 800ad86:	4603      	mov	r3, r0
 800ad88:	75bb      	strb	r3, [r7, #22]
            break;
 800ad8a:	e00d      	b.n	800ada8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	4619      	mov	r1, r3
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 fa60 	bl	800b25c <USBD_CoreFindEP>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	75bb      	strb	r3, [r7, #22]
            break;
 800ada0:	e002      	b.n	800ada8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ada2:	2300      	movs	r3, #0
 800ada4:	75bb      	strb	r3, [r7, #22]
            break;
 800ada6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ada8:	7dbb      	ldrb	r3, [r7, #22]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d119      	bne.n	800ade2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d113      	bne.n	800ade2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800adba:	7dba      	ldrb	r2, [r7, #22]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	32ae      	adds	r2, #174	; 0xae
 800adc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00b      	beq.n	800ade2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800adca:	7dba      	ldrb	r2, [r7, #22]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800add2:	7dba      	ldrb	r2, [r7, #22]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	32ae      	adds	r2, #174	; 0xae
 800add8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f001 f94a 	bl	800c07c <USBD_CtlSendStatus>
 800ade8:	e032      	b.n	800ae50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800adea:	7afb      	ldrb	r3, [r7, #11]
 800adec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	4619      	mov	r1, r3
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 fa31 	bl	800b25c <USBD_CoreFindEP>
 800adfa:	4603      	mov	r3, r0
 800adfc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adfe:	7dbb      	ldrb	r3, [r7, #22]
 800ae00:	2bff      	cmp	r3, #255	; 0xff
 800ae02:	d025      	beq.n	800ae50 <USBD_LL_DataOutStage+0x15c>
 800ae04:	7dbb      	ldrb	r3, [r7, #22]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d122      	bne.n	800ae50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d117      	bne.n	800ae46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ae16:	7dba      	ldrb	r2, [r7, #22]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	32ae      	adds	r2, #174	; 0xae
 800ae1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00f      	beq.n	800ae46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ae26:	7dba      	ldrb	r2, [r7, #22]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ae2e:	7dba      	ldrb	r2, [r7, #22]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	32ae      	adds	r2, #174	; 0xae
 800ae34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	7afa      	ldrb	r2, [r7, #11]
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	4798      	blx	r3
 800ae42:	4603      	mov	r3, r0
 800ae44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d001      	beq.n	800ae50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
 800ae4e:	e000      	b.n	800ae52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3718      	adds	r7, #24
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b086      	sub	sp, #24
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	60f8      	str	r0, [r7, #12]
 800ae62:	460b      	mov	r3, r1
 800ae64:	607a      	str	r2, [r7, #4]
 800ae66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ae68:	7afb      	ldrb	r3, [r7, #11]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d16f      	bne.n	800af4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	3314      	adds	r3, #20
 800ae72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d15a      	bne.n	800af34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	689a      	ldr	r2, [r3, #8]
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d914      	bls.n	800aeb4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	689a      	ldr	r2, [r3, #8]
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	1ad2      	subs	r2, r2, r3
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f001 f8ac 	bl	800bffe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aea6:	2300      	movs	r3, #0
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2100      	movs	r1, #0
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f004 fb3f 	bl	800f530 <USBD_LL_PrepareReceive>
 800aeb2:	e03f      	b.n	800af34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	68da      	ldr	r2, [r3, #12]
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d11c      	bne.n	800aefa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	685a      	ldr	r2, [r3, #4]
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d316      	bcc.n	800aefa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d20f      	bcs.n	800aefa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aeda:	2200      	movs	r2, #0
 800aedc:	2100      	movs	r1, #0
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f001 f88d 	bl	800bffe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aeec:	2300      	movs	r3, #0
 800aeee:	2200      	movs	r2, #0
 800aef0:	2100      	movs	r1, #0
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f004 fb1c 	bl	800f530 <USBD_LL_PrepareReceive>
 800aef8:	e01c      	b.n	800af34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b03      	cmp	r3, #3
 800af04:	d10f      	bne.n	800af26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d009      	beq.n	800af26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	68f8      	ldr	r0, [r7, #12]
 800af24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800af26:	2180      	movs	r1, #128	; 0x80
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f004 fa57 	bl	800f3dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f001 f8b7 	bl	800c0a2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d03a      	beq.n	800afb4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f7ff fe42 	bl	800abc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800af4c:	e032      	b.n	800afb4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800af4e:	7afb      	ldrb	r3, [r7, #11]
 800af50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af54:	b2db      	uxtb	r3, r3
 800af56:	4619      	mov	r1, r3
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f000 f97f 	bl	800b25c <USBD_CoreFindEP>
 800af5e:	4603      	mov	r3, r0
 800af60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	2bff      	cmp	r3, #255	; 0xff
 800af66:	d025      	beq.n	800afb4 <USBD_LL_DataInStage+0x15a>
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d122      	bne.n	800afb4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b03      	cmp	r3, #3
 800af78:	d11c      	bne.n	800afb4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800af7a:	7dfa      	ldrb	r2, [r7, #23]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	32ae      	adds	r2, #174	; 0xae
 800af80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af84:	695b      	ldr	r3, [r3, #20]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d014      	beq.n	800afb4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800af8a:	7dfa      	ldrb	r2, [r7, #23]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800af92:	7dfa      	ldrb	r2, [r7, #23]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	32ae      	adds	r2, #174	; 0xae
 800af98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	7afa      	ldrb	r2, [r7, #11]
 800afa0:	4611      	mov	r1, r2
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	4798      	blx	r3
 800afa6:	4603      	mov	r3, r0
 800afa8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800afaa:	7dbb      	ldrb	r3, [r7, #22]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800afb0:	7dbb      	ldrb	r3, [r7, #22]
 800afb2:	e000      	b.n	800afb6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d014      	beq.n	800b024 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00e      	beq.n	800b024 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	6852      	ldr	r2, [r2, #4]
 800b012:	b2d2      	uxtb	r2, r2
 800b014:	4611      	mov	r1, r2
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	4798      	blx	r3
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b020:	2303      	movs	r3, #3
 800b022:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b024:	2340      	movs	r3, #64	; 0x40
 800b026:	2200      	movs	r2, #0
 800b028:	2100      	movs	r1, #0
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f004 f991 	bl	800f352 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2240      	movs	r2, #64	; 0x40
 800b03c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b040:	2340      	movs	r3, #64	; 0x40
 800b042:	2200      	movs	r2, #0
 800b044:	2180      	movs	r1, #128	; 0x80
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f004 f983 	bl	800f352 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2240      	movs	r2, #64	; 0x40
 800b056:	621a      	str	r2, [r3, #32]

  return ret;
 800b058:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	460b      	mov	r3, r1
 800b06c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	78fa      	ldrb	r2, [r7, #3]
 800b072:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b082:	b480      	push	{r7}
 800b084:	b083      	sub	sp, #12
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b090:	b2da      	uxtb	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2204      	movs	r2, #4
 800b09c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b083      	sub	sp, #12
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b04      	cmp	r3, #4
 800b0c0:	d106      	bne.n	800b0d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b082      	sub	sp, #8
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d110      	bne.n	800b114 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00b      	beq.n	800b114 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b102:	69db      	ldr	r3, [r3, #28]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d005      	beq.n	800b114 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b082      	sub	sp, #8
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	460b      	mov	r3, r1
 800b128:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	32ae      	adds	r2, #174	; 0xae
 800b134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e01c      	b.n	800b17a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b03      	cmp	r3, #3
 800b14a:	d115      	bne.n	800b178 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	32ae      	adds	r2, #174	; 0xae
 800b156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15a:	6a1b      	ldr	r3, [r3, #32]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	32ae      	adds	r2, #174	; 0xae
 800b16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16e:	6a1b      	ldr	r3, [r3, #32]
 800b170:	78fa      	ldrb	r2, [r7, #3]
 800b172:	4611      	mov	r1, r2
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b082      	sub	sp, #8
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	460b      	mov	r3, r1
 800b18c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	32ae      	adds	r2, #174	; 0xae
 800b198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	e01c      	b.n	800b1de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	2b03      	cmp	r3, #3
 800b1ae:	d115      	bne.n	800b1dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	32ae      	adds	r2, #174	; 0xae
 800b1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00b      	beq.n	800b1dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	32ae      	adds	r2, #174	; 0xae
 800b1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d4:	78fa      	ldrb	r2, [r7, #3]
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00e      	beq.n	800b238 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	6852      	ldr	r2, [r2, #4]
 800b226:	b2d2      	uxtb	r2, r2
 800b228:	4611      	mov	r1, r2
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	4798      	blx	r3
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b234:	2303      	movs	r3, #3
 800b236:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b238:	7bfb      	ldrb	r3, [r7, #15]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b242:	b480      	push	{r7}
 800b244:	b083      	sub	sp, #12
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	460b      	mov	r3, r1
 800b24c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b24e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b268:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b086      	sub	sp, #24
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	460b      	mov	r3, r1
 800b280:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b28a:	2300      	movs	r3, #0
 800b28c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	885b      	ldrh	r3, [r3, #2]
 800b292:	b29a      	uxth	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d920      	bls.n	800b2e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b2a6:	e013      	b.n	800b2d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b2a8:	f107 030a 	add.w	r3, r7, #10
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6978      	ldr	r0, [r7, #20]
 800b2b0:	f000 f81b 	bl	800b2ea <USBD_GetNextDesc>
 800b2b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	785b      	ldrb	r3, [r3, #1]
 800b2ba:	2b05      	cmp	r3, #5
 800b2bc:	d108      	bne.n	800b2d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	789b      	ldrb	r3, [r3, #2]
 800b2c6:	78fa      	ldrb	r2, [r7, #3]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d008      	beq.n	800b2de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	885b      	ldrh	r3, [r3, #2]
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	897b      	ldrh	r3, [r7, #10]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d8e5      	bhi.n	800b2a8 <USBD_GetEpDesc+0x32>
 800b2dc:	e000      	b.n	800b2e0 <USBD_GetEpDesc+0x6a>
          break;
 800b2de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b2e0:	693b      	ldr	r3, [r7, #16]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b085      	sub	sp, #20
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	881a      	ldrh	r2, [r3, #0]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	b29b      	uxth	r3, r3
 800b302:	4413      	add	r3, r2
 800b304:	b29a      	uxth	r2, r3
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4413      	add	r3, r2
 800b314:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b316:	68fb      	ldr	r3, [r7, #12]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b324:	b480      	push	{r7}
 800b326:	b087      	sub	sp, #28
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	3301      	adds	r3, #1
 800b33a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b342:	8a3b      	ldrh	r3, [r7, #16]
 800b344:	021b      	lsls	r3, r3, #8
 800b346:	b21a      	sxth	r2, r3
 800b348:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	b21b      	sxth	r3, r3
 800b350:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b352:	89fb      	ldrh	r3, [r7, #14]
}
 800b354:	4618      	mov	r0, r3
 800b356:	371c      	adds	r7, #28
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b376:	2b40      	cmp	r3, #64	; 0x40
 800b378:	d005      	beq.n	800b386 <USBD_StdDevReq+0x26>
 800b37a:	2b40      	cmp	r3, #64	; 0x40
 800b37c:	d857      	bhi.n	800b42e <USBD_StdDevReq+0xce>
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00f      	beq.n	800b3a2 <USBD_StdDevReq+0x42>
 800b382:	2b20      	cmp	r3, #32
 800b384:	d153      	bne.n	800b42e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	32ae      	adds	r2, #174	; 0xae
 800b390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	4798      	blx	r3
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]
      break;
 800b3a0:	e04a      	b.n	800b438 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	785b      	ldrb	r3, [r3, #1]
 800b3a6:	2b09      	cmp	r3, #9
 800b3a8:	d83b      	bhi.n	800b422 <USBD_StdDevReq+0xc2>
 800b3aa:	a201      	add	r2, pc, #4	; (adr r2, 800b3b0 <USBD_StdDevReq+0x50>)
 800b3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b0:	0800b405 	.word	0x0800b405
 800b3b4:	0800b419 	.word	0x0800b419
 800b3b8:	0800b423 	.word	0x0800b423
 800b3bc:	0800b40f 	.word	0x0800b40f
 800b3c0:	0800b423 	.word	0x0800b423
 800b3c4:	0800b3e3 	.word	0x0800b3e3
 800b3c8:	0800b3d9 	.word	0x0800b3d9
 800b3cc:	0800b423 	.word	0x0800b423
 800b3d0:	0800b3fb 	.word	0x0800b3fb
 800b3d4:	0800b3ed 	.word	0x0800b3ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fa3c 	bl	800b858 <USBD_GetDescriptor>
          break;
 800b3e0:	e024      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fba1 	bl	800bb2c <USBD_SetAddress>
          break;
 800b3ea:	e01f      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fbe0 	bl	800bbb4 <USBD_SetConfig>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73fb      	strb	r3, [r7, #15]
          break;
 800b3f8:	e018      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fc83 	bl	800bd08 <USBD_GetConfig>
          break;
 800b402:	e013      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fcb4 	bl	800bd74 <USBD_GetStatus>
          break;
 800b40c:	e00e      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fce3 	bl	800bddc <USBD_SetFeature>
          break;
 800b416:	e009      	b.n	800b42c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fd07 	bl	800be2e <USBD_ClrFeature>
          break;
 800b420:	e004      	b.n	800b42c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fd5e 	bl	800bee6 <USBD_CtlError>
          break;
 800b42a:	bf00      	nop
      }
      break;
 800b42c:	e004      	b.n	800b438 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b42e:	6839      	ldr	r1, [r7, #0]
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fd58 	bl	800bee6 <USBD_CtlError>
      break;
 800b436:	bf00      	nop
  }

  return ret;
 800b438:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop

0800b444 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b45a:	2b40      	cmp	r3, #64	; 0x40
 800b45c:	d005      	beq.n	800b46a <USBD_StdItfReq+0x26>
 800b45e:	2b40      	cmp	r3, #64	; 0x40
 800b460:	d852      	bhi.n	800b508 <USBD_StdItfReq+0xc4>
 800b462:	2b00      	cmp	r3, #0
 800b464:	d001      	beq.n	800b46a <USBD_StdItfReq+0x26>
 800b466:	2b20      	cmp	r3, #32
 800b468:	d14e      	bne.n	800b508 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b470:	b2db      	uxtb	r3, r3
 800b472:	3b01      	subs	r3, #1
 800b474:	2b02      	cmp	r3, #2
 800b476:	d840      	bhi.n	800b4fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	889b      	ldrh	r3, [r3, #4]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d836      	bhi.n	800b4f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	889b      	ldrh	r3, [r3, #4]
 800b486:	b2db      	uxtb	r3, r3
 800b488:	4619      	mov	r1, r3
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff fed9 	bl	800b242 <USBD_CoreFindIF>
 800b490:	4603      	mov	r3, r0
 800b492:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b494:	7bbb      	ldrb	r3, [r7, #14]
 800b496:	2bff      	cmp	r3, #255	; 0xff
 800b498:	d01d      	beq.n	800b4d6 <USBD_StdItfReq+0x92>
 800b49a:	7bbb      	ldrb	r3, [r7, #14]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d11a      	bne.n	800b4d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b4a0:	7bba      	ldrb	r2, [r7, #14]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	32ae      	adds	r2, #174	; 0xae
 800b4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00f      	beq.n	800b4d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b4b0:	7bba      	ldrb	r2, [r7, #14]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b4b8:	7bba      	ldrb	r2, [r7, #14]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	32ae      	adds	r2, #174	; 0xae
 800b4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	6839      	ldr	r1, [r7, #0]
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	4798      	blx	r3
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4ce:	e004      	b.n	800b4da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4d4:	e001      	b.n	800b4da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	88db      	ldrh	r3, [r3, #6]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d110      	bne.n	800b504 <USBD_StdItfReq+0xc0>
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10d      	bne.n	800b504 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fdc7 	bl	800c07c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4ee:	e009      	b.n	800b504 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b4f0:	6839      	ldr	r1, [r7, #0]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fcf7 	bl	800bee6 <USBD_CtlError>
          break;
 800b4f8:	e004      	b.n	800b504 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fcf2 	bl	800bee6 <USBD_CtlError>
          break;
 800b502:	e000      	b.n	800b506 <USBD_StdItfReq+0xc2>
          break;
 800b504:	bf00      	nop
      }
      break;
 800b506:	e004      	b.n	800b512 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fceb 	bl	800bee6 <USBD_CtlError>
      break;
 800b510:	bf00      	nop
  }

  return ret;
 800b512:	7bfb      	ldrb	r3, [r7, #15]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	889b      	ldrh	r3, [r3, #4]
 800b52e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b538:	2b40      	cmp	r3, #64	; 0x40
 800b53a:	d007      	beq.n	800b54c <USBD_StdEPReq+0x30>
 800b53c:	2b40      	cmp	r3, #64	; 0x40
 800b53e:	f200 817f 	bhi.w	800b840 <USBD_StdEPReq+0x324>
 800b542:	2b00      	cmp	r3, #0
 800b544:	d02a      	beq.n	800b59c <USBD_StdEPReq+0x80>
 800b546:	2b20      	cmp	r3, #32
 800b548:	f040 817a 	bne.w	800b840 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b54c:	7bbb      	ldrb	r3, [r7, #14]
 800b54e:	4619      	mov	r1, r3
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7ff fe83 	bl	800b25c <USBD_CoreFindEP>
 800b556:	4603      	mov	r3, r0
 800b558:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b55a:	7b7b      	ldrb	r3, [r7, #13]
 800b55c:	2bff      	cmp	r3, #255	; 0xff
 800b55e:	f000 8174 	beq.w	800b84a <USBD_StdEPReq+0x32e>
 800b562:	7b7b      	ldrb	r3, [r7, #13]
 800b564:	2b00      	cmp	r3, #0
 800b566:	f040 8170 	bne.w	800b84a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b56a:	7b7a      	ldrb	r2, [r7, #13]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b572:	7b7a      	ldrb	r2, [r7, #13]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	32ae      	adds	r2, #174	; 0xae
 800b578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 8163 	beq.w	800b84a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b584:	7b7a      	ldrb	r2, [r7, #13]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	32ae      	adds	r2, #174	; 0xae
 800b58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
 800b596:	4603      	mov	r3, r0
 800b598:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b59a:	e156      	b.n	800b84a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	785b      	ldrb	r3, [r3, #1]
 800b5a0:	2b03      	cmp	r3, #3
 800b5a2:	d008      	beq.n	800b5b6 <USBD_StdEPReq+0x9a>
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	f300 8145 	bgt.w	800b834 <USBD_StdEPReq+0x318>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 809b 	beq.w	800b6e6 <USBD_StdEPReq+0x1ca>
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d03c      	beq.n	800b62e <USBD_StdEPReq+0x112>
 800b5b4:	e13e      	b.n	800b834 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d002      	beq.n	800b5c8 <USBD_StdEPReq+0xac>
 800b5c2:	2b03      	cmp	r3, #3
 800b5c4:	d016      	beq.n	800b5f4 <USBD_StdEPReq+0xd8>
 800b5c6:	e02c      	b.n	800b622 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5c8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00d      	beq.n	800b5ea <USBD_StdEPReq+0xce>
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	2b80      	cmp	r3, #128	; 0x80
 800b5d2:	d00a      	beq.n	800b5ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5d4:	7bbb      	ldrb	r3, [r7, #14]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f003 feff 	bl	800f3dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5de:	2180      	movs	r1, #128	; 0x80
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f003 fefb 	bl	800f3dc <USBD_LL_StallEP>
 800b5e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5e8:	e020      	b.n	800b62c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fc7a 	bl	800bee6 <USBD_CtlError>
              break;
 800b5f2:	e01b      	b.n	800b62c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	885b      	ldrh	r3, [r3, #2]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10e      	bne.n	800b61a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00b      	beq.n	800b61a <USBD_StdEPReq+0xfe>
 800b602:	7bbb      	ldrb	r3, [r7, #14]
 800b604:	2b80      	cmp	r3, #128	; 0x80
 800b606:	d008      	beq.n	800b61a <USBD_StdEPReq+0xfe>
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	88db      	ldrh	r3, [r3, #6]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d104      	bne.n	800b61a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f003 fee1 	bl	800f3dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fd2e 	bl	800c07c <USBD_CtlSendStatus>

              break;
 800b620:	e004      	b.n	800b62c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b622:	6839      	ldr	r1, [r7, #0]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 fc5e 	bl	800bee6 <USBD_CtlError>
              break;
 800b62a:	bf00      	nop
          }
          break;
 800b62c:	e107      	b.n	800b83e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b02      	cmp	r3, #2
 800b638:	d002      	beq.n	800b640 <USBD_StdEPReq+0x124>
 800b63a:	2b03      	cmp	r3, #3
 800b63c:	d016      	beq.n	800b66c <USBD_StdEPReq+0x150>
 800b63e:	e04b      	b.n	800b6d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b640:	7bbb      	ldrb	r3, [r7, #14]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00d      	beq.n	800b662 <USBD_StdEPReq+0x146>
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	2b80      	cmp	r3, #128	; 0x80
 800b64a:	d00a      	beq.n	800b662 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b64c:	7bbb      	ldrb	r3, [r7, #14]
 800b64e:	4619      	mov	r1, r3
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f003 fec3 	bl	800f3dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b656:	2180      	movs	r1, #128	; 0x80
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f003 febf 	bl	800f3dc <USBD_LL_StallEP>
 800b65e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b660:	e040      	b.n	800b6e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fc3e 	bl	800bee6 <USBD_CtlError>
              break;
 800b66a:	e03b      	b.n	800b6e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	885b      	ldrh	r3, [r3, #2]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d136      	bne.n	800b6e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b674:	7bbb      	ldrb	r3, [r7, #14]
 800b676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d004      	beq.n	800b688 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f003 fec9 	bl	800f41a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fcf7 	bl	800c07c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b68e:	7bbb      	ldrb	r3, [r7, #14]
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff fde2 	bl	800b25c <USBD_CoreFindEP>
 800b698:	4603      	mov	r3, r0
 800b69a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b69c:	7b7b      	ldrb	r3, [r7, #13]
 800b69e:	2bff      	cmp	r3, #255	; 0xff
 800b6a0:	d01f      	beq.n	800b6e2 <USBD_StdEPReq+0x1c6>
 800b6a2:	7b7b      	ldrb	r3, [r7, #13]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d11c      	bne.n	800b6e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b6a8:	7b7a      	ldrb	r2, [r7, #13]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b6b0:	7b7a      	ldrb	r2, [r7, #13]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	32ae      	adds	r2, #174	; 0xae
 800b6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d010      	beq.n	800b6e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b6c0:	7b7a      	ldrb	r2, [r7, #13]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	32ae      	adds	r2, #174	; 0xae
 800b6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	4798      	blx	r3
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b6d6:	e004      	b.n	800b6e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fc03 	bl	800bee6 <USBD_CtlError>
              break;
 800b6e0:	e000      	b.n	800b6e4 <USBD_StdEPReq+0x1c8>
              break;
 800b6e2:	bf00      	nop
          }
          break;
 800b6e4:	e0ab      	b.n	800b83e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d002      	beq.n	800b6f8 <USBD_StdEPReq+0x1dc>
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d032      	beq.n	800b75c <USBD_StdEPReq+0x240>
 800b6f6:	e097      	b.n	800b828 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6f8:	7bbb      	ldrb	r3, [r7, #14]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d007      	beq.n	800b70e <USBD_StdEPReq+0x1f2>
 800b6fe:	7bbb      	ldrb	r3, [r7, #14]
 800b700:	2b80      	cmp	r3, #128	; 0x80
 800b702:	d004      	beq.n	800b70e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fbed 	bl	800bee6 <USBD_CtlError>
                break;
 800b70c:	e091      	b.n	800b832 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b70e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b712:	2b00      	cmp	r3, #0
 800b714:	da0b      	bge.n	800b72e <USBD_StdEPReq+0x212>
 800b716:	7bbb      	ldrb	r3, [r7, #14]
 800b718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b71c:	4613      	mov	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	3310      	adds	r3, #16
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	4413      	add	r3, r2
 800b72a:	3304      	adds	r3, #4
 800b72c:	e00b      	b.n	800b746 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b72e:	7bbb      	ldrb	r3, [r7, #14]
 800b730:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b734:	4613      	mov	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4413      	add	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	4413      	add	r3, r2
 800b744:	3304      	adds	r3, #4
 800b746:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2200      	movs	r2, #0
 800b74c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2202      	movs	r2, #2
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fc37 	bl	800bfc8 <USBD_CtlSendData>
              break;
 800b75a:	e06a      	b.n	800b832 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b75c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b760:	2b00      	cmp	r3, #0
 800b762:	da11      	bge.n	800b788 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b764:	7bbb      	ldrb	r3, [r7, #14]
 800b766:	f003 020f 	and.w	r2, r3, #15
 800b76a:	6879      	ldr	r1, [r7, #4]
 800b76c:	4613      	mov	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	440b      	add	r3, r1
 800b776:	3324      	adds	r3, #36	; 0x24
 800b778:	881b      	ldrh	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d117      	bne.n	800b7ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fbb0 	bl	800bee6 <USBD_CtlError>
                  break;
 800b786:	e054      	b.n	800b832 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b788:	7bbb      	ldrb	r3, [r7, #14]
 800b78a:	f003 020f 	and.w	r2, r3, #15
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	4613      	mov	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	440b      	add	r3, r1
 800b79a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d104      	bne.n	800b7ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fb9d 	bl	800bee6 <USBD_CtlError>
                  break;
 800b7ac:	e041      	b.n	800b832 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	da0b      	bge.n	800b7ce <USBD_StdEPReq+0x2b2>
 800b7b6:	7bbb      	ldrb	r3, [r7, #14]
 800b7b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7bc:	4613      	mov	r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4413      	add	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	3310      	adds	r3, #16
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	e00b      	b.n	800b7e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7ce:	7bbb      	ldrb	r3, [r7, #14]
 800b7d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4413      	add	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b7e8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d002      	beq.n	800b7f4 <USBD_StdEPReq+0x2d8>
 800b7ee:	7bbb      	ldrb	r3, [r7, #14]
 800b7f0:	2b80      	cmp	r3, #128	; 0x80
 800b7f2:	d103      	bne.n	800b7fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	e00e      	b.n	800b81a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f003 fe29 	bl	800f458 <USBD_LL_IsStallEP>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d003      	beq.n	800b814 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	2201      	movs	r2, #1
 800b810:	601a      	str	r2, [r3, #0]
 800b812:	e002      	b.n	800b81a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	2200      	movs	r2, #0
 800b818:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	2202      	movs	r2, #2
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fbd1 	bl	800bfc8 <USBD_CtlSendData>
              break;
 800b826:	e004      	b.n	800b832 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fb5b 	bl	800bee6 <USBD_CtlError>
              break;
 800b830:	bf00      	nop
          }
          break;
 800b832:	e004      	b.n	800b83e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 fb55 	bl	800bee6 <USBD_CtlError>
          break;
 800b83c:	bf00      	nop
      }
      break;
 800b83e:	e005      	b.n	800b84c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fb4f 	bl	800bee6 <USBD_CtlError>
      break;
 800b848:	e000      	b.n	800b84c <USBD_StdEPReq+0x330>
      break;
 800b84a:	bf00      	nop
  }

  return ret;
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
	...

0800b858 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b862:	2300      	movs	r3, #0
 800b864:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b866:	2300      	movs	r3, #0
 800b868:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b86a:	2300      	movs	r3, #0
 800b86c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	885b      	ldrh	r3, [r3, #2]
 800b872:	0a1b      	lsrs	r3, r3, #8
 800b874:	b29b      	uxth	r3, r3
 800b876:	3b01      	subs	r3, #1
 800b878:	2b06      	cmp	r3, #6
 800b87a:	f200 8128 	bhi.w	800bace <USBD_GetDescriptor+0x276>
 800b87e:	a201      	add	r2, pc, #4	; (adr r2, 800b884 <USBD_GetDescriptor+0x2c>)
 800b880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b884:	0800b8a1 	.word	0x0800b8a1
 800b888:	0800b8b9 	.word	0x0800b8b9
 800b88c:	0800b8f9 	.word	0x0800b8f9
 800b890:	0800bacf 	.word	0x0800bacf
 800b894:	0800bacf 	.word	0x0800bacf
 800b898:	0800ba6f 	.word	0x0800ba6f
 800b89c:	0800ba9b 	.word	0x0800ba9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	7c12      	ldrb	r2, [r2, #16]
 800b8ac:	f107 0108 	add.w	r1, r7, #8
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	4798      	blx	r3
 800b8b4:	60f8      	str	r0, [r7, #12]
      break;
 800b8b6:	e112      	b.n	800bade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	7c1b      	ldrb	r3, [r3, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10d      	bne.n	800b8dc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c8:	f107 0208 	add.w	r2, r7, #8
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	4798      	blx	r3
 800b8d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b8da:	e100      	b.n	800bade <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e4:	f107 0208 	add.w	r2, r7, #8
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	4798      	blx	r3
 800b8ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	701a      	strb	r2, [r3, #0]
      break;
 800b8f6:	e0f2      	b.n	800bade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	885b      	ldrh	r3, [r3, #2]
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	2b05      	cmp	r3, #5
 800b900:	f200 80ac 	bhi.w	800ba5c <USBD_GetDescriptor+0x204>
 800b904:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <USBD_GetDescriptor+0xb4>)
 800b906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90a:	bf00      	nop
 800b90c:	0800b925 	.word	0x0800b925
 800b910:	0800b959 	.word	0x0800b959
 800b914:	0800b98d 	.word	0x0800b98d
 800b918:	0800b9c1 	.word	0x0800b9c1
 800b91c:	0800b9f5 	.word	0x0800b9f5
 800b920:	0800ba29 	.word	0x0800ba29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00b      	beq.n	800b948 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	7c12      	ldrb	r2, [r2, #16]
 800b93c:	f107 0108 	add.w	r1, r7, #8
 800b940:	4610      	mov	r0, r2
 800b942:	4798      	blx	r3
 800b944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b946:	e091      	b.n	800ba6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 facb 	bl	800bee6 <USBD_CtlError>
            err++;
 800b950:	7afb      	ldrb	r3, [r7, #11]
 800b952:	3301      	adds	r3, #1
 800b954:	72fb      	strb	r3, [r7, #11]
          break;
 800b956:	e089      	b.n	800ba6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00b      	beq.n	800b97c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	7c12      	ldrb	r2, [r2, #16]
 800b970:	f107 0108 	add.w	r1, r7, #8
 800b974:	4610      	mov	r0, r2
 800b976:	4798      	blx	r3
 800b978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b97a:	e077      	b.n	800ba6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fab1 	bl	800bee6 <USBD_CtlError>
            err++;
 800b984:	7afb      	ldrb	r3, [r7, #11]
 800b986:	3301      	adds	r3, #1
 800b988:	72fb      	strb	r3, [r7, #11]
          break;
 800b98a:	e06f      	b.n	800ba6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00b      	beq.n	800b9b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	7c12      	ldrb	r2, [r2, #16]
 800b9a4:	f107 0108 	add.w	r1, r7, #8
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	4798      	blx	r3
 800b9ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9ae:	e05d      	b.n	800ba6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fa97 	bl	800bee6 <USBD_CtlError>
            err++;
 800b9b8:	7afb      	ldrb	r3, [r7, #11]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b9be:	e055      	b.n	800ba6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00b      	beq.n	800b9e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	7c12      	ldrb	r2, [r2, #16]
 800b9d8:	f107 0108 	add.w	r1, r7, #8
 800b9dc:	4610      	mov	r0, r2
 800b9de:	4798      	blx	r3
 800b9e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9e2:	e043      	b.n	800ba6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9e4:	6839      	ldr	r1, [r7, #0]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fa7d 	bl	800bee6 <USBD_CtlError>
            err++;
 800b9ec:	7afb      	ldrb	r3, [r7, #11]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b9f2:	e03b      	b.n	800ba6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9fa:	695b      	ldr	r3, [r3, #20]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00b      	beq.n	800ba18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba06:	695b      	ldr	r3, [r3, #20]
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	7c12      	ldrb	r2, [r2, #16]
 800ba0c:	f107 0108 	add.w	r1, r7, #8
 800ba10:	4610      	mov	r0, r2
 800ba12:	4798      	blx	r3
 800ba14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba16:	e029      	b.n	800ba6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fa63 	bl	800bee6 <USBD_CtlError>
            err++;
 800ba20:	7afb      	ldrb	r3, [r7, #11]
 800ba22:	3301      	adds	r3, #1
 800ba24:	72fb      	strb	r3, [r7, #11]
          break;
 800ba26:	e021      	b.n	800ba6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00b      	beq.n	800ba4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba3a:	699b      	ldr	r3, [r3, #24]
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	7c12      	ldrb	r2, [r2, #16]
 800ba40:	f107 0108 	add.w	r1, r7, #8
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
 800ba48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba4a:	e00f      	b.n	800ba6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fa49 	bl	800bee6 <USBD_CtlError>
            err++;
 800ba54:	7afb      	ldrb	r3, [r7, #11]
 800ba56:	3301      	adds	r3, #1
 800ba58:	72fb      	strb	r3, [r7, #11]
          break;
 800ba5a:	e007      	b.n	800ba6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ba5c:	6839      	ldr	r1, [r7, #0]
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fa41 	bl	800bee6 <USBD_CtlError>
          err++;
 800ba64:	7afb      	ldrb	r3, [r7, #11]
 800ba66:	3301      	adds	r3, #1
 800ba68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ba6a:	bf00      	nop
      }
      break;
 800ba6c:	e037      	b.n	800bade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	7c1b      	ldrb	r3, [r3, #16]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d109      	bne.n	800ba8a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7e:	f107 0208 	add.w	r2, r7, #8
 800ba82:	4610      	mov	r0, r2
 800ba84:	4798      	blx	r3
 800ba86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba88:	e029      	b.n	800bade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fa2a 	bl	800bee6 <USBD_CtlError>
        err++;
 800ba92:	7afb      	ldrb	r3, [r7, #11]
 800ba94:	3301      	adds	r3, #1
 800ba96:	72fb      	strb	r3, [r7, #11]
      break;
 800ba98:	e021      	b.n	800bade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	7c1b      	ldrb	r3, [r3, #16]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10d      	bne.n	800babe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baaa:	f107 0208 	add.w	r2, r7, #8
 800baae:	4610      	mov	r0, r2
 800bab0:	4798      	blx	r3
 800bab2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3301      	adds	r3, #1
 800bab8:	2207      	movs	r2, #7
 800baba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800babc:	e00f      	b.n	800bade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fa10 	bl	800bee6 <USBD_CtlError>
        err++;
 800bac6:	7afb      	ldrb	r3, [r7, #11]
 800bac8:	3301      	adds	r3, #1
 800baca:	72fb      	strb	r3, [r7, #11]
      break;
 800bacc:	e007      	b.n	800bade <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bace:	6839      	ldr	r1, [r7, #0]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fa08 	bl	800bee6 <USBD_CtlError>
      err++;
 800bad6:	7afb      	ldrb	r3, [r7, #11]
 800bad8:	3301      	adds	r3, #1
 800bada:	72fb      	strb	r3, [r7, #11]
      break;
 800badc:	bf00      	nop
  }

  if (err != 0U)
 800bade:	7afb      	ldrb	r3, [r7, #11]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d11e      	bne.n	800bb22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	88db      	ldrh	r3, [r3, #6]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d016      	beq.n	800bb1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800baec:	893b      	ldrh	r3, [r7, #8]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00e      	beq.n	800bb10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	88da      	ldrh	r2, [r3, #6]
 800baf6:	893b      	ldrh	r3, [r7, #8]
 800baf8:	4293      	cmp	r3, r2
 800bafa:	bf28      	it	cs
 800bafc:	4613      	movcs	r3, r2
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bb02:	893b      	ldrh	r3, [r7, #8]
 800bb04:	461a      	mov	r2, r3
 800bb06:	68f9      	ldr	r1, [r7, #12]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fa5d 	bl	800bfc8 <USBD_CtlSendData>
 800bb0e:	e009      	b.n	800bb24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f9e7 	bl	800bee6 <USBD_CtlError>
 800bb18:	e004      	b.n	800bb24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 faae 	bl	800c07c <USBD_CtlSendStatus>
 800bb20:	e000      	b.n	800bb24 <USBD_GetDescriptor+0x2cc>
    return;
 800bb22:	bf00      	nop
  }
}
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop

0800bb2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	889b      	ldrh	r3, [r3, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d131      	bne.n	800bba2 <USBD_SetAddress+0x76>
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	88db      	ldrh	r3, [r3, #6]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d12d      	bne.n	800bba2 <USBD_SetAddress+0x76>
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	885b      	ldrh	r3, [r3, #2]
 800bb4a:	2b7f      	cmp	r3, #127	; 0x7f
 800bb4c:	d829      	bhi.n	800bba2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	885b      	ldrh	r3, [r3, #2]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	2b03      	cmp	r3, #3
 800bb64:	d104      	bne.n	800bb70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f9bc 	bl	800bee6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb6e:	e01d      	b.n	800bbac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	7bfa      	ldrb	r2, [r7, #15]
 800bb74:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f003 fc97 	bl	800f4b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 fa7a 	bl	800c07c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d004      	beq.n	800bb98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2202      	movs	r2, #2
 800bb92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb96:	e009      	b.n	800bbac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba0:	e004      	b.n	800bbac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bba2:	6839      	ldr	r1, [r7, #0]
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f99e 	bl	800bee6 <USBD_CtlError>
  }
}
 800bbaa:	bf00      	nop
 800bbac:	bf00      	nop
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	885b      	ldrh	r3, [r3, #2]
 800bbc6:	b2da      	uxtb	r2, r3
 800bbc8:	4b4e      	ldr	r3, [pc, #312]	; (800bd04 <USBD_SetConfig+0x150>)
 800bbca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bbcc:	4b4d      	ldr	r3, [pc, #308]	; (800bd04 <USBD_SetConfig+0x150>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d905      	bls.n	800bbe0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bbd4:	6839      	ldr	r1, [r7, #0]
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f985 	bl	800bee6 <USBD_CtlError>
    return USBD_FAIL;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	e08c      	b.n	800bcfa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d002      	beq.n	800bbf2 <USBD_SetConfig+0x3e>
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d029      	beq.n	800bc44 <USBD_SetConfig+0x90>
 800bbf0:	e075      	b.n	800bcde <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bbf2:	4b44      	ldr	r3, [pc, #272]	; (800bd04 <USBD_SetConfig+0x150>)
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d020      	beq.n	800bc3c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bbfa:	4b42      	ldr	r3, [pc, #264]	; (800bd04 <USBD_SetConfig+0x150>)
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc04:	4b3f      	ldr	r3, [pc, #252]	; (800bd04 <USBD_SetConfig+0x150>)
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7fe ffe7 	bl	800abde <USBD_SetClassConfig>
 800bc10:	4603      	mov	r3, r0
 800bc12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bc14:	7bfb      	ldrb	r3, [r7, #15]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d008      	beq.n	800bc2c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f962 	bl	800bee6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2202      	movs	r2, #2
 800bc26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc2a:	e065      	b.n	800bcf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fa25 	bl	800c07c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2203      	movs	r2, #3
 800bc36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bc3a:	e05d      	b.n	800bcf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fa1d 	bl	800c07c <USBD_CtlSendStatus>
      break;
 800bc42:	e059      	b.n	800bcf8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bc44:	4b2f      	ldr	r3, [pc, #188]	; (800bd04 <USBD_SetConfig+0x150>)
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d112      	bne.n	800bc72 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bc54:	4b2b      	ldr	r3, [pc, #172]	; (800bd04 <USBD_SetConfig+0x150>)
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	461a      	mov	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc5e:	4b29      	ldr	r3, [pc, #164]	; (800bd04 <USBD_SetConfig+0x150>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	4619      	mov	r1, r3
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7fe ffd6 	bl	800ac16 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 fa06 	bl	800c07c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc70:	e042      	b.n	800bcf8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bc72:	4b24      	ldr	r3, [pc, #144]	; (800bd04 <USBD_SetConfig+0x150>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	461a      	mov	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d02a      	beq.n	800bcd6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	4619      	mov	r1, r3
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7fe ffc4 	bl	800ac16 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc8e:	4b1d      	ldr	r3, [pc, #116]	; (800bd04 <USBD_SetConfig+0x150>)
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	461a      	mov	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc98:	4b1a      	ldr	r3, [pc, #104]	; (800bd04 <USBD_SetConfig+0x150>)
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7fe ff9d 	bl	800abde <USBD_SetClassConfig>
 800bca4:	4603      	mov	r3, r0
 800bca6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00f      	beq.n	800bcce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bcae:	6839      	ldr	r1, [r7, #0]
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 f918 	bl	800bee6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7fe ffa9 	bl	800ac16 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bccc:	e014      	b.n	800bcf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 f9d4 	bl	800c07c <USBD_CtlSendStatus>
      break;
 800bcd4:	e010      	b.n	800bcf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f9d0 	bl	800c07c <USBD_CtlSendStatus>
      break;
 800bcdc:	e00c      	b.n	800bcf8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f900 	bl	800bee6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bce6:	4b07      	ldr	r3, [pc, #28]	; (800bd04 <USBD_SetConfig+0x150>)
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	4619      	mov	r1, r3
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7fe ff92 	bl	800ac16 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	73fb      	strb	r3, [r7, #15]
      break;
 800bcf6:	bf00      	nop
  }

  return ret;
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20000764 	.word	0x20000764

0800bd08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	88db      	ldrh	r3, [r3, #6]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d004      	beq.n	800bd24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bd1a:	6839      	ldr	r1, [r7, #0]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f8e2 	bl	800bee6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bd22:	e023      	b.n	800bd6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	dc02      	bgt.n	800bd36 <USBD_GetConfig+0x2e>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	dc03      	bgt.n	800bd3c <USBD_GetConfig+0x34>
 800bd34:	e015      	b.n	800bd62 <USBD_GetConfig+0x5a>
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	d00b      	beq.n	800bd52 <USBD_GetConfig+0x4a>
 800bd3a:	e012      	b.n	800bd62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	3308      	adds	r3, #8
 800bd46:	2201      	movs	r2, #1
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f93c 	bl	800bfc8 <USBD_CtlSendData>
        break;
 800bd50:	e00c      	b.n	800bd6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3304      	adds	r3, #4
 800bd56:	2201      	movs	r2, #1
 800bd58:	4619      	mov	r1, r3
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f934 	bl	800bfc8 <USBD_CtlSendData>
        break;
 800bd60:	e004      	b.n	800bd6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bd62:	6839      	ldr	r1, [r7, #0]
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 f8be 	bl	800bee6 <USBD_CtlError>
        break;
 800bd6a:	bf00      	nop
}
 800bd6c:	bf00      	nop
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	3b01      	subs	r3, #1
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d81e      	bhi.n	800bdca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	88db      	ldrh	r3, [r3, #6]
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d004      	beq.n	800bd9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 f8a5 	bl	800bee6 <USBD_CtlError>
        break;
 800bd9c:	e01a      	b.n	800bdd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2201      	movs	r2, #1
 800bda2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d005      	beq.n	800bdba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	f043 0202 	orr.w	r2, r3, #2
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	330c      	adds	r3, #12
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f900 	bl	800bfc8 <USBD_CtlSendData>
      break;
 800bdc8:	e004      	b.n	800bdd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 f88a 	bl	800bee6 <USBD_CtlError>
      break;
 800bdd2:	bf00      	nop
  }
}
 800bdd4:	bf00      	nop
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	885b      	ldrh	r3, [r3, #2]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d107      	bne.n	800bdfe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f940 	bl	800c07c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bdfc:	e013      	b.n	800be26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	885b      	ldrh	r3, [r3, #2]
 800be02:	2b02      	cmp	r3, #2
 800be04:	d10b      	bne.n	800be1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	889b      	ldrh	r3, [r3, #4]
 800be0a:	0a1b      	lsrs	r3, r3, #8
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f930 	bl	800c07c <USBD_CtlSendStatus>
}
 800be1c:	e003      	b.n	800be26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f860 	bl	800bee6 <USBD_CtlError>
}
 800be26:	bf00      	nop
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	3b01      	subs	r3, #1
 800be42:	2b02      	cmp	r3, #2
 800be44:	d80b      	bhi.n	800be5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	885b      	ldrh	r3, [r3, #2]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d10c      	bne.n	800be68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f910 	bl	800c07c <USBD_CtlSendStatus>
      }
      break;
 800be5c:	e004      	b.n	800be68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 f840 	bl	800bee6 <USBD_CtlError>
      break;
 800be66:	e000      	b.n	800be6a <USBD_ClrFeature+0x3c>
      break;
 800be68:	bf00      	nop
  }
}
 800be6a:	bf00      	nop
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b084      	sub	sp, #16
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
 800be7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	781a      	ldrb	r2, [r3, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	3301      	adds	r3, #1
 800be8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	781a      	ldrb	r2, [r3, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3301      	adds	r3, #1
 800be9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f7ff fa41 	bl	800b324 <SWAPBYTE>
 800bea2:	4603      	mov	r3, r0
 800bea4:	461a      	mov	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3301      	adds	r3, #1
 800beae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	3301      	adds	r3, #1
 800beb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f7ff fa34 	bl	800b324 <SWAPBYTE>
 800bebc:	4603      	mov	r3, r0
 800bebe:	461a      	mov	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	3301      	adds	r3, #1
 800bec8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3301      	adds	r3, #1
 800bece:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f7ff fa27 	bl	800b324 <SWAPBYTE>
 800bed6:	4603      	mov	r3, r0
 800bed8:	461a      	mov	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	80da      	strh	r2, [r3, #6]
}
 800bede:	bf00      	nop
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b082      	sub	sp, #8
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
 800beee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bef0:	2180      	movs	r1, #128	; 0x80
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f003 fa72 	bl	800f3dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bef8:	2100      	movs	r1, #0
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f003 fa6e 	bl	800f3dc <USBD_LL_StallEP>
}
 800bf00:	bf00      	nop
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf14:	2300      	movs	r3, #0
 800bf16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d036      	beq.n	800bf8c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bf22:	6938      	ldr	r0, [r7, #16]
 800bf24:	f000 f836 	bl	800bf94 <USBD_GetLen>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	005b      	lsls	r3, r3, #1
 800bf30:	b29a      	uxth	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf36:	7dfb      	ldrb	r3, [r7, #23]
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	7812      	ldrb	r2, [r2, #0]
 800bf40:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf42:	7dfb      	ldrb	r3, [r7, #23]
 800bf44:	3301      	adds	r3, #1
 800bf46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf48:	7dfb      	ldrb	r3, [r7, #23]
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	2203      	movs	r2, #3
 800bf50:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	3301      	adds	r3, #1
 800bf56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf58:	e013      	b.n	800bf82 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	4413      	add	r3, r2
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	7812      	ldrb	r2, [r2, #0]
 800bf64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	613b      	str	r3, [r7, #16]
    idx++;
 800bf6c:	7dfb      	ldrb	r3, [r7, #23]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf72:	7dfb      	ldrb	r3, [r7, #23]
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	4413      	add	r3, r2
 800bf78:	2200      	movs	r2, #0
 800bf7a:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf7c:	7dfb      	ldrb	r3, [r7, #23]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1e7      	bne.n	800bf5a <USBD_GetString+0x52>
 800bf8a:	e000      	b.n	800bf8e <USBD_GetString+0x86>
    return;
 800bf8c:	bf00      	nop
  }
}
 800bf8e:	3718      	adds	r7, #24
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bfa4:	e005      	b.n	800bfb2 <USBD_GetLen+0x1e>
  {
    len++;
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1f5      	bne.n	800bfa6 <USBD_GetLen+0x12>
  }

  return len;
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3714      	adds	r7, #20
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2202      	movs	r2, #2
 800bfd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68ba      	ldr	r2, [r7, #8]
 800bfec:	2100      	movs	r1, #0
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	f003 fa7d 	bl	800f4ee <USBD_LL_Transmit>

  return USBD_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b084      	sub	sp, #16
 800c002:	af00      	add	r7, sp, #0
 800c004:	60f8      	str	r0, [r7, #12]
 800c006:	60b9      	str	r1, [r7, #8]
 800c008:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	2100      	movs	r1, #0
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	f003 fa6c 	bl	800f4ee <USBD_LL_Transmit>

  return USBD_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2203      	movs	r2, #3
 800c030:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	2100      	movs	r1, #0
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f003 fa70 	bl	800f530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b084      	sub	sp, #16
 800c05e:	af00      	add	r7, sp, #0
 800c060:	60f8      	str	r0, [r7, #12]
 800c062:	60b9      	str	r1, [r7, #8]
 800c064:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	2100      	movs	r1, #0
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f003 fa5f 	bl	800f530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2204      	movs	r2, #4
 800c088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c08c:	2300      	movs	r3, #0
 800c08e:	2200      	movs	r2, #0
 800c090:	2100      	movs	r1, #0
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f003 fa2b 	bl	800f4ee <USBD_LL_Transmit>

  return USBD_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b082      	sub	sp, #8
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2205      	movs	r2, #5
 800c0ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f003 fa39 	bl	800f530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <__NVIC_SetPriority>:
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	6039      	str	r1, [r7, #0]
 800c0d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	db0a      	blt.n	800c0f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	490c      	ldr	r1, [pc, #48]	; (800c114 <__NVIC_SetPriority+0x4c>)
 800c0e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0e6:	0112      	lsls	r2, r2, #4
 800c0e8:	b2d2      	uxtb	r2, r2
 800c0ea:	440b      	add	r3, r1
 800c0ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c0f0:	e00a      	b.n	800c108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	b2da      	uxtb	r2, r3
 800c0f6:	4908      	ldr	r1, [pc, #32]	; (800c118 <__NVIC_SetPriority+0x50>)
 800c0f8:	79fb      	ldrb	r3, [r7, #7]
 800c0fa:	f003 030f 	and.w	r3, r3, #15
 800c0fe:	3b04      	subs	r3, #4
 800c100:	0112      	lsls	r2, r2, #4
 800c102:	b2d2      	uxtb	r2, r2
 800c104:	440b      	add	r3, r1
 800c106:	761a      	strb	r2, [r3, #24]
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr
 800c114:	e000e100 	.word	0xe000e100
 800c118:	e000ed00 	.word	0xe000ed00

0800c11c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c120:	4b05      	ldr	r3, [pc, #20]	; (800c138 <SysTick_Handler+0x1c>)
 800c122:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c124:	f001 fcfe 	bl	800db24 <xTaskGetSchedulerState>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d001      	beq.n	800c132 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c12e:	f002 fae3 	bl	800e6f8 <xPortSysTickHandler>
  }
}
 800c132:	bf00      	nop
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	e000e010 	.word	0xe000e010

0800c13c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c13c:	b580      	push	{r7, lr}
 800c13e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c140:	2100      	movs	r1, #0
 800c142:	f06f 0004 	mvn.w	r0, #4
 800c146:	f7ff ffbf 	bl	800c0c8 <__NVIC_SetPriority>
#endif
}
 800c14a:	bf00      	nop
 800c14c:	bd80      	pop	{r7, pc}
	...

0800c150 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c156:	f3ef 8305 	mrs	r3, IPSR
 800c15a:	603b      	str	r3, [r7, #0]
  return(result);
 800c15c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d003      	beq.n	800c16a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c162:	f06f 0305 	mvn.w	r3, #5
 800c166:	607b      	str	r3, [r7, #4]
 800c168:	e00c      	b.n	800c184 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c16a:	4b0a      	ldr	r3, [pc, #40]	; (800c194 <osKernelInitialize+0x44>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d105      	bne.n	800c17e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c172:	4b08      	ldr	r3, [pc, #32]	; (800c194 <osKernelInitialize+0x44>)
 800c174:	2201      	movs	r2, #1
 800c176:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c178:	2300      	movs	r3, #0
 800c17a:	607b      	str	r3, [r7, #4]
 800c17c:	e002      	b.n	800c184 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c17e:	f04f 33ff 	mov.w	r3, #4294967295
 800c182:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c184:	687b      	ldr	r3, [r7, #4]
}
 800c186:	4618      	mov	r0, r3
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	20000768 	.word	0x20000768

0800c198 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c19e:	f3ef 8305 	mrs	r3, IPSR
 800c1a2:	603b      	str	r3, [r7, #0]
  return(result);
 800c1a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d003      	beq.n	800c1b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c1aa:	f06f 0305 	mvn.w	r3, #5
 800c1ae:	607b      	str	r3, [r7, #4]
 800c1b0:	e010      	b.n	800c1d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c1b2:	4b0b      	ldr	r3, [pc, #44]	; (800c1e0 <osKernelStart+0x48>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d109      	bne.n	800c1ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c1ba:	f7ff ffbf 	bl	800c13c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c1be:	4b08      	ldr	r3, [pc, #32]	; (800c1e0 <osKernelStart+0x48>)
 800c1c0:	2202      	movs	r2, #2
 800c1c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c1c4:	f001 f866 	bl	800d294 <vTaskStartScheduler>
      stat = osOK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	607b      	str	r3, [r7, #4]
 800c1cc:	e002      	b.n	800c1d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c1ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1d4:	687b      	ldr	r3, [r7, #4]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20000768 	.word	0x20000768

0800c1e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b08e      	sub	sp, #56	; 0x38
 800c1e8:	af04      	add	r7, sp, #16
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1f4:	f3ef 8305 	mrs	r3, IPSR
 800c1f8:	617b      	str	r3, [r7, #20]
  return(result);
 800c1fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d17e      	bne.n	800c2fe <osThreadNew+0x11a>
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d07b      	beq.n	800c2fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c206:	2380      	movs	r3, #128	; 0x80
 800c208:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c20a:	2318      	movs	r3, #24
 800c20c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c20e:	2300      	movs	r3, #0
 800c210:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c212:	f04f 33ff 	mov.w	r3, #4294967295
 800c216:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d045      	beq.n	800c2aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d002      	beq.n	800c22c <osThreadNew+0x48>
        name = attr->name;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d002      	beq.n	800c23a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d008      	beq.n	800c252 <osThreadNew+0x6e>
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	2b38      	cmp	r3, #56	; 0x38
 800c244:	d805      	bhi.n	800c252 <osThreadNew+0x6e>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	f003 0301 	and.w	r3, r3, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <osThreadNew+0x72>
        return (NULL);
 800c252:	2300      	movs	r3, #0
 800c254:	e054      	b.n	800c300 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	695b      	ldr	r3, [r3, #20]
 800c262:	089b      	lsrs	r3, r3, #2
 800c264:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00e      	beq.n	800c28c <osThreadNew+0xa8>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	2b5b      	cmp	r3, #91	; 0x5b
 800c274:	d90a      	bls.n	800c28c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d006      	beq.n	800c28c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	695b      	ldr	r3, [r3, #20]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d002      	beq.n	800c28c <osThreadNew+0xa8>
        mem = 1;
 800c286:	2301      	movs	r3, #1
 800c288:	61bb      	str	r3, [r7, #24]
 800c28a:	e010      	b.n	800c2ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10c      	bne.n	800c2ae <osThreadNew+0xca>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d108      	bne.n	800c2ae <osThreadNew+0xca>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d104      	bne.n	800c2ae <osThreadNew+0xca>
          mem = 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	61bb      	str	r3, [r7, #24]
 800c2a8:	e001      	b.n	800c2ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d110      	bne.n	800c2d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c2bc:	9202      	str	r2, [sp, #8]
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	6a3a      	ldr	r2, [r7, #32]
 800c2c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f000 fe0c 	bl	800cee8 <xTaskCreateStatic>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	613b      	str	r3, [r7, #16]
 800c2d4:	e013      	b.n	800c2fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d110      	bne.n	800c2fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	f107 0310 	add.w	r3, r7, #16
 800c2e4:	9301      	str	r3, [sp, #4]
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f000 fe57 	bl	800cfa2 <xTaskCreate>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d001      	beq.n	800c2fe <osThreadNew+0x11a>
            hTask = NULL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c2fe:	693b      	ldr	r3, [r7, #16]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3728      	adds	r7, #40	; 0x28
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c310:	f3ef 8305 	mrs	r3, IPSR
 800c314:	60bb      	str	r3, [r7, #8]
  return(result);
 800c316:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <osDelay+0x1c>
    stat = osErrorISR;
 800c31c:	f06f 0305 	mvn.w	r3, #5
 800c320:	60fb      	str	r3, [r7, #12]
 800c322:	e007      	b.n	800c334 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c324:	2300      	movs	r3, #0
 800c326:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d002      	beq.n	800c334 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 ff7c 	bl	800d22c <vTaskDelay>
    }
  }

  return (stat);
 800c334:	68fb      	ldr	r3, [r7, #12]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
	...

0800c340 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4a07      	ldr	r2, [pc, #28]	; (800c36c <vApplicationGetIdleTaskMemory+0x2c>)
 800c350:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	4a06      	ldr	r2, [pc, #24]	; (800c370 <vApplicationGetIdleTaskMemory+0x30>)
 800c356:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2280      	movs	r2, #128	; 0x80
 800c35c:	601a      	str	r2, [r3, #0]
}
 800c35e:	bf00      	nop
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	2000076c 	.word	0x2000076c
 800c370:	200007c8 	.word	0x200007c8

0800c374 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	4a07      	ldr	r2, [pc, #28]	; (800c3a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800c384:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	4a06      	ldr	r2, [pc, #24]	; (800c3a4 <vApplicationGetTimerTaskMemory+0x30>)
 800c38a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c392:	601a      	str	r2, [r3, #0]
}
 800c394:	bf00      	nop
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	200009c8 	.word	0x200009c8
 800c3a4:	20000a24 	.word	0x20000a24

0800c3a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f103 0208 	add.w	r2, r3, #8
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c3c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f103 0208 	add.w	r2, r3, #8
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f103 0208 	add.w	r2, r3, #8
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c3f6:	bf00      	nop
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr

0800c402 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c402:	b480      	push	{r7}
 800c404:	b085      	sub	sp, #20
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	689a      	ldr	r2, [r3, #8]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	683a      	ldr	r2, [r7, #0]
 800c426:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	601a      	str	r2, [r3, #0]
}
 800c43e:	bf00      	nop
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr

0800c44a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c44a:	b480      	push	{r7}
 800c44c:	b085      	sub	sp, #20
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c460:	d103      	bne.n	800c46a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	e00c      	b.n	800c484 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3308      	adds	r3, #8
 800c46e:	60fb      	str	r3, [r7, #12]
 800c470:	e002      	b.n	800c478 <vListInsert+0x2e>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	60fb      	str	r3, [r7, #12]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	429a      	cmp	r2, r3
 800c482:	d2f6      	bcs.n	800c472 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	685a      	ldr	r2, [r3, #4]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	601a      	str	r2, [r3, #0]
}
 800c4b0:	bf00      	nop
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	6892      	ldr	r2, [r2, #8]
 800c4d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	6852      	ldr	r2, [r2, #4]
 800c4dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d103      	bne.n	800c4f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	689a      	ldr	r2, [r3, #8]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	1e5a      	subs	r2, r3, #1
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10a      	bne.n	800c53a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c528:	f383 8811 	msr	BASEPRI, r3
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c536:	bf00      	nop
 800c538:	e7fe      	b.n	800c538 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c53a:	f002 f84b 	bl	800e5d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c546:	68f9      	ldr	r1, [r7, #12]
 800c548:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c54a:	fb01 f303 	mul.w	r3, r1, r3
 800c54e:	441a      	add	r2, r3
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c56a:	3b01      	subs	r3, #1
 800c56c:	68f9      	ldr	r1, [r7, #12]
 800c56e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c570:	fb01 f303 	mul.w	r3, r1, r3
 800c574:	441a      	add	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	22ff      	movs	r2, #255	; 0xff
 800c57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	22ff      	movs	r2, #255	; 0xff
 800c586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d114      	bne.n	800c5ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01a      	beq.n	800c5ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3310      	adds	r3, #16
 800c59c:	4618      	mov	r0, r3
 800c59e:	f001 f903 	bl	800d7a8 <xTaskRemoveFromEventList>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d012      	beq.n	800c5ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c5a8:	4b0c      	ldr	r3, [pc, #48]	; (800c5dc <xQueueGenericReset+0xcc>)
 800c5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	e009      	b.n	800c5ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3310      	adds	r3, #16
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7ff fef2 	bl	800c3a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	3324      	adds	r3, #36	; 0x24
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff feed 	bl	800c3a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c5ce:	f002 f831 	bl	800e634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c5d2:	2301      	movs	r3, #1
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	e000ed04 	.word	0xe000ed04

0800c5e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08e      	sub	sp, #56	; 0x38
 800c5e4:	af02      	add	r7, sp, #8
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
 800c5ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10a      	bne.n	800c60a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c606:	bf00      	nop
 800c608:	e7fe      	b.n	800c608 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <xQueueGenericCreateStatic+0x52>
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d001      	beq.n	800c636 <xQueueGenericCreateStatic+0x56>
 800c632:	2301      	movs	r3, #1
 800c634:	e000      	b.n	800c638 <xQueueGenericCreateStatic+0x58>
 800c636:	2300      	movs	r3, #0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10a      	bne.n	800c652 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	623b      	str	r3, [r7, #32]
}
 800c64e:	bf00      	nop
 800c650:	e7fe      	b.n	800c650 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d102      	bne.n	800c65e <xQueueGenericCreateStatic+0x7e>
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <xQueueGenericCreateStatic+0x82>
 800c65e:	2301      	movs	r3, #1
 800c660:	e000      	b.n	800c664 <xQueueGenericCreateStatic+0x84>
 800c662:	2300      	movs	r3, #0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10a      	bne.n	800c67e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	61fb      	str	r3, [r7, #28]
}
 800c67a:	bf00      	nop
 800c67c:	e7fe      	b.n	800c67c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c67e:	2350      	movs	r3, #80	; 0x50
 800c680:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	2b50      	cmp	r3, #80	; 0x50
 800c686:	d00a      	beq.n	800c69e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	61bb      	str	r3, [r7, #24]
}
 800c69a:	bf00      	nop
 800c69c:	e7fe      	b.n	800c69c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c69e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00d      	beq.n	800c6c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	68b9      	ldr	r1, [r7, #8]
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f000 f805 	bl	800c6d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3730      	adds	r7, #48	; 0x30
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
 800c6dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d103      	bne.n	800c6ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	69ba      	ldr	r2, [r7, #24]
 800c6e8:	601a      	str	r2, [r3, #0]
 800c6ea:	e002      	b.n	800c6f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	68ba      	ldr	r2, [r7, #8]
 800c6fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c6fe:	2101      	movs	r1, #1
 800c700:	69b8      	ldr	r0, [r7, #24]
 800c702:	f7ff ff05 	bl	800c510 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	78fa      	ldrb	r2, [r7, #3]
 800c70a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
	...

0800c718 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08e      	sub	sp, #56	; 0x38
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
 800c724:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c726:	2300      	movs	r3, #0
 800c728:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10a      	bne.n	800c74a <xQueueGenericSend+0x32>
	__asm volatile
 800c734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c738:	f383 8811 	msr	BASEPRI, r3
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c746:	bf00      	nop
 800c748:	e7fe      	b.n	800c748 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d103      	bne.n	800c758 <xQueueGenericSend+0x40>
 800c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c754:	2b00      	cmp	r3, #0
 800c756:	d101      	bne.n	800c75c <xQueueGenericSend+0x44>
 800c758:	2301      	movs	r3, #1
 800c75a:	e000      	b.n	800c75e <xQueueGenericSend+0x46>
 800c75c:	2300      	movs	r3, #0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10a      	bne.n	800c778 <xQueueGenericSend+0x60>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c774:	bf00      	nop
 800c776:	e7fe      	b.n	800c776 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d103      	bne.n	800c786 <xQueueGenericSend+0x6e>
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c782:	2b01      	cmp	r3, #1
 800c784:	d101      	bne.n	800c78a <xQueueGenericSend+0x72>
 800c786:	2301      	movs	r3, #1
 800c788:	e000      	b.n	800c78c <xQueueGenericSend+0x74>
 800c78a:	2300      	movs	r3, #0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10a      	bne.n	800c7a6 <xQueueGenericSend+0x8e>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	623b      	str	r3, [r7, #32]
}
 800c7a2:	bf00      	nop
 800c7a4:	e7fe      	b.n	800c7a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7a6:	f001 f9bd 	bl	800db24 <xTaskGetSchedulerState>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d102      	bne.n	800c7b6 <xQueueGenericSend+0x9e>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d101      	bne.n	800c7ba <xQueueGenericSend+0xa2>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e000      	b.n	800c7bc <xQueueGenericSend+0xa4>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10a      	bne.n	800c7d6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	61fb      	str	r3, [r7, #28]
}
 800c7d2:	bf00      	nop
 800c7d4:	e7fe      	b.n	800c7d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7d6:	f001 fefd 	bl	800e5d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d302      	bcc.n	800c7ec <xQueueGenericSend+0xd4>
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2b02      	cmp	r3, #2
 800c7ea:	d129      	bne.n	800c840 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	68b9      	ldr	r1, [r7, #8]
 800c7f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7f2:	f000 fa0b 	bl	800cc0c <prvCopyDataToQueue>
 800c7f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d010      	beq.n	800c822 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	3324      	adds	r3, #36	; 0x24
 800c804:	4618      	mov	r0, r3
 800c806:	f000 ffcf 	bl	800d7a8 <xTaskRemoveFromEventList>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d013      	beq.n	800c838 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c810:	4b3f      	ldr	r3, [pc, #252]	; (800c910 <xQueueGenericSend+0x1f8>)
 800c812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	e00a      	b.n	800c838 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c824:	2b00      	cmp	r3, #0
 800c826:	d007      	beq.n	800c838 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c828:	4b39      	ldr	r3, [pc, #228]	; (800c910 <xQueueGenericSend+0x1f8>)
 800c82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c82e:	601a      	str	r2, [r3, #0]
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c838:	f001 fefc 	bl	800e634 <vPortExitCritical>
				return pdPASS;
 800c83c:	2301      	movs	r3, #1
 800c83e:	e063      	b.n	800c908 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d103      	bne.n	800c84e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c846:	f001 fef5 	bl	800e634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c84a:	2300      	movs	r3, #0
 800c84c:	e05c      	b.n	800c908 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c850:	2b00      	cmp	r3, #0
 800c852:	d106      	bne.n	800c862 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c854:	f107 0314 	add.w	r3, r7, #20
 800c858:	4618      	mov	r0, r3
 800c85a:	f001 f809 	bl	800d870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c85e:	2301      	movs	r3, #1
 800c860:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c862:	f001 fee7 	bl	800e634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c866:	f000 fd7b 	bl	800d360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c86a:	f001 feb3 	bl	800e5d4 <vPortEnterCritical>
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c874:	b25b      	sxtb	r3, r3
 800c876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87a:	d103      	bne.n	800c884 <xQueueGenericSend+0x16c>
 800c87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87e:	2200      	movs	r2, #0
 800c880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c88a:	b25b      	sxtb	r3, r3
 800c88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c890:	d103      	bne.n	800c89a <xQueueGenericSend+0x182>
 800c892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c894:	2200      	movs	r2, #0
 800c896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c89a:	f001 fecb 	bl	800e634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c89e:	1d3a      	adds	r2, r7, #4
 800c8a0:	f107 0314 	add.w	r3, r7, #20
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f000 fff8 	bl	800d89c <xTaskCheckForTimeOut>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d124      	bne.n	800c8fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c8b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8b4:	f000 faa2 	bl	800cdfc <prvIsQueueFull>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d018      	beq.n	800c8f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	3310      	adds	r3, #16
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	4611      	mov	r1, r2
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 ff1e 	bl	800d708 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c8cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8ce:	f000 fa2d 	bl	800cd2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c8d2:	f000 fd53 	bl	800d37c <xTaskResumeAll>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f47f af7c 	bne.w	800c7d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c8de:	4b0c      	ldr	r3, [pc, #48]	; (800c910 <xQueueGenericSend+0x1f8>)
 800c8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	e772      	b.n	800c7d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8f2:	f000 fa1b 	bl	800cd2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8f6:	f000 fd41 	bl	800d37c <xTaskResumeAll>
 800c8fa:	e76c      	b.n	800c7d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c8fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8fe:	f000 fa15 	bl	800cd2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c902:	f000 fd3b 	bl	800d37c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c906:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3738      	adds	r7, #56	; 0x38
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	e000ed04 	.word	0xe000ed04

0800c914 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b090      	sub	sp, #64	; 0x40
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
 800c920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10a      	bne.n	800c942 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d103      	bne.n	800c950 <xQueueGenericSendFromISR+0x3c>
 800c948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <xQueueGenericSendFromISR+0x40>
 800c950:	2301      	movs	r3, #1
 800c952:	e000      	b.n	800c956 <xQueueGenericSendFromISR+0x42>
 800c954:	2300      	movs	r3, #0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d10a      	bne.n	800c970 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c96c:	bf00      	nop
 800c96e:	e7fe      	b.n	800c96e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	2b02      	cmp	r3, #2
 800c974:	d103      	bne.n	800c97e <xQueueGenericSendFromISR+0x6a>
 800c976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d101      	bne.n	800c982 <xQueueGenericSendFromISR+0x6e>
 800c97e:	2301      	movs	r3, #1
 800c980:	e000      	b.n	800c984 <xQueueGenericSendFromISR+0x70>
 800c982:	2300      	movs	r3, #0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10a      	bne.n	800c99e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	623b      	str	r3, [r7, #32]
}
 800c99a:	bf00      	nop
 800c99c:	e7fe      	b.n	800c99c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c99e:	f001 fefb 	bl	800e798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c9a2:	f3ef 8211 	mrs	r2, BASEPRI
 800c9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	61fa      	str	r2, [r7, #28]
 800c9b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c9ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d302      	bcc.n	800c9d0 <xQueueGenericSendFromISR+0xbc>
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d12f      	bne.n	800ca30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c9e0:	683a      	ldr	r2, [r7, #0]
 800c9e2:	68b9      	ldr	r1, [r7, #8]
 800c9e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9e6:	f000 f911 	bl	800cc0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c9ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f2:	d112      	bne.n	800ca1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d016      	beq.n	800ca2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	3324      	adds	r3, #36	; 0x24
 800ca00:	4618      	mov	r0, r3
 800ca02:	f000 fed1 	bl	800d7a8 <xTaskRemoveFromEventList>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00e      	beq.n	800ca2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d00b      	beq.n	800ca2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	e007      	b.n	800ca2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ca1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca1e:	3301      	adds	r3, #1
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	b25a      	sxtb	r2, r3
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ca2e:	e001      	b.n	800ca34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca30:	2300      	movs	r3, #0
 800ca32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3740      	adds	r7, #64	; 0x40
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
	...

0800ca4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08c      	sub	sp, #48	; 0x30
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10a      	bne.n	800ca7c <xQueueReceive+0x30>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	623b      	str	r3, [r7, #32]
}
 800ca78:	bf00      	nop
 800ca7a:	e7fe      	b.n	800ca7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d103      	bne.n	800ca8a <xQueueReceive+0x3e>
 800ca82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <xQueueReceive+0x42>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e000      	b.n	800ca90 <xQueueReceive+0x44>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10a      	bne.n	800caaa <xQueueReceive+0x5e>
	__asm volatile
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	f383 8811 	msr	BASEPRI, r3
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	61fb      	str	r3, [r7, #28]
}
 800caa6:	bf00      	nop
 800caa8:	e7fe      	b.n	800caa8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800caaa:	f001 f83b 	bl	800db24 <xTaskGetSchedulerState>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d102      	bne.n	800caba <xQueueReceive+0x6e>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <xQueueReceive+0x72>
 800caba:	2301      	movs	r3, #1
 800cabc:	e000      	b.n	800cac0 <xQueueReceive+0x74>
 800cabe:	2300      	movs	r3, #0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10a      	bne.n	800cada <xQueueReceive+0x8e>
	__asm volatile
 800cac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	61bb      	str	r3, [r7, #24]
}
 800cad6:	bf00      	nop
 800cad8:	e7fe      	b.n	800cad8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cada:	f001 fd7b 	bl	800e5d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d01f      	beq.n	800cb2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800caea:	68b9      	ldr	r1, [r7, #8]
 800caec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caee:	f000 f8f7 	bl	800cce0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	1e5a      	subs	r2, r3, #1
 800caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00f      	beq.n	800cb22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb04:	3310      	adds	r3, #16
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 fe4e 	bl	800d7a8 <xTaskRemoveFromEventList>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d007      	beq.n	800cb22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb12:	4b3d      	ldr	r3, [pc, #244]	; (800cc08 <xQueueReceive+0x1bc>)
 800cb14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb18:	601a      	str	r2, [r3, #0]
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb22:	f001 fd87 	bl	800e634 <vPortExitCritical>
				return pdPASS;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e069      	b.n	800cbfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d103      	bne.n	800cb38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb30:	f001 fd80 	bl	800e634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb34:	2300      	movs	r3, #0
 800cb36:	e062      	b.n	800cbfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d106      	bne.n	800cb4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb3e:	f107 0310 	add.w	r3, r7, #16
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 fe94 	bl	800d870 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb4c:	f001 fd72 	bl	800e634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb50:	f000 fc06 	bl	800d360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb54:	f001 fd3e 	bl	800e5d4 <vPortEnterCritical>
 800cb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb5e:	b25b      	sxtb	r3, r3
 800cb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb64:	d103      	bne.n	800cb6e <xQueueReceive+0x122>
 800cb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb74:	b25b      	sxtb	r3, r3
 800cb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb7a:	d103      	bne.n	800cb84 <xQueueReceive+0x138>
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb84:	f001 fd56 	bl	800e634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb88:	1d3a      	adds	r2, r7, #4
 800cb8a:	f107 0310 	add.w	r3, r7, #16
 800cb8e:	4611      	mov	r1, r2
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 fe83 	bl	800d89c <xTaskCheckForTimeOut>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d123      	bne.n	800cbe4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb9e:	f000 f917 	bl	800cdd0 <prvIsQueueEmpty>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d017      	beq.n	800cbd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	3324      	adds	r3, #36	; 0x24
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	4611      	mov	r1, r2
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 fda9 	bl	800d708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbb8:	f000 f8b8 	bl	800cd2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cbbc:	f000 fbde 	bl	800d37c <xTaskResumeAll>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d189      	bne.n	800cada <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cbc6:	4b10      	ldr	r3, [pc, #64]	; (800cc08 <xQueueReceive+0x1bc>)
 800cbc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	e780      	b.n	800cada <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cbd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbda:	f000 f8a7 	bl	800cd2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbde:	f000 fbcd 	bl	800d37c <xTaskResumeAll>
 800cbe2:	e77a      	b.n	800cada <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cbe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbe6:	f000 f8a1 	bl	800cd2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbea:	f000 fbc7 	bl	800d37c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbf0:	f000 f8ee 	bl	800cdd0 <prvIsQueueEmpty>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f43f af6f 	beq.w	800cada <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cbfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3730      	adds	r7, #48	; 0x30
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	e000ed04 	.word	0xe000ed04

0800cc0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10d      	bne.n	800cc46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d14d      	bne.n	800ccce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 ff92 	bl	800db60 <xTaskPriorityDisinherit>
 800cc3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2200      	movs	r2, #0
 800cc42:	609a      	str	r2, [r3, #8]
 800cc44:	e043      	b.n	800ccce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d119      	bne.n	800cc80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6858      	ldr	r0, [r3, #4]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc54:	461a      	mov	r2, r3
 800cc56:	68b9      	ldr	r1, [r7, #8]
 800cc58:	f003 faed 	bl	8010236 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc64:	441a      	add	r2, r3
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	685a      	ldr	r2, [r3, #4]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d32b      	bcc.n	800ccce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	605a      	str	r2, [r3, #4]
 800cc7e:	e026      	b.n	800ccce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	68d8      	ldr	r0, [r3, #12]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc88:	461a      	mov	r2, r3
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	f003 fad3 	bl	8010236 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	68da      	ldr	r2, [r3, #12]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc98:	425b      	negs	r3, r3
 800cc9a:	441a      	add	r2, r3
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	68da      	ldr	r2, [r3, #12]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d207      	bcs.n	800ccbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	689a      	ldr	r2, [r3, #8]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb4:	425b      	negs	r3, r3
 800ccb6:	441a      	add	r2, r3
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d105      	bne.n	800ccce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	3b01      	subs	r3, #1
 800cccc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	1c5a      	adds	r2, r3, #1
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ccd6:	697b      	ldr	r3, [r7, #20]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3718      	adds	r7, #24
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d018      	beq.n	800cd24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	68da      	ldr	r2, [r3, #12]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	441a      	add	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	68da      	ldr	r2, [r3, #12]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d303      	bcc.n	800cd14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	68d9      	ldr	r1, [r3, #12]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	6838      	ldr	r0, [r7, #0]
 800cd20:	f003 fa89 	bl	8010236 <memcpy>
	}
}
 800cd24:	bf00      	nop
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cd34:	f001 fc4e 	bl	800e5d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd40:	e011      	b.n	800cd66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d012      	beq.n	800cd70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3324      	adds	r3, #36	; 0x24
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 fd2a 	bl	800d7a8 <xTaskRemoveFromEventList>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d001      	beq.n	800cd5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd5a:	f000 fe01 	bl	800d960 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
 800cd60:	3b01      	subs	r3, #1
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dce9      	bgt.n	800cd42 <prvUnlockQueue+0x16>
 800cd6e:	e000      	b.n	800cd72 <prvUnlockQueue+0x46>
					break;
 800cd70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	22ff      	movs	r2, #255	; 0xff
 800cd76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cd7a:	f001 fc5b 	bl	800e634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cd7e:	f001 fc29 	bl	800e5d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd8a:	e011      	b.n	800cdb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	691b      	ldr	r3, [r3, #16]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d012      	beq.n	800cdba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	3310      	adds	r3, #16
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 fd05 	bl	800d7a8 <xTaskRemoveFromEventList>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d001      	beq.n	800cda8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cda4:	f000 fddc 	bl	800d960 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cda8:	7bbb      	ldrb	r3, [r7, #14]
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cdb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	dce9      	bgt.n	800cd8c <prvUnlockQueue+0x60>
 800cdb8:	e000      	b.n	800cdbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cdba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	22ff      	movs	r2, #255	; 0xff
 800cdc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cdc4:	f001 fc36 	bl	800e634 <vPortExitCritical>
}
 800cdc8:	bf00      	nop
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdd8:	f001 fbfc 	bl	800e5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d102      	bne.n	800cdea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cde4:	2301      	movs	r3, #1
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	e001      	b.n	800cdee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cdea:	2300      	movs	r3, #0
 800cdec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdee:	f001 fc21 	bl	800e634 <vPortExitCritical>

	return xReturn;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce04:	f001 fbe6 	bl	800e5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d102      	bne.n	800ce1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ce14:	2301      	movs	r3, #1
 800ce16:	60fb      	str	r3, [r7, #12]
 800ce18:	e001      	b.n	800ce1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce1e:	f001 fc09 	bl	800e634 <vPortExitCritical>

	return xReturn;
 800ce22:	68fb      	ldr	r3, [r7, #12]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3710      	adds	r7, #16
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce36:	2300      	movs	r3, #0
 800ce38:	60fb      	str	r3, [r7, #12]
 800ce3a:	e014      	b.n	800ce66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ce3c:	4a0f      	ldr	r2, [pc, #60]	; (800ce7c <vQueueAddToRegistry+0x50>)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10b      	bne.n	800ce60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ce48:	490c      	ldr	r1, [pc, #48]	; (800ce7c <vQueueAddToRegistry+0x50>)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	683a      	ldr	r2, [r7, #0]
 800ce4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ce52:	4a0a      	ldr	r2, [pc, #40]	; (800ce7c <vQueueAddToRegistry+0x50>)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	00db      	lsls	r3, r3, #3
 800ce58:	4413      	add	r3, r2
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ce5e:	e006      	b.n	800ce6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	3301      	adds	r3, #1
 800ce64:	60fb      	str	r3, [r7, #12]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b07      	cmp	r3, #7
 800ce6a:	d9e7      	bls.n	800ce3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ce6c:	bf00      	nop
 800ce6e:	bf00      	nop
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	20000e24 	.word	0x20000e24

0800ce80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce90:	f001 fba0 	bl	800e5d4 <vPortEnterCritical>
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce9a:	b25b      	sxtb	r3, r3
 800ce9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea0:	d103      	bne.n	800ceaa <vQueueWaitForMessageRestricted+0x2a>
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ceb0:	b25b      	sxtb	r3, r3
 800ceb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb6:	d103      	bne.n	800cec0 <vQueueWaitForMessageRestricted+0x40>
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cec0:	f001 fbb8 	bl	800e634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d106      	bne.n	800ceda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	3324      	adds	r3, #36	; 0x24
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	68b9      	ldr	r1, [r7, #8]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f000 fc3b 	bl	800d750 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ceda:	6978      	ldr	r0, [r7, #20]
 800cedc:	f7ff ff26 	bl	800cd2c <prvUnlockQueue>
	}
 800cee0:	bf00      	nop
 800cee2:	3718      	adds	r7, #24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08e      	sub	sp, #56	; 0x38
 800ceec:	af04      	add	r7, sp, #16
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
 800cef4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10a      	bne.n	800cf12 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	623b      	str	r3, [r7, #32]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10a      	bne.n	800cf2e <xTaskCreateStatic+0x46>
	__asm volatile
 800cf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1c:	f383 8811 	msr	BASEPRI, r3
 800cf20:	f3bf 8f6f 	isb	sy
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	61fb      	str	r3, [r7, #28]
}
 800cf2a:	bf00      	nop
 800cf2c:	e7fe      	b.n	800cf2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cf2e:	235c      	movs	r3, #92	; 0x5c
 800cf30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	2b5c      	cmp	r3, #92	; 0x5c
 800cf36:	d00a      	beq.n	800cf4e <xTaskCreateStatic+0x66>
	__asm volatile
 800cf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	61bb      	str	r3, [r7, #24]
}
 800cf4a:	bf00      	nop
 800cf4c:	e7fe      	b.n	800cf4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d01e      	beq.n	800cf94 <xTaskCreateStatic+0xac>
 800cf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d01b      	beq.n	800cf94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf68:	2202      	movs	r2, #2
 800cf6a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf6e:	2300      	movs	r3, #0
 800cf70:	9303      	str	r3, [sp, #12]
 800cf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf74:	9302      	str	r3, [sp, #8]
 800cf76:	f107 0314 	add.w	r3, r7, #20
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	68b9      	ldr	r1, [r7, #8]
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f000 f850 	bl	800d02c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf8e:	f000 f8dd 	bl	800d14c <prvAddNewTaskToReadyList>
 800cf92:	e001      	b.n	800cf98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cf94:	2300      	movs	r3, #0
 800cf96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf98:	697b      	ldr	r3, [r7, #20]
	}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3728      	adds	r7, #40	; 0x28
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b08c      	sub	sp, #48	; 0x30
 800cfa6:	af04      	add	r7, sp, #16
 800cfa8:	60f8      	str	r0, [r7, #12]
 800cfaa:	60b9      	str	r1, [r7, #8]
 800cfac:	603b      	str	r3, [r7, #0]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cfb2:	88fb      	ldrh	r3, [r7, #6]
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f001 fc2e 	bl	800e818 <pvPortMalloc>
 800cfbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00e      	beq.n	800cfe2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cfc4:	205c      	movs	r0, #92	; 0x5c
 800cfc6:	f001 fc27 	bl	800e818 <pvPortMalloc>
 800cfca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d003      	beq.n	800cfda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	697a      	ldr	r2, [r7, #20]
 800cfd6:	631a      	str	r2, [r3, #48]	; 0x30
 800cfd8:	e005      	b.n	800cfe6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cfda:	6978      	ldr	r0, [r7, #20]
 800cfdc:	f001 fce8 	bl	800e9b0 <vPortFree>
 800cfe0:	e001      	b.n	800cfe6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d017      	beq.n	800d01c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	2200      	movs	r2, #0
 800cff0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cff4:	88fa      	ldrh	r2, [r7, #6]
 800cff6:	2300      	movs	r3, #0
 800cff8:	9303      	str	r3, [sp, #12]
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	9302      	str	r3, [sp, #8]
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	9301      	str	r3, [sp, #4]
 800d002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	68b9      	ldr	r1, [r7, #8]
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f000 f80e 	bl	800d02c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d010:	69f8      	ldr	r0, [r7, #28]
 800d012:	f000 f89b 	bl	800d14c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d016:	2301      	movs	r3, #1
 800d018:	61bb      	str	r3, [r7, #24]
 800d01a:	e002      	b.n	800d022 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d01c:	f04f 33ff 	mov.w	r3, #4294967295
 800d020:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d022:	69bb      	ldr	r3, [r7, #24]
	}
 800d024:	4618      	mov	r0, r3
 800d026:	3720      	adds	r7, #32
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b088      	sub	sp, #32
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
 800d038:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	461a      	mov	r2, r3
 800d044:	21a5      	movs	r1, #165	; 0xa5
 800d046:	f003 f876 	bl	8010136 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d054:	3b01      	subs	r3, #1
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	4413      	add	r3, r2
 800d05a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	f023 0307 	bic.w	r3, r3, #7
 800d062:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	f003 0307 	and.w	r3, r3, #7
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00a      	beq.n	800d084 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	617b      	str	r3, [r7, #20]
}
 800d080:	bf00      	nop
 800d082:	e7fe      	b.n	800d082 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d01f      	beq.n	800d0ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d08a:	2300      	movs	r3, #0
 800d08c:	61fb      	str	r3, [r7, #28]
 800d08e:	e012      	b.n	800d0b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	4413      	add	r3, r2
 800d096:	7819      	ldrb	r1, [r3, #0]
 800d098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	4413      	add	r3, r2
 800d09e:	3334      	adds	r3, #52	; 0x34
 800d0a0:	460a      	mov	r2, r1
 800d0a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d006      	beq.n	800d0be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	61fb      	str	r3, [r7, #28]
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	2b0f      	cmp	r3, #15
 800d0ba:	d9e9      	bls.n	800d090 <prvInitialiseNewTask+0x64>
 800d0bc:	e000      	b.n	800d0c0 <prvInitialiseNewTask+0x94>
			{
				break;
 800d0be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d0c8:	e003      	b.n	800d0d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d4:	2b37      	cmp	r3, #55	; 0x37
 800d0d6:	d901      	bls.n	800d0dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d0d8:	2337      	movs	r3, #55	; 0x37
 800d0da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7ff f978 	bl	800c3e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fa:	3318      	adds	r3, #24
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff f973 	bl	800c3e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d106:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d116:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11a:	2200      	movs	r2, #0
 800d11c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d120:	2200      	movs	r2, #0
 800d122:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d126:	683a      	ldr	r2, [r7, #0]
 800d128:	68f9      	ldr	r1, [r7, #12]
 800d12a:	69b8      	ldr	r0, [r7, #24]
 800d12c:	f001 f928 	bl	800e380 <pxPortInitialiseStack>
 800d130:	4602      	mov	r2, r0
 800d132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d134:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d002      	beq.n	800d142 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d140:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d142:	bf00      	nop
 800d144:	3720      	adds	r7, #32
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
	...

0800d14c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d154:	f001 fa3e 	bl	800e5d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d158:	4b2d      	ldr	r3, [pc, #180]	; (800d210 <prvAddNewTaskToReadyList+0xc4>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3301      	adds	r3, #1
 800d15e:	4a2c      	ldr	r2, [pc, #176]	; (800d210 <prvAddNewTaskToReadyList+0xc4>)
 800d160:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d162:	4b2c      	ldr	r3, [pc, #176]	; (800d214 <prvAddNewTaskToReadyList+0xc8>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d109      	bne.n	800d17e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d16a:	4a2a      	ldr	r2, [pc, #168]	; (800d214 <prvAddNewTaskToReadyList+0xc8>)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d170:	4b27      	ldr	r3, [pc, #156]	; (800d210 <prvAddNewTaskToReadyList+0xc4>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d110      	bne.n	800d19a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d178:	f000 fc16 	bl	800d9a8 <prvInitialiseTaskLists>
 800d17c:	e00d      	b.n	800d19a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d17e:	4b26      	ldr	r3, [pc, #152]	; (800d218 <prvAddNewTaskToReadyList+0xcc>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d109      	bne.n	800d19a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d186:	4b23      	ldr	r3, [pc, #140]	; (800d214 <prvAddNewTaskToReadyList+0xc8>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d190:	429a      	cmp	r2, r3
 800d192:	d802      	bhi.n	800d19a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d194:	4a1f      	ldr	r2, [pc, #124]	; (800d214 <prvAddNewTaskToReadyList+0xc8>)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d19a:	4b20      	ldr	r3, [pc, #128]	; (800d21c <prvAddNewTaskToReadyList+0xd0>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	4a1e      	ldr	r2, [pc, #120]	; (800d21c <prvAddNewTaskToReadyList+0xd0>)
 800d1a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d1a4:	4b1d      	ldr	r3, [pc, #116]	; (800d21c <prvAddNewTaskToReadyList+0xd0>)
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b0:	4b1b      	ldr	r3, [pc, #108]	; (800d220 <prvAddNewTaskToReadyList+0xd4>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d903      	bls.n	800d1c0 <prvAddNewTaskToReadyList+0x74>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1bc:	4a18      	ldr	r2, [pc, #96]	; (800d220 <prvAddNewTaskToReadyList+0xd4>)
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	4413      	add	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4a15      	ldr	r2, [pc, #84]	; (800d224 <prvAddNewTaskToReadyList+0xd8>)
 800d1ce:	441a      	add	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	3304      	adds	r3, #4
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	f7ff f913 	bl	800c402 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d1dc:	f001 fa2a 	bl	800e634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d1e0:	4b0d      	ldr	r3, [pc, #52]	; (800d218 <prvAddNewTaskToReadyList+0xcc>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00e      	beq.n	800d206 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1e8:	4b0a      	ldr	r3, [pc, #40]	; (800d214 <prvAddNewTaskToReadyList+0xc8>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d207      	bcs.n	800d206 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1f6:	4b0c      	ldr	r3, [pc, #48]	; (800d228 <prvAddNewTaskToReadyList+0xdc>)
 800d1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1fc:	601a      	str	r2, [r3, #0]
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d206:	bf00      	nop
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	20001338 	.word	0x20001338
 800d214:	20000e64 	.word	0x20000e64
 800d218:	20001344 	.word	0x20001344
 800d21c:	20001354 	.word	0x20001354
 800d220:	20001340 	.word	0x20001340
 800d224:	20000e68 	.word	0x20000e68
 800d228:	e000ed04 	.word	0xe000ed04

0800d22c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d234:	2300      	movs	r3, #0
 800d236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d017      	beq.n	800d26e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d23e:	4b13      	ldr	r3, [pc, #76]	; (800d28c <vTaskDelay+0x60>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00a      	beq.n	800d25c <vTaskDelay+0x30>
	__asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	60bb      	str	r3, [r7, #8]
}
 800d258:	bf00      	nop
 800d25a:	e7fe      	b.n	800d25a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d25c:	f000 f880 	bl	800d360 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d260:	2100      	movs	r1, #0
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 fcea 	bl	800dc3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d268:	f000 f888 	bl	800d37c <xTaskResumeAll>
 800d26c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d107      	bne.n	800d284 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d274:	4b06      	ldr	r3, [pc, #24]	; (800d290 <vTaskDelay+0x64>)
 800d276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d27a:	601a      	str	r2, [r3, #0]
 800d27c:	f3bf 8f4f 	dsb	sy
 800d280:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d284:	bf00      	nop
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	20001360 	.word	0x20001360
 800d290:	e000ed04 	.word	0xe000ed04

0800d294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b08a      	sub	sp, #40	; 0x28
 800d298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d29a:	2300      	movs	r3, #0
 800d29c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d2a2:	463a      	mov	r2, r7
 800d2a4:	1d39      	adds	r1, r7, #4
 800d2a6:	f107 0308 	add.w	r3, r7, #8
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7ff f848 	bl	800c340 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d2b0:	6839      	ldr	r1, [r7, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	68ba      	ldr	r2, [r7, #8]
 800d2b6:	9202      	str	r2, [sp, #8]
 800d2b8:	9301      	str	r3, [sp, #4]
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	2300      	movs	r3, #0
 800d2c0:	460a      	mov	r2, r1
 800d2c2:	4921      	ldr	r1, [pc, #132]	; (800d348 <vTaskStartScheduler+0xb4>)
 800d2c4:	4821      	ldr	r0, [pc, #132]	; (800d34c <vTaskStartScheduler+0xb8>)
 800d2c6:	f7ff fe0f 	bl	800cee8 <xTaskCreateStatic>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	4a20      	ldr	r2, [pc, #128]	; (800d350 <vTaskStartScheduler+0xbc>)
 800d2ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2d0:	4b1f      	ldr	r3, [pc, #124]	; (800d350 <vTaskStartScheduler+0xbc>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d002      	beq.n	800d2de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	617b      	str	r3, [r7, #20]
 800d2dc:	e001      	b.n	800d2e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d102      	bne.n	800d2ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2e8:	f000 fcfc 	bl	800dce4 <xTimerCreateTimerTask>
 800d2ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d116      	bne.n	800d322 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	613b      	str	r3, [r7, #16]
}
 800d306:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d308:	4b12      	ldr	r3, [pc, #72]	; (800d354 <vTaskStartScheduler+0xc0>)
 800d30a:	f04f 32ff 	mov.w	r2, #4294967295
 800d30e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d310:	4b11      	ldr	r3, [pc, #68]	; (800d358 <vTaskStartScheduler+0xc4>)
 800d312:	2201      	movs	r2, #1
 800d314:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d316:	4b11      	ldr	r3, [pc, #68]	; (800d35c <vTaskStartScheduler+0xc8>)
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d31c:	f001 f8b8 	bl	800e490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d320:	e00e      	b.n	800d340 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d328:	d10a      	bne.n	800d340 <vTaskStartScheduler+0xac>
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	60fb      	str	r3, [r7, #12]
}
 800d33c:	bf00      	nop
 800d33e:	e7fe      	b.n	800d33e <vTaskStartScheduler+0xaa>
}
 800d340:	bf00      	nop
 800d342:	3718      	adds	r7, #24
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	08012378 	.word	0x08012378
 800d34c:	0800d979 	.word	0x0800d979
 800d350:	2000135c 	.word	0x2000135c
 800d354:	20001358 	.word	0x20001358
 800d358:	20001344 	.word	0x20001344
 800d35c:	2000133c 	.word	0x2000133c

0800d360 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d360:	b480      	push	{r7}
 800d362:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d364:	4b04      	ldr	r3, [pc, #16]	; (800d378 <vTaskSuspendAll+0x18>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	3301      	adds	r3, #1
 800d36a:	4a03      	ldr	r2, [pc, #12]	; (800d378 <vTaskSuspendAll+0x18>)
 800d36c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d36e:	bf00      	nop
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	20001360 	.word	0x20001360

0800d37c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d382:	2300      	movs	r3, #0
 800d384:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d386:	2300      	movs	r3, #0
 800d388:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d38a:	4b42      	ldr	r3, [pc, #264]	; (800d494 <xTaskResumeAll+0x118>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10a      	bne.n	800d3a8 <xTaskResumeAll+0x2c>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	603b      	str	r3, [r7, #0]
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d3a8:	f001 f914 	bl	800e5d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d3ac:	4b39      	ldr	r3, [pc, #228]	; (800d494 <xTaskResumeAll+0x118>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	4a38      	ldr	r2, [pc, #224]	; (800d494 <xTaskResumeAll+0x118>)
 800d3b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3b6:	4b37      	ldr	r3, [pc, #220]	; (800d494 <xTaskResumeAll+0x118>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d162      	bne.n	800d484 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d3be:	4b36      	ldr	r3, [pc, #216]	; (800d498 <xTaskResumeAll+0x11c>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d05e      	beq.n	800d484 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3c6:	e02f      	b.n	800d428 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c8:	4b34      	ldr	r3, [pc, #208]	; (800d49c <xTaskResumeAll+0x120>)
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	3318      	adds	r3, #24
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7ff f871 	bl	800c4bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7ff f86c 	bl	800c4bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e8:	4b2d      	ldr	r3, [pc, #180]	; (800d4a0 <xTaskResumeAll+0x124>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d903      	bls.n	800d3f8 <xTaskResumeAll+0x7c>
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f4:	4a2a      	ldr	r2, [pc, #168]	; (800d4a0 <xTaskResumeAll+0x124>)
 800d3f6:	6013      	str	r3, [r2, #0]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4413      	add	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4a27      	ldr	r2, [pc, #156]	; (800d4a4 <xTaskResumeAll+0x128>)
 800d406:	441a      	add	r2, r3
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	3304      	adds	r3, #4
 800d40c:	4619      	mov	r1, r3
 800d40e:	4610      	mov	r0, r2
 800d410:	f7fe fff7 	bl	800c402 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d418:	4b23      	ldr	r3, [pc, #140]	; (800d4a8 <xTaskResumeAll+0x12c>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41e:	429a      	cmp	r2, r3
 800d420:	d302      	bcc.n	800d428 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d422:	4b22      	ldr	r3, [pc, #136]	; (800d4ac <xTaskResumeAll+0x130>)
 800d424:	2201      	movs	r2, #1
 800d426:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d428:	4b1c      	ldr	r3, [pc, #112]	; (800d49c <xTaskResumeAll+0x120>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1cb      	bne.n	800d3c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d001      	beq.n	800d43a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d436:	f000 fb55 	bl	800dae4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d43a:	4b1d      	ldr	r3, [pc, #116]	; (800d4b0 <xTaskResumeAll+0x134>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d010      	beq.n	800d468 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d446:	f000 f847 	bl	800d4d8 <xTaskIncrementTick>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d002      	beq.n	800d456 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d450:	4b16      	ldr	r3, [pc, #88]	; (800d4ac <xTaskResumeAll+0x130>)
 800d452:	2201      	movs	r2, #1
 800d454:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	3b01      	subs	r3, #1
 800d45a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1f1      	bne.n	800d446 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d462:	4b13      	ldr	r3, [pc, #76]	; (800d4b0 <xTaskResumeAll+0x134>)
 800d464:	2200      	movs	r2, #0
 800d466:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d468:	4b10      	ldr	r3, [pc, #64]	; (800d4ac <xTaskResumeAll+0x130>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d009      	beq.n	800d484 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d470:	2301      	movs	r3, #1
 800d472:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d474:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <xTaskResumeAll+0x138>)
 800d476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d47a:	601a      	str	r2, [r3, #0]
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d484:	f001 f8d6 	bl	800e634 <vPortExitCritical>

	return xAlreadyYielded;
 800d488:	68bb      	ldr	r3, [r7, #8]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	20001360 	.word	0x20001360
 800d498:	20001338 	.word	0x20001338
 800d49c:	200012f8 	.word	0x200012f8
 800d4a0:	20001340 	.word	0x20001340
 800d4a4:	20000e68 	.word	0x20000e68
 800d4a8:	20000e64 	.word	0x20000e64
 800d4ac:	2000134c 	.word	0x2000134c
 800d4b0:	20001348 	.word	0x20001348
 800d4b4:	e000ed04 	.word	0xe000ed04

0800d4b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d4be:	4b05      	ldr	r3, [pc, #20]	; (800d4d4 <xTaskGetTickCount+0x1c>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d4c4:	687b      	ldr	r3, [r7, #4]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	370c      	adds	r7, #12
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	2000133c 	.word	0x2000133c

0800d4d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b086      	sub	sp, #24
 800d4dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4e2:	4b4f      	ldr	r3, [pc, #316]	; (800d620 <xTaskIncrementTick+0x148>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f040 808f 	bne.w	800d60a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4ec:	4b4d      	ldr	r3, [pc, #308]	; (800d624 <xTaskIncrementTick+0x14c>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4f4:	4a4b      	ldr	r2, [pc, #300]	; (800d624 <xTaskIncrementTick+0x14c>)
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d120      	bne.n	800d542 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d500:	4b49      	ldr	r3, [pc, #292]	; (800d628 <xTaskIncrementTick+0x150>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00a      	beq.n	800d520 <xTaskIncrementTick+0x48>
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	603b      	str	r3, [r7, #0]
}
 800d51c:	bf00      	nop
 800d51e:	e7fe      	b.n	800d51e <xTaskIncrementTick+0x46>
 800d520:	4b41      	ldr	r3, [pc, #260]	; (800d628 <xTaskIncrementTick+0x150>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	60fb      	str	r3, [r7, #12]
 800d526:	4b41      	ldr	r3, [pc, #260]	; (800d62c <xTaskIncrementTick+0x154>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a3f      	ldr	r2, [pc, #252]	; (800d628 <xTaskIncrementTick+0x150>)
 800d52c:	6013      	str	r3, [r2, #0]
 800d52e:	4a3f      	ldr	r2, [pc, #252]	; (800d62c <xTaskIncrementTick+0x154>)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6013      	str	r3, [r2, #0]
 800d534:	4b3e      	ldr	r3, [pc, #248]	; (800d630 <xTaskIncrementTick+0x158>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3301      	adds	r3, #1
 800d53a:	4a3d      	ldr	r2, [pc, #244]	; (800d630 <xTaskIncrementTick+0x158>)
 800d53c:	6013      	str	r3, [r2, #0]
 800d53e:	f000 fad1 	bl	800dae4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d542:	4b3c      	ldr	r3, [pc, #240]	; (800d634 <xTaskIncrementTick+0x15c>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	693a      	ldr	r2, [r7, #16]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d349      	bcc.n	800d5e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d54c:	4b36      	ldr	r3, [pc, #216]	; (800d628 <xTaskIncrementTick+0x150>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d104      	bne.n	800d560 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d556:	4b37      	ldr	r3, [pc, #220]	; (800d634 <xTaskIncrementTick+0x15c>)
 800d558:	f04f 32ff 	mov.w	r2, #4294967295
 800d55c:	601a      	str	r2, [r3, #0]
					break;
 800d55e:	e03f      	b.n	800d5e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d560:	4b31      	ldr	r3, [pc, #196]	; (800d628 <xTaskIncrementTick+0x150>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d570:	693a      	ldr	r2, [r7, #16]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	429a      	cmp	r2, r3
 800d576:	d203      	bcs.n	800d580 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d578:	4a2e      	ldr	r2, [pc, #184]	; (800d634 <xTaskIncrementTick+0x15c>)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d57e:	e02f      	b.n	800d5e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	3304      	adds	r3, #4
 800d584:	4618      	mov	r0, r3
 800d586:	f7fe ff99 	bl	800c4bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d004      	beq.n	800d59c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	3318      	adds	r3, #24
 800d596:	4618      	mov	r0, r3
 800d598:	f7fe ff90 	bl	800c4bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a0:	4b25      	ldr	r3, [pc, #148]	; (800d638 <xTaskIncrementTick+0x160>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d903      	bls.n	800d5b0 <xTaskIncrementTick+0xd8>
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ac:	4a22      	ldr	r2, [pc, #136]	; (800d638 <xTaskIncrementTick+0x160>)
 800d5ae:	6013      	str	r3, [r2, #0]
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4413      	add	r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4a1f      	ldr	r2, [pc, #124]	; (800d63c <xTaskIncrementTick+0x164>)
 800d5be:	441a      	add	r2, r3
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	3304      	adds	r3, #4
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	4610      	mov	r0, r2
 800d5c8:	f7fe ff1b 	bl	800c402 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d0:	4b1b      	ldr	r3, [pc, #108]	; (800d640 <xTaskIncrementTick+0x168>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d3b8      	bcc.n	800d54c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5de:	e7b5      	b.n	800d54c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5e0:	4b17      	ldr	r3, [pc, #92]	; (800d640 <xTaskIncrementTick+0x168>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e6:	4915      	ldr	r1, [pc, #84]	; (800d63c <xTaskIncrementTick+0x164>)
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	4413      	add	r3, r2
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	440b      	add	r3, r1
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d901      	bls.n	800d5fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5fc:	4b11      	ldr	r3, [pc, #68]	; (800d644 <xTaskIncrementTick+0x16c>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d007      	beq.n	800d614 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d604:	2301      	movs	r3, #1
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	e004      	b.n	800d614 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d60a:	4b0f      	ldr	r3, [pc, #60]	; (800d648 <xTaskIncrementTick+0x170>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	3301      	adds	r3, #1
 800d610:	4a0d      	ldr	r2, [pc, #52]	; (800d648 <xTaskIncrementTick+0x170>)
 800d612:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d614:	697b      	ldr	r3, [r7, #20]
}
 800d616:	4618      	mov	r0, r3
 800d618:	3718      	adds	r7, #24
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	20001360 	.word	0x20001360
 800d624:	2000133c 	.word	0x2000133c
 800d628:	200012f0 	.word	0x200012f0
 800d62c:	200012f4 	.word	0x200012f4
 800d630:	20001350 	.word	0x20001350
 800d634:	20001358 	.word	0x20001358
 800d638:	20001340 	.word	0x20001340
 800d63c:	20000e68 	.word	0x20000e68
 800d640:	20000e64 	.word	0x20000e64
 800d644:	2000134c 	.word	0x2000134c
 800d648:	20001348 	.word	0x20001348

0800d64c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d64c:	b480      	push	{r7}
 800d64e:	b085      	sub	sp, #20
 800d650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d652:	4b28      	ldr	r3, [pc, #160]	; (800d6f4 <vTaskSwitchContext+0xa8>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d003      	beq.n	800d662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d65a:	4b27      	ldr	r3, [pc, #156]	; (800d6f8 <vTaskSwitchContext+0xac>)
 800d65c:	2201      	movs	r2, #1
 800d65e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d660:	e041      	b.n	800d6e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d662:	4b25      	ldr	r3, [pc, #148]	; (800d6f8 <vTaskSwitchContext+0xac>)
 800d664:	2200      	movs	r2, #0
 800d666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d668:	4b24      	ldr	r3, [pc, #144]	; (800d6fc <vTaskSwitchContext+0xb0>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	60fb      	str	r3, [r7, #12]
 800d66e:	e010      	b.n	800d692 <vTaskSwitchContext+0x46>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10a      	bne.n	800d68c <vTaskSwitchContext+0x40>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	607b      	str	r3, [r7, #4]
}
 800d688:	bf00      	nop
 800d68a:	e7fe      	b.n	800d68a <vTaskSwitchContext+0x3e>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	3b01      	subs	r3, #1
 800d690:	60fb      	str	r3, [r7, #12]
 800d692:	491b      	ldr	r1, [pc, #108]	; (800d700 <vTaskSwitchContext+0xb4>)
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	4613      	mov	r3, r2
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4413      	add	r3, r2
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	440b      	add	r3, r1
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d0e4      	beq.n	800d670 <vTaskSwitchContext+0x24>
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	4413      	add	r3, r2
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	4a13      	ldr	r2, [pc, #76]	; (800d700 <vTaskSwitchContext+0xb4>)
 800d6b2:	4413      	add	r3, r2
 800d6b4:	60bb      	str	r3, [r7, #8]
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	685a      	ldr	r2, [r3, #4]
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	605a      	str	r2, [r3, #4]
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	685a      	ldr	r2, [r3, #4]
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	3308      	adds	r3, #8
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d104      	bne.n	800d6d6 <vTaskSwitchContext+0x8a>
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	685a      	ldr	r2, [r3, #4]
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	605a      	str	r2, [r3, #4]
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	4a09      	ldr	r2, [pc, #36]	; (800d704 <vTaskSwitchContext+0xb8>)
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	4a06      	ldr	r2, [pc, #24]	; (800d6fc <vTaskSwitchContext+0xb0>)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6013      	str	r3, [r2, #0]
}
 800d6e6:	bf00      	nop
 800d6e8:	3714      	adds	r7, #20
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	20001360 	.word	0x20001360
 800d6f8:	2000134c 	.word	0x2000134c
 800d6fc:	20001340 	.word	0x20001340
 800d700:	20000e68 	.word	0x20000e68
 800d704:	20000e64 	.word	0x20000e64

0800d708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10a      	bne.n	800d72e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	60fb      	str	r3, [r7, #12]
}
 800d72a:	bf00      	nop
 800d72c:	e7fe      	b.n	800d72c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d72e:	4b07      	ldr	r3, [pc, #28]	; (800d74c <vTaskPlaceOnEventList+0x44>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3318      	adds	r3, #24
 800d734:	4619      	mov	r1, r3
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7fe fe87 	bl	800c44a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d73c:	2101      	movs	r1, #1
 800d73e:	6838      	ldr	r0, [r7, #0]
 800d740:	f000 fa7c 	bl	800dc3c <prvAddCurrentTaskToDelayedList>
}
 800d744:	bf00      	nop
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	20000e64 	.word	0x20000e64

0800d750 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d10a      	bne.n	800d778 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d766:	f383 8811 	msr	BASEPRI, r3
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	617b      	str	r3, [r7, #20]
}
 800d774:	bf00      	nop
 800d776:	e7fe      	b.n	800d776 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d778:	4b0a      	ldr	r3, [pc, #40]	; (800d7a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	3318      	adds	r3, #24
 800d77e:	4619      	mov	r1, r3
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f7fe fe3e 	bl	800c402 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d78c:	f04f 33ff 	mov.w	r3, #4294967295
 800d790:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	68b8      	ldr	r0, [r7, #8]
 800d796:	f000 fa51 	bl	800dc3c <prvAddCurrentTaskToDelayedList>
	}
 800d79a:	bf00      	nop
 800d79c:	3718      	adds	r7, #24
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	20000e64 	.word	0x20000e64

0800d7a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b086      	sub	sp, #24
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10a      	bne.n	800d7d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	60fb      	str	r3, [r7, #12]
}
 800d7d0:	bf00      	nop
 800d7d2:	e7fe      	b.n	800d7d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	3318      	adds	r3, #24
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fe fe6f 	bl	800c4bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7de:	4b1e      	ldr	r3, [pc, #120]	; (800d858 <xTaskRemoveFromEventList+0xb0>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d11d      	bne.n	800d822 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	3304      	adds	r3, #4
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fe fe66 	bl	800c4bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f4:	4b19      	ldr	r3, [pc, #100]	; (800d85c <xTaskRemoveFromEventList+0xb4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d903      	bls.n	800d804 <xTaskRemoveFromEventList+0x5c>
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d800:	4a16      	ldr	r2, [pc, #88]	; (800d85c <xTaskRemoveFromEventList+0xb4>)
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d808:	4613      	mov	r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	4413      	add	r3, r2
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	4a13      	ldr	r2, [pc, #76]	; (800d860 <xTaskRemoveFromEventList+0xb8>)
 800d812:	441a      	add	r2, r3
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	3304      	adds	r3, #4
 800d818:	4619      	mov	r1, r3
 800d81a:	4610      	mov	r0, r2
 800d81c:	f7fe fdf1 	bl	800c402 <vListInsertEnd>
 800d820:	e005      	b.n	800d82e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	3318      	adds	r3, #24
 800d826:	4619      	mov	r1, r3
 800d828:	480e      	ldr	r0, [pc, #56]	; (800d864 <xTaskRemoveFromEventList+0xbc>)
 800d82a:	f7fe fdea 	bl	800c402 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d832:	4b0d      	ldr	r3, [pc, #52]	; (800d868 <xTaskRemoveFromEventList+0xc0>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d838:	429a      	cmp	r2, r3
 800d83a:	d905      	bls.n	800d848 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d83c:	2301      	movs	r3, #1
 800d83e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d840:	4b0a      	ldr	r3, [pc, #40]	; (800d86c <xTaskRemoveFromEventList+0xc4>)
 800d842:	2201      	movs	r2, #1
 800d844:	601a      	str	r2, [r3, #0]
 800d846:	e001      	b.n	800d84c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d848:	2300      	movs	r3, #0
 800d84a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d84c:	697b      	ldr	r3, [r7, #20]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3718      	adds	r7, #24
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	20001360 	.word	0x20001360
 800d85c:	20001340 	.word	0x20001340
 800d860:	20000e68 	.word	0x20000e68
 800d864:	200012f8 	.word	0x200012f8
 800d868:	20000e64 	.word	0x20000e64
 800d86c:	2000134c 	.word	0x2000134c

0800d870 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d878:	4b06      	ldr	r3, [pc, #24]	; (800d894 <vTaskInternalSetTimeOutState+0x24>)
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d880:	4b05      	ldr	r3, [pc, #20]	; (800d898 <vTaskInternalSetTimeOutState+0x28>)
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	605a      	str	r2, [r3, #4]
}
 800d888:	bf00      	nop
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr
 800d894:	20001350 	.word	0x20001350
 800d898:	2000133c 	.word	0x2000133c

0800d89c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b088      	sub	sp, #32
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10a      	bne.n	800d8c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	613b      	str	r3, [r7, #16]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	60fb      	str	r3, [r7, #12]
}
 800d8da:	bf00      	nop
 800d8dc:	e7fe      	b.n	800d8dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d8de:	f000 fe79 	bl	800e5d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8e2:	4b1d      	ldr	r3, [pc, #116]	; (800d958 <xTaskCheckForTimeOut+0xbc>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	69ba      	ldr	r2, [r7, #24]
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fa:	d102      	bne.n	800d902 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	61fb      	str	r3, [r7, #28]
 800d900:	e023      	b.n	800d94a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	4b15      	ldr	r3, [pc, #84]	; (800d95c <xTaskCheckForTimeOut+0xc0>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d007      	beq.n	800d91e <xTaskCheckForTimeOut+0x82>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	69ba      	ldr	r2, [r7, #24]
 800d914:	429a      	cmp	r2, r3
 800d916:	d302      	bcc.n	800d91e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d918:	2301      	movs	r3, #1
 800d91a:	61fb      	str	r3, [r7, #28]
 800d91c:	e015      	b.n	800d94a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	429a      	cmp	r2, r3
 800d926:	d20b      	bcs.n	800d940 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	1ad2      	subs	r2, r2, r3
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7ff ff9b 	bl	800d870 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d93a:	2300      	movs	r3, #0
 800d93c:	61fb      	str	r3, [r7, #28]
 800d93e:	e004      	b.n	800d94a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	2200      	movs	r2, #0
 800d944:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d946:	2301      	movs	r3, #1
 800d948:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d94a:	f000 fe73 	bl	800e634 <vPortExitCritical>

	return xReturn;
 800d94e:	69fb      	ldr	r3, [r7, #28]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3720      	adds	r7, #32
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	2000133c 	.word	0x2000133c
 800d95c:	20001350 	.word	0x20001350

0800d960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d960:	b480      	push	{r7}
 800d962:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d964:	4b03      	ldr	r3, [pc, #12]	; (800d974 <vTaskMissedYield+0x14>)
 800d966:	2201      	movs	r2, #1
 800d968:	601a      	str	r2, [r3, #0]
}
 800d96a:	bf00      	nop
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr
 800d974:	2000134c 	.word	0x2000134c

0800d978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d980:	f000 f852 	bl	800da28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d984:	4b06      	ldr	r3, [pc, #24]	; (800d9a0 <prvIdleTask+0x28>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d9f9      	bls.n	800d980 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d98c:	4b05      	ldr	r3, [pc, #20]	; (800d9a4 <prvIdleTask+0x2c>)
 800d98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d99c:	e7f0      	b.n	800d980 <prvIdleTask+0x8>
 800d99e:	bf00      	nop
 800d9a0:	20000e68 	.word	0x20000e68
 800d9a4:	e000ed04 	.word	0xe000ed04

0800d9a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	607b      	str	r3, [r7, #4]
 800d9b2:	e00c      	b.n	800d9ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	4413      	add	r3, r2
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	4a12      	ldr	r2, [pc, #72]	; (800da08 <prvInitialiseTaskLists+0x60>)
 800d9c0:	4413      	add	r3, r2
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fe fcf0 	bl	800c3a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	607b      	str	r3, [r7, #4]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b37      	cmp	r3, #55	; 0x37
 800d9d2:	d9ef      	bls.n	800d9b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9d4:	480d      	ldr	r0, [pc, #52]	; (800da0c <prvInitialiseTaskLists+0x64>)
 800d9d6:	f7fe fce7 	bl	800c3a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9da:	480d      	ldr	r0, [pc, #52]	; (800da10 <prvInitialiseTaskLists+0x68>)
 800d9dc:	f7fe fce4 	bl	800c3a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9e0:	480c      	ldr	r0, [pc, #48]	; (800da14 <prvInitialiseTaskLists+0x6c>)
 800d9e2:	f7fe fce1 	bl	800c3a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9e6:	480c      	ldr	r0, [pc, #48]	; (800da18 <prvInitialiseTaskLists+0x70>)
 800d9e8:	f7fe fcde 	bl	800c3a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9ec:	480b      	ldr	r0, [pc, #44]	; (800da1c <prvInitialiseTaskLists+0x74>)
 800d9ee:	f7fe fcdb 	bl	800c3a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9f2:	4b0b      	ldr	r3, [pc, #44]	; (800da20 <prvInitialiseTaskLists+0x78>)
 800d9f4:	4a05      	ldr	r2, [pc, #20]	; (800da0c <prvInitialiseTaskLists+0x64>)
 800d9f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9f8:	4b0a      	ldr	r3, [pc, #40]	; (800da24 <prvInitialiseTaskLists+0x7c>)
 800d9fa:	4a05      	ldr	r2, [pc, #20]	; (800da10 <prvInitialiseTaskLists+0x68>)
 800d9fc:	601a      	str	r2, [r3, #0]
}
 800d9fe:	bf00      	nop
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	20000e68 	.word	0x20000e68
 800da0c:	200012c8 	.word	0x200012c8
 800da10:	200012dc 	.word	0x200012dc
 800da14:	200012f8 	.word	0x200012f8
 800da18:	2000130c 	.word	0x2000130c
 800da1c:	20001324 	.word	0x20001324
 800da20:	200012f0 	.word	0x200012f0
 800da24:	200012f4 	.word	0x200012f4

0800da28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da2e:	e019      	b.n	800da64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da30:	f000 fdd0 	bl	800e5d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da34:	4b10      	ldr	r3, [pc, #64]	; (800da78 <prvCheckTasksWaitingTermination+0x50>)
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3304      	adds	r3, #4
 800da40:	4618      	mov	r0, r3
 800da42:	f7fe fd3b 	bl	800c4bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da46:	4b0d      	ldr	r3, [pc, #52]	; (800da7c <prvCheckTasksWaitingTermination+0x54>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	3b01      	subs	r3, #1
 800da4c:	4a0b      	ldr	r2, [pc, #44]	; (800da7c <prvCheckTasksWaitingTermination+0x54>)
 800da4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da50:	4b0b      	ldr	r3, [pc, #44]	; (800da80 <prvCheckTasksWaitingTermination+0x58>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	3b01      	subs	r3, #1
 800da56:	4a0a      	ldr	r2, [pc, #40]	; (800da80 <prvCheckTasksWaitingTermination+0x58>)
 800da58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da5a:	f000 fdeb 	bl	800e634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 f810 	bl	800da84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da64:	4b06      	ldr	r3, [pc, #24]	; (800da80 <prvCheckTasksWaitingTermination+0x58>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1e1      	bne.n	800da30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da6c:	bf00      	nop
 800da6e:	bf00      	nop
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	2000130c 	.word	0x2000130c
 800da7c:	20001338 	.word	0x20001338
 800da80:	20001320 	.word	0x20001320

0800da84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da92:	2b00      	cmp	r3, #0
 800da94:	d108      	bne.n	800daa8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 ff88 	bl	800e9b0 <vPortFree>
				vPortFree( pxTCB );
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 ff85 	bl	800e9b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800daa6:	e018      	b.n	800dada <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d103      	bne.n	800daba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 ff7c 	bl	800e9b0 <vPortFree>
	}
 800dab8:	e00f      	b.n	800dada <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d00a      	beq.n	800dada <prvDeleteTCB+0x56>
	__asm volatile
 800dac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac8:	f383 8811 	msr	BASEPRI, r3
 800dacc:	f3bf 8f6f 	isb	sy
 800dad0:	f3bf 8f4f 	dsb	sy
 800dad4:	60fb      	str	r3, [r7, #12]
}
 800dad6:	bf00      	nop
 800dad8:	e7fe      	b.n	800dad8 <prvDeleteTCB+0x54>
	}
 800dada:	bf00      	nop
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
	...

0800dae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800daea:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <prvResetNextTaskUnblockTime+0x38>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d104      	bne.n	800dafe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800daf4:	4b0a      	ldr	r3, [pc, #40]	; (800db20 <prvResetNextTaskUnblockTime+0x3c>)
 800daf6:	f04f 32ff 	mov.w	r2, #4294967295
 800dafa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dafc:	e008      	b.n	800db10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dafe:	4b07      	ldr	r3, [pc, #28]	; (800db1c <prvResetNextTaskUnblockTime+0x38>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	4a04      	ldr	r2, [pc, #16]	; (800db20 <prvResetNextTaskUnblockTime+0x3c>)
 800db0e:	6013      	str	r3, [r2, #0]
}
 800db10:	bf00      	nop
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	200012f0 	.word	0x200012f0
 800db20:	20001358 	.word	0x20001358

0800db24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db2a:	4b0b      	ldr	r3, [pc, #44]	; (800db58 <xTaskGetSchedulerState+0x34>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d102      	bne.n	800db38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db32:	2301      	movs	r3, #1
 800db34:	607b      	str	r3, [r7, #4]
 800db36:	e008      	b.n	800db4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db38:	4b08      	ldr	r3, [pc, #32]	; (800db5c <xTaskGetSchedulerState+0x38>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d102      	bne.n	800db46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db40:	2302      	movs	r3, #2
 800db42:	607b      	str	r3, [r7, #4]
 800db44:	e001      	b.n	800db4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db46:	2300      	movs	r3, #0
 800db48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db4a:	687b      	ldr	r3, [r7, #4]
	}
 800db4c:	4618      	mov	r0, r3
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr
 800db58:	20001344 	.word	0x20001344
 800db5c:	20001360 	.word	0x20001360

0800db60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db6c:	2300      	movs	r3, #0
 800db6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d056      	beq.n	800dc24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db76:	4b2e      	ldr	r3, [pc, #184]	; (800dc30 <xTaskPriorityDisinherit+0xd0>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	693a      	ldr	r2, [r7, #16]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d00a      	beq.n	800db96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800db80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db84:	f383 8811 	msr	BASEPRI, r3
 800db88:	f3bf 8f6f 	isb	sy
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	60fb      	str	r3, [r7, #12]
}
 800db92:	bf00      	nop
 800db94:	e7fe      	b.n	800db94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d10a      	bne.n	800dbb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800db9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba2:	f383 8811 	msr	BASEPRI, r3
 800dba6:	f3bf 8f6f 	isb	sy
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	60bb      	str	r3, [r7, #8]
}
 800dbb0:	bf00      	nop
 800dbb2:	e7fe      	b.n	800dbb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbb8:	1e5a      	subs	r2, r3, #1
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d02c      	beq.n	800dc24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d128      	bne.n	800dc24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fe fc70 	bl	800c4bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf4:	4b0f      	ldr	r3, [pc, #60]	; (800dc34 <xTaskPriorityDisinherit+0xd4>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d903      	bls.n	800dc04 <xTaskPriorityDisinherit+0xa4>
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc00:	4a0c      	ldr	r2, [pc, #48]	; (800dc34 <xTaskPriorityDisinherit+0xd4>)
 800dc02:	6013      	str	r3, [r2, #0]
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc08:	4613      	mov	r3, r2
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	4413      	add	r3, r2
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	4a09      	ldr	r2, [pc, #36]	; (800dc38 <xTaskPriorityDisinherit+0xd8>)
 800dc12:	441a      	add	r2, r3
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	3304      	adds	r3, #4
 800dc18:	4619      	mov	r1, r3
 800dc1a:	4610      	mov	r0, r2
 800dc1c:	f7fe fbf1 	bl	800c402 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc20:	2301      	movs	r3, #1
 800dc22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc24:	697b      	ldr	r3, [r7, #20]
	}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3718      	adds	r7, #24
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	20000e64 	.word	0x20000e64
 800dc34:	20001340 	.word	0x20001340
 800dc38:	20000e68 	.word	0x20000e68

0800dc3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc46:	4b21      	ldr	r3, [pc, #132]	; (800dccc <prvAddCurrentTaskToDelayedList+0x90>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc4c:	4b20      	ldr	r3, [pc, #128]	; (800dcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	3304      	adds	r3, #4
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fe fc32 	bl	800c4bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc5e:	d10a      	bne.n	800dc76 <prvAddCurrentTaskToDelayedList+0x3a>
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d007      	beq.n	800dc76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc66:	4b1a      	ldr	r3, [pc, #104]	; (800dcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	4819      	ldr	r0, [pc, #100]	; (800dcd4 <prvAddCurrentTaskToDelayedList+0x98>)
 800dc70:	f7fe fbc7 	bl	800c402 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc74:	e026      	b.n	800dcc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc76:	68fa      	ldr	r2, [r7, #12]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc7e:	4b14      	ldr	r3, [pc, #80]	; (800dcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d209      	bcs.n	800dca2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc8e:	4b12      	ldr	r3, [pc, #72]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	4b0f      	ldr	r3, [pc, #60]	; (800dcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	3304      	adds	r3, #4
 800dc98:	4619      	mov	r1, r3
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	f7fe fbd5 	bl	800c44a <vListInsert>
}
 800dca0:	e010      	b.n	800dcc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dca2:	4b0e      	ldr	r3, [pc, #56]	; (800dcdc <prvAddCurrentTaskToDelayedList+0xa0>)
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	4b0a      	ldr	r3, [pc, #40]	; (800dcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	3304      	adds	r3, #4
 800dcac:	4619      	mov	r1, r3
 800dcae:	4610      	mov	r0, r2
 800dcb0:	f7fe fbcb 	bl	800c44a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dcb4:	4b0a      	ldr	r3, [pc, #40]	; (800dce0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	68ba      	ldr	r2, [r7, #8]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d202      	bcs.n	800dcc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dcbe:	4a08      	ldr	r2, [pc, #32]	; (800dce0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	6013      	str	r3, [r2, #0]
}
 800dcc4:	bf00      	nop
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	2000133c 	.word	0x2000133c
 800dcd0:	20000e64 	.word	0x20000e64
 800dcd4:	20001324 	.word	0x20001324
 800dcd8:	200012f4 	.word	0x200012f4
 800dcdc:	200012f0 	.word	0x200012f0
 800dce0:	20001358 	.word	0x20001358

0800dce4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b08a      	sub	sp, #40	; 0x28
 800dce8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dcea:	2300      	movs	r3, #0
 800dcec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dcee:	f000 fb07 	bl	800e300 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dcf2:	4b1c      	ldr	r3, [pc, #112]	; (800dd64 <xTimerCreateTimerTask+0x80>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d021      	beq.n	800dd3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dd02:	1d3a      	adds	r2, r7, #4
 800dd04:	f107 0108 	add.w	r1, r7, #8
 800dd08:	f107 030c 	add.w	r3, r7, #12
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7fe fb31 	bl	800c374 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dd12:	6879      	ldr	r1, [r7, #4]
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	68fa      	ldr	r2, [r7, #12]
 800dd18:	9202      	str	r2, [sp, #8]
 800dd1a:	9301      	str	r3, [sp, #4]
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	9300      	str	r3, [sp, #0]
 800dd20:	2300      	movs	r3, #0
 800dd22:	460a      	mov	r2, r1
 800dd24:	4910      	ldr	r1, [pc, #64]	; (800dd68 <xTimerCreateTimerTask+0x84>)
 800dd26:	4811      	ldr	r0, [pc, #68]	; (800dd6c <xTimerCreateTimerTask+0x88>)
 800dd28:	f7ff f8de 	bl	800cee8 <xTaskCreateStatic>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	4a10      	ldr	r2, [pc, #64]	; (800dd70 <xTimerCreateTimerTask+0x8c>)
 800dd30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd32:	4b0f      	ldr	r3, [pc, #60]	; (800dd70 <xTimerCreateTimerTask+0x8c>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10a      	bne.n	800dd5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd48:	f383 8811 	msr	BASEPRI, r3
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	f3bf 8f4f 	dsb	sy
 800dd54:	613b      	str	r3, [r7, #16]
}
 800dd56:	bf00      	nop
 800dd58:	e7fe      	b.n	800dd58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dd5a:	697b      	ldr	r3, [r7, #20]
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3718      	adds	r7, #24
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	20001394 	.word	0x20001394
 800dd68:	08012380 	.word	0x08012380
 800dd6c:	0800dea9 	.word	0x0800dea9
 800dd70:	20001398 	.word	0x20001398

0800dd74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b08a      	sub	sp, #40	; 0x28
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	607a      	str	r2, [r7, #4]
 800dd80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd82:	2300      	movs	r3, #0
 800dd84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10a      	bne.n	800dda2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd90:	f383 8811 	msr	BASEPRI, r3
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	f3bf 8f4f 	dsb	sy
 800dd9c:	623b      	str	r3, [r7, #32]
}
 800dd9e:	bf00      	nop
 800dda0:	e7fe      	b.n	800dda0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dda2:	4b1a      	ldr	r3, [pc, #104]	; (800de0c <xTimerGenericCommand+0x98>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d02a      	beq.n	800de00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	2b05      	cmp	r3, #5
 800ddba:	dc18      	bgt.n	800ddee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ddbc:	f7ff feb2 	bl	800db24 <xTaskGetSchedulerState>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b02      	cmp	r3, #2
 800ddc4:	d109      	bne.n	800ddda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ddc6:	4b11      	ldr	r3, [pc, #68]	; (800de0c <xTimerGenericCommand+0x98>)
 800ddc8:	6818      	ldr	r0, [r3, #0]
 800ddca:	f107 0110 	add.w	r1, r7, #16
 800ddce:	2300      	movs	r3, #0
 800ddd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddd2:	f7fe fca1 	bl	800c718 <xQueueGenericSend>
 800ddd6:	6278      	str	r0, [r7, #36]	; 0x24
 800ddd8:	e012      	b.n	800de00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddda:	4b0c      	ldr	r3, [pc, #48]	; (800de0c <xTimerGenericCommand+0x98>)
 800dddc:	6818      	ldr	r0, [r3, #0]
 800ddde:	f107 0110 	add.w	r1, r7, #16
 800dde2:	2300      	movs	r3, #0
 800dde4:	2200      	movs	r2, #0
 800dde6:	f7fe fc97 	bl	800c718 <xQueueGenericSend>
 800ddea:	6278      	str	r0, [r7, #36]	; 0x24
 800ddec:	e008      	b.n	800de00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ddee:	4b07      	ldr	r3, [pc, #28]	; (800de0c <xTimerGenericCommand+0x98>)
 800ddf0:	6818      	ldr	r0, [r3, #0]
 800ddf2:	f107 0110 	add.w	r1, r7, #16
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	683a      	ldr	r2, [r7, #0]
 800ddfa:	f7fe fd8b 	bl	800c914 <xQueueGenericSendFromISR>
 800ddfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de02:	4618      	mov	r0, r3
 800de04:	3728      	adds	r7, #40	; 0x28
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	20001394 	.word	0x20001394

0800de10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b088      	sub	sp, #32
 800de14:	af02      	add	r7, sp, #8
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de1a:	4b22      	ldr	r3, [pc, #136]	; (800dea4 <prvProcessExpiredTimer+0x94>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	3304      	adds	r3, #4
 800de28:	4618      	mov	r0, r3
 800de2a:	f7fe fb47 	bl	800c4bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de34:	f003 0304 	and.w	r3, r3, #4
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d022      	beq.n	800de82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	699a      	ldr	r2, [r3, #24]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	18d1      	adds	r1, r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	6978      	ldr	r0, [r7, #20]
 800de4a:	f000 f8d1 	bl	800dff0 <prvInsertTimerInActiveList>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d01f      	beq.n	800de94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de54:	2300      	movs	r3, #0
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	2300      	movs	r3, #0
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	2100      	movs	r1, #0
 800de5e:	6978      	ldr	r0, [r7, #20]
 800de60:	f7ff ff88 	bl	800dd74 <xTimerGenericCommand>
 800de64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d113      	bne.n	800de94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800de6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de70:	f383 8811 	msr	BASEPRI, r3
 800de74:	f3bf 8f6f 	isb	sy
 800de78:	f3bf 8f4f 	dsb	sy
 800de7c:	60fb      	str	r3, [r7, #12]
}
 800de7e:	bf00      	nop
 800de80:	e7fe      	b.n	800de80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de88:	f023 0301 	bic.w	r3, r3, #1
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	6a1b      	ldr	r3, [r3, #32]
 800de98:	6978      	ldr	r0, [r7, #20]
 800de9a:	4798      	blx	r3
}
 800de9c:	bf00      	nop
 800de9e:	3718      	adds	r7, #24
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	2000138c 	.word	0x2000138c

0800dea8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800deb0:	f107 0308 	add.w	r3, r7, #8
 800deb4:	4618      	mov	r0, r3
 800deb6:	f000 f857 	bl	800df68 <prvGetNextExpireTime>
 800deba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	4619      	mov	r1, r3
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f000 f803 	bl	800decc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dec6:	f000 f8d5 	bl	800e074 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800deca:	e7f1      	b.n	800deb0 <prvTimerTask+0x8>

0800decc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ded6:	f7ff fa43 	bl	800d360 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800deda:	f107 0308 	add.w	r3, r7, #8
 800dede:	4618      	mov	r0, r3
 800dee0:	f000 f866 	bl	800dfb0 <prvSampleTimeNow>
 800dee4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d130      	bne.n	800df4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d10a      	bne.n	800df08 <prvProcessTimerOrBlockTask+0x3c>
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	429a      	cmp	r2, r3
 800def8:	d806      	bhi.n	800df08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800defa:	f7ff fa3f 	bl	800d37c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800defe:	68f9      	ldr	r1, [r7, #12]
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f7ff ff85 	bl	800de10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800df06:	e024      	b.n	800df52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d008      	beq.n	800df20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df0e:	4b13      	ldr	r3, [pc, #76]	; (800df5c <prvProcessTimerOrBlockTask+0x90>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d101      	bne.n	800df1c <prvProcessTimerOrBlockTask+0x50>
 800df18:	2301      	movs	r3, #1
 800df1a:	e000      	b.n	800df1e <prvProcessTimerOrBlockTask+0x52>
 800df1c:	2300      	movs	r3, #0
 800df1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df20:	4b0f      	ldr	r3, [pc, #60]	; (800df60 <prvProcessTimerOrBlockTask+0x94>)
 800df22:	6818      	ldr	r0, [r3, #0]
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	683a      	ldr	r2, [r7, #0]
 800df2c:	4619      	mov	r1, r3
 800df2e:	f7fe ffa7 	bl	800ce80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df32:	f7ff fa23 	bl	800d37c <xTaskResumeAll>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10a      	bne.n	800df52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df3c:	4b09      	ldr	r3, [pc, #36]	; (800df64 <prvProcessTimerOrBlockTask+0x98>)
 800df3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df42:	601a      	str	r2, [r3, #0]
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	f3bf 8f6f 	isb	sy
}
 800df4c:	e001      	b.n	800df52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df4e:	f7ff fa15 	bl	800d37c <xTaskResumeAll>
}
 800df52:	bf00      	nop
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	20001390 	.word	0x20001390
 800df60:	20001394 	.word	0x20001394
 800df64:	e000ed04 	.word	0xe000ed04

0800df68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df70:	4b0e      	ldr	r3, [pc, #56]	; (800dfac <prvGetNextExpireTime+0x44>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d101      	bne.n	800df7e <prvGetNextExpireTime+0x16>
 800df7a:	2201      	movs	r2, #1
 800df7c:	e000      	b.n	800df80 <prvGetNextExpireTime+0x18>
 800df7e:	2200      	movs	r2, #0
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d105      	bne.n	800df98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df8c:	4b07      	ldr	r3, [pc, #28]	; (800dfac <prvGetNextExpireTime+0x44>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	60fb      	str	r3, [r7, #12]
 800df96:	e001      	b.n	800df9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df98:	2300      	movs	r3, #0
 800df9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df9c:	68fb      	ldr	r3, [r7, #12]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3714      	adds	r7, #20
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	2000138c 	.word	0x2000138c

0800dfb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dfb8:	f7ff fa7e 	bl	800d4b8 <xTaskGetTickCount>
 800dfbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dfbe:	4b0b      	ldr	r3, [pc, #44]	; (800dfec <prvSampleTimeNow+0x3c>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	68fa      	ldr	r2, [r7, #12]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d205      	bcs.n	800dfd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dfc8:	f000 f936 	bl	800e238 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	601a      	str	r2, [r3, #0]
 800dfd2:	e002      	b.n	800dfda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dfda:	4a04      	ldr	r2, [pc, #16]	; (800dfec <prvSampleTimeNow+0x3c>)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	2000139c 	.word	0x2000139c

0800dff0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
 800dffa:	607a      	str	r2, [r7, #4]
 800dffc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dffe:	2300      	movs	r3, #0
 800e000:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	68fa      	ldr	r2, [r7, #12]
 800e00c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e00e:	68ba      	ldr	r2, [r7, #8]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	429a      	cmp	r2, r3
 800e014:	d812      	bhi.n	800e03c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	1ad2      	subs	r2, r2, r3
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	699b      	ldr	r3, [r3, #24]
 800e020:	429a      	cmp	r2, r3
 800e022:	d302      	bcc.n	800e02a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e024:	2301      	movs	r3, #1
 800e026:	617b      	str	r3, [r7, #20]
 800e028:	e01b      	b.n	800e062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e02a:	4b10      	ldr	r3, [pc, #64]	; (800e06c <prvInsertTimerInActiveList+0x7c>)
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	3304      	adds	r3, #4
 800e032:	4619      	mov	r1, r3
 800e034:	4610      	mov	r0, r2
 800e036:	f7fe fa08 	bl	800c44a <vListInsert>
 800e03a:	e012      	b.n	800e062 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	429a      	cmp	r2, r3
 800e042:	d206      	bcs.n	800e052 <prvInsertTimerInActiveList+0x62>
 800e044:	68ba      	ldr	r2, [r7, #8]
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d302      	bcc.n	800e052 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e04c:	2301      	movs	r3, #1
 800e04e:	617b      	str	r3, [r7, #20]
 800e050:	e007      	b.n	800e062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e052:	4b07      	ldr	r3, [pc, #28]	; (800e070 <prvInsertTimerInActiveList+0x80>)
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	3304      	adds	r3, #4
 800e05a:	4619      	mov	r1, r3
 800e05c:	4610      	mov	r0, r2
 800e05e:	f7fe f9f4 	bl	800c44a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e062:	697b      	ldr	r3, [r7, #20]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3718      	adds	r7, #24
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	20001390 	.word	0x20001390
 800e070:	2000138c 	.word	0x2000138c

0800e074 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b08e      	sub	sp, #56	; 0x38
 800e078:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e07a:	e0ca      	b.n	800e212 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	da18      	bge.n	800e0b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e082:	1d3b      	adds	r3, r7, #4
 800e084:	3304      	adds	r3, #4
 800e086:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10a      	bne.n	800e0a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	61fb      	str	r3, [r7, #28]
}
 800e0a0:	bf00      	nop
 800e0a2:	e7fe      	b.n	800e0a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0aa:	6850      	ldr	r0, [r2, #4]
 800e0ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0ae:	6892      	ldr	r2, [r2, #8]
 800e0b0:	4611      	mov	r1, r2
 800e0b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f2c0 80ab 	blt.w	800e212 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c2:	695b      	ldr	r3, [r3, #20]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d004      	beq.n	800e0d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ca:	3304      	adds	r3, #4
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fe f9f5 	bl	800c4bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0d2:	463b      	mov	r3, r7
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7ff ff6b 	bl	800dfb0 <prvSampleTimeNow>
 800e0da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b09      	cmp	r3, #9
 800e0e0:	f200 8096 	bhi.w	800e210 <prvProcessReceivedCommands+0x19c>
 800e0e4:	a201      	add	r2, pc, #4	; (adr r2, 800e0ec <prvProcessReceivedCommands+0x78>)
 800e0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ea:	bf00      	nop
 800e0ec:	0800e115 	.word	0x0800e115
 800e0f0:	0800e115 	.word	0x0800e115
 800e0f4:	0800e115 	.word	0x0800e115
 800e0f8:	0800e189 	.word	0x0800e189
 800e0fc:	0800e19d 	.word	0x0800e19d
 800e100:	0800e1e7 	.word	0x0800e1e7
 800e104:	0800e115 	.word	0x0800e115
 800e108:	0800e115 	.word	0x0800e115
 800e10c:	0800e189 	.word	0x0800e189
 800e110:	0800e19d 	.word	0x0800e19d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e11a:	f043 0301 	orr.w	r3, r3, #1
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e126:	68ba      	ldr	r2, [r7, #8]
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	699b      	ldr	r3, [r3, #24]
 800e12c:	18d1      	adds	r1, r2, r3
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e134:	f7ff ff5c 	bl	800dff0 <prvInsertTimerInActiveList>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d069      	beq.n	800e212 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e140:	6a1b      	ldr	r3, [r3, #32]
 800e142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e144:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e14c:	f003 0304 	and.w	r3, r3, #4
 800e150:	2b00      	cmp	r3, #0
 800e152:	d05e      	beq.n	800e212 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e154:	68ba      	ldr	r2, [r7, #8]
 800e156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e158:	699b      	ldr	r3, [r3, #24]
 800e15a:	441a      	add	r2, r3
 800e15c:	2300      	movs	r3, #0
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	2300      	movs	r3, #0
 800e162:	2100      	movs	r1, #0
 800e164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e166:	f7ff fe05 	bl	800dd74 <xTimerGenericCommand>
 800e16a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e16c:	6a3b      	ldr	r3, [r7, #32]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d14f      	bne.n	800e212 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e176:	f383 8811 	msr	BASEPRI, r3
 800e17a:	f3bf 8f6f 	isb	sy
 800e17e:	f3bf 8f4f 	dsb	sy
 800e182:	61bb      	str	r3, [r7, #24]
}
 800e184:	bf00      	nop
 800e186:	e7fe      	b.n	800e186 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e18e:	f023 0301 	bic.w	r3, r3, #1
 800e192:	b2da      	uxtb	r2, r3
 800e194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e19a:	e03a      	b.n	800e212 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1a2:	f043 0301 	orr.w	r3, r3, #1
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e1ae:	68ba      	ldr	r2, [r7, #8]
 800e1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b6:	699b      	ldr	r3, [r3, #24]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d10a      	bne.n	800e1d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c0:	f383 8811 	msr	BASEPRI, r3
 800e1c4:	f3bf 8f6f 	isb	sy
 800e1c8:	f3bf 8f4f 	dsb	sy
 800e1cc:	617b      	str	r3, [r7, #20]
}
 800e1ce:	bf00      	nop
 800e1d0:	e7fe      	b.n	800e1d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d4:	699a      	ldr	r2, [r3, #24]
 800e1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d8:	18d1      	adds	r1, r2, r3
 800e1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1e0:	f7ff ff06 	bl	800dff0 <prvInsertTimerInActiveList>
					break;
 800e1e4:	e015      	b.n	800e212 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1ec:	f003 0302 	and.w	r3, r3, #2
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d103      	bne.n	800e1fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e1f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1f6:	f000 fbdb 	bl	800e9b0 <vPortFree>
 800e1fa:	e00a      	b.n	800e212 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e202:	f023 0301 	bic.w	r3, r3, #1
 800e206:	b2da      	uxtb	r2, r3
 800e208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e20e:	e000      	b.n	800e212 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e210:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e212:	4b08      	ldr	r3, [pc, #32]	; (800e234 <prvProcessReceivedCommands+0x1c0>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	1d39      	adds	r1, r7, #4
 800e218:	2200      	movs	r2, #0
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fe fc16 	bl	800ca4c <xQueueReceive>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	f47f af2a 	bne.w	800e07c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e228:	bf00      	nop
 800e22a:	bf00      	nop
 800e22c:	3730      	adds	r7, #48	; 0x30
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	20001394 	.word	0x20001394

0800e238 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b088      	sub	sp, #32
 800e23c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e23e:	e048      	b.n	800e2d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e240:	4b2d      	ldr	r3, [pc, #180]	; (800e2f8 <prvSwitchTimerLists+0xc0>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e24a:	4b2b      	ldr	r3, [pc, #172]	; (800e2f8 <prvSwitchTimerLists+0xc0>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	3304      	adds	r3, #4
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fe f92f 	bl	800c4bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6a1b      	ldr	r3, [r3, #32]
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e26c:	f003 0304 	and.w	r3, r3, #4
 800e270:	2b00      	cmp	r3, #0
 800e272:	d02e      	beq.n	800e2d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	699b      	ldr	r3, [r3, #24]
 800e278:	693a      	ldr	r2, [r7, #16]
 800e27a:	4413      	add	r3, r2
 800e27c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	429a      	cmp	r2, r3
 800e284:	d90e      	bls.n	800e2a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	68ba      	ldr	r2, [r7, #8]
 800e28a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e292:	4b19      	ldr	r3, [pc, #100]	; (800e2f8 <prvSwitchTimerLists+0xc0>)
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	3304      	adds	r3, #4
 800e29a:	4619      	mov	r1, r3
 800e29c:	4610      	mov	r0, r2
 800e29e:	f7fe f8d4 	bl	800c44a <vListInsert>
 800e2a2:	e016      	b.n	800e2d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	693a      	ldr	r2, [r7, #16]
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f7ff fd60 	bl	800dd74 <xTimerGenericCommand>
 800e2b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10a      	bne.n	800e2d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	603b      	str	r3, [r7, #0]
}
 800e2ce:	bf00      	nop
 800e2d0:	e7fe      	b.n	800e2d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2d2:	4b09      	ldr	r3, [pc, #36]	; (800e2f8 <prvSwitchTimerLists+0xc0>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d1b1      	bne.n	800e240 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2dc:	4b06      	ldr	r3, [pc, #24]	; (800e2f8 <prvSwitchTimerLists+0xc0>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2e2:	4b06      	ldr	r3, [pc, #24]	; (800e2fc <prvSwitchTimerLists+0xc4>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a04      	ldr	r2, [pc, #16]	; (800e2f8 <prvSwitchTimerLists+0xc0>)
 800e2e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e2ea:	4a04      	ldr	r2, [pc, #16]	; (800e2fc <prvSwitchTimerLists+0xc4>)
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	6013      	str	r3, [r2, #0]
}
 800e2f0:	bf00      	nop
 800e2f2:	3718      	adds	r7, #24
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	2000138c 	.word	0x2000138c
 800e2fc:	20001390 	.word	0x20001390

0800e300 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e306:	f000 f965 	bl	800e5d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e30a:	4b15      	ldr	r3, [pc, #84]	; (800e360 <prvCheckForValidListAndQueue+0x60>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d120      	bne.n	800e354 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e312:	4814      	ldr	r0, [pc, #80]	; (800e364 <prvCheckForValidListAndQueue+0x64>)
 800e314:	f7fe f848 	bl	800c3a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e318:	4813      	ldr	r0, [pc, #76]	; (800e368 <prvCheckForValidListAndQueue+0x68>)
 800e31a:	f7fe f845 	bl	800c3a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e31e:	4b13      	ldr	r3, [pc, #76]	; (800e36c <prvCheckForValidListAndQueue+0x6c>)
 800e320:	4a10      	ldr	r2, [pc, #64]	; (800e364 <prvCheckForValidListAndQueue+0x64>)
 800e322:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e324:	4b12      	ldr	r3, [pc, #72]	; (800e370 <prvCheckForValidListAndQueue+0x70>)
 800e326:	4a10      	ldr	r2, [pc, #64]	; (800e368 <prvCheckForValidListAndQueue+0x68>)
 800e328:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e32a:	2300      	movs	r3, #0
 800e32c:	9300      	str	r3, [sp, #0]
 800e32e:	4b11      	ldr	r3, [pc, #68]	; (800e374 <prvCheckForValidListAndQueue+0x74>)
 800e330:	4a11      	ldr	r2, [pc, #68]	; (800e378 <prvCheckForValidListAndQueue+0x78>)
 800e332:	2110      	movs	r1, #16
 800e334:	200a      	movs	r0, #10
 800e336:	f7fe f953 	bl	800c5e0 <xQueueGenericCreateStatic>
 800e33a:	4603      	mov	r3, r0
 800e33c:	4a08      	ldr	r2, [pc, #32]	; (800e360 <prvCheckForValidListAndQueue+0x60>)
 800e33e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e340:	4b07      	ldr	r3, [pc, #28]	; (800e360 <prvCheckForValidListAndQueue+0x60>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d005      	beq.n	800e354 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e348:	4b05      	ldr	r3, [pc, #20]	; (800e360 <prvCheckForValidListAndQueue+0x60>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	490b      	ldr	r1, [pc, #44]	; (800e37c <prvCheckForValidListAndQueue+0x7c>)
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fe fd6c 	bl	800ce2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e354:	f000 f96e 	bl	800e634 <vPortExitCritical>
}
 800e358:	bf00      	nop
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	20001394 	.word	0x20001394
 800e364:	20001364 	.word	0x20001364
 800e368:	20001378 	.word	0x20001378
 800e36c:	2000138c 	.word	0x2000138c
 800e370:	20001390 	.word	0x20001390
 800e374:	20001440 	.word	0x20001440
 800e378:	200013a0 	.word	0x200013a0
 800e37c:	08012388 	.word	0x08012388

0800e380 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	3b04      	subs	r3, #4
 800e390:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	3b04      	subs	r3, #4
 800e39e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	f023 0201 	bic.w	r2, r3, #1
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	3b04      	subs	r3, #4
 800e3ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3b0:	4a0c      	ldr	r2, [pc, #48]	; (800e3e4 <pxPortInitialiseStack+0x64>)
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	3b14      	subs	r3, #20
 800e3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	3b04      	subs	r3, #4
 800e3c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f06f 0202 	mvn.w	r2, #2
 800e3ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	3b20      	subs	r3, #32
 800e3d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3714      	adds	r7, #20
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	0800e3e9 	.word	0x0800e3e9

0800e3e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3f2:	4b12      	ldr	r3, [pc, #72]	; (800e43c <prvTaskExitError+0x54>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3fa:	d00a      	beq.n	800e412 <prvTaskExitError+0x2a>
	__asm volatile
 800e3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e400:	f383 8811 	msr	BASEPRI, r3
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	60fb      	str	r3, [r7, #12]
}
 800e40e:	bf00      	nop
 800e410:	e7fe      	b.n	800e410 <prvTaskExitError+0x28>
	__asm volatile
 800e412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	60bb      	str	r3, [r7, #8]
}
 800e424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e426:	bf00      	nop
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d0fc      	beq.n	800e428 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e42e:	bf00      	nop
 800e430:	bf00      	nop
 800e432:	3714      	adds	r7, #20
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr
 800e43c:	20000114 	.word	0x20000114

0800e440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e440:	4b07      	ldr	r3, [pc, #28]	; (800e460 <pxCurrentTCBConst2>)
 800e442:	6819      	ldr	r1, [r3, #0]
 800e444:	6808      	ldr	r0, [r1, #0]
 800e446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44a:	f380 8809 	msr	PSP, r0
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f04f 0000 	mov.w	r0, #0
 800e456:	f380 8811 	msr	BASEPRI, r0
 800e45a:	4770      	bx	lr
 800e45c:	f3af 8000 	nop.w

0800e460 <pxCurrentTCBConst2>:
 800e460:	20000e64 	.word	0x20000e64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e464:	bf00      	nop
 800e466:	bf00      	nop

0800e468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e468:	4808      	ldr	r0, [pc, #32]	; (800e48c <prvPortStartFirstTask+0x24>)
 800e46a:	6800      	ldr	r0, [r0, #0]
 800e46c:	6800      	ldr	r0, [r0, #0]
 800e46e:	f380 8808 	msr	MSP, r0
 800e472:	f04f 0000 	mov.w	r0, #0
 800e476:	f380 8814 	msr	CONTROL, r0
 800e47a:	b662      	cpsie	i
 800e47c:	b661      	cpsie	f
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	f3bf 8f6f 	isb	sy
 800e486:	df00      	svc	0
 800e488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e48a:	bf00      	nop
 800e48c:	e000ed08 	.word	0xe000ed08

0800e490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e496:	4b46      	ldr	r3, [pc, #280]	; (800e5b0 <xPortStartScheduler+0x120>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4a46      	ldr	r2, [pc, #280]	; (800e5b4 <xPortStartScheduler+0x124>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d10a      	bne.n	800e4b6 <xPortStartScheduler+0x26>
	__asm volatile
 800e4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a4:	f383 8811 	msr	BASEPRI, r3
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	613b      	str	r3, [r7, #16]
}
 800e4b2:	bf00      	nop
 800e4b4:	e7fe      	b.n	800e4b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e4b6:	4b3e      	ldr	r3, [pc, #248]	; (800e5b0 <xPortStartScheduler+0x120>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a3f      	ldr	r2, [pc, #252]	; (800e5b8 <xPortStartScheduler+0x128>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d10a      	bne.n	800e4d6 <xPortStartScheduler+0x46>
	__asm volatile
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	60fb      	str	r3, [r7, #12]
}
 800e4d2:	bf00      	nop
 800e4d4:	e7fe      	b.n	800e4d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e4d6:	4b39      	ldr	r3, [pc, #228]	; (800e5bc <xPortStartScheduler+0x12c>)
 800e4d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	b2db      	uxtb	r3, r3
 800e4e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	22ff      	movs	r2, #255	; 0xff
 800e4e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e4f0:	78fb      	ldrb	r3, [r7, #3]
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e4f8:	b2da      	uxtb	r2, r3
 800e4fa:	4b31      	ldr	r3, [pc, #196]	; (800e5c0 <xPortStartScheduler+0x130>)
 800e4fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e4fe:	4b31      	ldr	r3, [pc, #196]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e500:	2207      	movs	r2, #7
 800e502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e504:	e009      	b.n	800e51a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e506:	4b2f      	ldr	r3, [pc, #188]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	3b01      	subs	r3, #1
 800e50c:	4a2d      	ldr	r2, [pc, #180]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e50e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e510:	78fb      	ldrb	r3, [r7, #3]
 800e512:	b2db      	uxtb	r3, r3
 800e514:	005b      	lsls	r3, r3, #1
 800e516:	b2db      	uxtb	r3, r3
 800e518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e51a:	78fb      	ldrb	r3, [r7, #3]
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e522:	2b80      	cmp	r3, #128	; 0x80
 800e524:	d0ef      	beq.n	800e506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e526:	4b27      	ldr	r3, [pc, #156]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f1c3 0307 	rsb	r3, r3, #7
 800e52e:	2b04      	cmp	r3, #4
 800e530:	d00a      	beq.n	800e548 <xPortStartScheduler+0xb8>
	__asm volatile
 800e532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e536:	f383 8811 	msr	BASEPRI, r3
 800e53a:	f3bf 8f6f 	isb	sy
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	60bb      	str	r3, [r7, #8]
}
 800e544:	bf00      	nop
 800e546:	e7fe      	b.n	800e546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e548:	4b1e      	ldr	r3, [pc, #120]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	021b      	lsls	r3, r3, #8
 800e54e:	4a1d      	ldr	r2, [pc, #116]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e552:	4b1c      	ldr	r3, [pc, #112]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e55a:	4a1a      	ldr	r2, [pc, #104]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e55c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	b2da      	uxtb	r2, r3
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e566:	4b18      	ldr	r3, [pc, #96]	; (800e5c8 <xPortStartScheduler+0x138>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a17      	ldr	r2, [pc, #92]	; (800e5c8 <xPortStartScheduler+0x138>)
 800e56c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e572:	4b15      	ldr	r3, [pc, #84]	; (800e5c8 <xPortStartScheduler+0x138>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a14      	ldr	r2, [pc, #80]	; (800e5c8 <xPortStartScheduler+0x138>)
 800e578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e57c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e57e:	f000 f8dd 	bl	800e73c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e582:	4b12      	ldr	r3, [pc, #72]	; (800e5cc <xPortStartScheduler+0x13c>)
 800e584:	2200      	movs	r2, #0
 800e586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e588:	f000 f8fc 	bl	800e784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e58c:	4b10      	ldr	r3, [pc, #64]	; (800e5d0 <xPortStartScheduler+0x140>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a0f      	ldr	r2, [pc, #60]	; (800e5d0 <xPortStartScheduler+0x140>)
 800e592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e598:	f7ff ff66 	bl	800e468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e59c:	f7ff f856 	bl	800d64c <vTaskSwitchContext>
	prvTaskExitError();
 800e5a0:	f7ff ff22 	bl	800e3e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5a4:	2300      	movs	r3, #0
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3718      	adds	r7, #24
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	e000ed00 	.word	0xe000ed00
 800e5b4:	410fc271 	.word	0x410fc271
 800e5b8:	410fc270 	.word	0x410fc270
 800e5bc:	e000e400 	.word	0xe000e400
 800e5c0:	20001490 	.word	0x20001490
 800e5c4:	20001494 	.word	0x20001494
 800e5c8:	e000ed20 	.word	0xe000ed20
 800e5cc:	20000114 	.word	0x20000114
 800e5d0:	e000ef34 	.word	0xe000ef34

0800e5d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
	__asm volatile
 800e5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5de:	f383 8811 	msr	BASEPRI, r3
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	f3bf 8f4f 	dsb	sy
 800e5ea:	607b      	str	r3, [r7, #4]
}
 800e5ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e5ee:	4b0f      	ldr	r3, [pc, #60]	; (800e62c <vPortEnterCritical+0x58>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	4a0d      	ldr	r2, [pc, #52]	; (800e62c <vPortEnterCritical+0x58>)
 800e5f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e5f8:	4b0c      	ldr	r3, [pc, #48]	; (800e62c <vPortEnterCritical+0x58>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d10f      	bne.n	800e620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e600:	4b0b      	ldr	r3, [pc, #44]	; (800e630 <vPortEnterCritical+0x5c>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	b2db      	uxtb	r3, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00a      	beq.n	800e620 <vPortEnterCritical+0x4c>
	__asm volatile
 800e60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	603b      	str	r3, [r7, #0]
}
 800e61c:	bf00      	nop
 800e61e:	e7fe      	b.n	800e61e <vPortEnterCritical+0x4a>
	}
}
 800e620:	bf00      	nop
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr
 800e62c:	20000114 	.word	0x20000114
 800e630:	e000ed04 	.word	0xe000ed04

0800e634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e63a:	4b12      	ldr	r3, [pc, #72]	; (800e684 <vPortExitCritical+0x50>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d10a      	bne.n	800e658 <vPortExitCritical+0x24>
	__asm volatile
 800e642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e646:	f383 8811 	msr	BASEPRI, r3
 800e64a:	f3bf 8f6f 	isb	sy
 800e64e:	f3bf 8f4f 	dsb	sy
 800e652:	607b      	str	r3, [r7, #4]
}
 800e654:	bf00      	nop
 800e656:	e7fe      	b.n	800e656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e658:	4b0a      	ldr	r3, [pc, #40]	; (800e684 <vPortExitCritical+0x50>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	4a09      	ldr	r2, [pc, #36]	; (800e684 <vPortExitCritical+0x50>)
 800e660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e662:	4b08      	ldr	r3, [pc, #32]	; (800e684 <vPortExitCritical+0x50>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d105      	bne.n	800e676 <vPortExitCritical+0x42>
 800e66a:	2300      	movs	r3, #0
 800e66c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	f383 8811 	msr	BASEPRI, r3
}
 800e674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e676:	bf00      	nop
 800e678:	370c      	adds	r7, #12
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop
 800e684:	20000114 	.word	0x20000114
	...

0800e690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e690:	f3ef 8009 	mrs	r0, PSP
 800e694:	f3bf 8f6f 	isb	sy
 800e698:	4b15      	ldr	r3, [pc, #84]	; (800e6f0 <pxCurrentTCBConst>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	f01e 0f10 	tst.w	lr, #16
 800e6a0:	bf08      	it	eq
 800e6a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6aa:	6010      	str	r0, [r2, #0]
 800e6ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e6b4:	f380 8811 	msr	BASEPRI, r0
 800e6b8:	f3bf 8f4f 	dsb	sy
 800e6bc:	f3bf 8f6f 	isb	sy
 800e6c0:	f7fe ffc4 	bl	800d64c <vTaskSwitchContext>
 800e6c4:	f04f 0000 	mov.w	r0, #0
 800e6c8:	f380 8811 	msr	BASEPRI, r0
 800e6cc:	bc09      	pop	{r0, r3}
 800e6ce:	6819      	ldr	r1, [r3, #0]
 800e6d0:	6808      	ldr	r0, [r1, #0]
 800e6d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d6:	f01e 0f10 	tst.w	lr, #16
 800e6da:	bf08      	it	eq
 800e6dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e6e0:	f380 8809 	msr	PSP, r0
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	f3af 8000 	nop.w

0800e6f0 <pxCurrentTCBConst>:
 800e6f0:	20000e64 	.word	0x20000e64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e6f4:	bf00      	nop
 800e6f6:	bf00      	nop

0800e6f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	607b      	str	r3, [r7, #4]
}
 800e710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e712:	f7fe fee1 	bl	800d4d8 <xTaskIncrementTick>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d003      	beq.n	800e724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e71c:	4b06      	ldr	r3, [pc, #24]	; (800e738 <xPortSysTickHandler+0x40>)
 800e71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	2300      	movs	r3, #0
 800e726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	f383 8811 	msr	BASEPRI, r3
}
 800e72e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e730:	bf00      	nop
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	e000ed04 	.word	0xe000ed04

0800e73c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e73c:	b480      	push	{r7}
 800e73e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e740:	4b0b      	ldr	r3, [pc, #44]	; (800e770 <vPortSetupTimerInterrupt+0x34>)
 800e742:	2200      	movs	r2, #0
 800e744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e746:	4b0b      	ldr	r3, [pc, #44]	; (800e774 <vPortSetupTimerInterrupt+0x38>)
 800e748:	2200      	movs	r2, #0
 800e74a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e74c:	4b0a      	ldr	r3, [pc, #40]	; (800e778 <vPortSetupTimerInterrupt+0x3c>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a0a      	ldr	r2, [pc, #40]	; (800e77c <vPortSetupTimerInterrupt+0x40>)
 800e752:	fba2 2303 	umull	r2, r3, r2, r3
 800e756:	099b      	lsrs	r3, r3, #6
 800e758:	4a09      	ldr	r2, [pc, #36]	; (800e780 <vPortSetupTimerInterrupt+0x44>)
 800e75a:	3b01      	subs	r3, #1
 800e75c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e75e:	4b04      	ldr	r3, [pc, #16]	; (800e770 <vPortSetupTimerInterrupt+0x34>)
 800e760:	2207      	movs	r2, #7
 800e762:	601a      	str	r2, [r3, #0]
}
 800e764:	bf00      	nop
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr
 800e76e:	bf00      	nop
 800e770:	e000e010 	.word	0xe000e010
 800e774:	e000e018 	.word	0xe000e018
 800e778:	20000000 	.word	0x20000000
 800e77c:	10624dd3 	.word	0x10624dd3
 800e780:	e000e014 	.word	0xe000e014

0800e784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e794 <vPortEnableVFP+0x10>
 800e788:	6801      	ldr	r1, [r0, #0]
 800e78a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e78e:	6001      	str	r1, [r0, #0]
 800e790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e792:	bf00      	nop
 800e794:	e000ed88 	.word	0xe000ed88

0800e798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e79e:	f3ef 8305 	mrs	r3, IPSR
 800e7a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2b0f      	cmp	r3, #15
 800e7a8:	d914      	bls.n	800e7d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7aa:	4a17      	ldr	r2, [pc, #92]	; (800e808 <vPortValidateInterruptPriority+0x70>)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7b4:	4b15      	ldr	r3, [pc, #84]	; (800e80c <vPortValidateInterruptPriority+0x74>)
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	7afa      	ldrb	r2, [r7, #11]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d20a      	bcs.n	800e7d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	607b      	str	r3, [r7, #4]
}
 800e7d0:	bf00      	nop
 800e7d2:	e7fe      	b.n	800e7d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e7d4:	4b0e      	ldr	r3, [pc, #56]	; (800e810 <vPortValidateInterruptPriority+0x78>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e7dc:	4b0d      	ldr	r3, [pc, #52]	; (800e814 <vPortValidateInterruptPriority+0x7c>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d90a      	bls.n	800e7fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	f383 8811 	msr	BASEPRI, r3
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	603b      	str	r3, [r7, #0]
}
 800e7f6:	bf00      	nop
 800e7f8:	e7fe      	b.n	800e7f8 <vPortValidateInterruptPriority+0x60>
	}
 800e7fa:	bf00      	nop
 800e7fc:	3714      	adds	r7, #20
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr
 800e806:	bf00      	nop
 800e808:	e000e3f0 	.word	0xe000e3f0
 800e80c:	20001490 	.word	0x20001490
 800e810:	e000ed0c 	.word	0xe000ed0c
 800e814:	20001494 	.word	0x20001494

0800e818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b08a      	sub	sp, #40	; 0x28
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e820:	2300      	movs	r3, #0
 800e822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e824:	f7fe fd9c 	bl	800d360 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e828:	4b5b      	ldr	r3, [pc, #364]	; (800e998 <pvPortMalloc+0x180>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d101      	bne.n	800e834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e830:	f000 f920 	bl	800ea74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e834:	4b59      	ldr	r3, [pc, #356]	; (800e99c <pvPortMalloc+0x184>)
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	4013      	ands	r3, r2
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f040 8093 	bne.w	800e968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d01d      	beq.n	800e884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e848:	2208      	movs	r2, #8
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4413      	add	r3, r2
 800e84e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f003 0307 	and.w	r3, r3, #7
 800e856:	2b00      	cmp	r3, #0
 800e858:	d014      	beq.n	800e884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f023 0307 	bic.w	r3, r3, #7
 800e860:	3308      	adds	r3, #8
 800e862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f003 0307 	and.w	r3, r3, #7
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00a      	beq.n	800e884 <pvPortMalloc+0x6c>
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	617b      	str	r3, [r7, #20]
}
 800e880:	bf00      	nop
 800e882:	e7fe      	b.n	800e882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d06e      	beq.n	800e968 <pvPortMalloc+0x150>
 800e88a:	4b45      	ldr	r3, [pc, #276]	; (800e9a0 <pvPortMalloc+0x188>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	429a      	cmp	r2, r3
 800e892:	d869      	bhi.n	800e968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e894:	4b43      	ldr	r3, [pc, #268]	; (800e9a4 <pvPortMalloc+0x18c>)
 800e896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e898:	4b42      	ldr	r3, [pc, #264]	; (800e9a4 <pvPortMalloc+0x18c>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e89e:	e004      	b.n	800e8aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d903      	bls.n	800e8bc <pvPortMalloc+0xa4>
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1f1      	bne.n	800e8a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e8bc:	4b36      	ldr	r3, [pc, #216]	; (800e998 <pvPortMalloc+0x180>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d050      	beq.n	800e968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e8c6:	6a3b      	ldr	r3, [r7, #32]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2208      	movs	r2, #8
 800e8cc:	4413      	add	r3, r2
 800e8ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
 800e8d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	1ad2      	subs	r2, r2, r3
 800e8e0:	2308      	movs	r3, #8
 800e8e2:	005b      	lsls	r3, r3, #1
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d91f      	bls.n	800e928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	f003 0307 	and.w	r3, r3, #7
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00a      	beq.n	800e910 <pvPortMalloc+0xf8>
	__asm volatile
 800e8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fe:	f383 8811 	msr	BASEPRI, r3
 800e902:	f3bf 8f6f 	isb	sy
 800e906:	f3bf 8f4f 	dsb	sy
 800e90a:	613b      	str	r3, [r7, #16]
}
 800e90c:	bf00      	nop
 800e90e:	e7fe      	b.n	800e90e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	685a      	ldr	r2, [r3, #4]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	1ad2      	subs	r2, r2, r3
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e922:	69b8      	ldr	r0, [r7, #24]
 800e924:	f000 f908 	bl	800eb38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e928:	4b1d      	ldr	r3, [pc, #116]	; (800e9a0 <pvPortMalloc+0x188>)
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	4a1b      	ldr	r2, [pc, #108]	; (800e9a0 <pvPortMalloc+0x188>)
 800e934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e936:	4b1a      	ldr	r3, [pc, #104]	; (800e9a0 <pvPortMalloc+0x188>)
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	4b1b      	ldr	r3, [pc, #108]	; (800e9a8 <pvPortMalloc+0x190>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d203      	bcs.n	800e94a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e942:	4b17      	ldr	r3, [pc, #92]	; (800e9a0 <pvPortMalloc+0x188>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a18      	ldr	r2, [pc, #96]	; (800e9a8 <pvPortMalloc+0x190>)
 800e948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94c:	685a      	ldr	r2, [r3, #4]
 800e94e:	4b13      	ldr	r3, [pc, #76]	; (800e99c <pvPortMalloc+0x184>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	431a      	orrs	r2, r3
 800e954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95a:	2200      	movs	r2, #0
 800e95c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e95e:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <pvPortMalloc+0x194>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	3301      	adds	r3, #1
 800e964:	4a11      	ldr	r2, [pc, #68]	; (800e9ac <pvPortMalloc+0x194>)
 800e966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e968:	f7fe fd08 	bl	800d37c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	f003 0307 	and.w	r3, r3, #7
 800e972:	2b00      	cmp	r3, #0
 800e974:	d00a      	beq.n	800e98c <pvPortMalloc+0x174>
	__asm volatile
 800e976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97a:	f383 8811 	msr	BASEPRI, r3
 800e97e:	f3bf 8f6f 	isb	sy
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	60fb      	str	r3, [r7, #12]
}
 800e988:	bf00      	nop
 800e98a:	e7fe      	b.n	800e98a <pvPortMalloc+0x172>
	return pvReturn;
 800e98c:	69fb      	ldr	r3, [r7, #28]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3728      	adds	r7, #40	; 0x28
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	200050a0 	.word	0x200050a0
 800e99c:	200050b4 	.word	0x200050b4
 800e9a0:	200050a4 	.word	0x200050a4
 800e9a4:	20005098 	.word	0x20005098
 800e9a8:	200050a8 	.word	0x200050a8
 800e9ac:	200050ac 	.word	0x200050ac

0800e9b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d04d      	beq.n	800ea5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e9c2:	2308      	movs	r3, #8
 800e9c4:	425b      	negs	r3, r3
 800e9c6:	697a      	ldr	r2, [r7, #20]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	685a      	ldr	r2, [r3, #4]
 800e9d4:	4b24      	ldr	r3, [pc, #144]	; (800ea68 <vPortFree+0xb8>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4013      	ands	r3, r2
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d10a      	bne.n	800e9f4 <vPortFree+0x44>
	__asm volatile
 800e9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e2:	f383 8811 	msr	BASEPRI, r3
 800e9e6:	f3bf 8f6f 	isb	sy
 800e9ea:	f3bf 8f4f 	dsb	sy
 800e9ee:	60fb      	str	r3, [r7, #12]
}
 800e9f0:	bf00      	nop
 800e9f2:	e7fe      	b.n	800e9f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00a      	beq.n	800ea12 <vPortFree+0x62>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	60bb      	str	r3, [r7, #8]
}
 800ea0e:	bf00      	nop
 800ea10:	e7fe      	b.n	800ea10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	685a      	ldr	r2, [r3, #4]
 800ea16:	4b14      	ldr	r3, [pc, #80]	; (800ea68 <vPortFree+0xb8>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4013      	ands	r3, r2
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d01e      	beq.n	800ea5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d11a      	bne.n	800ea5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	685a      	ldr	r2, [r3, #4]
 800ea2c:	4b0e      	ldr	r3, [pc, #56]	; (800ea68 <vPortFree+0xb8>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	43db      	mvns	r3, r3
 800ea32:	401a      	ands	r2, r3
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea38:	f7fe fc92 	bl	800d360 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	685a      	ldr	r2, [r3, #4]
 800ea40:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <vPortFree+0xbc>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4413      	add	r3, r2
 800ea46:	4a09      	ldr	r2, [pc, #36]	; (800ea6c <vPortFree+0xbc>)
 800ea48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea4a:	6938      	ldr	r0, [r7, #16]
 800ea4c:	f000 f874 	bl	800eb38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea50:	4b07      	ldr	r3, [pc, #28]	; (800ea70 <vPortFree+0xc0>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	3301      	adds	r3, #1
 800ea56:	4a06      	ldr	r2, [pc, #24]	; (800ea70 <vPortFree+0xc0>)
 800ea58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ea5a:	f7fe fc8f 	bl	800d37c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea5e:	bf00      	nop
 800ea60:	3718      	adds	r7, #24
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	200050b4 	.word	0x200050b4
 800ea6c:	200050a4 	.word	0x200050a4
 800ea70:	200050b0 	.word	0x200050b0

0800ea74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ea7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea80:	4b27      	ldr	r3, [pc, #156]	; (800eb20 <prvHeapInit+0xac>)
 800ea82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f003 0307 	and.w	r3, r3, #7
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00c      	beq.n	800eaa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	3307      	adds	r3, #7
 800ea92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f023 0307 	bic.w	r3, r3, #7
 800ea9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea9c:	68ba      	ldr	r2, [r7, #8]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	1ad3      	subs	r3, r2, r3
 800eaa2:	4a1f      	ldr	r2, [pc, #124]	; (800eb20 <prvHeapInit+0xac>)
 800eaa4:	4413      	add	r3, r2
 800eaa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eaac:	4a1d      	ldr	r2, [pc, #116]	; (800eb24 <prvHeapInit+0xb0>)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eab2:	4b1c      	ldr	r3, [pc, #112]	; (800eb24 <prvHeapInit+0xb0>)
 800eab4:	2200      	movs	r2, #0
 800eab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	4413      	add	r3, r2
 800eabe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eac0:	2208      	movs	r2, #8
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	1a9b      	subs	r3, r3, r2
 800eac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f023 0307 	bic.w	r3, r3, #7
 800eace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	4a15      	ldr	r2, [pc, #84]	; (800eb28 <prvHeapInit+0xb4>)
 800ead4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ead6:	4b14      	ldr	r3, [pc, #80]	; (800eb28 <prvHeapInit+0xb4>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2200      	movs	r2, #0
 800eadc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eade:	4b12      	ldr	r3, [pc, #72]	; (800eb28 <prvHeapInit+0xb4>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2200      	movs	r2, #0
 800eae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	68fa      	ldr	r2, [r7, #12]
 800eaee:	1ad2      	subs	r2, r2, r3
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eaf4:	4b0c      	ldr	r3, [pc, #48]	; (800eb28 <prvHeapInit+0xb4>)
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	4a0a      	ldr	r2, [pc, #40]	; (800eb2c <prvHeapInit+0xb8>)
 800eb02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	4a09      	ldr	r2, [pc, #36]	; (800eb30 <prvHeapInit+0xbc>)
 800eb0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb0c:	4b09      	ldr	r3, [pc, #36]	; (800eb34 <prvHeapInit+0xc0>)
 800eb0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb12:	601a      	str	r2, [r3, #0]
}
 800eb14:	bf00      	nop
 800eb16:	3714      	adds	r7, #20
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr
 800eb20:	20001498 	.word	0x20001498
 800eb24:	20005098 	.word	0x20005098
 800eb28:	200050a0 	.word	0x200050a0
 800eb2c:	200050a8 	.word	0x200050a8
 800eb30:	200050a4 	.word	0x200050a4
 800eb34:	200050b4 	.word	0x200050b4

0800eb38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb40:	4b28      	ldr	r3, [pc, #160]	; (800ebe4 <prvInsertBlockIntoFreeList+0xac>)
 800eb42:	60fb      	str	r3, [r7, #12]
 800eb44:	e002      	b.n	800eb4c <prvInsertBlockIntoFreeList+0x14>
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	60fb      	str	r3, [r7, #12]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d8f7      	bhi.n	800eb46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	4413      	add	r3, r2
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d108      	bne.n	800eb7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	441a      	add	r2, r3
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	68ba      	ldr	r2, [r7, #8]
 800eb84:	441a      	add	r2, r3
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d118      	bne.n	800ebc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	4b15      	ldr	r3, [pc, #84]	; (800ebe8 <prvInsertBlockIntoFreeList+0xb0>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d00d      	beq.n	800ebb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	685a      	ldr	r2, [r3, #4]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	441a      	add	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	601a      	str	r2, [r3, #0]
 800ebb4:	e008      	b.n	800ebc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ebb6:	4b0c      	ldr	r3, [pc, #48]	; (800ebe8 <prvInsertBlockIntoFreeList+0xb0>)
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	601a      	str	r2, [r3, #0]
 800ebbe:	e003      	b.n	800ebc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ebc8:	68fa      	ldr	r2, [r7, #12]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d002      	beq.n	800ebd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebd6:	bf00      	nop
 800ebd8:	3714      	adds	r7, #20
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	20005098 	.word	0x20005098
 800ebe8:	200050a0 	.word	0x200050a0

0800ebec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	4912      	ldr	r1, [pc, #72]	; (800ec3c <MX_USB_DEVICE_Init+0x50>)
 800ebf4:	4812      	ldr	r0, [pc, #72]	; (800ec40 <MX_USB_DEVICE_Init+0x54>)
 800ebf6:	f7fb ff75 	bl	800aae4 <USBD_Init>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d001      	beq.n	800ec04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ec00:	f7f2 fc2a 	bl	8001458 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ec04:	490f      	ldr	r1, [pc, #60]	; (800ec44 <MX_USB_DEVICE_Init+0x58>)
 800ec06:	480e      	ldr	r0, [pc, #56]	; (800ec40 <MX_USB_DEVICE_Init+0x54>)
 800ec08:	f7fb ff9c 	bl	800ab44 <USBD_RegisterClass>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ec12:	f7f2 fc21 	bl	8001458 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ec16:	490c      	ldr	r1, [pc, #48]	; (800ec48 <MX_USB_DEVICE_Init+0x5c>)
 800ec18:	4809      	ldr	r0, [pc, #36]	; (800ec40 <MX_USB_DEVICE_Init+0x54>)
 800ec1a:	f7fb fe8d 	bl	800a938 <USBD_CDC_RegisterInterface>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d001      	beq.n	800ec28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ec24:	f7f2 fc18 	bl	8001458 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ec28:	4805      	ldr	r0, [pc, #20]	; (800ec40 <MX_USB_DEVICE_Init+0x54>)
 800ec2a:	f7fb ffc1 	bl	800abb0 <USBD_Start>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d001      	beq.n	800ec38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ec34:	f7f2 fc10 	bl	8001458 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ec38:	bf00      	nop
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	2000012c 	.word	0x2000012c
 800ec40:	200050b8 	.word	0x200050b8
 800ec44:	20000094 	.word	0x20000094
 800ec48:	20000118 	.word	0x20000118

0800ec4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ec50:	2200      	movs	r2, #0
 800ec52:	4905      	ldr	r1, [pc, #20]	; (800ec68 <CDC_Init_FS+0x1c>)
 800ec54:	4805      	ldr	r0, [pc, #20]	; (800ec6c <CDC_Init_FS+0x20>)
 800ec56:	f7fb fe89 	bl	800a96c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ec5a:	4905      	ldr	r1, [pc, #20]	; (800ec70 <CDC_Init_FS+0x24>)
 800ec5c:	4803      	ldr	r0, [pc, #12]	; (800ec6c <CDC_Init_FS+0x20>)
 800ec5e:	f7fb fea7 	bl	800a9b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ec62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	20005b94 	.word	0x20005b94
 800ec6c:	200050b8 	.word	0x200050b8
 800ec70:	20005394 	.word	0x20005394

0800ec74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ec74:	b480      	push	{r7}
 800ec76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ec78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	6039      	str	r1, [r7, #0]
 800ec8e:	71fb      	strb	r3, [r7, #7]
 800ec90:	4613      	mov	r3, r2
 800ec92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ec94:	79fb      	ldrb	r3, [r7, #7]
 800ec96:	2b23      	cmp	r3, #35	; 0x23
 800ec98:	d84a      	bhi.n	800ed30 <CDC_Control_FS+0xac>
 800ec9a:	a201      	add	r2, pc, #4	; (adr r2, 800eca0 <CDC_Control_FS+0x1c>)
 800ec9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca0:	0800ed31 	.word	0x0800ed31
 800eca4:	0800ed31 	.word	0x0800ed31
 800eca8:	0800ed31 	.word	0x0800ed31
 800ecac:	0800ed31 	.word	0x0800ed31
 800ecb0:	0800ed31 	.word	0x0800ed31
 800ecb4:	0800ed31 	.word	0x0800ed31
 800ecb8:	0800ed31 	.word	0x0800ed31
 800ecbc:	0800ed31 	.word	0x0800ed31
 800ecc0:	0800ed31 	.word	0x0800ed31
 800ecc4:	0800ed31 	.word	0x0800ed31
 800ecc8:	0800ed31 	.word	0x0800ed31
 800eccc:	0800ed31 	.word	0x0800ed31
 800ecd0:	0800ed31 	.word	0x0800ed31
 800ecd4:	0800ed31 	.word	0x0800ed31
 800ecd8:	0800ed31 	.word	0x0800ed31
 800ecdc:	0800ed31 	.word	0x0800ed31
 800ece0:	0800ed31 	.word	0x0800ed31
 800ece4:	0800ed31 	.word	0x0800ed31
 800ece8:	0800ed31 	.word	0x0800ed31
 800ecec:	0800ed31 	.word	0x0800ed31
 800ecf0:	0800ed31 	.word	0x0800ed31
 800ecf4:	0800ed31 	.word	0x0800ed31
 800ecf8:	0800ed31 	.word	0x0800ed31
 800ecfc:	0800ed31 	.word	0x0800ed31
 800ed00:	0800ed31 	.word	0x0800ed31
 800ed04:	0800ed31 	.word	0x0800ed31
 800ed08:	0800ed31 	.word	0x0800ed31
 800ed0c:	0800ed31 	.word	0x0800ed31
 800ed10:	0800ed31 	.word	0x0800ed31
 800ed14:	0800ed31 	.word	0x0800ed31
 800ed18:	0800ed31 	.word	0x0800ed31
 800ed1c:	0800ed31 	.word	0x0800ed31
 800ed20:	0800ed31 	.word	0x0800ed31
 800ed24:	0800ed31 	.word	0x0800ed31
 800ed28:	0800ed31 	.word	0x0800ed31
 800ed2c:	0800ed31 	.word	0x0800ed31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ed30:	bf00      	nop
  }

  return (USBD_OK);
 800ed32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ed4a:	6879      	ldr	r1, [r7, #4]
 800ed4c:	4805      	ldr	r0, [pc, #20]	; (800ed64 <CDC_Receive_FS+0x24>)
 800ed4e:	f7fb fe2f 	bl	800a9b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ed52:	4804      	ldr	r0, [pc, #16]	; (800ed64 <CDC_Receive_FS+0x24>)
 800ed54:	f7fb fe90 	bl	800aa78 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ed58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	200050b8 	.word	0x200050b8

0800ed68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	460b      	mov	r3, r1
 800ed72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ed74:	2300      	movs	r3, #0
 800ed76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ed78:	4b0d      	ldr	r3, [pc, #52]	; (800edb0 <CDC_Transmit_FS+0x48>)
 800ed7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d001      	beq.n	800ed8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e00b      	b.n	800eda6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ed8e:	887b      	ldrh	r3, [r7, #2]
 800ed90:	461a      	mov	r2, r3
 800ed92:	6879      	ldr	r1, [r7, #4]
 800ed94:	4806      	ldr	r0, [pc, #24]	; (800edb0 <CDC_Transmit_FS+0x48>)
 800ed96:	f7fb fde9 	bl	800a96c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ed9a:	4805      	ldr	r0, [pc, #20]	; (800edb0 <CDC_Transmit_FS+0x48>)
 800ed9c:	f7fb fe26 	bl	800a9ec <USBD_CDC_TransmitPacket>
 800eda0:	4603      	mov	r3, r0
 800eda2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3710      	adds	r7, #16
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
 800edae:	bf00      	nop
 800edb0:	200050b8 	.word	0x200050b8

0800edb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b087      	sub	sp, #28
 800edb8:	af00      	add	r7, sp, #0
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	60b9      	str	r1, [r7, #8]
 800edbe:	4613      	mov	r3, r2
 800edc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800edc2:	2300      	movs	r3, #0
 800edc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800edc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	371c      	adds	r7, #28
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr
	...

0800edd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
 800edde:	4603      	mov	r3, r0
 800ede0:	6039      	str	r1, [r7, #0]
 800ede2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	2212      	movs	r2, #18
 800ede8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800edea:	4b03      	ldr	r3, [pc, #12]	; (800edf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800edec:	4618      	mov	r0, r3
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	20000148 	.word	0x20000148

0800edfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b083      	sub	sp, #12
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	4603      	mov	r3, r0
 800ee04:	6039      	str	r1, [r7, #0]
 800ee06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2204      	movs	r2, #4
 800ee0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ee0e:	4b03      	ldr	r3, [pc, #12]	; (800ee1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	2000015c 	.word	0x2000015c

0800ee20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	4603      	mov	r3, r0
 800ee28:	6039      	str	r1, [r7, #0]
 800ee2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ee2c:	79fb      	ldrb	r3, [r7, #7]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d105      	bne.n	800ee3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ee32:	683a      	ldr	r2, [r7, #0]
 800ee34:	4907      	ldr	r1, [pc, #28]	; (800ee54 <USBD_FS_ProductStrDescriptor+0x34>)
 800ee36:	4808      	ldr	r0, [pc, #32]	; (800ee58 <USBD_FS_ProductStrDescriptor+0x38>)
 800ee38:	f7fd f866 	bl	800bf08 <USBD_GetString>
 800ee3c:	e004      	b.n	800ee48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ee3e:	683a      	ldr	r2, [r7, #0]
 800ee40:	4904      	ldr	r1, [pc, #16]	; (800ee54 <USBD_FS_ProductStrDescriptor+0x34>)
 800ee42:	4805      	ldr	r0, [pc, #20]	; (800ee58 <USBD_FS_ProductStrDescriptor+0x38>)
 800ee44:	f7fd f860 	bl	800bf08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ee48:	4b02      	ldr	r3, [pc, #8]	; (800ee54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	20006394 	.word	0x20006394
 800ee58:	08012390 	.word	0x08012390

0800ee5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	4603      	mov	r3, r0
 800ee64:	6039      	str	r1, [r7, #0]
 800ee66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ee68:	683a      	ldr	r2, [r7, #0]
 800ee6a:	4904      	ldr	r1, [pc, #16]	; (800ee7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ee6c:	4804      	ldr	r0, [pc, #16]	; (800ee80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ee6e:	f7fd f84b 	bl	800bf08 <USBD_GetString>
  return USBD_StrDesc;
 800ee72:	4b02      	ldr	r3, [pc, #8]	; (800ee7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3708      	adds	r7, #8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	20006394 	.word	0x20006394
 800ee80:	080123a8 	.word	0x080123a8

0800ee84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	6039      	str	r1, [r7, #0]
 800ee8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	221a      	movs	r2, #26
 800ee94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ee96:	f000 f843 	bl	800ef20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ee9a:	4b02      	ldr	r3, [pc, #8]	; (800eea4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	20000160 	.word	0x20000160

0800eea8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	4603      	mov	r3, r0
 800eeb0:	6039      	str	r1, [r7, #0]
 800eeb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eeb4:	79fb      	ldrb	r3, [r7, #7]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d105      	bne.n	800eec6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eeba:	683a      	ldr	r2, [r7, #0]
 800eebc:	4907      	ldr	r1, [pc, #28]	; (800eedc <USBD_FS_ConfigStrDescriptor+0x34>)
 800eebe:	4808      	ldr	r0, [pc, #32]	; (800eee0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eec0:	f7fd f822 	bl	800bf08 <USBD_GetString>
 800eec4:	e004      	b.n	800eed0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	4904      	ldr	r1, [pc, #16]	; (800eedc <USBD_FS_ConfigStrDescriptor+0x34>)
 800eeca:	4805      	ldr	r0, [pc, #20]	; (800eee0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eecc:	f7fd f81c 	bl	800bf08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eed0:	4b02      	ldr	r3, [pc, #8]	; (800eedc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	20006394 	.word	0x20006394
 800eee0:	080123bc 	.word	0x080123bc

0800eee4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	4603      	mov	r3, r0
 800eeec:	6039      	str	r1, [r7, #0]
 800eeee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eef0:	79fb      	ldrb	r3, [r7, #7]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d105      	bne.n	800ef02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eef6:	683a      	ldr	r2, [r7, #0]
 800eef8:	4907      	ldr	r1, [pc, #28]	; (800ef18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eefa:	4808      	ldr	r0, [pc, #32]	; (800ef1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eefc:	f7fd f804 	bl	800bf08 <USBD_GetString>
 800ef00:	e004      	b.n	800ef0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef02:	683a      	ldr	r2, [r7, #0]
 800ef04:	4904      	ldr	r1, [pc, #16]	; (800ef18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef06:	4805      	ldr	r0, [pc, #20]	; (800ef1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef08:	f7fc fffe 	bl	800bf08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef0c:	4b02      	ldr	r3, [pc, #8]	; (800ef18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3708      	adds	r7, #8
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	20006394 	.word	0x20006394
 800ef1c:	080123c8 	.word	0x080123c8

0800ef20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ef26:	4b0f      	ldr	r3, [pc, #60]	; (800ef64 <Get_SerialNum+0x44>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ef2c:	4b0e      	ldr	r3, [pc, #56]	; (800ef68 <Get_SerialNum+0x48>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ef32:	4b0e      	ldr	r3, [pc, #56]	; (800ef6c <Get_SerialNum+0x4c>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ef38:	68fa      	ldr	r2, [r7, #12]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d009      	beq.n	800ef5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ef46:	2208      	movs	r2, #8
 800ef48:	4909      	ldr	r1, [pc, #36]	; (800ef70 <Get_SerialNum+0x50>)
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f000 f814 	bl	800ef78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ef50:	2204      	movs	r2, #4
 800ef52:	4908      	ldr	r1, [pc, #32]	; (800ef74 <Get_SerialNum+0x54>)
 800ef54:	68b8      	ldr	r0, [r7, #8]
 800ef56:	f000 f80f 	bl	800ef78 <IntToUnicode>
  }
}
 800ef5a:	bf00      	nop
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	1fff7a10 	.word	0x1fff7a10
 800ef68:	1fff7a14 	.word	0x1fff7a14
 800ef6c:	1fff7a18 	.word	0x1fff7a18
 800ef70:	20000162 	.word	0x20000162
 800ef74:	20000172 	.word	0x20000172

0800ef78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b087      	sub	sp, #28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	4613      	mov	r3, r2
 800ef84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	75fb      	strb	r3, [r7, #23]
 800ef8e:	e027      	b.n	800efe0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	0f1b      	lsrs	r3, r3, #28
 800ef94:	2b09      	cmp	r3, #9
 800ef96:	d80b      	bhi.n	800efb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	0f1b      	lsrs	r3, r3, #28
 800ef9c:	b2da      	uxtb	r2, r3
 800ef9e:	7dfb      	ldrb	r3, [r7, #23]
 800efa0:	005b      	lsls	r3, r3, #1
 800efa2:	4619      	mov	r1, r3
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	440b      	add	r3, r1
 800efa8:	3230      	adds	r2, #48	; 0x30
 800efaa:	b2d2      	uxtb	r2, r2
 800efac:	701a      	strb	r2, [r3, #0]
 800efae:	e00a      	b.n	800efc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	0f1b      	lsrs	r3, r3, #28
 800efb4:	b2da      	uxtb	r2, r3
 800efb6:	7dfb      	ldrb	r3, [r7, #23]
 800efb8:	005b      	lsls	r3, r3, #1
 800efba:	4619      	mov	r1, r3
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	440b      	add	r3, r1
 800efc0:	3237      	adds	r2, #55	; 0x37
 800efc2:	b2d2      	uxtb	r2, r2
 800efc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	011b      	lsls	r3, r3, #4
 800efca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800efcc:	7dfb      	ldrb	r3, [r7, #23]
 800efce:	005b      	lsls	r3, r3, #1
 800efd0:	3301      	adds	r3, #1
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	4413      	add	r3, r2
 800efd6:	2200      	movs	r2, #0
 800efd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800efda:	7dfb      	ldrb	r3, [r7, #23]
 800efdc:	3301      	adds	r3, #1
 800efde:	75fb      	strb	r3, [r7, #23]
 800efe0:	7dfa      	ldrb	r2, [r7, #23]
 800efe2:	79fb      	ldrb	r3, [r7, #7]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d3d3      	bcc.n	800ef90 <IntToUnicode+0x18>
  }
}
 800efe8:	bf00      	nop
 800efea:	bf00      	nop
 800efec:	371c      	adds	r7, #28
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
	...

0800eff8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b08a      	sub	sp, #40	; 0x28
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f000:	f107 0314 	add.w	r3, r7, #20
 800f004:	2200      	movs	r2, #0
 800f006:	601a      	str	r2, [r3, #0]
 800f008:	605a      	str	r2, [r3, #4]
 800f00a:	609a      	str	r2, [r3, #8]
 800f00c:	60da      	str	r2, [r3, #12]
 800f00e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f018:	d13a      	bne.n	800f090 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f01a:	2300      	movs	r3, #0
 800f01c:	613b      	str	r3, [r7, #16]
 800f01e:	4b1e      	ldr	r3, [pc, #120]	; (800f098 <HAL_PCD_MspInit+0xa0>)
 800f020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f022:	4a1d      	ldr	r2, [pc, #116]	; (800f098 <HAL_PCD_MspInit+0xa0>)
 800f024:	f043 0301 	orr.w	r3, r3, #1
 800f028:	6313      	str	r3, [r2, #48]	; 0x30
 800f02a:	4b1b      	ldr	r3, [pc, #108]	; (800f098 <HAL_PCD_MspInit+0xa0>)
 800f02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f02e:	f003 0301 	and.w	r3, r3, #1
 800f032:	613b      	str	r3, [r7, #16]
 800f034:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f036:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f03a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f03c:	2302      	movs	r3, #2
 800f03e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f040:	2300      	movs	r3, #0
 800f042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f044:	2303      	movs	r3, #3
 800f046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f048:	230a      	movs	r3, #10
 800f04a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f04c:	f107 0314 	add.w	r3, r7, #20
 800f050:	4619      	mov	r1, r3
 800f052:	4812      	ldr	r0, [pc, #72]	; (800f09c <HAL_PCD_MspInit+0xa4>)
 800f054:	f7f4 ff5e 	bl	8003f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f058:	4b0f      	ldr	r3, [pc, #60]	; (800f098 <HAL_PCD_MspInit+0xa0>)
 800f05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f05c:	4a0e      	ldr	r2, [pc, #56]	; (800f098 <HAL_PCD_MspInit+0xa0>)
 800f05e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f062:	6353      	str	r3, [r2, #52]	; 0x34
 800f064:	2300      	movs	r3, #0
 800f066:	60fb      	str	r3, [r7, #12]
 800f068:	4b0b      	ldr	r3, [pc, #44]	; (800f098 <HAL_PCD_MspInit+0xa0>)
 800f06a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f06c:	4a0a      	ldr	r2, [pc, #40]	; (800f098 <HAL_PCD_MspInit+0xa0>)
 800f06e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f072:	6453      	str	r3, [r2, #68]	; 0x44
 800f074:	4b08      	ldr	r3, [pc, #32]	; (800f098 <HAL_PCD_MspInit+0xa0>)
 800f076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f07c:	60fb      	str	r3, [r7, #12]
 800f07e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f080:	2200      	movs	r2, #0
 800f082:	2105      	movs	r1, #5
 800f084:	2043      	movs	r0, #67	; 0x43
 800f086:	f7f4 fac7 	bl	8003618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f08a:	2043      	movs	r0, #67	; 0x43
 800f08c:	f7f4 fae0 	bl	8003650 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f090:	bf00      	nop
 800f092:	3728      	adds	r7, #40	; 0x28
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	40023800 	.word	0x40023800
 800f09c:	40020000 	.word	0x40020000

0800f0a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	f7fb fdc7 	bl	800ac4a <USBD_LL_SetupStage>
}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f0d6:	78fa      	ldrb	r2, [r7, #3]
 800f0d8:	6879      	ldr	r1, [r7, #4]
 800f0da:	4613      	mov	r3, r2
 800f0dc:	00db      	lsls	r3, r3, #3
 800f0de:	4413      	add	r3, r2
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	440b      	add	r3, r1
 800f0e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	78fb      	ldrb	r3, [r7, #3]
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	f7fb fe01 	bl	800acf4 <USBD_LL_DataOutStage>
}
 800f0f2:	bf00      	nop
 800f0f4:	3708      	adds	r7, #8
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b082      	sub	sp, #8
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
 800f102:	460b      	mov	r3, r1
 800f104:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f10c:	78fa      	ldrb	r2, [r7, #3]
 800f10e:	6879      	ldr	r1, [r7, #4]
 800f110:	4613      	mov	r3, r2
 800f112:	00db      	lsls	r3, r3, #3
 800f114:	4413      	add	r3, r2
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	440b      	add	r3, r1
 800f11a:	334c      	adds	r3, #76	; 0x4c
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	78fb      	ldrb	r3, [r7, #3]
 800f120:	4619      	mov	r1, r3
 800f122:	f7fb fe9a 	bl	800ae5a <USBD_LL_DataInStage>
}
 800f126:	bf00      	nop
 800f128:	3708      	adds	r7, #8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b082      	sub	sp, #8
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7fb ffce 	bl	800b0de <USBD_LL_SOF>
}
 800f142:	bf00      	nop
 800f144:	3708      	adds	r7, #8
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}

0800f14a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b084      	sub	sp, #16
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f152:	2301      	movs	r3, #1
 800f154:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d102      	bne.n	800f164 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f15e:	2300      	movs	r3, #0
 800f160:	73fb      	strb	r3, [r7, #15]
 800f162:	e008      	b.n	800f176 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	2b02      	cmp	r3, #2
 800f16a:	d102      	bne.n	800f172 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f16c:	2301      	movs	r3, #1
 800f16e:	73fb      	strb	r3, [r7, #15]
 800f170:	e001      	b.n	800f176 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f172:	f7f2 f971 	bl	8001458 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f17c:	7bfa      	ldrb	r2, [r7, #15]
 800f17e:	4611      	mov	r1, r2
 800f180:	4618      	mov	r0, r3
 800f182:	f7fb ff6e 	bl	800b062 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7fb ff16 	bl	800afbe <USBD_LL_Reset>
}
 800f192:	bf00      	nop
 800f194:	3710      	adds	r7, #16
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
	...

0800f19c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fb ff69 	bl	800b082 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	6812      	ldr	r2, [r2, #0]
 800f1be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f1c2:	f043 0301 	orr.w	r3, r3, #1
 800f1c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6a1b      	ldr	r3, [r3, #32]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d005      	beq.n	800f1dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f1d0:	4b04      	ldr	r3, [pc, #16]	; (800f1e4 <HAL_PCD_SuspendCallback+0x48>)
 800f1d2:	691b      	ldr	r3, [r3, #16]
 800f1d4:	4a03      	ldr	r2, [pc, #12]	; (800f1e4 <HAL_PCD_SuspendCallback+0x48>)
 800f1d6:	f043 0306 	orr.w	r3, r3, #6
 800f1da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f1dc:	bf00      	nop
 800f1de:	3708      	adds	r7, #8
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	e000ed00 	.word	0xe000ed00

0800f1e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b082      	sub	sp, #8
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fb ff59 	bl	800b0ae <USBD_LL_Resume>
}
 800f1fc:	bf00      	nop
 800f1fe:	3708      	adds	r7, #8
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	460b      	mov	r3, r1
 800f20e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f216:	78fa      	ldrb	r2, [r7, #3]
 800f218:	4611      	mov	r1, r2
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7fb ffb1 	bl	800b182 <USBD_LL_IsoOUTIncomplete>
}
 800f220:	bf00      	nop
 800f222:	3708      	adds	r7, #8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	460b      	mov	r3, r1
 800f232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f23a:	78fa      	ldrb	r2, [r7, #3]
 800f23c:	4611      	mov	r1, r2
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fb ff6d 	bl	800b11e <USBD_LL_IsoINIncomplete>
}
 800f244:	bf00      	nop
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fb ffc3 	bl	800b1e6 <USBD_LL_DevConnected>
}
 800f260:	bf00      	nop
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f276:	4618      	mov	r0, r3
 800f278:	f7fb ffc0 	bl	800b1fc <USBD_LL_DevDisconnected>
}
 800f27c:	bf00      	nop
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d13c      	bne.n	800f30e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f294:	4a20      	ldr	r2, [pc, #128]	; (800f318 <USBD_LL_Init+0x94>)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4a1e      	ldr	r2, [pc, #120]	; (800f318 <USBD_LL_Init+0x94>)
 800f2a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f2a4:	4b1c      	ldr	r3, [pc, #112]	; (800f318 <USBD_LL_Init+0x94>)
 800f2a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f2aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f2ac:	4b1a      	ldr	r3, [pc, #104]	; (800f318 <USBD_LL_Init+0x94>)
 800f2ae:	2204      	movs	r2, #4
 800f2b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f2b2:	4b19      	ldr	r3, [pc, #100]	; (800f318 <USBD_LL_Init+0x94>)
 800f2b4:	2202      	movs	r2, #2
 800f2b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f2b8:	4b17      	ldr	r3, [pc, #92]	; (800f318 <USBD_LL_Init+0x94>)
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f2be:	4b16      	ldr	r3, [pc, #88]	; (800f318 <USBD_LL_Init+0x94>)
 800f2c0:	2202      	movs	r2, #2
 800f2c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f2c4:	4b14      	ldr	r3, [pc, #80]	; (800f318 <USBD_LL_Init+0x94>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f2ca:	4b13      	ldr	r3, [pc, #76]	; (800f318 <USBD_LL_Init+0x94>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f2d0:	4b11      	ldr	r3, [pc, #68]	; (800f318 <USBD_LL_Init+0x94>)
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f2d6:	4b10      	ldr	r3, [pc, #64]	; (800f318 <USBD_LL_Init+0x94>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f2dc:	4b0e      	ldr	r3, [pc, #56]	; (800f318 <USBD_LL_Init+0x94>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f2e2:	480d      	ldr	r0, [pc, #52]	; (800f318 <USBD_LL_Init+0x94>)
 800f2e4:	f7f5 fd81 	bl	8004dea <HAL_PCD_Init>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d001      	beq.n	800f2f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f2ee:	f7f2 f8b3 	bl	8001458 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f2f2:	2180      	movs	r1, #128	; 0x80
 800f2f4:	4808      	ldr	r0, [pc, #32]	; (800f318 <USBD_LL_Init+0x94>)
 800f2f6:	f7f6 ffd8 	bl	80062aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f2fa:	2240      	movs	r2, #64	; 0x40
 800f2fc:	2100      	movs	r1, #0
 800f2fe:	4806      	ldr	r0, [pc, #24]	; (800f318 <USBD_LL_Init+0x94>)
 800f300:	f7f6 ff8c 	bl	800621c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f304:	2280      	movs	r2, #128	; 0x80
 800f306:	2101      	movs	r1, #1
 800f308:	4803      	ldr	r0, [pc, #12]	; (800f318 <USBD_LL_Init+0x94>)
 800f30a:	f7f6 ff87 	bl	800621c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f30e:	2300      	movs	r3, #0
}
 800f310:	4618      	mov	r0, r3
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	20006594 	.word	0x20006594

0800f31c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f324:	2300      	movs	r3, #0
 800f326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f328:	2300      	movs	r3, #0
 800f32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f332:	4618      	mov	r0, r3
 800f334:	f7f5 fe76 	bl	8005024 <HAL_PCD_Start>
 800f338:	4603      	mov	r3, r0
 800f33a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f33c:	7bfb      	ldrb	r3, [r7, #15]
 800f33e:	4618      	mov	r0, r3
 800f340:	f000 f942 	bl	800f5c8 <USBD_Get_USB_Status>
 800f344:	4603      	mov	r3, r0
 800f346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f348:	7bbb      	ldrb	r3, [r7, #14]
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}

0800f352 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f352:	b580      	push	{r7, lr}
 800f354:	b084      	sub	sp, #16
 800f356:	af00      	add	r7, sp, #0
 800f358:	6078      	str	r0, [r7, #4]
 800f35a:	4608      	mov	r0, r1
 800f35c:	4611      	mov	r1, r2
 800f35e:	461a      	mov	r2, r3
 800f360:	4603      	mov	r3, r0
 800f362:	70fb      	strb	r3, [r7, #3]
 800f364:	460b      	mov	r3, r1
 800f366:	70bb      	strb	r3, [r7, #2]
 800f368:	4613      	mov	r3, r2
 800f36a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f36c:	2300      	movs	r3, #0
 800f36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f370:	2300      	movs	r3, #0
 800f372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f37a:	78bb      	ldrb	r3, [r7, #2]
 800f37c:	883a      	ldrh	r2, [r7, #0]
 800f37e:	78f9      	ldrb	r1, [r7, #3]
 800f380:	f7f6 fb47 	bl	8005a12 <HAL_PCD_EP_Open>
 800f384:	4603      	mov	r3, r0
 800f386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f388:	7bfb      	ldrb	r3, [r7, #15]
 800f38a:	4618      	mov	r0, r3
 800f38c:	f000 f91c 	bl	800f5c8 <USBD_Get_USB_Status>
 800f390:	4603      	mov	r3, r0
 800f392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f394:	7bbb      	ldrb	r3, [r7, #14]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}

0800f39e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b084      	sub	sp, #16
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f3b8:	78fa      	ldrb	r2, [r7, #3]
 800f3ba:	4611      	mov	r1, r2
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7f6 fb90 	bl	8005ae2 <HAL_PCD_EP_Close>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3c6:	7bfb      	ldrb	r3, [r7, #15]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f000 f8fd 	bl	800f5c8 <USBD_Get_USB_Status>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f3f6:	78fa      	ldrb	r2, [r7, #3]
 800f3f8:	4611      	mov	r1, r2
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7f6 fc68 	bl	8005cd0 <HAL_PCD_EP_SetStall>
 800f400:	4603      	mov	r3, r0
 800f402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f404:	7bfb      	ldrb	r3, [r7, #15]
 800f406:	4618      	mov	r0, r3
 800f408:	f000 f8de 	bl	800f5c8 <USBD_Get_USB_Status>
 800f40c:	4603      	mov	r3, r0
 800f40e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f410:	7bbb      	ldrb	r3, [r7, #14]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b084      	sub	sp, #16
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
 800f422:	460b      	mov	r3, r1
 800f424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f426:	2300      	movs	r3, #0
 800f428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f42a:	2300      	movs	r3, #0
 800f42c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f434:	78fa      	ldrb	r2, [r7, #3]
 800f436:	4611      	mov	r1, r2
 800f438:	4618      	mov	r0, r3
 800f43a:	f7f6 fcad 	bl	8005d98 <HAL_PCD_EP_ClrStall>
 800f43e:	4603      	mov	r3, r0
 800f440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f442:	7bfb      	ldrb	r3, [r7, #15]
 800f444:	4618      	mov	r0, r3
 800f446:	f000 f8bf 	bl	800f5c8 <USBD_Get_USB_Status>
 800f44a:	4603      	mov	r3, r0
 800f44c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f44e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f450:	4618      	mov	r0, r3
 800f452:	3710      	adds	r7, #16
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	460b      	mov	r3, r1
 800f462:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f46a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f46c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f470:	2b00      	cmp	r3, #0
 800f472:	da0b      	bge.n	800f48c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f474:	78fb      	ldrb	r3, [r7, #3]
 800f476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f47a:	68f9      	ldr	r1, [r7, #12]
 800f47c:	4613      	mov	r3, r2
 800f47e:	00db      	lsls	r3, r3, #3
 800f480:	4413      	add	r3, r2
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	440b      	add	r3, r1
 800f486:	333e      	adds	r3, #62	; 0x3e
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	e00b      	b.n	800f4a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f48c:	78fb      	ldrb	r3, [r7, #3]
 800f48e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f492:	68f9      	ldr	r1, [r7, #12]
 800f494:	4613      	mov	r3, r2
 800f496:	00db      	lsls	r3, r3, #3
 800f498:	4413      	add	r3, r2
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	440b      	add	r3, r1
 800f49e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f4a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3714      	adds	r7, #20
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f4ca:	78fa      	ldrb	r2, [r7, #3]
 800f4cc:	4611      	mov	r1, r2
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7f6 fa7a 	bl	80059c8 <HAL_PCD_SetAddress>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f000 f874 	bl	800f5c8 <USBD_Get_USB_Status>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f4ee:	b580      	push	{r7, lr}
 800f4f0:	b086      	sub	sp, #24
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	60f8      	str	r0, [r7, #12]
 800f4f6:	607a      	str	r2, [r7, #4]
 800f4f8:	603b      	str	r3, [r7, #0]
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4fe:	2300      	movs	r3, #0
 800f500:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f502:	2300      	movs	r3, #0
 800f504:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f50c:	7af9      	ldrb	r1, [r7, #11]
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	687a      	ldr	r2, [r7, #4]
 800f512:	f7f6 fb93 	bl	8005c3c <HAL_PCD_EP_Transmit>
 800f516:	4603      	mov	r3, r0
 800f518:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f51a:	7dfb      	ldrb	r3, [r7, #23]
 800f51c:	4618      	mov	r0, r3
 800f51e:	f000 f853 	bl	800f5c8 <USBD_Get_USB_Status>
 800f522:	4603      	mov	r3, r0
 800f524:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f526:	7dbb      	ldrb	r3, [r7, #22]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3718      	adds	r7, #24
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b086      	sub	sp, #24
 800f534:	af00      	add	r7, sp, #0
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	607a      	str	r2, [r7, #4]
 800f53a:	603b      	str	r3, [r7, #0]
 800f53c:	460b      	mov	r3, r1
 800f53e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f540:	2300      	movs	r3, #0
 800f542:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f544:	2300      	movs	r3, #0
 800f546:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f54e:	7af9      	ldrb	r1, [r7, #11]
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	f7f6 fb0f 	bl	8005b76 <HAL_PCD_EP_Receive>
 800f558:	4603      	mov	r3, r0
 800f55a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f55c:	7dfb      	ldrb	r3, [r7, #23]
 800f55e:	4618      	mov	r0, r3
 800f560:	f000 f832 	bl	800f5c8 <USBD_Get_USB_Status>
 800f564:	4603      	mov	r3, r0
 800f566:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f568:	7dbb      	ldrb	r3, [r7, #22]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3718      	adds	r7, #24
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}

0800f572 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f572:	b580      	push	{r7, lr}
 800f574:	b082      	sub	sp, #8
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
 800f57a:	460b      	mov	r3, r1
 800f57c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f584:	78fa      	ldrb	r2, [r7, #3]
 800f586:	4611      	mov	r1, r2
 800f588:	4618      	mov	r0, r3
 800f58a:	f7f6 fb3f 	bl	8005c0c <HAL_PCD_EP_GetRxCount>
 800f58e:	4603      	mov	r3, r0
}
 800f590:	4618      	mov	r0, r3
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f5a0:	4b03      	ldr	r3, [pc, #12]	; (800f5b0 <USBD_static_malloc+0x18>)
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	370c      	adds	r7, #12
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	20006aa0 	.word	0x20006aa0

0800f5b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]

}
 800f5bc:	bf00      	nop
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b085      	sub	sp, #20
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f5d6:	79fb      	ldrb	r3, [r7, #7]
 800f5d8:	2b03      	cmp	r3, #3
 800f5da:	d817      	bhi.n	800f60c <USBD_Get_USB_Status+0x44>
 800f5dc:	a201      	add	r2, pc, #4	; (adr r2, 800f5e4 <USBD_Get_USB_Status+0x1c>)
 800f5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e2:	bf00      	nop
 800f5e4:	0800f5f5 	.word	0x0800f5f5
 800f5e8:	0800f5fb 	.word	0x0800f5fb
 800f5ec:	0800f601 	.word	0x0800f601
 800f5f0:	0800f607 	.word	0x0800f607
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f5f8:	e00b      	b.n	800f612 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f5fa:	2303      	movs	r3, #3
 800f5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800f5fe:	e008      	b.n	800f612 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f600:	2301      	movs	r3, #1
 800f602:	73fb      	strb	r3, [r7, #15]
    break;
 800f604:	e005      	b.n	800f612 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f606:	2303      	movs	r3, #3
 800f608:	73fb      	strb	r3, [r7, #15]
    break;
 800f60a:	e002      	b.n	800f612 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f60c:	2303      	movs	r3, #3
 800f60e:	73fb      	strb	r3, [r7, #15]
    break;
 800f610:	bf00      	nop
  }
  return usb_status;
 800f612:	7bfb      	ldrb	r3, [r7, #15]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3714      	adds	r7, #20
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <__cvt>:
 800f620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f624:	ec55 4b10 	vmov	r4, r5, d0
 800f628:	2d00      	cmp	r5, #0
 800f62a:	460e      	mov	r6, r1
 800f62c:	4619      	mov	r1, r3
 800f62e:	462b      	mov	r3, r5
 800f630:	bfbb      	ittet	lt
 800f632:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f636:	461d      	movlt	r5, r3
 800f638:	2300      	movge	r3, #0
 800f63a:	232d      	movlt	r3, #45	; 0x2d
 800f63c:	700b      	strb	r3, [r1, #0]
 800f63e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f640:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f644:	4691      	mov	r9, r2
 800f646:	f023 0820 	bic.w	r8, r3, #32
 800f64a:	bfbc      	itt	lt
 800f64c:	4622      	movlt	r2, r4
 800f64e:	4614      	movlt	r4, r2
 800f650:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f654:	d005      	beq.n	800f662 <__cvt+0x42>
 800f656:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f65a:	d100      	bne.n	800f65e <__cvt+0x3e>
 800f65c:	3601      	adds	r6, #1
 800f65e:	2102      	movs	r1, #2
 800f660:	e000      	b.n	800f664 <__cvt+0x44>
 800f662:	2103      	movs	r1, #3
 800f664:	ab03      	add	r3, sp, #12
 800f666:	9301      	str	r3, [sp, #4]
 800f668:	ab02      	add	r3, sp, #8
 800f66a:	9300      	str	r3, [sp, #0]
 800f66c:	ec45 4b10 	vmov	d0, r4, r5
 800f670:	4653      	mov	r3, sl
 800f672:	4632      	mov	r2, r6
 800f674:	f000 fe78 	bl	8010368 <_dtoa_r>
 800f678:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f67c:	4607      	mov	r7, r0
 800f67e:	d102      	bne.n	800f686 <__cvt+0x66>
 800f680:	f019 0f01 	tst.w	r9, #1
 800f684:	d022      	beq.n	800f6cc <__cvt+0xac>
 800f686:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f68a:	eb07 0906 	add.w	r9, r7, r6
 800f68e:	d110      	bne.n	800f6b2 <__cvt+0x92>
 800f690:	783b      	ldrb	r3, [r7, #0]
 800f692:	2b30      	cmp	r3, #48	; 0x30
 800f694:	d10a      	bne.n	800f6ac <__cvt+0x8c>
 800f696:	2200      	movs	r2, #0
 800f698:	2300      	movs	r3, #0
 800f69a:	4620      	mov	r0, r4
 800f69c:	4629      	mov	r1, r5
 800f69e:	f7f1 fa23 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6a2:	b918      	cbnz	r0, 800f6ac <__cvt+0x8c>
 800f6a4:	f1c6 0601 	rsb	r6, r6, #1
 800f6a8:	f8ca 6000 	str.w	r6, [sl]
 800f6ac:	f8da 3000 	ldr.w	r3, [sl]
 800f6b0:	4499      	add	r9, r3
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	4629      	mov	r1, r5
 800f6ba:	f7f1 fa15 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6be:	b108      	cbz	r0, 800f6c4 <__cvt+0xa4>
 800f6c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f6c4:	2230      	movs	r2, #48	; 0x30
 800f6c6:	9b03      	ldr	r3, [sp, #12]
 800f6c8:	454b      	cmp	r3, r9
 800f6ca:	d307      	bcc.n	800f6dc <__cvt+0xbc>
 800f6cc:	9b03      	ldr	r3, [sp, #12]
 800f6ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6d0:	1bdb      	subs	r3, r3, r7
 800f6d2:	4638      	mov	r0, r7
 800f6d4:	6013      	str	r3, [r2, #0]
 800f6d6:	b004      	add	sp, #16
 800f6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6dc:	1c59      	adds	r1, r3, #1
 800f6de:	9103      	str	r1, [sp, #12]
 800f6e0:	701a      	strb	r2, [r3, #0]
 800f6e2:	e7f0      	b.n	800f6c6 <__cvt+0xa6>

0800f6e4 <__exponent>:
 800f6e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2900      	cmp	r1, #0
 800f6ea:	bfb8      	it	lt
 800f6ec:	4249      	neglt	r1, r1
 800f6ee:	f803 2b02 	strb.w	r2, [r3], #2
 800f6f2:	bfb4      	ite	lt
 800f6f4:	222d      	movlt	r2, #45	; 0x2d
 800f6f6:	222b      	movge	r2, #43	; 0x2b
 800f6f8:	2909      	cmp	r1, #9
 800f6fa:	7042      	strb	r2, [r0, #1]
 800f6fc:	dd2a      	ble.n	800f754 <__exponent+0x70>
 800f6fe:	f10d 0207 	add.w	r2, sp, #7
 800f702:	4617      	mov	r7, r2
 800f704:	260a      	movs	r6, #10
 800f706:	4694      	mov	ip, r2
 800f708:	fb91 f5f6 	sdiv	r5, r1, r6
 800f70c:	fb06 1415 	mls	r4, r6, r5, r1
 800f710:	3430      	adds	r4, #48	; 0x30
 800f712:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f716:	460c      	mov	r4, r1
 800f718:	2c63      	cmp	r4, #99	; 0x63
 800f71a:	f102 32ff 	add.w	r2, r2, #4294967295
 800f71e:	4629      	mov	r1, r5
 800f720:	dcf1      	bgt.n	800f706 <__exponent+0x22>
 800f722:	3130      	adds	r1, #48	; 0x30
 800f724:	f1ac 0402 	sub.w	r4, ip, #2
 800f728:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f72c:	1c41      	adds	r1, r0, #1
 800f72e:	4622      	mov	r2, r4
 800f730:	42ba      	cmp	r2, r7
 800f732:	d30a      	bcc.n	800f74a <__exponent+0x66>
 800f734:	f10d 0209 	add.w	r2, sp, #9
 800f738:	eba2 020c 	sub.w	r2, r2, ip
 800f73c:	42bc      	cmp	r4, r7
 800f73e:	bf88      	it	hi
 800f740:	2200      	movhi	r2, #0
 800f742:	4413      	add	r3, r2
 800f744:	1a18      	subs	r0, r3, r0
 800f746:	b003      	add	sp, #12
 800f748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f74a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f74e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f752:	e7ed      	b.n	800f730 <__exponent+0x4c>
 800f754:	2330      	movs	r3, #48	; 0x30
 800f756:	3130      	adds	r1, #48	; 0x30
 800f758:	7083      	strb	r3, [r0, #2]
 800f75a:	70c1      	strb	r1, [r0, #3]
 800f75c:	1d03      	adds	r3, r0, #4
 800f75e:	e7f1      	b.n	800f744 <__exponent+0x60>

0800f760 <_printf_float>:
 800f760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f764:	ed2d 8b02 	vpush	{d8}
 800f768:	b08d      	sub	sp, #52	; 0x34
 800f76a:	460c      	mov	r4, r1
 800f76c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f770:	4616      	mov	r6, r2
 800f772:	461f      	mov	r7, r3
 800f774:	4605      	mov	r5, r0
 800f776:	f000 fce7 	bl	8010148 <_localeconv_r>
 800f77a:	f8d0 a000 	ldr.w	sl, [r0]
 800f77e:	4650      	mov	r0, sl
 800f780:	f7f0 fd86 	bl	8000290 <strlen>
 800f784:	2300      	movs	r3, #0
 800f786:	930a      	str	r3, [sp, #40]	; 0x28
 800f788:	6823      	ldr	r3, [r4, #0]
 800f78a:	9305      	str	r3, [sp, #20]
 800f78c:	f8d8 3000 	ldr.w	r3, [r8]
 800f790:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f794:	3307      	adds	r3, #7
 800f796:	f023 0307 	bic.w	r3, r3, #7
 800f79a:	f103 0208 	add.w	r2, r3, #8
 800f79e:	f8c8 2000 	str.w	r2, [r8]
 800f7a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f7a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f7aa:	9307      	str	r3, [sp, #28]
 800f7ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800f7b0:	ee08 0a10 	vmov	s16, r0
 800f7b4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f7b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7bc:	4b9e      	ldr	r3, [pc, #632]	; (800fa38 <_printf_float+0x2d8>)
 800f7be:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c2:	f7f1 f9c3 	bl	8000b4c <__aeabi_dcmpun>
 800f7c6:	bb88      	cbnz	r0, 800f82c <_printf_float+0xcc>
 800f7c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7cc:	4b9a      	ldr	r3, [pc, #616]	; (800fa38 <_printf_float+0x2d8>)
 800f7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f7d2:	f7f1 f99d 	bl	8000b10 <__aeabi_dcmple>
 800f7d6:	bb48      	cbnz	r0, 800f82c <_printf_float+0xcc>
 800f7d8:	2200      	movs	r2, #0
 800f7da:	2300      	movs	r3, #0
 800f7dc:	4640      	mov	r0, r8
 800f7de:	4649      	mov	r1, r9
 800f7e0:	f7f1 f98c 	bl	8000afc <__aeabi_dcmplt>
 800f7e4:	b110      	cbz	r0, 800f7ec <_printf_float+0x8c>
 800f7e6:	232d      	movs	r3, #45	; 0x2d
 800f7e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7ec:	4a93      	ldr	r2, [pc, #588]	; (800fa3c <_printf_float+0x2dc>)
 800f7ee:	4b94      	ldr	r3, [pc, #592]	; (800fa40 <_printf_float+0x2e0>)
 800f7f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f7f4:	bf94      	ite	ls
 800f7f6:	4690      	movls	r8, r2
 800f7f8:	4698      	movhi	r8, r3
 800f7fa:	2303      	movs	r3, #3
 800f7fc:	6123      	str	r3, [r4, #16]
 800f7fe:	9b05      	ldr	r3, [sp, #20]
 800f800:	f023 0304 	bic.w	r3, r3, #4
 800f804:	6023      	str	r3, [r4, #0]
 800f806:	f04f 0900 	mov.w	r9, #0
 800f80a:	9700      	str	r7, [sp, #0]
 800f80c:	4633      	mov	r3, r6
 800f80e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f810:	4621      	mov	r1, r4
 800f812:	4628      	mov	r0, r5
 800f814:	f000 f9da 	bl	800fbcc <_printf_common>
 800f818:	3001      	adds	r0, #1
 800f81a:	f040 8090 	bne.w	800f93e <_printf_float+0x1de>
 800f81e:	f04f 30ff 	mov.w	r0, #4294967295
 800f822:	b00d      	add	sp, #52	; 0x34
 800f824:	ecbd 8b02 	vpop	{d8}
 800f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82c:	4642      	mov	r2, r8
 800f82e:	464b      	mov	r3, r9
 800f830:	4640      	mov	r0, r8
 800f832:	4649      	mov	r1, r9
 800f834:	f7f1 f98a 	bl	8000b4c <__aeabi_dcmpun>
 800f838:	b140      	cbz	r0, 800f84c <_printf_float+0xec>
 800f83a:	464b      	mov	r3, r9
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	bfbc      	itt	lt
 800f840:	232d      	movlt	r3, #45	; 0x2d
 800f842:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f846:	4a7f      	ldr	r2, [pc, #508]	; (800fa44 <_printf_float+0x2e4>)
 800f848:	4b7f      	ldr	r3, [pc, #508]	; (800fa48 <_printf_float+0x2e8>)
 800f84a:	e7d1      	b.n	800f7f0 <_printf_float+0x90>
 800f84c:	6863      	ldr	r3, [r4, #4]
 800f84e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f852:	9206      	str	r2, [sp, #24]
 800f854:	1c5a      	adds	r2, r3, #1
 800f856:	d13f      	bne.n	800f8d8 <_printf_float+0x178>
 800f858:	2306      	movs	r3, #6
 800f85a:	6063      	str	r3, [r4, #4]
 800f85c:	9b05      	ldr	r3, [sp, #20]
 800f85e:	6861      	ldr	r1, [r4, #4]
 800f860:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f864:	2300      	movs	r3, #0
 800f866:	9303      	str	r3, [sp, #12]
 800f868:	ab0a      	add	r3, sp, #40	; 0x28
 800f86a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f86e:	ab09      	add	r3, sp, #36	; 0x24
 800f870:	ec49 8b10 	vmov	d0, r8, r9
 800f874:	9300      	str	r3, [sp, #0]
 800f876:	6022      	str	r2, [r4, #0]
 800f878:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f87c:	4628      	mov	r0, r5
 800f87e:	f7ff fecf 	bl	800f620 <__cvt>
 800f882:	9b06      	ldr	r3, [sp, #24]
 800f884:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f886:	2b47      	cmp	r3, #71	; 0x47
 800f888:	4680      	mov	r8, r0
 800f88a:	d108      	bne.n	800f89e <_printf_float+0x13e>
 800f88c:	1cc8      	adds	r0, r1, #3
 800f88e:	db02      	blt.n	800f896 <_printf_float+0x136>
 800f890:	6863      	ldr	r3, [r4, #4]
 800f892:	4299      	cmp	r1, r3
 800f894:	dd41      	ble.n	800f91a <_printf_float+0x1ba>
 800f896:	f1ab 0302 	sub.w	r3, fp, #2
 800f89a:	fa5f fb83 	uxtb.w	fp, r3
 800f89e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f8a2:	d820      	bhi.n	800f8e6 <_printf_float+0x186>
 800f8a4:	3901      	subs	r1, #1
 800f8a6:	465a      	mov	r2, fp
 800f8a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f8ac:	9109      	str	r1, [sp, #36]	; 0x24
 800f8ae:	f7ff ff19 	bl	800f6e4 <__exponent>
 800f8b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8b4:	1813      	adds	r3, r2, r0
 800f8b6:	2a01      	cmp	r2, #1
 800f8b8:	4681      	mov	r9, r0
 800f8ba:	6123      	str	r3, [r4, #16]
 800f8bc:	dc02      	bgt.n	800f8c4 <_printf_float+0x164>
 800f8be:	6822      	ldr	r2, [r4, #0]
 800f8c0:	07d2      	lsls	r2, r2, #31
 800f8c2:	d501      	bpl.n	800f8c8 <_printf_float+0x168>
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	6123      	str	r3, [r4, #16]
 800f8c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d09c      	beq.n	800f80a <_printf_float+0xaa>
 800f8d0:	232d      	movs	r3, #45	; 0x2d
 800f8d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8d6:	e798      	b.n	800f80a <_printf_float+0xaa>
 800f8d8:	9a06      	ldr	r2, [sp, #24]
 800f8da:	2a47      	cmp	r2, #71	; 0x47
 800f8dc:	d1be      	bne.n	800f85c <_printf_float+0xfc>
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d1bc      	bne.n	800f85c <_printf_float+0xfc>
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	e7b9      	b.n	800f85a <_printf_float+0xfa>
 800f8e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f8ea:	d118      	bne.n	800f91e <_printf_float+0x1be>
 800f8ec:	2900      	cmp	r1, #0
 800f8ee:	6863      	ldr	r3, [r4, #4]
 800f8f0:	dd0b      	ble.n	800f90a <_printf_float+0x1aa>
 800f8f2:	6121      	str	r1, [r4, #16]
 800f8f4:	b913      	cbnz	r3, 800f8fc <_printf_float+0x19c>
 800f8f6:	6822      	ldr	r2, [r4, #0]
 800f8f8:	07d0      	lsls	r0, r2, #31
 800f8fa:	d502      	bpl.n	800f902 <_printf_float+0x1a2>
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	440b      	add	r3, r1
 800f900:	6123      	str	r3, [r4, #16]
 800f902:	65a1      	str	r1, [r4, #88]	; 0x58
 800f904:	f04f 0900 	mov.w	r9, #0
 800f908:	e7de      	b.n	800f8c8 <_printf_float+0x168>
 800f90a:	b913      	cbnz	r3, 800f912 <_printf_float+0x1b2>
 800f90c:	6822      	ldr	r2, [r4, #0]
 800f90e:	07d2      	lsls	r2, r2, #31
 800f910:	d501      	bpl.n	800f916 <_printf_float+0x1b6>
 800f912:	3302      	adds	r3, #2
 800f914:	e7f4      	b.n	800f900 <_printf_float+0x1a0>
 800f916:	2301      	movs	r3, #1
 800f918:	e7f2      	b.n	800f900 <_printf_float+0x1a0>
 800f91a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f920:	4299      	cmp	r1, r3
 800f922:	db05      	blt.n	800f930 <_printf_float+0x1d0>
 800f924:	6823      	ldr	r3, [r4, #0]
 800f926:	6121      	str	r1, [r4, #16]
 800f928:	07d8      	lsls	r0, r3, #31
 800f92a:	d5ea      	bpl.n	800f902 <_printf_float+0x1a2>
 800f92c:	1c4b      	adds	r3, r1, #1
 800f92e:	e7e7      	b.n	800f900 <_printf_float+0x1a0>
 800f930:	2900      	cmp	r1, #0
 800f932:	bfd4      	ite	le
 800f934:	f1c1 0202 	rsble	r2, r1, #2
 800f938:	2201      	movgt	r2, #1
 800f93a:	4413      	add	r3, r2
 800f93c:	e7e0      	b.n	800f900 <_printf_float+0x1a0>
 800f93e:	6823      	ldr	r3, [r4, #0]
 800f940:	055a      	lsls	r2, r3, #21
 800f942:	d407      	bmi.n	800f954 <_printf_float+0x1f4>
 800f944:	6923      	ldr	r3, [r4, #16]
 800f946:	4642      	mov	r2, r8
 800f948:	4631      	mov	r1, r6
 800f94a:	4628      	mov	r0, r5
 800f94c:	47b8      	blx	r7
 800f94e:	3001      	adds	r0, #1
 800f950:	d12c      	bne.n	800f9ac <_printf_float+0x24c>
 800f952:	e764      	b.n	800f81e <_printf_float+0xbe>
 800f954:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f958:	f240 80e0 	bls.w	800fb1c <_printf_float+0x3bc>
 800f95c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f960:	2200      	movs	r2, #0
 800f962:	2300      	movs	r3, #0
 800f964:	f7f1 f8c0 	bl	8000ae8 <__aeabi_dcmpeq>
 800f968:	2800      	cmp	r0, #0
 800f96a:	d034      	beq.n	800f9d6 <_printf_float+0x276>
 800f96c:	4a37      	ldr	r2, [pc, #220]	; (800fa4c <_printf_float+0x2ec>)
 800f96e:	2301      	movs	r3, #1
 800f970:	4631      	mov	r1, r6
 800f972:	4628      	mov	r0, r5
 800f974:	47b8      	blx	r7
 800f976:	3001      	adds	r0, #1
 800f978:	f43f af51 	beq.w	800f81e <_printf_float+0xbe>
 800f97c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f980:	429a      	cmp	r2, r3
 800f982:	db02      	blt.n	800f98a <_printf_float+0x22a>
 800f984:	6823      	ldr	r3, [r4, #0]
 800f986:	07d8      	lsls	r0, r3, #31
 800f988:	d510      	bpl.n	800f9ac <_printf_float+0x24c>
 800f98a:	ee18 3a10 	vmov	r3, s16
 800f98e:	4652      	mov	r2, sl
 800f990:	4631      	mov	r1, r6
 800f992:	4628      	mov	r0, r5
 800f994:	47b8      	blx	r7
 800f996:	3001      	adds	r0, #1
 800f998:	f43f af41 	beq.w	800f81e <_printf_float+0xbe>
 800f99c:	f04f 0800 	mov.w	r8, #0
 800f9a0:	f104 091a 	add.w	r9, r4, #26
 800f9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	4543      	cmp	r3, r8
 800f9aa:	dc09      	bgt.n	800f9c0 <_printf_float+0x260>
 800f9ac:	6823      	ldr	r3, [r4, #0]
 800f9ae:	079b      	lsls	r3, r3, #30
 800f9b0:	f100 8107 	bmi.w	800fbc2 <_printf_float+0x462>
 800f9b4:	68e0      	ldr	r0, [r4, #12]
 800f9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9b8:	4298      	cmp	r0, r3
 800f9ba:	bfb8      	it	lt
 800f9bc:	4618      	movlt	r0, r3
 800f9be:	e730      	b.n	800f822 <_printf_float+0xc2>
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	464a      	mov	r2, r9
 800f9c4:	4631      	mov	r1, r6
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	47b8      	blx	r7
 800f9ca:	3001      	adds	r0, #1
 800f9cc:	f43f af27 	beq.w	800f81e <_printf_float+0xbe>
 800f9d0:	f108 0801 	add.w	r8, r8, #1
 800f9d4:	e7e6      	b.n	800f9a4 <_printf_float+0x244>
 800f9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	dc39      	bgt.n	800fa50 <_printf_float+0x2f0>
 800f9dc:	4a1b      	ldr	r2, [pc, #108]	; (800fa4c <_printf_float+0x2ec>)
 800f9de:	2301      	movs	r3, #1
 800f9e0:	4631      	mov	r1, r6
 800f9e2:	4628      	mov	r0, r5
 800f9e4:	47b8      	blx	r7
 800f9e6:	3001      	adds	r0, #1
 800f9e8:	f43f af19 	beq.w	800f81e <_printf_float+0xbe>
 800f9ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	d102      	bne.n	800f9fa <_printf_float+0x29a>
 800f9f4:	6823      	ldr	r3, [r4, #0]
 800f9f6:	07d9      	lsls	r1, r3, #31
 800f9f8:	d5d8      	bpl.n	800f9ac <_printf_float+0x24c>
 800f9fa:	ee18 3a10 	vmov	r3, s16
 800f9fe:	4652      	mov	r2, sl
 800fa00:	4631      	mov	r1, r6
 800fa02:	4628      	mov	r0, r5
 800fa04:	47b8      	blx	r7
 800fa06:	3001      	adds	r0, #1
 800fa08:	f43f af09 	beq.w	800f81e <_printf_float+0xbe>
 800fa0c:	f04f 0900 	mov.w	r9, #0
 800fa10:	f104 0a1a 	add.w	sl, r4, #26
 800fa14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa16:	425b      	negs	r3, r3
 800fa18:	454b      	cmp	r3, r9
 800fa1a:	dc01      	bgt.n	800fa20 <_printf_float+0x2c0>
 800fa1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa1e:	e792      	b.n	800f946 <_printf_float+0x1e6>
 800fa20:	2301      	movs	r3, #1
 800fa22:	4652      	mov	r2, sl
 800fa24:	4631      	mov	r1, r6
 800fa26:	4628      	mov	r0, r5
 800fa28:	47b8      	blx	r7
 800fa2a:	3001      	adds	r0, #1
 800fa2c:	f43f aef7 	beq.w	800f81e <_printf_float+0xbe>
 800fa30:	f109 0901 	add.w	r9, r9, #1
 800fa34:	e7ee      	b.n	800fa14 <_printf_float+0x2b4>
 800fa36:	bf00      	nop
 800fa38:	7fefffff 	.word	0x7fefffff
 800fa3c:	08013f1c 	.word	0x08013f1c
 800fa40:	08013f20 	.word	0x08013f20
 800fa44:	08013f24 	.word	0x08013f24
 800fa48:	08013f28 	.word	0x08013f28
 800fa4c:	08013f2c 	.word	0x08013f2c
 800fa50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa54:	429a      	cmp	r2, r3
 800fa56:	bfa8      	it	ge
 800fa58:	461a      	movge	r2, r3
 800fa5a:	2a00      	cmp	r2, #0
 800fa5c:	4691      	mov	r9, r2
 800fa5e:	dc37      	bgt.n	800fad0 <_printf_float+0x370>
 800fa60:	f04f 0b00 	mov.w	fp, #0
 800fa64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa68:	f104 021a 	add.w	r2, r4, #26
 800fa6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa6e:	9305      	str	r3, [sp, #20]
 800fa70:	eba3 0309 	sub.w	r3, r3, r9
 800fa74:	455b      	cmp	r3, fp
 800fa76:	dc33      	bgt.n	800fae0 <_printf_float+0x380>
 800fa78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	db3b      	blt.n	800faf8 <_printf_float+0x398>
 800fa80:	6823      	ldr	r3, [r4, #0]
 800fa82:	07da      	lsls	r2, r3, #31
 800fa84:	d438      	bmi.n	800faf8 <_printf_float+0x398>
 800fa86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fa8a:	eba2 0903 	sub.w	r9, r2, r3
 800fa8e:	9b05      	ldr	r3, [sp, #20]
 800fa90:	1ad2      	subs	r2, r2, r3
 800fa92:	4591      	cmp	r9, r2
 800fa94:	bfa8      	it	ge
 800fa96:	4691      	movge	r9, r2
 800fa98:	f1b9 0f00 	cmp.w	r9, #0
 800fa9c:	dc35      	bgt.n	800fb0a <_printf_float+0x3aa>
 800fa9e:	f04f 0800 	mov.w	r8, #0
 800faa2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800faa6:	f104 0a1a 	add.w	sl, r4, #26
 800faaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800faae:	1a9b      	subs	r3, r3, r2
 800fab0:	eba3 0309 	sub.w	r3, r3, r9
 800fab4:	4543      	cmp	r3, r8
 800fab6:	f77f af79 	ble.w	800f9ac <_printf_float+0x24c>
 800faba:	2301      	movs	r3, #1
 800fabc:	4652      	mov	r2, sl
 800fabe:	4631      	mov	r1, r6
 800fac0:	4628      	mov	r0, r5
 800fac2:	47b8      	blx	r7
 800fac4:	3001      	adds	r0, #1
 800fac6:	f43f aeaa 	beq.w	800f81e <_printf_float+0xbe>
 800faca:	f108 0801 	add.w	r8, r8, #1
 800face:	e7ec      	b.n	800faaa <_printf_float+0x34a>
 800fad0:	4613      	mov	r3, r2
 800fad2:	4631      	mov	r1, r6
 800fad4:	4642      	mov	r2, r8
 800fad6:	4628      	mov	r0, r5
 800fad8:	47b8      	blx	r7
 800fada:	3001      	adds	r0, #1
 800fadc:	d1c0      	bne.n	800fa60 <_printf_float+0x300>
 800fade:	e69e      	b.n	800f81e <_printf_float+0xbe>
 800fae0:	2301      	movs	r3, #1
 800fae2:	4631      	mov	r1, r6
 800fae4:	4628      	mov	r0, r5
 800fae6:	9205      	str	r2, [sp, #20]
 800fae8:	47b8      	blx	r7
 800faea:	3001      	adds	r0, #1
 800faec:	f43f ae97 	beq.w	800f81e <_printf_float+0xbe>
 800faf0:	9a05      	ldr	r2, [sp, #20]
 800faf2:	f10b 0b01 	add.w	fp, fp, #1
 800faf6:	e7b9      	b.n	800fa6c <_printf_float+0x30c>
 800faf8:	ee18 3a10 	vmov	r3, s16
 800fafc:	4652      	mov	r2, sl
 800fafe:	4631      	mov	r1, r6
 800fb00:	4628      	mov	r0, r5
 800fb02:	47b8      	blx	r7
 800fb04:	3001      	adds	r0, #1
 800fb06:	d1be      	bne.n	800fa86 <_printf_float+0x326>
 800fb08:	e689      	b.n	800f81e <_printf_float+0xbe>
 800fb0a:	9a05      	ldr	r2, [sp, #20]
 800fb0c:	464b      	mov	r3, r9
 800fb0e:	4442      	add	r2, r8
 800fb10:	4631      	mov	r1, r6
 800fb12:	4628      	mov	r0, r5
 800fb14:	47b8      	blx	r7
 800fb16:	3001      	adds	r0, #1
 800fb18:	d1c1      	bne.n	800fa9e <_printf_float+0x33e>
 800fb1a:	e680      	b.n	800f81e <_printf_float+0xbe>
 800fb1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb1e:	2a01      	cmp	r2, #1
 800fb20:	dc01      	bgt.n	800fb26 <_printf_float+0x3c6>
 800fb22:	07db      	lsls	r3, r3, #31
 800fb24:	d53a      	bpl.n	800fb9c <_printf_float+0x43c>
 800fb26:	2301      	movs	r3, #1
 800fb28:	4642      	mov	r2, r8
 800fb2a:	4631      	mov	r1, r6
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	47b8      	blx	r7
 800fb30:	3001      	adds	r0, #1
 800fb32:	f43f ae74 	beq.w	800f81e <_printf_float+0xbe>
 800fb36:	ee18 3a10 	vmov	r3, s16
 800fb3a:	4652      	mov	r2, sl
 800fb3c:	4631      	mov	r1, r6
 800fb3e:	4628      	mov	r0, r5
 800fb40:	47b8      	blx	r7
 800fb42:	3001      	adds	r0, #1
 800fb44:	f43f ae6b 	beq.w	800f81e <_printf_float+0xbe>
 800fb48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	2300      	movs	r3, #0
 800fb50:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800fb54:	f7f0 ffc8 	bl	8000ae8 <__aeabi_dcmpeq>
 800fb58:	b9d8      	cbnz	r0, 800fb92 <_printf_float+0x432>
 800fb5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fb5e:	f108 0201 	add.w	r2, r8, #1
 800fb62:	4631      	mov	r1, r6
 800fb64:	4628      	mov	r0, r5
 800fb66:	47b8      	blx	r7
 800fb68:	3001      	adds	r0, #1
 800fb6a:	d10e      	bne.n	800fb8a <_printf_float+0x42a>
 800fb6c:	e657      	b.n	800f81e <_printf_float+0xbe>
 800fb6e:	2301      	movs	r3, #1
 800fb70:	4652      	mov	r2, sl
 800fb72:	4631      	mov	r1, r6
 800fb74:	4628      	mov	r0, r5
 800fb76:	47b8      	blx	r7
 800fb78:	3001      	adds	r0, #1
 800fb7a:	f43f ae50 	beq.w	800f81e <_printf_float+0xbe>
 800fb7e:	f108 0801 	add.w	r8, r8, #1
 800fb82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb84:	3b01      	subs	r3, #1
 800fb86:	4543      	cmp	r3, r8
 800fb88:	dcf1      	bgt.n	800fb6e <_printf_float+0x40e>
 800fb8a:	464b      	mov	r3, r9
 800fb8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fb90:	e6da      	b.n	800f948 <_printf_float+0x1e8>
 800fb92:	f04f 0800 	mov.w	r8, #0
 800fb96:	f104 0a1a 	add.w	sl, r4, #26
 800fb9a:	e7f2      	b.n	800fb82 <_printf_float+0x422>
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	4642      	mov	r2, r8
 800fba0:	e7df      	b.n	800fb62 <_printf_float+0x402>
 800fba2:	2301      	movs	r3, #1
 800fba4:	464a      	mov	r2, r9
 800fba6:	4631      	mov	r1, r6
 800fba8:	4628      	mov	r0, r5
 800fbaa:	47b8      	blx	r7
 800fbac:	3001      	adds	r0, #1
 800fbae:	f43f ae36 	beq.w	800f81e <_printf_float+0xbe>
 800fbb2:	f108 0801 	add.w	r8, r8, #1
 800fbb6:	68e3      	ldr	r3, [r4, #12]
 800fbb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbba:	1a5b      	subs	r3, r3, r1
 800fbbc:	4543      	cmp	r3, r8
 800fbbe:	dcf0      	bgt.n	800fba2 <_printf_float+0x442>
 800fbc0:	e6f8      	b.n	800f9b4 <_printf_float+0x254>
 800fbc2:	f04f 0800 	mov.w	r8, #0
 800fbc6:	f104 0919 	add.w	r9, r4, #25
 800fbca:	e7f4      	b.n	800fbb6 <_printf_float+0x456>

0800fbcc <_printf_common>:
 800fbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbd0:	4616      	mov	r6, r2
 800fbd2:	4699      	mov	r9, r3
 800fbd4:	688a      	ldr	r2, [r1, #8]
 800fbd6:	690b      	ldr	r3, [r1, #16]
 800fbd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	bfb8      	it	lt
 800fbe0:	4613      	movlt	r3, r2
 800fbe2:	6033      	str	r3, [r6, #0]
 800fbe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fbe8:	4607      	mov	r7, r0
 800fbea:	460c      	mov	r4, r1
 800fbec:	b10a      	cbz	r2, 800fbf2 <_printf_common+0x26>
 800fbee:	3301      	adds	r3, #1
 800fbf0:	6033      	str	r3, [r6, #0]
 800fbf2:	6823      	ldr	r3, [r4, #0]
 800fbf4:	0699      	lsls	r1, r3, #26
 800fbf6:	bf42      	ittt	mi
 800fbf8:	6833      	ldrmi	r3, [r6, #0]
 800fbfa:	3302      	addmi	r3, #2
 800fbfc:	6033      	strmi	r3, [r6, #0]
 800fbfe:	6825      	ldr	r5, [r4, #0]
 800fc00:	f015 0506 	ands.w	r5, r5, #6
 800fc04:	d106      	bne.n	800fc14 <_printf_common+0x48>
 800fc06:	f104 0a19 	add.w	sl, r4, #25
 800fc0a:	68e3      	ldr	r3, [r4, #12]
 800fc0c:	6832      	ldr	r2, [r6, #0]
 800fc0e:	1a9b      	subs	r3, r3, r2
 800fc10:	42ab      	cmp	r3, r5
 800fc12:	dc26      	bgt.n	800fc62 <_printf_common+0x96>
 800fc14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc18:	1e13      	subs	r3, r2, #0
 800fc1a:	6822      	ldr	r2, [r4, #0]
 800fc1c:	bf18      	it	ne
 800fc1e:	2301      	movne	r3, #1
 800fc20:	0692      	lsls	r2, r2, #26
 800fc22:	d42b      	bmi.n	800fc7c <_printf_common+0xb0>
 800fc24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc28:	4649      	mov	r1, r9
 800fc2a:	4638      	mov	r0, r7
 800fc2c:	47c0      	blx	r8
 800fc2e:	3001      	adds	r0, #1
 800fc30:	d01e      	beq.n	800fc70 <_printf_common+0xa4>
 800fc32:	6823      	ldr	r3, [r4, #0]
 800fc34:	6922      	ldr	r2, [r4, #16]
 800fc36:	f003 0306 	and.w	r3, r3, #6
 800fc3a:	2b04      	cmp	r3, #4
 800fc3c:	bf02      	ittt	eq
 800fc3e:	68e5      	ldreq	r5, [r4, #12]
 800fc40:	6833      	ldreq	r3, [r6, #0]
 800fc42:	1aed      	subeq	r5, r5, r3
 800fc44:	68a3      	ldr	r3, [r4, #8]
 800fc46:	bf0c      	ite	eq
 800fc48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc4c:	2500      	movne	r5, #0
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	bfc4      	itt	gt
 800fc52:	1a9b      	subgt	r3, r3, r2
 800fc54:	18ed      	addgt	r5, r5, r3
 800fc56:	2600      	movs	r6, #0
 800fc58:	341a      	adds	r4, #26
 800fc5a:	42b5      	cmp	r5, r6
 800fc5c:	d11a      	bne.n	800fc94 <_printf_common+0xc8>
 800fc5e:	2000      	movs	r0, #0
 800fc60:	e008      	b.n	800fc74 <_printf_common+0xa8>
 800fc62:	2301      	movs	r3, #1
 800fc64:	4652      	mov	r2, sl
 800fc66:	4649      	mov	r1, r9
 800fc68:	4638      	mov	r0, r7
 800fc6a:	47c0      	blx	r8
 800fc6c:	3001      	adds	r0, #1
 800fc6e:	d103      	bne.n	800fc78 <_printf_common+0xac>
 800fc70:	f04f 30ff 	mov.w	r0, #4294967295
 800fc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc78:	3501      	adds	r5, #1
 800fc7a:	e7c6      	b.n	800fc0a <_printf_common+0x3e>
 800fc7c:	18e1      	adds	r1, r4, r3
 800fc7e:	1c5a      	adds	r2, r3, #1
 800fc80:	2030      	movs	r0, #48	; 0x30
 800fc82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc86:	4422      	add	r2, r4
 800fc88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc90:	3302      	adds	r3, #2
 800fc92:	e7c7      	b.n	800fc24 <_printf_common+0x58>
 800fc94:	2301      	movs	r3, #1
 800fc96:	4622      	mov	r2, r4
 800fc98:	4649      	mov	r1, r9
 800fc9a:	4638      	mov	r0, r7
 800fc9c:	47c0      	blx	r8
 800fc9e:	3001      	adds	r0, #1
 800fca0:	d0e6      	beq.n	800fc70 <_printf_common+0xa4>
 800fca2:	3601      	adds	r6, #1
 800fca4:	e7d9      	b.n	800fc5a <_printf_common+0x8e>
	...

0800fca8 <_printf_i>:
 800fca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fcac:	7e0f      	ldrb	r7, [r1, #24]
 800fcae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fcb0:	2f78      	cmp	r7, #120	; 0x78
 800fcb2:	4691      	mov	r9, r2
 800fcb4:	4680      	mov	r8, r0
 800fcb6:	460c      	mov	r4, r1
 800fcb8:	469a      	mov	sl, r3
 800fcba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fcbe:	d807      	bhi.n	800fcd0 <_printf_i+0x28>
 800fcc0:	2f62      	cmp	r7, #98	; 0x62
 800fcc2:	d80a      	bhi.n	800fcda <_printf_i+0x32>
 800fcc4:	2f00      	cmp	r7, #0
 800fcc6:	f000 80d4 	beq.w	800fe72 <_printf_i+0x1ca>
 800fcca:	2f58      	cmp	r7, #88	; 0x58
 800fccc:	f000 80c0 	beq.w	800fe50 <_printf_i+0x1a8>
 800fcd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fcd8:	e03a      	b.n	800fd50 <_printf_i+0xa8>
 800fcda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fcde:	2b15      	cmp	r3, #21
 800fce0:	d8f6      	bhi.n	800fcd0 <_printf_i+0x28>
 800fce2:	a101      	add	r1, pc, #4	; (adr r1, 800fce8 <_printf_i+0x40>)
 800fce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fce8:	0800fd41 	.word	0x0800fd41
 800fcec:	0800fd55 	.word	0x0800fd55
 800fcf0:	0800fcd1 	.word	0x0800fcd1
 800fcf4:	0800fcd1 	.word	0x0800fcd1
 800fcf8:	0800fcd1 	.word	0x0800fcd1
 800fcfc:	0800fcd1 	.word	0x0800fcd1
 800fd00:	0800fd55 	.word	0x0800fd55
 800fd04:	0800fcd1 	.word	0x0800fcd1
 800fd08:	0800fcd1 	.word	0x0800fcd1
 800fd0c:	0800fcd1 	.word	0x0800fcd1
 800fd10:	0800fcd1 	.word	0x0800fcd1
 800fd14:	0800fe59 	.word	0x0800fe59
 800fd18:	0800fd81 	.word	0x0800fd81
 800fd1c:	0800fe13 	.word	0x0800fe13
 800fd20:	0800fcd1 	.word	0x0800fcd1
 800fd24:	0800fcd1 	.word	0x0800fcd1
 800fd28:	0800fe7b 	.word	0x0800fe7b
 800fd2c:	0800fcd1 	.word	0x0800fcd1
 800fd30:	0800fd81 	.word	0x0800fd81
 800fd34:	0800fcd1 	.word	0x0800fcd1
 800fd38:	0800fcd1 	.word	0x0800fcd1
 800fd3c:	0800fe1b 	.word	0x0800fe1b
 800fd40:	682b      	ldr	r3, [r5, #0]
 800fd42:	1d1a      	adds	r2, r3, #4
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	602a      	str	r2, [r5, #0]
 800fd48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd50:	2301      	movs	r3, #1
 800fd52:	e09f      	b.n	800fe94 <_printf_i+0x1ec>
 800fd54:	6820      	ldr	r0, [r4, #0]
 800fd56:	682b      	ldr	r3, [r5, #0]
 800fd58:	0607      	lsls	r7, r0, #24
 800fd5a:	f103 0104 	add.w	r1, r3, #4
 800fd5e:	6029      	str	r1, [r5, #0]
 800fd60:	d501      	bpl.n	800fd66 <_printf_i+0xbe>
 800fd62:	681e      	ldr	r6, [r3, #0]
 800fd64:	e003      	b.n	800fd6e <_printf_i+0xc6>
 800fd66:	0646      	lsls	r6, r0, #25
 800fd68:	d5fb      	bpl.n	800fd62 <_printf_i+0xba>
 800fd6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fd6e:	2e00      	cmp	r6, #0
 800fd70:	da03      	bge.n	800fd7a <_printf_i+0xd2>
 800fd72:	232d      	movs	r3, #45	; 0x2d
 800fd74:	4276      	negs	r6, r6
 800fd76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd7a:	485a      	ldr	r0, [pc, #360]	; (800fee4 <_printf_i+0x23c>)
 800fd7c:	230a      	movs	r3, #10
 800fd7e:	e012      	b.n	800fda6 <_printf_i+0xfe>
 800fd80:	682b      	ldr	r3, [r5, #0]
 800fd82:	6820      	ldr	r0, [r4, #0]
 800fd84:	1d19      	adds	r1, r3, #4
 800fd86:	6029      	str	r1, [r5, #0]
 800fd88:	0605      	lsls	r5, r0, #24
 800fd8a:	d501      	bpl.n	800fd90 <_printf_i+0xe8>
 800fd8c:	681e      	ldr	r6, [r3, #0]
 800fd8e:	e002      	b.n	800fd96 <_printf_i+0xee>
 800fd90:	0641      	lsls	r1, r0, #25
 800fd92:	d5fb      	bpl.n	800fd8c <_printf_i+0xe4>
 800fd94:	881e      	ldrh	r6, [r3, #0]
 800fd96:	4853      	ldr	r0, [pc, #332]	; (800fee4 <_printf_i+0x23c>)
 800fd98:	2f6f      	cmp	r7, #111	; 0x6f
 800fd9a:	bf0c      	ite	eq
 800fd9c:	2308      	moveq	r3, #8
 800fd9e:	230a      	movne	r3, #10
 800fda0:	2100      	movs	r1, #0
 800fda2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fda6:	6865      	ldr	r5, [r4, #4]
 800fda8:	60a5      	str	r5, [r4, #8]
 800fdaa:	2d00      	cmp	r5, #0
 800fdac:	bfa2      	ittt	ge
 800fdae:	6821      	ldrge	r1, [r4, #0]
 800fdb0:	f021 0104 	bicge.w	r1, r1, #4
 800fdb4:	6021      	strge	r1, [r4, #0]
 800fdb6:	b90e      	cbnz	r6, 800fdbc <_printf_i+0x114>
 800fdb8:	2d00      	cmp	r5, #0
 800fdba:	d04b      	beq.n	800fe54 <_printf_i+0x1ac>
 800fdbc:	4615      	mov	r5, r2
 800fdbe:	fbb6 f1f3 	udiv	r1, r6, r3
 800fdc2:	fb03 6711 	mls	r7, r3, r1, r6
 800fdc6:	5dc7      	ldrb	r7, [r0, r7]
 800fdc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fdcc:	4637      	mov	r7, r6
 800fdce:	42bb      	cmp	r3, r7
 800fdd0:	460e      	mov	r6, r1
 800fdd2:	d9f4      	bls.n	800fdbe <_printf_i+0x116>
 800fdd4:	2b08      	cmp	r3, #8
 800fdd6:	d10b      	bne.n	800fdf0 <_printf_i+0x148>
 800fdd8:	6823      	ldr	r3, [r4, #0]
 800fdda:	07de      	lsls	r6, r3, #31
 800fddc:	d508      	bpl.n	800fdf0 <_printf_i+0x148>
 800fdde:	6923      	ldr	r3, [r4, #16]
 800fde0:	6861      	ldr	r1, [r4, #4]
 800fde2:	4299      	cmp	r1, r3
 800fde4:	bfde      	ittt	le
 800fde6:	2330      	movle	r3, #48	; 0x30
 800fde8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fdec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fdf0:	1b52      	subs	r2, r2, r5
 800fdf2:	6122      	str	r2, [r4, #16]
 800fdf4:	f8cd a000 	str.w	sl, [sp]
 800fdf8:	464b      	mov	r3, r9
 800fdfa:	aa03      	add	r2, sp, #12
 800fdfc:	4621      	mov	r1, r4
 800fdfe:	4640      	mov	r0, r8
 800fe00:	f7ff fee4 	bl	800fbcc <_printf_common>
 800fe04:	3001      	adds	r0, #1
 800fe06:	d14a      	bne.n	800fe9e <_printf_i+0x1f6>
 800fe08:	f04f 30ff 	mov.w	r0, #4294967295
 800fe0c:	b004      	add	sp, #16
 800fe0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	f043 0320 	orr.w	r3, r3, #32
 800fe18:	6023      	str	r3, [r4, #0]
 800fe1a:	4833      	ldr	r0, [pc, #204]	; (800fee8 <_printf_i+0x240>)
 800fe1c:	2778      	movs	r7, #120	; 0x78
 800fe1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fe22:	6823      	ldr	r3, [r4, #0]
 800fe24:	6829      	ldr	r1, [r5, #0]
 800fe26:	061f      	lsls	r7, r3, #24
 800fe28:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe2c:	d402      	bmi.n	800fe34 <_printf_i+0x18c>
 800fe2e:	065f      	lsls	r7, r3, #25
 800fe30:	bf48      	it	mi
 800fe32:	b2b6      	uxthmi	r6, r6
 800fe34:	07df      	lsls	r7, r3, #31
 800fe36:	bf48      	it	mi
 800fe38:	f043 0320 	orrmi.w	r3, r3, #32
 800fe3c:	6029      	str	r1, [r5, #0]
 800fe3e:	bf48      	it	mi
 800fe40:	6023      	strmi	r3, [r4, #0]
 800fe42:	b91e      	cbnz	r6, 800fe4c <_printf_i+0x1a4>
 800fe44:	6823      	ldr	r3, [r4, #0]
 800fe46:	f023 0320 	bic.w	r3, r3, #32
 800fe4a:	6023      	str	r3, [r4, #0]
 800fe4c:	2310      	movs	r3, #16
 800fe4e:	e7a7      	b.n	800fda0 <_printf_i+0xf8>
 800fe50:	4824      	ldr	r0, [pc, #144]	; (800fee4 <_printf_i+0x23c>)
 800fe52:	e7e4      	b.n	800fe1e <_printf_i+0x176>
 800fe54:	4615      	mov	r5, r2
 800fe56:	e7bd      	b.n	800fdd4 <_printf_i+0x12c>
 800fe58:	682b      	ldr	r3, [r5, #0]
 800fe5a:	6826      	ldr	r6, [r4, #0]
 800fe5c:	6961      	ldr	r1, [r4, #20]
 800fe5e:	1d18      	adds	r0, r3, #4
 800fe60:	6028      	str	r0, [r5, #0]
 800fe62:	0635      	lsls	r5, r6, #24
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	d501      	bpl.n	800fe6c <_printf_i+0x1c4>
 800fe68:	6019      	str	r1, [r3, #0]
 800fe6a:	e002      	b.n	800fe72 <_printf_i+0x1ca>
 800fe6c:	0670      	lsls	r0, r6, #25
 800fe6e:	d5fb      	bpl.n	800fe68 <_printf_i+0x1c0>
 800fe70:	8019      	strh	r1, [r3, #0]
 800fe72:	2300      	movs	r3, #0
 800fe74:	6123      	str	r3, [r4, #16]
 800fe76:	4615      	mov	r5, r2
 800fe78:	e7bc      	b.n	800fdf4 <_printf_i+0x14c>
 800fe7a:	682b      	ldr	r3, [r5, #0]
 800fe7c:	1d1a      	adds	r2, r3, #4
 800fe7e:	602a      	str	r2, [r5, #0]
 800fe80:	681d      	ldr	r5, [r3, #0]
 800fe82:	6862      	ldr	r2, [r4, #4]
 800fe84:	2100      	movs	r1, #0
 800fe86:	4628      	mov	r0, r5
 800fe88:	f7f0 f9b2 	bl	80001f0 <memchr>
 800fe8c:	b108      	cbz	r0, 800fe92 <_printf_i+0x1ea>
 800fe8e:	1b40      	subs	r0, r0, r5
 800fe90:	6060      	str	r0, [r4, #4]
 800fe92:	6863      	ldr	r3, [r4, #4]
 800fe94:	6123      	str	r3, [r4, #16]
 800fe96:	2300      	movs	r3, #0
 800fe98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe9c:	e7aa      	b.n	800fdf4 <_printf_i+0x14c>
 800fe9e:	6923      	ldr	r3, [r4, #16]
 800fea0:	462a      	mov	r2, r5
 800fea2:	4649      	mov	r1, r9
 800fea4:	4640      	mov	r0, r8
 800fea6:	47d0      	blx	sl
 800fea8:	3001      	adds	r0, #1
 800feaa:	d0ad      	beq.n	800fe08 <_printf_i+0x160>
 800feac:	6823      	ldr	r3, [r4, #0]
 800feae:	079b      	lsls	r3, r3, #30
 800feb0:	d413      	bmi.n	800feda <_printf_i+0x232>
 800feb2:	68e0      	ldr	r0, [r4, #12]
 800feb4:	9b03      	ldr	r3, [sp, #12]
 800feb6:	4298      	cmp	r0, r3
 800feb8:	bfb8      	it	lt
 800feba:	4618      	movlt	r0, r3
 800febc:	e7a6      	b.n	800fe0c <_printf_i+0x164>
 800febe:	2301      	movs	r3, #1
 800fec0:	4632      	mov	r2, r6
 800fec2:	4649      	mov	r1, r9
 800fec4:	4640      	mov	r0, r8
 800fec6:	47d0      	blx	sl
 800fec8:	3001      	adds	r0, #1
 800feca:	d09d      	beq.n	800fe08 <_printf_i+0x160>
 800fecc:	3501      	adds	r5, #1
 800fece:	68e3      	ldr	r3, [r4, #12]
 800fed0:	9903      	ldr	r1, [sp, #12]
 800fed2:	1a5b      	subs	r3, r3, r1
 800fed4:	42ab      	cmp	r3, r5
 800fed6:	dcf2      	bgt.n	800febe <_printf_i+0x216>
 800fed8:	e7eb      	b.n	800feb2 <_printf_i+0x20a>
 800feda:	2500      	movs	r5, #0
 800fedc:	f104 0619 	add.w	r6, r4, #25
 800fee0:	e7f5      	b.n	800fece <_printf_i+0x226>
 800fee2:	bf00      	nop
 800fee4:	08013f2e 	.word	0x08013f2e
 800fee8:	08013f3f 	.word	0x08013f3f

0800feec <std>:
 800feec:	2300      	movs	r3, #0
 800feee:	b510      	push	{r4, lr}
 800fef0:	4604      	mov	r4, r0
 800fef2:	e9c0 3300 	strd	r3, r3, [r0]
 800fef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fefa:	6083      	str	r3, [r0, #8]
 800fefc:	8181      	strh	r1, [r0, #12]
 800fefe:	6643      	str	r3, [r0, #100]	; 0x64
 800ff00:	81c2      	strh	r2, [r0, #14]
 800ff02:	6183      	str	r3, [r0, #24]
 800ff04:	4619      	mov	r1, r3
 800ff06:	2208      	movs	r2, #8
 800ff08:	305c      	adds	r0, #92	; 0x5c
 800ff0a:	f000 f914 	bl	8010136 <memset>
 800ff0e:	4b0d      	ldr	r3, [pc, #52]	; (800ff44 <std+0x58>)
 800ff10:	6263      	str	r3, [r4, #36]	; 0x24
 800ff12:	4b0d      	ldr	r3, [pc, #52]	; (800ff48 <std+0x5c>)
 800ff14:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff16:	4b0d      	ldr	r3, [pc, #52]	; (800ff4c <std+0x60>)
 800ff18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff1a:	4b0d      	ldr	r3, [pc, #52]	; (800ff50 <std+0x64>)
 800ff1c:	6323      	str	r3, [r4, #48]	; 0x30
 800ff1e:	4b0d      	ldr	r3, [pc, #52]	; (800ff54 <std+0x68>)
 800ff20:	6224      	str	r4, [r4, #32]
 800ff22:	429c      	cmp	r4, r3
 800ff24:	d006      	beq.n	800ff34 <std+0x48>
 800ff26:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ff2a:	4294      	cmp	r4, r2
 800ff2c:	d002      	beq.n	800ff34 <std+0x48>
 800ff2e:	33d0      	adds	r3, #208	; 0xd0
 800ff30:	429c      	cmp	r4, r3
 800ff32:	d105      	bne.n	800ff40 <std+0x54>
 800ff34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff3c:	f000 b978 	b.w	8010230 <__retarget_lock_init_recursive>
 800ff40:	bd10      	pop	{r4, pc}
 800ff42:	bf00      	nop
 800ff44:	080100b1 	.word	0x080100b1
 800ff48:	080100d3 	.word	0x080100d3
 800ff4c:	0801010b 	.word	0x0801010b
 800ff50:	0801012f 	.word	0x0801012f
 800ff54:	20006cc0 	.word	0x20006cc0

0800ff58 <stdio_exit_handler>:
 800ff58:	4a02      	ldr	r2, [pc, #8]	; (800ff64 <stdio_exit_handler+0xc>)
 800ff5a:	4903      	ldr	r1, [pc, #12]	; (800ff68 <stdio_exit_handler+0x10>)
 800ff5c:	4803      	ldr	r0, [pc, #12]	; (800ff6c <stdio_exit_handler+0x14>)
 800ff5e:	f000 b869 	b.w	8010034 <_fwalk_sglue>
 800ff62:	bf00      	nop
 800ff64:	2000017c 	.word	0x2000017c
 800ff68:	08011c01 	.word	0x08011c01
 800ff6c:	20000188 	.word	0x20000188

0800ff70 <cleanup_stdio>:
 800ff70:	6841      	ldr	r1, [r0, #4]
 800ff72:	4b0c      	ldr	r3, [pc, #48]	; (800ffa4 <cleanup_stdio+0x34>)
 800ff74:	4299      	cmp	r1, r3
 800ff76:	b510      	push	{r4, lr}
 800ff78:	4604      	mov	r4, r0
 800ff7a:	d001      	beq.n	800ff80 <cleanup_stdio+0x10>
 800ff7c:	f001 fe40 	bl	8011c00 <_fflush_r>
 800ff80:	68a1      	ldr	r1, [r4, #8]
 800ff82:	4b09      	ldr	r3, [pc, #36]	; (800ffa8 <cleanup_stdio+0x38>)
 800ff84:	4299      	cmp	r1, r3
 800ff86:	d002      	beq.n	800ff8e <cleanup_stdio+0x1e>
 800ff88:	4620      	mov	r0, r4
 800ff8a:	f001 fe39 	bl	8011c00 <_fflush_r>
 800ff8e:	68e1      	ldr	r1, [r4, #12]
 800ff90:	4b06      	ldr	r3, [pc, #24]	; (800ffac <cleanup_stdio+0x3c>)
 800ff92:	4299      	cmp	r1, r3
 800ff94:	d004      	beq.n	800ffa0 <cleanup_stdio+0x30>
 800ff96:	4620      	mov	r0, r4
 800ff98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff9c:	f001 be30 	b.w	8011c00 <_fflush_r>
 800ffa0:	bd10      	pop	{r4, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20006cc0 	.word	0x20006cc0
 800ffa8:	20006d28 	.word	0x20006d28
 800ffac:	20006d90 	.word	0x20006d90

0800ffb0 <global_stdio_init.part.0>:
 800ffb0:	b510      	push	{r4, lr}
 800ffb2:	4b0b      	ldr	r3, [pc, #44]	; (800ffe0 <global_stdio_init.part.0+0x30>)
 800ffb4:	4c0b      	ldr	r4, [pc, #44]	; (800ffe4 <global_stdio_init.part.0+0x34>)
 800ffb6:	4a0c      	ldr	r2, [pc, #48]	; (800ffe8 <global_stdio_init.part.0+0x38>)
 800ffb8:	601a      	str	r2, [r3, #0]
 800ffba:	4620      	mov	r0, r4
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	2104      	movs	r1, #4
 800ffc0:	f7ff ff94 	bl	800feec <std>
 800ffc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ffc8:	2201      	movs	r2, #1
 800ffca:	2109      	movs	r1, #9
 800ffcc:	f7ff ff8e 	bl	800feec <std>
 800ffd0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ffd4:	2202      	movs	r2, #2
 800ffd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffda:	2112      	movs	r1, #18
 800ffdc:	f7ff bf86 	b.w	800feec <std>
 800ffe0:	20006df8 	.word	0x20006df8
 800ffe4:	20006cc0 	.word	0x20006cc0
 800ffe8:	0800ff59 	.word	0x0800ff59

0800ffec <__sfp_lock_acquire>:
 800ffec:	4801      	ldr	r0, [pc, #4]	; (800fff4 <__sfp_lock_acquire+0x8>)
 800ffee:	f000 b920 	b.w	8010232 <__retarget_lock_acquire_recursive>
 800fff2:	bf00      	nop
 800fff4:	20006e01 	.word	0x20006e01

0800fff8 <__sfp_lock_release>:
 800fff8:	4801      	ldr	r0, [pc, #4]	; (8010000 <__sfp_lock_release+0x8>)
 800fffa:	f000 b91b 	b.w	8010234 <__retarget_lock_release_recursive>
 800fffe:	bf00      	nop
 8010000:	20006e01 	.word	0x20006e01

08010004 <__sinit>:
 8010004:	b510      	push	{r4, lr}
 8010006:	4604      	mov	r4, r0
 8010008:	f7ff fff0 	bl	800ffec <__sfp_lock_acquire>
 801000c:	6a23      	ldr	r3, [r4, #32]
 801000e:	b11b      	cbz	r3, 8010018 <__sinit+0x14>
 8010010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010014:	f7ff bff0 	b.w	800fff8 <__sfp_lock_release>
 8010018:	4b04      	ldr	r3, [pc, #16]	; (801002c <__sinit+0x28>)
 801001a:	6223      	str	r3, [r4, #32]
 801001c:	4b04      	ldr	r3, [pc, #16]	; (8010030 <__sinit+0x2c>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d1f5      	bne.n	8010010 <__sinit+0xc>
 8010024:	f7ff ffc4 	bl	800ffb0 <global_stdio_init.part.0>
 8010028:	e7f2      	b.n	8010010 <__sinit+0xc>
 801002a:	bf00      	nop
 801002c:	0800ff71 	.word	0x0800ff71
 8010030:	20006df8 	.word	0x20006df8

08010034 <_fwalk_sglue>:
 8010034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010038:	4607      	mov	r7, r0
 801003a:	4688      	mov	r8, r1
 801003c:	4614      	mov	r4, r2
 801003e:	2600      	movs	r6, #0
 8010040:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010044:	f1b9 0901 	subs.w	r9, r9, #1
 8010048:	d505      	bpl.n	8010056 <_fwalk_sglue+0x22>
 801004a:	6824      	ldr	r4, [r4, #0]
 801004c:	2c00      	cmp	r4, #0
 801004e:	d1f7      	bne.n	8010040 <_fwalk_sglue+0xc>
 8010050:	4630      	mov	r0, r6
 8010052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010056:	89ab      	ldrh	r3, [r5, #12]
 8010058:	2b01      	cmp	r3, #1
 801005a:	d907      	bls.n	801006c <_fwalk_sglue+0x38>
 801005c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010060:	3301      	adds	r3, #1
 8010062:	d003      	beq.n	801006c <_fwalk_sglue+0x38>
 8010064:	4629      	mov	r1, r5
 8010066:	4638      	mov	r0, r7
 8010068:	47c0      	blx	r8
 801006a:	4306      	orrs	r6, r0
 801006c:	3568      	adds	r5, #104	; 0x68
 801006e:	e7e9      	b.n	8010044 <_fwalk_sglue+0x10>

08010070 <siprintf>:
 8010070:	b40e      	push	{r1, r2, r3}
 8010072:	b500      	push	{lr}
 8010074:	b09c      	sub	sp, #112	; 0x70
 8010076:	ab1d      	add	r3, sp, #116	; 0x74
 8010078:	9002      	str	r0, [sp, #8]
 801007a:	9006      	str	r0, [sp, #24]
 801007c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010080:	4809      	ldr	r0, [pc, #36]	; (80100a8 <siprintf+0x38>)
 8010082:	9107      	str	r1, [sp, #28]
 8010084:	9104      	str	r1, [sp, #16]
 8010086:	4909      	ldr	r1, [pc, #36]	; (80100ac <siprintf+0x3c>)
 8010088:	f853 2b04 	ldr.w	r2, [r3], #4
 801008c:	9105      	str	r1, [sp, #20]
 801008e:	6800      	ldr	r0, [r0, #0]
 8010090:	9301      	str	r3, [sp, #4]
 8010092:	a902      	add	r1, sp, #8
 8010094:	f001 fc30 	bl	80118f8 <_svfiprintf_r>
 8010098:	9b02      	ldr	r3, [sp, #8]
 801009a:	2200      	movs	r2, #0
 801009c:	701a      	strb	r2, [r3, #0]
 801009e:	b01c      	add	sp, #112	; 0x70
 80100a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80100a4:	b003      	add	sp, #12
 80100a6:	4770      	bx	lr
 80100a8:	200001d4 	.word	0x200001d4
 80100ac:	ffff0208 	.word	0xffff0208

080100b0 <__sread>:
 80100b0:	b510      	push	{r4, lr}
 80100b2:	460c      	mov	r4, r1
 80100b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100b8:	f000 f86c 	bl	8010194 <_read_r>
 80100bc:	2800      	cmp	r0, #0
 80100be:	bfab      	itete	ge
 80100c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80100c2:	89a3      	ldrhlt	r3, [r4, #12]
 80100c4:	181b      	addge	r3, r3, r0
 80100c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80100ca:	bfac      	ite	ge
 80100cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80100ce:	81a3      	strhlt	r3, [r4, #12]
 80100d0:	bd10      	pop	{r4, pc}

080100d2 <__swrite>:
 80100d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d6:	461f      	mov	r7, r3
 80100d8:	898b      	ldrh	r3, [r1, #12]
 80100da:	05db      	lsls	r3, r3, #23
 80100dc:	4605      	mov	r5, r0
 80100de:	460c      	mov	r4, r1
 80100e0:	4616      	mov	r6, r2
 80100e2:	d505      	bpl.n	80100f0 <__swrite+0x1e>
 80100e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100e8:	2302      	movs	r3, #2
 80100ea:	2200      	movs	r2, #0
 80100ec:	f000 f840 	bl	8010170 <_lseek_r>
 80100f0:	89a3      	ldrh	r3, [r4, #12]
 80100f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100fa:	81a3      	strh	r3, [r4, #12]
 80100fc:	4632      	mov	r2, r6
 80100fe:	463b      	mov	r3, r7
 8010100:	4628      	mov	r0, r5
 8010102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010106:	f000 b857 	b.w	80101b8 <_write_r>

0801010a <__sseek>:
 801010a:	b510      	push	{r4, lr}
 801010c:	460c      	mov	r4, r1
 801010e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010112:	f000 f82d 	bl	8010170 <_lseek_r>
 8010116:	1c43      	adds	r3, r0, #1
 8010118:	89a3      	ldrh	r3, [r4, #12]
 801011a:	bf15      	itete	ne
 801011c:	6560      	strne	r0, [r4, #84]	; 0x54
 801011e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010122:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010126:	81a3      	strheq	r3, [r4, #12]
 8010128:	bf18      	it	ne
 801012a:	81a3      	strhne	r3, [r4, #12]
 801012c:	bd10      	pop	{r4, pc}

0801012e <__sclose>:
 801012e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010132:	f000 b80d 	b.w	8010150 <_close_r>

08010136 <memset>:
 8010136:	4402      	add	r2, r0
 8010138:	4603      	mov	r3, r0
 801013a:	4293      	cmp	r3, r2
 801013c:	d100      	bne.n	8010140 <memset+0xa>
 801013e:	4770      	bx	lr
 8010140:	f803 1b01 	strb.w	r1, [r3], #1
 8010144:	e7f9      	b.n	801013a <memset+0x4>
	...

08010148 <_localeconv_r>:
 8010148:	4800      	ldr	r0, [pc, #0]	; (801014c <_localeconv_r+0x4>)
 801014a:	4770      	bx	lr
 801014c:	200002c8 	.word	0x200002c8

08010150 <_close_r>:
 8010150:	b538      	push	{r3, r4, r5, lr}
 8010152:	4d06      	ldr	r5, [pc, #24]	; (801016c <_close_r+0x1c>)
 8010154:	2300      	movs	r3, #0
 8010156:	4604      	mov	r4, r0
 8010158:	4608      	mov	r0, r1
 801015a:	602b      	str	r3, [r5, #0]
 801015c:	f7f1 fbb5 	bl	80018ca <_close>
 8010160:	1c43      	adds	r3, r0, #1
 8010162:	d102      	bne.n	801016a <_close_r+0x1a>
 8010164:	682b      	ldr	r3, [r5, #0]
 8010166:	b103      	cbz	r3, 801016a <_close_r+0x1a>
 8010168:	6023      	str	r3, [r4, #0]
 801016a:	bd38      	pop	{r3, r4, r5, pc}
 801016c:	20006dfc 	.word	0x20006dfc

08010170 <_lseek_r>:
 8010170:	b538      	push	{r3, r4, r5, lr}
 8010172:	4d07      	ldr	r5, [pc, #28]	; (8010190 <_lseek_r+0x20>)
 8010174:	4604      	mov	r4, r0
 8010176:	4608      	mov	r0, r1
 8010178:	4611      	mov	r1, r2
 801017a:	2200      	movs	r2, #0
 801017c:	602a      	str	r2, [r5, #0]
 801017e:	461a      	mov	r2, r3
 8010180:	f7f1 fbca 	bl	8001918 <_lseek>
 8010184:	1c43      	adds	r3, r0, #1
 8010186:	d102      	bne.n	801018e <_lseek_r+0x1e>
 8010188:	682b      	ldr	r3, [r5, #0]
 801018a:	b103      	cbz	r3, 801018e <_lseek_r+0x1e>
 801018c:	6023      	str	r3, [r4, #0]
 801018e:	bd38      	pop	{r3, r4, r5, pc}
 8010190:	20006dfc 	.word	0x20006dfc

08010194 <_read_r>:
 8010194:	b538      	push	{r3, r4, r5, lr}
 8010196:	4d07      	ldr	r5, [pc, #28]	; (80101b4 <_read_r+0x20>)
 8010198:	4604      	mov	r4, r0
 801019a:	4608      	mov	r0, r1
 801019c:	4611      	mov	r1, r2
 801019e:	2200      	movs	r2, #0
 80101a0:	602a      	str	r2, [r5, #0]
 80101a2:	461a      	mov	r2, r3
 80101a4:	f7f1 fb58 	bl	8001858 <_read>
 80101a8:	1c43      	adds	r3, r0, #1
 80101aa:	d102      	bne.n	80101b2 <_read_r+0x1e>
 80101ac:	682b      	ldr	r3, [r5, #0]
 80101ae:	b103      	cbz	r3, 80101b2 <_read_r+0x1e>
 80101b0:	6023      	str	r3, [r4, #0]
 80101b2:	bd38      	pop	{r3, r4, r5, pc}
 80101b4:	20006dfc 	.word	0x20006dfc

080101b8 <_write_r>:
 80101b8:	b538      	push	{r3, r4, r5, lr}
 80101ba:	4d07      	ldr	r5, [pc, #28]	; (80101d8 <_write_r+0x20>)
 80101bc:	4604      	mov	r4, r0
 80101be:	4608      	mov	r0, r1
 80101c0:	4611      	mov	r1, r2
 80101c2:	2200      	movs	r2, #0
 80101c4:	602a      	str	r2, [r5, #0]
 80101c6:	461a      	mov	r2, r3
 80101c8:	f7f1 fb63 	bl	8001892 <_write>
 80101cc:	1c43      	adds	r3, r0, #1
 80101ce:	d102      	bne.n	80101d6 <_write_r+0x1e>
 80101d0:	682b      	ldr	r3, [r5, #0]
 80101d2:	b103      	cbz	r3, 80101d6 <_write_r+0x1e>
 80101d4:	6023      	str	r3, [r4, #0]
 80101d6:	bd38      	pop	{r3, r4, r5, pc}
 80101d8:	20006dfc 	.word	0x20006dfc

080101dc <__errno>:
 80101dc:	4b01      	ldr	r3, [pc, #4]	; (80101e4 <__errno+0x8>)
 80101de:	6818      	ldr	r0, [r3, #0]
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	200001d4 	.word	0x200001d4

080101e8 <__libc_init_array>:
 80101e8:	b570      	push	{r4, r5, r6, lr}
 80101ea:	4d0d      	ldr	r5, [pc, #52]	; (8010220 <__libc_init_array+0x38>)
 80101ec:	4c0d      	ldr	r4, [pc, #52]	; (8010224 <__libc_init_array+0x3c>)
 80101ee:	1b64      	subs	r4, r4, r5
 80101f0:	10a4      	asrs	r4, r4, #2
 80101f2:	2600      	movs	r6, #0
 80101f4:	42a6      	cmp	r6, r4
 80101f6:	d109      	bne.n	801020c <__libc_init_array+0x24>
 80101f8:	4d0b      	ldr	r5, [pc, #44]	; (8010228 <__libc_init_array+0x40>)
 80101fa:	4c0c      	ldr	r4, [pc, #48]	; (801022c <__libc_init_array+0x44>)
 80101fc:	f002 f896 	bl	801232c <_init>
 8010200:	1b64      	subs	r4, r4, r5
 8010202:	10a4      	asrs	r4, r4, #2
 8010204:	2600      	movs	r6, #0
 8010206:	42a6      	cmp	r6, r4
 8010208:	d105      	bne.n	8010216 <__libc_init_array+0x2e>
 801020a:	bd70      	pop	{r4, r5, r6, pc}
 801020c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010210:	4798      	blx	r3
 8010212:	3601      	adds	r6, #1
 8010214:	e7ee      	b.n	80101f4 <__libc_init_array+0xc>
 8010216:	f855 3b04 	ldr.w	r3, [r5], #4
 801021a:	4798      	blx	r3
 801021c:	3601      	adds	r6, #1
 801021e:	e7f2      	b.n	8010206 <__libc_init_array+0x1e>
 8010220:	08014294 	.word	0x08014294
 8010224:	08014294 	.word	0x08014294
 8010228:	08014294 	.word	0x08014294
 801022c:	08014298 	.word	0x08014298

08010230 <__retarget_lock_init_recursive>:
 8010230:	4770      	bx	lr

08010232 <__retarget_lock_acquire_recursive>:
 8010232:	4770      	bx	lr

08010234 <__retarget_lock_release_recursive>:
 8010234:	4770      	bx	lr

08010236 <memcpy>:
 8010236:	440a      	add	r2, r1
 8010238:	4291      	cmp	r1, r2
 801023a:	f100 33ff 	add.w	r3, r0, #4294967295
 801023e:	d100      	bne.n	8010242 <memcpy+0xc>
 8010240:	4770      	bx	lr
 8010242:	b510      	push	{r4, lr}
 8010244:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010248:	f803 4f01 	strb.w	r4, [r3, #1]!
 801024c:	4291      	cmp	r1, r2
 801024e:	d1f9      	bne.n	8010244 <memcpy+0xe>
 8010250:	bd10      	pop	{r4, pc}

08010252 <quorem>:
 8010252:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010256:	6903      	ldr	r3, [r0, #16]
 8010258:	690c      	ldr	r4, [r1, #16]
 801025a:	42a3      	cmp	r3, r4
 801025c:	4607      	mov	r7, r0
 801025e:	db7e      	blt.n	801035e <quorem+0x10c>
 8010260:	3c01      	subs	r4, #1
 8010262:	f101 0814 	add.w	r8, r1, #20
 8010266:	f100 0514 	add.w	r5, r0, #20
 801026a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801026e:	9301      	str	r3, [sp, #4]
 8010270:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010278:	3301      	adds	r3, #1
 801027a:	429a      	cmp	r2, r3
 801027c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010280:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010284:	fbb2 f6f3 	udiv	r6, r2, r3
 8010288:	d331      	bcc.n	80102ee <quorem+0x9c>
 801028a:	f04f 0e00 	mov.w	lr, #0
 801028e:	4640      	mov	r0, r8
 8010290:	46ac      	mov	ip, r5
 8010292:	46f2      	mov	sl, lr
 8010294:	f850 2b04 	ldr.w	r2, [r0], #4
 8010298:	b293      	uxth	r3, r2
 801029a:	fb06 e303 	mla	r3, r6, r3, lr
 801029e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80102a2:	0c1a      	lsrs	r2, r3, #16
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	ebaa 0303 	sub.w	r3, sl, r3
 80102aa:	f8dc a000 	ldr.w	sl, [ip]
 80102ae:	fa13 f38a 	uxtah	r3, r3, sl
 80102b2:	fb06 220e 	mla	r2, r6, lr, r2
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	9b00      	ldr	r3, [sp, #0]
 80102ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80102be:	b292      	uxth	r2, r2
 80102c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80102c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80102cc:	4581      	cmp	r9, r0
 80102ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102d2:	f84c 3b04 	str.w	r3, [ip], #4
 80102d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80102da:	d2db      	bcs.n	8010294 <quorem+0x42>
 80102dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80102e0:	b92b      	cbnz	r3, 80102ee <quorem+0x9c>
 80102e2:	9b01      	ldr	r3, [sp, #4]
 80102e4:	3b04      	subs	r3, #4
 80102e6:	429d      	cmp	r5, r3
 80102e8:	461a      	mov	r2, r3
 80102ea:	d32c      	bcc.n	8010346 <quorem+0xf4>
 80102ec:	613c      	str	r4, [r7, #16]
 80102ee:	4638      	mov	r0, r7
 80102f0:	f001 f9a8 	bl	8011644 <__mcmp>
 80102f4:	2800      	cmp	r0, #0
 80102f6:	db22      	blt.n	801033e <quorem+0xec>
 80102f8:	3601      	adds	r6, #1
 80102fa:	4629      	mov	r1, r5
 80102fc:	2000      	movs	r0, #0
 80102fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8010302:	f8d1 c000 	ldr.w	ip, [r1]
 8010306:	b293      	uxth	r3, r2
 8010308:	1ac3      	subs	r3, r0, r3
 801030a:	0c12      	lsrs	r2, r2, #16
 801030c:	fa13 f38c 	uxtah	r3, r3, ip
 8010310:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010314:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010318:	b29b      	uxth	r3, r3
 801031a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801031e:	45c1      	cmp	r9, r8
 8010320:	f841 3b04 	str.w	r3, [r1], #4
 8010324:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010328:	d2e9      	bcs.n	80102fe <quorem+0xac>
 801032a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801032e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010332:	b922      	cbnz	r2, 801033e <quorem+0xec>
 8010334:	3b04      	subs	r3, #4
 8010336:	429d      	cmp	r5, r3
 8010338:	461a      	mov	r2, r3
 801033a:	d30a      	bcc.n	8010352 <quorem+0x100>
 801033c:	613c      	str	r4, [r7, #16]
 801033e:	4630      	mov	r0, r6
 8010340:	b003      	add	sp, #12
 8010342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010346:	6812      	ldr	r2, [r2, #0]
 8010348:	3b04      	subs	r3, #4
 801034a:	2a00      	cmp	r2, #0
 801034c:	d1ce      	bne.n	80102ec <quorem+0x9a>
 801034e:	3c01      	subs	r4, #1
 8010350:	e7c9      	b.n	80102e6 <quorem+0x94>
 8010352:	6812      	ldr	r2, [r2, #0]
 8010354:	3b04      	subs	r3, #4
 8010356:	2a00      	cmp	r2, #0
 8010358:	d1f0      	bne.n	801033c <quorem+0xea>
 801035a:	3c01      	subs	r4, #1
 801035c:	e7eb      	b.n	8010336 <quorem+0xe4>
 801035e:	2000      	movs	r0, #0
 8010360:	e7ee      	b.n	8010340 <quorem+0xee>
 8010362:	0000      	movs	r0, r0
 8010364:	0000      	movs	r0, r0
	...

08010368 <_dtoa_r>:
 8010368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801036c:	ed2d 8b04 	vpush	{d8-d9}
 8010370:	69c5      	ldr	r5, [r0, #28]
 8010372:	b093      	sub	sp, #76	; 0x4c
 8010374:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010378:	ec57 6b10 	vmov	r6, r7, d0
 801037c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010380:	9107      	str	r1, [sp, #28]
 8010382:	4604      	mov	r4, r0
 8010384:	920a      	str	r2, [sp, #40]	; 0x28
 8010386:	930d      	str	r3, [sp, #52]	; 0x34
 8010388:	b975      	cbnz	r5, 80103a8 <_dtoa_r+0x40>
 801038a:	2010      	movs	r0, #16
 801038c:	f000 fe2a 	bl	8010fe4 <malloc>
 8010390:	4602      	mov	r2, r0
 8010392:	61e0      	str	r0, [r4, #28]
 8010394:	b920      	cbnz	r0, 80103a0 <_dtoa_r+0x38>
 8010396:	4bae      	ldr	r3, [pc, #696]	; (8010650 <_dtoa_r+0x2e8>)
 8010398:	21ef      	movs	r1, #239	; 0xef
 801039a:	48ae      	ldr	r0, [pc, #696]	; (8010654 <_dtoa_r+0x2ec>)
 801039c:	f001 fc82 	bl	8011ca4 <__assert_func>
 80103a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80103a4:	6005      	str	r5, [r0, #0]
 80103a6:	60c5      	str	r5, [r0, #12]
 80103a8:	69e3      	ldr	r3, [r4, #28]
 80103aa:	6819      	ldr	r1, [r3, #0]
 80103ac:	b151      	cbz	r1, 80103c4 <_dtoa_r+0x5c>
 80103ae:	685a      	ldr	r2, [r3, #4]
 80103b0:	604a      	str	r2, [r1, #4]
 80103b2:	2301      	movs	r3, #1
 80103b4:	4093      	lsls	r3, r2
 80103b6:	608b      	str	r3, [r1, #8]
 80103b8:	4620      	mov	r0, r4
 80103ba:	f000 ff07 	bl	80111cc <_Bfree>
 80103be:	69e3      	ldr	r3, [r4, #28]
 80103c0:	2200      	movs	r2, #0
 80103c2:	601a      	str	r2, [r3, #0]
 80103c4:	1e3b      	subs	r3, r7, #0
 80103c6:	bfbb      	ittet	lt
 80103c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80103cc:	9303      	strlt	r3, [sp, #12]
 80103ce:	2300      	movge	r3, #0
 80103d0:	2201      	movlt	r2, #1
 80103d2:	bfac      	ite	ge
 80103d4:	f8c8 3000 	strge.w	r3, [r8]
 80103d8:	f8c8 2000 	strlt.w	r2, [r8]
 80103dc:	4b9e      	ldr	r3, [pc, #632]	; (8010658 <_dtoa_r+0x2f0>)
 80103de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80103e2:	ea33 0308 	bics.w	r3, r3, r8
 80103e6:	d11b      	bne.n	8010420 <_dtoa_r+0xb8>
 80103e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80103ee:	6013      	str	r3, [r2, #0]
 80103f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80103f4:	4333      	orrs	r3, r6
 80103f6:	f000 8593 	beq.w	8010f20 <_dtoa_r+0xbb8>
 80103fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103fc:	b963      	cbnz	r3, 8010418 <_dtoa_r+0xb0>
 80103fe:	4b97      	ldr	r3, [pc, #604]	; (801065c <_dtoa_r+0x2f4>)
 8010400:	e027      	b.n	8010452 <_dtoa_r+0xea>
 8010402:	4b97      	ldr	r3, [pc, #604]	; (8010660 <_dtoa_r+0x2f8>)
 8010404:	9300      	str	r3, [sp, #0]
 8010406:	3308      	adds	r3, #8
 8010408:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801040a:	6013      	str	r3, [r2, #0]
 801040c:	9800      	ldr	r0, [sp, #0]
 801040e:	b013      	add	sp, #76	; 0x4c
 8010410:	ecbd 8b04 	vpop	{d8-d9}
 8010414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010418:	4b90      	ldr	r3, [pc, #576]	; (801065c <_dtoa_r+0x2f4>)
 801041a:	9300      	str	r3, [sp, #0]
 801041c:	3303      	adds	r3, #3
 801041e:	e7f3      	b.n	8010408 <_dtoa_r+0xa0>
 8010420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010424:	2200      	movs	r2, #0
 8010426:	ec51 0b17 	vmov	r0, r1, d7
 801042a:	eeb0 8a47 	vmov.f32	s16, s14
 801042e:	eef0 8a67 	vmov.f32	s17, s15
 8010432:	2300      	movs	r3, #0
 8010434:	f7f0 fb58 	bl	8000ae8 <__aeabi_dcmpeq>
 8010438:	4681      	mov	r9, r0
 801043a:	b160      	cbz	r0, 8010456 <_dtoa_r+0xee>
 801043c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801043e:	2301      	movs	r3, #1
 8010440:	6013      	str	r3, [r2, #0]
 8010442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010444:	2b00      	cmp	r3, #0
 8010446:	f000 8568 	beq.w	8010f1a <_dtoa_r+0xbb2>
 801044a:	4b86      	ldr	r3, [pc, #536]	; (8010664 <_dtoa_r+0x2fc>)
 801044c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801044e:	6013      	str	r3, [r2, #0]
 8010450:	3b01      	subs	r3, #1
 8010452:	9300      	str	r3, [sp, #0]
 8010454:	e7da      	b.n	801040c <_dtoa_r+0xa4>
 8010456:	aa10      	add	r2, sp, #64	; 0x40
 8010458:	a911      	add	r1, sp, #68	; 0x44
 801045a:	4620      	mov	r0, r4
 801045c:	eeb0 0a48 	vmov.f32	s0, s16
 8010460:	eef0 0a68 	vmov.f32	s1, s17
 8010464:	f001 f994 	bl	8011790 <__d2b>
 8010468:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801046c:	4682      	mov	sl, r0
 801046e:	2d00      	cmp	r5, #0
 8010470:	d07f      	beq.n	8010572 <_dtoa_r+0x20a>
 8010472:	ee18 3a90 	vmov	r3, s17
 8010476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801047a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801047e:	ec51 0b18 	vmov	r0, r1, d8
 8010482:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801048a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801048e:	4619      	mov	r1, r3
 8010490:	2200      	movs	r2, #0
 8010492:	4b75      	ldr	r3, [pc, #468]	; (8010668 <_dtoa_r+0x300>)
 8010494:	f7ef ff08 	bl	80002a8 <__aeabi_dsub>
 8010498:	a367      	add	r3, pc, #412	; (adr r3, 8010638 <_dtoa_r+0x2d0>)
 801049a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049e:	f7f0 f8bb 	bl	8000618 <__aeabi_dmul>
 80104a2:	a367      	add	r3, pc, #412	; (adr r3, 8010640 <_dtoa_r+0x2d8>)
 80104a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a8:	f7ef ff00 	bl	80002ac <__adddf3>
 80104ac:	4606      	mov	r6, r0
 80104ae:	4628      	mov	r0, r5
 80104b0:	460f      	mov	r7, r1
 80104b2:	f7f0 f847 	bl	8000544 <__aeabi_i2d>
 80104b6:	a364      	add	r3, pc, #400	; (adr r3, 8010648 <_dtoa_r+0x2e0>)
 80104b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104bc:	f7f0 f8ac 	bl	8000618 <__aeabi_dmul>
 80104c0:	4602      	mov	r2, r0
 80104c2:	460b      	mov	r3, r1
 80104c4:	4630      	mov	r0, r6
 80104c6:	4639      	mov	r1, r7
 80104c8:	f7ef fef0 	bl	80002ac <__adddf3>
 80104cc:	4606      	mov	r6, r0
 80104ce:	460f      	mov	r7, r1
 80104d0:	f7f0 fb52 	bl	8000b78 <__aeabi_d2iz>
 80104d4:	2200      	movs	r2, #0
 80104d6:	4683      	mov	fp, r0
 80104d8:	2300      	movs	r3, #0
 80104da:	4630      	mov	r0, r6
 80104dc:	4639      	mov	r1, r7
 80104de:	f7f0 fb0d 	bl	8000afc <__aeabi_dcmplt>
 80104e2:	b148      	cbz	r0, 80104f8 <_dtoa_r+0x190>
 80104e4:	4658      	mov	r0, fp
 80104e6:	f7f0 f82d 	bl	8000544 <__aeabi_i2d>
 80104ea:	4632      	mov	r2, r6
 80104ec:	463b      	mov	r3, r7
 80104ee:	f7f0 fafb 	bl	8000ae8 <__aeabi_dcmpeq>
 80104f2:	b908      	cbnz	r0, 80104f8 <_dtoa_r+0x190>
 80104f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80104f8:	f1bb 0f16 	cmp.w	fp, #22
 80104fc:	d857      	bhi.n	80105ae <_dtoa_r+0x246>
 80104fe:	4b5b      	ldr	r3, [pc, #364]	; (801066c <_dtoa_r+0x304>)
 8010500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010508:	ec51 0b18 	vmov	r0, r1, d8
 801050c:	f7f0 faf6 	bl	8000afc <__aeabi_dcmplt>
 8010510:	2800      	cmp	r0, #0
 8010512:	d04e      	beq.n	80105b2 <_dtoa_r+0x24a>
 8010514:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010518:	2300      	movs	r3, #0
 801051a:	930c      	str	r3, [sp, #48]	; 0x30
 801051c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801051e:	1b5b      	subs	r3, r3, r5
 8010520:	1e5a      	subs	r2, r3, #1
 8010522:	bf45      	ittet	mi
 8010524:	f1c3 0301 	rsbmi	r3, r3, #1
 8010528:	9305      	strmi	r3, [sp, #20]
 801052a:	2300      	movpl	r3, #0
 801052c:	2300      	movmi	r3, #0
 801052e:	9206      	str	r2, [sp, #24]
 8010530:	bf54      	ite	pl
 8010532:	9305      	strpl	r3, [sp, #20]
 8010534:	9306      	strmi	r3, [sp, #24]
 8010536:	f1bb 0f00 	cmp.w	fp, #0
 801053a:	db3c      	blt.n	80105b6 <_dtoa_r+0x24e>
 801053c:	9b06      	ldr	r3, [sp, #24]
 801053e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010542:	445b      	add	r3, fp
 8010544:	9306      	str	r3, [sp, #24]
 8010546:	2300      	movs	r3, #0
 8010548:	9308      	str	r3, [sp, #32]
 801054a:	9b07      	ldr	r3, [sp, #28]
 801054c:	2b09      	cmp	r3, #9
 801054e:	d868      	bhi.n	8010622 <_dtoa_r+0x2ba>
 8010550:	2b05      	cmp	r3, #5
 8010552:	bfc4      	itt	gt
 8010554:	3b04      	subgt	r3, #4
 8010556:	9307      	strgt	r3, [sp, #28]
 8010558:	9b07      	ldr	r3, [sp, #28]
 801055a:	f1a3 0302 	sub.w	r3, r3, #2
 801055e:	bfcc      	ite	gt
 8010560:	2500      	movgt	r5, #0
 8010562:	2501      	movle	r5, #1
 8010564:	2b03      	cmp	r3, #3
 8010566:	f200 8085 	bhi.w	8010674 <_dtoa_r+0x30c>
 801056a:	e8df f003 	tbb	[pc, r3]
 801056e:	3b2e      	.short	0x3b2e
 8010570:	5839      	.short	0x5839
 8010572:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010576:	441d      	add	r5, r3
 8010578:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801057c:	2b20      	cmp	r3, #32
 801057e:	bfc1      	itttt	gt
 8010580:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010584:	fa08 f803 	lslgt.w	r8, r8, r3
 8010588:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801058c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010590:	bfd6      	itet	le
 8010592:	f1c3 0320 	rsble	r3, r3, #32
 8010596:	ea48 0003 	orrgt.w	r0, r8, r3
 801059a:	fa06 f003 	lslle.w	r0, r6, r3
 801059e:	f7ef ffc1 	bl	8000524 <__aeabi_ui2d>
 80105a2:	2201      	movs	r2, #1
 80105a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80105a8:	3d01      	subs	r5, #1
 80105aa:	920e      	str	r2, [sp, #56]	; 0x38
 80105ac:	e76f      	b.n	801048e <_dtoa_r+0x126>
 80105ae:	2301      	movs	r3, #1
 80105b0:	e7b3      	b.n	801051a <_dtoa_r+0x1b2>
 80105b2:	900c      	str	r0, [sp, #48]	; 0x30
 80105b4:	e7b2      	b.n	801051c <_dtoa_r+0x1b4>
 80105b6:	9b05      	ldr	r3, [sp, #20]
 80105b8:	eba3 030b 	sub.w	r3, r3, fp
 80105bc:	9305      	str	r3, [sp, #20]
 80105be:	f1cb 0300 	rsb	r3, fp, #0
 80105c2:	9308      	str	r3, [sp, #32]
 80105c4:	2300      	movs	r3, #0
 80105c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80105c8:	e7bf      	b.n	801054a <_dtoa_r+0x1e2>
 80105ca:	2300      	movs	r3, #0
 80105cc:	9309      	str	r3, [sp, #36]	; 0x24
 80105ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	dc52      	bgt.n	801067a <_dtoa_r+0x312>
 80105d4:	2301      	movs	r3, #1
 80105d6:	9301      	str	r3, [sp, #4]
 80105d8:	9304      	str	r3, [sp, #16]
 80105da:	461a      	mov	r2, r3
 80105dc:	920a      	str	r2, [sp, #40]	; 0x28
 80105de:	e00b      	b.n	80105f8 <_dtoa_r+0x290>
 80105e0:	2301      	movs	r3, #1
 80105e2:	e7f3      	b.n	80105cc <_dtoa_r+0x264>
 80105e4:	2300      	movs	r3, #0
 80105e6:	9309      	str	r3, [sp, #36]	; 0x24
 80105e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105ea:	445b      	add	r3, fp
 80105ec:	9301      	str	r3, [sp, #4]
 80105ee:	3301      	adds	r3, #1
 80105f0:	2b01      	cmp	r3, #1
 80105f2:	9304      	str	r3, [sp, #16]
 80105f4:	bfb8      	it	lt
 80105f6:	2301      	movlt	r3, #1
 80105f8:	69e0      	ldr	r0, [r4, #28]
 80105fa:	2100      	movs	r1, #0
 80105fc:	2204      	movs	r2, #4
 80105fe:	f102 0614 	add.w	r6, r2, #20
 8010602:	429e      	cmp	r6, r3
 8010604:	d93d      	bls.n	8010682 <_dtoa_r+0x31a>
 8010606:	6041      	str	r1, [r0, #4]
 8010608:	4620      	mov	r0, r4
 801060a:	f000 fd9f 	bl	801114c <_Balloc>
 801060e:	9000      	str	r0, [sp, #0]
 8010610:	2800      	cmp	r0, #0
 8010612:	d139      	bne.n	8010688 <_dtoa_r+0x320>
 8010614:	4b16      	ldr	r3, [pc, #88]	; (8010670 <_dtoa_r+0x308>)
 8010616:	4602      	mov	r2, r0
 8010618:	f240 11af 	movw	r1, #431	; 0x1af
 801061c:	e6bd      	b.n	801039a <_dtoa_r+0x32>
 801061e:	2301      	movs	r3, #1
 8010620:	e7e1      	b.n	80105e6 <_dtoa_r+0x27e>
 8010622:	2501      	movs	r5, #1
 8010624:	2300      	movs	r3, #0
 8010626:	9307      	str	r3, [sp, #28]
 8010628:	9509      	str	r5, [sp, #36]	; 0x24
 801062a:	f04f 33ff 	mov.w	r3, #4294967295
 801062e:	9301      	str	r3, [sp, #4]
 8010630:	9304      	str	r3, [sp, #16]
 8010632:	2200      	movs	r2, #0
 8010634:	2312      	movs	r3, #18
 8010636:	e7d1      	b.n	80105dc <_dtoa_r+0x274>
 8010638:	636f4361 	.word	0x636f4361
 801063c:	3fd287a7 	.word	0x3fd287a7
 8010640:	8b60c8b3 	.word	0x8b60c8b3
 8010644:	3fc68a28 	.word	0x3fc68a28
 8010648:	509f79fb 	.word	0x509f79fb
 801064c:	3fd34413 	.word	0x3fd34413
 8010650:	08013f5d 	.word	0x08013f5d
 8010654:	08013f74 	.word	0x08013f74
 8010658:	7ff00000 	.word	0x7ff00000
 801065c:	08013f59 	.word	0x08013f59
 8010660:	08013f50 	.word	0x08013f50
 8010664:	08013f2d 	.word	0x08013f2d
 8010668:	3ff80000 	.word	0x3ff80000
 801066c:	08014060 	.word	0x08014060
 8010670:	08013fcc 	.word	0x08013fcc
 8010674:	2301      	movs	r3, #1
 8010676:	9309      	str	r3, [sp, #36]	; 0x24
 8010678:	e7d7      	b.n	801062a <_dtoa_r+0x2c2>
 801067a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801067c:	9301      	str	r3, [sp, #4]
 801067e:	9304      	str	r3, [sp, #16]
 8010680:	e7ba      	b.n	80105f8 <_dtoa_r+0x290>
 8010682:	3101      	adds	r1, #1
 8010684:	0052      	lsls	r2, r2, #1
 8010686:	e7ba      	b.n	80105fe <_dtoa_r+0x296>
 8010688:	69e3      	ldr	r3, [r4, #28]
 801068a:	9a00      	ldr	r2, [sp, #0]
 801068c:	601a      	str	r2, [r3, #0]
 801068e:	9b04      	ldr	r3, [sp, #16]
 8010690:	2b0e      	cmp	r3, #14
 8010692:	f200 80a8 	bhi.w	80107e6 <_dtoa_r+0x47e>
 8010696:	2d00      	cmp	r5, #0
 8010698:	f000 80a5 	beq.w	80107e6 <_dtoa_r+0x47e>
 801069c:	f1bb 0f00 	cmp.w	fp, #0
 80106a0:	dd38      	ble.n	8010714 <_dtoa_r+0x3ac>
 80106a2:	4bc0      	ldr	r3, [pc, #768]	; (80109a4 <_dtoa_r+0x63c>)
 80106a4:	f00b 020f 	and.w	r2, fp, #15
 80106a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80106b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80106b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80106b8:	d019      	beq.n	80106ee <_dtoa_r+0x386>
 80106ba:	4bbb      	ldr	r3, [pc, #748]	; (80109a8 <_dtoa_r+0x640>)
 80106bc:	ec51 0b18 	vmov	r0, r1, d8
 80106c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80106c4:	f7f0 f8d2 	bl	800086c <__aeabi_ddiv>
 80106c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106cc:	f008 080f 	and.w	r8, r8, #15
 80106d0:	2503      	movs	r5, #3
 80106d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80109a8 <_dtoa_r+0x640>
 80106d6:	f1b8 0f00 	cmp.w	r8, #0
 80106da:	d10a      	bne.n	80106f2 <_dtoa_r+0x38a>
 80106dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106e0:	4632      	mov	r2, r6
 80106e2:	463b      	mov	r3, r7
 80106e4:	f7f0 f8c2 	bl	800086c <__aeabi_ddiv>
 80106e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106ec:	e02b      	b.n	8010746 <_dtoa_r+0x3de>
 80106ee:	2502      	movs	r5, #2
 80106f0:	e7ef      	b.n	80106d2 <_dtoa_r+0x36a>
 80106f2:	f018 0f01 	tst.w	r8, #1
 80106f6:	d008      	beq.n	801070a <_dtoa_r+0x3a2>
 80106f8:	4630      	mov	r0, r6
 80106fa:	4639      	mov	r1, r7
 80106fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010700:	f7ef ff8a 	bl	8000618 <__aeabi_dmul>
 8010704:	3501      	adds	r5, #1
 8010706:	4606      	mov	r6, r0
 8010708:	460f      	mov	r7, r1
 801070a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801070e:	f109 0908 	add.w	r9, r9, #8
 8010712:	e7e0      	b.n	80106d6 <_dtoa_r+0x36e>
 8010714:	f000 809f 	beq.w	8010856 <_dtoa_r+0x4ee>
 8010718:	f1cb 0600 	rsb	r6, fp, #0
 801071c:	4ba1      	ldr	r3, [pc, #644]	; (80109a4 <_dtoa_r+0x63c>)
 801071e:	4fa2      	ldr	r7, [pc, #648]	; (80109a8 <_dtoa_r+0x640>)
 8010720:	f006 020f 	and.w	r2, r6, #15
 8010724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801072c:	ec51 0b18 	vmov	r0, r1, d8
 8010730:	f7ef ff72 	bl	8000618 <__aeabi_dmul>
 8010734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010738:	1136      	asrs	r6, r6, #4
 801073a:	2300      	movs	r3, #0
 801073c:	2502      	movs	r5, #2
 801073e:	2e00      	cmp	r6, #0
 8010740:	d17e      	bne.n	8010840 <_dtoa_r+0x4d8>
 8010742:	2b00      	cmp	r3, #0
 8010744:	d1d0      	bne.n	80106e8 <_dtoa_r+0x380>
 8010746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010748:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801074c:	2b00      	cmp	r3, #0
 801074e:	f000 8084 	beq.w	801085a <_dtoa_r+0x4f2>
 8010752:	4b96      	ldr	r3, [pc, #600]	; (80109ac <_dtoa_r+0x644>)
 8010754:	2200      	movs	r2, #0
 8010756:	4640      	mov	r0, r8
 8010758:	4649      	mov	r1, r9
 801075a:	f7f0 f9cf 	bl	8000afc <__aeabi_dcmplt>
 801075e:	2800      	cmp	r0, #0
 8010760:	d07b      	beq.n	801085a <_dtoa_r+0x4f2>
 8010762:	9b04      	ldr	r3, [sp, #16]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d078      	beq.n	801085a <_dtoa_r+0x4f2>
 8010768:	9b01      	ldr	r3, [sp, #4]
 801076a:	2b00      	cmp	r3, #0
 801076c:	dd39      	ble.n	80107e2 <_dtoa_r+0x47a>
 801076e:	4b90      	ldr	r3, [pc, #576]	; (80109b0 <_dtoa_r+0x648>)
 8010770:	2200      	movs	r2, #0
 8010772:	4640      	mov	r0, r8
 8010774:	4649      	mov	r1, r9
 8010776:	f7ef ff4f 	bl	8000618 <__aeabi_dmul>
 801077a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801077e:	9e01      	ldr	r6, [sp, #4]
 8010780:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010784:	3501      	adds	r5, #1
 8010786:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801078a:	4628      	mov	r0, r5
 801078c:	f7ef feda 	bl	8000544 <__aeabi_i2d>
 8010790:	4642      	mov	r2, r8
 8010792:	464b      	mov	r3, r9
 8010794:	f7ef ff40 	bl	8000618 <__aeabi_dmul>
 8010798:	4b86      	ldr	r3, [pc, #536]	; (80109b4 <_dtoa_r+0x64c>)
 801079a:	2200      	movs	r2, #0
 801079c:	f7ef fd86 	bl	80002ac <__adddf3>
 80107a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80107a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107a8:	9303      	str	r3, [sp, #12]
 80107aa:	2e00      	cmp	r6, #0
 80107ac:	d158      	bne.n	8010860 <_dtoa_r+0x4f8>
 80107ae:	4b82      	ldr	r3, [pc, #520]	; (80109b8 <_dtoa_r+0x650>)
 80107b0:	2200      	movs	r2, #0
 80107b2:	4640      	mov	r0, r8
 80107b4:	4649      	mov	r1, r9
 80107b6:	f7ef fd77 	bl	80002a8 <__aeabi_dsub>
 80107ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107be:	4680      	mov	r8, r0
 80107c0:	4689      	mov	r9, r1
 80107c2:	f7f0 f9b9 	bl	8000b38 <__aeabi_dcmpgt>
 80107c6:	2800      	cmp	r0, #0
 80107c8:	f040 8296 	bne.w	8010cf8 <_dtoa_r+0x990>
 80107cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80107d0:	4640      	mov	r0, r8
 80107d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107d6:	4649      	mov	r1, r9
 80107d8:	f7f0 f990 	bl	8000afc <__aeabi_dcmplt>
 80107dc:	2800      	cmp	r0, #0
 80107de:	f040 8289 	bne.w	8010cf4 <_dtoa_r+0x98c>
 80107e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80107e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	f2c0 814e 	blt.w	8010a8a <_dtoa_r+0x722>
 80107ee:	f1bb 0f0e 	cmp.w	fp, #14
 80107f2:	f300 814a 	bgt.w	8010a8a <_dtoa_r+0x722>
 80107f6:	4b6b      	ldr	r3, [pc, #428]	; (80109a4 <_dtoa_r+0x63c>)
 80107f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80107fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010802:	2b00      	cmp	r3, #0
 8010804:	f280 80dc 	bge.w	80109c0 <_dtoa_r+0x658>
 8010808:	9b04      	ldr	r3, [sp, #16]
 801080a:	2b00      	cmp	r3, #0
 801080c:	f300 80d8 	bgt.w	80109c0 <_dtoa_r+0x658>
 8010810:	f040 826f 	bne.w	8010cf2 <_dtoa_r+0x98a>
 8010814:	4b68      	ldr	r3, [pc, #416]	; (80109b8 <_dtoa_r+0x650>)
 8010816:	2200      	movs	r2, #0
 8010818:	4640      	mov	r0, r8
 801081a:	4649      	mov	r1, r9
 801081c:	f7ef fefc 	bl	8000618 <__aeabi_dmul>
 8010820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010824:	f7f0 f97e 	bl	8000b24 <__aeabi_dcmpge>
 8010828:	9e04      	ldr	r6, [sp, #16]
 801082a:	4637      	mov	r7, r6
 801082c:	2800      	cmp	r0, #0
 801082e:	f040 8245 	bne.w	8010cbc <_dtoa_r+0x954>
 8010832:	9d00      	ldr	r5, [sp, #0]
 8010834:	2331      	movs	r3, #49	; 0x31
 8010836:	f805 3b01 	strb.w	r3, [r5], #1
 801083a:	f10b 0b01 	add.w	fp, fp, #1
 801083e:	e241      	b.n	8010cc4 <_dtoa_r+0x95c>
 8010840:	07f2      	lsls	r2, r6, #31
 8010842:	d505      	bpl.n	8010850 <_dtoa_r+0x4e8>
 8010844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010848:	f7ef fee6 	bl	8000618 <__aeabi_dmul>
 801084c:	3501      	adds	r5, #1
 801084e:	2301      	movs	r3, #1
 8010850:	1076      	asrs	r6, r6, #1
 8010852:	3708      	adds	r7, #8
 8010854:	e773      	b.n	801073e <_dtoa_r+0x3d6>
 8010856:	2502      	movs	r5, #2
 8010858:	e775      	b.n	8010746 <_dtoa_r+0x3de>
 801085a:	9e04      	ldr	r6, [sp, #16]
 801085c:	465f      	mov	r7, fp
 801085e:	e792      	b.n	8010786 <_dtoa_r+0x41e>
 8010860:	9900      	ldr	r1, [sp, #0]
 8010862:	4b50      	ldr	r3, [pc, #320]	; (80109a4 <_dtoa_r+0x63c>)
 8010864:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010868:	4431      	add	r1, r6
 801086a:	9102      	str	r1, [sp, #8]
 801086c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801086e:	eeb0 9a47 	vmov.f32	s18, s14
 8010872:	eef0 9a67 	vmov.f32	s19, s15
 8010876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801087a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801087e:	2900      	cmp	r1, #0
 8010880:	d044      	beq.n	801090c <_dtoa_r+0x5a4>
 8010882:	494e      	ldr	r1, [pc, #312]	; (80109bc <_dtoa_r+0x654>)
 8010884:	2000      	movs	r0, #0
 8010886:	f7ef fff1 	bl	800086c <__aeabi_ddiv>
 801088a:	ec53 2b19 	vmov	r2, r3, d9
 801088e:	f7ef fd0b 	bl	80002a8 <__aeabi_dsub>
 8010892:	9d00      	ldr	r5, [sp, #0]
 8010894:	ec41 0b19 	vmov	d9, r0, r1
 8010898:	4649      	mov	r1, r9
 801089a:	4640      	mov	r0, r8
 801089c:	f7f0 f96c 	bl	8000b78 <__aeabi_d2iz>
 80108a0:	4606      	mov	r6, r0
 80108a2:	f7ef fe4f 	bl	8000544 <__aeabi_i2d>
 80108a6:	4602      	mov	r2, r0
 80108a8:	460b      	mov	r3, r1
 80108aa:	4640      	mov	r0, r8
 80108ac:	4649      	mov	r1, r9
 80108ae:	f7ef fcfb 	bl	80002a8 <__aeabi_dsub>
 80108b2:	3630      	adds	r6, #48	; 0x30
 80108b4:	f805 6b01 	strb.w	r6, [r5], #1
 80108b8:	ec53 2b19 	vmov	r2, r3, d9
 80108bc:	4680      	mov	r8, r0
 80108be:	4689      	mov	r9, r1
 80108c0:	f7f0 f91c 	bl	8000afc <__aeabi_dcmplt>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d164      	bne.n	8010992 <_dtoa_r+0x62a>
 80108c8:	4642      	mov	r2, r8
 80108ca:	464b      	mov	r3, r9
 80108cc:	4937      	ldr	r1, [pc, #220]	; (80109ac <_dtoa_r+0x644>)
 80108ce:	2000      	movs	r0, #0
 80108d0:	f7ef fcea 	bl	80002a8 <__aeabi_dsub>
 80108d4:	ec53 2b19 	vmov	r2, r3, d9
 80108d8:	f7f0 f910 	bl	8000afc <__aeabi_dcmplt>
 80108dc:	2800      	cmp	r0, #0
 80108de:	f040 80b6 	bne.w	8010a4e <_dtoa_r+0x6e6>
 80108e2:	9b02      	ldr	r3, [sp, #8]
 80108e4:	429d      	cmp	r5, r3
 80108e6:	f43f af7c 	beq.w	80107e2 <_dtoa_r+0x47a>
 80108ea:	4b31      	ldr	r3, [pc, #196]	; (80109b0 <_dtoa_r+0x648>)
 80108ec:	ec51 0b19 	vmov	r0, r1, d9
 80108f0:	2200      	movs	r2, #0
 80108f2:	f7ef fe91 	bl	8000618 <__aeabi_dmul>
 80108f6:	4b2e      	ldr	r3, [pc, #184]	; (80109b0 <_dtoa_r+0x648>)
 80108f8:	ec41 0b19 	vmov	d9, r0, r1
 80108fc:	2200      	movs	r2, #0
 80108fe:	4640      	mov	r0, r8
 8010900:	4649      	mov	r1, r9
 8010902:	f7ef fe89 	bl	8000618 <__aeabi_dmul>
 8010906:	4680      	mov	r8, r0
 8010908:	4689      	mov	r9, r1
 801090a:	e7c5      	b.n	8010898 <_dtoa_r+0x530>
 801090c:	ec51 0b17 	vmov	r0, r1, d7
 8010910:	f7ef fe82 	bl	8000618 <__aeabi_dmul>
 8010914:	9b02      	ldr	r3, [sp, #8]
 8010916:	9d00      	ldr	r5, [sp, #0]
 8010918:	930f      	str	r3, [sp, #60]	; 0x3c
 801091a:	ec41 0b19 	vmov	d9, r0, r1
 801091e:	4649      	mov	r1, r9
 8010920:	4640      	mov	r0, r8
 8010922:	f7f0 f929 	bl	8000b78 <__aeabi_d2iz>
 8010926:	4606      	mov	r6, r0
 8010928:	f7ef fe0c 	bl	8000544 <__aeabi_i2d>
 801092c:	3630      	adds	r6, #48	; 0x30
 801092e:	4602      	mov	r2, r0
 8010930:	460b      	mov	r3, r1
 8010932:	4640      	mov	r0, r8
 8010934:	4649      	mov	r1, r9
 8010936:	f7ef fcb7 	bl	80002a8 <__aeabi_dsub>
 801093a:	f805 6b01 	strb.w	r6, [r5], #1
 801093e:	9b02      	ldr	r3, [sp, #8]
 8010940:	429d      	cmp	r5, r3
 8010942:	4680      	mov	r8, r0
 8010944:	4689      	mov	r9, r1
 8010946:	f04f 0200 	mov.w	r2, #0
 801094a:	d124      	bne.n	8010996 <_dtoa_r+0x62e>
 801094c:	4b1b      	ldr	r3, [pc, #108]	; (80109bc <_dtoa_r+0x654>)
 801094e:	ec51 0b19 	vmov	r0, r1, d9
 8010952:	f7ef fcab 	bl	80002ac <__adddf3>
 8010956:	4602      	mov	r2, r0
 8010958:	460b      	mov	r3, r1
 801095a:	4640      	mov	r0, r8
 801095c:	4649      	mov	r1, r9
 801095e:	f7f0 f8eb 	bl	8000b38 <__aeabi_dcmpgt>
 8010962:	2800      	cmp	r0, #0
 8010964:	d173      	bne.n	8010a4e <_dtoa_r+0x6e6>
 8010966:	ec53 2b19 	vmov	r2, r3, d9
 801096a:	4914      	ldr	r1, [pc, #80]	; (80109bc <_dtoa_r+0x654>)
 801096c:	2000      	movs	r0, #0
 801096e:	f7ef fc9b 	bl	80002a8 <__aeabi_dsub>
 8010972:	4602      	mov	r2, r0
 8010974:	460b      	mov	r3, r1
 8010976:	4640      	mov	r0, r8
 8010978:	4649      	mov	r1, r9
 801097a:	f7f0 f8bf 	bl	8000afc <__aeabi_dcmplt>
 801097e:	2800      	cmp	r0, #0
 8010980:	f43f af2f 	beq.w	80107e2 <_dtoa_r+0x47a>
 8010984:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010986:	1e6b      	subs	r3, r5, #1
 8010988:	930f      	str	r3, [sp, #60]	; 0x3c
 801098a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801098e:	2b30      	cmp	r3, #48	; 0x30
 8010990:	d0f8      	beq.n	8010984 <_dtoa_r+0x61c>
 8010992:	46bb      	mov	fp, r7
 8010994:	e04a      	b.n	8010a2c <_dtoa_r+0x6c4>
 8010996:	4b06      	ldr	r3, [pc, #24]	; (80109b0 <_dtoa_r+0x648>)
 8010998:	f7ef fe3e 	bl	8000618 <__aeabi_dmul>
 801099c:	4680      	mov	r8, r0
 801099e:	4689      	mov	r9, r1
 80109a0:	e7bd      	b.n	801091e <_dtoa_r+0x5b6>
 80109a2:	bf00      	nop
 80109a4:	08014060 	.word	0x08014060
 80109a8:	08014038 	.word	0x08014038
 80109ac:	3ff00000 	.word	0x3ff00000
 80109b0:	40240000 	.word	0x40240000
 80109b4:	401c0000 	.word	0x401c0000
 80109b8:	40140000 	.word	0x40140000
 80109bc:	3fe00000 	.word	0x3fe00000
 80109c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80109c4:	9d00      	ldr	r5, [sp, #0]
 80109c6:	4642      	mov	r2, r8
 80109c8:	464b      	mov	r3, r9
 80109ca:	4630      	mov	r0, r6
 80109cc:	4639      	mov	r1, r7
 80109ce:	f7ef ff4d 	bl	800086c <__aeabi_ddiv>
 80109d2:	f7f0 f8d1 	bl	8000b78 <__aeabi_d2iz>
 80109d6:	9001      	str	r0, [sp, #4]
 80109d8:	f7ef fdb4 	bl	8000544 <__aeabi_i2d>
 80109dc:	4642      	mov	r2, r8
 80109de:	464b      	mov	r3, r9
 80109e0:	f7ef fe1a 	bl	8000618 <__aeabi_dmul>
 80109e4:	4602      	mov	r2, r0
 80109e6:	460b      	mov	r3, r1
 80109e8:	4630      	mov	r0, r6
 80109ea:	4639      	mov	r1, r7
 80109ec:	f7ef fc5c 	bl	80002a8 <__aeabi_dsub>
 80109f0:	9e01      	ldr	r6, [sp, #4]
 80109f2:	9f04      	ldr	r7, [sp, #16]
 80109f4:	3630      	adds	r6, #48	; 0x30
 80109f6:	f805 6b01 	strb.w	r6, [r5], #1
 80109fa:	9e00      	ldr	r6, [sp, #0]
 80109fc:	1bae      	subs	r6, r5, r6
 80109fe:	42b7      	cmp	r7, r6
 8010a00:	4602      	mov	r2, r0
 8010a02:	460b      	mov	r3, r1
 8010a04:	d134      	bne.n	8010a70 <_dtoa_r+0x708>
 8010a06:	f7ef fc51 	bl	80002ac <__adddf3>
 8010a0a:	4642      	mov	r2, r8
 8010a0c:	464b      	mov	r3, r9
 8010a0e:	4606      	mov	r6, r0
 8010a10:	460f      	mov	r7, r1
 8010a12:	f7f0 f891 	bl	8000b38 <__aeabi_dcmpgt>
 8010a16:	b9c8      	cbnz	r0, 8010a4c <_dtoa_r+0x6e4>
 8010a18:	4642      	mov	r2, r8
 8010a1a:	464b      	mov	r3, r9
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	4639      	mov	r1, r7
 8010a20:	f7f0 f862 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a24:	b110      	cbz	r0, 8010a2c <_dtoa_r+0x6c4>
 8010a26:	9b01      	ldr	r3, [sp, #4]
 8010a28:	07db      	lsls	r3, r3, #31
 8010a2a:	d40f      	bmi.n	8010a4c <_dtoa_r+0x6e4>
 8010a2c:	4651      	mov	r1, sl
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f000 fbcc 	bl	80111cc <_Bfree>
 8010a34:	2300      	movs	r3, #0
 8010a36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a38:	702b      	strb	r3, [r5, #0]
 8010a3a:	f10b 0301 	add.w	r3, fp, #1
 8010a3e:	6013      	str	r3, [r2, #0]
 8010a40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f43f ace2 	beq.w	801040c <_dtoa_r+0xa4>
 8010a48:	601d      	str	r5, [r3, #0]
 8010a4a:	e4df      	b.n	801040c <_dtoa_r+0xa4>
 8010a4c:	465f      	mov	r7, fp
 8010a4e:	462b      	mov	r3, r5
 8010a50:	461d      	mov	r5, r3
 8010a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a56:	2a39      	cmp	r2, #57	; 0x39
 8010a58:	d106      	bne.n	8010a68 <_dtoa_r+0x700>
 8010a5a:	9a00      	ldr	r2, [sp, #0]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d1f7      	bne.n	8010a50 <_dtoa_r+0x6e8>
 8010a60:	9900      	ldr	r1, [sp, #0]
 8010a62:	2230      	movs	r2, #48	; 0x30
 8010a64:	3701      	adds	r7, #1
 8010a66:	700a      	strb	r2, [r1, #0]
 8010a68:	781a      	ldrb	r2, [r3, #0]
 8010a6a:	3201      	adds	r2, #1
 8010a6c:	701a      	strb	r2, [r3, #0]
 8010a6e:	e790      	b.n	8010992 <_dtoa_r+0x62a>
 8010a70:	4ba3      	ldr	r3, [pc, #652]	; (8010d00 <_dtoa_r+0x998>)
 8010a72:	2200      	movs	r2, #0
 8010a74:	f7ef fdd0 	bl	8000618 <__aeabi_dmul>
 8010a78:	2200      	movs	r2, #0
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	4606      	mov	r6, r0
 8010a7e:	460f      	mov	r7, r1
 8010a80:	f7f0 f832 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a84:	2800      	cmp	r0, #0
 8010a86:	d09e      	beq.n	80109c6 <_dtoa_r+0x65e>
 8010a88:	e7d0      	b.n	8010a2c <_dtoa_r+0x6c4>
 8010a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a8c:	2a00      	cmp	r2, #0
 8010a8e:	f000 80ca 	beq.w	8010c26 <_dtoa_r+0x8be>
 8010a92:	9a07      	ldr	r2, [sp, #28]
 8010a94:	2a01      	cmp	r2, #1
 8010a96:	f300 80ad 	bgt.w	8010bf4 <_dtoa_r+0x88c>
 8010a9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a9c:	2a00      	cmp	r2, #0
 8010a9e:	f000 80a5 	beq.w	8010bec <_dtoa_r+0x884>
 8010aa2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010aa6:	9e08      	ldr	r6, [sp, #32]
 8010aa8:	9d05      	ldr	r5, [sp, #20]
 8010aaa:	9a05      	ldr	r2, [sp, #20]
 8010aac:	441a      	add	r2, r3
 8010aae:	9205      	str	r2, [sp, #20]
 8010ab0:	9a06      	ldr	r2, [sp, #24]
 8010ab2:	2101      	movs	r1, #1
 8010ab4:	441a      	add	r2, r3
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	9206      	str	r2, [sp, #24]
 8010aba:	f000 fc3d 	bl	8011338 <__i2b>
 8010abe:	4607      	mov	r7, r0
 8010ac0:	b165      	cbz	r5, 8010adc <_dtoa_r+0x774>
 8010ac2:	9b06      	ldr	r3, [sp, #24]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	dd09      	ble.n	8010adc <_dtoa_r+0x774>
 8010ac8:	42ab      	cmp	r3, r5
 8010aca:	9a05      	ldr	r2, [sp, #20]
 8010acc:	bfa8      	it	ge
 8010ace:	462b      	movge	r3, r5
 8010ad0:	1ad2      	subs	r2, r2, r3
 8010ad2:	9205      	str	r2, [sp, #20]
 8010ad4:	9a06      	ldr	r2, [sp, #24]
 8010ad6:	1aed      	subs	r5, r5, r3
 8010ad8:	1ad3      	subs	r3, r2, r3
 8010ada:	9306      	str	r3, [sp, #24]
 8010adc:	9b08      	ldr	r3, [sp, #32]
 8010ade:	b1f3      	cbz	r3, 8010b1e <_dtoa_r+0x7b6>
 8010ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	f000 80a3 	beq.w	8010c2e <_dtoa_r+0x8c6>
 8010ae8:	2e00      	cmp	r6, #0
 8010aea:	dd10      	ble.n	8010b0e <_dtoa_r+0x7a6>
 8010aec:	4639      	mov	r1, r7
 8010aee:	4632      	mov	r2, r6
 8010af0:	4620      	mov	r0, r4
 8010af2:	f000 fce1 	bl	80114b8 <__pow5mult>
 8010af6:	4652      	mov	r2, sl
 8010af8:	4601      	mov	r1, r0
 8010afa:	4607      	mov	r7, r0
 8010afc:	4620      	mov	r0, r4
 8010afe:	f000 fc31 	bl	8011364 <__multiply>
 8010b02:	4651      	mov	r1, sl
 8010b04:	4680      	mov	r8, r0
 8010b06:	4620      	mov	r0, r4
 8010b08:	f000 fb60 	bl	80111cc <_Bfree>
 8010b0c:	46c2      	mov	sl, r8
 8010b0e:	9b08      	ldr	r3, [sp, #32]
 8010b10:	1b9a      	subs	r2, r3, r6
 8010b12:	d004      	beq.n	8010b1e <_dtoa_r+0x7b6>
 8010b14:	4651      	mov	r1, sl
 8010b16:	4620      	mov	r0, r4
 8010b18:	f000 fcce 	bl	80114b8 <__pow5mult>
 8010b1c:	4682      	mov	sl, r0
 8010b1e:	2101      	movs	r1, #1
 8010b20:	4620      	mov	r0, r4
 8010b22:	f000 fc09 	bl	8011338 <__i2b>
 8010b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	4606      	mov	r6, r0
 8010b2c:	f340 8081 	ble.w	8010c32 <_dtoa_r+0x8ca>
 8010b30:	461a      	mov	r2, r3
 8010b32:	4601      	mov	r1, r0
 8010b34:	4620      	mov	r0, r4
 8010b36:	f000 fcbf 	bl	80114b8 <__pow5mult>
 8010b3a:	9b07      	ldr	r3, [sp, #28]
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	4606      	mov	r6, r0
 8010b40:	dd7a      	ble.n	8010c38 <_dtoa_r+0x8d0>
 8010b42:	f04f 0800 	mov.w	r8, #0
 8010b46:	6933      	ldr	r3, [r6, #16]
 8010b48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010b4c:	6918      	ldr	r0, [r3, #16]
 8010b4e:	f000 fba5 	bl	801129c <__hi0bits>
 8010b52:	f1c0 0020 	rsb	r0, r0, #32
 8010b56:	9b06      	ldr	r3, [sp, #24]
 8010b58:	4418      	add	r0, r3
 8010b5a:	f010 001f 	ands.w	r0, r0, #31
 8010b5e:	f000 8094 	beq.w	8010c8a <_dtoa_r+0x922>
 8010b62:	f1c0 0320 	rsb	r3, r0, #32
 8010b66:	2b04      	cmp	r3, #4
 8010b68:	f340 8085 	ble.w	8010c76 <_dtoa_r+0x90e>
 8010b6c:	9b05      	ldr	r3, [sp, #20]
 8010b6e:	f1c0 001c 	rsb	r0, r0, #28
 8010b72:	4403      	add	r3, r0
 8010b74:	9305      	str	r3, [sp, #20]
 8010b76:	9b06      	ldr	r3, [sp, #24]
 8010b78:	4403      	add	r3, r0
 8010b7a:	4405      	add	r5, r0
 8010b7c:	9306      	str	r3, [sp, #24]
 8010b7e:	9b05      	ldr	r3, [sp, #20]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	dd05      	ble.n	8010b90 <_dtoa_r+0x828>
 8010b84:	4651      	mov	r1, sl
 8010b86:	461a      	mov	r2, r3
 8010b88:	4620      	mov	r0, r4
 8010b8a:	f000 fcef 	bl	801156c <__lshift>
 8010b8e:	4682      	mov	sl, r0
 8010b90:	9b06      	ldr	r3, [sp, #24]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	dd05      	ble.n	8010ba2 <_dtoa_r+0x83a>
 8010b96:	4631      	mov	r1, r6
 8010b98:	461a      	mov	r2, r3
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f000 fce6 	bl	801156c <__lshift>
 8010ba0:	4606      	mov	r6, r0
 8010ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d072      	beq.n	8010c8e <_dtoa_r+0x926>
 8010ba8:	4631      	mov	r1, r6
 8010baa:	4650      	mov	r0, sl
 8010bac:	f000 fd4a 	bl	8011644 <__mcmp>
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	da6c      	bge.n	8010c8e <_dtoa_r+0x926>
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	4651      	mov	r1, sl
 8010bb8:	220a      	movs	r2, #10
 8010bba:	4620      	mov	r0, r4
 8010bbc:	f000 fb28 	bl	8011210 <__multadd>
 8010bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010bc6:	4682      	mov	sl, r0
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	f000 81b0 	beq.w	8010f2e <_dtoa_r+0xbc6>
 8010bce:	2300      	movs	r3, #0
 8010bd0:	4639      	mov	r1, r7
 8010bd2:	220a      	movs	r2, #10
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f000 fb1b 	bl	8011210 <__multadd>
 8010bda:	9b01      	ldr	r3, [sp, #4]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	4607      	mov	r7, r0
 8010be0:	f300 8096 	bgt.w	8010d10 <_dtoa_r+0x9a8>
 8010be4:	9b07      	ldr	r3, [sp, #28]
 8010be6:	2b02      	cmp	r3, #2
 8010be8:	dc59      	bgt.n	8010c9e <_dtoa_r+0x936>
 8010bea:	e091      	b.n	8010d10 <_dtoa_r+0x9a8>
 8010bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010bee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010bf2:	e758      	b.n	8010aa6 <_dtoa_r+0x73e>
 8010bf4:	9b04      	ldr	r3, [sp, #16]
 8010bf6:	1e5e      	subs	r6, r3, #1
 8010bf8:	9b08      	ldr	r3, [sp, #32]
 8010bfa:	42b3      	cmp	r3, r6
 8010bfc:	bfbf      	itttt	lt
 8010bfe:	9b08      	ldrlt	r3, [sp, #32]
 8010c00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010c02:	9608      	strlt	r6, [sp, #32]
 8010c04:	1af3      	sublt	r3, r6, r3
 8010c06:	bfb4      	ite	lt
 8010c08:	18d2      	addlt	r2, r2, r3
 8010c0a:	1b9e      	subge	r6, r3, r6
 8010c0c:	9b04      	ldr	r3, [sp, #16]
 8010c0e:	bfbc      	itt	lt
 8010c10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010c12:	2600      	movlt	r6, #0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	bfb7      	itett	lt
 8010c18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010c1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010c20:	1a9d      	sublt	r5, r3, r2
 8010c22:	2300      	movlt	r3, #0
 8010c24:	e741      	b.n	8010aaa <_dtoa_r+0x742>
 8010c26:	9e08      	ldr	r6, [sp, #32]
 8010c28:	9d05      	ldr	r5, [sp, #20]
 8010c2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010c2c:	e748      	b.n	8010ac0 <_dtoa_r+0x758>
 8010c2e:	9a08      	ldr	r2, [sp, #32]
 8010c30:	e770      	b.n	8010b14 <_dtoa_r+0x7ac>
 8010c32:	9b07      	ldr	r3, [sp, #28]
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	dc19      	bgt.n	8010c6c <_dtoa_r+0x904>
 8010c38:	9b02      	ldr	r3, [sp, #8]
 8010c3a:	b9bb      	cbnz	r3, 8010c6c <_dtoa_r+0x904>
 8010c3c:	9b03      	ldr	r3, [sp, #12]
 8010c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c42:	b99b      	cbnz	r3, 8010c6c <_dtoa_r+0x904>
 8010c44:	9b03      	ldr	r3, [sp, #12]
 8010c46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c4a:	0d1b      	lsrs	r3, r3, #20
 8010c4c:	051b      	lsls	r3, r3, #20
 8010c4e:	b183      	cbz	r3, 8010c72 <_dtoa_r+0x90a>
 8010c50:	9b05      	ldr	r3, [sp, #20]
 8010c52:	3301      	adds	r3, #1
 8010c54:	9305      	str	r3, [sp, #20]
 8010c56:	9b06      	ldr	r3, [sp, #24]
 8010c58:	3301      	adds	r3, #1
 8010c5a:	9306      	str	r3, [sp, #24]
 8010c5c:	f04f 0801 	mov.w	r8, #1
 8010c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	f47f af6f 	bne.w	8010b46 <_dtoa_r+0x7de>
 8010c68:	2001      	movs	r0, #1
 8010c6a:	e774      	b.n	8010b56 <_dtoa_r+0x7ee>
 8010c6c:	f04f 0800 	mov.w	r8, #0
 8010c70:	e7f6      	b.n	8010c60 <_dtoa_r+0x8f8>
 8010c72:	4698      	mov	r8, r3
 8010c74:	e7f4      	b.n	8010c60 <_dtoa_r+0x8f8>
 8010c76:	d082      	beq.n	8010b7e <_dtoa_r+0x816>
 8010c78:	9a05      	ldr	r2, [sp, #20]
 8010c7a:	331c      	adds	r3, #28
 8010c7c:	441a      	add	r2, r3
 8010c7e:	9205      	str	r2, [sp, #20]
 8010c80:	9a06      	ldr	r2, [sp, #24]
 8010c82:	441a      	add	r2, r3
 8010c84:	441d      	add	r5, r3
 8010c86:	9206      	str	r2, [sp, #24]
 8010c88:	e779      	b.n	8010b7e <_dtoa_r+0x816>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	e7f4      	b.n	8010c78 <_dtoa_r+0x910>
 8010c8e:	9b04      	ldr	r3, [sp, #16]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	dc37      	bgt.n	8010d04 <_dtoa_r+0x99c>
 8010c94:	9b07      	ldr	r3, [sp, #28]
 8010c96:	2b02      	cmp	r3, #2
 8010c98:	dd34      	ble.n	8010d04 <_dtoa_r+0x99c>
 8010c9a:	9b04      	ldr	r3, [sp, #16]
 8010c9c:	9301      	str	r3, [sp, #4]
 8010c9e:	9b01      	ldr	r3, [sp, #4]
 8010ca0:	b963      	cbnz	r3, 8010cbc <_dtoa_r+0x954>
 8010ca2:	4631      	mov	r1, r6
 8010ca4:	2205      	movs	r2, #5
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	f000 fab2 	bl	8011210 <__multadd>
 8010cac:	4601      	mov	r1, r0
 8010cae:	4606      	mov	r6, r0
 8010cb0:	4650      	mov	r0, sl
 8010cb2:	f000 fcc7 	bl	8011644 <__mcmp>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	f73f adbb 	bgt.w	8010832 <_dtoa_r+0x4ca>
 8010cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cbe:	9d00      	ldr	r5, [sp, #0]
 8010cc0:	ea6f 0b03 	mvn.w	fp, r3
 8010cc4:	f04f 0800 	mov.w	r8, #0
 8010cc8:	4631      	mov	r1, r6
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f000 fa7e 	bl	80111cc <_Bfree>
 8010cd0:	2f00      	cmp	r7, #0
 8010cd2:	f43f aeab 	beq.w	8010a2c <_dtoa_r+0x6c4>
 8010cd6:	f1b8 0f00 	cmp.w	r8, #0
 8010cda:	d005      	beq.n	8010ce8 <_dtoa_r+0x980>
 8010cdc:	45b8      	cmp	r8, r7
 8010cde:	d003      	beq.n	8010ce8 <_dtoa_r+0x980>
 8010ce0:	4641      	mov	r1, r8
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	f000 fa72 	bl	80111cc <_Bfree>
 8010ce8:	4639      	mov	r1, r7
 8010cea:	4620      	mov	r0, r4
 8010cec:	f000 fa6e 	bl	80111cc <_Bfree>
 8010cf0:	e69c      	b.n	8010a2c <_dtoa_r+0x6c4>
 8010cf2:	2600      	movs	r6, #0
 8010cf4:	4637      	mov	r7, r6
 8010cf6:	e7e1      	b.n	8010cbc <_dtoa_r+0x954>
 8010cf8:	46bb      	mov	fp, r7
 8010cfa:	4637      	mov	r7, r6
 8010cfc:	e599      	b.n	8010832 <_dtoa_r+0x4ca>
 8010cfe:	bf00      	nop
 8010d00:	40240000 	.word	0x40240000
 8010d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	f000 80c8 	beq.w	8010e9c <_dtoa_r+0xb34>
 8010d0c:	9b04      	ldr	r3, [sp, #16]
 8010d0e:	9301      	str	r3, [sp, #4]
 8010d10:	2d00      	cmp	r5, #0
 8010d12:	dd05      	ble.n	8010d20 <_dtoa_r+0x9b8>
 8010d14:	4639      	mov	r1, r7
 8010d16:	462a      	mov	r2, r5
 8010d18:	4620      	mov	r0, r4
 8010d1a:	f000 fc27 	bl	801156c <__lshift>
 8010d1e:	4607      	mov	r7, r0
 8010d20:	f1b8 0f00 	cmp.w	r8, #0
 8010d24:	d05b      	beq.n	8010dde <_dtoa_r+0xa76>
 8010d26:	6879      	ldr	r1, [r7, #4]
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f000 fa0f 	bl	801114c <_Balloc>
 8010d2e:	4605      	mov	r5, r0
 8010d30:	b928      	cbnz	r0, 8010d3e <_dtoa_r+0x9d6>
 8010d32:	4b83      	ldr	r3, [pc, #524]	; (8010f40 <_dtoa_r+0xbd8>)
 8010d34:	4602      	mov	r2, r0
 8010d36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010d3a:	f7ff bb2e 	b.w	801039a <_dtoa_r+0x32>
 8010d3e:	693a      	ldr	r2, [r7, #16]
 8010d40:	3202      	adds	r2, #2
 8010d42:	0092      	lsls	r2, r2, #2
 8010d44:	f107 010c 	add.w	r1, r7, #12
 8010d48:	300c      	adds	r0, #12
 8010d4a:	f7ff fa74 	bl	8010236 <memcpy>
 8010d4e:	2201      	movs	r2, #1
 8010d50:	4629      	mov	r1, r5
 8010d52:	4620      	mov	r0, r4
 8010d54:	f000 fc0a 	bl	801156c <__lshift>
 8010d58:	9b00      	ldr	r3, [sp, #0]
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	9304      	str	r3, [sp, #16]
 8010d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d62:	4413      	add	r3, r2
 8010d64:	9308      	str	r3, [sp, #32]
 8010d66:	9b02      	ldr	r3, [sp, #8]
 8010d68:	f003 0301 	and.w	r3, r3, #1
 8010d6c:	46b8      	mov	r8, r7
 8010d6e:	9306      	str	r3, [sp, #24]
 8010d70:	4607      	mov	r7, r0
 8010d72:	9b04      	ldr	r3, [sp, #16]
 8010d74:	4631      	mov	r1, r6
 8010d76:	3b01      	subs	r3, #1
 8010d78:	4650      	mov	r0, sl
 8010d7a:	9301      	str	r3, [sp, #4]
 8010d7c:	f7ff fa69 	bl	8010252 <quorem>
 8010d80:	4641      	mov	r1, r8
 8010d82:	9002      	str	r0, [sp, #8]
 8010d84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010d88:	4650      	mov	r0, sl
 8010d8a:	f000 fc5b 	bl	8011644 <__mcmp>
 8010d8e:	463a      	mov	r2, r7
 8010d90:	9005      	str	r0, [sp, #20]
 8010d92:	4631      	mov	r1, r6
 8010d94:	4620      	mov	r0, r4
 8010d96:	f000 fc71 	bl	801167c <__mdiff>
 8010d9a:	68c2      	ldr	r2, [r0, #12]
 8010d9c:	4605      	mov	r5, r0
 8010d9e:	bb02      	cbnz	r2, 8010de2 <_dtoa_r+0xa7a>
 8010da0:	4601      	mov	r1, r0
 8010da2:	4650      	mov	r0, sl
 8010da4:	f000 fc4e 	bl	8011644 <__mcmp>
 8010da8:	4602      	mov	r2, r0
 8010daa:	4629      	mov	r1, r5
 8010dac:	4620      	mov	r0, r4
 8010dae:	9209      	str	r2, [sp, #36]	; 0x24
 8010db0:	f000 fa0c 	bl	80111cc <_Bfree>
 8010db4:	9b07      	ldr	r3, [sp, #28]
 8010db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010db8:	9d04      	ldr	r5, [sp, #16]
 8010dba:	ea43 0102 	orr.w	r1, r3, r2
 8010dbe:	9b06      	ldr	r3, [sp, #24]
 8010dc0:	4319      	orrs	r1, r3
 8010dc2:	d110      	bne.n	8010de6 <_dtoa_r+0xa7e>
 8010dc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010dc8:	d029      	beq.n	8010e1e <_dtoa_r+0xab6>
 8010dca:	9b05      	ldr	r3, [sp, #20]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	dd02      	ble.n	8010dd6 <_dtoa_r+0xa6e>
 8010dd0:	9b02      	ldr	r3, [sp, #8]
 8010dd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010dd6:	9b01      	ldr	r3, [sp, #4]
 8010dd8:	f883 9000 	strb.w	r9, [r3]
 8010ddc:	e774      	b.n	8010cc8 <_dtoa_r+0x960>
 8010dde:	4638      	mov	r0, r7
 8010de0:	e7ba      	b.n	8010d58 <_dtoa_r+0x9f0>
 8010de2:	2201      	movs	r2, #1
 8010de4:	e7e1      	b.n	8010daa <_dtoa_r+0xa42>
 8010de6:	9b05      	ldr	r3, [sp, #20]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	db04      	blt.n	8010df6 <_dtoa_r+0xa8e>
 8010dec:	9907      	ldr	r1, [sp, #28]
 8010dee:	430b      	orrs	r3, r1
 8010df0:	9906      	ldr	r1, [sp, #24]
 8010df2:	430b      	orrs	r3, r1
 8010df4:	d120      	bne.n	8010e38 <_dtoa_r+0xad0>
 8010df6:	2a00      	cmp	r2, #0
 8010df8:	dded      	ble.n	8010dd6 <_dtoa_r+0xa6e>
 8010dfa:	4651      	mov	r1, sl
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f000 fbb4 	bl	801156c <__lshift>
 8010e04:	4631      	mov	r1, r6
 8010e06:	4682      	mov	sl, r0
 8010e08:	f000 fc1c 	bl	8011644 <__mcmp>
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	dc03      	bgt.n	8010e18 <_dtoa_r+0xab0>
 8010e10:	d1e1      	bne.n	8010dd6 <_dtoa_r+0xa6e>
 8010e12:	f019 0f01 	tst.w	r9, #1
 8010e16:	d0de      	beq.n	8010dd6 <_dtoa_r+0xa6e>
 8010e18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010e1c:	d1d8      	bne.n	8010dd0 <_dtoa_r+0xa68>
 8010e1e:	9a01      	ldr	r2, [sp, #4]
 8010e20:	2339      	movs	r3, #57	; 0x39
 8010e22:	7013      	strb	r3, [r2, #0]
 8010e24:	462b      	mov	r3, r5
 8010e26:	461d      	mov	r5, r3
 8010e28:	3b01      	subs	r3, #1
 8010e2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010e2e:	2a39      	cmp	r2, #57	; 0x39
 8010e30:	d06c      	beq.n	8010f0c <_dtoa_r+0xba4>
 8010e32:	3201      	adds	r2, #1
 8010e34:	701a      	strb	r2, [r3, #0]
 8010e36:	e747      	b.n	8010cc8 <_dtoa_r+0x960>
 8010e38:	2a00      	cmp	r2, #0
 8010e3a:	dd07      	ble.n	8010e4c <_dtoa_r+0xae4>
 8010e3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010e40:	d0ed      	beq.n	8010e1e <_dtoa_r+0xab6>
 8010e42:	9a01      	ldr	r2, [sp, #4]
 8010e44:	f109 0301 	add.w	r3, r9, #1
 8010e48:	7013      	strb	r3, [r2, #0]
 8010e4a:	e73d      	b.n	8010cc8 <_dtoa_r+0x960>
 8010e4c:	9b04      	ldr	r3, [sp, #16]
 8010e4e:	9a08      	ldr	r2, [sp, #32]
 8010e50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010e54:	4293      	cmp	r3, r2
 8010e56:	d043      	beq.n	8010ee0 <_dtoa_r+0xb78>
 8010e58:	4651      	mov	r1, sl
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	220a      	movs	r2, #10
 8010e5e:	4620      	mov	r0, r4
 8010e60:	f000 f9d6 	bl	8011210 <__multadd>
 8010e64:	45b8      	cmp	r8, r7
 8010e66:	4682      	mov	sl, r0
 8010e68:	f04f 0300 	mov.w	r3, #0
 8010e6c:	f04f 020a 	mov.w	r2, #10
 8010e70:	4641      	mov	r1, r8
 8010e72:	4620      	mov	r0, r4
 8010e74:	d107      	bne.n	8010e86 <_dtoa_r+0xb1e>
 8010e76:	f000 f9cb 	bl	8011210 <__multadd>
 8010e7a:	4680      	mov	r8, r0
 8010e7c:	4607      	mov	r7, r0
 8010e7e:	9b04      	ldr	r3, [sp, #16]
 8010e80:	3301      	adds	r3, #1
 8010e82:	9304      	str	r3, [sp, #16]
 8010e84:	e775      	b.n	8010d72 <_dtoa_r+0xa0a>
 8010e86:	f000 f9c3 	bl	8011210 <__multadd>
 8010e8a:	4639      	mov	r1, r7
 8010e8c:	4680      	mov	r8, r0
 8010e8e:	2300      	movs	r3, #0
 8010e90:	220a      	movs	r2, #10
 8010e92:	4620      	mov	r0, r4
 8010e94:	f000 f9bc 	bl	8011210 <__multadd>
 8010e98:	4607      	mov	r7, r0
 8010e9a:	e7f0      	b.n	8010e7e <_dtoa_r+0xb16>
 8010e9c:	9b04      	ldr	r3, [sp, #16]
 8010e9e:	9301      	str	r3, [sp, #4]
 8010ea0:	9d00      	ldr	r5, [sp, #0]
 8010ea2:	4631      	mov	r1, r6
 8010ea4:	4650      	mov	r0, sl
 8010ea6:	f7ff f9d4 	bl	8010252 <quorem>
 8010eaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010eae:	9b00      	ldr	r3, [sp, #0]
 8010eb0:	f805 9b01 	strb.w	r9, [r5], #1
 8010eb4:	1aea      	subs	r2, r5, r3
 8010eb6:	9b01      	ldr	r3, [sp, #4]
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	dd07      	ble.n	8010ecc <_dtoa_r+0xb64>
 8010ebc:	4651      	mov	r1, sl
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	220a      	movs	r2, #10
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f000 f9a4 	bl	8011210 <__multadd>
 8010ec8:	4682      	mov	sl, r0
 8010eca:	e7ea      	b.n	8010ea2 <_dtoa_r+0xb3a>
 8010ecc:	9b01      	ldr	r3, [sp, #4]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	bfc8      	it	gt
 8010ed2:	461d      	movgt	r5, r3
 8010ed4:	9b00      	ldr	r3, [sp, #0]
 8010ed6:	bfd8      	it	le
 8010ed8:	2501      	movle	r5, #1
 8010eda:	441d      	add	r5, r3
 8010edc:	f04f 0800 	mov.w	r8, #0
 8010ee0:	4651      	mov	r1, sl
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	f000 fb41 	bl	801156c <__lshift>
 8010eea:	4631      	mov	r1, r6
 8010eec:	4682      	mov	sl, r0
 8010eee:	f000 fba9 	bl	8011644 <__mcmp>
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	dc96      	bgt.n	8010e24 <_dtoa_r+0xabc>
 8010ef6:	d102      	bne.n	8010efe <_dtoa_r+0xb96>
 8010ef8:	f019 0f01 	tst.w	r9, #1
 8010efc:	d192      	bne.n	8010e24 <_dtoa_r+0xabc>
 8010efe:	462b      	mov	r3, r5
 8010f00:	461d      	mov	r5, r3
 8010f02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f06:	2a30      	cmp	r2, #48	; 0x30
 8010f08:	d0fa      	beq.n	8010f00 <_dtoa_r+0xb98>
 8010f0a:	e6dd      	b.n	8010cc8 <_dtoa_r+0x960>
 8010f0c:	9a00      	ldr	r2, [sp, #0]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d189      	bne.n	8010e26 <_dtoa_r+0xabe>
 8010f12:	f10b 0b01 	add.w	fp, fp, #1
 8010f16:	2331      	movs	r3, #49	; 0x31
 8010f18:	e796      	b.n	8010e48 <_dtoa_r+0xae0>
 8010f1a:	4b0a      	ldr	r3, [pc, #40]	; (8010f44 <_dtoa_r+0xbdc>)
 8010f1c:	f7ff ba99 	b.w	8010452 <_dtoa_r+0xea>
 8010f20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f47f aa6d 	bne.w	8010402 <_dtoa_r+0x9a>
 8010f28:	4b07      	ldr	r3, [pc, #28]	; (8010f48 <_dtoa_r+0xbe0>)
 8010f2a:	f7ff ba92 	b.w	8010452 <_dtoa_r+0xea>
 8010f2e:	9b01      	ldr	r3, [sp, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	dcb5      	bgt.n	8010ea0 <_dtoa_r+0xb38>
 8010f34:	9b07      	ldr	r3, [sp, #28]
 8010f36:	2b02      	cmp	r3, #2
 8010f38:	f73f aeb1 	bgt.w	8010c9e <_dtoa_r+0x936>
 8010f3c:	e7b0      	b.n	8010ea0 <_dtoa_r+0xb38>
 8010f3e:	bf00      	nop
 8010f40:	08013fcc 	.word	0x08013fcc
 8010f44:	08013f2c 	.word	0x08013f2c
 8010f48:	08013f50 	.word	0x08013f50

08010f4c <_free_r>:
 8010f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f4e:	2900      	cmp	r1, #0
 8010f50:	d044      	beq.n	8010fdc <_free_r+0x90>
 8010f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f56:	9001      	str	r0, [sp, #4]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8010f5e:	bfb8      	it	lt
 8010f60:	18e4      	addlt	r4, r4, r3
 8010f62:	f000 f8e7 	bl	8011134 <__malloc_lock>
 8010f66:	4a1e      	ldr	r2, [pc, #120]	; (8010fe0 <_free_r+0x94>)
 8010f68:	9801      	ldr	r0, [sp, #4]
 8010f6a:	6813      	ldr	r3, [r2, #0]
 8010f6c:	b933      	cbnz	r3, 8010f7c <_free_r+0x30>
 8010f6e:	6063      	str	r3, [r4, #4]
 8010f70:	6014      	str	r4, [r2, #0]
 8010f72:	b003      	add	sp, #12
 8010f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f78:	f000 b8e2 	b.w	8011140 <__malloc_unlock>
 8010f7c:	42a3      	cmp	r3, r4
 8010f7e:	d908      	bls.n	8010f92 <_free_r+0x46>
 8010f80:	6825      	ldr	r5, [r4, #0]
 8010f82:	1961      	adds	r1, r4, r5
 8010f84:	428b      	cmp	r3, r1
 8010f86:	bf01      	itttt	eq
 8010f88:	6819      	ldreq	r1, [r3, #0]
 8010f8a:	685b      	ldreq	r3, [r3, #4]
 8010f8c:	1949      	addeq	r1, r1, r5
 8010f8e:	6021      	streq	r1, [r4, #0]
 8010f90:	e7ed      	b.n	8010f6e <_free_r+0x22>
 8010f92:	461a      	mov	r2, r3
 8010f94:	685b      	ldr	r3, [r3, #4]
 8010f96:	b10b      	cbz	r3, 8010f9c <_free_r+0x50>
 8010f98:	42a3      	cmp	r3, r4
 8010f9a:	d9fa      	bls.n	8010f92 <_free_r+0x46>
 8010f9c:	6811      	ldr	r1, [r2, #0]
 8010f9e:	1855      	adds	r5, r2, r1
 8010fa0:	42a5      	cmp	r5, r4
 8010fa2:	d10b      	bne.n	8010fbc <_free_r+0x70>
 8010fa4:	6824      	ldr	r4, [r4, #0]
 8010fa6:	4421      	add	r1, r4
 8010fa8:	1854      	adds	r4, r2, r1
 8010faa:	42a3      	cmp	r3, r4
 8010fac:	6011      	str	r1, [r2, #0]
 8010fae:	d1e0      	bne.n	8010f72 <_free_r+0x26>
 8010fb0:	681c      	ldr	r4, [r3, #0]
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	6053      	str	r3, [r2, #4]
 8010fb6:	440c      	add	r4, r1
 8010fb8:	6014      	str	r4, [r2, #0]
 8010fba:	e7da      	b.n	8010f72 <_free_r+0x26>
 8010fbc:	d902      	bls.n	8010fc4 <_free_r+0x78>
 8010fbe:	230c      	movs	r3, #12
 8010fc0:	6003      	str	r3, [r0, #0]
 8010fc2:	e7d6      	b.n	8010f72 <_free_r+0x26>
 8010fc4:	6825      	ldr	r5, [r4, #0]
 8010fc6:	1961      	adds	r1, r4, r5
 8010fc8:	428b      	cmp	r3, r1
 8010fca:	bf04      	itt	eq
 8010fcc:	6819      	ldreq	r1, [r3, #0]
 8010fce:	685b      	ldreq	r3, [r3, #4]
 8010fd0:	6063      	str	r3, [r4, #4]
 8010fd2:	bf04      	itt	eq
 8010fd4:	1949      	addeq	r1, r1, r5
 8010fd6:	6021      	streq	r1, [r4, #0]
 8010fd8:	6054      	str	r4, [r2, #4]
 8010fda:	e7ca      	b.n	8010f72 <_free_r+0x26>
 8010fdc:	b003      	add	sp, #12
 8010fde:	bd30      	pop	{r4, r5, pc}
 8010fe0:	20006e04 	.word	0x20006e04

08010fe4 <malloc>:
 8010fe4:	4b02      	ldr	r3, [pc, #8]	; (8010ff0 <malloc+0xc>)
 8010fe6:	4601      	mov	r1, r0
 8010fe8:	6818      	ldr	r0, [r3, #0]
 8010fea:	f000 b823 	b.w	8011034 <_malloc_r>
 8010fee:	bf00      	nop
 8010ff0:	200001d4 	.word	0x200001d4

08010ff4 <sbrk_aligned>:
 8010ff4:	b570      	push	{r4, r5, r6, lr}
 8010ff6:	4e0e      	ldr	r6, [pc, #56]	; (8011030 <sbrk_aligned+0x3c>)
 8010ff8:	460c      	mov	r4, r1
 8010ffa:	6831      	ldr	r1, [r6, #0]
 8010ffc:	4605      	mov	r5, r0
 8010ffe:	b911      	cbnz	r1, 8011006 <sbrk_aligned+0x12>
 8011000:	f000 fe40 	bl	8011c84 <_sbrk_r>
 8011004:	6030      	str	r0, [r6, #0]
 8011006:	4621      	mov	r1, r4
 8011008:	4628      	mov	r0, r5
 801100a:	f000 fe3b 	bl	8011c84 <_sbrk_r>
 801100e:	1c43      	adds	r3, r0, #1
 8011010:	d00a      	beq.n	8011028 <sbrk_aligned+0x34>
 8011012:	1cc4      	adds	r4, r0, #3
 8011014:	f024 0403 	bic.w	r4, r4, #3
 8011018:	42a0      	cmp	r0, r4
 801101a:	d007      	beq.n	801102c <sbrk_aligned+0x38>
 801101c:	1a21      	subs	r1, r4, r0
 801101e:	4628      	mov	r0, r5
 8011020:	f000 fe30 	bl	8011c84 <_sbrk_r>
 8011024:	3001      	adds	r0, #1
 8011026:	d101      	bne.n	801102c <sbrk_aligned+0x38>
 8011028:	f04f 34ff 	mov.w	r4, #4294967295
 801102c:	4620      	mov	r0, r4
 801102e:	bd70      	pop	{r4, r5, r6, pc}
 8011030:	20006e08 	.word	0x20006e08

08011034 <_malloc_r>:
 8011034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011038:	1ccd      	adds	r5, r1, #3
 801103a:	f025 0503 	bic.w	r5, r5, #3
 801103e:	3508      	adds	r5, #8
 8011040:	2d0c      	cmp	r5, #12
 8011042:	bf38      	it	cc
 8011044:	250c      	movcc	r5, #12
 8011046:	2d00      	cmp	r5, #0
 8011048:	4607      	mov	r7, r0
 801104a:	db01      	blt.n	8011050 <_malloc_r+0x1c>
 801104c:	42a9      	cmp	r1, r5
 801104e:	d905      	bls.n	801105c <_malloc_r+0x28>
 8011050:	230c      	movs	r3, #12
 8011052:	603b      	str	r3, [r7, #0]
 8011054:	2600      	movs	r6, #0
 8011056:	4630      	mov	r0, r6
 8011058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801105c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011130 <_malloc_r+0xfc>
 8011060:	f000 f868 	bl	8011134 <__malloc_lock>
 8011064:	f8d8 3000 	ldr.w	r3, [r8]
 8011068:	461c      	mov	r4, r3
 801106a:	bb5c      	cbnz	r4, 80110c4 <_malloc_r+0x90>
 801106c:	4629      	mov	r1, r5
 801106e:	4638      	mov	r0, r7
 8011070:	f7ff ffc0 	bl	8010ff4 <sbrk_aligned>
 8011074:	1c43      	adds	r3, r0, #1
 8011076:	4604      	mov	r4, r0
 8011078:	d155      	bne.n	8011126 <_malloc_r+0xf2>
 801107a:	f8d8 4000 	ldr.w	r4, [r8]
 801107e:	4626      	mov	r6, r4
 8011080:	2e00      	cmp	r6, #0
 8011082:	d145      	bne.n	8011110 <_malloc_r+0xdc>
 8011084:	2c00      	cmp	r4, #0
 8011086:	d048      	beq.n	801111a <_malloc_r+0xe6>
 8011088:	6823      	ldr	r3, [r4, #0]
 801108a:	4631      	mov	r1, r6
 801108c:	4638      	mov	r0, r7
 801108e:	eb04 0903 	add.w	r9, r4, r3
 8011092:	f000 fdf7 	bl	8011c84 <_sbrk_r>
 8011096:	4581      	cmp	r9, r0
 8011098:	d13f      	bne.n	801111a <_malloc_r+0xe6>
 801109a:	6821      	ldr	r1, [r4, #0]
 801109c:	1a6d      	subs	r5, r5, r1
 801109e:	4629      	mov	r1, r5
 80110a0:	4638      	mov	r0, r7
 80110a2:	f7ff ffa7 	bl	8010ff4 <sbrk_aligned>
 80110a6:	3001      	adds	r0, #1
 80110a8:	d037      	beq.n	801111a <_malloc_r+0xe6>
 80110aa:	6823      	ldr	r3, [r4, #0]
 80110ac:	442b      	add	r3, r5
 80110ae:	6023      	str	r3, [r4, #0]
 80110b0:	f8d8 3000 	ldr.w	r3, [r8]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d038      	beq.n	801112a <_malloc_r+0xf6>
 80110b8:	685a      	ldr	r2, [r3, #4]
 80110ba:	42a2      	cmp	r2, r4
 80110bc:	d12b      	bne.n	8011116 <_malloc_r+0xe2>
 80110be:	2200      	movs	r2, #0
 80110c0:	605a      	str	r2, [r3, #4]
 80110c2:	e00f      	b.n	80110e4 <_malloc_r+0xb0>
 80110c4:	6822      	ldr	r2, [r4, #0]
 80110c6:	1b52      	subs	r2, r2, r5
 80110c8:	d41f      	bmi.n	801110a <_malloc_r+0xd6>
 80110ca:	2a0b      	cmp	r2, #11
 80110cc:	d917      	bls.n	80110fe <_malloc_r+0xca>
 80110ce:	1961      	adds	r1, r4, r5
 80110d0:	42a3      	cmp	r3, r4
 80110d2:	6025      	str	r5, [r4, #0]
 80110d4:	bf18      	it	ne
 80110d6:	6059      	strne	r1, [r3, #4]
 80110d8:	6863      	ldr	r3, [r4, #4]
 80110da:	bf08      	it	eq
 80110dc:	f8c8 1000 	streq.w	r1, [r8]
 80110e0:	5162      	str	r2, [r4, r5]
 80110e2:	604b      	str	r3, [r1, #4]
 80110e4:	4638      	mov	r0, r7
 80110e6:	f104 060b 	add.w	r6, r4, #11
 80110ea:	f000 f829 	bl	8011140 <__malloc_unlock>
 80110ee:	f026 0607 	bic.w	r6, r6, #7
 80110f2:	1d23      	adds	r3, r4, #4
 80110f4:	1af2      	subs	r2, r6, r3
 80110f6:	d0ae      	beq.n	8011056 <_malloc_r+0x22>
 80110f8:	1b9b      	subs	r3, r3, r6
 80110fa:	50a3      	str	r3, [r4, r2]
 80110fc:	e7ab      	b.n	8011056 <_malloc_r+0x22>
 80110fe:	42a3      	cmp	r3, r4
 8011100:	6862      	ldr	r2, [r4, #4]
 8011102:	d1dd      	bne.n	80110c0 <_malloc_r+0x8c>
 8011104:	f8c8 2000 	str.w	r2, [r8]
 8011108:	e7ec      	b.n	80110e4 <_malloc_r+0xb0>
 801110a:	4623      	mov	r3, r4
 801110c:	6864      	ldr	r4, [r4, #4]
 801110e:	e7ac      	b.n	801106a <_malloc_r+0x36>
 8011110:	4634      	mov	r4, r6
 8011112:	6876      	ldr	r6, [r6, #4]
 8011114:	e7b4      	b.n	8011080 <_malloc_r+0x4c>
 8011116:	4613      	mov	r3, r2
 8011118:	e7cc      	b.n	80110b4 <_malloc_r+0x80>
 801111a:	230c      	movs	r3, #12
 801111c:	603b      	str	r3, [r7, #0]
 801111e:	4638      	mov	r0, r7
 8011120:	f000 f80e 	bl	8011140 <__malloc_unlock>
 8011124:	e797      	b.n	8011056 <_malloc_r+0x22>
 8011126:	6025      	str	r5, [r4, #0]
 8011128:	e7dc      	b.n	80110e4 <_malloc_r+0xb0>
 801112a:	605b      	str	r3, [r3, #4]
 801112c:	deff      	udf	#255	; 0xff
 801112e:	bf00      	nop
 8011130:	20006e04 	.word	0x20006e04

08011134 <__malloc_lock>:
 8011134:	4801      	ldr	r0, [pc, #4]	; (801113c <__malloc_lock+0x8>)
 8011136:	f7ff b87c 	b.w	8010232 <__retarget_lock_acquire_recursive>
 801113a:	bf00      	nop
 801113c:	20006e00 	.word	0x20006e00

08011140 <__malloc_unlock>:
 8011140:	4801      	ldr	r0, [pc, #4]	; (8011148 <__malloc_unlock+0x8>)
 8011142:	f7ff b877 	b.w	8010234 <__retarget_lock_release_recursive>
 8011146:	bf00      	nop
 8011148:	20006e00 	.word	0x20006e00

0801114c <_Balloc>:
 801114c:	b570      	push	{r4, r5, r6, lr}
 801114e:	69c6      	ldr	r6, [r0, #28]
 8011150:	4604      	mov	r4, r0
 8011152:	460d      	mov	r5, r1
 8011154:	b976      	cbnz	r6, 8011174 <_Balloc+0x28>
 8011156:	2010      	movs	r0, #16
 8011158:	f7ff ff44 	bl	8010fe4 <malloc>
 801115c:	4602      	mov	r2, r0
 801115e:	61e0      	str	r0, [r4, #28]
 8011160:	b920      	cbnz	r0, 801116c <_Balloc+0x20>
 8011162:	4b18      	ldr	r3, [pc, #96]	; (80111c4 <_Balloc+0x78>)
 8011164:	4818      	ldr	r0, [pc, #96]	; (80111c8 <_Balloc+0x7c>)
 8011166:	216b      	movs	r1, #107	; 0x6b
 8011168:	f000 fd9c 	bl	8011ca4 <__assert_func>
 801116c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011170:	6006      	str	r6, [r0, #0]
 8011172:	60c6      	str	r6, [r0, #12]
 8011174:	69e6      	ldr	r6, [r4, #28]
 8011176:	68f3      	ldr	r3, [r6, #12]
 8011178:	b183      	cbz	r3, 801119c <_Balloc+0x50>
 801117a:	69e3      	ldr	r3, [r4, #28]
 801117c:	68db      	ldr	r3, [r3, #12]
 801117e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011182:	b9b8      	cbnz	r0, 80111b4 <_Balloc+0x68>
 8011184:	2101      	movs	r1, #1
 8011186:	fa01 f605 	lsl.w	r6, r1, r5
 801118a:	1d72      	adds	r2, r6, #5
 801118c:	0092      	lsls	r2, r2, #2
 801118e:	4620      	mov	r0, r4
 8011190:	f000 fda6 	bl	8011ce0 <_calloc_r>
 8011194:	b160      	cbz	r0, 80111b0 <_Balloc+0x64>
 8011196:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801119a:	e00e      	b.n	80111ba <_Balloc+0x6e>
 801119c:	2221      	movs	r2, #33	; 0x21
 801119e:	2104      	movs	r1, #4
 80111a0:	4620      	mov	r0, r4
 80111a2:	f000 fd9d 	bl	8011ce0 <_calloc_r>
 80111a6:	69e3      	ldr	r3, [r4, #28]
 80111a8:	60f0      	str	r0, [r6, #12]
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d1e4      	bne.n	801117a <_Balloc+0x2e>
 80111b0:	2000      	movs	r0, #0
 80111b2:	bd70      	pop	{r4, r5, r6, pc}
 80111b4:	6802      	ldr	r2, [r0, #0]
 80111b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80111ba:	2300      	movs	r3, #0
 80111bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111c0:	e7f7      	b.n	80111b2 <_Balloc+0x66>
 80111c2:	bf00      	nop
 80111c4:	08013f5d 	.word	0x08013f5d
 80111c8:	08013fdd 	.word	0x08013fdd

080111cc <_Bfree>:
 80111cc:	b570      	push	{r4, r5, r6, lr}
 80111ce:	69c6      	ldr	r6, [r0, #28]
 80111d0:	4605      	mov	r5, r0
 80111d2:	460c      	mov	r4, r1
 80111d4:	b976      	cbnz	r6, 80111f4 <_Bfree+0x28>
 80111d6:	2010      	movs	r0, #16
 80111d8:	f7ff ff04 	bl	8010fe4 <malloc>
 80111dc:	4602      	mov	r2, r0
 80111de:	61e8      	str	r0, [r5, #28]
 80111e0:	b920      	cbnz	r0, 80111ec <_Bfree+0x20>
 80111e2:	4b09      	ldr	r3, [pc, #36]	; (8011208 <_Bfree+0x3c>)
 80111e4:	4809      	ldr	r0, [pc, #36]	; (801120c <_Bfree+0x40>)
 80111e6:	218f      	movs	r1, #143	; 0x8f
 80111e8:	f000 fd5c 	bl	8011ca4 <__assert_func>
 80111ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111f0:	6006      	str	r6, [r0, #0]
 80111f2:	60c6      	str	r6, [r0, #12]
 80111f4:	b13c      	cbz	r4, 8011206 <_Bfree+0x3a>
 80111f6:	69eb      	ldr	r3, [r5, #28]
 80111f8:	6862      	ldr	r2, [r4, #4]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011200:	6021      	str	r1, [r4, #0]
 8011202:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011206:	bd70      	pop	{r4, r5, r6, pc}
 8011208:	08013f5d 	.word	0x08013f5d
 801120c:	08013fdd 	.word	0x08013fdd

08011210 <__multadd>:
 8011210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011214:	690d      	ldr	r5, [r1, #16]
 8011216:	4607      	mov	r7, r0
 8011218:	460c      	mov	r4, r1
 801121a:	461e      	mov	r6, r3
 801121c:	f101 0c14 	add.w	ip, r1, #20
 8011220:	2000      	movs	r0, #0
 8011222:	f8dc 3000 	ldr.w	r3, [ip]
 8011226:	b299      	uxth	r1, r3
 8011228:	fb02 6101 	mla	r1, r2, r1, r6
 801122c:	0c1e      	lsrs	r6, r3, #16
 801122e:	0c0b      	lsrs	r3, r1, #16
 8011230:	fb02 3306 	mla	r3, r2, r6, r3
 8011234:	b289      	uxth	r1, r1
 8011236:	3001      	adds	r0, #1
 8011238:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801123c:	4285      	cmp	r5, r0
 801123e:	f84c 1b04 	str.w	r1, [ip], #4
 8011242:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011246:	dcec      	bgt.n	8011222 <__multadd+0x12>
 8011248:	b30e      	cbz	r6, 801128e <__multadd+0x7e>
 801124a:	68a3      	ldr	r3, [r4, #8]
 801124c:	42ab      	cmp	r3, r5
 801124e:	dc19      	bgt.n	8011284 <__multadd+0x74>
 8011250:	6861      	ldr	r1, [r4, #4]
 8011252:	4638      	mov	r0, r7
 8011254:	3101      	adds	r1, #1
 8011256:	f7ff ff79 	bl	801114c <_Balloc>
 801125a:	4680      	mov	r8, r0
 801125c:	b928      	cbnz	r0, 801126a <__multadd+0x5a>
 801125e:	4602      	mov	r2, r0
 8011260:	4b0c      	ldr	r3, [pc, #48]	; (8011294 <__multadd+0x84>)
 8011262:	480d      	ldr	r0, [pc, #52]	; (8011298 <__multadd+0x88>)
 8011264:	21ba      	movs	r1, #186	; 0xba
 8011266:	f000 fd1d 	bl	8011ca4 <__assert_func>
 801126a:	6922      	ldr	r2, [r4, #16]
 801126c:	3202      	adds	r2, #2
 801126e:	f104 010c 	add.w	r1, r4, #12
 8011272:	0092      	lsls	r2, r2, #2
 8011274:	300c      	adds	r0, #12
 8011276:	f7fe ffde 	bl	8010236 <memcpy>
 801127a:	4621      	mov	r1, r4
 801127c:	4638      	mov	r0, r7
 801127e:	f7ff ffa5 	bl	80111cc <_Bfree>
 8011282:	4644      	mov	r4, r8
 8011284:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011288:	3501      	adds	r5, #1
 801128a:	615e      	str	r6, [r3, #20]
 801128c:	6125      	str	r5, [r4, #16]
 801128e:	4620      	mov	r0, r4
 8011290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011294:	08013fcc 	.word	0x08013fcc
 8011298:	08013fdd 	.word	0x08013fdd

0801129c <__hi0bits>:
 801129c:	0c03      	lsrs	r3, r0, #16
 801129e:	041b      	lsls	r3, r3, #16
 80112a0:	b9d3      	cbnz	r3, 80112d8 <__hi0bits+0x3c>
 80112a2:	0400      	lsls	r0, r0, #16
 80112a4:	2310      	movs	r3, #16
 80112a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80112aa:	bf04      	itt	eq
 80112ac:	0200      	lsleq	r0, r0, #8
 80112ae:	3308      	addeq	r3, #8
 80112b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80112b4:	bf04      	itt	eq
 80112b6:	0100      	lsleq	r0, r0, #4
 80112b8:	3304      	addeq	r3, #4
 80112ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80112be:	bf04      	itt	eq
 80112c0:	0080      	lsleq	r0, r0, #2
 80112c2:	3302      	addeq	r3, #2
 80112c4:	2800      	cmp	r0, #0
 80112c6:	db05      	blt.n	80112d4 <__hi0bits+0x38>
 80112c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80112cc:	f103 0301 	add.w	r3, r3, #1
 80112d0:	bf08      	it	eq
 80112d2:	2320      	moveq	r3, #32
 80112d4:	4618      	mov	r0, r3
 80112d6:	4770      	bx	lr
 80112d8:	2300      	movs	r3, #0
 80112da:	e7e4      	b.n	80112a6 <__hi0bits+0xa>

080112dc <__lo0bits>:
 80112dc:	6803      	ldr	r3, [r0, #0]
 80112de:	f013 0207 	ands.w	r2, r3, #7
 80112e2:	d00c      	beq.n	80112fe <__lo0bits+0x22>
 80112e4:	07d9      	lsls	r1, r3, #31
 80112e6:	d422      	bmi.n	801132e <__lo0bits+0x52>
 80112e8:	079a      	lsls	r2, r3, #30
 80112ea:	bf49      	itett	mi
 80112ec:	085b      	lsrmi	r3, r3, #1
 80112ee:	089b      	lsrpl	r3, r3, #2
 80112f0:	6003      	strmi	r3, [r0, #0]
 80112f2:	2201      	movmi	r2, #1
 80112f4:	bf5c      	itt	pl
 80112f6:	6003      	strpl	r3, [r0, #0]
 80112f8:	2202      	movpl	r2, #2
 80112fa:	4610      	mov	r0, r2
 80112fc:	4770      	bx	lr
 80112fe:	b299      	uxth	r1, r3
 8011300:	b909      	cbnz	r1, 8011306 <__lo0bits+0x2a>
 8011302:	0c1b      	lsrs	r3, r3, #16
 8011304:	2210      	movs	r2, #16
 8011306:	b2d9      	uxtb	r1, r3
 8011308:	b909      	cbnz	r1, 801130e <__lo0bits+0x32>
 801130a:	3208      	adds	r2, #8
 801130c:	0a1b      	lsrs	r3, r3, #8
 801130e:	0719      	lsls	r1, r3, #28
 8011310:	bf04      	itt	eq
 8011312:	091b      	lsreq	r3, r3, #4
 8011314:	3204      	addeq	r2, #4
 8011316:	0799      	lsls	r1, r3, #30
 8011318:	bf04      	itt	eq
 801131a:	089b      	lsreq	r3, r3, #2
 801131c:	3202      	addeq	r2, #2
 801131e:	07d9      	lsls	r1, r3, #31
 8011320:	d403      	bmi.n	801132a <__lo0bits+0x4e>
 8011322:	085b      	lsrs	r3, r3, #1
 8011324:	f102 0201 	add.w	r2, r2, #1
 8011328:	d003      	beq.n	8011332 <__lo0bits+0x56>
 801132a:	6003      	str	r3, [r0, #0]
 801132c:	e7e5      	b.n	80112fa <__lo0bits+0x1e>
 801132e:	2200      	movs	r2, #0
 8011330:	e7e3      	b.n	80112fa <__lo0bits+0x1e>
 8011332:	2220      	movs	r2, #32
 8011334:	e7e1      	b.n	80112fa <__lo0bits+0x1e>
	...

08011338 <__i2b>:
 8011338:	b510      	push	{r4, lr}
 801133a:	460c      	mov	r4, r1
 801133c:	2101      	movs	r1, #1
 801133e:	f7ff ff05 	bl	801114c <_Balloc>
 8011342:	4602      	mov	r2, r0
 8011344:	b928      	cbnz	r0, 8011352 <__i2b+0x1a>
 8011346:	4b05      	ldr	r3, [pc, #20]	; (801135c <__i2b+0x24>)
 8011348:	4805      	ldr	r0, [pc, #20]	; (8011360 <__i2b+0x28>)
 801134a:	f240 1145 	movw	r1, #325	; 0x145
 801134e:	f000 fca9 	bl	8011ca4 <__assert_func>
 8011352:	2301      	movs	r3, #1
 8011354:	6144      	str	r4, [r0, #20]
 8011356:	6103      	str	r3, [r0, #16]
 8011358:	bd10      	pop	{r4, pc}
 801135a:	bf00      	nop
 801135c:	08013fcc 	.word	0x08013fcc
 8011360:	08013fdd 	.word	0x08013fdd

08011364 <__multiply>:
 8011364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011368:	4691      	mov	r9, r2
 801136a:	690a      	ldr	r2, [r1, #16]
 801136c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011370:	429a      	cmp	r2, r3
 8011372:	bfb8      	it	lt
 8011374:	460b      	movlt	r3, r1
 8011376:	460c      	mov	r4, r1
 8011378:	bfbc      	itt	lt
 801137a:	464c      	movlt	r4, r9
 801137c:	4699      	movlt	r9, r3
 801137e:	6927      	ldr	r7, [r4, #16]
 8011380:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011384:	68a3      	ldr	r3, [r4, #8]
 8011386:	6861      	ldr	r1, [r4, #4]
 8011388:	eb07 060a 	add.w	r6, r7, sl
 801138c:	42b3      	cmp	r3, r6
 801138e:	b085      	sub	sp, #20
 8011390:	bfb8      	it	lt
 8011392:	3101      	addlt	r1, #1
 8011394:	f7ff feda 	bl	801114c <_Balloc>
 8011398:	b930      	cbnz	r0, 80113a8 <__multiply+0x44>
 801139a:	4602      	mov	r2, r0
 801139c:	4b44      	ldr	r3, [pc, #272]	; (80114b0 <__multiply+0x14c>)
 801139e:	4845      	ldr	r0, [pc, #276]	; (80114b4 <__multiply+0x150>)
 80113a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80113a4:	f000 fc7e 	bl	8011ca4 <__assert_func>
 80113a8:	f100 0514 	add.w	r5, r0, #20
 80113ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80113b0:	462b      	mov	r3, r5
 80113b2:	2200      	movs	r2, #0
 80113b4:	4543      	cmp	r3, r8
 80113b6:	d321      	bcc.n	80113fc <__multiply+0x98>
 80113b8:	f104 0314 	add.w	r3, r4, #20
 80113bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80113c0:	f109 0314 	add.w	r3, r9, #20
 80113c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80113c8:	9202      	str	r2, [sp, #8]
 80113ca:	1b3a      	subs	r2, r7, r4
 80113cc:	3a15      	subs	r2, #21
 80113ce:	f022 0203 	bic.w	r2, r2, #3
 80113d2:	3204      	adds	r2, #4
 80113d4:	f104 0115 	add.w	r1, r4, #21
 80113d8:	428f      	cmp	r7, r1
 80113da:	bf38      	it	cc
 80113dc:	2204      	movcc	r2, #4
 80113de:	9201      	str	r2, [sp, #4]
 80113e0:	9a02      	ldr	r2, [sp, #8]
 80113e2:	9303      	str	r3, [sp, #12]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d80c      	bhi.n	8011402 <__multiply+0x9e>
 80113e8:	2e00      	cmp	r6, #0
 80113ea:	dd03      	ble.n	80113f4 <__multiply+0x90>
 80113ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d05b      	beq.n	80114ac <__multiply+0x148>
 80113f4:	6106      	str	r6, [r0, #16]
 80113f6:	b005      	add	sp, #20
 80113f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113fc:	f843 2b04 	str.w	r2, [r3], #4
 8011400:	e7d8      	b.n	80113b4 <__multiply+0x50>
 8011402:	f8b3 a000 	ldrh.w	sl, [r3]
 8011406:	f1ba 0f00 	cmp.w	sl, #0
 801140a:	d024      	beq.n	8011456 <__multiply+0xf2>
 801140c:	f104 0e14 	add.w	lr, r4, #20
 8011410:	46a9      	mov	r9, r5
 8011412:	f04f 0c00 	mov.w	ip, #0
 8011416:	f85e 2b04 	ldr.w	r2, [lr], #4
 801141a:	f8d9 1000 	ldr.w	r1, [r9]
 801141e:	fa1f fb82 	uxth.w	fp, r2
 8011422:	b289      	uxth	r1, r1
 8011424:	fb0a 110b 	mla	r1, sl, fp, r1
 8011428:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801142c:	f8d9 2000 	ldr.w	r2, [r9]
 8011430:	4461      	add	r1, ip
 8011432:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011436:	fb0a c20b 	mla	r2, sl, fp, ip
 801143a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801143e:	b289      	uxth	r1, r1
 8011440:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011444:	4577      	cmp	r7, lr
 8011446:	f849 1b04 	str.w	r1, [r9], #4
 801144a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801144e:	d8e2      	bhi.n	8011416 <__multiply+0xb2>
 8011450:	9a01      	ldr	r2, [sp, #4]
 8011452:	f845 c002 	str.w	ip, [r5, r2]
 8011456:	9a03      	ldr	r2, [sp, #12]
 8011458:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801145c:	3304      	adds	r3, #4
 801145e:	f1b9 0f00 	cmp.w	r9, #0
 8011462:	d021      	beq.n	80114a8 <__multiply+0x144>
 8011464:	6829      	ldr	r1, [r5, #0]
 8011466:	f104 0c14 	add.w	ip, r4, #20
 801146a:	46ae      	mov	lr, r5
 801146c:	f04f 0a00 	mov.w	sl, #0
 8011470:	f8bc b000 	ldrh.w	fp, [ip]
 8011474:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011478:	fb09 220b 	mla	r2, r9, fp, r2
 801147c:	4452      	add	r2, sl
 801147e:	b289      	uxth	r1, r1
 8011480:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011484:	f84e 1b04 	str.w	r1, [lr], #4
 8011488:	f85c 1b04 	ldr.w	r1, [ip], #4
 801148c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011490:	f8be 1000 	ldrh.w	r1, [lr]
 8011494:	fb09 110a 	mla	r1, r9, sl, r1
 8011498:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801149c:	4567      	cmp	r7, ip
 801149e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80114a2:	d8e5      	bhi.n	8011470 <__multiply+0x10c>
 80114a4:	9a01      	ldr	r2, [sp, #4]
 80114a6:	50a9      	str	r1, [r5, r2]
 80114a8:	3504      	adds	r5, #4
 80114aa:	e799      	b.n	80113e0 <__multiply+0x7c>
 80114ac:	3e01      	subs	r6, #1
 80114ae:	e79b      	b.n	80113e8 <__multiply+0x84>
 80114b0:	08013fcc 	.word	0x08013fcc
 80114b4:	08013fdd 	.word	0x08013fdd

080114b8 <__pow5mult>:
 80114b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114bc:	4615      	mov	r5, r2
 80114be:	f012 0203 	ands.w	r2, r2, #3
 80114c2:	4606      	mov	r6, r0
 80114c4:	460f      	mov	r7, r1
 80114c6:	d007      	beq.n	80114d8 <__pow5mult+0x20>
 80114c8:	4c25      	ldr	r4, [pc, #148]	; (8011560 <__pow5mult+0xa8>)
 80114ca:	3a01      	subs	r2, #1
 80114cc:	2300      	movs	r3, #0
 80114ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80114d2:	f7ff fe9d 	bl	8011210 <__multadd>
 80114d6:	4607      	mov	r7, r0
 80114d8:	10ad      	asrs	r5, r5, #2
 80114da:	d03d      	beq.n	8011558 <__pow5mult+0xa0>
 80114dc:	69f4      	ldr	r4, [r6, #28]
 80114de:	b97c      	cbnz	r4, 8011500 <__pow5mult+0x48>
 80114e0:	2010      	movs	r0, #16
 80114e2:	f7ff fd7f 	bl	8010fe4 <malloc>
 80114e6:	4602      	mov	r2, r0
 80114e8:	61f0      	str	r0, [r6, #28]
 80114ea:	b928      	cbnz	r0, 80114f8 <__pow5mult+0x40>
 80114ec:	4b1d      	ldr	r3, [pc, #116]	; (8011564 <__pow5mult+0xac>)
 80114ee:	481e      	ldr	r0, [pc, #120]	; (8011568 <__pow5mult+0xb0>)
 80114f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80114f4:	f000 fbd6 	bl	8011ca4 <__assert_func>
 80114f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80114fc:	6004      	str	r4, [r0, #0]
 80114fe:	60c4      	str	r4, [r0, #12]
 8011500:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011508:	b94c      	cbnz	r4, 801151e <__pow5mult+0x66>
 801150a:	f240 2171 	movw	r1, #625	; 0x271
 801150e:	4630      	mov	r0, r6
 8011510:	f7ff ff12 	bl	8011338 <__i2b>
 8011514:	2300      	movs	r3, #0
 8011516:	f8c8 0008 	str.w	r0, [r8, #8]
 801151a:	4604      	mov	r4, r0
 801151c:	6003      	str	r3, [r0, #0]
 801151e:	f04f 0900 	mov.w	r9, #0
 8011522:	07eb      	lsls	r3, r5, #31
 8011524:	d50a      	bpl.n	801153c <__pow5mult+0x84>
 8011526:	4639      	mov	r1, r7
 8011528:	4622      	mov	r2, r4
 801152a:	4630      	mov	r0, r6
 801152c:	f7ff ff1a 	bl	8011364 <__multiply>
 8011530:	4639      	mov	r1, r7
 8011532:	4680      	mov	r8, r0
 8011534:	4630      	mov	r0, r6
 8011536:	f7ff fe49 	bl	80111cc <_Bfree>
 801153a:	4647      	mov	r7, r8
 801153c:	106d      	asrs	r5, r5, #1
 801153e:	d00b      	beq.n	8011558 <__pow5mult+0xa0>
 8011540:	6820      	ldr	r0, [r4, #0]
 8011542:	b938      	cbnz	r0, 8011554 <__pow5mult+0x9c>
 8011544:	4622      	mov	r2, r4
 8011546:	4621      	mov	r1, r4
 8011548:	4630      	mov	r0, r6
 801154a:	f7ff ff0b 	bl	8011364 <__multiply>
 801154e:	6020      	str	r0, [r4, #0]
 8011550:	f8c0 9000 	str.w	r9, [r0]
 8011554:	4604      	mov	r4, r0
 8011556:	e7e4      	b.n	8011522 <__pow5mult+0x6a>
 8011558:	4638      	mov	r0, r7
 801155a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801155e:	bf00      	nop
 8011560:	08014128 	.word	0x08014128
 8011564:	08013f5d 	.word	0x08013f5d
 8011568:	08013fdd 	.word	0x08013fdd

0801156c <__lshift>:
 801156c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011570:	460c      	mov	r4, r1
 8011572:	6849      	ldr	r1, [r1, #4]
 8011574:	6923      	ldr	r3, [r4, #16]
 8011576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801157a:	68a3      	ldr	r3, [r4, #8]
 801157c:	4607      	mov	r7, r0
 801157e:	4691      	mov	r9, r2
 8011580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011584:	f108 0601 	add.w	r6, r8, #1
 8011588:	42b3      	cmp	r3, r6
 801158a:	db0b      	blt.n	80115a4 <__lshift+0x38>
 801158c:	4638      	mov	r0, r7
 801158e:	f7ff fddd 	bl	801114c <_Balloc>
 8011592:	4605      	mov	r5, r0
 8011594:	b948      	cbnz	r0, 80115aa <__lshift+0x3e>
 8011596:	4602      	mov	r2, r0
 8011598:	4b28      	ldr	r3, [pc, #160]	; (801163c <__lshift+0xd0>)
 801159a:	4829      	ldr	r0, [pc, #164]	; (8011640 <__lshift+0xd4>)
 801159c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80115a0:	f000 fb80 	bl	8011ca4 <__assert_func>
 80115a4:	3101      	adds	r1, #1
 80115a6:	005b      	lsls	r3, r3, #1
 80115a8:	e7ee      	b.n	8011588 <__lshift+0x1c>
 80115aa:	2300      	movs	r3, #0
 80115ac:	f100 0114 	add.w	r1, r0, #20
 80115b0:	f100 0210 	add.w	r2, r0, #16
 80115b4:	4618      	mov	r0, r3
 80115b6:	4553      	cmp	r3, sl
 80115b8:	db33      	blt.n	8011622 <__lshift+0xb6>
 80115ba:	6920      	ldr	r0, [r4, #16]
 80115bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115c0:	f104 0314 	add.w	r3, r4, #20
 80115c4:	f019 091f 	ands.w	r9, r9, #31
 80115c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80115d0:	d02b      	beq.n	801162a <__lshift+0xbe>
 80115d2:	f1c9 0e20 	rsb	lr, r9, #32
 80115d6:	468a      	mov	sl, r1
 80115d8:	2200      	movs	r2, #0
 80115da:	6818      	ldr	r0, [r3, #0]
 80115dc:	fa00 f009 	lsl.w	r0, r0, r9
 80115e0:	4310      	orrs	r0, r2
 80115e2:	f84a 0b04 	str.w	r0, [sl], #4
 80115e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80115ea:	459c      	cmp	ip, r3
 80115ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80115f0:	d8f3      	bhi.n	80115da <__lshift+0x6e>
 80115f2:	ebac 0304 	sub.w	r3, ip, r4
 80115f6:	3b15      	subs	r3, #21
 80115f8:	f023 0303 	bic.w	r3, r3, #3
 80115fc:	3304      	adds	r3, #4
 80115fe:	f104 0015 	add.w	r0, r4, #21
 8011602:	4584      	cmp	ip, r0
 8011604:	bf38      	it	cc
 8011606:	2304      	movcc	r3, #4
 8011608:	50ca      	str	r2, [r1, r3]
 801160a:	b10a      	cbz	r2, 8011610 <__lshift+0xa4>
 801160c:	f108 0602 	add.w	r6, r8, #2
 8011610:	3e01      	subs	r6, #1
 8011612:	4638      	mov	r0, r7
 8011614:	612e      	str	r6, [r5, #16]
 8011616:	4621      	mov	r1, r4
 8011618:	f7ff fdd8 	bl	80111cc <_Bfree>
 801161c:	4628      	mov	r0, r5
 801161e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011622:	f842 0f04 	str.w	r0, [r2, #4]!
 8011626:	3301      	adds	r3, #1
 8011628:	e7c5      	b.n	80115b6 <__lshift+0x4a>
 801162a:	3904      	subs	r1, #4
 801162c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011630:	f841 2f04 	str.w	r2, [r1, #4]!
 8011634:	459c      	cmp	ip, r3
 8011636:	d8f9      	bhi.n	801162c <__lshift+0xc0>
 8011638:	e7ea      	b.n	8011610 <__lshift+0xa4>
 801163a:	bf00      	nop
 801163c:	08013fcc 	.word	0x08013fcc
 8011640:	08013fdd 	.word	0x08013fdd

08011644 <__mcmp>:
 8011644:	b530      	push	{r4, r5, lr}
 8011646:	6902      	ldr	r2, [r0, #16]
 8011648:	690c      	ldr	r4, [r1, #16]
 801164a:	1b12      	subs	r2, r2, r4
 801164c:	d10e      	bne.n	801166c <__mcmp+0x28>
 801164e:	f100 0314 	add.w	r3, r0, #20
 8011652:	3114      	adds	r1, #20
 8011654:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011658:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801165c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011660:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011664:	42a5      	cmp	r5, r4
 8011666:	d003      	beq.n	8011670 <__mcmp+0x2c>
 8011668:	d305      	bcc.n	8011676 <__mcmp+0x32>
 801166a:	2201      	movs	r2, #1
 801166c:	4610      	mov	r0, r2
 801166e:	bd30      	pop	{r4, r5, pc}
 8011670:	4283      	cmp	r3, r0
 8011672:	d3f3      	bcc.n	801165c <__mcmp+0x18>
 8011674:	e7fa      	b.n	801166c <__mcmp+0x28>
 8011676:	f04f 32ff 	mov.w	r2, #4294967295
 801167a:	e7f7      	b.n	801166c <__mcmp+0x28>

0801167c <__mdiff>:
 801167c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011680:	460c      	mov	r4, r1
 8011682:	4606      	mov	r6, r0
 8011684:	4611      	mov	r1, r2
 8011686:	4620      	mov	r0, r4
 8011688:	4690      	mov	r8, r2
 801168a:	f7ff ffdb 	bl	8011644 <__mcmp>
 801168e:	1e05      	subs	r5, r0, #0
 8011690:	d110      	bne.n	80116b4 <__mdiff+0x38>
 8011692:	4629      	mov	r1, r5
 8011694:	4630      	mov	r0, r6
 8011696:	f7ff fd59 	bl	801114c <_Balloc>
 801169a:	b930      	cbnz	r0, 80116aa <__mdiff+0x2e>
 801169c:	4b3a      	ldr	r3, [pc, #232]	; (8011788 <__mdiff+0x10c>)
 801169e:	4602      	mov	r2, r0
 80116a0:	f240 2137 	movw	r1, #567	; 0x237
 80116a4:	4839      	ldr	r0, [pc, #228]	; (801178c <__mdiff+0x110>)
 80116a6:	f000 fafd 	bl	8011ca4 <__assert_func>
 80116aa:	2301      	movs	r3, #1
 80116ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80116b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b4:	bfa4      	itt	ge
 80116b6:	4643      	movge	r3, r8
 80116b8:	46a0      	movge	r8, r4
 80116ba:	4630      	mov	r0, r6
 80116bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80116c0:	bfa6      	itte	ge
 80116c2:	461c      	movge	r4, r3
 80116c4:	2500      	movge	r5, #0
 80116c6:	2501      	movlt	r5, #1
 80116c8:	f7ff fd40 	bl	801114c <_Balloc>
 80116cc:	b920      	cbnz	r0, 80116d8 <__mdiff+0x5c>
 80116ce:	4b2e      	ldr	r3, [pc, #184]	; (8011788 <__mdiff+0x10c>)
 80116d0:	4602      	mov	r2, r0
 80116d2:	f240 2145 	movw	r1, #581	; 0x245
 80116d6:	e7e5      	b.n	80116a4 <__mdiff+0x28>
 80116d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80116dc:	6926      	ldr	r6, [r4, #16]
 80116de:	60c5      	str	r5, [r0, #12]
 80116e0:	f104 0914 	add.w	r9, r4, #20
 80116e4:	f108 0514 	add.w	r5, r8, #20
 80116e8:	f100 0e14 	add.w	lr, r0, #20
 80116ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80116f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80116f4:	f108 0210 	add.w	r2, r8, #16
 80116f8:	46f2      	mov	sl, lr
 80116fa:	2100      	movs	r1, #0
 80116fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8011700:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011704:	fa11 f88b 	uxtah	r8, r1, fp
 8011708:	b299      	uxth	r1, r3
 801170a:	0c1b      	lsrs	r3, r3, #16
 801170c:	eba8 0801 	sub.w	r8, r8, r1
 8011710:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011714:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011718:	fa1f f888 	uxth.w	r8, r8
 801171c:	1419      	asrs	r1, r3, #16
 801171e:	454e      	cmp	r6, r9
 8011720:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011724:	f84a 3b04 	str.w	r3, [sl], #4
 8011728:	d8e8      	bhi.n	80116fc <__mdiff+0x80>
 801172a:	1b33      	subs	r3, r6, r4
 801172c:	3b15      	subs	r3, #21
 801172e:	f023 0303 	bic.w	r3, r3, #3
 8011732:	3304      	adds	r3, #4
 8011734:	3415      	adds	r4, #21
 8011736:	42a6      	cmp	r6, r4
 8011738:	bf38      	it	cc
 801173a:	2304      	movcc	r3, #4
 801173c:	441d      	add	r5, r3
 801173e:	4473      	add	r3, lr
 8011740:	469e      	mov	lr, r3
 8011742:	462e      	mov	r6, r5
 8011744:	4566      	cmp	r6, ip
 8011746:	d30e      	bcc.n	8011766 <__mdiff+0xea>
 8011748:	f10c 0203 	add.w	r2, ip, #3
 801174c:	1b52      	subs	r2, r2, r5
 801174e:	f022 0203 	bic.w	r2, r2, #3
 8011752:	3d03      	subs	r5, #3
 8011754:	45ac      	cmp	ip, r5
 8011756:	bf38      	it	cc
 8011758:	2200      	movcc	r2, #0
 801175a:	4413      	add	r3, r2
 801175c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011760:	b17a      	cbz	r2, 8011782 <__mdiff+0x106>
 8011762:	6107      	str	r7, [r0, #16]
 8011764:	e7a4      	b.n	80116b0 <__mdiff+0x34>
 8011766:	f856 8b04 	ldr.w	r8, [r6], #4
 801176a:	fa11 f288 	uxtah	r2, r1, r8
 801176e:	1414      	asrs	r4, r2, #16
 8011770:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011774:	b292      	uxth	r2, r2
 8011776:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801177a:	f84e 2b04 	str.w	r2, [lr], #4
 801177e:	1421      	asrs	r1, r4, #16
 8011780:	e7e0      	b.n	8011744 <__mdiff+0xc8>
 8011782:	3f01      	subs	r7, #1
 8011784:	e7ea      	b.n	801175c <__mdiff+0xe0>
 8011786:	bf00      	nop
 8011788:	08013fcc 	.word	0x08013fcc
 801178c:	08013fdd 	.word	0x08013fdd

08011790 <__d2b>:
 8011790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011794:	460f      	mov	r7, r1
 8011796:	2101      	movs	r1, #1
 8011798:	ec59 8b10 	vmov	r8, r9, d0
 801179c:	4616      	mov	r6, r2
 801179e:	f7ff fcd5 	bl	801114c <_Balloc>
 80117a2:	4604      	mov	r4, r0
 80117a4:	b930      	cbnz	r0, 80117b4 <__d2b+0x24>
 80117a6:	4602      	mov	r2, r0
 80117a8:	4b24      	ldr	r3, [pc, #144]	; (801183c <__d2b+0xac>)
 80117aa:	4825      	ldr	r0, [pc, #148]	; (8011840 <__d2b+0xb0>)
 80117ac:	f240 310f 	movw	r1, #783	; 0x30f
 80117b0:	f000 fa78 	bl	8011ca4 <__assert_func>
 80117b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80117b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117bc:	bb2d      	cbnz	r5, 801180a <__d2b+0x7a>
 80117be:	9301      	str	r3, [sp, #4]
 80117c0:	f1b8 0300 	subs.w	r3, r8, #0
 80117c4:	d026      	beq.n	8011814 <__d2b+0x84>
 80117c6:	4668      	mov	r0, sp
 80117c8:	9300      	str	r3, [sp, #0]
 80117ca:	f7ff fd87 	bl	80112dc <__lo0bits>
 80117ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80117d2:	b1e8      	cbz	r0, 8011810 <__d2b+0x80>
 80117d4:	f1c0 0320 	rsb	r3, r0, #32
 80117d8:	fa02 f303 	lsl.w	r3, r2, r3
 80117dc:	430b      	orrs	r3, r1
 80117de:	40c2      	lsrs	r2, r0
 80117e0:	6163      	str	r3, [r4, #20]
 80117e2:	9201      	str	r2, [sp, #4]
 80117e4:	9b01      	ldr	r3, [sp, #4]
 80117e6:	61a3      	str	r3, [r4, #24]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	bf14      	ite	ne
 80117ec:	2202      	movne	r2, #2
 80117ee:	2201      	moveq	r2, #1
 80117f0:	6122      	str	r2, [r4, #16]
 80117f2:	b1bd      	cbz	r5, 8011824 <__d2b+0x94>
 80117f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80117f8:	4405      	add	r5, r0
 80117fa:	603d      	str	r5, [r7, #0]
 80117fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011800:	6030      	str	r0, [r6, #0]
 8011802:	4620      	mov	r0, r4
 8011804:	b003      	add	sp, #12
 8011806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801180a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801180e:	e7d6      	b.n	80117be <__d2b+0x2e>
 8011810:	6161      	str	r1, [r4, #20]
 8011812:	e7e7      	b.n	80117e4 <__d2b+0x54>
 8011814:	a801      	add	r0, sp, #4
 8011816:	f7ff fd61 	bl	80112dc <__lo0bits>
 801181a:	9b01      	ldr	r3, [sp, #4]
 801181c:	6163      	str	r3, [r4, #20]
 801181e:	3020      	adds	r0, #32
 8011820:	2201      	movs	r2, #1
 8011822:	e7e5      	b.n	80117f0 <__d2b+0x60>
 8011824:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011828:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801182c:	6038      	str	r0, [r7, #0]
 801182e:	6918      	ldr	r0, [r3, #16]
 8011830:	f7ff fd34 	bl	801129c <__hi0bits>
 8011834:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011838:	e7e2      	b.n	8011800 <__d2b+0x70>
 801183a:	bf00      	nop
 801183c:	08013fcc 	.word	0x08013fcc
 8011840:	08013fdd 	.word	0x08013fdd

08011844 <__ssputs_r>:
 8011844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011848:	688e      	ldr	r6, [r1, #8]
 801184a:	461f      	mov	r7, r3
 801184c:	42be      	cmp	r6, r7
 801184e:	680b      	ldr	r3, [r1, #0]
 8011850:	4682      	mov	sl, r0
 8011852:	460c      	mov	r4, r1
 8011854:	4690      	mov	r8, r2
 8011856:	d82c      	bhi.n	80118b2 <__ssputs_r+0x6e>
 8011858:	898a      	ldrh	r2, [r1, #12]
 801185a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801185e:	d026      	beq.n	80118ae <__ssputs_r+0x6a>
 8011860:	6965      	ldr	r5, [r4, #20]
 8011862:	6909      	ldr	r1, [r1, #16]
 8011864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011868:	eba3 0901 	sub.w	r9, r3, r1
 801186c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011870:	1c7b      	adds	r3, r7, #1
 8011872:	444b      	add	r3, r9
 8011874:	106d      	asrs	r5, r5, #1
 8011876:	429d      	cmp	r5, r3
 8011878:	bf38      	it	cc
 801187a:	461d      	movcc	r5, r3
 801187c:	0553      	lsls	r3, r2, #21
 801187e:	d527      	bpl.n	80118d0 <__ssputs_r+0x8c>
 8011880:	4629      	mov	r1, r5
 8011882:	f7ff fbd7 	bl	8011034 <_malloc_r>
 8011886:	4606      	mov	r6, r0
 8011888:	b360      	cbz	r0, 80118e4 <__ssputs_r+0xa0>
 801188a:	6921      	ldr	r1, [r4, #16]
 801188c:	464a      	mov	r2, r9
 801188e:	f7fe fcd2 	bl	8010236 <memcpy>
 8011892:	89a3      	ldrh	r3, [r4, #12]
 8011894:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801189c:	81a3      	strh	r3, [r4, #12]
 801189e:	6126      	str	r6, [r4, #16]
 80118a0:	6165      	str	r5, [r4, #20]
 80118a2:	444e      	add	r6, r9
 80118a4:	eba5 0509 	sub.w	r5, r5, r9
 80118a8:	6026      	str	r6, [r4, #0]
 80118aa:	60a5      	str	r5, [r4, #8]
 80118ac:	463e      	mov	r6, r7
 80118ae:	42be      	cmp	r6, r7
 80118b0:	d900      	bls.n	80118b4 <__ssputs_r+0x70>
 80118b2:	463e      	mov	r6, r7
 80118b4:	6820      	ldr	r0, [r4, #0]
 80118b6:	4632      	mov	r2, r6
 80118b8:	4641      	mov	r1, r8
 80118ba:	f000 f9c9 	bl	8011c50 <memmove>
 80118be:	68a3      	ldr	r3, [r4, #8]
 80118c0:	1b9b      	subs	r3, r3, r6
 80118c2:	60a3      	str	r3, [r4, #8]
 80118c4:	6823      	ldr	r3, [r4, #0]
 80118c6:	4433      	add	r3, r6
 80118c8:	6023      	str	r3, [r4, #0]
 80118ca:	2000      	movs	r0, #0
 80118cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118d0:	462a      	mov	r2, r5
 80118d2:	f000 fa2d 	bl	8011d30 <_realloc_r>
 80118d6:	4606      	mov	r6, r0
 80118d8:	2800      	cmp	r0, #0
 80118da:	d1e0      	bne.n	801189e <__ssputs_r+0x5a>
 80118dc:	6921      	ldr	r1, [r4, #16]
 80118de:	4650      	mov	r0, sl
 80118e0:	f7ff fb34 	bl	8010f4c <_free_r>
 80118e4:	230c      	movs	r3, #12
 80118e6:	f8ca 3000 	str.w	r3, [sl]
 80118ea:	89a3      	ldrh	r3, [r4, #12]
 80118ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118f0:	81a3      	strh	r3, [r4, #12]
 80118f2:	f04f 30ff 	mov.w	r0, #4294967295
 80118f6:	e7e9      	b.n	80118cc <__ssputs_r+0x88>

080118f8 <_svfiprintf_r>:
 80118f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fc:	4698      	mov	r8, r3
 80118fe:	898b      	ldrh	r3, [r1, #12]
 8011900:	061b      	lsls	r3, r3, #24
 8011902:	b09d      	sub	sp, #116	; 0x74
 8011904:	4607      	mov	r7, r0
 8011906:	460d      	mov	r5, r1
 8011908:	4614      	mov	r4, r2
 801190a:	d50e      	bpl.n	801192a <_svfiprintf_r+0x32>
 801190c:	690b      	ldr	r3, [r1, #16]
 801190e:	b963      	cbnz	r3, 801192a <_svfiprintf_r+0x32>
 8011910:	2140      	movs	r1, #64	; 0x40
 8011912:	f7ff fb8f 	bl	8011034 <_malloc_r>
 8011916:	6028      	str	r0, [r5, #0]
 8011918:	6128      	str	r0, [r5, #16]
 801191a:	b920      	cbnz	r0, 8011926 <_svfiprintf_r+0x2e>
 801191c:	230c      	movs	r3, #12
 801191e:	603b      	str	r3, [r7, #0]
 8011920:	f04f 30ff 	mov.w	r0, #4294967295
 8011924:	e0d0      	b.n	8011ac8 <_svfiprintf_r+0x1d0>
 8011926:	2340      	movs	r3, #64	; 0x40
 8011928:	616b      	str	r3, [r5, #20]
 801192a:	2300      	movs	r3, #0
 801192c:	9309      	str	r3, [sp, #36]	; 0x24
 801192e:	2320      	movs	r3, #32
 8011930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011934:	f8cd 800c 	str.w	r8, [sp, #12]
 8011938:	2330      	movs	r3, #48	; 0x30
 801193a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011ae0 <_svfiprintf_r+0x1e8>
 801193e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011942:	f04f 0901 	mov.w	r9, #1
 8011946:	4623      	mov	r3, r4
 8011948:	469a      	mov	sl, r3
 801194a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801194e:	b10a      	cbz	r2, 8011954 <_svfiprintf_r+0x5c>
 8011950:	2a25      	cmp	r2, #37	; 0x25
 8011952:	d1f9      	bne.n	8011948 <_svfiprintf_r+0x50>
 8011954:	ebba 0b04 	subs.w	fp, sl, r4
 8011958:	d00b      	beq.n	8011972 <_svfiprintf_r+0x7a>
 801195a:	465b      	mov	r3, fp
 801195c:	4622      	mov	r2, r4
 801195e:	4629      	mov	r1, r5
 8011960:	4638      	mov	r0, r7
 8011962:	f7ff ff6f 	bl	8011844 <__ssputs_r>
 8011966:	3001      	adds	r0, #1
 8011968:	f000 80a9 	beq.w	8011abe <_svfiprintf_r+0x1c6>
 801196c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801196e:	445a      	add	r2, fp
 8011970:	9209      	str	r2, [sp, #36]	; 0x24
 8011972:	f89a 3000 	ldrb.w	r3, [sl]
 8011976:	2b00      	cmp	r3, #0
 8011978:	f000 80a1 	beq.w	8011abe <_svfiprintf_r+0x1c6>
 801197c:	2300      	movs	r3, #0
 801197e:	f04f 32ff 	mov.w	r2, #4294967295
 8011982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011986:	f10a 0a01 	add.w	sl, sl, #1
 801198a:	9304      	str	r3, [sp, #16]
 801198c:	9307      	str	r3, [sp, #28]
 801198e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011992:	931a      	str	r3, [sp, #104]	; 0x68
 8011994:	4654      	mov	r4, sl
 8011996:	2205      	movs	r2, #5
 8011998:	f814 1b01 	ldrb.w	r1, [r4], #1
 801199c:	4850      	ldr	r0, [pc, #320]	; (8011ae0 <_svfiprintf_r+0x1e8>)
 801199e:	f7ee fc27 	bl	80001f0 <memchr>
 80119a2:	9a04      	ldr	r2, [sp, #16]
 80119a4:	b9d8      	cbnz	r0, 80119de <_svfiprintf_r+0xe6>
 80119a6:	06d0      	lsls	r0, r2, #27
 80119a8:	bf44      	itt	mi
 80119aa:	2320      	movmi	r3, #32
 80119ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119b0:	0711      	lsls	r1, r2, #28
 80119b2:	bf44      	itt	mi
 80119b4:	232b      	movmi	r3, #43	; 0x2b
 80119b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119ba:	f89a 3000 	ldrb.w	r3, [sl]
 80119be:	2b2a      	cmp	r3, #42	; 0x2a
 80119c0:	d015      	beq.n	80119ee <_svfiprintf_r+0xf6>
 80119c2:	9a07      	ldr	r2, [sp, #28]
 80119c4:	4654      	mov	r4, sl
 80119c6:	2000      	movs	r0, #0
 80119c8:	f04f 0c0a 	mov.w	ip, #10
 80119cc:	4621      	mov	r1, r4
 80119ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119d2:	3b30      	subs	r3, #48	; 0x30
 80119d4:	2b09      	cmp	r3, #9
 80119d6:	d94d      	bls.n	8011a74 <_svfiprintf_r+0x17c>
 80119d8:	b1b0      	cbz	r0, 8011a08 <_svfiprintf_r+0x110>
 80119da:	9207      	str	r2, [sp, #28]
 80119dc:	e014      	b.n	8011a08 <_svfiprintf_r+0x110>
 80119de:	eba0 0308 	sub.w	r3, r0, r8
 80119e2:	fa09 f303 	lsl.w	r3, r9, r3
 80119e6:	4313      	orrs	r3, r2
 80119e8:	9304      	str	r3, [sp, #16]
 80119ea:	46a2      	mov	sl, r4
 80119ec:	e7d2      	b.n	8011994 <_svfiprintf_r+0x9c>
 80119ee:	9b03      	ldr	r3, [sp, #12]
 80119f0:	1d19      	adds	r1, r3, #4
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	9103      	str	r1, [sp, #12]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	bfbb      	ittet	lt
 80119fa:	425b      	neglt	r3, r3
 80119fc:	f042 0202 	orrlt.w	r2, r2, #2
 8011a00:	9307      	strge	r3, [sp, #28]
 8011a02:	9307      	strlt	r3, [sp, #28]
 8011a04:	bfb8      	it	lt
 8011a06:	9204      	strlt	r2, [sp, #16]
 8011a08:	7823      	ldrb	r3, [r4, #0]
 8011a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8011a0c:	d10c      	bne.n	8011a28 <_svfiprintf_r+0x130>
 8011a0e:	7863      	ldrb	r3, [r4, #1]
 8011a10:	2b2a      	cmp	r3, #42	; 0x2a
 8011a12:	d134      	bne.n	8011a7e <_svfiprintf_r+0x186>
 8011a14:	9b03      	ldr	r3, [sp, #12]
 8011a16:	1d1a      	adds	r2, r3, #4
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	9203      	str	r2, [sp, #12]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	bfb8      	it	lt
 8011a20:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a24:	3402      	adds	r4, #2
 8011a26:	9305      	str	r3, [sp, #20]
 8011a28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011af0 <_svfiprintf_r+0x1f8>
 8011a2c:	7821      	ldrb	r1, [r4, #0]
 8011a2e:	2203      	movs	r2, #3
 8011a30:	4650      	mov	r0, sl
 8011a32:	f7ee fbdd 	bl	80001f0 <memchr>
 8011a36:	b138      	cbz	r0, 8011a48 <_svfiprintf_r+0x150>
 8011a38:	9b04      	ldr	r3, [sp, #16]
 8011a3a:	eba0 000a 	sub.w	r0, r0, sl
 8011a3e:	2240      	movs	r2, #64	; 0x40
 8011a40:	4082      	lsls	r2, r0
 8011a42:	4313      	orrs	r3, r2
 8011a44:	3401      	adds	r4, #1
 8011a46:	9304      	str	r3, [sp, #16]
 8011a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a4c:	4825      	ldr	r0, [pc, #148]	; (8011ae4 <_svfiprintf_r+0x1ec>)
 8011a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a52:	2206      	movs	r2, #6
 8011a54:	f7ee fbcc 	bl	80001f0 <memchr>
 8011a58:	2800      	cmp	r0, #0
 8011a5a:	d038      	beq.n	8011ace <_svfiprintf_r+0x1d6>
 8011a5c:	4b22      	ldr	r3, [pc, #136]	; (8011ae8 <_svfiprintf_r+0x1f0>)
 8011a5e:	bb1b      	cbnz	r3, 8011aa8 <_svfiprintf_r+0x1b0>
 8011a60:	9b03      	ldr	r3, [sp, #12]
 8011a62:	3307      	adds	r3, #7
 8011a64:	f023 0307 	bic.w	r3, r3, #7
 8011a68:	3308      	adds	r3, #8
 8011a6a:	9303      	str	r3, [sp, #12]
 8011a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a6e:	4433      	add	r3, r6
 8011a70:	9309      	str	r3, [sp, #36]	; 0x24
 8011a72:	e768      	b.n	8011946 <_svfiprintf_r+0x4e>
 8011a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a78:	460c      	mov	r4, r1
 8011a7a:	2001      	movs	r0, #1
 8011a7c:	e7a6      	b.n	80119cc <_svfiprintf_r+0xd4>
 8011a7e:	2300      	movs	r3, #0
 8011a80:	3401      	adds	r4, #1
 8011a82:	9305      	str	r3, [sp, #20]
 8011a84:	4619      	mov	r1, r3
 8011a86:	f04f 0c0a 	mov.w	ip, #10
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a90:	3a30      	subs	r2, #48	; 0x30
 8011a92:	2a09      	cmp	r2, #9
 8011a94:	d903      	bls.n	8011a9e <_svfiprintf_r+0x1a6>
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d0c6      	beq.n	8011a28 <_svfiprintf_r+0x130>
 8011a9a:	9105      	str	r1, [sp, #20]
 8011a9c:	e7c4      	b.n	8011a28 <_svfiprintf_r+0x130>
 8011a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e7f0      	b.n	8011a8a <_svfiprintf_r+0x192>
 8011aa8:	ab03      	add	r3, sp, #12
 8011aaa:	9300      	str	r3, [sp, #0]
 8011aac:	462a      	mov	r2, r5
 8011aae:	4b0f      	ldr	r3, [pc, #60]	; (8011aec <_svfiprintf_r+0x1f4>)
 8011ab0:	a904      	add	r1, sp, #16
 8011ab2:	4638      	mov	r0, r7
 8011ab4:	f7fd fe54 	bl	800f760 <_printf_float>
 8011ab8:	1c42      	adds	r2, r0, #1
 8011aba:	4606      	mov	r6, r0
 8011abc:	d1d6      	bne.n	8011a6c <_svfiprintf_r+0x174>
 8011abe:	89ab      	ldrh	r3, [r5, #12]
 8011ac0:	065b      	lsls	r3, r3, #25
 8011ac2:	f53f af2d 	bmi.w	8011920 <_svfiprintf_r+0x28>
 8011ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ac8:	b01d      	add	sp, #116	; 0x74
 8011aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ace:	ab03      	add	r3, sp, #12
 8011ad0:	9300      	str	r3, [sp, #0]
 8011ad2:	462a      	mov	r2, r5
 8011ad4:	4b05      	ldr	r3, [pc, #20]	; (8011aec <_svfiprintf_r+0x1f4>)
 8011ad6:	a904      	add	r1, sp, #16
 8011ad8:	4638      	mov	r0, r7
 8011ada:	f7fe f8e5 	bl	800fca8 <_printf_i>
 8011ade:	e7eb      	b.n	8011ab8 <_svfiprintf_r+0x1c0>
 8011ae0:	08014134 	.word	0x08014134
 8011ae4:	0801413e 	.word	0x0801413e
 8011ae8:	0800f761 	.word	0x0800f761
 8011aec:	08011845 	.word	0x08011845
 8011af0:	0801413a 	.word	0x0801413a

08011af4 <__sflush_r>:
 8011af4:	898a      	ldrh	r2, [r1, #12]
 8011af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011afa:	4605      	mov	r5, r0
 8011afc:	0710      	lsls	r0, r2, #28
 8011afe:	460c      	mov	r4, r1
 8011b00:	d458      	bmi.n	8011bb4 <__sflush_r+0xc0>
 8011b02:	684b      	ldr	r3, [r1, #4]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	dc05      	bgt.n	8011b14 <__sflush_r+0x20>
 8011b08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	dc02      	bgt.n	8011b14 <__sflush_r+0x20>
 8011b0e:	2000      	movs	r0, #0
 8011b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b16:	2e00      	cmp	r6, #0
 8011b18:	d0f9      	beq.n	8011b0e <__sflush_r+0x1a>
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011b20:	682f      	ldr	r7, [r5, #0]
 8011b22:	6a21      	ldr	r1, [r4, #32]
 8011b24:	602b      	str	r3, [r5, #0]
 8011b26:	d032      	beq.n	8011b8e <__sflush_r+0x9a>
 8011b28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011b2a:	89a3      	ldrh	r3, [r4, #12]
 8011b2c:	075a      	lsls	r2, r3, #29
 8011b2e:	d505      	bpl.n	8011b3c <__sflush_r+0x48>
 8011b30:	6863      	ldr	r3, [r4, #4]
 8011b32:	1ac0      	subs	r0, r0, r3
 8011b34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b36:	b10b      	cbz	r3, 8011b3c <__sflush_r+0x48>
 8011b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b3a:	1ac0      	subs	r0, r0, r3
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	4602      	mov	r2, r0
 8011b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b42:	6a21      	ldr	r1, [r4, #32]
 8011b44:	4628      	mov	r0, r5
 8011b46:	47b0      	blx	r6
 8011b48:	1c43      	adds	r3, r0, #1
 8011b4a:	89a3      	ldrh	r3, [r4, #12]
 8011b4c:	d106      	bne.n	8011b5c <__sflush_r+0x68>
 8011b4e:	6829      	ldr	r1, [r5, #0]
 8011b50:	291d      	cmp	r1, #29
 8011b52:	d82b      	bhi.n	8011bac <__sflush_r+0xb8>
 8011b54:	4a29      	ldr	r2, [pc, #164]	; (8011bfc <__sflush_r+0x108>)
 8011b56:	410a      	asrs	r2, r1
 8011b58:	07d6      	lsls	r6, r2, #31
 8011b5a:	d427      	bmi.n	8011bac <__sflush_r+0xb8>
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	6062      	str	r2, [r4, #4]
 8011b60:	04d9      	lsls	r1, r3, #19
 8011b62:	6922      	ldr	r2, [r4, #16]
 8011b64:	6022      	str	r2, [r4, #0]
 8011b66:	d504      	bpl.n	8011b72 <__sflush_r+0x7e>
 8011b68:	1c42      	adds	r2, r0, #1
 8011b6a:	d101      	bne.n	8011b70 <__sflush_r+0x7c>
 8011b6c:	682b      	ldr	r3, [r5, #0]
 8011b6e:	b903      	cbnz	r3, 8011b72 <__sflush_r+0x7e>
 8011b70:	6560      	str	r0, [r4, #84]	; 0x54
 8011b72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b74:	602f      	str	r7, [r5, #0]
 8011b76:	2900      	cmp	r1, #0
 8011b78:	d0c9      	beq.n	8011b0e <__sflush_r+0x1a>
 8011b7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b7e:	4299      	cmp	r1, r3
 8011b80:	d002      	beq.n	8011b88 <__sflush_r+0x94>
 8011b82:	4628      	mov	r0, r5
 8011b84:	f7ff f9e2 	bl	8010f4c <_free_r>
 8011b88:	2000      	movs	r0, #0
 8011b8a:	6360      	str	r0, [r4, #52]	; 0x34
 8011b8c:	e7c0      	b.n	8011b10 <__sflush_r+0x1c>
 8011b8e:	2301      	movs	r3, #1
 8011b90:	4628      	mov	r0, r5
 8011b92:	47b0      	blx	r6
 8011b94:	1c41      	adds	r1, r0, #1
 8011b96:	d1c8      	bne.n	8011b2a <__sflush_r+0x36>
 8011b98:	682b      	ldr	r3, [r5, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d0c5      	beq.n	8011b2a <__sflush_r+0x36>
 8011b9e:	2b1d      	cmp	r3, #29
 8011ba0:	d001      	beq.n	8011ba6 <__sflush_r+0xb2>
 8011ba2:	2b16      	cmp	r3, #22
 8011ba4:	d101      	bne.n	8011baa <__sflush_r+0xb6>
 8011ba6:	602f      	str	r7, [r5, #0]
 8011ba8:	e7b1      	b.n	8011b0e <__sflush_r+0x1a>
 8011baa:	89a3      	ldrh	r3, [r4, #12]
 8011bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bb0:	81a3      	strh	r3, [r4, #12]
 8011bb2:	e7ad      	b.n	8011b10 <__sflush_r+0x1c>
 8011bb4:	690f      	ldr	r7, [r1, #16]
 8011bb6:	2f00      	cmp	r7, #0
 8011bb8:	d0a9      	beq.n	8011b0e <__sflush_r+0x1a>
 8011bba:	0793      	lsls	r3, r2, #30
 8011bbc:	680e      	ldr	r6, [r1, #0]
 8011bbe:	bf08      	it	eq
 8011bc0:	694b      	ldreq	r3, [r1, #20]
 8011bc2:	600f      	str	r7, [r1, #0]
 8011bc4:	bf18      	it	ne
 8011bc6:	2300      	movne	r3, #0
 8011bc8:	eba6 0807 	sub.w	r8, r6, r7
 8011bcc:	608b      	str	r3, [r1, #8]
 8011bce:	f1b8 0f00 	cmp.w	r8, #0
 8011bd2:	dd9c      	ble.n	8011b0e <__sflush_r+0x1a>
 8011bd4:	6a21      	ldr	r1, [r4, #32]
 8011bd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011bd8:	4643      	mov	r3, r8
 8011bda:	463a      	mov	r2, r7
 8011bdc:	4628      	mov	r0, r5
 8011bde:	47b0      	blx	r6
 8011be0:	2800      	cmp	r0, #0
 8011be2:	dc06      	bgt.n	8011bf2 <__sflush_r+0xfe>
 8011be4:	89a3      	ldrh	r3, [r4, #12]
 8011be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bea:	81a3      	strh	r3, [r4, #12]
 8011bec:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf0:	e78e      	b.n	8011b10 <__sflush_r+0x1c>
 8011bf2:	4407      	add	r7, r0
 8011bf4:	eba8 0800 	sub.w	r8, r8, r0
 8011bf8:	e7e9      	b.n	8011bce <__sflush_r+0xda>
 8011bfa:	bf00      	nop
 8011bfc:	dfbffffe 	.word	0xdfbffffe

08011c00 <_fflush_r>:
 8011c00:	b538      	push	{r3, r4, r5, lr}
 8011c02:	690b      	ldr	r3, [r1, #16]
 8011c04:	4605      	mov	r5, r0
 8011c06:	460c      	mov	r4, r1
 8011c08:	b913      	cbnz	r3, 8011c10 <_fflush_r+0x10>
 8011c0a:	2500      	movs	r5, #0
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	bd38      	pop	{r3, r4, r5, pc}
 8011c10:	b118      	cbz	r0, 8011c1a <_fflush_r+0x1a>
 8011c12:	6a03      	ldr	r3, [r0, #32]
 8011c14:	b90b      	cbnz	r3, 8011c1a <_fflush_r+0x1a>
 8011c16:	f7fe f9f5 	bl	8010004 <__sinit>
 8011c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d0f3      	beq.n	8011c0a <_fflush_r+0xa>
 8011c22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011c24:	07d0      	lsls	r0, r2, #31
 8011c26:	d404      	bmi.n	8011c32 <_fflush_r+0x32>
 8011c28:	0599      	lsls	r1, r3, #22
 8011c2a:	d402      	bmi.n	8011c32 <_fflush_r+0x32>
 8011c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c2e:	f7fe fb00 	bl	8010232 <__retarget_lock_acquire_recursive>
 8011c32:	4628      	mov	r0, r5
 8011c34:	4621      	mov	r1, r4
 8011c36:	f7ff ff5d 	bl	8011af4 <__sflush_r>
 8011c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c3c:	07da      	lsls	r2, r3, #31
 8011c3e:	4605      	mov	r5, r0
 8011c40:	d4e4      	bmi.n	8011c0c <_fflush_r+0xc>
 8011c42:	89a3      	ldrh	r3, [r4, #12]
 8011c44:	059b      	lsls	r3, r3, #22
 8011c46:	d4e1      	bmi.n	8011c0c <_fflush_r+0xc>
 8011c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c4a:	f7fe faf3 	bl	8010234 <__retarget_lock_release_recursive>
 8011c4e:	e7dd      	b.n	8011c0c <_fflush_r+0xc>

08011c50 <memmove>:
 8011c50:	4288      	cmp	r0, r1
 8011c52:	b510      	push	{r4, lr}
 8011c54:	eb01 0402 	add.w	r4, r1, r2
 8011c58:	d902      	bls.n	8011c60 <memmove+0x10>
 8011c5a:	4284      	cmp	r4, r0
 8011c5c:	4623      	mov	r3, r4
 8011c5e:	d807      	bhi.n	8011c70 <memmove+0x20>
 8011c60:	1e43      	subs	r3, r0, #1
 8011c62:	42a1      	cmp	r1, r4
 8011c64:	d008      	beq.n	8011c78 <memmove+0x28>
 8011c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c6e:	e7f8      	b.n	8011c62 <memmove+0x12>
 8011c70:	4402      	add	r2, r0
 8011c72:	4601      	mov	r1, r0
 8011c74:	428a      	cmp	r2, r1
 8011c76:	d100      	bne.n	8011c7a <memmove+0x2a>
 8011c78:	bd10      	pop	{r4, pc}
 8011c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c82:	e7f7      	b.n	8011c74 <memmove+0x24>

08011c84 <_sbrk_r>:
 8011c84:	b538      	push	{r3, r4, r5, lr}
 8011c86:	4d06      	ldr	r5, [pc, #24]	; (8011ca0 <_sbrk_r+0x1c>)
 8011c88:	2300      	movs	r3, #0
 8011c8a:	4604      	mov	r4, r0
 8011c8c:	4608      	mov	r0, r1
 8011c8e:	602b      	str	r3, [r5, #0]
 8011c90:	f7ef fe50 	bl	8001934 <_sbrk>
 8011c94:	1c43      	adds	r3, r0, #1
 8011c96:	d102      	bne.n	8011c9e <_sbrk_r+0x1a>
 8011c98:	682b      	ldr	r3, [r5, #0]
 8011c9a:	b103      	cbz	r3, 8011c9e <_sbrk_r+0x1a>
 8011c9c:	6023      	str	r3, [r4, #0]
 8011c9e:	bd38      	pop	{r3, r4, r5, pc}
 8011ca0:	20006dfc 	.word	0x20006dfc

08011ca4 <__assert_func>:
 8011ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ca6:	4614      	mov	r4, r2
 8011ca8:	461a      	mov	r2, r3
 8011caa:	4b09      	ldr	r3, [pc, #36]	; (8011cd0 <__assert_func+0x2c>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	4605      	mov	r5, r0
 8011cb0:	68d8      	ldr	r0, [r3, #12]
 8011cb2:	b14c      	cbz	r4, 8011cc8 <__assert_func+0x24>
 8011cb4:	4b07      	ldr	r3, [pc, #28]	; (8011cd4 <__assert_func+0x30>)
 8011cb6:	9100      	str	r1, [sp, #0]
 8011cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011cbc:	4906      	ldr	r1, [pc, #24]	; (8011cd8 <__assert_func+0x34>)
 8011cbe:	462b      	mov	r3, r5
 8011cc0:	f000 f872 	bl	8011da8 <fiprintf>
 8011cc4:	f000 f882 	bl	8011dcc <abort>
 8011cc8:	4b04      	ldr	r3, [pc, #16]	; (8011cdc <__assert_func+0x38>)
 8011cca:	461c      	mov	r4, r3
 8011ccc:	e7f3      	b.n	8011cb6 <__assert_func+0x12>
 8011cce:	bf00      	nop
 8011cd0:	200001d4 	.word	0x200001d4
 8011cd4:	0801414f 	.word	0x0801414f
 8011cd8:	0801415c 	.word	0x0801415c
 8011cdc:	0801418a 	.word	0x0801418a

08011ce0 <_calloc_r>:
 8011ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ce2:	fba1 2402 	umull	r2, r4, r1, r2
 8011ce6:	b94c      	cbnz	r4, 8011cfc <_calloc_r+0x1c>
 8011ce8:	4611      	mov	r1, r2
 8011cea:	9201      	str	r2, [sp, #4]
 8011cec:	f7ff f9a2 	bl	8011034 <_malloc_r>
 8011cf0:	9a01      	ldr	r2, [sp, #4]
 8011cf2:	4605      	mov	r5, r0
 8011cf4:	b930      	cbnz	r0, 8011d04 <_calloc_r+0x24>
 8011cf6:	4628      	mov	r0, r5
 8011cf8:	b003      	add	sp, #12
 8011cfa:	bd30      	pop	{r4, r5, pc}
 8011cfc:	220c      	movs	r2, #12
 8011cfe:	6002      	str	r2, [r0, #0]
 8011d00:	2500      	movs	r5, #0
 8011d02:	e7f8      	b.n	8011cf6 <_calloc_r+0x16>
 8011d04:	4621      	mov	r1, r4
 8011d06:	f7fe fa16 	bl	8010136 <memset>
 8011d0a:	e7f4      	b.n	8011cf6 <_calloc_r+0x16>

08011d0c <__ascii_mbtowc>:
 8011d0c:	b082      	sub	sp, #8
 8011d0e:	b901      	cbnz	r1, 8011d12 <__ascii_mbtowc+0x6>
 8011d10:	a901      	add	r1, sp, #4
 8011d12:	b142      	cbz	r2, 8011d26 <__ascii_mbtowc+0x1a>
 8011d14:	b14b      	cbz	r3, 8011d2a <__ascii_mbtowc+0x1e>
 8011d16:	7813      	ldrb	r3, [r2, #0]
 8011d18:	600b      	str	r3, [r1, #0]
 8011d1a:	7812      	ldrb	r2, [r2, #0]
 8011d1c:	1e10      	subs	r0, r2, #0
 8011d1e:	bf18      	it	ne
 8011d20:	2001      	movne	r0, #1
 8011d22:	b002      	add	sp, #8
 8011d24:	4770      	bx	lr
 8011d26:	4610      	mov	r0, r2
 8011d28:	e7fb      	b.n	8011d22 <__ascii_mbtowc+0x16>
 8011d2a:	f06f 0001 	mvn.w	r0, #1
 8011d2e:	e7f8      	b.n	8011d22 <__ascii_mbtowc+0x16>

08011d30 <_realloc_r>:
 8011d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d34:	4680      	mov	r8, r0
 8011d36:	4614      	mov	r4, r2
 8011d38:	460e      	mov	r6, r1
 8011d3a:	b921      	cbnz	r1, 8011d46 <_realloc_r+0x16>
 8011d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d40:	4611      	mov	r1, r2
 8011d42:	f7ff b977 	b.w	8011034 <_malloc_r>
 8011d46:	b92a      	cbnz	r2, 8011d54 <_realloc_r+0x24>
 8011d48:	f7ff f900 	bl	8010f4c <_free_r>
 8011d4c:	4625      	mov	r5, r4
 8011d4e:	4628      	mov	r0, r5
 8011d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d54:	f000 f841 	bl	8011dda <_malloc_usable_size_r>
 8011d58:	4284      	cmp	r4, r0
 8011d5a:	4607      	mov	r7, r0
 8011d5c:	d802      	bhi.n	8011d64 <_realloc_r+0x34>
 8011d5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011d62:	d812      	bhi.n	8011d8a <_realloc_r+0x5a>
 8011d64:	4621      	mov	r1, r4
 8011d66:	4640      	mov	r0, r8
 8011d68:	f7ff f964 	bl	8011034 <_malloc_r>
 8011d6c:	4605      	mov	r5, r0
 8011d6e:	2800      	cmp	r0, #0
 8011d70:	d0ed      	beq.n	8011d4e <_realloc_r+0x1e>
 8011d72:	42bc      	cmp	r4, r7
 8011d74:	4622      	mov	r2, r4
 8011d76:	4631      	mov	r1, r6
 8011d78:	bf28      	it	cs
 8011d7a:	463a      	movcs	r2, r7
 8011d7c:	f7fe fa5b 	bl	8010236 <memcpy>
 8011d80:	4631      	mov	r1, r6
 8011d82:	4640      	mov	r0, r8
 8011d84:	f7ff f8e2 	bl	8010f4c <_free_r>
 8011d88:	e7e1      	b.n	8011d4e <_realloc_r+0x1e>
 8011d8a:	4635      	mov	r5, r6
 8011d8c:	e7df      	b.n	8011d4e <_realloc_r+0x1e>

08011d8e <__ascii_wctomb>:
 8011d8e:	b149      	cbz	r1, 8011da4 <__ascii_wctomb+0x16>
 8011d90:	2aff      	cmp	r2, #255	; 0xff
 8011d92:	bf85      	ittet	hi
 8011d94:	238a      	movhi	r3, #138	; 0x8a
 8011d96:	6003      	strhi	r3, [r0, #0]
 8011d98:	700a      	strbls	r2, [r1, #0]
 8011d9a:	f04f 30ff 	movhi.w	r0, #4294967295
 8011d9e:	bf98      	it	ls
 8011da0:	2001      	movls	r0, #1
 8011da2:	4770      	bx	lr
 8011da4:	4608      	mov	r0, r1
 8011da6:	4770      	bx	lr

08011da8 <fiprintf>:
 8011da8:	b40e      	push	{r1, r2, r3}
 8011daa:	b503      	push	{r0, r1, lr}
 8011dac:	4601      	mov	r1, r0
 8011dae:	ab03      	add	r3, sp, #12
 8011db0:	4805      	ldr	r0, [pc, #20]	; (8011dc8 <fiprintf+0x20>)
 8011db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011db6:	6800      	ldr	r0, [r0, #0]
 8011db8:	9301      	str	r3, [sp, #4]
 8011dba:	f000 f83f 	bl	8011e3c <_vfiprintf_r>
 8011dbe:	b002      	add	sp, #8
 8011dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dc4:	b003      	add	sp, #12
 8011dc6:	4770      	bx	lr
 8011dc8:	200001d4 	.word	0x200001d4

08011dcc <abort>:
 8011dcc:	b508      	push	{r3, lr}
 8011dce:	2006      	movs	r0, #6
 8011dd0:	f000 fa0c 	bl	80121ec <raise>
 8011dd4:	2001      	movs	r0, #1
 8011dd6:	f7ef fd35 	bl	8001844 <_exit>

08011dda <_malloc_usable_size_r>:
 8011dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dde:	1f18      	subs	r0, r3, #4
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	bfbc      	itt	lt
 8011de4:	580b      	ldrlt	r3, [r1, r0]
 8011de6:	18c0      	addlt	r0, r0, r3
 8011de8:	4770      	bx	lr

08011dea <__sfputc_r>:
 8011dea:	6893      	ldr	r3, [r2, #8]
 8011dec:	3b01      	subs	r3, #1
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	b410      	push	{r4}
 8011df2:	6093      	str	r3, [r2, #8]
 8011df4:	da08      	bge.n	8011e08 <__sfputc_r+0x1e>
 8011df6:	6994      	ldr	r4, [r2, #24]
 8011df8:	42a3      	cmp	r3, r4
 8011dfa:	db01      	blt.n	8011e00 <__sfputc_r+0x16>
 8011dfc:	290a      	cmp	r1, #10
 8011dfe:	d103      	bne.n	8011e08 <__sfputc_r+0x1e>
 8011e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e04:	f000 b934 	b.w	8012070 <__swbuf_r>
 8011e08:	6813      	ldr	r3, [r2, #0]
 8011e0a:	1c58      	adds	r0, r3, #1
 8011e0c:	6010      	str	r0, [r2, #0]
 8011e0e:	7019      	strb	r1, [r3, #0]
 8011e10:	4608      	mov	r0, r1
 8011e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e16:	4770      	bx	lr

08011e18 <__sfputs_r>:
 8011e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e1a:	4606      	mov	r6, r0
 8011e1c:	460f      	mov	r7, r1
 8011e1e:	4614      	mov	r4, r2
 8011e20:	18d5      	adds	r5, r2, r3
 8011e22:	42ac      	cmp	r4, r5
 8011e24:	d101      	bne.n	8011e2a <__sfputs_r+0x12>
 8011e26:	2000      	movs	r0, #0
 8011e28:	e007      	b.n	8011e3a <__sfputs_r+0x22>
 8011e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e2e:	463a      	mov	r2, r7
 8011e30:	4630      	mov	r0, r6
 8011e32:	f7ff ffda 	bl	8011dea <__sfputc_r>
 8011e36:	1c43      	adds	r3, r0, #1
 8011e38:	d1f3      	bne.n	8011e22 <__sfputs_r+0xa>
 8011e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e3c <_vfiprintf_r>:
 8011e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e40:	460d      	mov	r5, r1
 8011e42:	b09d      	sub	sp, #116	; 0x74
 8011e44:	4614      	mov	r4, r2
 8011e46:	4698      	mov	r8, r3
 8011e48:	4606      	mov	r6, r0
 8011e4a:	b118      	cbz	r0, 8011e54 <_vfiprintf_r+0x18>
 8011e4c:	6a03      	ldr	r3, [r0, #32]
 8011e4e:	b90b      	cbnz	r3, 8011e54 <_vfiprintf_r+0x18>
 8011e50:	f7fe f8d8 	bl	8010004 <__sinit>
 8011e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e56:	07d9      	lsls	r1, r3, #31
 8011e58:	d405      	bmi.n	8011e66 <_vfiprintf_r+0x2a>
 8011e5a:	89ab      	ldrh	r3, [r5, #12]
 8011e5c:	059a      	lsls	r2, r3, #22
 8011e5e:	d402      	bmi.n	8011e66 <_vfiprintf_r+0x2a>
 8011e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e62:	f7fe f9e6 	bl	8010232 <__retarget_lock_acquire_recursive>
 8011e66:	89ab      	ldrh	r3, [r5, #12]
 8011e68:	071b      	lsls	r3, r3, #28
 8011e6a:	d501      	bpl.n	8011e70 <_vfiprintf_r+0x34>
 8011e6c:	692b      	ldr	r3, [r5, #16]
 8011e6e:	b99b      	cbnz	r3, 8011e98 <_vfiprintf_r+0x5c>
 8011e70:	4629      	mov	r1, r5
 8011e72:	4630      	mov	r0, r6
 8011e74:	f000 f93a 	bl	80120ec <__swsetup_r>
 8011e78:	b170      	cbz	r0, 8011e98 <_vfiprintf_r+0x5c>
 8011e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e7c:	07dc      	lsls	r4, r3, #31
 8011e7e:	d504      	bpl.n	8011e8a <_vfiprintf_r+0x4e>
 8011e80:	f04f 30ff 	mov.w	r0, #4294967295
 8011e84:	b01d      	add	sp, #116	; 0x74
 8011e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e8a:	89ab      	ldrh	r3, [r5, #12]
 8011e8c:	0598      	lsls	r0, r3, #22
 8011e8e:	d4f7      	bmi.n	8011e80 <_vfiprintf_r+0x44>
 8011e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e92:	f7fe f9cf 	bl	8010234 <__retarget_lock_release_recursive>
 8011e96:	e7f3      	b.n	8011e80 <_vfiprintf_r+0x44>
 8011e98:	2300      	movs	r3, #0
 8011e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8011e9c:	2320      	movs	r3, #32
 8011e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ea6:	2330      	movs	r3, #48	; 0x30
 8011ea8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801205c <_vfiprintf_r+0x220>
 8011eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011eb0:	f04f 0901 	mov.w	r9, #1
 8011eb4:	4623      	mov	r3, r4
 8011eb6:	469a      	mov	sl, r3
 8011eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ebc:	b10a      	cbz	r2, 8011ec2 <_vfiprintf_r+0x86>
 8011ebe:	2a25      	cmp	r2, #37	; 0x25
 8011ec0:	d1f9      	bne.n	8011eb6 <_vfiprintf_r+0x7a>
 8011ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8011ec6:	d00b      	beq.n	8011ee0 <_vfiprintf_r+0xa4>
 8011ec8:	465b      	mov	r3, fp
 8011eca:	4622      	mov	r2, r4
 8011ecc:	4629      	mov	r1, r5
 8011ece:	4630      	mov	r0, r6
 8011ed0:	f7ff ffa2 	bl	8011e18 <__sfputs_r>
 8011ed4:	3001      	adds	r0, #1
 8011ed6:	f000 80a9 	beq.w	801202c <_vfiprintf_r+0x1f0>
 8011eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011edc:	445a      	add	r2, fp
 8011ede:	9209      	str	r2, [sp, #36]	; 0x24
 8011ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	f000 80a1 	beq.w	801202c <_vfiprintf_r+0x1f0>
 8011eea:	2300      	movs	r3, #0
 8011eec:	f04f 32ff 	mov.w	r2, #4294967295
 8011ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ef4:	f10a 0a01 	add.w	sl, sl, #1
 8011ef8:	9304      	str	r3, [sp, #16]
 8011efa:	9307      	str	r3, [sp, #28]
 8011efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f00:	931a      	str	r3, [sp, #104]	; 0x68
 8011f02:	4654      	mov	r4, sl
 8011f04:	2205      	movs	r2, #5
 8011f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f0a:	4854      	ldr	r0, [pc, #336]	; (801205c <_vfiprintf_r+0x220>)
 8011f0c:	f7ee f970 	bl	80001f0 <memchr>
 8011f10:	9a04      	ldr	r2, [sp, #16]
 8011f12:	b9d8      	cbnz	r0, 8011f4c <_vfiprintf_r+0x110>
 8011f14:	06d1      	lsls	r1, r2, #27
 8011f16:	bf44      	itt	mi
 8011f18:	2320      	movmi	r3, #32
 8011f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f1e:	0713      	lsls	r3, r2, #28
 8011f20:	bf44      	itt	mi
 8011f22:	232b      	movmi	r3, #43	; 0x2b
 8011f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f28:	f89a 3000 	ldrb.w	r3, [sl]
 8011f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8011f2e:	d015      	beq.n	8011f5c <_vfiprintf_r+0x120>
 8011f30:	9a07      	ldr	r2, [sp, #28]
 8011f32:	4654      	mov	r4, sl
 8011f34:	2000      	movs	r0, #0
 8011f36:	f04f 0c0a 	mov.w	ip, #10
 8011f3a:	4621      	mov	r1, r4
 8011f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f40:	3b30      	subs	r3, #48	; 0x30
 8011f42:	2b09      	cmp	r3, #9
 8011f44:	d94d      	bls.n	8011fe2 <_vfiprintf_r+0x1a6>
 8011f46:	b1b0      	cbz	r0, 8011f76 <_vfiprintf_r+0x13a>
 8011f48:	9207      	str	r2, [sp, #28]
 8011f4a:	e014      	b.n	8011f76 <_vfiprintf_r+0x13a>
 8011f4c:	eba0 0308 	sub.w	r3, r0, r8
 8011f50:	fa09 f303 	lsl.w	r3, r9, r3
 8011f54:	4313      	orrs	r3, r2
 8011f56:	9304      	str	r3, [sp, #16]
 8011f58:	46a2      	mov	sl, r4
 8011f5a:	e7d2      	b.n	8011f02 <_vfiprintf_r+0xc6>
 8011f5c:	9b03      	ldr	r3, [sp, #12]
 8011f5e:	1d19      	adds	r1, r3, #4
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	9103      	str	r1, [sp, #12]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	bfbb      	ittet	lt
 8011f68:	425b      	neglt	r3, r3
 8011f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8011f6e:	9307      	strge	r3, [sp, #28]
 8011f70:	9307      	strlt	r3, [sp, #28]
 8011f72:	bfb8      	it	lt
 8011f74:	9204      	strlt	r2, [sp, #16]
 8011f76:	7823      	ldrb	r3, [r4, #0]
 8011f78:	2b2e      	cmp	r3, #46	; 0x2e
 8011f7a:	d10c      	bne.n	8011f96 <_vfiprintf_r+0x15a>
 8011f7c:	7863      	ldrb	r3, [r4, #1]
 8011f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8011f80:	d134      	bne.n	8011fec <_vfiprintf_r+0x1b0>
 8011f82:	9b03      	ldr	r3, [sp, #12]
 8011f84:	1d1a      	adds	r2, r3, #4
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	9203      	str	r2, [sp, #12]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	bfb8      	it	lt
 8011f8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f92:	3402      	adds	r4, #2
 8011f94:	9305      	str	r3, [sp, #20]
 8011f96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801206c <_vfiprintf_r+0x230>
 8011f9a:	7821      	ldrb	r1, [r4, #0]
 8011f9c:	2203      	movs	r2, #3
 8011f9e:	4650      	mov	r0, sl
 8011fa0:	f7ee f926 	bl	80001f0 <memchr>
 8011fa4:	b138      	cbz	r0, 8011fb6 <_vfiprintf_r+0x17a>
 8011fa6:	9b04      	ldr	r3, [sp, #16]
 8011fa8:	eba0 000a 	sub.w	r0, r0, sl
 8011fac:	2240      	movs	r2, #64	; 0x40
 8011fae:	4082      	lsls	r2, r0
 8011fb0:	4313      	orrs	r3, r2
 8011fb2:	3401      	adds	r4, #1
 8011fb4:	9304      	str	r3, [sp, #16]
 8011fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fba:	4829      	ldr	r0, [pc, #164]	; (8012060 <_vfiprintf_r+0x224>)
 8011fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fc0:	2206      	movs	r2, #6
 8011fc2:	f7ee f915 	bl	80001f0 <memchr>
 8011fc6:	2800      	cmp	r0, #0
 8011fc8:	d03f      	beq.n	801204a <_vfiprintf_r+0x20e>
 8011fca:	4b26      	ldr	r3, [pc, #152]	; (8012064 <_vfiprintf_r+0x228>)
 8011fcc:	bb1b      	cbnz	r3, 8012016 <_vfiprintf_r+0x1da>
 8011fce:	9b03      	ldr	r3, [sp, #12]
 8011fd0:	3307      	adds	r3, #7
 8011fd2:	f023 0307 	bic.w	r3, r3, #7
 8011fd6:	3308      	adds	r3, #8
 8011fd8:	9303      	str	r3, [sp, #12]
 8011fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fdc:	443b      	add	r3, r7
 8011fde:	9309      	str	r3, [sp, #36]	; 0x24
 8011fe0:	e768      	b.n	8011eb4 <_vfiprintf_r+0x78>
 8011fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fe6:	460c      	mov	r4, r1
 8011fe8:	2001      	movs	r0, #1
 8011fea:	e7a6      	b.n	8011f3a <_vfiprintf_r+0xfe>
 8011fec:	2300      	movs	r3, #0
 8011fee:	3401      	adds	r4, #1
 8011ff0:	9305      	str	r3, [sp, #20]
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	f04f 0c0a 	mov.w	ip, #10
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ffe:	3a30      	subs	r2, #48	; 0x30
 8012000:	2a09      	cmp	r2, #9
 8012002:	d903      	bls.n	801200c <_vfiprintf_r+0x1d0>
 8012004:	2b00      	cmp	r3, #0
 8012006:	d0c6      	beq.n	8011f96 <_vfiprintf_r+0x15a>
 8012008:	9105      	str	r1, [sp, #20]
 801200a:	e7c4      	b.n	8011f96 <_vfiprintf_r+0x15a>
 801200c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012010:	4604      	mov	r4, r0
 8012012:	2301      	movs	r3, #1
 8012014:	e7f0      	b.n	8011ff8 <_vfiprintf_r+0x1bc>
 8012016:	ab03      	add	r3, sp, #12
 8012018:	9300      	str	r3, [sp, #0]
 801201a:	462a      	mov	r2, r5
 801201c:	4b12      	ldr	r3, [pc, #72]	; (8012068 <_vfiprintf_r+0x22c>)
 801201e:	a904      	add	r1, sp, #16
 8012020:	4630      	mov	r0, r6
 8012022:	f7fd fb9d 	bl	800f760 <_printf_float>
 8012026:	4607      	mov	r7, r0
 8012028:	1c78      	adds	r0, r7, #1
 801202a:	d1d6      	bne.n	8011fda <_vfiprintf_r+0x19e>
 801202c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801202e:	07d9      	lsls	r1, r3, #31
 8012030:	d405      	bmi.n	801203e <_vfiprintf_r+0x202>
 8012032:	89ab      	ldrh	r3, [r5, #12]
 8012034:	059a      	lsls	r2, r3, #22
 8012036:	d402      	bmi.n	801203e <_vfiprintf_r+0x202>
 8012038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801203a:	f7fe f8fb 	bl	8010234 <__retarget_lock_release_recursive>
 801203e:	89ab      	ldrh	r3, [r5, #12]
 8012040:	065b      	lsls	r3, r3, #25
 8012042:	f53f af1d 	bmi.w	8011e80 <_vfiprintf_r+0x44>
 8012046:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012048:	e71c      	b.n	8011e84 <_vfiprintf_r+0x48>
 801204a:	ab03      	add	r3, sp, #12
 801204c:	9300      	str	r3, [sp, #0]
 801204e:	462a      	mov	r2, r5
 8012050:	4b05      	ldr	r3, [pc, #20]	; (8012068 <_vfiprintf_r+0x22c>)
 8012052:	a904      	add	r1, sp, #16
 8012054:	4630      	mov	r0, r6
 8012056:	f7fd fe27 	bl	800fca8 <_printf_i>
 801205a:	e7e4      	b.n	8012026 <_vfiprintf_r+0x1ea>
 801205c:	08014134 	.word	0x08014134
 8012060:	0801413e 	.word	0x0801413e
 8012064:	0800f761 	.word	0x0800f761
 8012068:	08011e19 	.word	0x08011e19
 801206c:	0801413a 	.word	0x0801413a

08012070 <__swbuf_r>:
 8012070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012072:	460e      	mov	r6, r1
 8012074:	4614      	mov	r4, r2
 8012076:	4605      	mov	r5, r0
 8012078:	b118      	cbz	r0, 8012082 <__swbuf_r+0x12>
 801207a:	6a03      	ldr	r3, [r0, #32]
 801207c:	b90b      	cbnz	r3, 8012082 <__swbuf_r+0x12>
 801207e:	f7fd ffc1 	bl	8010004 <__sinit>
 8012082:	69a3      	ldr	r3, [r4, #24]
 8012084:	60a3      	str	r3, [r4, #8]
 8012086:	89a3      	ldrh	r3, [r4, #12]
 8012088:	071a      	lsls	r2, r3, #28
 801208a:	d525      	bpl.n	80120d8 <__swbuf_r+0x68>
 801208c:	6923      	ldr	r3, [r4, #16]
 801208e:	b31b      	cbz	r3, 80120d8 <__swbuf_r+0x68>
 8012090:	6823      	ldr	r3, [r4, #0]
 8012092:	6922      	ldr	r2, [r4, #16]
 8012094:	1a98      	subs	r0, r3, r2
 8012096:	6963      	ldr	r3, [r4, #20]
 8012098:	b2f6      	uxtb	r6, r6
 801209a:	4283      	cmp	r3, r0
 801209c:	4637      	mov	r7, r6
 801209e:	dc04      	bgt.n	80120aa <__swbuf_r+0x3a>
 80120a0:	4621      	mov	r1, r4
 80120a2:	4628      	mov	r0, r5
 80120a4:	f7ff fdac 	bl	8011c00 <_fflush_r>
 80120a8:	b9e0      	cbnz	r0, 80120e4 <__swbuf_r+0x74>
 80120aa:	68a3      	ldr	r3, [r4, #8]
 80120ac:	3b01      	subs	r3, #1
 80120ae:	60a3      	str	r3, [r4, #8]
 80120b0:	6823      	ldr	r3, [r4, #0]
 80120b2:	1c5a      	adds	r2, r3, #1
 80120b4:	6022      	str	r2, [r4, #0]
 80120b6:	701e      	strb	r6, [r3, #0]
 80120b8:	6962      	ldr	r2, [r4, #20]
 80120ba:	1c43      	adds	r3, r0, #1
 80120bc:	429a      	cmp	r2, r3
 80120be:	d004      	beq.n	80120ca <__swbuf_r+0x5a>
 80120c0:	89a3      	ldrh	r3, [r4, #12]
 80120c2:	07db      	lsls	r3, r3, #31
 80120c4:	d506      	bpl.n	80120d4 <__swbuf_r+0x64>
 80120c6:	2e0a      	cmp	r6, #10
 80120c8:	d104      	bne.n	80120d4 <__swbuf_r+0x64>
 80120ca:	4621      	mov	r1, r4
 80120cc:	4628      	mov	r0, r5
 80120ce:	f7ff fd97 	bl	8011c00 <_fflush_r>
 80120d2:	b938      	cbnz	r0, 80120e4 <__swbuf_r+0x74>
 80120d4:	4638      	mov	r0, r7
 80120d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120d8:	4621      	mov	r1, r4
 80120da:	4628      	mov	r0, r5
 80120dc:	f000 f806 	bl	80120ec <__swsetup_r>
 80120e0:	2800      	cmp	r0, #0
 80120e2:	d0d5      	beq.n	8012090 <__swbuf_r+0x20>
 80120e4:	f04f 37ff 	mov.w	r7, #4294967295
 80120e8:	e7f4      	b.n	80120d4 <__swbuf_r+0x64>
	...

080120ec <__swsetup_r>:
 80120ec:	b538      	push	{r3, r4, r5, lr}
 80120ee:	4b2a      	ldr	r3, [pc, #168]	; (8012198 <__swsetup_r+0xac>)
 80120f0:	4605      	mov	r5, r0
 80120f2:	6818      	ldr	r0, [r3, #0]
 80120f4:	460c      	mov	r4, r1
 80120f6:	b118      	cbz	r0, 8012100 <__swsetup_r+0x14>
 80120f8:	6a03      	ldr	r3, [r0, #32]
 80120fa:	b90b      	cbnz	r3, 8012100 <__swsetup_r+0x14>
 80120fc:	f7fd ff82 	bl	8010004 <__sinit>
 8012100:	89a3      	ldrh	r3, [r4, #12]
 8012102:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012106:	0718      	lsls	r0, r3, #28
 8012108:	d422      	bmi.n	8012150 <__swsetup_r+0x64>
 801210a:	06d9      	lsls	r1, r3, #27
 801210c:	d407      	bmi.n	801211e <__swsetup_r+0x32>
 801210e:	2309      	movs	r3, #9
 8012110:	602b      	str	r3, [r5, #0]
 8012112:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012116:	81a3      	strh	r3, [r4, #12]
 8012118:	f04f 30ff 	mov.w	r0, #4294967295
 801211c:	e034      	b.n	8012188 <__swsetup_r+0x9c>
 801211e:	0758      	lsls	r0, r3, #29
 8012120:	d512      	bpl.n	8012148 <__swsetup_r+0x5c>
 8012122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012124:	b141      	cbz	r1, 8012138 <__swsetup_r+0x4c>
 8012126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801212a:	4299      	cmp	r1, r3
 801212c:	d002      	beq.n	8012134 <__swsetup_r+0x48>
 801212e:	4628      	mov	r0, r5
 8012130:	f7fe ff0c 	bl	8010f4c <_free_r>
 8012134:	2300      	movs	r3, #0
 8012136:	6363      	str	r3, [r4, #52]	; 0x34
 8012138:	89a3      	ldrh	r3, [r4, #12]
 801213a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801213e:	81a3      	strh	r3, [r4, #12]
 8012140:	2300      	movs	r3, #0
 8012142:	6063      	str	r3, [r4, #4]
 8012144:	6923      	ldr	r3, [r4, #16]
 8012146:	6023      	str	r3, [r4, #0]
 8012148:	89a3      	ldrh	r3, [r4, #12]
 801214a:	f043 0308 	orr.w	r3, r3, #8
 801214e:	81a3      	strh	r3, [r4, #12]
 8012150:	6923      	ldr	r3, [r4, #16]
 8012152:	b94b      	cbnz	r3, 8012168 <__swsetup_r+0x7c>
 8012154:	89a3      	ldrh	r3, [r4, #12]
 8012156:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801215a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801215e:	d003      	beq.n	8012168 <__swsetup_r+0x7c>
 8012160:	4621      	mov	r1, r4
 8012162:	4628      	mov	r0, r5
 8012164:	f000 f884 	bl	8012270 <__smakebuf_r>
 8012168:	89a0      	ldrh	r0, [r4, #12]
 801216a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801216e:	f010 0301 	ands.w	r3, r0, #1
 8012172:	d00a      	beq.n	801218a <__swsetup_r+0x9e>
 8012174:	2300      	movs	r3, #0
 8012176:	60a3      	str	r3, [r4, #8]
 8012178:	6963      	ldr	r3, [r4, #20]
 801217a:	425b      	negs	r3, r3
 801217c:	61a3      	str	r3, [r4, #24]
 801217e:	6923      	ldr	r3, [r4, #16]
 8012180:	b943      	cbnz	r3, 8012194 <__swsetup_r+0xa8>
 8012182:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012186:	d1c4      	bne.n	8012112 <__swsetup_r+0x26>
 8012188:	bd38      	pop	{r3, r4, r5, pc}
 801218a:	0781      	lsls	r1, r0, #30
 801218c:	bf58      	it	pl
 801218e:	6963      	ldrpl	r3, [r4, #20]
 8012190:	60a3      	str	r3, [r4, #8]
 8012192:	e7f4      	b.n	801217e <__swsetup_r+0x92>
 8012194:	2000      	movs	r0, #0
 8012196:	e7f7      	b.n	8012188 <__swsetup_r+0x9c>
 8012198:	200001d4 	.word	0x200001d4

0801219c <_raise_r>:
 801219c:	291f      	cmp	r1, #31
 801219e:	b538      	push	{r3, r4, r5, lr}
 80121a0:	4604      	mov	r4, r0
 80121a2:	460d      	mov	r5, r1
 80121a4:	d904      	bls.n	80121b0 <_raise_r+0x14>
 80121a6:	2316      	movs	r3, #22
 80121a8:	6003      	str	r3, [r0, #0]
 80121aa:	f04f 30ff 	mov.w	r0, #4294967295
 80121ae:	bd38      	pop	{r3, r4, r5, pc}
 80121b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80121b2:	b112      	cbz	r2, 80121ba <_raise_r+0x1e>
 80121b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80121b8:	b94b      	cbnz	r3, 80121ce <_raise_r+0x32>
 80121ba:	4620      	mov	r0, r4
 80121bc:	f000 f830 	bl	8012220 <_getpid_r>
 80121c0:	462a      	mov	r2, r5
 80121c2:	4601      	mov	r1, r0
 80121c4:	4620      	mov	r0, r4
 80121c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121ca:	f000 b817 	b.w	80121fc <_kill_r>
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d00a      	beq.n	80121e8 <_raise_r+0x4c>
 80121d2:	1c59      	adds	r1, r3, #1
 80121d4:	d103      	bne.n	80121de <_raise_r+0x42>
 80121d6:	2316      	movs	r3, #22
 80121d8:	6003      	str	r3, [r0, #0]
 80121da:	2001      	movs	r0, #1
 80121dc:	e7e7      	b.n	80121ae <_raise_r+0x12>
 80121de:	2400      	movs	r4, #0
 80121e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80121e4:	4628      	mov	r0, r5
 80121e6:	4798      	blx	r3
 80121e8:	2000      	movs	r0, #0
 80121ea:	e7e0      	b.n	80121ae <_raise_r+0x12>

080121ec <raise>:
 80121ec:	4b02      	ldr	r3, [pc, #8]	; (80121f8 <raise+0xc>)
 80121ee:	4601      	mov	r1, r0
 80121f0:	6818      	ldr	r0, [r3, #0]
 80121f2:	f7ff bfd3 	b.w	801219c <_raise_r>
 80121f6:	bf00      	nop
 80121f8:	200001d4 	.word	0x200001d4

080121fc <_kill_r>:
 80121fc:	b538      	push	{r3, r4, r5, lr}
 80121fe:	4d07      	ldr	r5, [pc, #28]	; (801221c <_kill_r+0x20>)
 8012200:	2300      	movs	r3, #0
 8012202:	4604      	mov	r4, r0
 8012204:	4608      	mov	r0, r1
 8012206:	4611      	mov	r1, r2
 8012208:	602b      	str	r3, [r5, #0]
 801220a:	f7ef fb0b 	bl	8001824 <_kill>
 801220e:	1c43      	adds	r3, r0, #1
 8012210:	d102      	bne.n	8012218 <_kill_r+0x1c>
 8012212:	682b      	ldr	r3, [r5, #0]
 8012214:	b103      	cbz	r3, 8012218 <_kill_r+0x1c>
 8012216:	6023      	str	r3, [r4, #0]
 8012218:	bd38      	pop	{r3, r4, r5, pc}
 801221a:	bf00      	nop
 801221c:	20006dfc 	.word	0x20006dfc

08012220 <_getpid_r>:
 8012220:	f7ef baf8 	b.w	8001814 <_getpid>

08012224 <__swhatbuf_r>:
 8012224:	b570      	push	{r4, r5, r6, lr}
 8012226:	460c      	mov	r4, r1
 8012228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801222c:	2900      	cmp	r1, #0
 801222e:	b096      	sub	sp, #88	; 0x58
 8012230:	4615      	mov	r5, r2
 8012232:	461e      	mov	r6, r3
 8012234:	da0d      	bge.n	8012252 <__swhatbuf_r+0x2e>
 8012236:	89a3      	ldrh	r3, [r4, #12]
 8012238:	f013 0f80 	tst.w	r3, #128	; 0x80
 801223c:	f04f 0100 	mov.w	r1, #0
 8012240:	bf0c      	ite	eq
 8012242:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012246:	2340      	movne	r3, #64	; 0x40
 8012248:	2000      	movs	r0, #0
 801224a:	6031      	str	r1, [r6, #0]
 801224c:	602b      	str	r3, [r5, #0]
 801224e:	b016      	add	sp, #88	; 0x58
 8012250:	bd70      	pop	{r4, r5, r6, pc}
 8012252:	466a      	mov	r2, sp
 8012254:	f000 f848 	bl	80122e8 <_fstat_r>
 8012258:	2800      	cmp	r0, #0
 801225a:	dbec      	blt.n	8012236 <__swhatbuf_r+0x12>
 801225c:	9901      	ldr	r1, [sp, #4]
 801225e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012262:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012266:	4259      	negs	r1, r3
 8012268:	4159      	adcs	r1, r3
 801226a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801226e:	e7eb      	b.n	8012248 <__swhatbuf_r+0x24>

08012270 <__smakebuf_r>:
 8012270:	898b      	ldrh	r3, [r1, #12]
 8012272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012274:	079d      	lsls	r5, r3, #30
 8012276:	4606      	mov	r6, r0
 8012278:	460c      	mov	r4, r1
 801227a:	d507      	bpl.n	801228c <__smakebuf_r+0x1c>
 801227c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012280:	6023      	str	r3, [r4, #0]
 8012282:	6123      	str	r3, [r4, #16]
 8012284:	2301      	movs	r3, #1
 8012286:	6163      	str	r3, [r4, #20]
 8012288:	b002      	add	sp, #8
 801228a:	bd70      	pop	{r4, r5, r6, pc}
 801228c:	ab01      	add	r3, sp, #4
 801228e:	466a      	mov	r2, sp
 8012290:	f7ff ffc8 	bl	8012224 <__swhatbuf_r>
 8012294:	9900      	ldr	r1, [sp, #0]
 8012296:	4605      	mov	r5, r0
 8012298:	4630      	mov	r0, r6
 801229a:	f7fe fecb 	bl	8011034 <_malloc_r>
 801229e:	b948      	cbnz	r0, 80122b4 <__smakebuf_r+0x44>
 80122a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122a4:	059a      	lsls	r2, r3, #22
 80122a6:	d4ef      	bmi.n	8012288 <__smakebuf_r+0x18>
 80122a8:	f023 0303 	bic.w	r3, r3, #3
 80122ac:	f043 0302 	orr.w	r3, r3, #2
 80122b0:	81a3      	strh	r3, [r4, #12]
 80122b2:	e7e3      	b.n	801227c <__smakebuf_r+0xc>
 80122b4:	89a3      	ldrh	r3, [r4, #12]
 80122b6:	6020      	str	r0, [r4, #0]
 80122b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122bc:	81a3      	strh	r3, [r4, #12]
 80122be:	9b00      	ldr	r3, [sp, #0]
 80122c0:	6163      	str	r3, [r4, #20]
 80122c2:	9b01      	ldr	r3, [sp, #4]
 80122c4:	6120      	str	r0, [r4, #16]
 80122c6:	b15b      	cbz	r3, 80122e0 <__smakebuf_r+0x70>
 80122c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122cc:	4630      	mov	r0, r6
 80122ce:	f000 f81d 	bl	801230c <_isatty_r>
 80122d2:	b128      	cbz	r0, 80122e0 <__smakebuf_r+0x70>
 80122d4:	89a3      	ldrh	r3, [r4, #12]
 80122d6:	f023 0303 	bic.w	r3, r3, #3
 80122da:	f043 0301 	orr.w	r3, r3, #1
 80122de:	81a3      	strh	r3, [r4, #12]
 80122e0:	89a3      	ldrh	r3, [r4, #12]
 80122e2:	431d      	orrs	r5, r3
 80122e4:	81a5      	strh	r5, [r4, #12]
 80122e6:	e7cf      	b.n	8012288 <__smakebuf_r+0x18>

080122e8 <_fstat_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4d07      	ldr	r5, [pc, #28]	; (8012308 <_fstat_r+0x20>)
 80122ec:	2300      	movs	r3, #0
 80122ee:	4604      	mov	r4, r0
 80122f0:	4608      	mov	r0, r1
 80122f2:	4611      	mov	r1, r2
 80122f4:	602b      	str	r3, [r5, #0]
 80122f6:	f7ef faf4 	bl	80018e2 <_fstat>
 80122fa:	1c43      	adds	r3, r0, #1
 80122fc:	d102      	bne.n	8012304 <_fstat_r+0x1c>
 80122fe:	682b      	ldr	r3, [r5, #0]
 8012300:	b103      	cbz	r3, 8012304 <_fstat_r+0x1c>
 8012302:	6023      	str	r3, [r4, #0]
 8012304:	bd38      	pop	{r3, r4, r5, pc}
 8012306:	bf00      	nop
 8012308:	20006dfc 	.word	0x20006dfc

0801230c <_isatty_r>:
 801230c:	b538      	push	{r3, r4, r5, lr}
 801230e:	4d06      	ldr	r5, [pc, #24]	; (8012328 <_isatty_r+0x1c>)
 8012310:	2300      	movs	r3, #0
 8012312:	4604      	mov	r4, r0
 8012314:	4608      	mov	r0, r1
 8012316:	602b      	str	r3, [r5, #0]
 8012318:	f7ef faf3 	bl	8001902 <_isatty>
 801231c:	1c43      	adds	r3, r0, #1
 801231e:	d102      	bne.n	8012326 <_isatty_r+0x1a>
 8012320:	682b      	ldr	r3, [r5, #0]
 8012322:	b103      	cbz	r3, 8012326 <_isatty_r+0x1a>
 8012324:	6023      	str	r3, [r4, #0]
 8012326:	bd38      	pop	{r3, r4, r5, pc}
 8012328:	20006dfc 	.word	0x20006dfc

0801232c <_init>:
 801232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801232e:	bf00      	nop
 8012330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012332:	bc08      	pop	{r3}
 8012334:	469e      	mov	lr, r3
 8012336:	4770      	bx	lr

08012338 <_fini>:
 8012338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801233a:	bf00      	nop
 801233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801233e:	bc08      	pop	{r3}
 8012340:	469e      	mov	lr, r3
 8012342:	4770      	bx	lr
