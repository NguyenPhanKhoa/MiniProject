
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ff4  08013498  08013498  00023498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801548c  0801548c  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  0801548c  0801548c  0002548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015494  08015494  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015494  08015494  00025494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015498  08015498  00025498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0801549c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030350  2**0
                  CONTENTS
 10 .bss          00006c04  20000350  20000350  00030350  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  20006f54  20006f54  00030350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002d253  00000000  00000000  000303c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006b18  00000000  00000000  0005d616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002848  00000000  00000000  00064130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ef4  00000000  00000000  00066978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a7ef  00000000  00000000  0006886c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030029  00000000  00000000  0007305b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f7a0b  00000000  00000000  000a3084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bb1c  00000000  00000000  0019aa90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001a65ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000350 	.word	0x20000350
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801347c 	.word	0x0801347c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000354 	.word	0x20000354
 80001ec:	0801347c 	.word	0x0801347c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ec8:	f002 fe42 	bl	8003b50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ecc:	f000 f888 	bl	8000fe0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ed0:	f000 fa38 	bl	8001344 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ed4:	f000 f8ee 	bl	80010b4 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000ed8:	f000 f92c 	bl	8001134 <MX_SPI1_Init>
	MX_TIM2_Init();
 8000edc:	f000 f996 	bl	800120c <MX_TIM2_Init>
	MX_TIM3_Init();
 8000ee0:	f000 f9e2 	bl	80012a8 <MX_TIM3_Init>
	MX_SPI5_Init();
 8000ee4:	f000 f95c 	bl	80011a0 <MX_SPI5_Init>
	/* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000ee8:	f001 fe08 	bl	8002afc <BSP_LCD_Init>
	BSP_GYRO_Init();
 8000eec:	f001 fd8c 	bl	8002a08 <BSP_GYRO_Init>

	BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000ef0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f001 fe83 	bl	8002c00 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f001 fee4 	bl	8002cc8 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000f00:	f002 fa5e 	bl	80033c0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000f04:	4823      	ldr	r0, [pc, #140]	; (8000f94 <main+0xd0>)
 8000f06:	f001 ff51 	bl	8002dac <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0e:	f001 ff03 	bl	8002d18 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000f12:	4820      	ldr	r0, [pc, #128]	; (8000f94 <main+0xd0>)
 8000f14:	f001 fee8 	bl	8002ce8 <BSP_LCD_SetTextColor>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000f18:	f00b fc84 	bl	800c824 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of myBinarySemBallUp */
	myBinarySemBallUpHandle = osSemaphoreNew(1, 1,
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <main+0xd4>)
 8000f1e:	2101      	movs	r1, #1
 8000f20:	2001      	movs	r0, #1
 8000f22:	f00b fd76 	bl	800ca12 <osSemaphoreNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <main+0xd8>)
 8000f2a:	6013      	str	r3, [r2, #0]
			&myBinarySemBallUp_attributes);

	/* creation of myBinarySemRacket */
	myBinarySemRacketHandle = osSemaphoreNew(1, 1,
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <main+0xdc>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	2001      	movs	r0, #1
 8000f32:	f00b fd6e 	bl	800ca12 <osSemaphoreNew>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a1a      	ldr	r2, [pc, #104]	; (8000fa4 <main+0xe0>)
 8000f3a:	6013      	str	r3, [r2, #0]
			&myBinarySemRacket_attributes);

	/* creation of myCountingRadiusCir */
	myCountingRadiusCirHandle = osSemaphoreNew(2, 2,
 8000f3c:	4a1a      	ldr	r2, [pc, #104]	; (8000fa8 <main+0xe4>)
 8000f3e:	2102      	movs	r1, #2
 8000f40:	2002      	movs	r0, #2
 8000f42:	f00b fd66 	bl	800ca12 <osSemaphoreNew>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a18      	ldr	r2, [pc, #96]	; (8000fac <main+0xe8>)
 8000f4a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Task01 */
	Task01Handle = osThreadNew(StartTask1, NULL, &Task01_attributes);
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <main+0xec>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <main+0xf0>)
 8000f52:	f00b fcb1 	bl	800c8b8 <osThreadNew>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <main+0xf4>)
 8000f5a:	6013      	str	r3, [r2, #0]

	/* creation of Task02 */
	Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <main+0xf8>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <main+0xfc>)
 8000f62:	f00b fca9 	bl	800c8b8 <osThreadNew>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <main+0x100>)
 8000f6a:	6013      	str	r3, [r2, #0]

	/* creation of Task03 */
	Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8000f6c:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <main+0x104>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4816      	ldr	r0, [pc, #88]	; (8000fcc <main+0x108>)
 8000f72:	f00b fca1 	bl	800c8b8 <osThreadNew>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <main+0x10c>)
 8000f7a:	6013      	str	r3, [r2, #0]

	/* creation of Task04 */
	Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 8000f7c:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <main+0x110>)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4815      	ldr	r0, [pc, #84]	; (8000fd8 <main+0x114>)
 8000f82:	f00b fc99 	bl	800c8b8 <osThreadNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <main+0x118>)
 8000f8a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f8c:	f00b fc6e 	bl	800c86c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f90:	e7fe      	b.n	8000f90 <main+0xcc>
 8000f92:	bf00      	nop
 8000f94:	ff0000ff 	.word	0xff0000ff
 8000f98:	08013614 	.word	0x08013614
 8000f9c:	20000510 	.word	0x20000510
 8000fa0:	08013624 	.word	0x08013624
 8000fa4:	20000514 	.word	0x20000514
 8000fa8:	08013634 	.word	0x08013634
 8000fac:	20000518 	.word	0x20000518
 8000fb0:	08013584 	.word	0x08013584
 8000fb4:	08001469 	.word	0x08001469
 8000fb8:	20000500 	.word	0x20000500
 8000fbc:	080135a8 	.word	0x080135a8
 8000fc0:	08001511 	.word	0x08001511
 8000fc4:	20000504 	.word	0x20000504
 8000fc8:	080135cc 	.word	0x080135cc
 8000fcc:	080015e5 	.word	0x080015e5
 8000fd0:	20000508 	.word	0x20000508
 8000fd4:	080135f0 	.word	0x080135f0
 8000fd8:	080016e1 	.word	0x080016e1
 8000fdc:	2000050c 	.word	0x2000050c

08000fe0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2230      	movs	r2, #48	; 0x30
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f010 f94b 	bl	801128a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <SystemClock_Config+0xcc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <SystemClock_Config+0xcc>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <SystemClock_Config+0xd0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <SystemClock_Config+0xd0>)
 800102a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <SystemClock_Config+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	2302      	movs	r3, #2
 8001048:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001050:	2304      	movs	r3, #4
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001054:	23a8      	movs	r3, #168	; 0xa8
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800105c:	2307      	movs	r3, #7
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4618      	mov	r0, r3
 8001066:	f005 fcf7 	bl	8006a58 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x94>
		Error_Handler();
 8001070:	f000 fb78 	bl	8001764 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2302      	movs	r3, #2
 800107a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001080:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001084:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2105      	movs	r1, #5
 8001092:	4618      	mov	r0, r3
 8001094:	f005 ff58 	bl	8006f48 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xc2>
		Error_Handler();
 800109e:	f000 fb61 	bl	8001764 <Error_Handler>
	}
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	; 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_I2C1_Init+0x74>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <MX_I2C1_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_I2C1_Init+0x74>)
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <MX_I2C1_Init+0x7c>)
 80010c2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_I2C1_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_I2C1_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_I2C1_Init+0x74>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010d6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_I2C1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_I2C1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_I2C1_Init+0x74>)
 80010f2:	f003 fd9b 	bl	8004c2c <HAL_I2C_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80010fc:	f000 fb32 	bl	8001764 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001100:	2100      	movs	r1, #0
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_I2C1_Init+0x74>)
 8001104:	f003 fed6 	bl	8004eb4 <HAL_I2CEx_ConfigAnalogFilter>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800110e:	f000 fb29 	bl	8001764 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001112:	2100      	movs	r1, #0
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_I2C1_Init+0x74>)
 8001116:	f003 ff09 	bl	8004f2c <HAL_I2CEx_ConfigDigitalFilter>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_I2C1_Init+0x70>
		Error_Handler();
 8001120:	f000 fb20 	bl	8001764 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000036c 	.word	0x2000036c
 800112c:	40005400 	.word	0x40005400
 8001130:	000186a0 	.word	0x000186a0

08001134 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_SPI1_Init+0x64>)
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <MX_SPI1_Init+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_SPI1_Init+0x64>)
 8001140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001144:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_SPI1_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_SPI1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_SPI1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_SPI1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_SPI1_Init+0x64>)
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_SPI1_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_SPI1_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_SPI1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_SPI1_Init+0x64>)
 8001180:	220a      	movs	r2, #10
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_SPI1_Init+0x64>)
 8001186:	f006 fb78 	bl	800787a <HAL_SPI_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001190:	f000 fae8 	bl	8001764 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200003c0 	.word	0x200003c0
 800119c:	40013000 	.word	0x40013000

080011a0 <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_SPI5_Init+0x64>)
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <MX_SPI5_Init+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_SPI5_Init+0x64>)
 80011ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b0:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_SPI5_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_SPI5_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_SPI5_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_SPI5_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_SPI5_Init+0x64>)
 80011cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d0:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_SPI5_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <MX_SPI5_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_SPI5_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <MX_SPI5_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 10;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_SPI5_Init+0x64>)
 80011ec:	220a      	movs	r2, #10
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <MX_SPI5_Init+0x64>)
 80011f2:	f006 fb42 	bl	800787a <HAL_SPI_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_SPI5_Init+0x60>
		Error_Handler();
 80011fc:	f000 fab2 	bl	8001764 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000418 	.word	0x20000418
 8001208:	40015000 	.word	0x40015000

0800120c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_TIM2_Init+0x98>)
 800122a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000;
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_TIM2_Init+0x98>)
 8001232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001236:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_TIM2_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 7200;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_TIM2_Init+0x98>)
 8001240:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001244:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_TIM2_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_TIM2_Init+0x98>)
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001252:	4814      	ldr	r0, [pc, #80]	; (80012a4 <MX_TIM2_Init+0x98>)
 8001254:	f007 f8f0 	bl	8008438 <HAL_TIM_Base_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x56>
		Error_Handler();
 800125e:	f000 fa81 	bl	8001764 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001266:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	4619      	mov	r1, r3
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_TIM2_Init+0x98>)
 8001270:	f007 faaa 	bl	80087c8 <HAL_TIM_ConfigClockSource>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM2_Init+0x72>
		Error_Handler();
 800127a:	f000 fa73 	bl	8001764 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_TIM2_Init+0x98>)
 800128c:	f007 fcc6 	bl	8008c1c <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001296:	f000 fa65 	bl	8001764 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000470 	.word	0x20000470

080012a8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_TIM3_Init+0x94>)
 80012c6:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <MX_TIM3_Init+0x98>)
 80012c8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1000;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <MX_TIM3_Init+0x94>)
 80012cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_TIM3_Init+0x94>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 7200;
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_TIM3_Init+0x94>)
 80012da:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80012de:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_TIM3_Init+0x94>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_TIM3_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <MX_TIM3_Init+0x94>)
 80012ee:	f007 f8a3 	bl	8008438 <HAL_TIM_Base_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x54>
		Error_Handler();
 80012f8:	f000 fa34 	bl	8001764 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001300:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4619      	mov	r1, r3
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_TIM3_Init+0x94>)
 800130a:	f007 fa5d 	bl	80087c8 <HAL_TIM_ConfigClockSource>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM3_Init+0x70>
		Error_Handler();
 8001314:	f000 fa26 	bl	8001764 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_TIM3_Init+0x94>)
 8001326:	f007 fc79 	bl	8008c1c <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001330:	f000 fa18 	bl	8001764 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200004b8 	.word	0x200004b8
 8001340:	40000400 	.word	0x40000400

08001344 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	4b3f      	ldr	r3, [pc, #252]	; (800145c <MX_GPIO_Init+0x118>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a3e      	ldr	r2, [pc, #248]	; (800145c <MX_GPIO_Init+0x118>)
 8001364:	f043 0320 	orr.w	r3, r3, #32
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b3c      	ldr	r3, [pc, #240]	; (800145c <MX_GPIO_Init+0x118>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0320 	and.w	r3, r3, #32
 8001372:	61bb      	str	r3, [r7, #24]
 8001374:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	4b38      	ldr	r3, [pc, #224]	; (800145c <MX_GPIO_Init+0x118>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a37      	ldr	r2, [pc, #220]	; (800145c <MX_GPIO_Init+0x118>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b35      	ldr	r3, [pc, #212]	; (800145c <MX_GPIO_Init+0x118>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b31      	ldr	r3, [pc, #196]	; (800145c <MX_GPIO_Init+0x118>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a30      	ldr	r2, [pc, #192]	; (800145c <MX_GPIO_Init+0x118>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <MX_GPIO_Init+0x118>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <MX_GPIO_Init+0x118>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a29      	ldr	r2, [pc, #164]	; (800145c <MX_GPIO_Init+0x118>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_GPIO_Init+0x118>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_GPIO_Init+0x118>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a22      	ldr	r2, [pc, #136]	; (800145c <MX_GPIO_Init+0x118>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_GPIO_Init+0x118>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_GPIO_Init+0x118>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a1b      	ldr	r2, [pc, #108]	; (800145c <MX_GPIO_Init+0x118>)
 80013f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_GPIO_Init+0x118>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2102      	movs	r1, #2
 8001406:	4816      	ldr	r0, [pc, #88]	; (8001460 <MX_GPIO_Init+0x11c>)
 8001408:	f003 fbf6 	bl	8004bf8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001412:	4814      	ldr	r0, [pc, #80]	; (8001464 <MX_GPIO_Init+0x120>)
 8001414:	f003 fbf0 	bl	8004bf8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001418:	2302      	movs	r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	480c      	ldr	r0, [pc, #48]	; (8001460 <MX_GPIO_Init+0x11c>)
 8001430:	f003 f92a 	bl	8004688 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG13 PG14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8001434:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001438:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001442:	2302      	movs	r3, #2
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_GPIO_Init+0x120>)
 800144e:	f003 f91b 	bl	8004688 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001452:	bf00      	nop
 8001454:	3730      	adds	r7, #48	; 0x30
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40020800 	.word	0x40020800
 8001464:	40021800 	.word	0x40021800

08001468 <StartTask1>:
 * @brief  Function implementing the Task01 thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8001470:	f00e fc64 	bl	800fd3c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(myBinarySemBallUpHandle, 1000);
 8001474:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <StartTask1+0x90>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800147c:	4618      	mov	r0, r3
 800147e:	f00b fb51 	bl	800cb24 <osSemaphoreAcquire>
		if (!ballUp) {
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <StartTask1+0x94>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	f083 0301 	eor.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d009      	beq.n	80014a4 <StartTask1+0x3c>
			radiusCir--;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <StartTask1+0x98>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	b29b      	uxth	r3, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	b29b      	uxth	r3, r3
 800149c:	b21a      	sxth	r2, r3
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <StartTask1+0x98>)
 80014a0:	801a      	strh	r2, [r3, #0]
 80014a2:	e008      	b.n	80014b6 <StartTask1+0x4e>
		} else
			radiusCir++;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <StartTask1+0x98>)
 80014a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	3301      	adds	r3, #1
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <StartTask1+0x98>)
 80014b4:	801a      	strh	r2, [r3, #0]
		osSemaphoreRelease(myCountingRadiusCirHandle);
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <StartTask1+0x9c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00b fb84 	bl	800cbc8 <osSemaphoreRelease>
		osSemaphoreRelease(myCountingRadiusCirHandle);
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <StartTask1+0x9c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00b fb7f 	bl	800cbc8 <osSemaphoreRelease>
		BSP_LCD_Clear(LCD_COLOR_WHITE);
 80014ca:	f04f 30ff 	mov.w	r0, #4294967295
 80014ce:	f001 fc6d 	bl	8002dac <BSP_LCD_Clear>
		BSP_LCD_FillCircle(XCir, YCir, radiusCir);
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <StartTask1+0xa0>)
 80014d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4a0c      	ldr	r2, [pc, #48]	; (800150c <StartTask1+0xa4>)
 80014dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014e0:	b291      	uxth	r1, r2
 80014e2:	4a07      	ldr	r2, [pc, #28]	; (8001500 <StartTask1+0x98>)
 80014e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014e8:	b292      	uxth	r2, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 fec8 	bl	8003280 <BSP_LCD_FillCircle>
		osDelay(100);
 80014f0:	2064      	movs	r0, #100	; 0x64
 80014f2:	f00b fa73 	bl	800c9dc <osDelay>
		osSemaphoreAcquire(myBinarySemBallUpHandle, 1000);
 80014f6:	e7bd      	b.n	8001474 <StartTask1+0xc>
 80014f8:	20000510 	.word	0x20000510
 80014fc:	20000600 	.word	0x20000600
 8001500:	20000008 	.word	0x20000008
 8001504:	20000518 	.word	0x20000518
 8001508:	20000000 	.word	0x20000000
 800150c:	20000002 	.word	0x20000002

08001510 <StartTask02>:
 * @brief Function implementing the Task02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
//  CDC_Init_HS();
	racket = false;
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <StartTask02+0xb4>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
	for (;;) {
		if (radiusCir == radiusMax) {
 800151e:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <StartTask02+0xb8>)
 8001520:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <StartTask02+0xbc>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	429a      	cmp	r2, r3
 800152c:	d102      	bne.n	8001534 <StartTask02+0x24>
			ballUp = false;
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <StartTask02+0xc0>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
		}
		BSP_GYRO_GetXYZ(gyroData);
 8001534:	4827      	ldr	r0, [pc, #156]	; (80015d4 <StartTask02+0xc4>)
 8001536:	f001 facd 	bl	8002ad4 <BSP_GYRO_GetXYZ>
		if (gyroData[0] <= 0) {
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <StartTask02+0xc4>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d803      	bhi.n	8001552 <StartTask02+0x42>
			racket = false;
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <StartTask02+0xb4>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e034      	b.n	80015bc <StartTask02+0xac>
		} else if (gyroData[1] > 0) {
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <StartTask02+0xc4>)
 8001554:	edd3 7a01 	vldr	s15, [r3, #4]
 8001558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	dd2c      	ble.n	80015bc <StartTask02+0xac>
			racket = true;
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <StartTask02+0xb4>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
			if (radiusCir
					< radiusMin
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <StartTask02+0xc8>)
 800156a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156e:	3301      	adds	r3, #1
 8001570:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <StartTask02+0xb8>)
 8001572:	f9b2 2000 	ldrsh.w	r2, [r2]
			if (radiusCir
 8001576:	4293      	cmp	r3, r2
 8001578:	db0f      	blt.n	800159a <StartTask02+0x8a>
							+ 2&& radiusCir > radiusMin -2 && racket == true) {
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <StartTask02+0xc8>)
 800157c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <StartTask02+0xb8>)
 8001584:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001588:	4293      	cmp	r3, r2
 800158a:	dc06      	bgt.n	800159a <StartTask02+0x8a>
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <StartTask02+0xb4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <StartTask02+0x8a>
				ballUp = true;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <StartTask02+0xc0>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
			}
			osSemaphoreRelease(myBinarySemBallUpHandle);
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <StartTask02+0xcc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f00b fb12 	bl	800cbc8 <osSemaphoreRelease>
			osSemaphoreRelease(myBinarySemRacketHandle);
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <StartTask02+0xd0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00b fb0d 	bl	800cbc8 <osSemaphoreRelease>
			osDelay(500);
 80015ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b2:	f00b fa13 	bl	800c9dc <osDelay>
			racket = false;
 80015b6:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <StartTask02+0xb4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
		}
		osDelay(100);
 80015bc:	2064      	movs	r0, #100	; 0x64
 80015be:	f00b fa0d 	bl	800c9dc <osDelay>
		if (radiusCir == radiusMax) {
 80015c2:	e7ac      	b.n	800151e <StartTask02+0xe>
 80015c4:	20000601 	.word	0x20000601
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000004 	.word	0x20000004
 80015d0:	20000600 	.word	0x20000600
 80015d4:	2000051c 	.word	0x2000051c
 80015d8:	20000006 	.word	0x20000006
 80015dc:	20000510 	.word	0x20000510
 80015e0:	20000514 	.word	0x20000514

080015e4 <StartTask03>:
 * @brief Function implementing the Task03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	bool scored = false;
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		osSemaphoreAcquire(myCountingRadiusCirHandle, 1000);
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <StartTask03+0xd8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015f8:	4618      	mov	r0, r3
 80015fa:	f00b fa93 	bl	800cb24 <osSemaphoreAcquire>
		osSemaphoreAcquire(myBinarySemBallUpHandle, 1000);
 80015fe:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <StartTask03+0xdc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001606:	4618      	mov	r0, r3
 8001608:	f00b fa8c 	bl	800cb24 <osSemaphoreAcquire>
		if (radiusCir
				< radiusMin
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <StartTask03+0xe0>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	3301      	adds	r3, #1
 8001614:	4a2c      	ldr	r2, [pc, #176]	; (80016c8 <StartTask03+0xe4>)
 8001616:	f9b2 2000 	ldrsh.w	r2, [r2]
		if (radiusCir
 800161a:	4293      	cmp	r3, r2
 800161c:	db1a      	blt.n	8001654 <StartTask03+0x70>
						+ 2&& radiusCir > radiusMin -2 && scored == false && racket == true) {
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <StartTask03+0xe0>)
 8001620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001624:	3b01      	subs	r3, #1
 8001626:	4a28      	ldr	r2, [pc, #160]	; (80016c8 <StartTask03+0xe4>)
 8001628:	f9b2 2000 	ldrsh.w	r2, [r2]
 800162c:	4293      	cmp	r3, r2
 800162e:	dc11      	bgt.n	8001654 <StartTask03+0x70>
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	f083 0301 	eor.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <StartTask03+0x70>
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <StartTask03+0xe8>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <StartTask03+0x70>
			score++;
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <StartTask03+0xec>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	4a21      	ldr	r2, [pc, #132]	; (80016d0 <StartTask03+0xec>)
 800164c:	6013      	str	r3, [r2, #0]
			scored = true;
 800164e:	2301      	movs	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e016      	b.n	8001682 <StartTask03+0x9e>
		} else if (radiusCir
				< radiusMin + 2&& radiusCir > radiusMin -2 && scored == true) {
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <StartTask03+0xe0>)
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	3301      	adds	r3, #1
 800165c:	4a1a      	ldr	r2, [pc, #104]	; (80016c8 <StartTask03+0xe4>)
 800165e:	f9b2 2000 	ldrsh.w	r2, [r2]
		} else if (radiusCir
 8001662:	4293      	cmp	r3, r2
 8001664:	db0b      	blt.n	800167e <StartTask03+0x9a>
				< radiusMin + 2&& radiusCir > radiusMin -2 && scored == true) {
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <StartTask03+0xe0>)
 8001668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166c:	3b01      	subs	r3, #1
 800166e:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <StartTask03+0xe4>)
 8001670:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001674:	4293      	cmp	r3, r2
 8001676:	dc02      	bgt.n	800167e <StartTask03+0x9a>
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <StartTask03+0x9e>

		} else
			scored = false;
 800167e:	2300      	movs	r3, #0
 8001680:	73fb      	strb	r3, [r7, #15]
		sprintf(scoreBuffer, "Score: %d", score);
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <StartTask03+0xec>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4912      	ldr	r1, [pc, #72]	; (80016d4 <StartTask03+0xf0>)
 800168a:	4813      	ldr	r0, [pc, #76]	; (80016d8 <StartTask03+0xf4>)
 800168c:	f00f fd9a 	bl	80111c4 <siprintf>
		BSP_LCD_DisplayStringAtLine(0, (uint8_t*) scoreBuffer);
 8001690:	4911      	ldr	r1, [pc, #68]	; (80016d8 <StartTask03+0xf4>)
 8001692:	2000      	movs	r0, #0
 8001694:	f001 fcb4 	bl	8003000 <BSP_LCD_DisplayStringAtLine>

		if (score == 4) {
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <StartTask03+0xec>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b04      	cmp	r3, #4
 800169e:	d109      	bne.n	80016b4 <StartTask03+0xd0>
			BSP_LCD_Clear(LCD_COLOR_WHITE);
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f001 fb82 	bl	8002dac <BSP_LCD_Clear>
			BSP_LCD_DisplayStringAtLine(6, (uint8_t*) "       Game Over");
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <StartTask03+0xf8>)
 80016aa:	2006      	movs	r0, #6
 80016ac:	f001 fca8 	bl	8003000 <BSP_LCD_DisplayStringAtLine>
			taskEXIT_CRITICAL();
 80016b0:	f00e f868 	bl	800f784 <vPortExitCritical>
		}
		osDelay(1);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f00b f991 	bl	800c9dc <osDelay>
		osSemaphoreAcquire(myCountingRadiusCirHandle, 1000);
 80016ba:	e799      	b.n	80015f0 <StartTask03+0xc>
 80016bc:	20000518 	.word	0x20000518
 80016c0:	20000510 	.word	0x20000510
 80016c4:	20000006 	.word	0x20000006
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000601 	.word	0x20000601
 80016d0:	20000534 	.word	0x20000534
 80016d4:	080134f4 	.word	0x080134f4
 80016d8:	20000538 	.word	0x20000538
 80016dc:	08013500 	.word	0x08013500

080016e0 <StartTask04>:
 * @brief Function implementing the Task04 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask04 */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(myCountingRadiusCirHandle, 1000);
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <StartTask04+0x4c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00b fa17 	bl	800cb24 <osSemaphoreAcquire>
		height = radiusCir - 20;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <StartTask04+0x50>)
 80016f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fc:	3b14      	subs	r3, #20
 80016fe:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <StartTask04+0x54>)
 8001700:	6013      	str	r3, [r2, #0]
		sprintf(heightBuffer, "Height = %d\n", height);
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <StartTask04+0x54>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	490b      	ldr	r1, [pc, #44]	; (8001738 <StartTask04+0x58>)
 800170a:	480c      	ldr	r0, [pc, #48]	; (800173c <StartTask04+0x5c>)
 800170c:	f00f fd5a 	bl	80111c4 <siprintf>
		CDC_Transmit_HS((uint8_t*) heightBuffer, strlen(heightBuffer));
 8001710:	480a      	ldr	r0, [pc, #40]	; (800173c <StartTask04+0x5c>)
 8001712:	f7fe fdbd 	bl	8000290 <strlen>
 8001716:	4603      	mov	r3, r0
 8001718:	b29b      	uxth	r3, r3
 800171a:	4619      	mov	r1, r3
 800171c:	4807      	ldr	r0, [pc, #28]	; (800173c <StartTask04+0x5c>)
 800171e:	f00e fbcb 	bl	800feb8 <CDC_Transmit_HS>
		osDelay(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f00b f95a 	bl	800c9dc <osDelay>
		osSemaphoreAcquire(myCountingRadiusCirHandle, 1000);
 8001728:	e7de      	b.n	80016e8 <StartTask04+0x8>
 800172a:	bf00      	nop
 800172c:	20000518 	.word	0x20000518
 8001730:	20000008 	.word	0x20000008
 8001734:	20000530 	.word	0x20000530
 8001738:	08013514 	.word	0x08013514
 800173c:	2000059c 	.word	0x2000059c

08001740 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001752:	f002 fa1f 	bl	8003b94 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40001000 	.word	0x40001000

08001764 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800176c:	e7fe      	b.n	800176c <Error_Handler+0x8>
	...

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_MspInit+0x54>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <HAL_MspInit+0x54>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_MspInit+0x54>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_MspInit+0x54>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_MspInit+0x54>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_MspInit+0x54>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	210f      	movs	r1, #15
 80017b2:	f06f 0001 	mvn.w	r0, #1
 80017b6:	f002 fae9 	bl	8003d8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_I2C_MspInit+0x84>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d12b      	bne.n	8001842 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_I2C_MspInit+0x88>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_I2C_MspInit+0x88>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_I2C_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001806:	23c0      	movs	r3, #192	; 0xc0
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180a:	2312      	movs	r3, #18
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001816:	2304      	movs	r3, #4
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <HAL_I2C_MspInit+0x8c>)
 8001822:	f002 ff31 	bl	8004688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_I2C_MspInit+0x88>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_I2C_MspInit+0x88>)
 8001830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_I2C_MspInit+0x88>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40005400 	.word	0x40005400
 8001850:	40023800 	.word	0x40023800
 8001854:	40020400 	.word	0x40020400

08001858 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	; 0x30
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a32      	ldr	r2, [pc, #200]	; (8001940 <HAL_SPI_MspInit+0xe8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d12c      	bne.n	80018d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <HAL_SPI_MspInit+0xec>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	4a30      	ldr	r2, [pc, #192]	; (8001944 <HAL_SPI_MspInit+0xec>)
 8001884:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <HAL_SPI_MspInit+0xec>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_SPI_MspInit+0xec>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a29      	ldr	r2, [pc, #164]	; (8001944 <HAL_SPI_MspInit+0xec>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_SPI_MspInit+0xec>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018b2:	23e0      	movs	r3, #224	; 0xe0
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018c2:	2305      	movs	r3, #5
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	481e      	ldr	r0, [pc, #120]	; (8001948 <HAL_SPI_MspInit+0xf0>)
 80018ce:	f002 fedb 	bl	8004688 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80018d2:	e031      	b.n	8001938 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI5)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1c      	ldr	r2, [pc, #112]	; (800194c <HAL_SPI_MspInit+0xf4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d12c      	bne.n	8001938 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_SPI_MspInit+0xec>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_SPI_MspInit+0xec>)
 80018e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_SPI_MspInit+0xec>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_SPI_MspInit+0xec>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a10      	ldr	r2, [pc, #64]	; (8001944 <HAL_SPI_MspInit+0xec>)
 8001904:	f043 0320 	orr.w	r3, r3, #32
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_SPI_MspInit+0xec>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001916:	f44f 7360 	mov.w	r3, #896	; 0x380
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001928:	2305      	movs	r3, #5
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4619      	mov	r1, r3
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <HAL_SPI_MspInit+0xf8>)
 8001934:	f002 fea8 	bl	8004688 <HAL_GPIO_Init>
}
 8001938:	bf00      	nop
 800193a:	3730      	adds	r7, #48	; 0x30
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40013000 	.word	0x40013000
 8001944:	40023800 	.word	0x40023800
 8001948:	40020000 	.word	0x40020000
 800194c:	40015000 	.word	0x40015000
 8001950:	40021400 	.word	0x40021400

08001954 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_SPI_MspDeInit+0x50>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10a      	bne.n	800197c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_SPI_MspDeInit+0x54>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <HAL_SPI_MspDeInit+0x54>)
 800196c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001972:	21e0      	movs	r1, #224	; 0xe0
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <HAL_SPI_MspDeInit+0x58>)
 8001976:	f003 f833 	bl	80049e0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800197a:	e00f      	b.n	800199c <HAL_SPI_MspDeInit+0x48>
  else if(hspi->Instance==SPI5)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_SPI_MspDeInit+0x5c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10a      	bne.n	800199c <HAL_SPI_MspDeInit+0x48>
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_SPI_MspDeInit+0x54>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_SPI_MspDeInit+0x54>)
 800198c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001992:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001996:	4807      	ldr	r0, [pc, #28]	; (80019b4 <HAL_SPI_MspDeInit+0x60>)
 8001998:	f003 f822 	bl	80049e0 <HAL_GPIO_DeInit>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40013000 	.word	0x40013000
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40015000 	.word	0x40015000
 80019b4:	40021400 	.word	0x40021400

080019b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c8:	d116      	bne.n	80019f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_TIM_Base_MspInit+0x80>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <HAL_TIM_Base_MspInit+0x80>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_TIM_Base_MspInit+0x80>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	201c      	movs	r0, #28
 80019ec:	f002 f9ce 	bl	8003d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f0:	201c      	movs	r0, #28
 80019f2:	f002 f9e7 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019f6:	e01a      	b.n	8001a2e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <HAL_TIM_Base_MspInit+0x84>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d115      	bne.n	8001a2e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_TIM_Base_MspInit+0x80>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <HAL_TIM_Base_MspInit+0x80>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_TIM_Base_MspInit+0x80>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2105      	movs	r1, #5
 8001a22:	201d      	movs	r0, #29
 8001a24:	f002 f9b2 	bl	8003d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a28:	201d      	movs	r0, #29
 8001a2a:	f002 f9cb 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40000400 	.word	0x40000400

08001a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	4b33      	ldr	r3, [pc, #204]	; (8001b24 <HAL_InitTick+0xe4>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a32      	ldr	r2, [pc, #200]	; (8001b24 <HAL_InitTick+0xe4>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_InitTick+0xe4>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a6c:	f107 0210 	add.w	r2, r7, #16
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f005 fc72 	bl	8007360 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d103      	bne.n	8001a8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a86:	f005 fc57 	bl	8007338 <HAL_RCC_GetPCLK1Freq>
 8001a8a:	6378      	str	r0, [r7, #52]	; 0x34
 8001a8c:	e004      	b.n	8001a98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a8e:	f005 fc53 	bl	8007338 <HAL_RCC_GetPCLK1Freq>
 8001a92:	4603      	mov	r3, r0
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9a:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <HAL_InitTick+0xe8>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	0c9b      	lsrs	r3, r3, #18
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_InitTick+0xec>)
 8001aa8:	4a21      	ldr	r2, [pc, #132]	; (8001b30 <HAL_InitTick+0xf0>)
 8001aaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <HAL_InitTick+0xec>)
 8001aae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <HAL_InitTick+0xec>)
 8001ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_InitTick+0xec>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_InitTick+0xec>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_InitTick+0xec>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001acc:	4817      	ldr	r0, [pc, #92]	; (8001b2c <HAL_InitTick+0xec>)
 8001ace:	f006 fcb3 	bl	8008438 <HAL_TIM_Base_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d11b      	bne.n	8001b18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ae0:	4812      	ldr	r0, [pc, #72]	; (8001b2c <HAL_InitTick+0xec>)
 8001ae2:	f006 fcf9 	bl	80084d8 <HAL_TIM_Base_Start_IT>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001aec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d111      	bne.n	8001b18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001af4:	2036      	movs	r0, #54	; 0x36
 8001af6:	f002 f965 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d808      	bhi.n	8001b12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	2036      	movs	r0, #54	; 0x36
 8001b06:	f002 f941 	bl	8003d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_InitTick+0xf4>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e002      	b.n	8001b18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3738      	adds	r7, #56	; 0x38
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	431bde83 	.word	0x431bde83
 8001b2c:	20000604 	.word	0x20000604
 8001b30:	40001000 	.word	0x40001000
 8001b34:	2000008c 	.word	0x2000008c

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <NMI_Handler+0x4>

08001b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <TIM2_IRQHandler+0x10>)
 8001b6a:	f006 fd25 	bl	80085b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000470 	.word	0x20000470

08001b78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <TIM3_IRQHandler+0x10>)
 8001b7e:	f006 fd1b 	bl	80085b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200004b8 	.word	0x200004b8

08001b8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <TIM6_DAC_IRQHandler+0x10>)
 8001b92:	f006 fd11 	bl	80085b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000604 	.word	0x20000604

08001ba0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <OTG_HS_IRQHandler+0x10>)
 8001ba6:	f003 fe2a 	bl	80057fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200066dc 	.word	0x200066dc

08001bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_kill>:

int _kill(int pid, int sig)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bce:	f00f fbaf 	bl	8011330 <__errno>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2216      	movs	r2, #22
 8001bd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_exit>:

void _exit (int status)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ffe7 	bl	8001bc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf6:	e7fe      	b.n	8001bf6 <_exit+0x12>

08001bf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e00a      	b.n	8001c20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c0a:	f3af 8000 	nop.w
 8001c0e:	4601      	mov	r1, r0
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	60ba      	str	r2, [r7, #8]
 8001c16:	b2ca      	uxtb	r2, r1
 8001c18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dbf0      	blt.n	8001c0a <_read+0x12>
  }

  return len;
 8001c28:	687b      	ldr	r3, [r7, #4]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e009      	b.n	8001c58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbf1      	blt.n	8001c44 <_write+0x12>
  }
  return len;
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_close>:

int _close(int file)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c92:	605a      	str	r2, [r3, #4]
  return 0;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_isatty>:

int _isatty(int file)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f00f fb14 	bl	8011330 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20030000 	.word	0x20030000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	2000064c 	.word	0x2000064c
 8001d3c:	20006f58 	.word	0x20006f58

08001d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
	}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d68:	480d      	ldr	r0, [pc, #52]	; (8001da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d6a:	490e      	ldr	r1, [pc, #56]	; (8001da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d6c:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d80:	4c0b      	ldr	r4, [pc, #44]	; (8001db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d8e:	f7ff ffd7 	bl	8001d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d92:	f00f fad3 	bl	801133c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d96:	f7ff f895 	bl	8000ec4 <main>
  bx  lr    
 8001d9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001da8:	0801549c 	.word	0x0801549c
  ldr r2, =_sbss
 8001dac:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001db0:	20006f54 	.word	0x20006f54

08001db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC_IRQHandler>

08001db6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001dba:	f000 fc73 	bl	80026a4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001dbe:	20ca      	movs	r0, #202	; 0xca
 8001dc0:	f000 f95d 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001dc4:	20c3      	movs	r0, #195	; 0xc3
 8001dc6:	f000 f967 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001dca:	2008      	movs	r0, #8
 8001dcc:	f000 f964 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001dd0:	2050      	movs	r0, #80	; 0x50
 8001dd2:	f000 f961 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001dd6:	20cf      	movs	r0, #207	; 0xcf
 8001dd8:	f000 f951 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f000 f95b 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001de2:	20c1      	movs	r0, #193	; 0xc1
 8001de4:	f000 f958 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001de8:	2030      	movs	r0, #48	; 0x30
 8001dea:	f000 f955 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001dee:	20ed      	movs	r0, #237	; 0xed
 8001df0:	f000 f945 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001df4:	2064      	movs	r0, #100	; 0x64
 8001df6:	f000 f94f 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001dfa:	2003      	movs	r0, #3
 8001dfc:	f000 f94c 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001e00:	2012      	movs	r0, #18
 8001e02:	f000 f949 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001e06:	2081      	movs	r0, #129	; 0x81
 8001e08:	f000 f946 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001e0c:	20e8      	movs	r0, #232	; 0xe8
 8001e0e:	f000 f936 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001e12:	2085      	movs	r0, #133	; 0x85
 8001e14:	f000 f940 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f000 f93d 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001e1e:	2078      	movs	r0, #120	; 0x78
 8001e20:	f000 f93a 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001e24:	20cb      	movs	r0, #203	; 0xcb
 8001e26:	f000 f92a 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001e2a:	2039      	movs	r0, #57	; 0x39
 8001e2c:	f000 f934 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001e30:	202c      	movs	r0, #44	; 0x2c
 8001e32:	f000 f931 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 f92e 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001e3c:	2034      	movs	r0, #52	; 0x34
 8001e3e:	f000 f92b 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001e42:	2002      	movs	r0, #2
 8001e44:	f000 f928 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001e48:	20f7      	movs	r0, #247	; 0xf7
 8001e4a:	f000 f918 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001e4e:	2020      	movs	r0, #32
 8001e50:	f000 f922 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001e54:	20ea      	movs	r0, #234	; 0xea
 8001e56:	f000 f912 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 f91c 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f000 f919 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001e66:	20b1      	movs	r0, #177	; 0xb1
 8001e68:	f000 f909 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f000 f913 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001e72:	201b      	movs	r0, #27
 8001e74:	f000 f910 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001e78:	20b6      	movs	r0, #182	; 0xb6
 8001e7a:	f000 f900 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001e7e:	200a      	movs	r0, #10
 8001e80:	f000 f90a 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001e84:	20a2      	movs	r0, #162	; 0xa2
 8001e86:	f000 f907 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001e8a:	20c0      	movs	r0, #192	; 0xc0
 8001e8c:	f000 f8f7 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001e90:	2010      	movs	r0, #16
 8001e92:	f000 f901 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001e96:	20c1      	movs	r0, #193	; 0xc1
 8001e98:	f000 f8f1 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001e9c:	2010      	movs	r0, #16
 8001e9e:	f000 f8fb 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001ea2:	20c5      	movs	r0, #197	; 0xc5
 8001ea4:	f000 f8eb 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001ea8:	2045      	movs	r0, #69	; 0x45
 8001eaa:	f000 f8f5 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001eae:	2015      	movs	r0, #21
 8001eb0:	f000 f8f2 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001eb4:	20c7      	movs	r0, #199	; 0xc7
 8001eb6:	f000 f8e2 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001eba:	2090      	movs	r0, #144	; 0x90
 8001ebc:	f000 f8ec 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001ec0:	2036      	movs	r0, #54	; 0x36
 8001ec2:	f000 f8dc 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001ec6:	20c8      	movs	r0, #200	; 0xc8
 8001ec8:	f000 f8e6 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001ecc:	20f2      	movs	r0, #242	; 0xf2
 8001ece:	f000 f8d6 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 f8e0 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001ed8:	20b0      	movs	r0, #176	; 0xb0
 8001eda:	f000 f8d0 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001ede:	20c2      	movs	r0, #194	; 0xc2
 8001ee0:	f000 f8da 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001ee4:	20b6      	movs	r0, #182	; 0xb6
 8001ee6:	f000 f8ca 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001eea:	200a      	movs	r0, #10
 8001eec:	f000 f8d4 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001ef0:	20a7      	movs	r0, #167	; 0xa7
 8001ef2:	f000 f8d1 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001ef6:	2027      	movs	r0, #39	; 0x27
 8001ef8:	f000 f8ce 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001efc:	2004      	movs	r0, #4
 8001efe:	f000 f8cb 	bl	8002098 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001f02:	202a      	movs	r0, #42	; 0x2a
 8001f04:	f000 f8bb 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f000 f8c5 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f000 f8c2 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f000 f8bf 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001f1a:	20ef      	movs	r0, #239	; 0xef
 8001f1c:	f000 f8bc 	bl	8002098 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001f20:	202b      	movs	r0, #43	; 0x2b
 8001f22:	f000 f8ac 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f000 f8b6 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 f8b3 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001f32:	2001      	movs	r0, #1
 8001f34:	f000 f8b0 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001f38:	203f      	movs	r0, #63	; 0x3f
 8001f3a:	f000 f8ad 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001f3e:	20f6      	movs	r0, #246	; 0xf6
 8001f40:	f000 f89d 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f000 f8a7 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 f8a4 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001f50:	2006      	movs	r0, #6
 8001f52:	f000 f8a1 	bl	8002098 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001f56:	202c      	movs	r0, #44	; 0x2c
 8001f58:	f000 f891 	bl	800207e <ili9341_WriteReg>
  LCD_Delay(200);
 8001f5c:	20c8      	movs	r0, #200	; 0xc8
 8001f5e:	f000 fc8f 	bl	8002880 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001f62:	2026      	movs	r0, #38	; 0x26
 8001f64:	f000 f88b 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f000 f895 	bl	8002098 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001f6e:	20e0      	movs	r0, #224	; 0xe0
 8001f70:	f000 f885 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001f74:	200f      	movs	r0, #15
 8001f76:	f000 f88f 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001f7a:	2029      	movs	r0, #41	; 0x29
 8001f7c:	f000 f88c 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001f80:	2024      	movs	r0, #36	; 0x24
 8001f82:	f000 f889 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f86:	200c      	movs	r0, #12
 8001f88:	f000 f886 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001f8c:	200e      	movs	r0, #14
 8001f8e:	f000 f883 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001f92:	2009      	movs	r0, #9
 8001f94:	f000 f880 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001f98:	204e      	movs	r0, #78	; 0x4e
 8001f9a:	f000 f87d 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001f9e:	2078      	movs	r0, #120	; 0x78
 8001fa0:	f000 f87a 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001fa4:	203c      	movs	r0, #60	; 0x3c
 8001fa6:	f000 f877 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001faa:	2009      	movs	r0, #9
 8001fac:	f000 f874 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001fb0:	2013      	movs	r0, #19
 8001fb2:	f000 f871 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001fb6:	2005      	movs	r0, #5
 8001fb8:	f000 f86e 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001fbc:	2017      	movs	r0, #23
 8001fbe:	f000 f86b 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001fc2:	2011      	movs	r0, #17
 8001fc4:	f000 f868 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f000 f865 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001fce:	20e1      	movs	r0, #225	; 0xe1
 8001fd0:	f000 f855 	bl	800207e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f000 f85f 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001fda:	2016      	movs	r0, #22
 8001fdc:	f000 f85c 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001fe0:	201b      	movs	r0, #27
 8001fe2:	f000 f859 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001fe6:	2004      	movs	r0, #4
 8001fe8:	f000 f856 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001fec:	2011      	movs	r0, #17
 8001fee:	f000 f853 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001ff2:	2007      	movs	r0, #7
 8001ff4:	f000 f850 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001ff8:	2031      	movs	r0, #49	; 0x31
 8001ffa:	f000 f84d 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001ffe:	2033      	movs	r0, #51	; 0x33
 8002000:	f000 f84a 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002004:	2042      	movs	r0, #66	; 0x42
 8002006:	f000 f847 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800200a:	2005      	movs	r0, #5
 800200c:	f000 f844 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002010:	200c      	movs	r0, #12
 8002012:	f000 f841 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002016:	200a      	movs	r0, #10
 8002018:	f000 f83e 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800201c:	2028      	movs	r0, #40	; 0x28
 800201e:	f000 f83b 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002022:	202f      	movs	r0, #47	; 0x2f
 8002024:	f000 f838 	bl	8002098 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002028:	200f      	movs	r0, #15
 800202a:	f000 f835 	bl	8002098 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800202e:	2011      	movs	r0, #17
 8002030:	f000 f825 	bl	800207e <ili9341_WriteReg>
  LCD_Delay(200);
 8002034:	20c8      	movs	r0, #200	; 0xc8
 8002036:	f000 fc23 	bl	8002880 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800203a:	2029      	movs	r0, #41	; 0x29
 800203c:	f000 f81f 	bl	800207e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002040:	202c      	movs	r0, #44	; 0x2c
 8002042:	f000 f81c 	bl	800207e <ili9341_WriteReg>
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}

0800204a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800204e:	f000 fb29 	bl	80026a4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002052:	2103      	movs	r1, #3
 8002054:	20d3      	movs	r0, #211	; 0xd3
 8002056:	f000 f82c 	bl	80020b2 <ili9341_ReadData>
 800205a:	4603      	mov	r3, r0
 800205c:	b29b      	uxth	r3, r3
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}

08002062 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002066:	2029      	movs	r0, #41	; 0x29
 8002068:	f000 f809 	bl	800207e <ili9341_WriteReg>
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002074:	2028      	movs	r0, #40	; 0x28
 8002076:	f000 f802 	bl	800207e <ili9341_WriteReg>
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}

0800207e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fba4 	bl	80027d8 <LCD_IO_WriteReg>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 fb75 	bl	8002794 <LCD_IO_WriteData>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	460a      	mov	r2, r1
 80020bc:	80fb      	strh	r3, [r7, #6]
 80020be:	4613      	mov	r3, r2
 80020c0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80020c2:	797a      	ldrb	r2, [r7, #5]
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fba7 	bl	800281c <LCD_IO_ReadData>
 80020ce:	4603      	mov	r3, r0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80020dc:	23f0      	movs	r3, #240	; 0xf0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80020ec:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8002108:	f000 fbc6 	bl	8002898 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8002112:	f107 030f 	add.w	r3, r7, #15
 8002116:	2201      	movs	r2, #1
 8002118:	2120      	movs	r1, #32
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fc08 	bl	8002930 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	b29b      	uxth	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800212a:	f107 030f 	add.w	r3, r7, #15
 800212e:	2201      	movs	r2, #1
 8002130:	2123      	movs	r1, #35	; 0x23
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fbfc 	bl	8002930 <GYRO_IO_Write>
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8002154:	f000 fba0 	bl	8002898 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8002158:	1dfb      	adds	r3, r7, #7
 800215a:	2201      	movs	r2, #1
 800215c:	210f      	movs	r1, #15
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fc18 	bl	8002994 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8002164:	79fb      	ldrb	r3, [r7, #7]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002174:	1dfb      	adds	r3, r7, #7
 8002176:	2201      	movs	r2, #1
 8002178:	2124      	movs	r1, #36	; 0x24
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fc0a 	bl	8002994 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002186:	b2db      	uxtb	r3, r3
 8002188:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	2201      	movs	r2, #1
 800218e:	2124      	movs	r1, #36	; 0x24
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fbcd 	bl	8002930 <GYRO_IO_Write>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80021b2:	f107 030f 	add.w	r3, r7, #15
 80021b6:	2201      	movs	r2, #1
 80021b8:	2120      	movs	r1, #32
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fbb8 	bl	8002930 <GYRO_IO_Write>
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	2300      	movs	r3, #0
 80021d8:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80021da:	f107 030f 	add.w	r3, r7, #15
 80021de:	2201      	movs	r2, #1
 80021e0:	2130      	movs	r1, #48	; 0x30
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fbd6 	bl	8002994 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80021e8:	f107 030e 	add.w	r3, r7, #14
 80021ec:	2201      	movs	r2, #1
 80021ee:	2122      	movs	r1, #34	; 0x22
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fbcf 	bl	8002994 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	121b      	asrs	r3, r3, #8
 8002206:	b25a      	sxtb	r2, r3
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	b25b      	sxtb	r3, r3
 800220c:	4313      	orrs	r3, r2
 800220e:	b25b      	sxtb	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8002214:	7bbb      	ldrb	r3, [r7, #14]
 8002216:	f023 0320 	bic.w	r3, r3, #32
 800221a:	b2db      	uxtb	r3, r3
 800221c:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	7bbb      	ldrb	r3, [r7, #14]
 8002224:	4313      	orrs	r3, r2
 8002226:	b2db      	uxtb	r3, r3
 8002228:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800222a:	f107 030f 	add.w	r3, r7, #15
 800222e:	2201      	movs	r2, #1
 8002230:	2130      	movs	r1, #48	; 0x30
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fb7c 	bl	8002930 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002238:	f107 030e 	add.w	r3, r7, #14
 800223c:	2201      	movs	r2, #1
 800223e:	2122      	movs	r1, #34	; 0x22
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fb75 	bl	8002930 <GYRO_IO_Write>
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002258:	f107 030f 	add.w	r3, r7, #15
 800225c:	2201      	movs	r2, #1
 800225e:	2122      	movs	r1, #34	; 0x22
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fb97 	bl	8002994 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002272:	b2db      	uxtb	r3, r3
 8002274:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800227c:	b2db      	uxtb	r3, r3
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e00c      	b.n	800229c <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d109      	bne.n	800229c <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	f023 0308 	bic.w	r3, r3, #8
 800228e:	b2db      	uxtb	r3, r3
 8002290:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	b2db      	uxtb	r3, r3
 800229a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800229c:	f107 030f 	add.w	r3, r7, #15
 80022a0:	2201      	movs	r2, #1
 80022a2:	2122      	movs	r1, #34	; 0x22
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fb43 	bl	8002930 <GYRO_IO_Write>
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80022bc:	f107 030f 	add.w	r3, r7, #15
 80022c0:	2201      	movs	r2, #1
 80022c2:	2122      	movs	r1, #34	; 0x22
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fb65 	bl	8002994 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	e009      	b.n	80022f4 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d106      	bne.n	80022f4 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	f023 0308 	bic.w	r3, r3, #8
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80022f4:	f107 030f 	add.w	r3, r7, #15
 80022f8:	2201      	movs	r2, #1
 80022fa:	2122      	movs	r1, #34	; 0x22
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fb17 	bl	8002930 <GYRO_IO_Write>
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002314:	f107 030f 	add.w	r3, r7, #15
 8002318:	2201      	movs	r2, #1
 800231a:	2121      	movs	r1, #33	; 0x21
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fb39 	bl	8002994 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002328:	b2db      	uxtb	r3, r3
 800232a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	4313      	orrs	r3, r2
 8002332:	b2db      	uxtb	r3, r3
 8002334:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002336:	f107 030f 	add.w	r3, r7, #15
 800233a:	2201      	movs	r2, #1
 800233c:	2121      	movs	r1, #33	; 0x21
 800233e:	4618      	mov	r0, r3
 8002340:	f000 faf6 	bl	8002930 <GYRO_IO_Write>
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002356:	f107 030f 	add.w	r3, r7, #15
 800235a:	2201      	movs	r2, #1
 800235c:	2124      	movs	r1, #36	; 0x24
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fb18 	bl	8002994 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	f023 0310 	bic.w	r3, r3, #16
 800236a:	b2db      	uxtb	r3, r3
 800236c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	4313      	orrs	r3, r2
 8002374:	b2db      	uxtb	r3, r3
 8002376:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002378:	f107 030f 	add.w	r3, r7, #15
 800237c:	2201      	movs	r2, #1
 800237e:	2124      	movs	r1, #36	; 0x24
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fad5 	bl	8002930 <GYRO_IO_Write>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	2300      	movs	r3, #0
 800239e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80023b8:	f107 030f 	add.w	r3, r7, #15
 80023bc:	2201      	movs	r2, #1
 80023be:	2123      	movs	r1, #35	; 0x23
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fae7 	bl	8002994 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80023c6:	f107 0318 	add.w	r3, r7, #24
 80023ca:	2206      	movs	r2, #6
 80023cc:	2128      	movs	r1, #40	; 0x28
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fae0 	bl	8002994 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d123      	bne.n	8002426 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	e01c      	b.n	800241e <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	3301      	adds	r3, #1
 80023ea:	3328      	adds	r3, #40	; 0x28
 80023ec:	443b      	add	r3, r7
 80023ee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	3328      	adds	r3, #40	; 0x28
 80023fe:	443b      	add	r3, r7
 8002400:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002404:	b29b      	uxth	r3, r3
 8002406:	4413      	add	r3, r2
 8002408:	b29b      	uxth	r3, r3
 800240a:	b21a      	sxth	r2, r3
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	3328      	adds	r3, #40	; 0x28
 8002412:	443b      	add	r3, r7
 8002414:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	3301      	adds	r3, #1
 800241c:	623b      	str	r3, [r7, #32]
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	2b02      	cmp	r3, #2
 8002422:	dddf      	ble.n	80023e4 <L3GD20_ReadXYZAngRate+0x54>
 8002424:	e022      	b.n	800246c <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	e01c      	b.n	8002466 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	3328      	adds	r3, #40	; 0x28
 8002432:	443b      	add	r3, r7
 8002434:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002438:	b29b      	uxth	r3, r3
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	b29a      	uxth	r2, r3
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	3301      	adds	r3, #1
 8002444:	3328      	adds	r3, #40	; 0x28
 8002446:	443b      	add	r3, r7
 8002448:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800244c:	b29b      	uxth	r3, r3
 800244e:	4413      	add	r3, r2
 8002450:	b29b      	uxth	r3, r3
 8002452:	b21a      	sxth	r2, r3
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	3328      	adds	r3, #40	; 0x28
 800245a:	443b      	add	r3, r7
 800245c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	3301      	adds	r3, #1
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	2b02      	cmp	r3, #2
 800246a:	dddf      	ble.n	800242c <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002472:	2b20      	cmp	r3, #32
 8002474:	d00c      	beq.n	8002490 <L3GD20_ReadXYZAngRate+0x100>
 8002476:	2b20      	cmp	r3, #32
 8002478:	dc0d      	bgt.n	8002496 <L3GD20_ReadXYZAngRate+0x106>
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <L3GD20_ReadXYZAngRate+0xf4>
 800247e:	2b10      	cmp	r3, #16
 8002480:	d003      	beq.n	800248a <L3GD20_ReadXYZAngRate+0xfa>
 8002482:	e008      	b.n	8002496 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <L3GD20_ReadXYZAngRate+0x14c>)
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002488:	e005      	b.n	8002496 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <L3GD20_ReadXYZAngRate+0x150>)
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800248e:	e002      	b.n	8002496 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <L3GD20_ReadXYZAngRate+0x154>)
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002494:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	e016      	b.n	80024ca <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	3328      	adds	r3, #40	; 0x28
 80024a2:	443b      	add	r3, r7
 80024a4:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c0:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	3301      	adds	r3, #1
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	dde5      	ble.n	800249c <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3728      	adds	r7, #40	; 0x28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	410c0000 	.word	0x410c0000
 80024e0:	418c0000 	.word	0x418c0000
 80024e4:	428c0000 	.word	0x428c0000

080024e8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80024ec:	4819      	ldr	r0, [pc, #100]	; (8002554 <SPIx_Init+0x6c>)
 80024ee:	f005 fe64 	bl	80081ba <HAL_SPI_GetState>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d12b      	bne.n	8002550 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <SPIx_Init+0x6c>)
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <SPIx_Init+0x70>)
 80024fc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <SPIx_Init+0x6c>)
 8002500:	2218      	movs	r2, #24
 8002502:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <SPIx_Init+0x6c>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <SPIx_Init+0x6c>)
 800250c:	2200      	movs	r2, #0
 800250e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <SPIx_Init+0x6c>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <SPIx_Init+0x6c>)
 8002518:	2200      	movs	r2, #0
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <SPIx_Init+0x6c>)
 800251e:	2207      	movs	r2, #7
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <SPIx_Init+0x6c>)
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <SPIx_Init+0x6c>)
 800252a:	2200      	movs	r2, #0
 800252c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <SPIx_Init+0x6c>)
 8002530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002534:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002536:	4b07      	ldr	r3, [pc, #28]	; (8002554 <SPIx_Init+0x6c>)
 8002538:	2200      	movs	r2, #0
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SPIx_Init+0x6c>)
 800253e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002542:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <SPIx_Init+0x6c>)
 8002546:	f000 f873 	bl	8002630 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800254a:	4802      	ldr	r0, [pc, #8]	; (8002554 <SPIx_Init+0x6c>)
 800254c:	f005 f995 	bl	800787a <HAL_SPI_Init>
  }
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000650 	.word	0x20000650
 8002558:	40015000 	.word	0x40015000

0800255c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	b29a      	uxth	r2, r3
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <SPIx_Read+0x38>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f107 0108 	add.w	r1, r7, #8
 8002576:	4808      	ldr	r0, [pc, #32]	; (8002598 <SPIx_Read+0x3c>)
 8002578:	f005 fb6c 	bl	8007c54 <HAL_SPI_Receive>
 800257c:	4603      	mov	r3, r0
 800257e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002586:	f000 f847 	bl	8002618 <SPIx_Error>
  }

  return readvalue;
 800258a:	68bb      	ldr	r3, [r7, #8]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	2000007c 	.word	0x2000007c
 8002598:	20000650 	.word	0x20000650

0800259c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <SPIx_Write+0x34>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1db9      	adds	r1, r7, #6
 80025b0:	2201      	movs	r2, #1
 80025b2:	4808      	ldr	r0, [pc, #32]	; (80025d4 <SPIx_Write+0x38>)
 80025b4:	f005 fa12 	bl	80079dc <HAL_SPI_Transmit>
 80025b8:	4603      	mov	r3, r0
 80025ba:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80025c2:	f000 f829 	bl	8002618 <SPIx_Error>
  }
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2000007c 	.word	0x2000007c
 80025d4:	20000650 	.word	0x20000650

080025d8 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af02      	add	r7, sp, #8
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <SPIx_WriteRead+0x38>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f107 020f 	add.w	r2, r7, #15
 80025ee:	1df9      	adds	r1, r7, #7
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2301      	movs	r3, #1
 80025f4:	4807      	ldr	r0, [pc, #28]	; (8002614 <SPIx_WriteRead+0x3c>)
 80025f6:	f005 fc3e 	bl	8007e76 <HAL_SPI_TransmitReceive>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002600:	f000 f80a 	bl	8002618 <SPIx_Error>
  }

  return receivedbyte;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000007c 	.word	0x2000007c
 8002614:	20000650 	.word	0x20000650

08002618 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800261c:	4803      	ldr	r0, [pc, #12]	; (800262c <SPIx_Error+0x14>)
 800261e:	f005 f9b5 	bl	800798c <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002622:	f7ff ff61 	bl	80024e8 <SPIx_Init>
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000650 	.word	0x20000650

08002630 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <SPIx_MspInit+0x6c>)
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <SPIx_MspInit+0x6c>)
 8002642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002646:	6453      	str	r3, [r2, #68]	; 0x44
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <SPIx_MspInit+0x6c>)
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <SPIx_MspInit+0x6c>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	4a0f      	ldr	r2, [pc, #60]	; (800269c <SPIx_MspInit+0x6c>)
 800265e:	f043 0320 	orr.w	r3, r3, #32
 8002662:	6313      	str	r3, [r2, #48]	; 0x30
 8002664:	4b0d      	ldr	r3, [pc, #52]	; (800269c <SPIx_MspInit+0x6c>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002670:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002674:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800267a:	2302      	movs	r3, #2
 800267c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800267e:	2301      	movs	r3, #1
 8002680:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002682:	2305      	movs	r3, #5
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	4804      	ldr	r0, [pc, #16]	; (80026a0 <SPIx_MspInit+0x70>)
 800268e:	f001 fffb 	bl	8004688 <HAL_GPIO_Init>
}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	; 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40021400 	.word	0x40021400

080026a4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <LCD_IO_Init+0xe0>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d164      	bne.n	800277c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80026b2:	4b34      	ldr	r3, [pc, #208]	; (8002784 <LCD_IO_Init+0xe0>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	4b32      	ldr	r3, [pc, #200]	; (8002788 <LCD_IO_Init+0xe4>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	4a31      	ldr	r2, [pc, #196]	; (8002788 <LCD_IO_Init+0xe4>)
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	6313      	str	r3, [r2, #48]	; 0x30
 80026c8:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <LCD_IO_Init+0xe4>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80026d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026da:	2301      	movs	r3, #1
 80026dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026e2:	2302      	movs	r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	4619      	mov	r1, r3
 80026ec:	4827      	ldr	r0, [pc, #156]	; (800278c <LCD_IO_Init+0xe8>)
 80026ee:	f001 ffcb 	bl	8004688 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <LCD_IO_Init+0xe4>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a23      	ldr	r2, [pc, #140]	; (8002788 <LCD_IO_Init+0xe4>)
 80026fc:	f043 0308 	orr.w	r3, r3, #8
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <LCD_IO_Init+0xe4>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800270e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002712:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002714:	2301      	movs	r3, #1
 8002716:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800271c:	2302      	movs	r3, #2
 800271e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	4619      	mov	r1, r3
 8002726:	4819      	ldr	r0, [pc, #100]	; (800278c <LCD_IO_Init+0xe8>)
 8002728:	f001 ffae 	bl	8004688 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800272c:	2300      	movs	r3, #0
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <LCD_IO_Init+0xe4>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <LCD_IO_Init+0xe4>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6313      	str	r3, [r2, #48]	; 0x30
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <LCD_IO_Init+0xe4>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	603b      	str	r3, [r7, #0]
 8002746:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002748:	2304      	movs	r3, #4
 800274a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800274c:	2301      	movs	r3, #1
 800274e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002754:	2302      	movs	r3, #2
 8002756:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	4619      	mov	r1, r3
 800275e:	480c      	ldr	r0, [pc, #48]	; (8002790 <LCD_IO_Init+0xec>)
 8002760:	f001 ff92 	bl	8004688 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002764:	2200      	movs	r2, #0
 8002766:	2104      	movs	r1, #4
 8002768:	4809      	ldr	r0, [pc, #36]	; (8002790 <LCD_IO_Init+0xec>)
 800276a:	f002 fa45 	bl	8004bf8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800276e:	2201      	movs	r2, #1
 8002770:	2104      	movs	r1, #4
 8002772:	4807      	ldr	r0, [pc, #28]	; (8002790 <LCD_IO_Init+0xec>)
 8002774:	f002 fa40 	bl	8004bf8 <HAL_GPIO_WritePin>

    SPIx_Init();
 8002778:	f7ff feb6 	bl	80024e8 <SPIx_Init>
  }
}
 800277c:	bf00      	nop
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200006a8 	.word	0x200006a8
 8002788:	40023800 	.word	0x40023800
 800278c:	40020c00 	.word	0x40020c00
 8002790:	40020800 	.word	0x40020800

08002794 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800279e:	2201      	movs	r2, #1
 80027a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027a4:	480a      	ldr	r0, [pc, #40]	; (80027d0 <LCD_IO_WriteData+0x3c>)
 80027a6:	f002 fa27 	bl	8004bf8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80027aa:	2200      	movs	r2, #0
 80027ac:	2104      	movs	r1, #4
 80027ae:	4809      	ldr	r0, [pc, #36]	; (80027d4 <LCD_IO_WriteData+0x40>)
 80027b0:	f002 fa22 	bl	8004bf8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fef0 	bl	800259c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80027bc:	2201      	movs	r2, #1
 80027be:	2104      	movs	r1, #4
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <LCD_IO_WriteData+0x40>)
 80027c2:	f002 fa19 	bl	8004bf8 <HAL_GPIO_WritePin>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40020c00 	.word	0x40020c00
 80027d4:	40020800 	.word	0x40020800

080027d8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80027e2:	2200      	movs	r2, #0
 80027e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027e8:	480a      	ldr	r0, [pc, #40]	; (8002814 <LCD_IO_WriteReg+0x3c>)
 80027ea:	f002 fa05 	bl	8004bf8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80027ee:	2200      	movs	r2, #0
 80027f0:	2104      	movs	r1, #4
 80027f2:	4809      	ldr	r0, [pc, #36]	; (8002818 <LCD_IO_WriteReg+0x40>)
 80027f4:	f002 fa00 	bl	8004bf8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fecd 	bl	800259c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002802:	2201      	movs	r2, #1
 8002804:	2104      	movs	r1, #4
 8002806:	4804      	ldr	r0, [pc, #16]	; (8002818 <LCD_IO_WriteReg+0x40>)
 8002808:	f002 f9f6 	bl	8004bf8 <HAL_GPIO_WritePin>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40020c00 	.word	0x40020c00
 8002818:	40020800 	.word	0x40020800

0800281c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	460a      	mov	r2, r1
 8002826:	80fb      	strh	r3, [r7, #6]
 8002828:	4613      	mov	r3, r2
 800282a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002830:	2200      	movs	r2, #0
 8002832:	2104      	movs	r1, #4
 8002834:	4810      	ldr	r0, [pc, #64]	; (8002878 <LCD_IO_ReadData+0x5c>)
 8002836:	f002 f9df 	bl	8004bf8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800283a:	2200      	movs	r2, #0
 800283c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002840:	480e      	ldr	r0, [pc, #56]	; (800287c <LCD_IO_ReadData+0x60>)
 8002842:	f002 f9d9 	bl	8004bf8 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fea7 	bl	800259c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 800284e:	797b      	ldrb	r3, [r7, #5]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fe83 	bl	800255c <SPIx_Read>
 8002856:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800285e:	4807      	ldr	r0, [pc, #28]	; (800287c <LCD_IO_ReadData+0x60>)
 8002860:	f002 f9ca 	bl	8004bf8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002864:	2201      	movs	r2, #1
 8002866:	2104      	movs	r1, #4
 8002868:	4803      	ldr	r0, [pc, #12]	; (8002878 <LCD_IO_ReadData+0x5c>)
 800286a:	f002 f9c5 	bl	8004bf8 <HAL_GPIO_WritePin>

  return readvalue;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40020800 	.word	0x40020800
 800287c:	40020c00 	.word	0x40020c00

08002880 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f001 f9a3 	bl	8003bd4 <HAL_Delay>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <GYRO_IO_Init+0x8c>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <GYRO_IO_Init+0x8c>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <GYRO_IO_Init+0x8c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80028ba:	2302      	movs	r3, #2
 80028bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80028be:	2301      	movs	r3, #1
 80028c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	4619      	mov	r1, r3
 80028d0:	4815      	ldr	r0, [pc, #84]	; (8002928 <GYRO_IO_Init+0x90>)
 80028d2:	f001 fed9 	bl	8004688 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80028d6:	2201      	movs	r2, #1
 80028d8:	2102      	movs	r1, #2
 80028da:	4813      	ldr	r0, [pc, #76]	; (8002928 <GYRO_IO_Init+0x90>)
 80028dc:	f002 f98c 	bl	8004bf8 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <GYRO_IO_Init+0x8c>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <GYRO_IO_Init+0x8c>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6313      	str	r3, [r2, #48]	; 0x30
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <GYRO_IO_Init+0x8c>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80028fc:	2306      	movs	r3, #6
 80028fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002904:	2302      	movs	r3, #2
 8002906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	4619      	mov	r1, r3
 8002912:	4806      	ldr	r0, [pc, #24]	; (800292c <GYRO_IO_Init+0x94>)
 8002914:	f001 feb8 	bl	8004688 <HAL_GPIO_Init>

  SPIx_Init();
 8002918:	f7ff fde6 	bl	80024e8 <SPIx_Init>
}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	40020800 	.word	0x40020800
 800292c:	40020000 	.word	0x40020000

08002930 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	70fb      	strb	r3, [r7, #3]
 800293c:	4613      	mov	r3, r2
 800293e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8002940:	883b      	ldrh	r3, [r7, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d903      	bls.n	800294e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800294c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800294e:	2200      	movs	r2, #0
 8002950:	2102      	movs	r1, #2
 8002952:	480f      	ldr	r0, [pc, #60]	; (8002990 <GYRO_IO_Write+0x60>)
 8002954:	f002 f950 	bl	8004bf8 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fe3c 	bl	80025d8 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8002960:	e00a      	b.n	8002978 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fe36 	bl	80025d8 <SPIx_WriteRead>
    NumByteToWrite--;
 800296c:	883b      	ldrh	r3, [r7, #0]
 800296e:	3b01      	subs	r3, #1
 8002970:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3301      	adds	r3, #1
 8002976:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8002978:	883b      	ldrh	r3, [r7, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f1      	bne.n	8002962 <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 800297e:	2201      	movs	r2, #1
 8002980:	2102      	movs	r1, #2
 8002982:	4803      	ldr	r0, [pc, #12]	; (8002990 <GYRO_IO_Write+0x60>)
 8002984:	f002 f938 	bl	8004bf8 <HAL_GPIO_WritePin>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40020800 	.word	0x40020800

08002994 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
 80029a0:	4613      	mov	r3, r2
 80029a2:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 80029a4:	883b      	ldrh	r3, [r7, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d904      	bls.n	80029b4 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80029b0:	70fb      	strb	r3, [r7, #3]
 80029b2:	e003      	b.n	80029bc <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029ba:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80029bc:	2200      	movs	r2, #0
 80029be:	2102      	movs	r1, #2
 80029c0:	4810      	ldr	r0, [pc, #64]	; (8002a04 <GYRO_IO_Read+0x70>)
 80029c2:	f002 f919 	bl	8004bf8 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fe05 	bl	80025d8 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 80029ce:	e00c      	b.n	80029ea <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7ff fe01 	bl	80025d8 <SPIx_WriteRead>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80029de:	883b      	ldrh	r3, [r7, #0]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3301      	adds	r3, #1
 80029e8:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 80029ea:	883b      	ldrh	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ef      	bne.n	80029d0 <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 80029f0:	2201      	movs	r2, #1
 80029f2:	2102      	movs	r1, #2
 80029f4:	4803      	ldr	r0, [pc, #12]	; (8002a04 <GYRO_IO_Read+0x70>)
 80029f6:	f002 f8ff 	bl	8004bf8 <HAL_GPIO_WritePin>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40020800 	.word	0x40020800

08002a08 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002a12:	2300      	movs	r3, #0
 8002a14:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 8002a16:	2300      	movs	r3, #0
 8002a18:	703b      	strb	r3, [r7, #0]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002a1e:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <BSP_GYRO_Init+0xc4>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4798      	blx	r3
 8002a24:	4603      	mov	r3, r0
 8002a26:	2bd4      	cmp	r3, #212	; 0xd4
 8002a28:	d005      	beq.n	8002a36 <BSP_GYRO_Init+0x2e>
 8002a2a:	4b28      	ldr	r3, [pc, #160]	; (8002acc <BSP_GYRO_Init+0xc4>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4798      	blx	r3
 8002a30:	4603      	mov	r3, r0
 8002a32:	2bd5      	cmp	r3, #213	; 0xd5
 8002a34:	d145      	bne.n	8002ac2 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002a36:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <BSP_GYRO_Init+0xc8>)
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <BSP_GYRO_Init+0xc4>)
 8002a3a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002a40:	2300      	movs	r3, #0
 8002a42:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002a44:	2307      	movs	r3, #7
 8002a46:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002a48:	2330      	movs	r3, #48	; 0x30
 8002a4a:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002a50:	2300      	movs	r3, #0
 8002a52:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002a54:	2310      	movs	r3, #16
 8002a56:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002a58:	793a      	ldrb	r2, [r7, #4]
 8002a5a:	797b      	ldrb	r3, [r7, #5]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002a60:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002a62:	4313      	orrs	r3, r2
 8002a64:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002a66:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002a6e:	7a3a      	ldrb	r2, [r7, #8]
 8002a70:	7a7b      	ldrb	r3, [r7, #9]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 8002a76:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	89bb      	ldrh	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <BSP_GYRO_Init+0xc8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	89ba      	ldrh	r2, [r7, #12]
 8002a90:	4610      	mov	r0, r2
 8002a92:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002a94:	2300      	movs	r3, #0
 8002a96:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8002a9c:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002a9e:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <BSP_GYRO_Init+0xc8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	89ba      	ldrh	r2, [r7, #12]
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <BSP_GYRO_Init+0xc8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	2010      	movs	r0, #16
 8002abc:	4798      	blx	r3

    ret = GYRO_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000048 	.word	0x20000048
 8002ad0:	200006ac 	.word	0x200006ac

08002ad4 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <BSP_GYRO_GetXYZ+0x24>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d004      	beq.n	8002af0 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002ae6:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <BSP_GYRO_GetXYZ+0x24>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
  }
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200006ac 	.word	0x200006ac

08002afc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8002b00:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b02:	4a2e      	ldr	r2, [pc, #184]	; (8002bbc <BSP_LCD_Init+0xc0>)
 8002b04:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002b06:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b08:	2209      	movs	r2, #9
 8002b0a:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002b12:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b14:	221d      	movs	r2, #29
 8002b16:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b20:	f240 120d 	movw	r2, #269	; 0x10d
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b28:	f240 1243 	movw	r2, #323	; 0x143
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b30:	f240 1217 	movw	r2, #279	; 0x117
 8002b34:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8002b36:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b38:	f240 1247 	movw	r2, #327	; 0x147
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8002b46:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <BSP_LCD_Init+0xc4>)
 8002b58:	2208      	movs	r2, #8
 8002b5a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <BSP_LCD_Init+0xc4>)
 8002b5e:	22c0      	movs	r2, #192	; 0xc0
 8002b60:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <BSP_LCD_Init+0xc4>)
 8002b64:	2204      	movs	r2, #4
 8002b66:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002b68:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <BSP_LCD_Init+0xc4>)
 8002b6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002b70:	4813      	ldr	r0, [pc, #76]	; (8002bc0 <BSP_LCD_Init+0xc4>)
 8002b72:	f004 fc27 	bl	80073c4 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002b7c:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8002b8e:	f000 fc27 	bl	80033e0 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8002b92:	4809      	ldr	r0, [pc, #36]	; (8002bb8 <BSP_LCD_Init+0xbc>)
 8002b94:	f002 fa0a 	bl	8004fac <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8002b98:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <BSP_LCD_Init+0xc8>)
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <BSP_LCD_Init+0xcc>)
 8002b9c:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <BSP_LCD_Init+0xc8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002ba6:	f000 fe09 	bl	80037bc <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002baa:	4808      	ldr	r0, [pc, #32]	; (8002bcc <BSP_LCD_Init+0xd0>)
 8002bac:	f000 f8ce 	bl	8002d4c <BSP_LCD_SetFont>

  return LCD_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200006b0 	.word	0x200006b0
 8002bbc:	40016800 	.word	0x40016800
 8002bc0:	20000798 	.word	0x20000798
 8002bc4:	200007e4 	.word	0x200007e4
 8002bc8:	20000010 	.word	0x20000010
 8002bcc:	20000080 	.word	0x20000080

08002bd0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <BSP_LCD_GetXSize+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	4798      	blx	r3
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200007e4 	.word	0x200007e4

08002be8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <BSP_LCD_GetYSize+0x14>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	4798      	blx	r3
 8002bf4:	4603      	mov	r3, r0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200007e4 	.word	0x200007e4

08002c00 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b090      	sub	sp, #64	; 0x40
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002c10:	f7ff ffde 	bl	8002bd0 <BSP_LCD_GetXSize>
 8002c14:	4603      	mov	r3, r0
 8002c16:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8002c1c:	f7ff ffe4 	bl	8002be8 <BSP_LCD_GetYSize>
 8002c20:	4603      	mov	r3, r0
 8002c22:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002c2c:	23ff      	movs	r3, #255	; 0xff
 8002c2e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002c46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002c50:	f7ff ffbe 	bl	8002bd0 <BSP_LCD_GetXSize>
 8002c54:	4603      	mov	r3, r0
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002c58:	f7ff ffc6 	bl	8002be8 <BSP_LCD_GetYSize>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	63bb      	str	r3, [r7, #56]	; 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	4619      	mov	r1, r3
 8002c68:	4814      	ldr	r0, [pc, #80]	; (8002cbc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c6a:	f002 fa79 	bl	8005160 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002c6e:	88fa      	ldrh	r2, [r7, #6]
 8002c70:	4913      	ldr	r1, [pc, #76]	; (8002cc0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c82:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002c84:	88fa      	ldrh	r2, [r7, #6]
 8002c86:	490e      	ldr	r1, [pc, #56]	; (8002cc0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3308      	adds	r3, #8
 8002c94:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002c96:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	4909      	ldr	r1, [pc, #36]	; (8002cc0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002caa:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002cac:	4803      	ldr	r0, [pc, #12]	; (8002cbc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002cae:	f002 fa95 	bl	80051dc <HAL_LTDC_EnableDither>
}
 8002cb2:	bf00      	nop
 8002cb4:	3740      	adds	r7, #64	; 0x40
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200006b0 	.word	0x200006b0
 8002cc0:	200007cc 	.word	0x200007cc
 8002cc4:	20000080 	.word	0x20000080

08002cc8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <BSP_LCD_SelectLayer+0x1c>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	200007c8 	.word	0x200007c8

08002ce8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002cf0:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <BSP_LCD_SetTextColor+0x28>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4907      	ldr	r1, [pc, #28]	; (8002d14 <BSP_LCD_SetTextColor+0x2c>)
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	601a      	str	r2, [r3, #0]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	200007c8 	.word	0x200007c8
 8002d14:	200007cc 	.word	0x200007cc

08002d18 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <BSP_LCD_SetBackColor+0x2c>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4908      	ldr	r1, [pc, #32]	; (8002d48 <BSP_LCD_SetBackColor+0x30>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3304      	adds	r3, #4
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	601a      	str	r2, [r3, #0]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	200007c8 	.word	0x200007c8
 8002d48:	200007cc 	.word	0x200007cc

08002d4c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <BSP_LCD_SetFont+0x2c>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4908      	ldr	r1, [pc, #32]	; (8002d7c <BSP_LCD_SetFont+0x30>)
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	3308      	adds	r3, #8
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	200007c8 	.word	0x200007c8
 8002d7c:	200007cc 	.word	0x200007cc

08002d80 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <BSP_LCD_GetFont+0x24>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4907      	ldr	r1, [pc, #28]	; (8002da8 <BSP_LCD_GetFont+0x28>)
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3308      	adds	r3, #8
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	200007c8 	.word	0x200007c8
 8002da8:	200007cc 	.word	0x200007cc

08002dac <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8002dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <BSP_LCD_Clear+0x48>)
 8002db6:	681c      	ldr	r4, [r3, #0]
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <BSP_LCD_Clear+0x48>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <BSP_LCD_Clear+0x4c>)
 8002dbe:	2134      	movs	r1, #52	; 0x34
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	335c      	adds	r3, #92	; 0x5c
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461e      	mov	r6, r3
 8002dcc:	f7ff ff00 	bl	8002bd0 <BSP_LCD_GetXSize>
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	f7ff ff09 	bl	8002be8 <BSP_LCD_GetYSize>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	462a      	mov	r2, r5
 8002de4:	4631      	mov	r1, r6
 8002de6:	4620      	mov	r0, r4
 8002de8:	f000 fcb0 	bl	800374c <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df4:	200007c8 	.word	0x200007c8
 8002df8:	200006b0 	.word	0x200006b0

08002dfc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	80fb      	strh	r3, [r7, #6]
 8002e06:	460b      	mov	r3, r1
 8002e08:	80bb      	strh	r3, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <BSP_LCD_DisplayChar+0x80>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	491b      	ldr	r1, [pc, #108]	; (8002e80 <BSP_LCD_DisplayChar+0x84>)
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3308      	adds	r3, #8
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <BSP_LCD_DisplayChar+0x80>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4c14      	ldr	r4, [pc, #80]	; (8002e80 <BSP_LCD_DisplayChar+0x84>)
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4423      	add	r3, r4
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002e40:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <BSP_LCD_DisplayChar+0x80>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4c0d      	ldr	r4, [pc, #52]	; (8002e80 <BSP_LCD_DisplayChar+0x84>)
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4423      	add	r3, r4
 8002e54:	3308      	adds	r3, #8
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	889b      	ldrh	r3, [r3, #4]
 8002e5a:	3307      	adds	r3, #7
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	da00      	bge.n	8002e62 <BSP_LCD_DisplayChar+0x66>
 8002e60:	3307      	adds	r3, #7
 8002e62:	10db      	asrs	r3, r3, #3
 8002e64:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002e68:	18ca      	adds	r2, r1, r3
 8002e6a:	88b9      	ldrh	r1, [r7, #4]
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fbb2 	bl	80035d8 <DrawChar>
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd90      	pop	{r4, r7, pc}
 8002e7c:	200007c8 	.word	0x200007c8
 8002e80:	200007cc 	.word	0x200007cc

08002e84 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002e84:	b5b0      	push	{r4, r5, r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60ba      	str	r2, [r7, #8]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	81fb      	strh	r3, [r7, #14]
 8002e92:	460b      	mov	r3, r1
 8002e94:	81bb      	strh	r3, [r7, #12]
 8002e96:	4613      	mov	r3, r2
 8002e98:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	83fb      	strh	r3, [r7, #30]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8002eae:	e002      	b.n	8002eb6 <BSP_LCD_DisplayStringAt+0x32>
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	617a      	str	r2, [r7, #20]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f6      	bne.n	8002eb0 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8002ec2:	f7ff fe85 	bl	8002bd0 <BSP_LCD_GetXSize>
 8002ec6:	4601      	mov	r1, r0
 8002ec8:	4b4b      	ldr	r3, [pc, #300]	; (8002ff8 <BSP_LCD_DisplayStringAt+0x174>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	484b      	ldr	r0, [pc, #300]	; (8002ffc <BSP_LCD_DisplayStringAt+0x178>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4403      	add	r3, r0
 8002ed8:	3308      	adds	r3, #8
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	889b      	ldrh	r3, [r3, #4]
 8002ede:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee2:	613b      	str	r3, [r7, #16]

  switch (mode)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d01c      	beq.n	8002f24 <BSP_LCD_DisplayStringAt+0xa0>
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	dc33      	bgt.n	8002f56 <BSP_LCD_DisplayStringAt+0xd2>
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d002      	beq.n	8002ef8 <BSP_LCD_DisplayStringAt+0x74>
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d019      	beq.n	8002f2a <BSP_LCD_DisplayStringAt+0xa6>
 8002ef6:	e02e      	b.n	8002f56 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1ad1      	subs	r1, r2, r3
 8002efe:	4b3e      	ldr	r3, [pc, #248]	; (8002ff8 <BSP_LCD_DisplayStringAt+0x174>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	483e      	ldr	r0, [pc, #248]	; (8002ffc <BSP_LCD_DisplayStringAt+0x178>)
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4403      	add	r3, r0
 8002f0e:	3308      	adds	r3, #8
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	889b      	ldrh	r3, [r3, #4]
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	89fb      	ldrh	r3, [r7, #14]
 8002f1e:	4413      	add	r3, r2
 8002f20:	83fb      	strh	r3, [r7, #30]
      break;
 8002f22:	e01b      	b.n	8002f5c <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8002f24:	89fb      	ldrh	r3, [r7, #14]
 8002f26:	83fb      	strh	r3, [r7, #30]
      break;
 8002f28:	e018      	b.n	8002f5c <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	b299      	uxth	r1, r3
 8002f32:	4b31      	ldr	r3, [pc, #196]	; (8002ff8 <BSP_LCD_DisplayStringAt+0x174>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4831      	ldr	r0, [pc, #196]	; (8002ffc <BSP_LCD_DisplayStringAt+0x178>)
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4403      	add	r3, r0
 8002f42:	3308      	adds	r3, #8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	889b      	ldrh	r3, [r3, #4]
 8002f48:	fb11 f303 	smulbb	r3, r1, r3
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	4413      	add	r3, r2
 8002f52:	83fb      	strh	r3, [r7, #30]
      break;
 8002f54:	e002      	b.n	8002f5c <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8002f56:	89fb      	ldrh	r3, [r7, #14]
 8002f58:	83fb      	strh	r3, [r7, #30]
      break;
 8002f5a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002f5c:	e01a      	b.n	8002f94 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	89b9      	ldrh	r1, [r7, #12]
 8002f64:	8bfb      	ldrh	r3, [r7, #30]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ff48 	bl	8002dfc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002f6c:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <BSP_LCD_DisplayStringAt+0x174>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4922      	ldr	r1, [pc, #136]	; (8002ffc <BSP_LCD_DisplayStringAt+0x178>)
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	889a      	ldrh	r2, [r3, #4]
 8002f82:	8bfb      	ldrh	r3, [r7, #30]
 8002f84:	4413      	add	r3, r2
 8002f86:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
    i++;
 8002f8e:	8bbb      	ldrh	r3, [r7, #28]
 8002f90:	3301      	adds	r3, #1
 8002f92:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf14      	ite	ne
 8002f9c:	2301      	movne	r3, #1
 8002f9e:	2300      	moveq	r3, #0
 8002fa0:	b2dc      	uxtb	r4, r3
 8002fa2:	f7ff fe15 	bl	8002bd0 <BSP_LCD_GetXSize>
 8002fa6:	8bb9      	ldrh	r1, [r7, #28]
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <BSP_LCD_DisplayStringAt+0x174>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4d13      	ldr	r5, [pc, #76]	; (8002ffc <BSP_LCD_DisplayStringAt+0x178>)
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	442b      	add	r3, r5
 8002fb8:	3308      	adds	r3, #8
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	889b      	ldrh	r3, [r3, #4]
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	1ac3      	subs	r3, r0, r3
 8002fc4:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <BSP_LCD_DisplayStringAt+0x174>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <BSP_LCD_DisplayStringAt+0x178>)
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4403      	add	r3, r0
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002fdc:	4299      	cmp	r1, r3
 8002fde:	bf2c      	ite	cs
 8002fe0:	2301      	movcs	r3, #1
 8002fe2:	2300      	movcc	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	4023      	ands	r3, r4
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1b7      	bne.n	8002f5e <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	3720      	adds	r7, #32
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ff8:	200007c8 	.word	0x200007c8
 8002ffc:	200007cc 	.word	0x200007cc

08003000 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800300c:	f7ff feb8 	bl	8002d80 <BSP_LCD_GetFont>
 8003010:	4603      	mov	r3, r0
 8003012:	88db      	ldrh	r3, [r3, #6]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	fb12 f303 	smulbb	r3, r2, r3
 800301a:	b299      	uxth	r1, r3
 800301c:	2303      	movs	r3, #3
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	2000      	movs	r0, #0
 8003022:	f7ff ff2f 	bl	8002e84 <BSP_LCD_DisplayStringAt>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af02      	add	r7, sp, #8
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
 800303a:	460b      	mov	r3, r1
 800303c:	80bb      	strh	r3, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <BSP_LCD_DrawHLine+0x70>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <BSP_LCD_DrawHLine+0x74>)
 800304c:	2134      	movs	r1, #52	; 0x34
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	335c      	adds	r3, #92	; 0x5c
 8003056:	681c      	ldr	r4, [r3, #0]
 8003058:	f7ff fdba 	bl	8002bd0 <BSP_LCD_GetXSize>
 800305c:	4602      	mov	r2, r0
 800305e:	88bb      	ldrh	r3, [r7, #4]
 8003060:	fb03 f202 	mul.w	r2, r3, r2
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4423      	add	r3, r4
 800306c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <BSP_LCD_DrawHLine+0x70>)
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	68f9      	ldr	r1, [r7, #12]
 8003074:	887c      	ldrh	r4, [r7, #2]
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <BSP_LCD_DrawHLine+0x70>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4d0b      	ldr	r5, [pc, #44]	; (80030a8 <BSP_LCD_DrawHLine+0x78>)
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	442b      	add	r3, r5
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	2300      	movs	r3, #0
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	2301      	movs	r3, #1
 8003090:	4622      	mov	r2, r4
 8003092:	f000 fb5b 	bl	800374c <FillBuffer>
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bdb0      	pop	{r4, r5, r7, pc}
 800309e:	bf00      	nop
 80030a0:	200007c8 	.word	0x200007c8
 80030a4:	200006b0 	.word	0x200006b0
 80030a8:	200007cc 	.word	0x200007cc

080030ac <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
 80030b6:	460b      	mov	r3, r1
 80030b8:	80bb      	strh	r3, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	f1c3 0303 	rsb	r3, r3, #3
 80030c6:	617b      	str	r3, [r7, #20]
  curx = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80030cc:	887b      	ldrh	r3, [r7, #2]
 80030ce:	60fb      	str	r3, [r7, #12]

  while (curx <= cury)
 80030d0:	e0c7      	b.n	8003262 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	4413      	add	r3, r2
 80030da:	b298      	uxth	r0, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	88ba      	ldrh	r2, [r7, #4]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	b299      	uxth	r1, r3
 80030e6:	4b64      	ldr	r3, [pc, #400]	; (8003278 <BSP_LCD_DrawCircle+0x1cc>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4c64      	ldr	r4, [pc, #400]	; (800327c <BSP_LCD_DrawCircle+0x1d0>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4423      	add	r3, r4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f000 fa47 	bl	800358c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	b29b      	uxth	r3, r3
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	b298      	uxth	r0, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	b29b      	uxth	r3, r3
 800310c:	88ba      	ldrh	r2, [r7, #4]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	b299      	uxth	r1, r3
 8003112:	4b59      	ldr	r3, [pc, #356]	; (8003278 <BSP_LCD_DrawCircle+0x1cc>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4c59      	ldr	r4, [pc, #356]	; (800327c <BSP_LCD_DrawCircle+0x1d0>)
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4423      	add	r3, r4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	f000 fa31 	bl	800358c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	b29a      	uxth	r2, r3
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	4413      	add	r3, r2
 8003132:	b298      	uxth	r0, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	b29b      	uxth	r3, r3
 8003138:	88ba      	ldrh	r2, [r7, #4]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	b299      	uxth	r1, r3
 800313e:	4b4e      	ldr	r3, [pc, #312]	; (8003278 <BSP_LCD_DrawCircle+0x1cc>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4c4e      	ldr	r4, [pc, #312]	; (800327c <BSP_LCD_DrawCircle+0x1d0>)
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4423      	add	r3, r4
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	f000 fa1b 	bl	800358c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	b29b      	uxth	r3, r3
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	b298      	uxth	r0, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	b29b      	uxth	r3, r3
 8003164:	88ba      	ldrh	r2, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	b299      	uxth	r1, r3
 800316a:	4b43      	ldr	r3, [pc, #268]	; (8003278 <BSP_LCD_DrawCircle+0x1cc>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4c43      	ldr	r4, [pc, #268]	; (800327c <BSP_LCD_DrawCircle+0x1d0>)
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4423      	add	r3, r4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	f000 fa05 	bl	800358c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	b29a      	uxth	r2, r3
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	4413      	add	r3, r2
 800318a:	b298      	uxth	r0, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	b29a      	uxth	r2, r3
 8003190:	88bb      	ldrh	r3, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	b299      	uxth	r1, r3
 8003196:	4b38      	ldr	r3, [pc, #224]	; (8003278 <BSP_LCD_DrawCircle+0x1cc>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4c38      	ldr	r4, [pc, #224]	; (800327c <BSP_LCD_DrawCircle+0x1d0>)
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4423      	add	r3, r4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f000 f9ef 	bl	800358c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	88fa      	ldrh	r2, [r7, #6]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	b298      	uxth	r0, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	88bb      	ldrh	r3, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	b299      	uxth	r1, r3
 80031c2:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <BSP_LCD_DrawCircle+0x1cc>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4c2d      	ldr	r4, [pc, #180]	; (800327c <BSP_LCD_DrawCircle+0x1d0>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4423      	add	r3, r4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	f000 f9d9 	bl	800358c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	4413      	add	r3, r2
 80031e2:	b298      	uxth	r0, r3
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	88bb      	ldrh	r3, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	b299      	uxth	r1, r3
 80031ee:	4b22      	ldr	r3, [pc, #136]	; (8003278 <BSP_LCD_DrawCircle+0x1cc>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4c22      	ldr	r4, [pc, #136]	; (800327c <BSP_LCD_DrawCircle+0x1d0>)
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4423      	add	r3, r4
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	f000 f9c3 	bl	800358c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	b29b      	uxth	r3, r3
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	b298      	uxth	r0, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	b29a      	uxth	r2, r3
 8003214:	88bb      	ldrh	r3, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	b299      	uxth	r1, r3
 800321a:	4b17      	ldr	r3, [pc, #92]	; (8003278 <BSP_LCD_DrawCircle+0x1cc>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4c17      	ldr	r4, [pc, #92]	; (800327c <BSP_LCD_DrawCircle+0x1d0>)
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4423      	add	r3, r4
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	f000 f9ad 	bl	800358c <BSP_LCD_DrawPixel>

    if (d < 0)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	da06      	bge.n	8003246 <BSP_LCD_DrawCircle+0x19a>
    {
      d += (curx << 2) + 6;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	009a      	lsls	r2, r3, #2
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	4413      	add	r3, r2
 8003240:	3306      	adds	r3, #6
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	e00a      	b.n	800325c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	009a      	lsls	r2, r3, #2
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	4413      	add	r3, r2
 8003252:	330a      	adds	r3, #10
 8003254:	617b      	str	r3, [r7, #20]
      cury--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3b01      	subs	r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	3301      	adds	r3, #1
 8003260:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	429a      	cmp	r2, r3
 8003268:	f67f af33 	bls.w	80030d2 <BSP_LCD_DrawCircle+0x26>
  }
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}
 8003276:	bf00      	nop
 8003278:	200007c8 	.word	0x200007c8
 800327c:	200007cc 	.word	0x200007cc

08003280 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	80fb      	strh	r3, [r7, #6]
 800328a:	460b      	mov	r3, r1
 800328c:	80bb      	strh	r3, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	f1c3 0303 	rsb	r3, r3, #3
 800329a:	617b      	str	r3, [r7, #20]

  curx = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80032a0:	887b      	ldrh	r3, [r7, #2]
 80032a2:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80032a4:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <BSP_LCD_FillCircle+0x138>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4944      	ldr	r1, [pc, #272]	; (80033bc <BSP_LCD_FillCircle+0x13c>)
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fd16 	bl	8002ce8 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80032bc:	e061      	b.n	8003382 <BSP_LCD_FillCircle+0x102>
  {
    if (cury > 0)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d021      	beq.n	8003308 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	88fa      	ldrh	r2, [r7, #6]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	b298      	uxth	r0, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	88bb      	ldrh	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	b299      	uxth	r1, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	b29b      	uxth	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	f7ff fea5 	bl	8003030 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	88fa      	ldrh	r2, [r7, #6]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	b298      	uxth	r0, r3
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	88ba      	ldrh	r2, [r7, #4]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	b299      	uxth	r1, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	b29b      	uxth	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	f7ff fe94 	bl	8003030 <BSP_LCD_DrawHLine>
    }

    if (curx > 0)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d021      	beq.n	8003352 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	b29b      	uxth	r3, r3
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	b298      	uxth	r0, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	b29b      	uxth	r3, r3
 800331c:	88ba      	ldrh	r2, [r7, #4]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	b299      	uxth	r1, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	b29b      	uxth	r3, r3
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	b29b      	uxth	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	f7ff fe80 	bl	8003030 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	b29b      	uxth	r3, r3
 8003334:	88fa      	ldrh	r2, [r7, #6]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	b298      	uxth	r0, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	b29a      	uxth	r2, r3
 800333e:	88bb      	ldrh	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	b299      	uxth	r1, r3
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	b29b      	uxth	r3, r3
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	b29b      	uxth	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	f7ff fe6f 	bl	8003030 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b00      	cmp	r3, #0
 8003356:	da06      	bge.n	8003366 <BSP_LCD_FillCircle+0xe6>
    {
      d += (curx << 2) + 6;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	009a      	lsls	r2, r3, #2
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4413      	add	r3, r2
 8003360:	3306      	adds	r3, #6
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	e00a      	b.n	800337c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	009a      	lsls	r2, r3, #2
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	4413      	add	r3, r2
 8003372:	330a      	adds	r3, #10
 8003374:	617b      	str	r3, [r7, #20]
      cury--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3b01      	subs	r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	3301      	adds	r3, #1
 8003380:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	429a      	cmp	r2, r3
 8003388:	d999      	bls.n	80032be <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <BSP_LCD_FillCircle+0x138>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	490b      	ldr	r1, [pc, #44]	; (80033bc <BSP_LCD_FillCircle+0x13c>)
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fca3 	bl	8002ce8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	88b9      	ldrh	r1, [r7, #4]
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fe7f 	bl	80030ac <BSP_LCD_DrawCircle>
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200007c8 	.word	0x200007c8
 80033bc:	200007cc 	.word	0x200007cc

080033c0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <BSP_LCD_DisplayOn+0x1c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80033ce:	4b03      	ldr	r3, [pc, #12]	; (80033dc <BSP_LCD_DisplayOn+0x1c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4798      	blx	r3
  }
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200007e4 	.word	0x200007e4

080033e0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08e      	sub	sp, #56	; 0x38
 80033e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
 80033ea:	4b61      	ldr	r3, [pc, #388]	; (8003570 <BSP_LCD_MspInit+0x190>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	4a60      	ldr	r2, [pc, #384]	; (8003570 <BSP_LCD_MspInit+0x190>)
 80033f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033f4:	6453      	str	r3, [r2, #68]	; 0x44
 80033f6:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <BSP_LCD_MspInit+0x190>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	4b5a      	ldr	r3, [pc, #360]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	4a59      	ldr	r2, [pc, #356]	; (8003570 <BSP_LCD_MspInit+0x190>)
 800340c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003410:	6313      	str	r3, [r2, #48]	; 0x30
 8003412:	4b57      	ldr	r3, [pc, #348]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	4b53      	ldr	r3, [pc, #332]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	4a52      	ldr	r2, [pc, #328]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6313      	str	r3, [r2, #48]	; 0x30
 800342e:	4b50      	ldr	r3, [pc, #320]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	4b4c      	ldr	r3, [pc, #304]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	4a4b      	ldr	r2, [pc, #300]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	6313      	str	r3, [r2, #48]	; 0x30
 800344a:	4b49      	ldr	r3, [pc, #292]	; (8003570 <BSP_LCD_MspInit+0x190>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	4b45      	ldr	r3, [pc, #276]	; (8003570 <BSP_LCD_MspInit+0x190>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	4a44      	ldr	r2, [pc, #272]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003460:	f043 0304 	orr.w	r3, r3, #4
 8003464:	6313      	str	r3, [r2, #48]	; 0x30
 8003466:	4b42      	ldr	r3, [pc, #264]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	4a3d      	ldr	r2, [pc, #244]	; (8003570 <BSP_LCD_MspInit+0x190>)
 800347c:	f043 0308 	orr.w	r3, r3, #8
 8003480:	6313      	str	r3, [r2, #48]	; 0x30
 8003482:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	4b37      	ldr	r3, [pc, #220]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a36      	ldr	r2, [pc, #216]	; (8003570 <BSP_LCD_MspInit+0x190>)
 8003498:	f043 0320 	orr.w	r3, r3, #32
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b34      	ldr	r3, [pc, #208]	; (8003570 <BSP_LCD_MspInit+0x190>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	4b30      	ldr	r3, [pc, #192]	; (8003570 <BSP_LCD_MspInit+0x190>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a2f      	ldr	r2, [pc, #188]	; (8003570 <BSP_LCD_MspInit+0x190>)
 80034b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <BSP_LCD_MspInit+0x190>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80034c6:	f641 0358 	movw	r3, #6232	; 0x1858
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80034d4:	2302      	movs	r3, #2
 80034d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 80034d8:	230e      	movs	r3, #14
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80034dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e0:	4619      	mov	r1, r3
 80034e2:	4824      	ldr	r0, [pc, #144]	; (8003574 <BSP_LCD_MspInit+0x194>)
 80034e4:	f001 f8d0 	bl	8004688 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80034e8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f2:	4619      	mov	r1, r3
 80034f4:	4820      	ldr	r0, [pc, #128]	; (8003578 <BSP_LCD_MspInit+0x198>)
 80034f6:	f001 f8c7 	bl	8004688 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80034fa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003504:	4619      	mov	r1, r3
 8003506:	481d      	ldr	r0, [pc, #116]	; (800357c <BSP_LCD_MspInit+0x19c>)
 8003508:	f001 f8be 	bl	8004688 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800350c:	2348      	movs	r3, #72	; 0x48
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003514:	4619      	mov	r1, r3
 8003516:	481a      	ldr	r0, [pc, #104]	; (8003580 <BSP_LCD_MspInit+0x1a0>)
 8003518:	f001 f8b6 	bl	8004688 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800351c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003526:	4619      	mov	r1, r3
 8003528:	4816      	ldr	r0, [pc, #88]	; (8003584 <BSP_LCD_MspInit+0x1a4>)
 800352a:	f001 f8ad 	bl	8004688 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800352e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003538:	4619      	mov	r1, r3
 800353a:	4813      	ldr	r0, [pc, #76]	; (8003588 <BSP_LCD_MspInit+0x1a8>)
 800353c:	f001 f8a4 	bl	8004688 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003540:	2303      	movs	r3, #3
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8003544:	2309      	movs	r3, #9
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800354c:	4619      	mov	r1, r3
 800354e:	480a      	ldr	r0, [pc, #40]	; (8003578 <BSP_LCD_MspInit+0x198>)
 8003550:	f001 f89a 	bl	8004688 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003554:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800355a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355e:	4619      	mov	r1, r3
 8003560:	4809      	ldr	r0, [pc, #36]	; (8003588 <BSP_LCD_MspInit+0x1a8>)
 8003562:	f001 f891 	bl	8004688 <HAL_GPIO_Init>
}
 8003566:	bf00      	nop
 8003568:	3738      	adds	r7, #56	; 0x38
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	40020000 	.word	0x40020000
 8003578:	40020400 	.word	0x40020400
 800357c:	40020800 	.word	0x40020800
 8003580:	40020c00 	.word	0x40020c00
 8003584:	40021400 	.word	0x40021400
 8003588:	40021800 	.word	0x40021800

0800358c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800358c:	b5b0      	push	{r4, r5, r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	603a      	str	r2, [r7, #0]
 8003596:	80fb      	strh	r3, [r7, #6]
 8003598:	460b      	mov	r3, r1
 800359a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <BSP_LCD_DrawPixel+0x44>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <BSP_LCD_DrawPixel+0x48>)
 80035a2:	2134      	movs	r1, #52	; 0x34
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	335c      	adds	r3, #92	; 0x5c
 80035ac:	681c      	ldr	r4, [r3, #0]
 80035ae:	88bd      	ldrh	r5, [r7, #4]
 80035b0:	f7ff fb0e 	bl	8002bd0 <BSP_LCD_GetXSize>
 80035b4:	4603      	mov	r3, r0
 80035b6:	fb03 f205 	mul.w	r2, r3, r5
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4423      	add	r3, r4
 80035c2:	461a      	mov	r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6013      	str	r3, [r2, #0]
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bdb0      	pop	{r4, r5, r7, pc}
 80035d0:	200007c8 	.word	0x200007c8
 80035d4:	200006b0 	.word	0x200006b0

080035d8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	603a      	str	r2, [r7, #0]
 80035e2:	80fb      	strh	r3, [r7, #6]
 80035e4:	460b      	mov	r3, r1
 80035e6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	2300      	movs	r3, #0
 80035ee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <DrawChar+0x16c>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4953      	ldr	r1, [pc, #332]	; (8003748 <DrawChar+0x170>)
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3308      	adds	r3, #8
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	88db      	ldrh	r3, [r3, #6]
 800360a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800360c:	4b4d      	ldr	r3, [pc, #308]	; (8003744 <DrawChar+0x16c>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	494d      	ldr	r1, [pc, #308]	; (8003748 <DrawChar+0x170>)
 8003612:	4613      	mov	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	3308      	adds	r3, #8
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	889b      	ldrh	r3, [r3, #4]
 8003622:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8003624:	8a3b      	ldrh	r3, [r7, #16]
 8003626:	3307      	adds	r3, #7
 8003628:	2b00      	cmp	r3, #0
 800362a:	da00      	bge.n	800362e <DrawChar+0x56>
 800362c:	3307      	adds	r3, #7
 800362e:	10db      	asrs	r3, r3, #3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	b2da      	uxtb	r2, r3
 8003636:	8a3b      	ldrh	r3, [r7, #16]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	e076      	b.n	8003732 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8003644:	8a3b      	ldrh	r3, [r7, #16]
 8003646:	3307      	adds	r3, #7
 8003648:	2b00      	cmp	r3, #0
 800364a:	da00      	bge.n	800364e <DrawChar+0x76>
 800364c:	3307      	adds	r3, #7
 800364e:	10db      	asrs	r3, r3, #3
 8003650:	461a      	mov	r2, r3
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	4413      	add	r3, r2
 800365c:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800365e:	8a3b      	ldrh	r3, [r7, #16]
 8003660:	3307      	adds	r3, #7
 8003662:	2b00      	cmp	r3, #0
 8003664:	da00      	bge.n	8003668 <DrawChar+0x90>
 8003666:	3307      	adds	r3, #7
 8003668:	10db      	asrs	r3, r3, #3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d002      	beq.n	8003674 <DrawChar+0x9c>
 800366e:	2b02      	cmp	r3, #2
 8003670:	d004      	beq.n	800367c <DrawChar+0xa4>
 8003672:	e00c      	b.n	800368e <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	617b      	str	r3, [r7, #20]
        break;
 800367a:	e016      	b.n	80036aa <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	3201      	adds	r2, #1
 8003686:	7812      	ldrb	r2, [r2, #0]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
        break;
 800368c:	e00d      	b.n	80036aa <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	041a      	lsls	r2, r3, #16
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	3301      	adds	r3, #1
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	4313      	orrs	r3, r2
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	3202      	adds	r2, #2
 80036a2:	7812      	ldrb	r2, [r2, #0]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
        break;
 80036a8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	e036      	b.n	800371e <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 80036b0:	8a3a      	ldrh	r2, [r7, #16]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	1ad2      	subs	r2, r2, r3
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	4413      	add	r3, r2
 80036ba:	3b01      	subs	r3, #1
 80036bc:	2201      	movs	r2, #1
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d012      	beq.n	80036f2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	4413      	add	r3, r2
 80036d4:	b298      	uxth	r0, r3
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <DrawChar+0x16c>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	491b      	ldr	r1, [pc, #108]	; (8003748 <DrawChar+0x170>)
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	88bb      	ldrh	r3, [r7, #4]
 80036ea:	4619      	mov	r1, r3
 80036ec:	f7ff ff4e 	bl	800358c <BSP_LCD_DrawPixel>
 80036f0:	e012      	b.n	8003718 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	4413      	add	r3, r2
 80036fa:	b298      	uxth	r0, r3
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <DrawChar+0x16c>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4911      	ldr	r1, [pc, #68]	; (8003748 <DrawChar+0x170>)
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	3304      	adds	r3, #4
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	88bb      	ldrh	r3, [r7, #4]
 8003712:	4619      	mov	r1, r3
 8003714:	f7ff ff3a 	bl	800358c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	3301      	adds	r3, #1
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	8a3b      	ldrh	r3, [r7, #16]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	429a      	cmp	r2, r3
 8003724:	d3c4      	bcc.n	80036b0 <DrawChar+0xd8>
      }
    }
    Ypos++;
 8003726:	88bb      	ldrh	r3, [r7, #4]
 8003728:	3301      	adds	r3, #1
 800372a:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	3301      	adds	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	8a7b      	ldrh	r3, [r7, #18]
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	429a      	cmp	r2, r3
 8003738:	d384      	bcc.n	8003644 <DrawChar+0x6c>
  }
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	3720      	adds	r7, #32
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	200007c8 	.word	0x200007c8
 8003748:	200007cc 	.word	0x200007cc

0800374c <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800375a:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <FillBuffer+0x68>)
 800375c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003760:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003762:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <FillBuffer+0x68>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8003768:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <FillBuffer+0x68>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <FillBuffer+0x68>)
 8003770:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <FillBuffer+0x6c>)
 8003772:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8003774:	480f      	ldr	r0, [pc, #60]	; (80037b4 <FillBuffer+0x68>)
 8003776:	f000 fcf1 	bl	800415c <HAL_DMA2D_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d115      	bne.n	80037ac <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	480c      	ldr	r0, [pc, #48]	; (80037b4 <FillBuffer+0x68>)
 8003784:	f000 fe52 	bl	800442c <HAL_DMA2D_ConfigLayer>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10e      	bne.n	80037ac <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69f9      	ldr	r1, [r7, #28]
 8003798:	4806      	ldr	r0, [pc, #24]	; (80037b4 <FillBuffer+0x68>)
 800379a:	f000 fd32 	bl	8004202 <HAL_DMA2D_Start>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80037a4:	210a      	movs	r1, #10
 80037a6:	4803      	ldr	r0, [pc, #12]	; (80037b4 <FillBuffer+0x68>)
 80037a8:	f000 fd56 	bl	8004258 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000758 	.word	0x20000758
 80037b8:	4002b000 	.word	0x4002b000

080037bc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <BSP_SDRAM_Init+0xac>)
 80037c2:	4a2a      	ldr	r2, [pc, #168]	; (800386c <BSP_SDRAM_Init+0xb0>)
 80037c4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80037c6:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037c8:	2202      	movs	r2, #2
 80037ca:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80037cc:	4b28      	ldr	r3, [pc, #160]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037ce:	2207      	movs	r2, #7
 80037d0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80037d2:	4b27      	ldr	r3, [pc, #156]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037d4:	2204      	movs	r2, #4
 80037d6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80037d8:	4b25      	ldr	r3, [pc, #148]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037da:	2207      	movs	r2, #7
 80037dc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037e0:	2202      	movs	r2, #2
 80037e2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80037e4:	4b22      	ldr	r3, [pc, #136]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037e6:	2202      	movs	r2, #2
 80037e8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 80037ec:	2202      	movs	r2, #2
 80037ee:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80037f0:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <BSP_SDRAM_Init+0xac>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80037f6:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <BSP_SDRAM_Init+0xac>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80037fc:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <BSP_SDRAM_Init+0xac>)
 80037fe:	2204      	movs	r2, #4
 8003800:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003802:	4b19      	ldr	r3, [pc, #100]	; (8003868 <BSP_SDRAM_Init+0xac>)
 8003804:	2210      	movs	r2, #16
 8003806:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003808:	4b17      	ldr	r3, [pc, #92]	; (8003868 <BSP_SDRAM_Init+0xac>)
 800380a:	2240      	movs	r2, #64	; 0x40
 800380c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800380e:	4b16      	ldr	r3, [pc, #88]	; (8003868 <BSP_SDRAM_Init+0xac>)
 8003810:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003814:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <BSP_SDRAM_Init+0xac>)
 8003818:	2200      	movs	r2, #0
 800381a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <BSP_SDRAM_Init+0xac>)
 800381e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003822:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <BSP_SDRAM_Init+0xac>)
 8003826:	2200      	movs	r2, #0
 8003828:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <BSP_SDRAM_Init+0xac>)
 800382c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003830:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003832:	2100      	movs	r1, #0
 8003834:	480c      	ldr	r0, [pc, #48]	; (8003868 <BSP_SDRAM_Init+0xac>)
 8003836:	f000 f87f 	bl	8003938 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800383a:	490d      	ldr	r1, [pc, #52]	; (8003870 <BSP_SDRAM_Init+0xb4>)
 800383c:	480a      	ldr	r0, [pc, #40]	; (8003868 <BSP_SDRAM_Init+0xac>)
 800383e:	f003 ff81 	bl	8007744 <HAL_SDRAM_Init>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <BSP_SDRAM_Init+0xb8>)
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e002      	b.n	8003856 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <BSP_SDRAM_Init+0xb8>)
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003856:	f240 506a 	movw	r0, #1386	; 0x56a
 800385a:	f000 f80d 	bl	8003878 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <BSP_SDRAM_Init+0xb8>)
 8003860:	781b      	ldrb	r3, [r3, #0]
}
 8003862:	4618      	mov	r0, r3
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200007e8 	.word	0x200007e8
 800386c:	a0000140 	.word	0xa0000140
 8003870:	2000081c 	.word	0x2000081c
 8003874:	20000088 	.word	0x20000088

08003878 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003884:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800388c:	2208      	movs	r2, #8
 800388e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003892:	2201      	movs	r2, #1
 8003894:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003896:	4b26      	ldr	r3, [pc, #152]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003898:	2200      	movs	r2, #0
 800389a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800389c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038a0:	4923      	ldr	r1, [pc, #140]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038a2:	4824      	ldr	r0, [pc, #144]	; (8003934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038a4:	f003 ff8c 	bl	80077c0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80038a8:	2001      	movs	r0, #1
 80038aa:	f000 f993 	bl	8003bd4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038b0:	2202      	movs	r2, #2
 80038b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80038b4:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038b6:	2208      	movs	r2, #8
 80038b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80038ba:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038bc:	2201      	movs	r2, #1
 80038be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80038c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ca:	4919      	ldr	r1, [pc, #100]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038cc:	4819      	ldr	r0, [pc, #100]	; (8003934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038ce:	f003 ff77 	bl	80077c0 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80038d2:	4b17      	ldr	r3, [pc, #92]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038d4:	2203      	movs	r2, #3
 80038d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038da:	2208      	movs	r2, #8
 80038dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80038de:	4b14      	ldr	r3, [pc, #80]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038e0:	2204      	movs	r2, #4
 80038e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80038ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ee:	4910      	ldr	r1, [pc, #64]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038f0:	4810      	ldr	r0, [pc, #64]	; (8003934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038f2:	f003 ff65 	bl	80077c0 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80038f6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80038fa:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038fe:	2204      	movs	r2, #4
 8003900:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003904:	2208      	movs	r2, #8
 8003906:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800390a:	2201      	movs	r2, #1
 800390c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a07      	ldr	r2, [pc, #28]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003912:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003918:	4905      	ldr	r1, [pc, #20]	; (8003930 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800391a:	4806      	ldr	r0, [pc, #24]	; (8003934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800391c:	f003 ff50 	bl	80077c0 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4804      	ldr	r0, [pc, #16]	; (8003934 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003924:	f003 ff81 	bl	800782a <HAL_SDRAM_ProgramRefreshRate>
}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000838 	.word	0x20000838
 8003934:	200007e8 	.word	0x200007e8

08003938 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b090      	sub	sp, #64	; 0x40
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80ec 	beq.w	8003b22 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 800394e:	4b77      	ldr	r3, [pc, #476]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	4a76      	ldr	r2, [pc, #472]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6393      	str	r3, [r2, #56]	; 0x38
 800395a:	4b74      	ldr	r3, [pc, #464]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
 800396a:	4b70      	ldr	r3, [pc, #448]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a6f      	ldr	r2, [pc, #444]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	623b      	str	r3, [r7, #32]
 8003986:	4b69      	ldr	r3, [pc, #420]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a68      	ldr	r2, [pc, #416]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	6313      	str	r3, [r2, #48]	; 0x30
 8003992:	4b66      	ldr	r3, [pc, #408]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	623b      	str	r3, [r7, #32]
 800399c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	4b62      	ldr	r3, [pc, #392]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	4a61      	ldr	r2, [pc, #388]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039a8:	f043 0304 	orr.w	r3, r3, #4
 80039ac:	6313      	str	r3, [r2, #48]	; 0x30
 80039ae:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	4b5b      	ldr	r3, [pc, #364]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a5a      	ldr	r2, [pc, #360]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b58      	ldr	r3, [pc, #352]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	4b54      	ldr	r3, [pc, #336]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a53      	ldr	r2, [pc, #332]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039e0:	f043 0310 	orr.w	r3, r3, #16
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
 80039e6:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	4b4d      	ldr	r3, [pc, #308]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a4c      	ldr	r2, [pc, #304]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 80039fc:	f043 0320 	orr.w	r3, r3, #32
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b4a      	ldr	r3, [pc, #296]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b46      	ldr	r3, [pc, #280]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4a45      	ldr	r2, [pc, #276]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <BSP_SDRAM_MspInit+0x1f4>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003a36:	230c      	movs	r3, #12
 8003a38:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003a3a:	2360      	movs	r3, #96	; 0x60
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a42:	4619      	mov	r1, r3
 8003a44:	483a      	ldr	r0, [pc, #232]	; (8003b30 <BSP_SDRAM_MspInit+0x1f8>)
 8003a46:	f000 fe1f 	bl	8004688 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a52:	4619      	mov	r1, r3
 8003a54:	4837      	ldr	r0, [pc, #220]	; (8003b34 <BSP_SDRAM_MspInit+0x1fc>)
 8003a56:	f000 fe17 	bl	8004688 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003a5a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a64:	4619      	mov	r1, r3
 8003a66:	4834      	ldr	r0, [pc, #208]	; (8003b38 <BSP_SDRAM_MspInit+0x200>)
 8003a68:	f000 fe0e 	bl	8004688 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003a6c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a76:	4619      	mov	r1, r3
 8003a78:	4830      	ldr	r0, [pc, #192]	; (8003b3c <BSP_SDRAM_MspInit+0x204>)
 8003a7a:	f000 fe05 	bl	8004688 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8003a7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a88:	4619      	mov	r1, r3
 8003a8a:	482d      	ldr	r0, [pc, #180]	; (8003b40 <BSP_SDRAM_MspInit+0x208>)
 8003a8c:	f000 fdfc 	bl	8004688 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003a90:	f248 1333 	movw	r3, #33075	; 0x8133
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4829      	ldr	r0, [pc, #164]	; (8003b44 <BSP_SDRAM_MspInit+0x20c>)
 8003a9e:	f000 fdf3 	bl	8004688 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003aa2:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003aa8:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003aaa:	2280      	movs	r2, #128	; 0x80
 8003aac:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003aae:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab4:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003ab6:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003abc:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003abe:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ac4:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ac8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003acc:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8003ace:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003ad4:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ad6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ada:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003ae2:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003ae8:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8003aee:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003af4:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003af6:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <BSP_SDRAM_MspInit+0x214>)
 8003af8:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
 8003b00:	4a11      	ldr	r2, [pc, #68]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8003b06:	4810      	ldr	r0, [pc, #64]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003b08:	f000 fa18 	bl	8003f3c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8003b0c:	480e      	ldr	r0, [pc, #56]	; (8003b48 <BSP_SDRAM_MspInit+0x210>)
 8003b0e:	f000 f967 	bl	8003de0 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003b12:	2200      	movs	r2, #0
 8003b14:	210f      	movs	r1, #15
 8003b16:	2038      	movs	r0, #56	; 0x38
 8003b18:	f000 f938 	bl	8003d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003b1c:	2038      	movs	r0, #56	; 0x38
 8003b1e:	f000 f951 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003b22:	bf00      	nop
 8003b24:	3740      	adds	r7, #64	; 0x40
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40020400 	.word	0x40020400
 8003b34:	40020800 	.word	0x40020800
 8003b38:	40020c00 	.word	0x40020c00
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40021400 	.word	0x40021400
 8003b44:	40021800 	.word	0x40021800
 8003b48:	20000848 	.word	0x20000848
 8003b4c:	40026410 	.word	0x40026410

08003b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b54:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <HAL_Init+0x40>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0d      	ldr	r2, [pc, #52]	; (8003b90 <HAL_Init+0x40>)
 8003b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_Init+0x40>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <HAL_Init+0x40>)
 8003b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_Init+0x40>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <HAL_Init+0x40>)
 8003b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b78:	2003      	movs	r0, #3
 8003b7a:	f000 f8fc 	bl	8003d76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b7e:	200f      	movs	r0, #15
 8003b80:	f7fd ff5e 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b84:	f7fd fdf4 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023c00 	.word	0x40023c00

08003b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_IncTick+0x20>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000090 	.word	0x20000090
 8003bb8:	200008a8 	.word	0x200008a8

08003bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_GetTick+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	200008a8 	.word	0x200008a8

08003bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bdc:	f7ff ffee 	bl	8003bbc <HAL_GetTick>
 8003be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d005      	beq.n	8003bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_Delay+0x44>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bfa:	bf00      	nop
 8003bfc:	f7ff ffde 	bl	8003bbc <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d8f7      	bhi.n	8003bfc <HAL_Delay+0x28>
  {
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000090 	.word	0x20000090

08003c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4e:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <__NVIC_SetPriorityGrouping+0x44>)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	60d3      	str	r3, [r2, #12]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <__NVIC_GetPriorityGrouping+0x18>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	f003 0307 	and.w	r3, r3, #7
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	db0b      	blt.n	8003caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	4907      	ldr	r1, [pc, #28]	; (8003cb8 <__NVIC_EnableIRQ+0x38>)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000e100 	.word	0xe000e100

08003cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	db0a      	blt.n	8003ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	490c      	ldr	r1, [pc, #48]	; (8003d08 <__NVIC_SetPriority+0x4c>)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	0112      	lsls	r2, r2, #4
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce4:	e00a      	b.n	8003cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4908      	ldr	r1, [pc, #32]	; (8003d0c <__NVIC_SetPriority+0x50>)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3b04      	subs	r3, #4
 8003cf4:	0112      	lsls	r2, r2, #4
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	761a      	strb	r2, [r3, #24]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000e100 	.word	0xe000e100
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f1c3 0307 	rsb	r3, r3, #7
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	bf28      	it	cs
 8003d2e:	2304      	movcs	r3, #4
 8003d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d902      	bls.n	8003d40 <NVIC_EncodePriority+0x30>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3b03      	subs	r3, #3
 8003d3e:	e000      	b.n	8003d42 <NVIC_EncodePriority+0x32>
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	401a      	ands	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d58:	f04f 31ff 	mov.w	r1, #4294967295
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	43d9      	mvns	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	4313      	orrs	r3, r2
         );
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3724      	adds	r7, #36	; 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ff4c 	bl	8003c1c <__NVIC_SetPriorityGrouping>
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d9e:	f7ff ff61 	bl	8003c64 <__NVIC_GetPriorityGrouping>
 8003da2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	6978      	ldr	r0, [r7, #20]
 8003daa:	f7ff ffb1 	bl	8003d10 <NVIC_EncodePriority>
 8003dae:	4602      	mov	r2, r0
 8003db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff80 	bl	8003cbc <__NVIC_SetPriority>
}
 8003dbc:	bf00      	nop
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff ff54 	bl	8003c80 <__NVIC_EnableIRQ>
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7ff fee6 	bl	8003bbc <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e099      	b.n	8003f30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e1c:	e00f      	b.n	8003e3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e1e:	f7ff fecd 	bl	8003bbc <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b05      	cmp	r3, #5
 8003e2a:	d908      	bls.n	8003e3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2203      	movs	r2, #3
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e078      	b.n	8003f30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e8      	bne.n	8003e1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <HAL_DMA_Init+0x158>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d107      	bne.n	8003ea8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f023 0307 	bic.w	r3, r3, #7
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d117      	bne.n	8003f02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f8bd 	bl	8004064 <DMA_CheckFifoParam>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2240      	movs	r2, #64	; 0x40
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003efe:	2301      	movs	r3, #1
 8003f00:	e016      	b.n	8003f30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f874 	bl	8003ff8 <DMA_CalcBaseAndBitshift>
 8003f10:	4603      	mov	r3, r0
 8003f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	223f      	movs	r2, #63	; 0x3f
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	f010803f 	.word	0xf010803f

08003f3c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e050      	b.n	8003ff0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d101      	bne.n	8003f5e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e048      	b.n	8003ff0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2200      	movs	r2, #0
 8003f84:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2221      	movs	r2, #33	; 0x21
 8003f9c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f82a 	bl	8003ff8 <DMA_CalcBaseAndBitshift>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	223f      	movs	r2, #63	; 0x3f
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	3b10      	subs	r3, #16
 8004008:	4a14      	ldr	r2, [pc, #80]	; (800405c <DMA_CalcBaseAndBitshift+0x64>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004012:	4a13      	ldr	r2, [pc, #76]	; (8004060 <DMA_CalcBaseAndBitshift+0x68>)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b03      	cmp	r3, #3
 8004024:	d909      	bls.n	800403a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	1d1a      	adds	r2, r3, #4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	659a      	str	r2, [r3, #88]	; 0x58
 8004038:	e007      	b.n	800404a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	aaaaaaab 	.word	0xaaaaaaab
 8004060:	08015114 	.word	0x08015114

08004064 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d11f      	bne.n	80040be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d856      	bhi.n	8004132 <DMA_CheckFifoParam+0xce>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <DMA_CheckFifoParam+0x28>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	0800409d 	.word	0x0800409d
 8004090:	080040af 	.word	0x080040af
 8004094:	0800409d 	.word	0x0800409d
 8004098:	08004133 	.word	0x08004133
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d046      	beq.n	8004136 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ac:	e043      	b.n	8004136 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040b6:	d140      	bne.n	800413a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040bc:	e03d      	b.n	800413a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c6:	d121      	bne.n	800410c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d837      	bhi.n	800413e <DMA_CheckFifoParam+0xda>
 80040ce:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <DMA_CheckFifoParam+0x70>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	080040e5 	.word	0x080040e5
 80040d8:	080040eb 	.word	0x080040eb
 80040dc:	080040e5 	.word	0x080040e5
 80040e0:	080040fd 	.word	0x080040fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      break;
 80040e8:	e030      	b.n	800414c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d025      	beq.n	8004142 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fa:	e022      	b.n	8004142 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004104:	d11f      	bne.n	8004146 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800410a:	e01c      	b.n	8004146 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d903      	bls.n	800411a <DMA_CheckFifoParam+0xb6>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d003      	beq.n	8004120 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004118:	e018      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
      break;
 800411e:	e015      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00e      	beq.n	800414a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e00b      	b.n	800414a <DMA_CheckFifoParam+0xe6>
      break;
 8004132:	bf00      	nop
 8004134:	e00a      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 8004136:	bf00      	nop
 8004138:	e008      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 800413a:	bf00      	nop
 800413c:	e006      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 800413e:	bf00      	nop
 8004140:	e004      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 8004142:	bf00      	nop
 8004144:	e002      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;   
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <DMA_CheckFifoParam+0xe8>
      break;
 800414a:	bf00      	nop
    }
  } 
  
  return status; 
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop

0800415c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e03b      	b.n	80041e6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f833 	bl	80041ee <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	f023 0107 	bic.w	r1, r3, #7
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68d1      	ldr	r1, [r2, #12]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b086      	sub	sp, #24
 8004206:	af02      	add	r7, sp, #8
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_DMA2D_Start+0x1c>
 800421a:	2302      	movs	r3, #2
 800421c:	e018      	b.n	8004250 <HAL_DMA2D_Start+0x4e>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2202      	movs	r2, #2
 800422a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f989 	bl	8004550 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d056      	beq.n	8004322 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004274:	f7ff fca2 	bl	8003bbc <HAL_GetTick>
 8004278:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800427a:	e04b      	b.n	8004314 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800428a:	2b00      	cmp	r3, #0
 800428c:	d023      	beq.n	80042d6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429c:	f043 0202 	orr.w	r2, r3, #2
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	f043 0201 	orr.w	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2221      	movs	r2, #33	; 0x21
 80042c0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2204      	movs	r2, #4
 80042c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0a5      	b.n	8004422 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d01a      	beq.n	8004314 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042de:	f7ff fc6d 	bl	8003bbc <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <HAL_DMA2D_PollForTransfer+0x9c>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10f      	bne.n	8004314 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2203      	movs	r2, #3
 8004304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e086      	b.n	8004422 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0ac      	beq.n	800427c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d061      	beq.n	8004408 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004344:	f7ff fc3a 	bl	8003bbc <HAL_GetTick>
 8004348:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800434a:	e056      	b.n	80043fa <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800435a:	2b00      	cmp	r3, #0
 800435c:	d02e      	beq.n	80043bc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	f043 0204 	orr.w	r2, r3, #4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	f043 0202 	orr.w	r2, r3, #2
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	f043 0201 	orr.w	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2229      	movs	r2, #41	; 0x29
 80043a6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2204      	movs	r2, #4
 80043ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e032      	b.n	8004422 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d01a      	beq.n	80043fa <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043c4:	f7ff fbfa 	bl	8003bbc <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d302      	bcc.n	80043da <HAL_DMA2D_PollForTransfer+0x182>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10f      	bne.n	80043fa <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2203      	movs	r2, #3
 80043ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e013      	b.n	8004422 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0a1      	beq.n	800434c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2212      	movs	r2, #18
 800440e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_DMA2D_ConfigLayer+0x20>
 8004448:	2302      	movs	r3, #2
 800444a:	e079      	b.n	8004540 <HAL_DMA2D_ConfigLayer+0x114>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	3318      	adds	r3, #24
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004476:	4b35      	ldr	r3, [pc, #212]	; (800454c <HAL_DMA2D_ConfigLayer+0x120>)
 8004478:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b0a      	cmp	r3, #10
 8004480:	d003      	beq.n	800448a <HAL_DMA2D_ConfigLayer+0x5e>
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b09      	cmp	r3, #9
 8004488:	d107      	bne.n	800449a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	e005      	b.n	80044a6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	061b      	lsls	r3, r3, #24
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d120      	bne.n	80044ee <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	ea02 0103 	and.w	r1, r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b0a      	cmp	r3, #10
 80044d4:	d003      	beq.n	80044de <HAL_DMA2D_ConfigLayer+0xb2>
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b09      	cmp	r3, #9
 80044dc:	d127      	bne.n	800452e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28
 80044ec:	e01f      	b.n	800452e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	43db      	mvns	r3, r3
 80044f8:	ea02 0103 	and.w	r1, r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	430a      	orrs	r2, r1
 8004504:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b0a      	cmp	r3, #10
 8004516:	d003      	beq.n	8004520 <HAL_DMA2D_ConfigLayer+0xf4>
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b09      	cmp	r3, #9
 800451e:	d106      	bne.n	800452e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800452c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	ff03000f 	.word	0xff03000f

08004550 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004550:	b480      	push	{r7}
 8004552:	b08b      	sub	sp, #44	; 0x2c
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	041a      	lsls	r2, r3, #16
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	431a      	orrs	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004588:	d174      	bne.n	8004674 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004590:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004598:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045a0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d108      	bne.n	80045c2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
 80045c0:	e053      	b.n	800466a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d106      	bne.n	80045d8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	e048      	b.n	800466a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d111      	bne.n	8004604 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	0cdb      	lsrs	r3, r3, #19
 80045e4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	0a9b      	lsrs	r3, r3, #10
 80045ea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	08db      	lsrs	r3, r3, #3
 80045f0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	02db      	lsls	r3, r3, #11
 80045fa:	4313      	orrs	r3, r2
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
 8004602:	e032      	b.n	800466a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d117      	bne.n	800463c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	0fdb      	lsrs	r3, r3, #31
 8004610:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	0cdb      	lsrs	r3, r3, #19
 8004616:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	0adb      	lsrs	r3, r3, #11
 800461c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	08db      	lsrs	r3, r3, #3
 8004622:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	029b      	lsls	r3, r3, #10
 800462c:	431a      	orrs	r2, r3
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	03db      	lsls	r3, r3, #15
 8004632:	4313      	orrs	r3, r2
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
 800463a:	e016      	b.n	800466a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	0f1b      	lsrs	r3, r3, #28
 8004640:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	0d1b      	lsrs	r3, r3, #20
 8004646:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	0b1b      	lsrs	r3, r3, #12
 800464c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	011a      	lsls	r2, r3, #4
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	431a      	orrs	r2, r3
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	031b      	lsls	r3, r3, #12
 8004662:	4313      	orrs	r3, r2
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004672:	e003      	b.n	800467c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	60da      	str	r2, [r3, #12]
}
 800467c:	bf00      	nop
 800467e:	372c      	adds	r7, #44	; 0x2c
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004688:	b480      	push	{r7}
 800468a:	b089      	sub	sp, #36	; 0x24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800469a:	2300      	movs	r3, #0
 800469c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e177      	b.n	8004994 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046a4:	2201      	movs	r2, #1
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4013      	ands	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	429a      	cmp	r2, r3
 80046be:	f040 8166 	bne.w	800498e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d005      	beq.n	80046da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d130      	bne.n	800473c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	2203      	movs	r2, #3
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4013      	ands	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4313      	orrs	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004710:	2201      	movs	r2, #1
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 0201 	and.w	r2, r3, #1
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4313      	orrs	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b03      	cmp	r3, #3
 8004746:	d017      	beq.n	8004778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2203      	movs	r2, #3
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d123      	bne.n	80047cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	08da      	lsrs	r2, r3, #3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3208      	adds	r2, #8
 800478c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	220f      	movs	r2, #15
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	08da      	lsrs	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3208      	adds	r2, #8
 80047c6:	69b9      	ldr	r1, [r7, #24]
 80047c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	2203      	movs	r2, #3
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4013      	ands	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0203 	and.w	r2, r3, #3
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80c0 	beq.w	800498e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	4b66      	ldr	r3, [pc, #408]	; (80049ac <HAL_GPIO_Init+0x324>)
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	4a65      	ldr	r2, [pc, #404]	; (80049ac <HAL_GPIO_Init+0x324>)
 8004818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800481c:	6453      	str	r3, [r2, #68]	; 0x44
 800481e:	4b63      	ldr	r3, [pc, #396]	; (80049ac <HAL_GPIO_Init+0x324>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800482a:	4a61      	ldr	r2, [pc, #388]	; (80049b0 <HAL_GPIO_Init+0x328>)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	3302      	adds	r3, #2
 8004832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	220f      	movs	r2, #15
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a58      	ldr	r2, [pc, #352]	; (80049b4 <HAL_GPIO_Init+0x32c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d037      	beq.n	80048c6 <HAL_GPIO_Init+0x23e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a57      	ldr	r2, [pc, #348]	; (80049b8 <HAL_GPIO_Init+0x330>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d031      	beq.n	80048c2 <HAL_GPIO_Init+0x23a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a56      	ldr	r2, [pc, #344]	; (80049bc <HAL_GPIO_Init+0x334>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d02b      	beq.n	80048be <HAL_GPIO_Init+0x236>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a55      	ldr	r2, [pc, #340]	; (80049c0 <HAL_GPIO_Init+0x338>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d025      	beq.n	80048ba <HAL_GPIO_Init+0x232>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a54      	ldr	r2, [pc, #336]	; (80049c4 <HAL_GPIO_Init+0x33c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01f      	beq.n	80048b6 <HAL_GPIO_Init+0x22e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a53      	ldr	r2, [pc, #332]	; (80049c8 <HAL_GPIO_Init+0x340>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d019      	beq.n	80048b2 <HAL_GPIO_Init+0x22a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a52      	ldr	r2, [pc, #328]	; (80049cc <HAL_GPIO_Init+0x344>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_GPIO_Init+0x226>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a51      	ldr	r2, [pc, #324]	; (80049d0 <HAL_GPIO_Init+0x348>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d00d      	beq.n	80048aa <HAL_GPIO_Init+0x222>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a50      	ldr	r2, [pc, #320]	; (80049d4 <HAL_GPIO_Init+0x34c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d007      	beq.n	80048a6 <HAL_GPIO_Init+0x21e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a4f      	ldr	r2, [pc, #316]	; (80049d8 <HAL_GPIO_Init+0x350>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <HAL_GPIO_Init+0x21a>
 800489e:	2309      	movs	r3, #9
 80048a0:	e012      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048a2:	230a      	movs	r3, #10
 80048a4:	e010      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048a6:	2308      	movs	r3, #8
 80048a8:	e00e      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048aa:	2307      	movs	r3, #7
 80048ac:	e00c      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048ae:	2306      	movs	r3, #6
 80048b0:	e00a      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048b2:	2305      	movs	r3, #5
 80048b4:	e008      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048b6:	2304      	movs	r3, #4
 80048b8:	e006      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048ba:	2303      	movs	r3, #3
 80048bc:	e004      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048be:	2302      	movs	r3, #2
 80048c0:	e002      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <HAL_GPIO_Init+0x240>
 80048c6:	2300      	movs	r3, #0
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	f002 0203 	and.w	r2, r2, #3
 80048ce:	0092      	lsls	r2, r2, #2
 80048d0:	4093      	lsls	r3, r2
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048d8:	4935      	ldr	r1, [pc, #212]	; (80049b0 <HAL_GPIO_Init+0x328>)
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	3302      	adds	r3, #2
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048e6:	4b3d      	ldr	r3, [pc, #244]	; (80049dc <HAL_GPIO_Init+0x354>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800490a:	4a34      	ldr	r2, [pc, #208]	; (80049dc <HAL_GPIO_Init+0x354>)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004910:	4b32      	ldr	r3, [pc, #200]	; (80049dc <HAL_GPIO_Init+0x354>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	43db      	mvns	r3, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004934:	4a29      	ldr	r2, [pc, #164]	; (80049dc <HAL_GPIO_Init+0x354>)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800493a:	4b28      	ldr	r3, [pc, #160]	; (80049dc <HAL_GPIO_Init+0x354>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800495e:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <HAL_GPIO_Init+0x354>)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004964:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <HAL_GPIO_Init+0x354>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	43db      	mvns	r3, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4013      	ands	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004988:	4a14      	ldr	r2, [pc, #80]	; (80049dc <HAL_GPIO_Init+0x354>)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3301      	adds	r3, #1
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	f67f ae84 	bls.w	80046a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	3724      	adds	r7, #36	; 0x24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800
 80049b0:	40013800 	.word	0x40013800
 80049b4:	40020000 	.word	0x40020000
 80049b8:	40020400 	.word	0x40020400
 80049bc:	40020800 	.word	0x40020800
 80049c0:	40020c00 	.word	0x40020c00
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40021400 	.word	0x40021400
 80049cc:	40021800 	.word	0x40021800
 80049d0:	40021c00 	.word	0x40021c00
 80049d4:	40022000 	.word	0x40022000
 80049d8:	40022400 	.word	0x40022400
 80049dc:	40013c00 	.word	0x40013c00

080049e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e0d9      	b.n	8004bb0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049fc:	2201      	movs	r2, #1
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	f040 80c9 	bne.w	8004baa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a18:	4a6b      	ldr	r2, [pc, #428]	; (8004bc8 <HAL_GPIO_DeInit+0x1e8>)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	089b      	lsrs	r3, r3, #2
 8004a1e:	3302      	adds	r3, #2
 8004a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a24:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	220f      	movs	r2, #15
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	4013      	ands	r3, r2
 8004a38:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a63      	ldr	r2, [pc, #396]	; (8004bcc <HAL_GPIO_DeInit+0x1ec>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d037      	beq.n	8004ab2 <HAL_GPIO_DeInit+0xd2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a62      	ldr	r2, [pc, #392]	; (8004bd0 <HAL_GPIO_DeInit+0x1f0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d031      	beq.n	8004aae <HAL_GPIO_DeInit+0xce>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a61      	ldr	r2, [pc, #388]	; (8004bd4 <HAL_GPIO_DeInit+0x1f4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02b      	beq.n	8004aaa <HAL_GPIO_DeInit+0xca>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a60      	ldr	r2, [pc, #384]	; (8004bd8 <HAL_GPIO_DeInit+0x1f8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d025      	beq.n	8004aa6 <HAL_GPIO_DeInit+0xc6>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a5f      	ldr	r2, [pc, #380]	; (8004bdc <HAL_GPIO_DeInit+0x1fc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01f      	beq.n	8004aa2 <HAL_GPIO_DeInit+0xc2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a5e      	ldr	r2, [pc, #376]	; (8004be0 <HAL_GPIO_DeInit+0x200>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d019      	beq.n	8004a9e <HAL_GPIO_DeInit+0xbe>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a5d      	ldr	r2, [pc, #372]	; (8004be4 <HAL_GPIO_DeInit+0x204>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_GPIO_DeInit+0xba>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a5c      	ldr	r2, [pc, #368]	; (8004be8 <HAL_GPIO_DeInit+0x208>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00d      	beq.n	8004a96 <HAL_GPIO_DeInit+0xb6>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a5b      	ldr	r2, [pc, #364]	; (8004bec <HAL_GPIO_DeInit+0x20c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <HAL_GPIO_DeInit+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a5a      	ldr	r2, [pc, #360]	; (8004bf0 <HAL_GPIO_DeInit+0x210>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <HAL_GPIO_DeInit+0xae>
 8004a8a:	2309      	movs	r3, #9
 8004a8c:	e012      	b.n	8004ab4 <HAL_GPIO_DeInit+0xd4>
 8004a8e:	230a      	movs	r3, #10
 8004a90:	e010      	b.n	8004ab4 <HAL_GPIO_DeInit+0xd4>
 8004a92:	2308      	movs	r3, #8
 8004a94:	e00e      	b.n	8004ab4 <HAL_GPIO_DeInit+0xd4>
 8004a96:	2307      	movs	r3, #7
 8004a98:	e00c      	b.n	8004ab4 <HAL_GPIO_DeInit+0xd4>
 8004a9a:	2306      	movs	r3, #6
 8004a9c:	e00a      	b.n	8004ab4 <HAL_GPIO_DeInit+0xd4>
 8004a9e:	2305      	movs	r3, #5
 8004aa0:	e008      	b.n	8004ab4 <HAL_GPIO_DeInit+0xd4>
 8004aa2:	2304      	movs	r3, #4
 8004aa4:	e006      	b.n	8004ab4 <HAL_GPIO_DeInit+0xd4>
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e004      	b.n	8004ab4 <HAL_GPIO_DeInit+0xd4>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e002      	b.n	8004ab4 <HAL_GPIO_DeInit+0xd4>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <HAL_GPIO_DeInit+0xd4>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	f002 0203 	and.w	r2, r2, #3
 8004aba:	0092      	lsls	r2, r2, #2
 8004abc:	4093      	lsls	r3, r2
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d132      	bne.n	8004b2a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ac4:	4b4b      	ldr	r3, [pc, #300]	; (8004bf4 <HAL_GPIO_DeInit+0x214>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	43db      	mvns	r3, r3
 8004acc:	4949      	ldr	r1, [pc, #292]	; (8004bf4 <HAL_GPIO_DeInit+0x214>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004ad2:	4b48      	ldr	r3, [pc, #288]	; (8004bf4 <HAL_GPIO_DeInit+0x214>)
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	4946      	ldr	r1, [pc, #280]	; (8004bf4 <HAL_GPIO_DeInit+0x214>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ae0:	4b44      	ldr	r3, [pc, #272]	; (8004bf4 <HAL_GPIO_DeInit+0x214>)
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	4942      	ldr	r1, [pc, #264]	; (8004bf4 <HAL_GPIO_DeInit+0x214>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004aee:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <HAL_GPIO_DeInit+0x214>)
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	43db      	mvns	r3, r3
 8004af6:	493f      	ldr	r1, [pc, #252]	; (8004bf4 <HAL_GPIO_DeInit+0x214>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	220f      	movs	r2, #15
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004b0c:	4a2e      	ldr	r2, [pc, #184]	; (8004bc8 <HAL_GPIO_DeInit+0x1e8>)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	089b      	lsrs	r3, r3, #2
 8004b12:	3302      	adds	r3, #2
 8004b14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	43da      	mvns	r2, r3
 8004b1c:	482a      	ldr	r0, [pc, #168]	; (8004bc8 <HAL_GPIO_DeInit+0x1e8>)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	089b      	lsrs	r3, r3, #2
 8004b22:	400a      	ands	r2, r1
 8004b24:	3302      	adds	r3, #2
 8004b26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	2103      	movs	r1, #3
 8004b34:	fa01 f303 	lsl.w	r3, r1, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	08da      	lsrs	r2, r3, #3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3208      	adds	r2, #8
 8004b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	220f      	movs	r2, #15
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	08d2      	lsrs	r2, r2, #3
 8004b60:	4019      	ands	r1, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3208      	adds	r2, #8
 8004b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	2103      	movs	r1, #3
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	2101      	movs	r1, #1
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	401a      	ands	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	2103      	movs	r1, #3
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	401a      	ands	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	3301      	adds	r3, #1
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2b0f      	cmp	r3, #15
 8004bb4:	f67f af22 	bls.w	80049fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40013800 	.word	0x40013800
 8004bcc:	40020000 	.word	0x40020000
 8004bd0:	40020400 	.word	0x40020400
 8004bd4:	40020800 	.word	0x40020800
 8004bd8:	40020c00 	.word	0x40020c00
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40021400 	.word	0x40021400
 8004be4:	40021800 	.word	0x40021800
 8004be8:	40021c00 	.word	0x40021c00
 8004bec:	40022000 	.word	0x40022000
 8004bf0:	40022400 	.word	0x40022400
 8004bf4:	40013c00 	.word	0x40013c00

08004bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]
 8004c04:	4613      	mov	r3, r2
 8004c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c08:	787b      	ldrb	r3, [r7, #1]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c0e:	887a      	ldrh	r2, [r7, #2]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c14:	e003      	b.n	8004c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c16:	887b      	ldrh	r3, [r7, #2]
 8004c18:	041a      	lsls	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	619a      	str	r2, [r3, #24]
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e12b      	b.n	8004e96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc fdb8 	bl	80017c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2224      	movs	r2, #36	; 0x24
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c90:	f002 fb52 	bl	8007338 <HAL_RCC_GetPCLK1Freq>
 8004c94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4a81      	ldr	r2, [pc, #516]	; (8004ea0 <HAL_I2C_Init+0x274>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d807      	bhi.n	8004cb0 <HAL_I2C_Init+0x84>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a80      	ldr	r2, [pc, #512]	; (8004ea4 <HAL_I2C_Init+0x278>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	bf94      	ite	ls
 8004ca8:	2301      	movls	r3, #1
 8004caa:	2300      	movhi	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	e006      	b.n	8004cbe <HAL_I2C_Init+0x92>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4a7d      	ldr	r2, [pc, #500]	; (8004ea8 <HAL_I2C_Init+0x27c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	bf94      	ite	ls
 8004cb8:	2301      	movls	r3, #1
 8004cba:	2300      	movhi	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e0e7      	b.n	8004e96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a78      	ldr	r2, [pc, #480]	; (8004eac <HAL_I2C_Init+0x280>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	0c9b      	lsrs	r3, r3, #18
 8004cd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4a6a      	ldr	r2, [pc, #424]	; (8004ea0 <HAL_I2C_Init+0x274>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d802      	bhi.n	8004d00 <HAL_I2C_Init+0xd4>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	e009      	b.n	8004d14 <HAL_I2C_Init+0xe8>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d06:	fb02 f303 	mul.w	r3, r2, r3
 8004d0a:	4a69      	ldr	r2, [pc, #420]	; (8004eb0 <HAL_I2C_Init+0x284>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	099b      	lsrs	r3, r3, #6
 8004d12:	3301      	adds	r3, #1
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	495c      	ldr	r1, [pc, #368]	; (8004ea0 <HAL_I2C_Init+0x274>)
 8004d30:	428b      	cmp	r3, r1
 8004d32:	d819      	bhi.n	8004d68 <HAL_I2C_Init+0x13c>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1e59      	subs	r1, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d42:	1c59      	adds	r1, r3, #1
 8004d44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d48:	400b      	ands	r3, r1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_I2C_Init+0x138>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1e59      	subs	r1, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d62:	e051      	b.n	8004e08 <HAL_I2C_Init+0x1dc>
 8004d64:	2304      	movs	r3, #4
 8004d66:	e04f      	b.n	8004e08 <HAL_I2C_Init+0x1dc>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d111      	bne.n	8004d94 <HAL_I2C_Init+0x168>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	1e58      	subs	r0, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6859      	ldr	r1, [r3, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	440b      	add	r3, r1
 8004d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d82:	3301      	adds	r3, #1
 8004d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf0c      	ite	eq
 8004d8c:	2301      	moveq	r3, #1
 8004d8e:	2300      	movne	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e012      	b.n	8004dba <HAL_I2C_Init+0x18e>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	1e58      	subs	r0, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	0099      	lsls	r1, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004daa:	3301      	adds	r3, #1
 8004dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bf0c      	ite	eq
 8004db4:	2301      	moveq	r3, #1
 8004db6:	2300      	movne	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <HAL_I2C_Init+0x196>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e022      	b.n	8004e08 <HAL_I2C_Init+0x1dc>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10e      	bne.n	8004de8 <HAL_I2C_Init+0x1bc>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1e58      	subs	r0, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6859      	ldr	r1, [r3, #4]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	440b      	add	r3, r1
 8004dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	e00f      	b.n	8004e08 <HAL_I2C_Init+0x1dc>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	1e58      	subs	r0, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6859      	ldr	r1, [r3, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	0099      	lsls	r1, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dfe:	3301      	adds	r3, #1
 8004e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	6809      	ldr	r1, [r1, #0]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6911      	ldr	r1, [r2, #16]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	68d2      	ldr	r2, [r2, #12]
 8004e42:	4311      	orrs	r1, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	000186a0 	.word	0x000186a0
 8004ea4:	001e847f 	.word	0x001e847f
 8004ea8:	003d08ff 	.word	0x003d08ff
 8004eac:	431bde83 	.word	0x431bde83
 8004eb0:	10624dd3 	.word	0x10624dd3

08004eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d129      	bne.n	8004f1e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2224      	movs	r2, #36	; 0x24
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0210 	bic.w	r2, r2, #16
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e000      	b.n	8004f20 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
  }
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d12a      	bne.n	8004f9c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2224      	movs	r2, #36	; 0x24
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0201 	bic.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004f66:	89fb      	ldrh	r3, [r7, #14]
 8004f68:	f023 030f 	bic.w	r3, r3, #15
 8004f6c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	89fb      	ldrh	r3, [r7, #14]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	89fa      	ldrh	r2, [r7, #14]
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e0bf      	b.n	800513e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f8ba 	bl	800514c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004fee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6999      	ldr	r1, [r3, #24]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005004:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6899      	ldr	r1, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b4a      	ldr	r3, [pc, #296]	; (8005148 <HAL_LTDC_Init+0x19c>)
 8005020:	400b      	ands	r3, r1
 8005022:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6899      	ldr	r1, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68d9      	ldr	r1, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4b3e      	ldr	r3, [pc, #248]	; (8005148 <HAL_LTDC_Init+0x19c>)
 800504e:	400b      	ands	r3, r1
 8005050:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68d9      	ldr	r1, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1a      	ldr	r2, [r3, #32]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6919      	ldr	r1, [r3, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b33      	ldr	r3, [pc, #204]	; (8005148 <HAL_LTDC_Init+0x19c>)
 800507c:	400b      	ands	r3, r1
 800507e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6919      	ldr	r1, [r3, #16]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6959      	ldr	r1, [r3, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4b27      	ldr	r3, [pc, #156]	; (8005148 <HAL_LTDC_Init+0x19c>)
 80050aa:	400b      	ands	r3, r1
 80050ac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	041b      	lsls	r3, r3, #16
 80050b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6959      	ldr	r1, [r3, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0206 	orr.w	r2, r2, #6
 800511a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	f000f800 	.word	0xf000f800

0800514c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005160:	b5b0      	push	{r4, r5, r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_LTDC_ConfigLayer+0x1a>
 8005176:	2302      	movs	r3, #2
 8005178:	e02c      	b.n	80051d4 <HAL_LTDC_ConfigLayer+0x74>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2134      	movs	r1, #52	; 0x34
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	4413      	add	r3, r2
 8005196:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4614      	mov	r4, r2
 800519e:	461d      	mov	r5, r3
 80051a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f83b 	bl	8005230 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2201      	movs	r2, #1
 80051c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bdb0      	pop	{r4, r5, r7, pc}

080051dc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_LTDC_EnableDither+0x16>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e016      	b.n	8005220 <HAL_LTDC_EnableDither+0x44>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <HAL_LTDC_EnableDither+0x50>)
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	4a09      	ldr	r2, [pc, #36]	; (800522c <HAL_LTDC_EnableDither+0x50>)
 8005208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	40016800 	.word	0x40016800

08005230 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005230:	b480      	push	{r7}
 8005232:	b089      	sub	sp, #36	; 0x24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	0c1b      	lsrs	r3, r3, #16
 8005248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524c:	4413      	add	r3, r2
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	01db      	lsls	r3, r3, #7
 800525c:	4413      	add	r3, r2
 800525e:	3384      	adds	r3, #132	; 0x84
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	4611      	mov	r1, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	01d2      	lsls	r2, r2, #7
 800526c:	440a      	add	r2, r1
 800526e:	3284      	adds	r2, #132	; 0x84
 8005270:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005274:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005286:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005288:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4619      	mov	r1, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	01db      	lsls	r3, r3, #7
 8005294:	440b      	add	r3, r1
 8005296:	3384      	adds	r3, #132	; 0x84
 8005298:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800529e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ae:	4413      	add	r3, r2
 80052b0:	041b      	lsls	r3, r3, #16
 80052b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	01db      	lsls	r3, r3, #7
 80052be:	4413      	add	r3, r2
 80052c0:	3384      	adds	r3, #132	; 0x84
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	4611      	mov	r1, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	01d2      	lsls	r2, r2, #7
 80052ce:	440a      	add	r2, r1
 80052d0:	3284      	adds	r2, #132	; 0x84
 80052d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052e6:	4413      	add	r3, r2
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4619      	mov	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	01db      	lsls	r3, r3, #7
 80052f4:	440b      	add	r3, r1
 80052f6:	3384      	adds	r3, #132	; 0x84
 80052f8:	4619      	mov	r1, r3
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	01db      	lsls	r3, r3, #7
 800530a:	4413      	add	r3, r2
 800530c:	3384      	adds	r3, #132	; 0x84
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	4611      	mov	r1, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	01d2      	lsls	r2, r2, #7
 800531a:	440a      	add	r2, r1
 800531c:	3284      	adds	r2, #132	; 0x84
 800531e:	f023 0307 	bic.w	r3, r3, #7
 8005322:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	01db      	lsls	r3, r3, #7
 800532e:	4413      	add	r3, r2
 8005330:	3384      	adds	r3, #132	; 0x84
 8005332:	461a      	mov	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	061b      	lsls	r3, r3, #24
 8005354:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	01db      	lsls	r3, r3, #7
 8005360:	4413      	add	r3, r2
 8005362:	3384      	adds	r3, #132	; 0x84
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	01db      	lsls	r3, r3, #7
 8005370:	4413      	add	r3, r2
 8005372:	3384      	adds	r3, #132	; 0x84
 8005374:	461a      	mov	r2, r3
 8005376:	2300      	movs	r3, #0
 8005378:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005380:	461a      	mov	r2, r3
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	431a      	orrs	r2, r3
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4619      	mov	r1, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	01db      	lsls	r3, r3, #7
 8005394:	440b      	add	r3, r1
 8005396:	3384      	adds	r3, #132	; 0x84
 8005398:	4619      	mov	r1, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	01db      	lsls	r3, r3, #7
 80053aa:	4413      	add	r3, r2
 80053ac:	3384      	adds	r3, #132	; 0x84
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	4611      	mov	r1, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	01d2      	lsls	r2, r2, #7
 80053ba:	440a      	add	r2, r1
 80053bc:	3284      	adds	r2, #132	; 0x84
 80053be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	01db      	lsls	r3, r3, #7
 80053ce:	4413      	add	r3, r2
 80053d0:	3384      	adds	r3, #132	; 0x84
 80053d2:	461a      	mov	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	01db      	lsls	r3, r3, #7
 80053e4:	4413      	add	r3, r2
 80053e6:	3384      	adds	r3, #132	; 0x84
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	4611      	mov	r1, r2
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	01d2      	lsls	r2, r2, #7
 80053f4:	440a      	add	r2, r1
 80053f6:	3284      	adds	r2, #132	; 0x84
 80053f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053fc:	f023 0307 	bic.w	r3, r3, #7
 8005400:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	6809      	ldr	r1, [r1, #0]
 800540e:	4608      	mov	r0, r1
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	01c9      	lsls	r1, r1, #7
 8005414:	4401      	add	r1, r0
 8005416:	3184      	adds	r1, #132	; 0x84
 8005418:	4313      	orrs	r3, r2
 800541a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	01db      	lsls	r3, r3, #7
 8005426:	4413      	add	r3, r2
 8005428:	3384      	adds	r3, #132	; 0x84
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	01db      	lsls	r3, r3, #7
 8005436:	4413      	add	r3, r2
 8005438:	3384      	adds	r3, #132	; 0x84
 800543a:	461a      	mov	r2, r3
 800543c:	2300      	movs	r3, #0
 800543e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	01db      	lsls	r3, r3, #7
 800544a:	4413      	add	r3, r2
 800544c:	3384      	adds	r3, #132	; 0x84
 800544e:	461a      	mov	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d102      	bne.n	8005464 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800545e:	2304      	movs	r3, #4
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	e01b      	b.n	800549c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d102      	bne.n	8005472 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800546c:	2303      	movs	r3, #3
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	e014      	b.n	800549c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b04      	cmp	r3, #4
 8005478:	d00b      	beq.n	8005492 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800547e:	2b02      	cmp	r3, #2
 8005480:	d007      	beq.n	8005492 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005486:	2b03      	cmp	r3, #3
 8005488:	d003      	beq.n	8005492 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800548e:	2b07      	cmp	r3, #7
 8005490:	d102      	bne.n	8005498 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005492:	2302      	movs	r3, #2
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	e001      	b.n	800549c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005498:	2301      	movs	r3, #1
 800549a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	01db      	lsls	r3, r3, #7
 80054a6:	4413      	add	r3, r2
 80054a8:	3384      	adds	r3, #132	; 0x84
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	4611      	mov	r1, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	01d2      	lsls	r2, r2, #7
 80054b6:	440a      	add	r2, r1
 80054b8:	3284      	adds	r2, #132	; 0x84
 80054ba:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80054be:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	6859      	ldr	r1, [r3, #4]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	1acb      	subs	r3, r1, r3
 80054d6:	69f9      	ldr	r1, [r7, #28]
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	6809      	ldr	r1, [r1, #0]
 80054e2:	4608      	mov	r0, r1
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	01c9      	lsls	r1, r1, #7
 80054e8:	4401      	add	r1, r0
 80054ea:	3184      	adds	r1, #132	; 0x84
 80054ec:	4313      	orrs	r3, r2
 80054ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	01db      	lsls	r3, r3, #7
 80054fa:	4413      	add	r3, r2
 80054fc:	3384      	adds	r3, #132	; 0x84
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	4611      	mov	r1, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	01d2      	lsls	r2, r2, #7
 800550a:	440a      	add	r2, r1
 800550c:	3284      	adds	r2, #132	; 0x84
 800550e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	01db      	lsls	r3, r3, #7
 8005522:	4413      	add	r3, r2
 8005524:	3384      	adds	r3, #132	; 0x84
 8005526:	461a      	mov	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	01db      	lsls	r3, r3, #7
 8005538:	4413      	add	r3, r2
 800553a:	3384      	adds	r3, #132	; 0x84
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	4611      	mov	r1, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	01d2      	lsls	r2, r2, #7
 8005548:	440a      	add	r2, r1
 800554a:	3284      	adds	r2, #132	; 0x84
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	6013      	str	r3, [r2, #0]
}
 8005552:	bf00      	nop
 8005554:	3724      	adds	r7, #36	; 0x24
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800555e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005560:	b08f      	sub	sp, #60	; 0x3c
 8005562:	af0a      	add	r7, sp, #40	; 0x28
 8005564:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e10f      	b.n	8005790 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f00a fddc 	bl	8010148 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2203      	movs	r2, #3
 8005594:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d102      	bne.n	80055aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f003 fdf3 	bl	800919a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	603b      	str	r3, [r7, #0]
 80055ba:	687e      	ldr	r6, [r7, #4]
 80055bc:	466d      	mov	r5, sp
 80055be:	f106 0410 	add.w	r4, r6, #16
 80055c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80055d2:	1d33      	adds	r3, r6, #4
 80055d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055d6:	6838      	ldr	r0, [r7, #0]
 80055d8:	f003 fcca 	bl	8008f70 <USB_CoreInit>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0d0      	b.n	8005790 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2100      	movs	r1, #0
 80055f4:	4618      	mov	r0, r3
 80055f6:	f003 fde1 	bl	80091bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055fa:	2300      	movs	r3, #0
 80055fc:	73fb      	strb	r3, [r7, #15]
 80055fe:	e04a      	b.n	8005696 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	333d      	adds	r3, #61	; 0x3d
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005614:	7bfa      	ldrb	r2, [r7, #15]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	333c      	adds	r3, #60	; 0x3c
 8005624:	7bfa      	ldrb	r2, [r7, #15]
 8005626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005628:	7bfa      	ldrb	r2, [r7, #15]
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	b298      	uxth	r0, r3
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	3344      	adds	r3, #68	; 0x44
 800563c:	4602      	mov	r2, r0
 800563e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005640:	7bfa      	ldrb	r2, [r7, #15]
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	3340      	adds	r3, #64	; 0x40
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005654:	7bfa      	ldrb	r2, [r7, #15]
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	4613      	mov	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	3348      	adds	r3, #72	; 0x48
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005668:	7bfa      	ldrb	r2, [r7, #15]
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	4613      	mov	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	440b      	add	r3, r1
 8005676:	334c      	adds	r3, #76	; 0x4c
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800567c:	7bfa      	ldrb	r2, [r7, #15]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	3354      	adds	r3, #84	; 0x54
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	3301      	adds	r3, #1
 8005694:	73fb      	strb	r3, [r7, #15]
 8005696:	7bfa      	ldrb	r2, [r7, #15]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	d3af      	bcc.n	8005600 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056a0:	2300      	movs	r3, #0
 80056a2:	73fb      	strb	r3, [r7, #15]
 80056a4:	e044      	b.n	8005730 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056a6:	7bfa      	ldrb	r2, [r7, #15]
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056bc:	7bfa      	ldrb	r2, [r7, #15]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80056ce:	7bfa      	ldrb	r2, [r7, #15]
 80056d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056d2:	7bfa      	ldrb	r2, [r7, #15]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056e8:	7bfa      	ldrb	r2, [r7, #15]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056fe:	7bfa      	ldrb	r2, [r7, #15]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	3301      	adds	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
 8005730:	7bfa      	ldrb	r2, [r7, #15]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	429a      	cmp	r2, r3
 8005738:	d3b5      	bcc.n	80056a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	687e      	ldr	r6, [r7, #4]
 8005742:	466d      	mov	r5, sp
 8005744:	f106 0410 	add.w	r4, r6, #16
 8005748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800574a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800574c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800574e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005750:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005754:	e885 0003 	stmia.w	r5, {r0, r1}
 8005758:	1d33      	adds	r3, r6, #4
 800575a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800575c:	6838      	ldr	r0, [r7, #0]
 800575e:	f003 fd79 	bl	8009254 <USB_DevInit>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e00d      	b.n	8005790 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f004 fec8 	bl	800a51e <USB_DevDisconnect>

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005798 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_PCD_Start+0x1c>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e020      	b.n	80057f6 <HAL_PCD_Start+0x5e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d109      	bne.n	80057d8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d005      	beq.n	80057d8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f003 fccb 	bl	8009178 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f004 fe78 	bl	800a4dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80057fe:	b590      	push	{r4, r7, lr}
 8005800:	b08d      	sub	sp, #52	; 0x34
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f004 ff36 	bl	800a686 <USB_GetMode>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	f040 848a 	bne.w	8006136 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f004 fe9a 	bl	800a560 <USB_ReadInterrupts>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 8480 	beq.w	8006134 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	0a1b      	lsrs	r3, r3, #8
 800583e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f004 fe87 	bl	800a560 <USB_ReadInterrupts>
 8005852:	4603      	mov	r3, r0
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d107      	bne.n	800586c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f002 0202 	and.w	r2, r2, #2
 800586a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f004 fe75 	bl	800a560 <USB_ReadInterrupts>
 8005876:	4603      	mov	r3, r0
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b10      	cmp	r3, #16
 800587e:	d161      	bne.n	8005944 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0210 	bic.w	r2, r2, #16
 800588e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f003 020f 	and.w	r2, r3, #15
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4413      	add	r3, r2
 80058ac:	3304      	adds	r3, #4
 80058ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	0c5b      	lsrs	r3, r3, #17
 80058b4:	f003 030f 	and.w	r3, r3, #15
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d124      	bne.n	8005906 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80058c2:	4013      	ands	r3, r2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d035      	beq.n	8005934 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	091b      	lsrs	r3, r3, #4
 80058d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	6a38      	ldr	r0, [r7, #32]
 80058dc:	f004 fcac 	bl	800a238 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	091b      	lsrs	r3, r3, #4
 80058e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058ec:	441a      	add	r2, r3
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058fe:	441a      	add	r2, r3
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	621a      	str	r2, [r3, #32]
 8005904:	e016      	b.n	8005934 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	0c5b      	lsrs	r3, r3, #17
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	2b06      	cmp	r3, #6
 8005910:	d110      	bne.n	8005934 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005918:	2208      	movs	r2, #8
 800591a:	4619      	mov	r1, r3
 800591c:	6a38      	ldr	r0, [r7, #32]
 800591e:	f004 fc8b 	bl	800a238 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	091b      	lsrs	r3, r3, #4
 800592a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800592e:	441a      	add	r2, r3
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699a      	ldr	r2, [r3, #24]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0210 	orr.w	r2, r2, #16
 8005942:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f004 fe09 	bl	800a560 <USB_ReadInterrupts>
 800594e:	4603      	mov	r3, r0
 8005950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005954:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005958:	f040 80a7 	bne.w	8005aaa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f004 fe0e 	bl	800a586 <USB_ReadDevAllOutEpInterrupt>
 800596a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800596c:	e099      	b.n	8005aa2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 808e 	beq.w	8005a96 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	4611      	mov	r1, r2
 8005984:	4618      	mov	r0, r3
 8005986:	f004 fe32 	bl	800a5ee <USB_ReadDevOutEPInterrupt>
 800598a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a2:	461a      	mov	r2, r3
 80059a4:	2301      	movs	r3, #1
 80059a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fec2 	bl	8006734 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00c      	beq.n	80059d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	461a      	mov	r2, r3
 80059c8:	2308      	movs	r3, #8
 80059ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80059cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 ff98 	bl	8006904 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	461a      	mov	r2, r3
 80059ec:	2310      	movs	r3, #16
 80059ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d030      	beq.n	8005a5c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a02:	2b80      	cmp	r3, #128	; 0x80
 8005a04:	d109      	bne.n	8005a1a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a18:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	78db      	ldrb	r3, [r3, #3]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d108      	bne.n	8005a4a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f00a fc81 	bl	801034c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	461a      	mov	r2, r3
 8005a58:	2302      	movs	r3, #2
 8005a5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d008      	beq.n	8005a78 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a72:	461a      	mov	r2, r3
 8005a74:	2320      	movs	r3, #32
 8005a76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	3301      	adds	r3, #1
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f47f af62 	bne.w	800596e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f004 fd56 	bl	800a560 <USB_ReadInterrupts>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005abe:	f040 80db 	bne.w	8005c78 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f004 fd77 	bl	800a5ba <USB_ReadDevAllInEpInterrupt>
 8005acc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005ad2:	e0cd      	b.n	8005c70 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80c2 	beq.w	8005c64 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f004 fd9d 	bl	800a62a <USB_ReadDevInEPInterrupt>
 8005af0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d057      	beq.n	8005bac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	2201      	movs	r2, #1
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69f9      	ldr	r1, [r7, #28]
 8005b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	2301      	movs	r3, #1
 8005b30:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d132      	bne.n	8005ba0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3e:	4613      	mov	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	334c      	adds	r3, #76	; 0x4c
 8005b4a:	6819      	ldr	r1, [r3, #0]
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b50:	4613      	mov	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4403      	add	r3, r0
 8005b5a:	3348      	adds	r3, #72	; 0x48
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4419      	add	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b64:	4613      	mov	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4403      	add	r3, r0
 8005b6e:	334c      	adds	r3, #76	; 0x4c
 8005b70:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d113      	bne.n	8005ba0 <HAL_PCD_IRQHandler+0x3a2>
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	3354      	adds	r3, #84	; 0x54
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d108      	bne.n	8005ba0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	f004 fda4 	bl	800a6e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f00a fb4b 	bl	8010242 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d008      	beq.n	8005be4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bde:	461a      	mov	r2, r3
 8005be0:	2310      	movs	r3, #16
 8005be2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d008      	beq.n	8005c00 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	2340      	movs	r3, #64	; 0x40
 8005bfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d023      	beq.n	8005c52 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c0c:	6a38      	ldr	r0, [r7, #32]
 8005c0e:	f003 fc85 	bl	800951c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	3338      	adds	r3, #56	; 0x38
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	4413      	add	r3, r2
 8005c22:	3304      	adds	r3, #4
 8005c24:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	78db      	ldrb	r3, [r3, #3]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d108      	bne.n	8005c40 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2200      	movs	r2, #0
 8005c32:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f00a fb98 	bl	8010370 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2302      	movs	r3, #2
 8005c50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fcdb 	bl	800661a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	3301      	adds	r3, #1
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f47f af2e 	bne.w	8005ad4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f004 fc6f 	bl	800a560 <USB_ReadInterrupts>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c8c:	d122      	bne.n	8005cd4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d108      	bne.n	8005cbe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fec2 	bl	8006a40 <HAL_PCDEx_LPM_Callback>
 8005cbc:	e002      	b.n	8005cc4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f00a fb36 	bl	8010330 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695a      	ldr	r2, [r3, #20]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f004 fc41 	bl	800a560 <USB_ReadInterrupts>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce8:	d112      	bne.n	8005d10 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d102      	bne.n	8005d00 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f00a faf2 	bl	80102e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005d0e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f004 fc23 	bl	800a560 <USB_ReadInterrupts>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d24:	f040 80b7 	bne.w	8005e96 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d36:	f023 0301 	bic.w	r3, r3, #1
 8005d3a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2110      	movs	r1, #16
 8005d42:	4618      	mov	r0, r3
 8005d44:	f003 fbea 	bl	800951c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d4c:	e046      	b.n	8005ddc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d60:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005db4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dd4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	3301      	adds	r3, #1
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d3b3      	bcc.n	8005d4e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005df8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d016      	beq.n	8005e30 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e12:	f043 030b 	orr.w	r3, r3, #11
 8005e16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e28:	f043 030b 	orr.w	r3, r3, #11
 8005e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e2e:	e015      	b.n	8005e5c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e42:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005e46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e56:	f043 030b 	orr.w	r3, r3, #11
 8005e5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e80:	461a      	mov	r2, r3
 8005e82:	f004 fc31 	bl	800a6e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695a      	ldr	r2, [r3, #20]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f004 fb60 	bl	800a560 <USB_ReadInterrupts>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eaa:	d124      	bne.n	8005ef6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f004 fbf6 	bl	800a6a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f003 fbab 	bl	8009616 <USB_GetDevSpeed>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681c      	ldr	r4, [r3, #0]
 8005ecc:	f001 fa28 	bl	8007320 <HAL_RCC_GetHCLKFreq>
 8005ed0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4620      	mov	r0, r4
 8005edc:	f003 f8aa 	bl	8009034 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f00a f9d6 	bl	8010292 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f004 fb30 	bl	800a560 <USB_ReadInterrupts>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d10a      	bne.n	8005f20 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f00a f9b3 	bl	8010276 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f002 0208 	and.w	r2, r2, #8
 8005f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f004 fb1b 	bl	800a560 <USB_ReadInterrupts>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f30:	2b80      	cmp	r3, #128	; 0x80
 8005f32:	d122      	bne.n	8005f7a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f40:	2301      	movs	r3, #1
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
 8005f44:	e014      	b.n	8005f70 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d105      	bne.n	8005f6a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fb27 	bl	80065b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d3e5      	bcc.n	8005f46 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f004 faee 	bl	800a560 <USB_ReadInterrupts>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f8e:	d13b      	bne.n	8006008 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f90:	2301      	movs	r3, #1
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
 8005f94:	e02b      	b.n	8005fee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005faa:	4613      	mov	r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	3340      	adds	r3, #64	; 0x40
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d115      	bne.n	8005fe8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005fbc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	da12      	bge.n	8005fe8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	440b      	add	r3, r1
 8005fd0:	333f      	adds	r3, #63	; 0x3f
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fae8 	bl	80065b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	3301      	adds	r3, #1
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d3ce      	bcc.n	8005f96 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695a      	ldr	r2, [r3, #20]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006006:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4618      	mov	r0, r3
 800600e:	f004 faa7 	bl	800a560 <USB_ReadInterrupts>
 8006012:	4603      	mov	r3, r0
 8006014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800601c:	d155      	bne.n	80060ca <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800601e:	2301      	movs	r3, #1
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
 8006022:	e045      	b.n	80060b0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006038:	4613      	mov	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	4413      	add	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d12e      	bne.n	80060aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800604c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800604e:	2b00      	cmp	r3, #0
 8006050:	da2b      	bge.n	80060aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800605e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006062:	429a      	cmp	r2, r3
 8006064:	d121      	bne.n	80060aa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	4613      	mov	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006078:	2201      	movs	r2, #1
 800607a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060a6:	6053      	str	r3, [r2, #4]
            break;
 80060a8:	e007      	b.n	80060ba <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	3301      	adds	r3, #1
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d3b4      	bcc.n	8006024 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695a      	ldr	r2, [r3, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80060c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f004 fa46 	bl	800a560 <USB_ReadInterrupts>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060de:	d10a      	bne.n	80060f6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f00a f957 	bl	8010394 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80060f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f004 fa30 	bl	800a560 <USB_ReadInterrupts>
 8006100:	4603      	mov	r3, r0
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b04      	cmp	r3, #4
 8006108:	d115      	bne.n	8006136 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f00a f947 	bl	80103b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6859      	ldr	r1, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
 8006132:	e000      	b.n	8006136 <HAL_PCD_IRQHandler+0x938>
      return;
 8006134:	bf00      	nop
    }
  }
}
 8006136:	3734      	adds	r7, #52	; 0x34
 8006138:	46bd      	mov	sp, r7
 800613a:	bd90      	pop	{r4, r7, pc}

0800613c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_PCD_SetAddress+0x1a>
 8006152:	2302      	movs	r3, #2
 8006154:	e013      	b.n	800617e <HAL_PCD_SetAddress+0x42>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	78fa      	ldrb	r2, [r7, #3]
 8006162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	78fa      	ldrb	r2, [r7, #3]
 800616c:	4611      	mov	r1, r2
 800616e:	4618      	mov	r0, r3
 8006170:	f004 f98e 	bl	800a490 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	4608      	mov	r0, r1
 8006190:	4611      	mov	r1, r2
 8006192:	461a      	mov	r2, r3
 8006194:	4603      	mov	r3, r0
 8006196:	70fb      	strb	r3, [r7, #3]
 8006198:	460b      	mov	r3, r1
 800619a:	803b      	strh	r3, [r7, #0]
 800619c:	4613      	mov	r3, r2
 800619e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80061a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	da0f      	bge.n	80061cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	f003 020f 	and.w	r2, r3, #15
 80061b2:	4613      	mov	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	3338      	adds	r3, #56	; 0x38
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	4413      	add	r3, r2
 80061c0:	3304      	adds	r3, #4
 80061c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	705a      	strb	r2, [r3, #1]
 80061ca:	e00f      	b.n	80061ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	f003 020f 	and.w	r2, r3, #15
 80061d2:	4613      	mov	r3, r2
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4413      	add	r3, r2
 80061e2:	3304      	adds	r3, #4
 80061e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80061f8:	883a      	ldrh	r2, [r7, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	78ba      	ldrb	r2, [r7, #2]
 8006202:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	785b      	ldrb	r3, [r3, #1]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d004      	beq.n	8006216 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006216:	78bb      	ldrb	r3, [r7, #2]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d102      	bne.n	8006222 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_PCD_EP_Open+0xaa>
 800622c:	2302      	movs	r3, #2
 800622e:	e00e      	b.n	800624e <HAL_PCD_EP_Open+0xc8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68f9      	ldr	r1, [r7, #12]
 800623e:	4618      	mov	r0, r3
 8006240:	f003 fa0e 	bl	8009660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800624c:	7afb      	ldrb	r3, [r7, #11]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006266:	2b00      	cmp	r3, #0
 8006268:	da0f      	bge.n	800628a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	f003 020f 	and.w	r2, r3, #15
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	3338      	adds	r3, #56	; 0x38
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	3304      	adds	r3, #4
 8006280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	705a      	strb	r2, [r3, #1]
 8006288:	e00f      	b.n	80062aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	f003 020f 	and.w	r2, r3, #15
 8006290:	4613      	mov	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	4413      	add	r3, r2
 80062a0:	3304      	adds	r3, #4
 80062a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_PCD_EP_Close+0x6e>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e00e      	b.n	80062e2 <HAL_PCD_EP_Close+0x8c>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68f9      	ldr	r1, [r7, #12]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f003 fa4c 	bl	8009770 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b086      	sub	sp, #24
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
 80062f6:	460b      	mov	r3, r1
 80062f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062fa:	7afb      	ldrb	r3, [r7, #11]
 80062fc:	f003 020f 	and.w	r2, r3, #15
 8006300:	4613      	mov	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	3304      	adds	r3, #4
 8006312:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2200      	movs	r2, #0
 8006324:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2200      	movs	r2, #0
 800632a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800632c:	7afb      	ldrb	r3, [r7, #11]
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	b2da      	uxtb	r2, r3
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d102      	bne.n	8006346 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006346:	7afb      	ldrb	r3, [r7, #11]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	2b00      	cmp	r3, #0
 800634e:	d109      	bne.n	8006364 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	6979      	ldr	r1, [r7, #20]
 800635e:	f003 fd2b 	bl	8009db8 <USB_EP0StartXfer>
 8006362:	e008      	b.n	8006376 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	6979      	ldr	r1, [r7, #20]
 8006372:	f003 fad9 	bl	8009928 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	f003 020f 	and.w	r2, r3, #15
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	4613      	mov	r3, r2
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80063a2:	681b      	ldr	r3, [r3, #0]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	607a      	str	r2, [r7, #4]
 80063ba:	603b      	str	r3, [r7, #0]
 80063bc:	460b      	mov	r3, r1
 80063be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063c0:	7afb      	ldrb	r3, [r7, #11]
 80063c2:	f003 020f 	and.w	r2, r3, #15
 80063c6:	4613      	mov	r3, r2
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	3338      	adds	r3, #56	; 0x38
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	3304      	adds	r3, #4
 80063d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2200      	movs	r2, #0
 80063e8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2201      	movs	r2, #1
 80063ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063f0:	7afb      	ldrb	r3, [r7, #11]
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d102      	bne.n	800640a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800640a:	7afb      	ldrb	r3, [r7, #11]
 800640c:	f003 030f 	and.w	r3, r3, #15
 8006410:	2b00      	cmp	r3, #0
 8006412:	d109      	bne.n	8006428 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	6979      	ldr	r1, [r7, #20]
 8006422:	f003 fcc9 	bl	8009db8 <USB_EP0StartXfer>
 8006426:	e008      	b.n	800643a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	6979      	ldr	r1, [r7, #20]
 8006436:	f003 fa77 	bl	8009928 <USB_EPStartXfer>
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	f003 020f 	and.w	r2, r3, #15
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d901      	bls.n	8006462 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e050      	b.n	8006504 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006466:	2b00      	cmp	r3, #0
 8006468:	da0f      	bge.n	800648a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	f003 020f 	and.w	r2, r3, #15
 8006470:	4613      	mov	r3, r2
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	4413      	add	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	3338      	adds	r3, #56	; 0x38
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	4413      	add	r3, r2
 800647e:	3304      	adds	r3, #4
 8006480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	705a      	strb	r2, [r3, #1]
 8006488:	e00d      	b.n	80064a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800648a:	78fa      	ldrb	r2, [r7, #3]
 800648c:	4613      	mov	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	4413      	add	r3, r2
 800649c:	3304      	adds	r3, #4
 800649e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_PCD_EP_SetStall+0x82>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e01e      	b.n	8006504 <HAL_PCD_EP_SetStall+0xc0>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68f9      	ldr	r1, [r7, #12]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f003 ff07 	bl	800a2e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	f003 030f 	and.w	r3, r3, #15
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	b2d9      	uxtb	r1, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064f4:	461a      	mov	r2, r3
 80064f6:	f004 f8f7 	bl	800a6e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	f003 020f 	and.w	r2, r3, #15
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	429a      	cmp	r2, r3
 8006524:	d901      	bls.n	800652a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e042      	b.n	80065b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800652a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800652e:	2b00      	cmp	r3, #0
 8006530:	da0f      	bge.n	8006552 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	f003 020f 	and.w	r2, r3, #15
 8006538:	4613      	mov	r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	3338      	adds	r3, #56	; 0x38
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	4413      	add	r3, r2
 8006546:	3304      	adds	r3, #4
 8006548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	705a      	strb	r2, [r3, #1]
 8006550:	e00f      	b.n	8006572 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006552:	78fb      	ldrb	r3, [r7, #3]
 8006554:	f003 020f 	and.w	r2, r3, #15
 8006558:	4613      	mov	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	4413      	add	r3, r2
 8006568:	3304      	adds	r3, #4
 800656a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	b2da      	uxtb	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_PCD_EP_ClrStall+0x86>
 800658e:	2302      	movs	r3, #2
 8006590:	e00e      	b.n	80065b0 <HAL_PCD_EP_ClrStall+0xa4>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68f9      	ldr	r1, [r7, #12]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f003 ff0f 	bl	800a3c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80065c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	da0c      	bge.n	80065e6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	f003 020f 	and.w	r2, r3, #15
 80065d2:	4613      	mov	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	3338      	adds	r3, #56	; 0x38
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	4413      	add	r3, r2
 80065e0:	3304      	adds	r3, #4
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	e00c      	b.n	8006600 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	f003 020f 	and.w	r2, r3, #15
 80065ec:	4613      	mov	r3, r2
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	4413      	add	r3, r2
 80065fc:	3304      	adds	r3, #4
 80065fe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68f9      	ldr	r1, [r7, #12]
 8006606:	4618      	mov	r0, r3
 8006608:	f003 fd2e 	bl	800a068 <USB_EPStopXfer>
 800660c:	4603      	mov	r3, r0
 800660e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006610:	7afb      	ldrb	r3, [r7, #11]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b08a      	sub	sp, #40	; 0x28
 800661e:	af02      	add	r7, sp, #8
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	3338      	adds	r3, #56	; 0x38
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	3304      	adds	r3, #4
 8006640:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a1a      	ldr	r2, [r3, #32]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	429a      	cmp	r2, r3
 800664c:	d901      	bls.n	8006652 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e06c      	b.n	800672c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	699a      	ldr	r2, [r3, #24]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	429a      	cmp	r2, r3
 8006666:	d902      	bls.n	800666e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	3303      	adds	r3, #3
 8006672:	089b      	lsrs	r3, r3, #2
 8006674:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006676:	e02b      	b.n	80066d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	699a      	ldr	r2, [r3, #24]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	429a      	cmp	r2, r3
 800668c:	d902      	bls.n	8006694 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	3303      	adds	r3, #3
 8006698:	089b      	lsrs	r3, r3, #2
 800669a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6919      	ldr	r1, [r3, #16]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	4603      	mov	r3, r0
 80066b2:	6978      	ldr	r0, [r7, #20]
 80066b4:	f003 fd82 	bl	800a1bc <USB_WritePacket>

    ep->xfer_buff  += len;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	441a      	add	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6a1a      	ldr	r2, [r3, #32]
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	441a      	add	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d809      	bhi.n	80066fa <PCD_WriteEmptyTxFifo+0xe0>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1a      	ldr	r2, [r3, #32]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d203      	bcs.n	80066fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1be      	bne.n	8006678 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	429a      	cmp	r2, r3
 8006704:	d811      	bhi.n	800672a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	2201      	movs	r2, #1
 800670e:	fa02 f303 	lsl.w	r3, r2, r3
 8006712:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	43db      	mvns	r3, r3
 8006720:	6939      	ldr	r1, [r7, #16]
 8006722:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006726:	4013      	ands	r3, r2
 8006728:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	333c      	adds	r3, #60	; 0x3c
 800674c:	3304      	adds	r3, #4
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d17b      	bne.n	8006862 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d015      	beq.n	80067a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	4a61      	ldr	r2, [pc, #388]	; (80068fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	f240 80b9 	bls.w	80068f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80b3 	beq.w	80068f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	461a      	mov	r2, r3
 8006798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679c:	6093      	str	r3, [r2, #8]
 800679e:	e0a7      	b.n	80068f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	461a      	mov	r2, r3
 80067b8:	2320      	movs	r3, #32
 80067ba:	6093      	str	r3, [r2, #8]
 80067bc:	e098      	b.n	80068f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f040 8093 	bne.w	80068f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4a4b      	ldr	r2, [pc, #300]	; (80068fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d90f      	bls.n	80067f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	461a      	mov	r2, r3
 80067ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ee:	6093      	str	r3, [r2, #8]
 80067f0:	e07e      	b.n	80068f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	4613      	mov	r3, r2
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	4413      	add	r3, r2
 8006804:	3304      	adds	r3, #4
 8006806:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	0159      	lsls	r1, r3, #5
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	440b      	add	r3, r1
 8006814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d114      	bne.n	8006854 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800683c:	461a      	mov	r2, r3
 800683e:	2101      	movs	r1, #1
 8006840:	f003 ff52 	bl	800a6e8 <USB_EP0_OutStart>
 8006844:	e006      	b.n	8006854 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	441a      	add	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f009 fcd6 	bl	801020c <HAL_PCD_DataOutStageCallback>
 8006860:	e046      	b.n	80068f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	4a26      	ldr	r2, [pc, #152]	; (8006900 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d124      	bne.n	80068b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	461a      	mov	r2, r3
 8006882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006886:	6093      	str	r3, [r2, #8]
 8006888:	e032      	b.n	80068f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	461a      	mov	r2, r3
 80068a2:	2320      	movs	r3, #32
 80068a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f009 fcad 	bl	801020c <HAL_PCD_DataOutStageCallback>
 80068b2:	e01d      	b.n	80068f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d114      	bne.n	80068e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	4613      	mov	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d108      	bne.n	80068e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068dc:	461a      	mov	r2, r3
 80068de:	2100      	movs	r1, #0
 80068e0:	f003 ff02 	bl	800a6e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f009 fc8e 	bl	801020c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	4f54300a 	.word	0x4f54300a
 8006900:	4f54310a 	.word	0x4f54310a

08006904 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	333c      	adds	r3, #60	; 0x3c
 800691c:	3304      	adds	r3, #4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4a15      	ldr	r2, [pc, #84]	; (800698c <PCD_EP_OutSetupPacket_int+0x88>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d90e      	bls.n	8006958 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006940:	2b00      	cmp	r3, #0
 8006942:	d009      	beq.n	8006958 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006950:	461a      	mov	r2, r3
 8006952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006956:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f009 fc45 	bl	80101e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4a0a      	ldr	r2, [pc, #40]	; (800698c <PCD_EP_OutSetupPacket_int+0x88>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d90c      	bls.n	8006980 <PCD_EP_OutSetupPacket_int+0x7c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d108      	bne.n	8006980 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006978:	461a      	mov	r2, r3
 800697a:	2101      	movs	r1, #1
 800697c:	f003 feb4 	bl	800a6e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	4f54300a 	.word	0x4f54300a

08006990 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
 800699c:	4613      	mov	r3, r2
 800699e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d107      	bne.n	80069be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80069ae:	883b      	ldrh	r3, [r7, #0]
 80069b0:	0419      	lsls	r1, r3, #16
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28
 80069bc:	e028      	b.n	8006a10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	0c1b      	lsrs	r3, r3, #16
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	4413      	add	r3, r2
 80069ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
 80069d0:	e00d      	b.n	80069ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	3340      	adds	r3, #64	; 0x40
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	0c1b      	lsrs	r3, r3, #16
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	4413      	add	r3, r2
 80069e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	3301      	adds	r3, #1
 80069ec:	73fb      	strb	r3, [r7, #15]
 80069ee:	7bfa      	ldrb	r2, [r7, #15]
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d3ec      	bcc.n	80069d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80069f8:	883b      	ldrh	r3, [r7, #0]
 80069fa:	0418      	lsls	r0, r3, #16
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6819      	ldr	r1, [r3, #0]
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	4302      	orrs	r2, r0
 8006a08:	3340      	adds	r3, #64	; 0x40
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	887a      	ldrh	r2, [r7, #2]
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e267      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d075      	beq.n	8006b62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a76:	4b88      	ldr	r3, [pc, #544]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 030c 	and.w	r3, r3, #12
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d00c      	beq.n	8006a9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a82:	4b85      	ldr	r3, [pc, #532]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a8a:	2b08      	cmp	r3, #8
 8006a8c:	d112      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a8e:	4b82      	ldr	r3, [pc, #520]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a9a:	d10b      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a9c:	4b7e      	ldr	r3, [pc, #504]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d05b      	beq.n	8006b60 <HAL_RCC_OscConfig+0x108>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d157      	bne.n	8006b60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e242      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006abc:	d106      	bne.n	8006acc <HAL_RCC_OscConfig+0x74>
 8006abe:	4b76      	ldr	r3, [pc, #472]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a75      	ldr	r2, [pc, #468]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	e01d      	b.n	8006b08 <HAL_RCC_OscConfig+0xb0>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ad4:	d10c      	bne.n	8006af0 <HAL_RCC_OscConfig+0x98>
 8006ad6:	4b70      	ldr	r3, [pc, #448]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a6f      	ldr	r2, [pc, #444]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	4b6d      	ldr	r3, [pc, #436]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a6c      	ldr	r2, [pc, #432]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	e00b      	b.n	8006b08 <HAL_RCC_OscConfig+0xb0>
 8006af0:	4b69      	ldr	r3, [pc, #420]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a68      	ldr	r2, [pc, #416]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	4b66      	ldr	r3, [pc, #408]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a65      	ldr	r2, [pc, #404]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d013      	beq.n	8006b38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b10:	f7fd f854 	bl	8003bbc <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b18:	f7fd f850 	bl	8003bbc <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b64      	cmp	r3, #100	; 0x64
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e207      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b2a:	4b5b      	ldr	r3, [pc, #364]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0f0      	beq.n	8006b18 <HAL_RCC_OscConfig+0xc0>
 8006b36:	e014      	b.n	8006b62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b38:	f7fd f840 	bl	8003bbc <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b40:	f7fd f83c 	bl	8003bbc <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b64      	cmp	r3, #100	; 0x64
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e1f3      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b52:	4b51      	ldr	r3, [pc, #324]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1f0      	bne.n	8006b40 <HAL_RCC_OscConfig+0xe8>
 8006b5e:	e000      	b.n	8006b62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d063      	beq.n	8006c36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b6e:	4b4a      	ldr	r3, [pc, #296]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 030c 	and.w	r3, r3, #12
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b7a:	4b47      	ldr	r3, [pc, #284]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d11c      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b86:	4b44      	ldr	r3, [pc, #272]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d116      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b92:	4b41      	ldr	r3, [pc, #260]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <HAL_RCC_OscConfig+0x152>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d001      	beq.n	8006baa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e1c7      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006baa:	4b3b      	ldr	r3, [pc, #236]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	4937      	ldr	r1, [pc, #220]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bbe:	e03a      	b.n	8006c36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d020      	beq.n	8006c0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc8:	4b34      	ldr	r3, [pc, #208]	; (8006c9c <HAL_RCC_OscConfig+0x244>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bce:	f7fc fff5 	bl	8003bbc <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bd6:	f7fc fff1 	bl	8003bbc <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e1a8      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be8:	4b2b      	ldr	r3, [pc, #172]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0f0      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf4:	4b28      	ldr	r3, [pc, #160]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	4925      	ldr	r1, [pc, #148]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	600b      	str	r3, [r1, #0]
 8006c08:	e015      	b.n	8006c36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c0a:	4b24      	ldr	r3, [pc, #144]	; (8006c9c <HAL_RCC_OscConfig+0x244>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c10:	f7fc ffd4 	bl	8003bbc <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c18:	f7fc ffd0 	bl	8003bbc <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e187      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c2a:	4b1b      	ldr	r3, [pc, #108]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d036      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d016      	beq.n	8006c78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <HAL_RCC_OscConfig+0x248>)
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c50:	f7fc ffb4 	bl	8003bbc <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c58:	f7fc ffb0 	bl	8003bbc <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e167      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f0      	beq.n	8006c58 <HAL_RCC_OscConfig+0x200>
 8006c76:	e01b      	b.n	8006cb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c78:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <HAL_RCC_OscConfig+0x248>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c7e:	f7fc ff9d 	bl	8003bbc <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c84:	e00e      	b.n	8006ca4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c86:	f7fc ff99 	bl	8003bbc <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d907      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e150      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	42470000 	.word	0x42470000
 8006ca0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca4:	4b88      	ldr	r3, [pc, #544]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1ea      	bne.n	8006c86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8097 	beq.w	8006dec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cc2:	4b81      	ldr	r3, [pc, #516]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10f      	bne.n	8006cee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60bb      	str	r3, [r7, #8]
 8006cd2:	4b7d      	ldr	r3, [pc, #500]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	4a7c      	ldr	r2, [pc, #496]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cde:	4b7a      	ldr	r3, [pc, #488]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce6:	60bb      	str	r3, [r7, #8]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cee:	4b77      	ldr	r3, [pc, #476]	; (8006ecc <HAL_RCC_OscConfig+0x474>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d118      	bne.n	8006d2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cfa:	4b74      	ldr	r3, [pc, #464]	; (8006ecc <HAL_RCC_OscConfig+0x474>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a73      	ldr	r2, [pc, #460]	; (8006ecc <HAL_RCC_OscConfig+0x474>)
 8006d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d06:	f7fc ff59 	bl	8003bbc <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0e:	f7fc ff55 	bl	8003bbc <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e10c      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d20:	4b6a      	ldr	r3, [pc, #424]	; (8006ecc <HAL_RCC_OscConfig+0x474>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f0      	beq.n	8006d0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d106      	bne.n	8006d42 <HAL_RCC_OscConfig+0x2ea>
 8006d34:	4b64      	ldr	r3, [pc, #400]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d38:	4a63      	ldr	r2, [pc, #396]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d40:	e01c      	b.n	8006d7c <HAL_RCC_OscConfig+0x324>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	d10c      	bne.n	8006d64 <HAL_RCC_OscConfig+0x30c>
 8006d4a:	4b5f      	ldr	r3, [pc, #380]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4e:	4a5e      	ldr	r2, [pc, #376]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d50:	f043 0304 	orr.w	r3, r3, #4
 8006d54:	6713      	str	r3, [r2, #112]	; 0x70
 8006d56:	4b5c      	ldr	r3, [pc, #368]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5a:	4a5b      	ldr	r2, [pc, #364]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d5c:	f043 0301 	orr.w	r3, r3, #1
 8006d60:	6713      	str	r3, [r2, #112]	; 0x70
 8006d62:	e00b      	b.n	8006d7c <HAL_RCC_OscConfig+0x324>
 8006d64:	4b58      	ldr	r3, [pc, #352]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d68:	4a57      	ldr	r2, [pc, #348]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d6a:	f023 0301 	bic.w	r3, r3, #1
 8006d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d70:	4b55      	ldr	r3, [pc, #340]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d74:	4a54      	ldr	r2, [pc, #336]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d76:	f023 0304 	bic.w	r3, r3, #4
 8006d7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d015      	beq.n	8006db0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d84:	f7fc ff1a 	bl	8003bbc <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d8a:	e00a      	b.n	8006da2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d8c:	f7fc ff16 	bl	8003bbc <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e0cb      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da2:	4b49      	ldr	r3, [pc, #292]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0ee      	beq.n	8006d8c <HAL_RCC_OscConfig+0x334>
 8006dae:	e014      	b.n	8006dda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006db0:	f7fc ff04 	bl	8003bbc <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006db6:	e00a      	b.n	8006dce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db8:	f7fc ff00 	bl	8003bbc <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e0b5      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dce:	4b3e      	ldr	r3, [pc, #248]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1ee      	bne.n	8006db8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d105      	bne.n	8006dec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006de0:	4b39      	ldr	r3, [pc, #228]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de4:	4a38      	ldr	r2, [pc, #224]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 80a1 	beq.w	8006f38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006df6:	4b34      	ldr	r3, [pc, #208]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
 8006dfe:	2b08      	cmp	r3, #8
 8006e00:	d05c      	beq.n	8006ebc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d141      	bne.n	8006e8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e0a:	4b31      	ldr	r3, [pc, #196]	; (8006ed0 <HAL_RCC_OscConfig+0x478>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e10:	f7fc fed4 	bl	8003bbc <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e18:	f7fc fed0 	bl	8003bbc <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e087      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2a:	4b27      	ldr	r3, [pc, #156]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1f0      	bne.n	8006e18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69da      	ldr	r2, [r3, #28]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	019b      	lsls	r3, r3, #6
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	085b      	lsrs	r3, r3, #1
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	041b      	lsls	r3, r3, #16
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	061b      	lsls	r3, r3, #24
 8006e5a:	491b      	ldr	r1, [pc, #108]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e60:	4b1b      	ldr	r3, [pc, #108]	; (8006ed0 <HAL_RCC_OscConfig+0x478>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e66:	f7fc fea9 	bl	8003bbc <HAL_GetTick>
 8006e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e6c:	e008      	b.n	8006e80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e6e:	f7fc fea5 	bl	8003bbc <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e05c      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e80:	4b11      	ldr	r3, [pc, #68]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0f0      	beq.n	8006e6e <HAL_RCC_OscConfig+0x416>
 8006e8c:	e054      	b.n	8006f38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8e:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <HAL_RCC_OscConfig+0x478>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e94:	f7fc fe92 	bl	8003bbc <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e9c:	f7fc fe8e 	bl	8003bbc <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e045      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eae:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f0      	bne.n	8006e9c <HAL_RCC_OscConfig+0x444>
 8006eba:	e03d      	b.n	8006f38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d107      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e038      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
 8006ec8:	40023800 	.word	0x40023800
 8006ecc:	40007000 	.word	0x40007000
 8006ed0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ed4:	4b1b      	ldr	r3, [pc, #108]	; (8006f44 <HAL_RCC_OscConfig+0x4ec>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d028      	beq.n	8006f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d121      	bne.n	8006f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d11a      	bne.n	8006f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f04:	4013      	ands	r3, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d111      	bne.n	8006f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d107      	bne.n	8006f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d001      	beq.n	8006f38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e000      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	40023800 	.word	0x40023800

08006f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0cc      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f5c:	4b68      	ldr	r3, [pc, #416]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d90c      	bls.n	8006f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6a:	4b65      	ldr	r3, [pc, #404]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f72:	4b63      	ldr	r3, [pc, #396]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d001      	beq.n	8006f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e0b8      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d020      	beq.n	8006fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f9c:	4b59      	ldr	r3, [pc, #356]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	4a58      	ldr	r2, [pc, #352]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fb4:	4b53      	ldr	r3, [pc, #332]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	4a52      	ldr	r2, [pc, #328]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fc0:	4b50      	ldr	r3, [pc, #320]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	494d      	ldr	r1, [pc, #308]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d044      	beq.n	8007068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d107      	bne.n	8006ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe6:	4b47      	ldr	r3, [pc, #284]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d119      	bne.n	8007026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e07f      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d003      	beq.n	8007006 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007002:	2b03      	cmp	r3, #3
 8007004:	d107      	bne.n	8007016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007006:	4b3f      	ldr	r3, [pc, #252]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e06f      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007016:	4b3b      	ldr	r3, [pc, #236]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e067      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007026:	4b37      	ldr	r3, [pc, #220]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f023 0203 	bic.w	r2, r3, #3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	4934      	ldr	r1, [pc, #208]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8007034:	4313      	orrs	r3, r2
 8007036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007038:	f7fc fdc0 	bl	8003bbc <HAL_GetTick>
 800703c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703e:	e00a      	b.n	8007056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007040:	f7fc fdbc 	bl	8003bbc <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	f241 3288 	movw	r2, #5000	; 0x1388
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e04f      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007056:	4b2b      	ldr	r3, [pc, #172]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 020c 	and.w	r2, r3, #12
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	429a      	cmp	r2, r3
 8007066:	d1eb      	bne.n	8007040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007068:	4b25      	ldr	r3, [pc, #148]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d20c      	bcs.n	8007090 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007076:	4b22      	ldr	r3, [pc, #136]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800707e:	4b20      	ldr	r3, [pc, #128]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	429a      	cmp	r2, r3
 800708a:	d001      	beq.n	8007090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e032      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800709c:	4b19      	ldr	r3, [pc, #100]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	4916      	ldr	r1, [pc, #88]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d009      	beq.n	80070ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070ba:	4b12      	ldr	r3, [pc, #72]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	490e      	ldr	r1, [pc, #56]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070ce:	f000 f821 	bl	8007114 <HAL_RCC_GetSysClockFreq>
 80070d2:	4602      	mov	r2, r0
 80070d4:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	091b      	lsrs	r3, r3, #4
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	490a      	ldr	r1, [pc, #40]	; (8007108 <HAL_RCC_ClockConfig+0x1c0>)
 80070e0:	5ccb      	ldrb	r3, [r1, r3]
 80070e2:	fa22 f303 	lsr.w	r3, r2, r3
 80070e6:	4a09      	ldr	r2, [pc, #36]	; (800710c <HAL_RCC_ClockConfig+0x1c4>)
 80070e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070ea:	4b09      	ldr	r3, [pc, #36]	; (8007110 <HAL_RCC_ClockConfig+0x1c8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fa fca6 	bl	8001a40 <HAL_InitTick>

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40023c00 	.word	0x40023c00
 8007104:	40023800 	.word	0x40023800
 8007108:	08013644 	.word	0x08013644
 800710c:	2000000c 	.word	0x2000000c
 8007110:	2000008c 	.word	0x2000008c

08007114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007118:	b094      	sub	sp, #80	; 0x50
 800711a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	647b      	str	r3, [r7, #68]	; 0x44
 8007120:	2300      	movs	r3, #0
 8007122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007124:	2300      	movs	r3, #0
 8007126:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800712c:	4b79      	ldr	r3, [pc, #484]	; (8007314 <HAL_RCC_GetSysClockFreq+0x200>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 030c 	and.w	r3, r3, #12
 8007134:	2b08      	cmp	r3, #8
 8007136:	d00d      	beq.n	8007154 <HAL_RCC_GetSysClockFreq+0x40>
 8007138:	2b08      	cmp	r3, #8
 800713a:	f200 80e1 	bhi.w	8007300 <HAL_RCC_GetSysClockFreq+0x1ec>
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_RCC_GetSysClockFreq+0x34>
 8007142:	2b04      	cmp	r3, #4
 8007144:	d003      	beq.n	800714e <HAL_RCC_GetSysClockFreq+0x3a>
 8007146:	e0db      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007148:	4b73      	ldr	r3, [pc, #460]	; (8007318 <HAL_RCC_GetSysClockFreq+0x204>)
 800714a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800714c:	e0db      	b.n	8007306 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800714e:	4b73      	ldr	r3, [pc, #460]	; (800731c <HAL_RCC_GetSysClockFreq+0x208>)
 8007150:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007152:	e0d8      	b.n	8007306 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007154:	4b6f      	ldr	r3, [pc, #444]	; (8007314 <HAL_RCC_GetSysClockFreq+0x200>)
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800715c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800715e:	4b6d      	ldr	r3, [pc, #436]	; (8007314 <HAL_RCC_GetSysClockFreq+0x200>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d063      	beq.n	8007232 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800716a:	4b6a      	ldr	r3, [pc, #424]	; (8007314 <HAL_RCC_GetSysClockFreq+0x200>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	099b      	lsrs	r3, r3, #6
 8007170:	2200      	movs	r2, #0
 8007172:	63bb      	str	r3, [r7, #56]	; 0x38
 8007174:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717c:	633b      	str	r3, [r7, #48]	; 0x30
 800717e:	2300      	movs	r3, #0
 8007180:	637b      	str	r3, [r7, #52]	; 0x34
 8007182:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007186:	4622      	mov	r2, r4
 8007188:	462b      	mov	r3, r5
 800718a:	f04f 0000 	mov.w	r0, #0
 800718e:	f04f 0100 	mov.w	r1, #0
 8007192:	0159      	lsls	r1, r3, #5
 8007194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007198:	0150      	lsls	r0, r2, #5
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4621      	mov	r1, r4
 80071a0:	1a51      	subs	r1, r2, r1
 80071a2:	6139      	str	r1, [r7, #16]
 80071a4:	4629      	mov	r1, r5
 80071a6:	eb63 0301 	sbc.w	r3, r3, r1
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071b8:	4659      	mov	r1, fp
 80071ba:	018b      	lsls	r3, r1, #6
 80071bc:	4651      	mov	r1, sl
 80071be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071c2:	4651      	mov	r1, sl
 80071c4:	018a      	lsls	r2, r1, #6
 80071c6:	4651      	mov	r1, sl
 80071c8:	ebb2 0801 	subs.w	r8, r2, r1
 80071cc:	4659      	mov	r1, fp
 80071ce:	eb63 0901 	sbc.w	r9, r3, r1
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	f04f 0300 	mov.w	r3, #0
 80071da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071e6:	4690      	mov	r8, r2
 80071e8:	4699      	mov	r9, r3
 80071ea:	4623      	mov	r3, r4
 80071ec:	eb18 0303 	adds.w	r3, r8, r3
 80071f0:	60bb      	str	r3, [r7, #8]
 80071f2:	462b      	mov	r3, r5
 80071f4:	eb49 0303 	adc.w	r3, r9, r3
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	f04f 0300 	mov.w	r3, #0
 8007202:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007206:	4629      	mov	r1, r5
 8007208:	024b      	lsls	r3, r1, #9
 800720a:	4621      	mov	r1, r4
 800720c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007210:	4621      	mov	r1, r4
 8007212:	024a      	lsls	r2, r1, #9
 8007214:	4610      	mov	r0, r2
 8007216:	4619      	mov	r1, r3
 8007218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721a:	2200      	movs	r2, #0
 800721c:	62bb      	str	r3, [r7, #40]	; 0x28
 800721e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007220:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007224:	f7f9 fcd0 	bl	8000bc8 <__aeabi_uldivmod>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4613      	mov	r3, r2
 800722e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007230:	e058      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007232:	4b38      	ldr	r3, [pc, #224]	; (8007314 <HAL_RCC_GetSysClockFreq+0x200>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	099b      	lsrs	r3, r3, #6
 8007238:	2200      	movs	r2, #0
 800723a:	4618      	mov	r0, r3
 800723c:	4611      	mov	r1, r2
 800723e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007242:	623b      	str	r3, [r7, #32]
 8007244:	2300      	movs	r3, #0
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
 8007248:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800724c:	4642      	mov	r2, r8
 800724e:	464b      	mov	r3, r9
 8007250:	f04f 0000 	mov.w	r0, #0
 8007254:	f04f 0100 	mov.w	r1, #0
 8007258:	0159      	lsls	r1, r3, #5
 800725a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800725e:	0150      	lsls	r0, r2, #5
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4641      	mov	r1, r8
 8007266:	ebb2 0a01 	subs.w	sl, r2, r1
 800726a:	4649      	mov	r1, r9
 800726c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	f04f 0300 	mov.w	r3, #0
 8007278:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800727c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007280:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007284:	ebb2 040a 	subs.w	r4, r2, sl
 8007288:	eb63 050b 	sbc.w	r5, r3, fp
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	f04f 0300 	mov.w	r3, #0
 8007294:	00eb      	lsls	r3, r5, #3
 8007296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800729a:	00e2      	lsls	r2, r4, #3
 800729c:	4614      	mov	r4, r2
 800729e:	461d      	mov	r5, r3
 80072a0:	4643      	mov	r3, r8
 80072a2:	18e3      	adds	r3, r4, r3
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	464b      	mov	r3, r9
 80072a8:	eb45 0303 	adc.w	r3, r5, r3
 80072ac:	607b      	str	r3, [r7, #4]
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072ba:	4629      	mov	r1, r5
 80072bc:	028b      	lsls	r3, r1, #10
 80072be:	4621      	mov	r1, r4
 80072c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c4:	4621      	mov	r1, r4
 80072c6:	028a      	lsls	r2, r1, #10
 80072c8:	4610      	mov	r0, r2
 80072ca:	4619      	mov	r1, r3
 80072cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ce:	2200      	movs	r2, #0
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	61fa      	str	r2, [r7, #28]
 80072d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072d8:	f7f9 fc76 	bl	8000bc8 <__aeabi_uldivmod>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4613      	mov	r3, r2
 80072e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072e4:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <HAL_RCC_GetSysClockFreq+0x200>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	0c1b      	lsrs	r3, r3, #16
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	3301      	adds	r3, #1
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80072f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072fe:	e002      	b.n	8007306 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007300:	4b05      	ldr	r3, [pc, #20]	; (8007318 <HAL_RCC_GetSysClockFreq+0x204>)
 8007302:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007308:	4618      	mov	r0, r3
 800730a:	3750      	adds	r7, #80	; 0x50
 800730c:	46bd      	mov	sp, r7
 800730e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007312:	bf00      	nop
 8007314:	40023800 	.word	0x40023800
 8007318:	00f42400 	.word	0x00f42400
 800731c:	007a1200 	.word	0x007a1200

08007320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007320:	b480      	push	{r7}
 8007322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007324:	4b03      	ldr	r3, [pc, #12]	; (8007334 <HAL_RCC_GetHCLKFreq+0x14>)
 8007326:	681b      	ldr	r3, [r3, #0]
}
 8007328:	4618      	mov	r0, r3
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	2000000c 	.word	0x2000000c

08007338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800733c:	f7ff fff0 	bl	8007320 <HAL_RCC_GetHCLKFreq>
 8007340:	4602      	mov	r2, r0
 8007342:	4b05      	ldr	r3, [pc, #20]	; (8007358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	0a9b      	lsrs	r3, r3, #10
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	4903      	ldr	r1, [pc, #12]	; (800735c <HAL_RCC_GetPCLK1Freq+0x24>)
 800734e:	5ccb      	ldrb	r3, [r1, r3]
 8007350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007354:	4618      	mov	r0, r3
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40023800 	.word	0x40023800
 800735c:	08013654 	.word	0x08013654

08007360 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	220f      	movs	r2, #15
 800736e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007370:	4b12      	ldr	r3, [pc, #72]	; (80073bc <HAL_RCC_GetClockConfig+0x5c>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f003 0203 	and.w	r2, r3, #3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800737c:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <HAL_RCC_GetClockConfig+0x5c>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007388:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <HAL_RCC_GetClockConfig+0x5c>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007394:	4b09      	ldr	r3, [pc, #36]	; (80073bc <HAL_RCC_GetClockConfig+0x5c>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	08db      	lsrs	r3, r3, #3
 800739a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80073a2:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <HAL_RCC_GetClockConfig+0x60>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 020f 	and.w	r2, r3, #15
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	601a      	str	r2, [r3, #0]
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40023800 	.word	0x40023800
 80073c0:	40023c00 	.word	0x40023c00

080073c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10b      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d105      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d075      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073f8:	4b91      	ldr	r3, [pc, #580]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073fe:	f7fc fbdd 	bl	8003bbc <HAL_GetTick>
 8007402:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007404:	e008      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007406:	f7fc fbd9 	bl	8003bbc <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d901      	bls.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e189      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007418:	4b8a      	ldr	r3, [pc, #552]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f0      	bne.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d009      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	019a      	lsls	r2, r3, #6
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	071b      	lsls	r3, r3, #28
 800743c:	4981      	ldr	r1, [pc, #516]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800743e:	4313      	orrs	r3, r2
 8007440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01f      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007450:	4b7c      	ldr	r3, [pc, #496]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007456:	0f1b      	lsrs	r3, r3, #28
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	019a      	lsls	r2, r3, #6
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	061b      	lsls	r3, r3, #24
 800746a:	431a      	orrs	r2, r3
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	071b      	lsls	r3, r3, #28
 8007470:	4974      	ldr	r1, [pc, #464]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007478:	4b72      	ldr	r3, [pc, #456]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800747a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800747e:	f023 021f 	bic.w	r2, r3, #31
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	3b01      	subs	r3, #1
 8007488:	496e      	ldr	r1, [pc, #440]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00d      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	019a      	lsls	r2, r3, #6
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	061b      	lsls	r3, r3, #24
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	071b      	lsls	r3, r3, #28
 80074b0:	4964      	ldr	r1, [pc, #400]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074b8:	4b61      	ldr	r3, [pc, #388]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80074ba:	2201      	movs	r2, #1
 80074bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074be:	f7fc fb7d 	bl	8003bbc <HAL_GetTick>
 80074c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074c4:	e008      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074c6:	f7fc fb79 	bl	8003bbc <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e129      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074d8:	4b5a      	ldr	r3, [pc, #360]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0f0      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d105      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d079      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074fc:	4b52      	ldr	r3, [pc, #328]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007502:	f7fc fb5b 	bl	8003bbc <HAL_GetTick>
 8007506:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007508:	e008      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800750a:	f7fc fb57 	bl	8003bbc <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e107      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800751c:	4b49      	ldr	r3, [pc, #292]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007528:	d0ef      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	d020      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007536:	4b43      	ldr	r3, [pc, #268]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753c:	0f1b      	lsrs	r3, r3, #28
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	019a      	lsls	r2, r3, #6
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	061b      	lsls	r3, r3, #24
 8007550:	431a      	orrs	r2, r3
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	071b      	lsls	r3, r3, #28
 8007556:	493b      	ldr	r1, [pc, #236]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800755e:	4b39      	ldr	r3, [pc, #228]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007564:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	3b01      	subs	r3, #1
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	4934      	ldr	r1, [pc, #208]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01e      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007584:	4b2f      	ldr	r3, [pc, #188]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758a:	0e1b      	lsrs	r3, r3, #24
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	019a      	lsls	r2, r3, #6
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	061b      	lsls	r3, r3, #24
 800759c:	431a      	orrs	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	071b      	lsls	r3, r3, #28
 80075a4:	4927      	ldr	r1, [pc, #156]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80075ac:	4b25      	ldr	r3, [pc, #148]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	4922      	ldr	r1, [pc, #136]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075c2:	4b21      	ldr	r3, [pc, #132]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80075c4:	2201      	movs	r2, #1
 80075c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075c8:	f7fc faf8 	bl	8003bbc <HAL_GetTick>
 80075cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075ce:	e008      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80075d0:	f7fc faf4 	bl	8003bbc <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d901      	bls.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e0a4      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075e2:	4b18      	ldr	r3, [pc, #96]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ee:	d1ef      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0320 	and.w	r3, r3, #32
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 808b 	beq.w	8007714 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	4b10      	ldr	r3, [pc, #64]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	4a0f      	ldr	r2, [pc, #60]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760c:	6413      	str	r3, [r2, #64]	; 0x40
 800760e:	4b0d      	ldr	r3, [pc, #52]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800761a:	4b0c      	ldr	r3, [pc, #48]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a0b      	ldr	r2, [pc, #44]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007624:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007626:	f7fc fac9 	bl	8003bbc <HAL_GetTick>
 800762a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800762c:	e010      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800762e:	f7fc fac5 	bl	8003bbc <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d909      	bls.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e075      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007640:	42470068 	.word	0x42470068
 8007644:	40023800 	.word	0x40023800
 8007648:	42470070 	.word	0x42470070
 800764c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007650:	4b38      	ldr	r3, [pc, #224]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0e8      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800765c:	4b36      	ldr	r3, [pc, #216]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800765e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007664:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d02f      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	429a      	cmp	r2, r3
 8007678:	d028      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800767a:	4b2f      	ldr	r3, [pc, #188]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800767c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007682:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007684:	4b2d      	ldr	r3, [pc, #180]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007686:	2201      	movs	r2, #1
 8007688:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800768a:	4b2c      	ldr	r3, [pc, #176]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007690:	4a29      	ldr	r2, [pc, #164]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007696:	4b28      	ldr	r3, [pc, #160]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d114      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80076a2:	f7fc fa8b 	bl	8003bbc <HAL_GetTick>
 80076a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a8:	e00a      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076aa:	f7fc fa87 	bl	8003bbc <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d901      	bls.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e035      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c0:	4b1d      	ldr	r3, [pc, #116]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0ee      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076d8:	d10d      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80076da:	4b17      	ldr	r3, [pc, #92]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ee:	4912      	ldr	r1, [pc, #72]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	608b      	str	r3, [r1, #8]
 80076f4:	e005      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	4a0f      	ldr	r2, [pc, #60]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007700:	6093      	str	r3, [r2, #8]
 8007702:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007704:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800770e:	490a      	ldr	r1, [pc, #40]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007710:	4313      	orrs	r3, r2
 8007712:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0310 	and.w	r3, r3, #16
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007726:	4b06      	ldr	r3, [pc, #24]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007728:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	40007000 	.word	0x40007000
 8007738:	40023800 	.word	0x40023800
 800773c:	42470e40 	.word	0x42470e40
 8007740:	424711e0 	.word	0x424711e0

08007744 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e025      	b.n	80077a4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	d106      	bne.n	8007772 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f81d 	bl	80077ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2202      	movs	r2, #2
 8007776:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3304      	adds	r3, #4
 8007782:	4619      	mov	r1, r3
 8007784:	4610      	mov	r0, r2
 8007786:	f001 fad9 	bl	8008d3c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	461a      	mov	r2, r3
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	f001 fb2e 	bl	8008df6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077d2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d101      	bne.n	80077de <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80077da:	2302      	movs	r3, #2
 80077dc:	e021      	b.n	8007822 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d002      	beq.n	80077ea <HAL_SDRAM_SendCommand+0x2a>
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
 80077e6:	2b05      	cmp	r3, #5
 80077e8:	d118      	bne.n	800781c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2202      	movs	r2, #2
 80077ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f001 fb64 	bl	8008ec8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d104      	bne.n	8007812 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2205      	movs	r2, #5
 800780c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007810:	e006      	b.n	8007820 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800781a:	e001      	b.n	8007820 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b02      	cmp	r3, #2
 800783e:	d101      	bne.n	8007844 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007840:	2302      	movs	r3, #2
 8007842:	e016      	b.n	8007872 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b01      	cmp	r3, #1
 800784e:	d10f      	bne.n	8007870 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	4618      	mov	r0, r3
 8007860:	f001 fb6f 	bl	8008f42 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	e000      	b.n	8007872 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e07b      	b.n	8007984 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	2b00      	cmp	r3, #0
 8007892:	d108      	bne.n	80078a6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800789c:	d009      	beq.n	80078b2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	61da      	str	r2, [r3, #28]
 80078a4:	e005      	b.n	80078b2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d106      	bne.n	80078d2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7f9 ffc3 	bl	8001858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2202      	movs	r2, #2
 80078d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007936:	ea42 0103 	orr.w	r1, r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	0c1b      	lsrs	r3, r3, #16
 8007950:	f003 0104 	and.w	r1, r3, #4
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	f003 0210 	and.w	r2, r3, #16
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	69da      	ldr	r2, [r3, #28]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007972:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e01a      	b.n	80079d4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2202      	movs	r2, #2
 80079a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7f9 ffcc 	bl	8001954 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	4613      	mov	r3, r2
 80079ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <HAL_SPI_Transmit+0x22>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e126      	b.n	8007c4c <HAL_SPI_Transmit+0x270>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a06:	f7fc f8d9 	bl	8003bbc <HAL_GetTick>
 8007a0a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d002      	beq.n	8007a22 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a20:	e10b      	b.n	8007c3a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <HAL_SPI_Transmit+0x52>
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d102      	bne.n	8007a34 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a32:	e102      	b.n	8007c3a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2203      	movs	r2, #3
 8007a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	88fa      	ldrh	r2, [r7, #6]
 8007a4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	88fa      	ldrh	r2, [r7, #6]
 8007a52:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a7a:	d10f      	bne.n	8007a9c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa6:	2b40      	cmp	r3, #64	; 0x40
 8007aa8:	d007      	beq.n	8007aba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ab8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac2:	d14b      	bne.n	8007b5c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <HAL_SPI_Transmit+0xf6>
 8007acc:	8afb      	ldrh	r3, [r7, #22]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d13e      	bne.n	8007b50 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	881a      	ldrh	r2, [r3, #0]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	1c9a      	adds	r2, r3, #2
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	3b01      	subs	r3, #1
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007af6:	e02b      	b.n	8007b50 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d112      	bne.n	8007b2c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0a:	881a      	ldrh	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b16:	1c9a      	adds	r2, r3, #2
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b2a:	e011      	b.n	8007b50 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b2c:	f7fc f846 	bl	8003bbc <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d803      	bhi.n	8007b44 <HAL_SPI_Transmit+0x168>
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b42:	d102      	bne.n	8007b4a <HAL_SPI_Transmit+0x16e>
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b4e:	e074      	b.n	8007c3a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1ce      	bne.n	8007af8 <HAL_SPI_Transmit+0x11c>
 8007b5a:	e04c      	b.n	8007bf6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_SPI_Transmit+0x18e>
 8007b64:	8afb      	ldrh	r3, [r7, #22]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d140      	bne.n	8007bec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	330c      	adds	r3, #12
 8007b74:	7812      	ldrb	r2, [r2, #0]
 8007b76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007b90:	e02c      	b.n	8007bec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d113      	bne.n	8007bc8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	330c      	adds	r3, #12
 8007baa:	7812      	ldrb	r2, [r2, #0]
 8007bac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	86da      	strh	r2, [r3, #54]	; 0x36
 8007bc6:	e011      	b.n	8007bec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bc8:	f7fb fff8 	bl	8003bbc <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d803      	bhi.n	8007be0 <HAL_SPI_Transmit+0x204>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d102      	bne.n	8007be6 <HAL_SPI_Transmit+0x20a>
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d102      	bne.n	8007bec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bea:	e026      	b.n	8007c3a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1cd      	bne.n	8007b92 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fbda 	bl	80083b4 <SPI_EndRxTxTransaction>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c14:	2300      	movs	r3, #0
 8007c16:	613b      	str	r3, [r7, #16]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	613b      	str	r3, [r7, #16]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	77fb      	strb	r3, [r7, #31]
 8007c36:	e000      	b.n	8007c3a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007c38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3720      	adds	r7, #32
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	4613      	mov	r3, r2
 8007c62:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c70:	d112      	bne.n	8007c98 <HAL_SPI_Receive+0x44>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10e      	bne.n	8007c98 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2204      	movs	r2, #4
 8007c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c82:	88fa      	ldrh	r2, [r7, #6]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 f8f1 	bl	8007e76 <HAL_SPI_TransmitReceive>
 8007c94:	4603      	mov	r3, r0
 8007c96:	e0ea      	b.n	8007e6e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <HAL_SPI_Receive+0x52>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	e0e3      	b.n	8007e6e <HAL_SPI_Receive+0x21a>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cae:	f7fb ff85 	bl	8003bbc <HAL_GetTick>
 8007cb2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d002      	beq.n	8007cc6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cc4:	e0ca      	b.n	8007e5c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <HAL_SPI_Receive+0x7e>
 8007ccc:	88fb      	ldrh	r3, [r7, #6]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cd6:	e0c1      	b.n	8007e5c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2204      	movs	r2, #4
 8007cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	88fa      	ldrh	r2, [r7, #6]
 8007cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	88fa      	ldrh	r2, [r7, #6]
 8007cf6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d1e:	d10f      	bne.n	8007d40 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d3e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d007      	beq.n	8007d5e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d162      	bne.n	8007e2c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007d66:	e02e      	b.n	8007dc6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d115      	bne.n	8007da2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f103 020c 	add.w	r2, r3, #12
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	7812      	ldrb	r2, [r2, #0]
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007da0:	e011      	b.n	8007dc6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007da2:	f7fb ff0b 	bl	8003bbc <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d803      	bhi.n	8007dba <HAL_SPI_Receive+0x166>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db8:	d102      	bne.n	8007dc0 <HAL_SPI_Receive+0x16c>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d102      	bne.n	8007dc6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007dc4:	e04a      	b.n	8007e5c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1cb      	bne.n	8007d68 <HAL_SPI_Receive+0x114>
 8007dd0:	e031      	b.n	8007e36 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d113      	bne.n	8007e08 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dea:	b292      	uxth	r2, r2
 8007dec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	1c9a      	adds	r2, r3, #2
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e06:	e011      	b.n	8007e2c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e08:	f7fb fed8 	bl	8003bbc <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d803      	bhi.n	8007e20 <HAL_SPI_Receive+0x1cc>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1e:	d102      	bne.n	8007e26 <HAL_SPI_Receive+0x1d2>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e2a:	e017      	b.n	8007e5c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1cd      	bne.n	8007dd2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fa54 	bl	80082e8 <SPI_EndRxTransaction>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	75fb      	strb	r3, [r7, #23]
 8007e58:	e000      	b.n	8007e5c <HAL_SPI_Receive+0x208>
  }

error :
 8007e5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b08c      	sub	sp, #48	; 0x30
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
 8007e82:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e84:	2301      	movs	r3, #1
 8007e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_SPI_TransmitReceive+0x26>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e18a      	b.n	80081b2 <HAL_SPI_TransmitReceive+0x33c>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ea4:	f7fb fe8a 	bl	8003bbc <HAL_GetTick>
 8007ea8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007eba:	887b      	ldrh	r3, [r7, #2]
 8007ebc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d00f      	beq.n	8007ee6 <HAL_SPI_TransmitReceive+0x70>
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ecc:	d107      	bne.n	8007ede <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d103      	bne.n	8007ede <HAL_SPI_TransmitReceive+0x68>
 8007ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d003      	beq.n	8007ee6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007ede:	2302      	movs	r3, #2
 8007ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ee4:	e15b      	b.n	800819e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <HAL_SPI_TransmitReceive+0x82>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <HAL_SPI_TransmitReceive+0x82>
 8007ef2:	887b      	ldrh	r3, [r7, #2]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d103      	bne.n	8007f00 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007efe:	e14e      	b.n	800819e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d003      	beq.n	8007f14 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2205      	movs	r2, #5
 8007f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	887a      	ldrh	r2, [r7, #2]
 8007f24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	887a      	ldrh	r2, [r7, #2]
 8007f2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	887a      	ldrh	r2, [r7, #2]
 8007f36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	887a      	ldrh	r2, [r7, #2]
 8007f3c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f54:	2b40      	cmp	r3, #64	; 0x40
 8007f56:	d007      	beq.n	8007f68 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f70:	d178      	bne.n	8008064 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <HAL_SPI_TransmitReceive+0x10a>
 8007f7a:	8b7b      	ldrh	r3, [r7, #26]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d166      	bne.n	800804e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f84:	881a      	ldrh	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	1c9a      	adds	r2, r3, #2
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fa4:	e053      	b.n	800804e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d11b      	bne.n	8007fec <HAL_SPI_TransmitReceive+0x176>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d016      	beq.n	8007fec <HAL_SPI_TransmitReceive+0x176>
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d113      	bne.n	8007fec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc8:	881a      	ldrh	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd4:	1c9a      	adds	r2, r3, #2
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d119      	bne.n	800802e <HAL_SPI_TransmitReceive+0x1b8>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	d014      	beq.n	800802e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	b292      	uxth	r2, r2
 8008010:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	1c9a      	adds	r2, r3, #2
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800802a:	2301      	movs	r3, #1
 800802c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800802e:	f7fb fdc5 	bl	8003bbc <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800803a:	429a      	cmp	r2, r3
 800803c:	d807      	bhi.n	800804e <HAL_SPI_TransmitReceive+0x1d8>
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008044:	d003      	beq.n	800804e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800804c:	e0a7      	b.n	800819e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1a6      	bne.n	8007fa6 <HAL_SPI_TransmitReceive+0x130>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805c:	b29b      	uxth	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1a1      	bne.n	8007fa6 <HAL_SPI_TransmitReceive+0x130>
 8008062:	e07c      	b.n	800815e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <HAL_SPI_TransmitReceive+0x1fc>
 800806c:	8b7b      	ldrh	r3, [r7, #26]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d16b      	bne.n	800814a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	330c      	adds	r3, #12
 800807c:	7812      	ldrb	r2, [r2, #0]
 800807e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800808e:	b29b      	uxth	r3, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	b29a      	uxth	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008098:	e057      	b.n	800814a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d11c      	bne.n	80080e2 <HAL_SPI_TransmitReceive+0x26c>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d017      	beq.n	80080e2 <HAL_SPI_TransmitReceive+0x26c>
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d114      	bne.n	80080e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	7812      	ldrb	r2, [r2, #0]
 80080c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d119      	bne.n	8008124 <HAL_SPI_TransmitReceive+0x2ae>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d014      	beq.n	8008124 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68da      	ldr	r2, [r3, #12]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008116:	b29b      	uxth	r3, r3
 8008118:	3b01      	subs	r3, #1
 800811a:	b29a      	uxth	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008120:	2301      	movs	r3, #1
 8008122:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008124:	f7fb fd4a 	bl	8003bbc <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008130:	429a      	cmp	r2, r3
 8008132:	d803      	bhi.n	800813c <HAL_SPI_TransmitReceive+0x2c6>
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813a:	d102      	bne.n	8008142 <HAL_SPI_TransmitReceive+0x2cc>
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	2b00      	cmp	r3, #0
 8008140:	d103      	bne.n	800814a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008148:	e029      	b.n	800819e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1a2      	bne.n	800809a <HAL_SPI_TransmitReceive+0x224>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008158:	b29b      	uxth	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d19d      	bne.n	800809a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800815e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008160:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f926 	bl	80083b4 <SPI_EndRxTxTransaction>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d006      	beq.n	800817c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2220      	movs	r2, #32
 8008178:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800817a:	e010      	b.n	800819e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10b      	bne.n	800819c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008184:	2300      	movs	r3, #0
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	e000      	b.n	800819e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800819c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3730      	adds	r7, #48	; 0x30
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081c8:	b2db      	uxtb	r3, r3
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
	...

080081d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	4613      	mov	r3, r2
 80081e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80081e8:	f7fb fce8 	bl	8003bbc <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	1a9b      	subs	r3, r3, r2
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4413      	add	r3, r2
 80081f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081f8:	f7fb fce0 	bl	8003bbc <HAL_GetTick>
 80081fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80081fe:	4b39      	ldr	r3, [pc, #228]	; (80082e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	015b      	lsls	r3, r3, #5
 8008204:	0d1b      	lsrs	r3, r3, #20
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	fb02 f303 	mul.w	r3, r2, r3
 800820c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800820e:	e054      	b.n	80082ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008216:	d050      	beq.n	80082ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008218:	f7fb fcd0 	bl	8003bbc <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	69fa      	ldr	r2, [r7, #28]
 8008224:	429a      	cmp	r2, r3
 8008226:	d902      	bls.n	800822e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d13d      	bne.n	80082aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800823c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008246:	d111      	bne.n	800826c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008250:	d004      	beq.n	800825c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800825a:	d107      	bne.n	800826c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800826a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008274:	d10f      	bne.n	8008296 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008294:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e017      	b.n	80082da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689a      	ldr	r2, [r3, #8]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	4013      	ands	r3, r2
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	bf0c      	ite	eq
 80082ca:	2301      	moveq	r3, #1
 80082cc:	2300      	movne	r3, #0
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d19b      	bne.n	8008210 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3720      	adds	r7, #32
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	2000000c 	.word	0x2000000c

080082e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082fc:	d111      	bne.n	8008322 <SPI_EndRxTransaction+0x3a>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008306:	d004      	beq.n	8008312 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008310:	d107      	bne.n	8008322 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008320:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800832a:	d12a      	bne.n	8008382 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008334:	d012      	beq.n	800835c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2200      	movs	r2, #0
 800833e:	2180      	movs	r1, #128	; 0x80
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff ff49 	bl	80081d8 <SPI_WaitFlagStateUntilTimeout>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d02d      	beq.n	80083a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008350:	f043 0220 	orr.w	r2, r3, #32
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e026      	b.n	80083aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2200      	movs	r2, #0
 8008364:	2101      	movs	r1, #1
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff ff36 	bl	80081d8 <SPI_WaitFlagStateUntilTimeout>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d01a      	beq.n	80083a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008376:	f043 0220 	orr.w	r2, r3, #32
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e013      	b.n	80083aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2200      	movs	r2, #0
 800838a:	2101      	movs	r1, #1
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f7ff ff23 	bl	80081d8 <SPI_WaitFlagStateUntilTimeout>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d007      	beq.n	80083a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839c:	f043 0220 	orr.w	r2, r3, #32
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e000      	b.n	80083aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
	...

080083b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af02      	add	r7, sp, #8
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80083c0:	4b1b      	ldr	r3, [pc, #108]	; (8008430 <SPI_EndRxTxTransaction+0x7c>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a1b      	ldr	r2, [pc, #108]	; (8008434 <SPI_EndRxTxTransaction+0x80>)
 80083c6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ca:	0d5b      	lsrs	r3, r3, #21
 80083cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083d0:	fb02 f303 	mul.w	r3, r2, r3
 80083d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083de:	d112      	bne.n	8008406 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2200      	movs	r2, #0
 80083e8:	2180      	movs	r1, #128	; 0x80
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff fef4 	bl	80081d8 <SPI_WaitFlagStateUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d016      	beq.n	8008424 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fa:	f043 0220 	orr.w	r2, r3, #32
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e00f      	b.n	8008426 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	3b01      	subs	r3, #1
 8008410:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841c:	2b80      	cmp	r3, #128	; 0x80
 800841e:	d0f2      	beq.n	8008406 <SPI_EndRxTxTransaction+0x52>
 8008420:	e000      	b.n	8008424 <SPI_EndRxTxTransaction+0x70>
        break;
 8008422:	bf00      	nop
  }

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	2000000c 	.word	0x2000000c
 8008434:	165e9f81 	.word	0x165e9f81

08008438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e041      	b.n	80084ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d106      	bne.n	8008464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7f9 faaa 	bl	80019b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2202      	movs	r2, #2
 8008468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	3304      	adds	r3, #4
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f000 fa96 	bl	80089a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d001      	beq.n	80084f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e04e      	b.n	800858e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2202      	movs	r2, #2
 80084f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68da      	ldr	r2, [r3, #12]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f042 0201 	orr.w	r2, r2, #1
 8008506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a23      	ldr	r2, [pc, #140]	; (800859c <HAL_TIM_Base_Start_IT+0xc4>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d022      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0x80>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800851a:	d01d      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0x80>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a1f      	ldr	r2, [pc, #124]	; (80085a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d018      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0x80>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a1e      	ldr	r2, [pc, #120]	; (80085a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d013      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0x80>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a1c      	ldr	r2, [pc, #112]	; (80085a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d00e      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0x80>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a1b      	ldr	r2, [pc, #108]	; (80085ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d009      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0x80>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a19      	ldr	r2, [pc, #100]	; (80085b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d004      	beq.n	8008558 <HAL_TIM_Base_Start_IT+0x80>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a18      	ldr	r2, [pc, #96]	; (80085b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d111      	bne.n	800857c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b06      	cmp	r3, #6
 8008568:	d010      	beq.n	800858c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0201 	orr.w	r2, r2, #1
 8008578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800857a:	e007      	b.n	800858c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0201 	orr.w	r2, r2, #1
 800858a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	40010000 	.word	0x40010000
 80085a0:	40000400 	.word	0x40000400
 80085a4:	40000800 	.word	0x40000800
 80085a8:	40000c00 	.word	0x40000c00
 80085ac:	40010400 	.word	0x40010400
 80085b0:	40014000 	.word	0x40014000
 80085b4:	40001800 	.word	0x40001800

080085b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d122      	bne.n	8008614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d11b      	bne.n	8008614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0202 	mvn.w	r2, #2
 80085e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f9b5 	bl	800896a <HAL_TIM_IC_CaptureCallback>
 8008600:	e005      	b.n	800860e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f9a7 	bl	8008956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f9b8 	bl	800897e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	f003 0304 	and.w	r3, r3, #4
 800861e:	2b04      	cmp	r3, #4
 8008620:	d122      	bne.n	8008668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b04      	cmp	r3, #4
 800862e:	d11b      	bne.n	8008668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f06f 0204 	mvn.w	r2, #4
 8008638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2202      	movs	r2, #2
 800863e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f98b 	bl	800896a <HAL_TIM_IC_CaptureCallback>
 8008654:	e005      	b.n	8008662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f97d 	bl	8008956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f98e 	bl	800897e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	f003 0308 	and.w	r3, r3, #8
 8008672:	2b08      	cmp	r3, #8
 8008674:	d122      	bne.n	80086bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f003 0308 	and.w	r3, r3, #8
 8008680:	2b08      	cmp	r3, #8
 8008682:	d11b      	bne.n	80086bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f06f 0208 	mvn.w	r2, #8
 800868c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2204      	movs	r2, #4
 8008692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f961 	bl	800896a <HAL_TIM_IC_CaptureCallback>
 80086a8:	e005      	b.n	80086b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f953 	bl	8008956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f964 	bl	800897e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	f003 0310 	and.w	r3, r3, #16
 80086c6:	2b10      	cmp	r3, #16
 80086c8:	d122      	bne.n	8008710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b10      	cmp	r3, #16
 80086d6:	d11b      	bne.n	8008710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f06f 0210 	mvn.w	r2, #16
 80086e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2208      	movs	r2, #8
 80086e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f937 	bl	800896a <HAL_TIM_IC_CaptureCallback>
 80086fc:	e005      	b.n	800870a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f929 	bl	8008956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f93a 	bl	800897e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b01      	cmp	r3, #1
 800871c:	d10e      	bne.n	800873c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b01      	cmp	r3, #1
 800872a:	d107      	bne.n	800873c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f06f 0201 	mvn.w	r2, #1
 8008734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7f9 f802 	bl	8001740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008746:	2b80      	cmp	r3, #128	; 0x80
 8008748:	d10e      	bne.n	8008768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008754:	2b80      	cmp	r3, #128	; 0x80
 8008756:	d107      	bne.n	8008768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fae0 	bl	8008d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008772:	2b40      	cmp	r3, #64	; 0x40
 8008774:	d10e      	bne.n	8008794 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008780:	2b40      	cmp	r3, #64	; 0x40
 8008782:	d107      	bne.n	8008794 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800878c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f8ff 	bl	8008992 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b20      	cmp	r3, #32
 80087a0:	d10e      	bne.n	80087c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d107      	bne.n	80087c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f06f 0220 	mvn.w	r2, #32
 80087b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 faaa 	bl	8008d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d101      	bne.n	80087e4 <HAL_TIM_ConfigClockSource+0x1c>
 80087e0:	2302      	movs	r3, #2
 80087e2:	e0b4      	b.n	800894e <HAL_TIM_ConfigClockSource+0x186>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800880a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800881c:	d03e      	beq.n	800889c <HAL_TIM_ConfigClockSource+0xd4>
 800881e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008822:	f200 8087 	bhi.w	8008934 <HAL_TIM_ConfigClockSource+0x16c>
 8008826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800882a:	f000 8086 	beq.w	800893a <HAL_TIM_ConfigClockSource+0x172>
 800882e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008832:	d87f      	bhi.n	8008934 <HAL_TIM_ConfigClockSource+0x16c>
 8008834:	2b70      	cmp	r3, #112	; 0x70
 8008836:	d01a      	beq.n	800886e <HAL_TIM_ConfigClockSource+0xa6>
 8008838:	2b70      	cmp	r3, #112	; 0x70
 800883a:	d87b      	bhi.n	8008934 <HAL_TIM_ConfigClockSource+0x16c>
 800883c:	2b60      	cmp	r3, #96	; 0x60
 800883e:	d050      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x11a>
 8008840:	2b60      	cmp	r3, #96	; 0x60
 8008842:	d877      	bhi.n	8008934 <HAL_TIM_ConfigClockSource+0x16c>
 8008844:	2b50      	cmp	r3, #80	; 0x50
 8008846:	d03c      	beq.n	80088c2 <HAL_TIM_ConfigClockSource+0xfa>
 8008848:	2b50      	cmp	r3, #80	; 0x50
 800884a:	d873      	bhi.n	8008934 <HAL_TIM_ConfigClockSource+0x16c>
 800884c:	2b40      	cmp	r3, #64	; 0x40
 800884e:	d058      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x13a>
 8008850:	2b40      	cmp	r3, #64	; 0x40
 8008852:	d86f      	bhi.n	8008934 <HAL_TIM_ConfigClockSource+0x16c>
 8008854:	2b30      	cmp	r3, #48	; 0x30
 8008856:	d064      	beq.n	8008922 <HAL_TIM_ConfigClockSource+0x15a>
 8008858:	2b30      	cmp	r3, #48	; 0x30
 800885a:	d86b      	bhi.n	8008934 <HAL_TIM_ConfigClockSource+0x16c>
 800885c:	2b20      	cmp	r3, #32
 800885e:	d060      	beq.n	8008922 <HAL_TIM_ConfigClockSource+0x15a>
 8008860:	2b20      	cmp	r3, #32
 8008862:	d867      	bhi.n	8008934 <HAL_TIM_ConfigClockSource+0x16c>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d05c      	beq.n	8008922 <HAL_TIM_ConfigClockSource+0x15a>
 8008868:	2b10      	cmp	r3, #16
 800886a:	d05a      	beq.n	8008922 <HAL_TIM_ConfigClockSource+0x15a>
 800886c:	e062      	b.n	8008934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6899      	ldr	r1, [r3, #8]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	f000 f9ad 	bl	8008bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	609a      	str	r2, [r3, #8]
      break;
 800889a:	e04f      	b.n	800893c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	6899      	ldr	r1, [r3, #8]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	f000 f996 	bl	8008bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689a      	ldr	r2, [r3, #8]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088be:	609a      	str	r2, [r3, #8]
      break;
 80088c0:	e03c      	b.n	800893c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	6859      	ldr	r1, [r3, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	461a      	mov	r2, r3
 80088d0:	f000 f90a 	bl	8008ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2150      	movs	r1, #80	; 0x50
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 f963 	bl	8008ba6 <TIM_ITRx_SetConfig>
      break;
 80088e0:	e02c      	b.n	800893c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6859      	ldr	r1, [r3, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	461a      	mov	r2, r3
 80088f0:	f000 f929 	bl	8008b46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2160      	movs	r1, #96	; 0x60
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 f953 	bl	8008ba6 <TIM_ITRx_SetConfig>
      break;
 8008900:	e01c      	b.n	800893c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6818      	ldr	r0, [r3, #0]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	6859      	ldr	r1, [r3, #4]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	461a      	mov	r2, r3
 8008910:	f000 f8ea 	bl	8008ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2140      	movs	r1, #64	; 0x40
 800891a:	4618      	mov	r0, r3
 800891c:	f000 f943 	bl	8008ba6 <TIM_ITRx_SetConfig>
      break;
 8008920:	e00c      	b.n	800893c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4619      	mov	r1, r3
 800892c:	4610      	mov	r0, r2
 800892e:	f000 f93a 	bl	8008ba6 <TIM_ITRx_SetConfig>
      break;
 8008932:	e003      	b.n	800893c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	73fb      	strb	r3, [r7, #15]
      break;
 8008938:	e000      	b.n	800893c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800893a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800899a:	bf00      	nop
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
	...

080089a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a40      	ldr	r2, [pc, #256]	; (8008abc <TIM_Base_SetConfig+0x114>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d013      	beq.n	80089e8 <TIM_Base_SetConfig+0x40>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c6:	d00f      	beq.n	80089e8 <TIM_Base_SetConfig+0x40>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a3d      	ldr	r2, [pc, #244]	; (8008ac0 <TIM_Base_SetConfig+0x118>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00b      	beq.n	80089e8 <TIM_Base_SetConfig+0x40>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a3c      	ldr	r2, [pc, #240]	; (8008ac4 <TIM_Base_SetConfig+0x11c>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d007      	beq.n	80089e8 <TIM_Base_SetConfig+0x40>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a3b      	ldr	r2, [pc, #236]	; (8008ac8 <TIM_Base_SetConfig+0x120>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d003      	beq.n	80089e8 <TIM_Base_SetConfig+0x40>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a3a      	ldr	r2, [pc, #232]	; (8008acc <TIM_Base_SetConfig+0x124>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d108      	bne.n	80089fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a2f      	ldr	r2, [pc, #188]	; (8008abc <TIM_Base_SetConfig+0x114>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d02b      	beq.n	8008a5a <TIM_Base_SetConfig+0xb2>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a08:	d027      	beq.n	8008a5a <TIM_Base_SetConfig+0xb2>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a2c      	ldr	r2, [pc, #176]	; (8008ac0 <TIM_Base_SetConfig+0x118>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d023      	beq.n	8008a5a <TIM_Base_SetConfig+0xb2>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a2b      	ldr	r2, [pc, #172]	; (8008ac4 <TIM_Base_SetConfig+0x11c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d01f      	beq.n	8008a5a <TIM_Base_SetConfig+0xb2>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a2a      	ldr	r2, [pc, #168]	; (8008ac8 <TIM_Base_SetConfig+0x120>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d01b      	beq.n	8008a5a <TIM_Base_SetConfig+0xb2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a29      	ldr	r2, [pc, #164]	; (8008acc <TIM_Base_SetConfig+0x124>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d017      	beq.n	8008a5a <TIM_Base_SetConfig+0xb2>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a28      	ldr	r2, [pc, #160]	; (8008ad0 <TIM_Base_SetConfig+0x128>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d013      	beq.n	8008a5a <TIM_Base_SetConfig+0xb2>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a27      	ldr	r2, [pc, #156]	; (8008ad4 <TIM_Base_SetConfig+0x12c>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00f      	beq.n	8008a5a <TIM_Base_SetConfig+0xb2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a26      	ldr	r2, [pc, #152]	; (8008ad8 <TIM_Base_SetConfig+0x130>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00b      	beq.n	8008a5a <TIM_Base_SetConfig+0xb2>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a25      	ldr	r2, [pc, #148]	; (8008adc <TIM_Base_SetConfig+0x134>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d007      	beq.n	8008a5a <TIM_Base_SetConfig+0xb2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a24      	ldr	r2, [pc, #144]	; (8008ae0 <TIM_Base_SetConfig+0x138>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d003      	beq.n	8008a5a <TIM_Base_SetConfig+0xb2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a23      	ldr	r2, [pc, #140]	; (8008ae4 <TIM_Base_SetConfig+0x13c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d108      	bne.n	8008a6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a0a      	ldr	r2, [pc, #40]	; (8008abc <TIM_Base_SetConfig+0x114>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d003      	beq.n	8008aa0 <TIM_Base_SetConfig+0xf8>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a0c      	ldr	r2, [pc, #48]	; (8008acc <TIM_Base_SetConfig+0x124>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d103      	bne.n	8008aa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	691a      	ldr	r2, [r3, #16]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	615a      	str	r2, [r3, #20]
}
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	40010000 	.word	0x40010000
 8008ac0:	40000400 	.word	0x40000400
 8008ac4:	40000800 	.word	0x40000800
 8008ac8:	40000c00 	.word	0x40000c00
 8008acc:	40010400 	.word	0x40010400
 8008ad0:	40014000 	.word	0x40014000
 8008ad4:	40014400 	.word	0x40014400
 8008ad8:	40014800 	.word	0x40014800
 8008adc:	40001800 	.word	0x40001800
 8008ae0:	40001c00 	.word	0x40001c00
 8008ae4:	40002000 	.word	0x40002000

08008ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	f023 0201 	bic.w	r2, r3, #1
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	011b      	lsls	r3, r3, #4
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f023 030a 	bic.w	r3, r3, #10
 8008b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	621a      	str	r2, [r3, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b087      	sub	sp, #28
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	f023 0210 	bic.w	r2, r3, #16
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	031b      	lsls	r3, r3, #12
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	621a      	str	r2, [r3, #32]
}
 8008b9a:	bf00      	nop
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b085      	sub	sp, #20
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	f043 0307 	orr.w	r3, r3, #7
 8008bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	609a      	str	r2, [r3, #8]
}
 8008bd0:	bf00      	nop
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	021a      	lsls	r2, r3, #8
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	609a      	str	r2, [r3, #8]
}
 8008c10:	bf00      	nop
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d101      	bne.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c30:	2302      	movs	r3, #2
 8008c32:	e05a      	b.n	8008cea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a21      	ldr	r2, [pc, #132]	; (8008cf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d022      	beq.n	8008cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c80:	d01d      	beq.n	8008cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a1d      	ldr	r2, [pc, #116]	; (8008cfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d018      	beq.n	8008cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a1b      	ldr	r2, [pc, #108]	; (8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d013      	beq.n	8008cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a1a      	ldr	r2, [pc, #104]	; (8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d00e      	beq.n	8008cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a18      	ldr	r2, [pc, #96]	; (8008d08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d009      	beq.n	8008cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a17      	ldr	r2, [pc, #92]	; (8008d0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d004      	beq.n	8008cbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a15      	ldr	r2, [pc, #84]	; (8008d10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d10c      	bne.n	8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	40010000 	.word	0x40010000
 8008cfc:	40000400 	.word	0x40000400
 8008d00:	40000800 	.word	0x40000800
 8008d04:	40000c00 	.word	0x40000c00
 8008d08:	40010400 	.word	0x40010400
 8008d0c:	40014000 	.word	0x40014000
 8008d10:	40001800 	.word	0x40001800

08008d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d123      	bne.n	8008d96 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008d56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	6851      	ldr	r1, [r2, #4]
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	6892      	ldr	r2, [r2, #8]
 8008d62:	4311      	orrs	r1, r2
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	68d2      	ldr	r2, [r2, #12]
 8008d68:	4311      	orrs	r1, r2
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	6912      	ldr	r2, [r2, #16]
 8008d6e:	4311      	orrs	r1, r2
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	6952      	ldr	r2, [r2, #20]
 8008d74:	4311      	orrs	r1, r2
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	6992      	ldr	r2, [r2, #24]
 8008d7a:	4311      	orrs	r1, r2
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	69d2      	ldr	r2, [r2, #28]
 8008d80:	4311      	orrs	r1, r2
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	6a12      	ldr	r2, [r2, #32]
 8008d86:	4311      	orrs	r1, r2
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	e028      	b.n	8008de8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	69d9      	ldr	r1, [r3, #28]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	4319      	orrs	r1, r3
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	430b      	orrs	r3, r1
 8008dae:	431a      	orrs	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008dbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	6851      	ldr	r1, [r2, #4]
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	6892      	ldr	r2, [r2, #8]
 8008dc8:	4311      	orrs	r1, r2
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	68d2      	ldr	r2, [r2, #12]
 8008dce:	4311      	orrs	r1, r2
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	6912      	ldr	r2, [r2, #16]
 8008dd4:	4311      	orrs	r1, r2
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	6952      	ldr	r2, [r2, #20]
 8008dda:	4311      	orrs	r1, r2
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	6992      	ldr	r2, [r2, #24]
 8008de0:	430a      	orrs	r2, r1
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b085      	sub	sp, #20
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d128      	bne.n	8008e5a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	1e59      	subs	r1, r3, #1
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	011b      	lsls	r3, r3, #4
 8008e1e:	4319      	orrs	r1, r3
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	021b      	lsls	r3, r3, #8
 8008e28:	4319      	orrs	r1, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	031b      	lsls	r3, r3, #12
 8008e32:	4319      	orrs	r1, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	041b      	lsls	r3, r3, #16
 8008e3c:	4319      	orrs	r1, r3
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	051b      	lsls	r3, r3, #20
 8008e46:	4319      	orrs	r1, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	061b      	lsls	r3, r3, #24
 8008e50:	430b      	orrs	r3, r1
 8008e52:	431a      	orrs	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	609a      	str	r2, [r3, #8]
 8008e58:	e02f      	b.n	8008eba <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	68d2      	ldr	r2, [r2, #12]
 8008e6a:	3a01      	subs	r2, #1
 8008e6c:	0311      	lsls	r1, r2, #12
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	6952      	ldr	r2, [r2, #20]
 8008e72:	3a01      	subs	r2, #1
 8008e74:	0512      	lsls	r2, r2, #20
 8008e76:	430a      	orrs	r2, r1
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	1e59      	subs	r1, r3, #1
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	4319      	orrs	r1, r3
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	021b      	lsls	r3, r3, #8
 8008e9e:	4319      	orrs	r1, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	041b      	lsls	r3, r3, #16
 8008ea8:	4319      	orrs	r1, r3
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	061b      	lsls	r3, r3, #24
 8008eb2:	430b      	orrs	r3, r1
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	0d9b      	lsrs	r3, r3, #22
 8008ede:	059b      	lsls	r3, r3, #22
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	6811      	ldr	r1, [r2, #0]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	6852      	ldr	r2, [r2, #4]
 8008ee8:	4311      	orrs	r1, r2
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	6892      	ldr	r2, [r2, #8]
 8008eee:	3a01      	subs	r2, #1
 8008ef0:	0152      	lsls	r2, r2, #5
 8008ef2:	4311      	orrs	r1, r2
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	68d2      	ldr	r2, [r2, #12]
 8008ef8:	0252      	lsls	r2, r2, #9
 8008efa:	430a      	orrs	r2, r1
 8008efc:	431a      	orrs	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008f02:	f7fa fe5b 	bl	8003bbc <HAL_GetTick>
 8008f06:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008f08:	e010      	b.n	8008f2c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f10:	d00c      	beq.n	8008f2c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d007      	beq.n	8008f28 <FMC_SDRAM_SendCommand+0x60>
 8008f18:	f7fa fe50 	bl	8003bbc <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d201      	bcs.n	8008f2c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e006      	b.n	8008f3a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d0e8      	beq.n	8008f0a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008f54:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	0052      	lsls	r2, r2, #1
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f70:	b084      	sub	sp, #16
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	f107 001c 	add.w	r0, r7, #28
 8008f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d122      	bne.n	8008fce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d105      	bne.n	8008fc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f001 fbee 	bl	800a7a4 <USB_CoreReset>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]
 8008fcc:	e01a      	b.n	8009004 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 fbe2 	bl	800a7a4 <USB_CoreReset>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d106      	bne.n	8008ff8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8008ff6:	e005      	b.n	8009004 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	2b01      	cmp	r3, #1
 8009008:	d10b      	bne.n	8009022 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f043 0206 	orr.w	r2, r3, #6
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f043 0220 	orr.w	r2, r3, #32
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800902e:	b004      	add	sp, #16
 8009030:	4770      	bx	lr
	...

08009034 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	4613      	mov	r3, r2
 8009040:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d165      	bne.n	8009114 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	4a41      	ldr	r2, [pc, #260]	; (8009150 <USB_SetTurnaroundTime+0x11c>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d906      	bls.n	800905e <USB_SetTurnaroundTime+0x2a>
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	4a40      	ldr	r2, [pc, #256]	; (8009154 <USB_SetTurnaroundTime+0x120>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d202      	bcs.n	800905e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009058:	230f      	movs	r3, #15
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	e062      	b.n	8009124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	4a3c      	ldr	r2, [pc, #240]	; (8009154 <USB_SetTurnaroundTime+0x120>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d306      	bcc.n	8009074 <USB_SetTurnaroundTime+0x40>
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	4a3b      	ldr	r2, [pc, #236]	; (8009158 <USB_SetTurnaroundTime+0x124>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d202      	bcs.n	8009074 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800906e:	230e      	movs	r3, #14
 8009070:	617b      	str	r3, [r7, #20]
 8009072:	e057      	b.n	8009124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	4a38      	ldr	r2, [pc, #224]	; (8009158 <USB_SetTurnaroundTime+0x124>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d306      	bcc.n	800908a <USB_SetTurnaroundTime+0x56>
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	4a37      	ldr	r2, [pc, #220]	; (800915c <USB_SetTurnaroundTime+0x128>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d202      	bcs.n	800908a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009084:	230d      	movs	r3, #13
 8009086:	617b      	str	r3, [r7, #20]
 8009088:	e04c      	b.n	8009124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	4a33      	ldr	r2, [pc, #204]	; (800915c <USB_SetTurnaroundTime+0x128>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d306      	bcc.n	80090a0 <USB_SetTurnaroundTime+0x6c>
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	4a32      	ldr	r2, [pc, #200]	; (8009160 <USB_SetTurnaroundTime+0x12c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d802      	bhi.n	80090a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800909a:	230c      	movs	r3, #12
 800909c:	617b      	str	r3, [r7, #20]
 800909e:	e041      	b.n	8009124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	4a2f      	ldr	r2, [pc, #188]	; (8009160 <USB_SetTurnaroundTime+0x12c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d906      	bls.n	80090b6 <USB_SetTurnaroundTime+0x82>
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	4a2e      	ldr	r2, [pc, #184]	; (8009164 <USB_SetTurnaroundTime+0x130>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d802      	bhi.n	80090b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80090b0:	230b      	movs	r3, #11
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	e036      	b.n	8009124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	4a2a      	ldr	r2, [pc, #168]	; (8009164 <USB_SetTurnaroundTime+0x130>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d906      	bls.n	80090cc <USB_SetTurnaroundTime+0x98>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	4a29      	ldr	r2, [pc, #164]	; (8009168 <USB_SetTurnaroundTime+0x134>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d802      	bhi.n	80090cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80090c6:	230a      	movs	r3, #10
 80090c8:	617b      	str	r3, [r7, #20]
 80090ca:	e02b      	b.n	8009124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4a26      	ldr	r2, [pc, #152]	; (8009168 <USB_SetTurnaroundTime+0x134>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d906      	bls.n	80090e2 <USB_SetTurnaroundTime+0xae>
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4a25      	ldr	r2, [pc, #148]	; (800916c <USB_SetTurnaroundTime+0x138>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d202      	bcs.n	80090e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80090dc:	2309      	movs	r3, #9
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	e020      	b.n	8009124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4a21      	ldr	r2, [pc, #132]	; (800916c <USB_SetTurnaroundTime+0x138>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d306      	bcc.n	80090f8 <USB_SetTurnaroundTime+0xc4>
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	4a20      	ldr	r2, [pc, #128]	; (8009170 <USB_SetTurnaroundTime+0x13c>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d802      	bhi.n	80090f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80090f2:	2308      	movs	r3, #8
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	e015      	b.n	8009124 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4a1d      	ldr	r2, [pc, #116]	; (8009170 <USB_SetTurnaroundTime+0x13c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d906      	bls.n	800910e <USB_SetTurnaroundTime+0xda>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	4a1c      	ldr	r2, [pc, #112]	; (8009174 <USB_SetTurnaroundTime+0x140>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d202      	bcs.n	800910e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009108:	2307      	movs	r3, #7
 800910a:	617b      	str	r3, [r7, #20]
 800910c:	e00a      	b.n	8009124 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800910e:	2306      	movs	r3, #6
 8009110:	617b      	str	r3, [r7, #20]
 8009112:	e007      	b.n	8009124 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800911a:	2309      	movs	r3, #9
 800911c:	617b      	str	r3, [r7, #20]
 800911e:	e001      	b.n	8009124 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009120:	2309      	movs	r3, #9
 8009122:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	68da      	ldr	r2, [r3, #12]
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	029b      	lsls	r3, r3, #10
 8009138:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800913c:	431a      	orrs	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	371c      	adds	r7, #28
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	00d8acbf 	.word	0x00d8acbf
 8009154:	00e4e1c0 	.word	0x00e4e1c0
 8009158:	00f42400 	.word	0x00f42400
 800915c:	01067380 	.word	0x01067380
 8009160:	011a499f 	.word	0x011a499f
 8009164:	01312cff 	.word	0x01312cff
 8009168:	014ca43f 	.word	0x014ca43f
 800916c:	016e3600 	.word	0x016e3600
 8009170:	01a6ab1f 	.word	0x01a6ab1f
 8009174:	01e84800 	.word	0x01e84800

08009178 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f043 0201 	orr.w	r2, r3, #1
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f023 0201 	bic.w	r2, r3, #1
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d115      	bne.n	800920a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091ea:	2001      	movs	r0, #1
 80091ec:	f7fa fcf2 	bl	8003bd4 <HAL_Delay>
      ms++;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3301      	adds	r3, #1
 80091f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 fa45 	bl	800a686 <USB_GetMode>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d01e      	beq.n	8009240 <USB_SetCurrentMode+0x84>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b31      	cmp	r3, #49	; 0x31
 8009206:	d9f0      	bls.n	80091ea <USB_SetCurrentMode+0x2e>
 8009208:	e01a      	b.n	8009240 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800920a:	78fb      	ldrb	r3, [r7, #3]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d115      	bne.n	800923c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800921c:	2001      	movs	r0, #1
 800921e:	f7fa fcd9 	bl	8003bd4 <HAL_Delay>
      ms++;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 fa2c 	bl	800a686 <USB_GetMode>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d005      	beq.n	8009240 <USB_SetCurrentMode+0x84>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b31      	cmp	r3, #49	; 0x31
 8009238:	d9f0      	bls.n	800921c <USB_SetCurrentMode+0x60>
 800923a:	e001      	b.n	8009240 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e005      	b.n	800924c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b32      	cmp	r3, #50	; 0x32
 8009244:	d101      	bne.n	800924a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e000      	b.n	800924c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009254:	b084      	sub	sp, #16
 8009256:	b580      	push	{r7, lr}
 8009258:	b086      	sub	sp, #24
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800926e:	2300      	movs	r3, #0
 8009270:	613b      	str	r3, [r7, #16]
 8009272:	e009      	b.n	8009288 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	3340      	adds	r3, #64	; 0x40
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	2200      	movs	r2, #0
 8009280:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	3301      	adds	r3, #1
 8009286:	613b      	str	r3, [r7, #16]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	2b0e      	cmp	r3, #14
 800928c:	d9f2      	bls.n	8009274 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800928e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009290:	2b00      	cmp	r3, #0
 8009292:	d11c      	bne.n	80092ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092a2:	f043 0302 	orr.w	r3, r3, #2
 80092a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38
 80092cc:	e00b      	b.n	80092e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092ec:	461a      	mov	r2, r3
 80092ee:	2300      	movs	r3, #0
 80092f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f8:	4619      	mov	r1, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009300:	461a      	mov	r2, r3
 8009302:	680b      	ldr	r3, [r1, #0]
 8009304:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	2b01      	cmp	r3, #1
 800930a:	d10c      	bne.n	8009326 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800930c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d104      	bne.n	800931c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009312:	2100      	movs	r1, #0
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f965 	bl	80095e4 <USB_SetDevSpeed>
 800931a:	e008      	b.n	800932e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800931c:	2101      	movs	r1, #1
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f960 	bl	80095e4 <USB_SetDevSpeed>
 8009324:	e003      	b.n	800932e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009326:	2103      	movs	r1, #3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f95b 	bl	80095e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800932e:	2110      	movs	r1, #16
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f8f3 	bl	800951c <USB_FlushTxFifo>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f91f 	bl	8009584 <USB_FlushRxFifo>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009356:	461a      	mov	r2, r3
 8009358:	2300      	movs	r3, #0
 800935a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009362:	461a      	mov	r2, r3
 8009364:	2300      	movs	r3, #0
 8009366:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936e:	461a      	mov	r2, r3
 8009370:	2300      	movs	r3, #0
 8009372:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009374:	2300      	movs	r3, #0
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	e043      	b.n	8009402 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	015a      	lsls	r2, r3, #5
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	4413      	add	r3, r2
 8009382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800938c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009390:	d118      	bne.n	80093c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10a      	bne.n	80093ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a4:	461a      	mov	r2, r3
 80093a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	e013      	b.n	80093d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ba:	461a      	mov	r2, r3
 80093bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	e008      	b.n	80093d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d0:	461a      	mov	r2, r3
 80093d2:	2300      	movs	r3, #0
 80093d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e2:	461a      	mov	r2, r3
 80093e4:	2300      	movs	r3, #0
 80093e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f4:	461a      	mov	r2, r3
 80093f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	3301      	adds	r3, #1
 8009400:	613b      	str	r3, [r7, #16]
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	429a      	cmp	r2, r3
 8009408:	d3b7      	bcc.n	800937a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800940a:	2300      	movs	r3, #0
 800940c:	613b      	str	r3, [r7, #16]
 800940e:	e043      	b.n	8009498 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009426:	d118      	bne.n	800945a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10a      	bne.n	8009444 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943a:	461a      	mov	r2, r3
 800943c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009440:	6013      	str	r3, [r2, #0]
 8009442:	e013      	b.n	800946c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009450:	461a      	mov	r2, r3
 8009452:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	e008      	b.n	800946c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009466:	461a      	mov	r2, r3
 8009468:	2300      	movs	r3, #0
 800946a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009478:	461a      	mov	r2, r3
 800947a:	2300      	movs	r3, #0
 800947c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948a:	461a      	mov	r2, r3
 800948c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009490:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	3301      	adds	r3, #1
 8009496:	613b      	str	r3, [r7, #16]
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	429a      	cmp	r2, r3
 800949e:	d3b7      	bcc.n	8009410 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d105      	bne.n	80094d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	f043 0210 	orr.w	r2, r3, #16
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	699a      	ldr	r2, [r3, #24]
 80094d8:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <USB_DevInit+0x2c4>)
 80094da:	4313      	orrs	r3, r2
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d005      	beq.n	80094f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	f043 0208 	orr.w	r2, r3, #8
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d107      	bne.n	8009508 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009500:	f043 0304 	orr.w	r3, r3, #4
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009508:	7dfb      	ldrb	r3, [r7, #23]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009514:	b004      	add	sp, #16
 8009516:	4770      	bx	lr
 8009518:	803c3800 	.word	0x803c3800

0800951c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3301      	adds	r3, #1
 800952e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4a13      	ldr	r2, [pc, #76]	; (8009580 <USB_FlushTxFifo+0x64>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d901      	bls.n	800953c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e01b      	b.n	8009574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	daf2      	bge.n	800952a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	019b      	lsls	r3, r3, #6
 800954c:	f043 0220 	orr.w	r2, r3, #32
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3301      	adds	r3, #1
 8009558:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4a08      	ldr	r2, [pc, #32]	; (8009580 <USB_FlushTxFifo+0x64>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d901      	bls.n	8009566 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e006      	b.n	8009574 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b20      	cmp	r3, #32
 8009570:	d0f0      	beq.n	8009554 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	00030d40 	.word	0x00030d40

08009584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3301      	adds	r3, #1
 8009594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4a11      	ldr	r2, [pc, #68]	; (80095e0 <USB_FlushRxFifo+0x5c>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d901      	bls.n	80095a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e018      	b.n	80095d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	daf2      	bge.n	8009590 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2210      	movs	r2, #16
 80095b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3301      	adds	r3, #1
 80095b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4a08      	ldr	r2, [pc, #32]	; (80095e0 <USB_FlushRxFifo+0x5c>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d901      	bls.n	80095c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e006      	b.n	80095d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f003 0310 	and.w	r3, r3, #16
 80095ce:	2b10      	cmp	r3, #16
 80095d0:	d0f0      	beq.n	80095b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	00030d40 	.word	0x00030d40

080095e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	68f9      	ldr	r1, [r7, #12]
 8009600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009604:	4313      	orrs	r3, r2
 8009606:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009616:	b480      	push	{r7}
 8009618:	b087      	sub	sp, #28
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f003 0306 	and.w	r3, r3, #6
 800962e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d102      	bne.n	800963c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009636:	2300      	movs	r3, #0
 8009638:	75fb      	strb	r3, [r7, #23]
 800963a:	e00a      	b.n	8009652 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b02      	cmp	r3, #2
 8009640:	d002      	beq.n	8009648 <USB_GetDevSpeed+0x32>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2b06      	cmp	r3, #6
 8009646:	d102      	bne.n	800964e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009648:	2302      	movs	r3, #2
 800964a:	75fb      	strb	r3, [r7, #23]
 800964c:	e001      	b.n	8009652 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800964e:	230f      	movs	r3, #15
 8009650:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
}
 8009654:	4618      	mov	r0, r3
 8009656:	371c      	adds	r7, #28
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	785b      	ldrb	r3, [r3, #1]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d13a      	bne.n	80096f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009682:	69da      	ldr	r2, [r3, #28]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	f003 030f 	and.w	r3, r3, #15
 800968c:	2101      	movs	r1, #1
 800968e:	fa01 f303 	lsl.w	r3, r1, r3
 8009692:	b29b      	uxth	r3, r3
 8009694:	68f9      	ldr	r1, [r7, #12]
 8009696:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800969a:	4313      	orrs	r3, r2
 800969c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d155      	bne.n	8009760 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	791b      	ldrb	r3, [r3, #4]
 80096ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	059b      	lsls	r3, r3, #22
 80096d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096d8:	4313      	orrs	r3, r2
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	0151      	lsls	r1, r2, #5
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	440a      	add	r2, r1
 80096e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	e036      	b.n	8009760 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f8:	69da      	ldr	r2, [r3, #28]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	f003 030f 	and.w	r3, r3, #15
 8009702:	2101      	movs	r1, #1
 8009704:	fa01 f303 	lsl.w	r3, r1, r3
 8009708:	041b      	lsls	r3, r3, #16
 800970a:	68f9      	ldr	r1, [r7, #12]
 800970c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009710:	4313      	orrs	r3, r2
 8009712:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d11a      	bne.n	8009760 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	015a      	lsls	r2, r3, #5
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	4413      	add	r3, r2
 8009732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	791b      	ldrb	r3, [r3, #4]
 8009744:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009746:	430b      	orrs	r3, r1
 8009748:	4313      	orrs	r3, r2
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	0151      	lsls	r1, r2, #5
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	440a      	add	r2, r1
 8009752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800975a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800975e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
	...

08009770 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	785b      	ldrb	r3, [r3, #1]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d161      	bne.n	8009850 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800979e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097a2:	d11f      	bne.n	80097e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	0151      	lsls	r1, r2, #5
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	440a      	add	r2, r1
 80097ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	0151      	lsls	r1, r2, #5
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	440a      	add	r2, r1
 80097da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	f003 030f 	and.w	r3, r3, #15
 80097f4:	2101      	movs	r1, #1
 80097f6:	fa01 f303 	lsl.w	r3, r1, r3
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	43db      	mvns	r3, r3
 80097fe:	68f9      	ldr	r1, [r7, #12]
 8009800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009804:	4013      	ands	r3, r2
 8009806:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	69da      	ldr	r2, [r3, #28]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	2101      	movs	r1, #1
 800981a:	fa01 f303 	lsl.w	r3, r1, r3
 800981e:	b29b      	uxth	r3, r3
 8009820:	43db      	mvns	r3, r3
 8009822:	68f9      	ldr	r1, [r7, #12]
 8009824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009828:	4013      	ands	r3, r2
 800982a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	0159      	lsls	r1, r3, #5
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	440b      	add	r3, r1
 8009842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009846:	4619      	mov	r1, r3
 8009848:	4b35      	ldr	r3, [pc, #212]	; (8009920 <USB_DeactivateEndpoint+0x1b0>)
 800984a:	4013      	ands	r3, r2
 800984c:	600b      	str	r3, [r1, #0]
 800984e:	e060      	b.n	8009912 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009866:	d11f      	bne.n	80098a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	0151      	lsls	r1, r2, #5
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	440a      	add	r2, r1
 800987e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009886:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	015a      	lsls	r2, r3, #5
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4413      	add	r3, r2
 8009890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	0151      	lsls	r1, r2, #5
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	440a      	add	r2, r1
 800989e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	f003 030f 	and.w	r3, r3, #15
 80098b8:	2101      	movs	r1, #1
 80098ba:	fa01 f303 	lsl.w	r3, r1, r3
 80098be:	041b      	lsls	r3, r3, #16
 80098c0:	43db      	mvns	r3, r3
 80098c2:	68f9      	ldr	r1, [r7, #12]
 80098c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098c8:	4013      	ands	r3, r2
 80098ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d2:	69da      	ldr	r2, [r3, #28]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	f003 030f 	and.w	r3, r3, #15
 80098dc:	2101      	movs	r1, #1
 80098de:	fa01 f303 	lsl.w	r3, r1, r3
 80098e2:	041b      	lsls	r3, r3, #16
 80098e4:	43db      	mvns	r3, r3
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098ec:	4013      	ands	r3, r2
 80098ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	0159      	lsls	r1, r3, #5
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	440b      	add	r3, r1
 8009906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990a:	4619      	mov	r1, r3
 800990c:	4b05      	ldr	r3, [pc, #20]	; (8009924 <USB_DeactivateEndpoint+0x1b4>)
 800990e:	4013      	ands	r3, r2
 8009910:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	ec337800 	.word	0xec337800
 8009924:	eff37800 	.word	0xeff37800

08009928 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08a      	sub	sp, #40	; 0x28
 800992c:	af02      	add	r7, sp, #8
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	4613      	mov	r3, r2
 8009934:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	785b      	ldrb	r3, [r3, #1]
 8009944:	2b01      	cmp	r3, #1
 8009946:	f040 815c 	bne.w	8009c02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d132      	bne.n	80099b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	4413      	add	r3, r2
 800995a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	0151      	lsls	r1, r2, #5
 8009964:	69fa      	ldr	r2, [r7, #28]
 8009966:	440a      	add	r2, r1
 8009968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800996c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009970:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009974:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	69ba      	ldr	r2, [r7, #24]
 8009986:	0151      	lsls	r1, r2, #5
 8009988:	69fa      	ldr	r2, [r7, #28]
 800998a:	440a      	add	r2, r1
 800998c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009994:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	015a      	lsls	r2, r3, #5
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	4413      	add	r3, r2
 800999e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	69ba      	ldr	r2, [r7, #24]
 80099a6:	0151      	lsls	r1, r2, #5
 80099a8:	69fa      	ldr	r2, [r7, #28]
 80099aa:	440a      	add	r2, r1
 80099ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099b0:	0cdb      	lsrs	r3, r3, #19
 80099b2:	04db      	lsls	r3, r3, #19
 80099b4:	6113      	str	r3, [r2, #16]
 80099b6:	e074      	b.n	8009aa2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	0151      	lsls	r1, r2, #5
 80099ca:	69fa      	ldr	r2, [r7, #28]
 80099cc:	440a      	add	r2, r1
 80099ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d2:	0cdb      	lsrs	r3, r3, #19
 80099d4:	04db      	lsls	r3, r3, #19
 80099d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	015a      	lsls	r2, r3, #5
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	4413      	add	r3, r2
 80099e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	69ba      	ldr	r2, [r7, #24]
 80099e8:	0151      	lsls	r1, r2, #5
 80099ea:	69fa      	ldr	r2, [r7, #28]
 80099ec:	440a      	add	r2, r1
 80099ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a08:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	6999      	ldr	r1, [r3, #24]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	440b      	add	r3, r1
 8009a14:	1e59      	subs	r1, r3, #1
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a1e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a20:	4b9d      	ldr	r3, [pc, #628]	; (8009c98 <USB_EPStartXfer+0x370>)
 8009a22:	400b      	ands	r3, r1
 8009a24:	69b9      	ldr	r1, [r7, #24]
 8009a26:	0148      	lsls	r0, r1, #5
 8009a28:	69f9      	ldr	r1, [r7, #28]
 8009a2a:	4401      	add	r1, r0
 8009a2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a30:	4313      	orrs	r3, r2
 8009a32:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	015a      	lsls	r2, r3, #5
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a40:	691a      	ldr	r2, [r3, #16]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a4a:	69b9      	ldr	r1, [r7, #24]
 8009a4c:	0148      	lsls	r0, r1, #5
 8009a4e:	69f9      	ldr	r1, [r7, #28]
 8009a50:	4401      	add	r1, r0
 8009a52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a56:	4313      	orrs	r3, r2
 8009a58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	791b      	ldrb	r3, [r3, #4]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d11f      	bne.n	8009aa2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	0151      	lsls	r1, r2, #5
 8009a74:	69fa      	ldr	r2, [r7, #28]
 8009a76:	440a      	add	r2, r1
 8009a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	0151      	lsls	r1, r2, #5
 8009a94:	69fa      	ldr	r2, [r7, #28]
 8009a96:	440a      	add	r2, r1
 8009a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009aa0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d14b      	bne.n	8009b40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d009      	beq.n	8009ac4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009abc:	461a      	mov	r2, r3
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	791b      	ldrb	r3, [r3, #4]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d128      	bne.n	8009b1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d110      	bne.n	8009afe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69ba      	ldr	r2, [r7, #24]
 8009aec:	0151      	lsls	r1, r2, #5
 8009aee:	69fa      	ldr	r2, [r7, #28]
 8009af0:	440a      	add	r2, r1
 8009af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	e00f      	b.n	8009b1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	0151      	lsls	r1, r2, #5
 8009b10:	69fa      	ldr	r2, [r7, #28]
 8009b12:	440a      	add	r2, r1
 8009b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	0151      	lsls	r1, r2, #5
 8009b30:	69fa      	ldr	r2, [r7, #28]
 8009b32:	440a      	add	r2, r1
 8009b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b3c:	6013      	str	r3, [r2, #0]
 8009b3e:	e133      	b.n	8009da8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	015a      	lsls	r2, r3, #5
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	4413      	add	r3, r2
 8009b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	0151      	lsls	r1, r2, #5
 8009b52:	69fa      	ldr	r2, [r7, #28]
 8009b54:	440a      	add	r2, r1
 8009b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	791b      	ldrb	r3, [r3, #4]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d015      	beq.n	8009b94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 811b 	beq.w	8009da8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	f003 030f 	and.w	r3, r3, #15
 8009b82:	2101      	movs	r1, #1
 8009b84:	fa01 f303 	lsl.w	r3, r1, r3
 8009b88:	69f9      	ldr	r1, [r7, #28]
 8009b8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	634b      	str	r3, [r1, #52]	; 0x34
 8009b92:	e109      	b.n	8009da8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d110      	bne.n	8009bc6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	015a      	lsls	r2, r3, #5
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	4413      	add	r3, r2
 8009bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	0151      	lsls	r1, r2, #5
 8009bb6:	69fa      	ldr	r2, [r7, #28]
 8009bb8:	440a      	add	r2, r1
 8009bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bc2:	6013      	str	r3, [r2, #0]
 8009bc4:	e00f      	b.n	8009be6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	015a      	lsls	r2, r3, #5
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	4413      	add	r3, r2
 8009bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	0151      	lsls	r1, r2, #5
 8009bd8:	69fa      	ldr	r2, [r7, #28]
 8009bda:	440a      	add	r2, r1
 8009bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009be4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	6919      	ldr	r1, [r3, #16]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	781a      	ldrb	r2, [r3, #0]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	b298      	uxth	r0, r3
 8009bf4:	79fb      	ldrb	r3, [r7, #7]
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f000 fade 	bl	800a1bc <USB_WritePacket>
 8009c00:	e0d2      	b.n	8009da8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	0151      	lsls	r1, r2, #5
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	440a      	add	r2, r1
 8009c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c1c:	0cdb      	lsrs	r3, r3, #19
 8009c1e:	04db      	lsls	r3, r3, #19
 8009c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	69ba      	ldr	r2, [r7, #24]
 8009c32:	0151      	lsls	r1, r2, #5
 8009c34:	69fa      	ldr	r2, [r7, #28]
 8009c36:	440a      	add	r2, r1
 8009c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d126      	bne.n	8009c9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	015a      	lsls	r2, r3, #5
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5a:	691a      	ldr	r2, [r3, #16]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c64:	69b9      	ldr	r1, [r7, #24]
 8009c66:	0148      	lsls	r0, r1, #5
 8009c68:	69f9      	ldr	r1, [r7, #28]
 8009c6a:	4401      	add	r1, r0
 8009c6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c70:	4313      	orrs	r3, r2
 8009c72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	69ba      	ldr	r2, [r7, #24]
 8009c84:	0151      	lsls	r1, r2, #5
 8009c86:	69fa      	ldr	r2, [r7, #28]
 8009c88:	440a      	add	r2, r1
 8009c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c92:	6113      	str	r3, [r2, #16]
 8009c94:	e03a      	b.n	8009d0c <USB_EPStartXfer+0x3e4>
 8009c96:	bf00      	nop
 8009c98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	699a      	ldr	r2, [r3, #24]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	1e5a      	subs	r2, r3, #1
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	8afa      	ldrh	r2, [r7, #22]
 8009cb8:	fb03 f202 	mul.w	r2, r3, r2
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ccc:	691a      	ldr	r2, [r3, #16]
 8009cce:	8afb      	ldrh	r3, [r7, #22]
 8009cd0:	04d9      	lsls	r1, r3, #19
 8009cd2:	4b38      	ldr	r3, [pc, #224]	; (8009db4 <USB_EPStartXfer+0x48c>)
 8009cd4:	400b      	ands	r3, r1
 8009cd6:	69b9      	ldr	r1, [r7, #24]
 8009cd8:	0148      	lsls	r0, r1, #5
 8009cda:	69f9      	ldr	r1, [r7, #28]
 8009cdc:	4401      	add	r1, r0
 8009cde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf2:	691a      	ldr	r2, [r3, #16]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	69db      	ldr	r3, [r3, #28]
 8009cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cfc:	69b9      	ldr	r1, [r7, #24]
 8009cfe:	0148      	lsls	r0, r1, #5
 8009d00:	69f9      	ldr	r1, [r7, #28]
 8009d02:	4401      	add	r1, r0
 8009d04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d0c:	79fb      	ldrb	r3, [r7, #7]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d10d      	bne.n	8009d2e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d009      	beq.n	8009d2e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	6919      	ldr	r1, [r3, #16]
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	015a      	lsls	r2, r3, #5
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	4413      	add	r3, r2
 8009d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2a:	460a      	mov	r2, r1
 8009d2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	791b      	ldrb	r3, [r3, #4]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d128      	bne.n	8009d88 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d110      	bne.n	8009d68 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	015a      	lsls	r2, r3, #5
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	0151      	lsls	r1, r2, #5
 8009d58:	69fa      	ldr	r2, [r7, #28]
 8009d5a:	440a      	add	r2, r1
 8009d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d64:	6013      	str	r3, [r2, #0]
 8009d66:	e00f      	b.n	8009d88 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	69fa      	ldr	r2, [r7, #28]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	69ba      	ldr	r2, [r7, #24]
 8009d98:	0151      	lsls	r1, r2, #5
 8009d9a:	69fa      	ldr	r2, [r7, #28]
 8009d9c:	440a      	add	r2, r1
 8009d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009da2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009da6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3720      	adds	r7, #32
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	1ff80000 	.word	0x1ff80000

08009db8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	785b      	ldrb	r3, [r3, #1]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	f040 80ce 	bne.w	8009f76 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d132      	bne.n	8009e48 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	0151      	lsls	r1, r2, #5
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	440a      	add	r2, r1
 8009df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	0151      	lsls	r1, r2, #5
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	440a      	add	r2, r1
 8009e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	015a      	lsls	r2, r3, #5
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	0151      	lsls	r1, r2, #5
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	440a      	add	r2, r1
 8009e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e40:	0cdb      	lsrs	r3, r3, #19
 8009e42:	04db      	lsls	r3, r3, #19
 8009e44:	6113      	str	r3, [r2, #16]
 8009e46:	e04e      	b.n	8009ee6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	0151      	lsls	r1, r2, #5
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	440a      	add	r2, r1
 8009e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e62:	0cdb      	lsrs	r3, r3, #19
 8009e64:	04db      	lsls	r3, r3, #19
 8009e66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	0151      	lsls	r1, r2, #5
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	440a      	add	r2, r1
 8009e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e8a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	699a      	ldr	r2, [r3, #24]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d903      	bls.n	8009ea0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	68da      	ldr	r2, [r3, #12]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	015a      	lsls	r2, r3, #5
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	0151      	lsls	r1, r2, #5
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	440a      	add	r2, r1
 8009eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	015a      	lsls	r2, r3, #5
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ecc:	691a      	ldr	r2, [r3, #16]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ed6:	6939      	ldr	r1, [r7, #16]
 8009ed8:	0148      	lsls	r0, r1, #5
 8009eda:	6979      	ldr	r1, [r7, #20]
 8009edc:	4401      	add	r1, r0
 8009ede:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ee6:	79fb      	ldrb	r3, [r7, #7]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d11e      	bne.n	8009f2a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d009      	beq.n	8009f08 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	461a      	mov	r2, r3
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	695b      	ldr	r3, [r3, #20]
 8009f06:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	015a      	lsls	r2, r3, #5
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	0151      	lsls	r1, r2, #5
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	440a      	add	r2, r1
 8009f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f26:	6013      	str	r3, [r2, #0]
 8009f28:	e097      	b.n	800a05a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	0151      	lsls	r1, r2, #5
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	440a      	add	r2, r1
 8009f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f48:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 8083 	beq.w	800a05a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	f003 030f 	and.w	r3, r3, #15
 8009f64:	2101      	movs	r1, #1
 8009f66:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6a:	6979      	ldr	r1, [r7, #20]
 8009f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f70:	4313      	orrs	r3, r2
 8009f72:	634b      	str	r3, [r1, #52]	; 0x34
 8009f74:	e071      	b.n	800a05a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	015a      	lsls	r2, r3, #5
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	0151      	lsls	r1, r2, #5
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	440a      	add	r2, r1
 8009f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f90:	0cdb      	lsrs	r3, r3, #19
 8009f92:	04db      	lsls	r3, r3, #19
 8009f94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	0151      	lsls	r1, r2, #5
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	440a      	add	r2, r1
 8009fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009fb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	699b      	ldr	r3, [r3, #24]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	68da      	ldr	r2, [r3, #12]
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	0151      	lsls	r1, r2, #5
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	015a      	lsls	r2, r3, #5
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ffe:	691a      	ldr	r2, [r3, #16]
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a008:	6939      	ldr	r1, [r7, #16]
 800a00a:	0148      	lsls	r0, r1, #5
 800a00c:	6979      	ldr	r1, [r7, #20]
 800a00e:	4401      	add	r1, r0
 800a010:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a014:	4313      	orrs	r3, r2
 800a016:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a018:	79fb      	ldrb	r3, [r7, #7]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d10d      	bne.n	800a03a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d009      	beq.n	800a03a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	6919      	ldr	r1, [r3, #16]
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	4413      	add	r3, r2
 800a032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a036:	460a      	mov	r2, r1
 800a038:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	0151      	lsls	r1, r2, #5
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	440a      	add	r2, r1
 800a050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a054:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a058:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	371c      	adds	r7, #28
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a072:	2300      	movs	r3, #0
 800a074:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	785b      	ldrb	r3, [r3, #1]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d14a      	bne.n	800a11c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a09a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a09e:	f040 8086 	bne.w	800a1ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	7812      	ldrb	r2, [r2, #0]
 800a0b6:	0151      	lsls	r1, r2, #5
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	440a      	add	r2, r1
 800a0bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	7812      	ldrb	r2, [r2, #0]
 800a0da:	0151      	lsls	r1, r2, #5
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	440a      	add	r2, r1
 800a0e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d902      	bls.n	800a100 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a0fe:	e056      	b.n	800a1ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	015a      	lsls	r2, r3, #5
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	4413      	add	r3, r2
 800a10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a118:	d0e7      	beq.n	800a0ea <USB_EPStopXfer+0x82>
 800a11a:	e048      	b.n	800a1ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a134:	d13b      	bne.n	800a1ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	7812      	ldrb	r2, [r2, #0]
 800a14a:	0151      	lsls	r1, r2, #5
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	440a      	add	r2, r1
 800a150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a154:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a158:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	7812      	ldrb	r2, [r2, #0]
 800a16e:	0151      	lsls	r1, r2, #5
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	440a      	add	r2, r1
 800a174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a17c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3301      	adds	r3, #1
 800a182:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f242 7210 	movw	r2, #10000	; 0x2710
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d902      	bls.n	800a194 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	75fb      	strb	r3, [r7, #23]
          break;
 800a192:	e00c      	b.n	800a1ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1ac:	d0e7      	beq.n	800a17e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	371c      	adds	r7, #28
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b089      	sub	sp, #36	; 0x24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	71fb      	strb	r3, [r7, #7]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a1da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d123      	bne.n	800a22a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1e2:	88bb      	ldrh	r3, [r7, #4]
 800a1e4:	3303      	adds	r3, #3
 800a1e6:	089b      	lsrs	r3, r3, #2
 800a1e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	61bb      	str	r3, [r7, #24]
 800a1ee:	e018      	b.n	800a222 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1f0:	79fb      	ldrb	r3, [r7, #7]
 800a1f2:	031a      	lsls	r2, r3, #12
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	3301      	adds	r3, #1
 800a208:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	3301      	adds	r3, #1
 800a20e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	3301      	adds	r3, #1
 800a214:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	3301      	adds	r3, #1
 800a21a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	3301      	adds	r3, #1
 800a220:	61bb      	str	r3, [r7, #24]
 800a222:	69ba      	ldr	r2, [r7, #24]
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	429a      	cmp	r2, r3
 800a228:	d3e2      	bcc.n	800a1f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3724      	adds	r7, #36	; 0x24
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a238:	b480      	push	{r7}
 800a23a:	b08b      	sub	sp, #44	; 0x2c
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	4613      	mov	r3, r2
 800a244:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a24e:	88fb      	ldrh	r3, [r7, #6]
 800a250:	089b      	lsrs	r3, r3, #2
 800a252:	b29b      	uxth	r3, r3
 800a254:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a256:	88fb      	ldrh	r3, [r7, #6]
 800a258:	f003 0303 	and.w	r3, r3, #3
 800a25c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a25e:	2300      	movs	r3, #0
 800a260:	623b      	str	r3, [r7, #32]
 800a262:	e014      	b.n	800a28e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	3301      	adds	r3, #1
 800a274:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	3301      	adds	r3, #1
 800a27a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	3301      	adds	r3, #1
 800a280:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a284:	3301      	adds	r3, #1
 800a286:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	3301      	adds	r3, #1
 800a28c:	623b      	str	r3, [r7, #32]
 800a28e:	6a3a      	ldr	r2, [r7, #32]
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	429a      	cmp	r2, r3
 800a294:	d3e6      	bcc.n	800a264 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a296:	8bfb      	ldrh	r3, [r7, #30]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d01e      	beq.n	800a2da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a29c:	2300      	movs	r3, #0
 800a29e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	f107 0310 	add.w	r3, r7, #16
 800a2ac:	6812      	ldr	r2, [r2, #0]
 800a2ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	701a      	strb	r2, [r3, #0]
      i++;
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a2ce:	8bfb      	ldrh	r3, [r7, #30]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2d4:	8bfb      	ldrh	r3, [r7, #30]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1ea      	bne.n	800a2b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	372c      	adds	r7, #44	; 0x2c
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	785b      	ldrb	r3, [r3, #1]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d12c      	bne.n	800a35e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	db12      	blt.n	800a33c <USB_EPSetStall+0x54>
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00f      	beq.n	800a33c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	015a      	lsls	r2, r3, #5
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	4413      	add	r3, r2
 800a324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	0151      	lsls	r1, r2, #5
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	440a      	add	r2, r1
 800a332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a336:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a33a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	4413      	add	r3, r2
 800a344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	0151      	lsls	r1, r2, #5
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	440a      	add	r2, r1
 800a352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a35a:	6013      	str	r3, [r2, #0]
 800a35c:	e02b      	b.n	800a3b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	015a      	lsls	r2, r3, #5
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	4413      	add	r3, r2
 800a366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	db12      	blt.n	800a396 <USB_EPSetStall+0xae>
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00f      	beq.n	800a396 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	015a      	lsls	r2, r3, #5
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	4413      	add	r3, r2
 800a37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	0151      	lsls	r1, r2, #5
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	440a      	add	r2, r1
 800a38c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a390:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a394:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	015a      	lsls	r2, r3, #5
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	4413      	add	r3, r2
 800a39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	0151      	lsls	r1, r2, #5
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	440a      	add	r2, r1
 800a3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	785b      	ldrb	r3, [r3, #1]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d128      	bne.n	800a432 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	015a      	lsls	r2, r3, #5
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	0151      	lsls	r1, r2, #5
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	440a      	add	r2, r1
 800a3f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	791b      	ldrb	r3, [r3, #4]
 800a404:	2b03      	cmp	r3, #3
 800a406:	d003      	beq.n	800a410 <USB_EPClearStall+0x4c>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	791b      	ldrb	r3, [r3, #4]
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d138      	bne.n	800a482 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	0151      	lsls	r1, r2, #5
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	440a      	add	r2, r1
 800a426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a42a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	e027      	b.n	800a482 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	0151      	lsls	r1, r2, #5
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	440a      	add	r2, r1
 800a448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a44c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a450:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	791b      	ldrb	r3, [r3, #4]
 800a456:	2b03      	cmp	r3, #3
 800a458:	d003      	beq.n	800a462 <USB_EPClearStall+0x9e>
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	791b      	ldrb	r3, [r3, #4]
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d10f      	bne.n	800a482 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	015a      	lsls	r2, r3, #5
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	4413      	add	r3, r2
 800a46a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	0151      	lsls	r1, r2, #5
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	440a      	add	r2, r1
 800a478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a47c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a480:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	460b      	mov	r3, r1
 800a49a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a4b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	78fb      	ldrb	r3, [r7, #3]
 800a4be:	011b      	lsls	r3, r3, #4
 800a4c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a4c4:	68f9      	ldr	r1, [r7, #12]
 800a4c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4f6:	f023 0303 	bic.w	r3, r3, #3
 800a4fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a50a:	f023 0302 	bic.w	r3, r3, #2
 800a50e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a51e:	b480      	push	{r7}
 800a520:	b085      	sub	sp, #20
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a538:	f023 0303 	bic.w	r3, r3, #3
 800a53c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a54c:	f043 0302 	orr.w	r3, r3, #2
 800a550:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	4013      	ands	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a578:	68fb      	ldr	r3, [r7, #12]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a586:	b480      	push	{r7}
 800a588:	b085      	sub	sp, #20
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5a2:	69db      	ldr	r3, [r3, #28]
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	0c1b      	lsrs	r3, r3, #16
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b085      	sub	sp, #20
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	4013      	ands	r3, r2
 800a5dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	b29b      	uxth	r3, r3
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3714      	adds	r7, #20
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b085      	sub	sp, #20
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	015a      	lsls	r2, r3, #5
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	4413      	add	r3, r2
 800a606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	4013      	ands	r3, r2
 800a61a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a61c:	68bb      	ldr	r3, [r7, #8]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a62a:	b480      	push	{r7}
 800a62c:	b087      	sub	sp, #28
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	460b      	mov	r3, r1
 800a634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	f003 030f 	and.w	r3, r3, #15
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	fa22 f303 	lsr.w	r3, r2, r3
 800a65a:	01db      	lsls	r3, r3, #7
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	4313      	orrs	r3, r2
 800a662:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	4013      	ands	r3, r2
 800a676:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a678:	68bb      	ldr	r3, [r7, #8]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	371c      	adds	r7, #28
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	f003 0301 	and.w	r3, r3, #1
}
 800a696:	4618      	mov	r0, r3
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b085      	sub	sp, #20
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a6c0:	f023 0307 	bic.w	r3, r3, #7
 800a6c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b087      	sub	sp, #28
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	607a      	str	r2, [r7, #4]
 800a6f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	333c      	adds	r3, #60	; 0x3c
 800a6fe:	3304      	adds	r3, #4
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	4a26      	ldr	r2, [pc, #152]	; (800a7a0 <USB_EP0_OutStart+0xb8>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d90a      	bls.n	800a722 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a71c:	d101      	bne.n	800a722 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	e037      	b.n	800a792 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a728:	461a      	mov	r2, r3
 800a72a:	2300      	movs	r3, #0
 800a72c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a73c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a750:	f043 0318 	orr.w	r3, r3, #24
 800a754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a764:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a768:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a76a:	7afb      	ldrb	r3, [r7, #11]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d10f      	bne.n	800a790 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a776:	461a      	mov	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a78a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a78e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	371c      	adds	r7, #28
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	4f54300a 	.word	0x4f54300a

0800a7a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	4a13      	ldr	r2, [pc, #76]	; (800a808 <USB_CoreReset+0x64>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d901      	bls.n	800a7c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e01b      	b.n	800a7fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	daf2      	bge.n	800a7b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	f043 0201 	orr.w	r2, r3, #1
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4a09      	ldr	r2, [pc, #36]	; (800a808 <USB_CoreReset+0x64>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d901      	bls.n	800a7ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	e006      	b.n	800a7fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	f003 0301 	and.w	r3, r3, #1
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d0f0      	beq.n	800a7da <USB_CoreReset+0x36>

  return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	00030d40 	.word	0x00030d40

0800a80c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a818:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a81c:	f005 ff66 	bl	80106ec <USBD_static_malloc>
 800a820:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d109      	bne.n	800a83c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	32b0      	adds	r2, #176	; 0xb0
 800a832:	2100      	movs	r1, #0
 800a834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a838:	2302      	movs	r3, #2
 800a83a:	e0d4      	b.n	800a9e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a83c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a840:	2100      	movs	r1, #0
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f006 fd21 	bl	801128a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	32b0      	adds	r2, #176	; 0xb0
 800a852:	68f9      	ldr	r1, [r7, #12]
 800a854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	32b0      	adds	r2, #176	; 0xb0
 800a862:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	7c1b      	ldrb	r3, [r3, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d138      	bne.n	800a8e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a874:	4b5e      	ldr	r3, [pc, #376]	; (800a9f0 <USBD_CDC_Init+0x1e4>)
 800a876:	7819      	ldrb	r1, [r3, #0]
 800a878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a87c:	2202      	movs	r2, #2
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f005 fe11 	bl	80104a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a884:	4b5a      	ldr	r3, [pc, #360]	; (800a9f0 <USBD_CDC_Init+0x1e4>)
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	f003 020f 	and.w	r2, r3, #15
 800a88c:	6879      	ldr	r1, [r7, #4]
 800a88e:	4613      	mov	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4413      	add	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	440b      	add	r3, r1
 800a898:	3324      	adds	r3, #36	; 0x24
 800a89a:	2201      	movs	r2, #1
 800a89c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a89e:	4b55      	ldr	r3, [pc, #340]	; (800a9f4 <USBD_CDC_Init+0x1e8>)
 800a8a0:	7819      	ldrb	r1, [r3, #0]
 800a8a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f005 fdfc 	bl	80104a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a8ae:	4b51      	ldr	r3, [pc, #324]	; (800a9f4 <USBD_CDC_Init+0x1e8>)
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	f003 020f 	and.w	r2, r3, #15
 800a8b6:	6879      	ldr	r1, [r7, #4]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	440b      	add	r3, r1
 800a8c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a8ca:	4b4b      	ldr	r3, [pc, #300]	; (800a9f8 <USBD_CDC_Init+0x1ec>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	f003 020f 	and.w	r2, r3, #15
 800a8d2:	6879      	ldr	r1, [r7, #4]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	440b      	add	r3, r1
 800a8de:	3326      	adds	r3, #38	; 0x26
 800a8e0:	2210      	movs	r2, #16
 800a8e2:	801a      	strh	r2, [r3, #0]
 800a8e4:	e035      	b.n	800a952 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a8e6:	4b42      	ldr	r3, [pc, #264]	; (800a9f0 <USBD_CDC_Init+0x1e4>)
 800a8e8:	7819      	ldrb	r1, [r3, #0]
 800a8ea:	2340      	movs	r3, #64	; 0x40
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f005 fdd9 	bl	80104a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a8f4:	4b3e      	ldr	r3, [pc, #248]	; (800a9f0 <USBD_CDC_Init+0x1e4>)
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	f003 020f 	and.w	r2, r3, #15
 800a8fc:	6879      	ldr	r1, [r7, #4]
 800a8fe:	4613      	mov	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	440b      	add	r3, r1
 800a908:	3324      	adds	r3, #36	; 0x24
 800a90a:	2201      	movs	r2, #1
 800a90c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a90e:	4b39      	ldr	r3, [pc, #228]	; (800a9f4 <USBD_CDC_Init+0x1e8>)
 800a910:	7819      	ldrb	r1, [r3, #0]
 800a912:	2340      	movs	r3, #64	; 0x40
 800a914:	2202      	movs	r2, #2
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f005 fdc5 	bl	80104a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a91c:	4b35      	ldr	r3, [pc, #212]	; (800a9f4 <USBD_CDC_Init+0x1e8>)
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	f003 020f 	and.w	r2, r3, #15
 800a924:	6879      	ldr	r1, [r7, #4]
 800a926:	4613      	mov	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4413      	add	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	440b      	add	r3, r1
 800a930:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a934:	2201      	movs	r2, #1
 800a936:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a938:	4b2f      	ldr	r3, [pc, #188]	; (800a9f8 <USBD_CDC_Init+0x1ec>)
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	f003 020f 	and.w	r2, r3, #15
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	4613      	mov	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	440b      	add	r3, r1
 800a94c:	3326      	adds	r3, #38	; 0x26
 800a94e:	2210      	movs	r2, #16
 800a950:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a952:	4b29      	ldr	r3, [pc, #164]	; (800a9f8 <USBD_CDC_Init+0x1ec>)
 800a954:	7819      	ldrb	r1, [r3, #0]
 800a956:	2308      	movs	r3, #8
 800a958:	2203      	movs	r2, #3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f005 fda3 	bl	80104a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a960:	4b25      	ldr	r3, [pc, #148]	; (800a9f8 <USBD_CDC_Init+0x1ec>)
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	f003 020f 	and.w	r2, r3, #15
 800a968:	6879      	ldr	r1, [r7, #4]
 800a96a:	4613      	mov	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	440b      	add	r3, r1
 800a974:	3324      	adds	r3, #36	; 0x24
 800a976:	2201      	movs	r2, #1
 800a978:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	33b0      	adds	r3, #176	; 0xb0
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	e018      	b.n	800a9e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	7c1b      	ldrb	r3, [r3, #16]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9bc:	4b0d      	ldr	r3, [pc, #52]	; (800a9f4 <USBD_CDC_Init+0x1e8>)
 800a9be:	7819      	ldrb	r1, [r3, #0]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f005 fe5a 	bl	8010684 <USBD_LL_PrepareReceive>
 800a9d0:	e008      	b.n	800a9e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9d2:	4b08      	ldr	r3, [pc, #32]	; (800a9f4 <USBD_CDC_Init+0x1e8>)
 800a9d4:	7819      	ldrb	r1, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9dc:	2340      	movs	r3, #64	; 0x40
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f005 fe50 	bl	8010684 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	2000011b 	.word	0x2000011b
 800a9f4:	2000011c 	.word	0x2000011c
 800a9f8:	2000011d 	.word	0x2000011d

0800a9fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	460b      	mov	r3, r1
 800aa06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aa08:	4b3a      	ldr	r3, [pc, #232]	; (800aaf4 <USBD_CDC_DeInit+0xf8>)
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f005 fd6f 	bl	80104f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aa14:	4b37      	ldr	r3, [pc, #220]	; (800aaf4 <USBD_CDC_DeInit+0xf8>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f003 020f 	and.w	r2, r3, #15
 800aa1c:	6879      	ldr	r1, [r7, #4]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	440b      	add	r3, r1
 800aa28:	3324      	adds	r3, #36	; 0x24
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aa2e:	4b32      	ldr	r3, [pc, #200]	; (800aaf8 <USBD_CDC_DeInit+0xfc>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f005 fd5c 	bl	80104f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aa3a:	4b2f      	ldr	r3, [pc, #188]	; (800aaf8 <USBD_CDC_DeInit+0xfc>)
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	f003 020f 	and.w	r2, r3, #15
 800aa42:	6879      	ldr	r1, [r7, #4]
 800aa44:	4613      	mov	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4413      	add	r3, r2
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	440b      	add	r3, r1
 800aa4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa52:	2200      	movs	r2, #0
 800aa54:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aa56:	4b29      	ldr	r3, [pc, #164]	; (800aafc <USBD_CDC_DeInit+0x100>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f005 fd48 	bl	80104f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aa62:	4b26      	ldr	r3, [pc, #152]	; (800aafc <USBD_CDC_DeInit+0x100>)
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	f003 020f 	and.w	r2, r3, #15
 800aa6a:	6879      	ldr	r1, [r7, #4]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	4413      	add	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	440b      	add	r3, r1
 800aa76:	3324      	adds	r3, #36	; 0x24
 800aa78:	2200      	movs	r2, #0
 800aa7a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aa7c:	4b1f      	ldr	r3, [pc, #124]	; (800aafc <USBD_CDC_DeInit+0x100>)
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	f003 020f 	and.w	r2, r3, #15
 800aa84:	6879      	ldr	r1, [r7, #4]
 800aa86:	4613      	mov	r3, r2
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	4413      	add	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	440b      	add	r3, r1
 800aa90:	3326      	adds	r3, #38	; 0x26
 800aa92:	2200      	movs	r2, #0
 800aa94:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	32b0      	adds	r2, #176	; 0xb0
 800aaa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d01f      	beq.n	800aae8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	33b0      	adds	r3, #176	; 0xb0
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	32b0      	adds	r2, #176	; 0xb0
 800aac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f005 fe1c 	bl	8010708 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	32b0      	adds	r2, #176	; 0xb0
 800aada:	2100      	movs	r1, #0
 800aadc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	2000011b 	.word	0x2000011b
 800aaf8:	2000011c 	.word	0x2000011c
 800aafc:	2000011d 	.word	0x2000011d

0800ab00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	32b0      	adds	r2, #176	; 0xb0
 800ab14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e0bf      	b.n	800acb0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d050      	beq.n	800abde <USBD_CDC_Setup+0xde>
 800ab3c:	2b20      	cmp	r3, #32
 800ab3e:	f040 80af 	bne.w	800aca0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	88db      	ldrh	r3, [r3, #6]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d03a      	beq.n	800abc0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	b25b      	sxtb	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	da1b      	bge.n	800ab8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	33b0      	adds	r3, #176	; 0xb0
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ab6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	88d2      	ldrh	r2, [r2, #6]
 800ab70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	88db      	ldrh	r3, [r3, #6]
 800ab76:	2b07      	cmp	r3, #7
 800ab78:	bf28      	it	cs
 800ab7a:	2307      	movcs	r3, #7
 800ab7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	89fa      	ldrh	r2, [r7, #14]
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f001 fd89 	bl	800c69c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ab8a:	e090      	b.n	800acae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	785a      	ldrb	r2, [r3, #1]
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	88db      	ldrh	r3, [r3, #6]
 800ab9a:	2b3f      	cmp	r3, #63	; 0x3f
 800ab9c:	d803      	bhi.n	800aba6 <USBD_CDC_Setup+0xa6>
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	88db      	ldrh	r3, [r3, #6]
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	e000      	b.n	800aba8 <USBD_CDC_Setup+0xa8>
 800aba6:	2240      	movs	r2, #64	; 0x40
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800abae:	6939      	ldr	r1, [r7, #16]
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800abb6:	461a      	mov	r2, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f001 fd9b 	bl	800c6f4 <USBD_CtlPrepareRx>
      break;
 800abbe:	e076      	b.n	800acae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	33b0      	adds	r3, #176	; 0xb0
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4413      	add	r3, r2
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	7850      	ldrb	r0, [r2, #1]
 800abd6:	2200      	movs	r2, #0
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	4798      	blx	r3
      break;
 800abdc:	e067      	b.n	800acae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	785b      	ldrb	r3, [r3, #1]
 800abe2:	2b0b      	cmp	r3, #11
 800abe4:	d851      	bhi.n	800ac8a <USBD_CDC_Setup+0x18a>
 800abe6:	a201      	add	r2, pc, #4	; (adr r2, 800abec <USBD_CDC_Setup+0xec>)
 800abe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abec:	0800ac1d 	.word	0x0800ac1d
 800abf0:	0800ac99 	.word	0x0800ac99
 800abf4:	0800ac8b 	.word	0x0800ac8b
 800abf8:	0800ac8b 	.word	0x0800ac8b
 800abfc:	0800ac8b 	.word	0x0800ac8b
 800ac00:	0800ac8b 	.word	0x0800ac8b
 800ac04:	0800ac8b 	.word	0x0800ac8b
 800ac08:	0800ac8b 	.word	0x0800ac8b
 800ac0c:	0800ac8b 	.word	0x0800ac8b
 800ac10:	0800ac8b 	.word	0x0800ac8b
 800ac14:	0800ac47 	.word	0x0800ac47
 800ac18:	0800ac71 	.word	0x0800ac71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	d107      	bne.n	800ac38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ac28:	f107 030a 	add.w	r3, r7, #10
 800ac2c:	2202      	movs	r2, #2
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 fd33 	bl	800c69c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac36:	e032      	b.n	800ac9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f001 fcbd 	bl	800c5ba <USBD_CtlError>
            ret = USBD_FAIL;
 800ac40:	2303      	movs	r3, #3
 800ac42:	75fb      	strb	r3, [r7, #23]
          break;
 800ac44:	e02b      	b.n	800ac9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d107      	bne.n	800ac62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac52:	f107 030d 	add.w	r3, r7, #13
 800ac56:	2201      	movs	r2, #1
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f001 fd1e 	bl	800c69c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac60:	e01d      	b.n	800ac9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac62:	6839      	ldr	r1, [r7, #0]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f001 fca8 	bl	800c5ba <USBD_CtlError>
            ret = USBD_FAIL;
 800ac6a:	2303      	movs	r3, #3
 800ac6c:	75fb      	strb	r3, [r7, #23]
          break;
 800ac6e:	e016      	b.n	800ac9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d00f      	beq.n	800ac9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f001 fc9b 	bl	800c5ba <USBD_CtlError>
            ret = USBD_FAIL;
 800ac84:	2303      	movs	r3, #3
 800ac86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ac88:	e008      	b.n	800ac9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f001 fc94 	bl	800c5ba <USBD_CtlError>
          ret = USBD_FAIL;
 800ac92:	2303      	movs	r3, #3
 800ac94:	75fb      	strb	r3, [r7, #23]
          break;
 800ac96:	e002      	b.n	800ac9e <USBD_CDC_Setup+0x19e>
          break;
 800ac98:	bf00      	nop
 800ac9a:	e008      	b.n	800acae <USBD_CDC_Setup+0x1ae>
          break;
 800ac9c:	bf00      	nop
      }
      break;
 800ac9e:	e006      	b.n	800acae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aca0:	6839      	ldr	r1, [r7, #0]
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 fc89 	bl	800c5ba <USBD_CtlError>
      ret = USBD_FAIL;
 800aca8:	2303      	movs	r3, #3
 800acaa:	75fb      	strb	r3, [r7, #23]
      break;
 800acac:	bf00      	nop
  }

  return (uint8_t)ret;
 800acae:	7dfb      	ldrb	r3, [r7, #23]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	32b0      	adds	r2, #176	; 0xb0
 800acd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800acde:	2303      	movs	r3, #3
 800ace0:	e065      	b.n	800adae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	32b0      	adds	r2, #176	; 0xb0
 800acec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	f003 020f 	and.w	r2, r3, #15
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	4613      	mov	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	440b      	add	r3, r1
 800ad04:	3318      	adds	r3, #24
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d02f      	beq.n	800ad6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ad0c:	78fb      	ldrb	r3, [r7, #3]
 800ad0e:	f003 020f 	and.w	r2, r3, #15
 800ad12:	6879      	ldr	r1, [r7, #4]
 800ad14:	4613      	mov	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	440b      	add	r3, r1
 800ad1e:	3318      	adds	r3, #24
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	78fb      	ldrb	r3, [r7, #3]
 800ad24:	f003 010f 	and.w	r1, r3, #15
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	00db      	lsls	r3, r3, #3
 800ad2e:	440b      	add	r3, r1
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4403      	add	r3, r0
 800ad34:	3348      	adds	r3, #72	; 0x48
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad3c:	fb01 f303 	mul.w	r3, r1, r3
 800ad40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d112      	bne.n	800ad6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ad46:	78fb      	ldrb	r3, [r7, #3]
 800ad48:	f003 020f 	and.w	r2, r3, #15
 800ad4c:	6879      	ldr	r1, [r7, #4]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	440b      	add	r3, r1
 800ad58:	3318      	adds	r3, #24
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ad5e:	78f9      	ldrb	r1, [r7, #3]
 800ad60:	2300      	movs	r3, #0
 800ad62:	2200      	movs	r2, #0
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f005 fc6c 	bl	8010642 <USBD_LL_Transmit>
 800ad6a:	e01f      	b.n	800adac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	33b0      	adds	r3, #176	; 0xb0
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d010      	beq.n	800adac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	33b0      	adds	r3, #176	; 0xb0
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4413      	add	r3, r2
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ada8:	78fa      	ldrb	r2, [r7, #3]
 800adaa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
 800adbe:	460b      	mov	r3, r1
 800adc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	32b0      	adds	r2, #176	; 0xb0
 800adcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	32b0      	adds	r2, #176	; 0xb0
 800addc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e01a      	b.n	800ae1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ade8:	78fb      	ldrb	r3, [r7, #3]
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f005 fc6a 	bl	80106c6 <USBD_LL_GetRxDataSize>
 800adf2:	4602      	mov	r2, r0
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	33b0      	adds	r3, #176	; 0xb0
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b084      	sub	sp, #16
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	32b0      	adds	r2, #176	; 0xb0
 800ae38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d101      	bne.n	800ae48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e025      	b.n	800ae94 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	33b0      	adds	r3, #176	; 0xb0
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d01a      	beq.n	800ae92 <USBD_CDC_EP0_RxReady+0x6c>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ae62:	2bff      	cmp	r3, #255	; 0xff
 800ae64:	d015      	beq.n	800ae92 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	33b0      	adds	r3, #176	; 0xb0
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ae7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae86:	b292      	uxth	r2, r2
 800ae88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	22ff      	movs	r2, #255	; 0xff
 800ae8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aea4:	2182      	movs	r1, #130	; 0x82
 800aea6:	4818      	ldr	r0, [pc, #96]	; (800af08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aea8:	f000 fd4f 	bl	800b94a <USBD_GetEpDesc>
 800aeac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aeae:	2101      	movs	r1, #1
 800aeb0:	4815      	ldr	r0, [pc, #84]	; (800af08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aeb2:	f000 fd4a 	bl	800b94a <USBD_GetEpDesc>
 800aeb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aeb8:	2181      	movs	r1, #129	; 0x81
 800aeba:	4813      	ldr	r0, [pc, #76]	; (800af08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aebc:	f000 fd45 	bl	800b94a <USBD_GetEpDesc>
 800aec0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	2210      	movs	r2, #16
 800aecc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d006      	beq.n	800aee2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aedc:	711a      	strb	r2, [r3, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d006      	beq.n	800aef6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aef0:	711a      	strb	r2, [r3, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2243      	movs	r2, #67	; 0x43
 800aefa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aefc:	4b02      	ldr	r3, [pc, #8]	; (800af08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3718      	adds	r7, #24
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	200000d8 	.word	0x200000d8

0800af0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af14:	2182      	movs	r1, #130	; 0x82
 800af16:	4818      	ldr	r0, [pc, #96]	; (800af78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af18:	f000 fd17 	bl	800b94a <USBD_GetEpDesc>
 800af1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af1e:	2101      	movs	r1, #1
 800af20:	4815      	ldr	r0, [pc, #84]	; (800af78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af22:	f000 fd12 	bl	800b94a <USBD_GetEpDesc>
 800af26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af28:	2181      	movs	r1, #129	; 0x81
 800af2a:	4813      	ldr	r0, [pc, #76]	; (800af78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af2c:	f000 fd0d 	bl	800b94a <USBD_GetEpDesc>
 800af30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d002      	beq.n	800af3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	2210      	movs	r2, #16
 800af3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d006      	beq.n	800af52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	2200      	movs	r2, #0
 800af48:	711a      	strb	r2, [r3, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f042 0202 	orr.w	r2, r2, #2
 800af50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d006      	beq.n	800af66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	711a      	strb	r2, [r3, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f042 0202 	orr.w	r2, r2, #2
 800af64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2243      	movs	r2, #67	; 0x43
 800af6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af6c:	4b02      	ldr	r3, [pc, #8]	; (800af78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	200000d8 	.word	0x200000d8

0800af7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af84:	2182      	movs	r1, #130	; 0x82
 800af86:	4818      	ldr	r0, [pc, #96]	; (800afe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af88:	f000 fcdf 	bl	800b94a <USBD_GetEpDesc>
 800af8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af8e:	2101      	movs	r1, #1
 800af90:	4815      	ldr	r0, [pc, #84]	; (800afe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af92:	f000 fcda 	bl	800b94a <USBD_GetEpDesc>
 800af96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af98:	2181      	movs	r1, #129	; 0x81
 800af9a:	4813      	ldr	r0, [pc, #76]	; (800afe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af9c:	f000 fcd5 	bl	800b94a <USBD_GetEpDesc>
 800afa0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	2210      	movs	r2, #16
 800afac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d006      	beq.n	800afc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afbc:	711a      	strb	r2, [r3, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d006      	beq.n	800afd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afd0:	711a      	strb	r2, [r3, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2243      	movs	r2, #67	; 0x43
 800afda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800afdc:	4b02      	ldr	r3, [pc, #8]	; (800afe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	200000d8 	.word	0x200000d8

0800afec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	220a      	movs	r2, #10
 800aff8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800affa:	4b03      	ldr	r3, [pc, #12]	; (800b008 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800affc:	4618      	mov	r0, r3
 800affe:	370c      	adds	r7, #12
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	20000094 	.word	0x20000094

0800b00c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b01c:	2303      	movs	r3, #3
 800b01e:	e009      	b.n	800b034 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	33b0      	adds	r3, #176	; 0xb0
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b040:	b480      	push	{r7}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	32b0      	adds	r2, #176	; 0xb0
 800b056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b062:	2303      	movs	r3, #3
 800b064:	e008      	b.n	800b078 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	371c      	adds	r7, #28
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	32b0      	adds	r2, #176	; 0xb0
 800b098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e004      	b.n	800b0b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
	...

0800b0c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	32b0      	adds	r2, #176	; 0xb0
 800b0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	32b0      	adds	r2, #176	; 0xb0
 800b0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e025      	b.n	800b13e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d11f      	bne.n	800b13c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b104:	4b10      	ldr	r3, [pc, #64]	; (800b148 <USBD_CDC_TransmitPacket+0x88>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	f003 020f 	and.w	r2, r3, #15
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	4613      	mov	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4403      	add	r3, r0
 800b11e:	3318      	adds	r3, #24
 800b120:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b122:	4b09      	ldr	r3, [pc, #36]	; (800b148 <USBD_CDC_TransmitPacket+0x88>)
 800b124:	7819      	ldrb	r1, [r3, #0]
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f005 fa85 	bl	8010642 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	2000011b 	.word	0x2000011b

0800b14c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	32b0      	adds	r2, #176	; 0xb0
 800b15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b162:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	32b0      	adds	r2, #176	; 0xb0
 800b16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b176:	2303      	movs	r3, #3
 800b178:	e018      	b.n	800b1ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	7c1b      	ldrb	r3, [r3, #16]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10a      	bne.n	800b198 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b182:	4b0c      	ldr	r3, [pc, #48]	; (800b1b4 <USBD_CDC_ReceivePacket+0x68>)
 800b184:	7819      	ldrb	r1, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b18c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f005 fa77 	bl	8010684 <USBD_LL_PrepareReceive>
 800b196:	e008      	b.n	800b1aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b198:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <USBD_CDC_ReceivePacket+0x68>)
 800b19a:	7819      	ldrb	r1, [r3, #0]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1a2:	2340      	movs	r3, #64	; 0x40
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f005 fa6d 	bl	8010684 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	2000011c 	.word	0x2000011c

0800b1b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e01f      	b.n	800b210 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	79fa      	ldrb	r2, [r7, #7]
 800b202:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f005 f8e1 	bl	80103cc <USBD_LL_Init>
 800b20a:	4603      	mov	r3, r0
 800b20c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3718      	adds	r7, #24
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d101      	bne.n	800b230 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e025      	b.n	800b27c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	32ae      	adds	r2, #174	; 0xae
 800b242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00f      	beq.n	800b26c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	32ae      	adds	r2, #174	; 0xae
 800b256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25c:	f107 020e 	add.w	r2, r7, #14
 800b260:	4610      	mov	r0, r2
 800b262:	4798      	blx	r3
 800b264:	4602      	mov	r2, r0
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b272:	1c5a      	adds	r2, r3, #1
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f005 f8ef 	bl	8010470 <USBD_LL_Start>
 800b292:	4603      	mov	r3, r0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr

0800b2b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d009      	beq.n	800b2e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	78fa      	ldrb	r2, [r7, #3]
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	4798      	blx	r3
 800b2dc:	4603      	mov	r3, r0
 800b2de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b084      	sub	sp, #16
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	78fa      	ldrb	r2, [r7, #3]
 800b304:	4611      	mov	r1, r2
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	4798      	blx	r3
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b310:	2303      	movs	r3, #3
 800b312:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b314:	7bfb      	ldrb	r3, [r7, #15]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b084      	sub	sp, #16
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
 800b326:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	4618      	mov	r0, r3
 800b332:	f001 f908 	bl	800c546 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2201      	movs	r2, #1
 800b33a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b344:	461a      	mov	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b352:	f003 031f 	and.w	r3, r3, #31
 800b356:	2b02      	cmp	r3, #2
 800b358:	d01a      	beq.n	800b390 <USBD_LL_SetupStage+0x72>
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d822      	bhi.n	800b3a4 <USBD_LL_SetupStage+0x86>
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <USBD_LL_SetupStage+0x4a>
 800b362:	2b01      	cmp	r3, #1
 800b364:	d00a      	beq.n	800b37c <USBD_LL_SetupStage+0x5e>
 800b366:	e01d      	b.n	800b3a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b36e:	4619      	mov	r1, r3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 fb5f 	bl	800ba34 <USBD_StdDevReq>
 800b376:	4603      	mov	r3, r0
 800b378:	73fb      	strb	r3, [r7, #15]
      break;
 800b37a:	e020      	b.n	800b3be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fbc7 	bl	800bb18 <USBD_StdItfReq>
 800b38a:	4603      	mov	r3, r0
 800b38c:	73fb      	strb	r3, [r7, #15]
      break;
 800b38e:	e016      	b.n	800b3be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fc29 	bl	800bbf0 <USBD_StdEPReq>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3a2:	e00c      	b.n	800b3be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b3aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f005 f8bc 	bl	8010530 <USBD_LL_StallEP>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b3bc:	bf00      	nop
  }

  return ret;
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	607a      	str	r2, [r7, #4]
 800b3d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b3da:	7afb      	ldrb	r3, [r7, #11]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d16e      	bne.n	800b4be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b3e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	f040 8098 	bne.w	800b524 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	689a      	ldr	r2, [r3, #8]
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d913      	bls.n	800b428 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	689a      	ldr	r2, [r3, #8]
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	1ad2      	subs	r2, r2, r3
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	68da      	ldr	r2, [r3, #12]
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	4293      	cmp	r3, r2
 800b418:	bf28      	it	cs
 800b41a:	4613      	movcs	r3, r2
 800b41c:	461a      	mov	r2, r3
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f001 f984 	bl	800c72e <USBD_CtlContinueRx>
 800b426:	e07d      	b.n	800b524 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b42e:	f003 031f 	and.w	r3, r3, #31
 800b432:	2b02      	cmp	r3, #2
 800b434:	d014      	beq.n	800b460 <USBD_LL_DataOutStage+0x98>
 800b436:	2b02      	cmp	r3, #2
 800b438:	d81d      	bhi.n	800b476 <USBD_LL_DataOutStage+0xae>
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d002      	beq.n	800b444 <USBD_LL_DataOutStage+0x7c>
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d003      	beq.n	800b44a <USBD_LL_DataOutStage+0x82>
 800b442:	e018      	b.n	800b476 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b444:	2300      	movs	r3, #0
 800b446:	75bb      	strb	r3, [r7, #22]
            break;
 800b448:	e018      	b.n	800b47c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b450:	b2db      	uxtb	r3, r3
 800b452:	4619      	mov	r1, r3
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 fa5e 	bl	800b916 <USBD_CoreFindIF>
 800b45a:	4603      	mov	r3, r0
 800b45c:	75bb      	strb	r3, [r7, #22]
            break;
 800b45e:	e00d      	b.n	800b47c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b466:	b2db      	uxtb	r3, r3
 800b468:	4619      	mov	r1, r3
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f000 fa60 	bl	800b930 <USBD_CoreFindEP>
 800b470:	4603      	mov	r3, r0
 800b472:	75bb      	strb	r3, [r7, #22]
            break;
 800b474:	e002      	b.n	800b47c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b476:	2300      	movs	r3, #0
 800b478:	75bb      	strb	r3, [r7, #22]
            break;
 800b47a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b47c:	7dbb      	ldrb	r3, [r7, #22]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d119      	bne.n	800b4b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	2b03      	cmp	r3, #3
 800b48c:	d113      	bne.n	800b4b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b48e:	7dba      	ldrb	r2, [r7, #22]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	32ae      	adds	r2, #174	; 0xae
 800b494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00b      	beq.n	800b4b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b49e:	7dba      	ldrb	r2, [r7, #22]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b4a6:	7dba      	ldrb	r2, [r7, #22]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	32ae      	adds	r2, #174	; 0xae
 800b4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b0:	691b      	ldr	r3, [r3, #16]
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f001 f94a 	bl	800c750 <USBD_CtlSendStatus>
 800b4bc:	e032      	b.n	800b524 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b4be:	7afb      	ldrb	r3, [r7, #11]
 800b4c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 fa31 	bl	800b930 <USBD_CoreFindEP>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4d2:	7dbb      	ldrb	r3, [r7, #22]
 800b4d4:	2bff      	cmp	r3, #255	; 0xff
 800b4d6:	d025      	beq.n	800b524 <USBD_LL_DataOutStage+0x15c>
 800b4d8:	7dbb      	ldrb	r3, [r7, #22]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d122      	bne.n	800b524 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b03      	cmp	r3, #3
 800b4e8:	d117      	bne.n	800b51a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b4ea:	7dba      	ldrb	r2, [r7, #22]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	32ae      	adds	r2, #174	; 0xae
 800b4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f4:	699b      	ldr	r3, [r3, #24]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00f      	beq.n	800b51a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b4fa:	7dba      	ldrb	r2, [r7, #22]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b502:	7dba      	ldrb	r2, [r7, #22]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	32ae      	adds	r2, #174	; 0xae
 800b508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b50c:	699b      	ldr	r3, [r3, #24]
 800b50e:	7afa      	ldrb	r2, [r7, #11]
 800b510:	4611      	mov	r1, r2
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	4798      	blx	r3
 800b516:	4603      	mov	r3, r0
 800b518:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b520:	7dfb      	ldrb	r3, [r7, #23]
 800b522:	e000      	b.n	800b526 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b086      	sub	sp, #24
 800b532:	af00      	add	r7, sp, #0
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	460b      	mov	r3, r1
 800b538:	607a      	str	r2, [r7, #4]
 800b53a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b53c:	7afb      	ldrb	r3, [r7, #11]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d16f      	bne.n	800b622 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3314      	adds	r3, #20
 800b546:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d15a      	bne.n	800b608 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	689a      	ldr	r2, [r3, #8]
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d914      	bls.n	800b588 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	689a      	ldr	r2, [r3, #8]
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	1ad2      	subs	r2, r2, r3
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	461a      	mov	r2, r3
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f001 f8ac 	bl	800c6d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b57a:	2300      	movs	r3, #0
 800b57c:	2200      	movs	r2, #0
 800b57e:	2100      	movs	r1, #0
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f005 f87f 	bl	8010684 <USBD_LL_PrepareReceive>
 800b586:	e03f      	b.n	800b608 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	68da      	ldr	r2, [r3, #12]
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	429a      	cmp	r2, r3
 800b592:	d11c      	bne.n	800b5ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d316      	bcc.n	800b5ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	685a      	ldr	r2, [r3, #4]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d20f      	bcs.n	800b5ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f001 f88d 	bl	800c6d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f005 f85c 	bl	8010684 <USBD_LL_PrepareReceive>
 800b5cc:	e01c      	b.n	800b608 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b03      	cmp	r3, #3
 800b5d8:	d10f      	bne.n	800b5fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d009      	beq.n	800b5fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5fa:	2180      	movs	r1, #128	; 0x80
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f004 ff97 	bl	8010530 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f001 f8b7 	bl	800c776 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d03a      	beq.n	800b688 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f7ff fe42 	bl	800b29c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b620:	e032      	b.n	800b688 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b622:	7afb      	ldrb	r3, [r7, #11]
 800b624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	4619      	mov	r1, r3
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f000 f97f 	bl	800b930 <USBD_CoreFindEP>
 800b632:	4603      	mov	r3, r0
 800b634:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b636:	7dfb      	ldrb	r3, [r7, #23]
 800b638:	2bff      	cmp	r3, #255	; 0xff
 800b63a:	d025      	beq.n	800b688 <USBD_LL_DataInStage+0x15a>
 800b63c:	7dfb      	ldrb	r3, [r7, #23]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d122      	bne.n	800b688 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d11c      	bne.n	800b688 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b64e:	7dfa      	ldrb	r2, [r7, #23]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	32ae      	adds	r2, #174	; 0xae
 800b654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d014      	beq.n	800b688 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b65e:	7dfa      	ldrb	r2, [r7, #23]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b666:	7dfa      	ldrb	r2, [r7, #23]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	32ae      	adds	r2, #174	; 0xae
 800b66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	7afa      	ldrb	r2, [r7, #11]
 800b674:	4611      	mov	r1, r2
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	4798      	blx	r3
 800b67a:	4603      	mov	r3, r0
 800b67c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b67e:	7dbb      	ldrb	r3, [r7, #22]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b684:	7dbb      	ldrb	r3, [r7, #22]
 800b686:	e000      	b.n	800b68a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3718      	adds	r7, #24
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b69a:	2300      	movs	r3, #0
 800b69c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d014      	beq.n	800b6f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00e      	beq.n	800b6f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	6852      	ldr	r2, [r2, #4]
 800b6e6:	b2d2      	uxtb	r2, r2
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	4798      	blx	r3
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6f8:	2340      	movs	r3, #64	; 0x40
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f004 fed1 	bl	80104a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2240      	movs	r2, #64	; 0x40
 800b710:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b714:	2340      	movs	r3, #64	; 0x40
 800b716:	2200      	movs	r2, #0
 800b718:	2180      	movs	r1, #128	; 0x80
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f004 fec3 	bl	80104a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2201      	movs	r2, #1
 800b724:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2240      	movs	r2, #64	; 0x40
 800b72a:	621a      	str	r2, [r3, #32]

  return ret;
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b736:	b480      	push	{r7}
 800b738:	b083      	sub	sp, #12
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	460b      	mov	r3, r1
 800b740:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	78fa      	ldrb	r2, [r7, #3]
 800b746:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b764:	b2da      	uxtb	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2204      	movs	r2, #4
 800b770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b782:	b480      	push	{r7}
 800b784:	b083      	sub	sp, #12
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b04      	cmp	r3, #4
 800b794:	d106      	bne.n	800b7a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b03      	cmp	r3, #3
 800b7c4:	d110      	bne.n	800b7e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00b      	beq.n	800b7e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d6:	69db      	ldr	r3, [r3, #28]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d005      	beq.n	800b7e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e2:	69db      	ldr	r3, [r3, #28]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	32ae      	adds	r2, #174	; 0xae
 800b808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b810:	2303      	movs	r3, #3
 800b812:	e01c      	b.n	800b84e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	2b03      	cmp	r3, #3
 800b81e:	d115      	bne.n	800b84c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	32ae      	adds	r2, #174	; 0xae
 800b82a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00b      	beq.n	800b84c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	32ae      	adds	r2, #174	; 0xae
 800b83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b842:	6a1b      	ldr	r3, [r3, #32]
 800b844:	78fa      	ldrb	r2, [r7, #3]
 800b846:	4611      	mov	r1, r2
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b082      	sub	sp, #8
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	460b      	mov	r3, r1
 800b860:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	32ae      	adds	r2, #174	; 0xae
 800b86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b874:	2303      	movs	r3, #3
 800b876:	e01c      	b.n	800b8b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	2b03      	cmp	r3, #3
 800b882:	d115      	bne.n	800b8b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	32ae      	adds	r2, #174	; 0xae
 800b88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00b      	beq.n	800b8b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	32ae      	adds	r2, #174	; 0xae
 800b8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a8:	78fa      	ldrb	r2, [r7, #3]
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b083      	sub	sp, #12
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00e      	beq.n	800b90c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	6852      	ldr	r2, [r2, #4]
 800b8fa:	b2d2      	uxtb	r2, r2
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	4798      	blx	r3
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b908:	2303      	movs	r3, #3
 800b90a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b916:	b480      	push	{r7}
 800b918:	b083      	sub	sp, #12
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	460b      	mov	r3, r1
 800b920:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b922:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b93c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b93e:	4618      	mov	r0, r3
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b086      	sub	sp, #24
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	460b      	mov	r3, r1
 800b954:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b95e:	2300      	movs	r3, #0
 800b960:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	885b      	ldrh	r3, [r3, #2]
 800b966:	b29a      	uxth	r2, r3
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	429a      	cmp	r2, r3
 800b970:	d920      	bls.n	800b9b4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	b29b      	uxth	r3, r3
 800b978:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b97a:	e013      	b.n	800b9a4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b97c:	f107 030a 	add.w	r3, r7, #10
 800b980:	4619      	mov	r1, r3
 800b982:	6978      	ldr	r0, [r7, #20]
 800b984:	f000 f81b 	bl	800b9be <USBD_GetNextDesc>
 800b988:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	785b      	ldrb	r3, [r3, #1]
 800b98e:	2b05      	cmp	r3, #5
 800b990:	d108      	bne.n	800b9a4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	789b      	ldrb	r3, [r3, #2]
 800b99a:	78fa      	ldrb	r2, [r7, #3]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d008      	beq.n	800b9b2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	885b      	ldrh	r3, [r3, #2]
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	897b      	ldrh	r3, [r7, #10]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d8e5      	bhi.n	800b97c <USBD_GetEpDesc+0x32>
 800b9b0:	e000      	b.n	800b9b4 <USBD_GetEpDesc+0x6a>
          break;
 800b9b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b9b4:	693b      	ldr	r3, [r7, #16]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3718      	adds	r7, #24
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b9be:	b480      	push	{r7}
 800b9c0:	b085      	sub	sp, #20
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	881a      	ldrh	r2, [r3, #0]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	4413      	add	r3, r2
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba16:	8a3b      	ldrh	r3, [r7, #16]
 800ba18:	021b      	lsls	r3, r3, #8
 800ba1a:	b21a      	sxth	r2, r3
 800ba1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	b21b      	sxth	r3, r3
 800ba24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ba26:	89fb      	ldrh	r3, [r7, #14]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	371c      	adds	r7, #28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba4a:	2b40      	cmp	r3, #64	; 0x40
 800ba4c:	d005      	beq.n	800ba5a <USBD_StdDevReq+0x26>
 800ba4e:	2b40      	cmp	r3, #64	; 0x40
 800ba50:	d857      	bhi.n	800bb02 <USBD_StdDevReq+0xce>
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00f      	beq.n	800ba76 <USBD_StdDevReq+0x42>
 800ba56:	2b20      	cmp	r3, #32
 800ba58:	d153      	bne.n	800bb02 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	32ae      	adds	r2, #174	; 0xae
 800ba64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	4798      	blx	r3
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
      break;
 800ba74:	e04a      	b.n	800bb0c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	785b      	ldrb	r3, [r3, #1]
 800ba7a:	2b09      	cmp	r3, #9
 800ba7c:	d83b      	bhi.n	800baf6 <USBD_StdDevReq+0xc2>
 800ba7e:	a201      	add	r2, pc, #4	; (adr r2, 800ba84 <USBD_StdDevReq+0x50>)
 800ba80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba84:	0800bad9 	.word	0x0800bad9
 800ba88:	0800baed 	.word	0x0800baed
 800ba8c:	0800baf7 	.word	0x0800baf7
 800ba90:	0800bae3 	.word	0x0800bae3
 800ba94:	0800baf7 	.word	0x0800baf7
 800ba98:	0800bab7 	.word	0x0800bab7
 800ba9c:	0800baad 	.word	0x0800baad
 800baa0:	0800baf7 	.word	0x0800baf7
 800baa4:	0800bacf 	.word	0x0800bacf
 800baa8:	0800bac1 	.word	0x0800bac1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800baac:	6839      	ldr	r1, [r7, #0]
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fa3c 	bl	800bf2c <USBD_GetDescriptor>
          break;
 800bab4:	e024      	b.n	800bb00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bab6:	6839      	ldr	r1, [r7, #0]
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 fba1 	bl	800c200 <USBD_SetAddress>
          break;
 800babe:	e01f      	b.n	800bb00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 fbe0 	bl	800c288 <USBD_SetConfig>
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]
          break;
 800bacc:	e018      	b.n	800bb00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bace:	6839      	ldr	r1, [r7, #0]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fc83 	bl	800c3dc <USBD_GetConfig>
          break;
 800bad6:	e013      	b.n	800bb00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fcb4 	bl	800c448 <USBD_GetStatus>
          break;
 800bae0:	e00e      	b.n	800bb00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bae2:	6839      	ldr	r1, [r7, #0]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fce3 	bl	800c4b0 <USBD_SetFeature>
          break;
 800baea:	e009      	b.n	800bb00 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fd07 	bl	800c502 <USBD_ClrFeature>
          break;
 800baf4:	e004      	b.n	800bb00 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fd5e 	bl	800c5ba <USBD_CtlError>
          break;
 800bafe:	bf00      	nop
      }
      break;
 800bb00:	e004      	b.n	800bb0c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bb02:	6839      	ldr	r1, [r7, #0]
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 fd58 	bl	800c5ba <USBD_CtlError>
      break;
 800bb0a:	bf00      	nop
  }

  return ret;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop

0800bb18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb2e:	2b40      	cmp	r3, #64	; 0x40
 800bb30:	d005      	beq.n	800bb3e <USBD_StdItfReq+0x26>
 800bb32:	2b40      	cmp	r3, #64	; 0x40
 800bb34:	d852      	bhi.n	800bbdc <USBD_StdItfReq+0xc4>
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <USBD_StdItfReq+0x26>
 800bb3a:	2b20      	cmp	r3, #32
 800bb3c:	d14e      	bne.n	800bbdc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	3b01      	subs	r3, #1
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d840      	bhi.n	800bbce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	889b      	ldrh	r3, [r3, #4]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d836      	bhi.n	800bbc4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	889b      	ldrh	r3, [r3, #4]
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7ff fed9 	bl	800b916 <USBD_CoreFindIF>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb68:	7bbb      	ldrb	r3, [r7, #14]
 800bb6a:	2bff      	cmp	r3, #255	; 0xff
 800bb6c:	d01d      	beq.n	800bbaa <USBD_StdItfReq+0x92>
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d11a      	bne.n	800bbaa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bb74:	7bba      	ldrb	r2, [r7, #14]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	32ae      	adds	r2, #174	; 0xae
 800bb7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00f      	beq.n	800bba4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bb84:	7bba      	ldrb	r2, [r7, #14]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb8c:	7bba      	ldrb	r2, [r7, #14]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	32ae      	adds	r2, #174	; 0xae
 800bb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	6839      	ldr	r1, [r7, #0]
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	4798      	blx	r3
 800bb9e:	4603      	mov	r3, r0
 800bba0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bba2:	e004      	b.n	800bbae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bba4:	2303      	movs	r3, #3
 800bba6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bba8:	e001      	b.n	800bbae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	88db      	ldrh	r3, [r3, #6]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d110      	bne.n	800bbd8 <USBD_StdItfReq+0xc0>
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10d      	bne.n	800bbd8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 fdc7 	bl	800c750 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bbc2:	e009      	b.n	800bbd8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fcf7 	bl	800c5ba <USBD_CtlError>
          break;
 800bbcc:	e004      	b.n	800bbd8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fcf2 	bl	800c5ba <USBD_CtlError>
          break;
 800bbd6:	e000      	b.n	800bbda <USBD_StdItfReq+0xc2>
          break;
 800bbd8:	bf00      	nop
      }
      break;
 800bbda:	e004      	b.n	800bbe6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fceb 	bl	800c5ba <USBD_CtlError>
      break;
 800bbe4:	bf00      	nop
  }

  return ret;
 800bbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	889b      	ldrh	r3, [r3, #4]
 800bc02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc0c:	2b40      	cmp	r3, #64	; 0x40
 800bc0e:	d007      	beq.n	800bc20 <USBD_StdEPReq+0x30>
 800bc10:	2b40      	cmp	r3, #64	; 0x40
 800bc12:	f200 817f 	bhi.w	800bf14 <USBD_StdEPReq+0x324>
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d02a      	beq.n	800bc70 <USBD_StdEPReq+0x80>
 800bc1a:	2b20      	cmp	r3, #32
 800bc1c:	f040 817a 	bne.w	800bf14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc20:	7bbb      	ldrb	r3, [r7, #14]
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7ff fe83 	bl	800b930 <USBD_CoreFindEP>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc2e:	7b7b      	ldrb	r3, [r7, #13]
 800bc30:	2bff      	cmp	r3, #255	; 0xff
 800bc32:	f000 8174 	beq.w	800bf1e <USBD_StdEPReq+0x32e>
 800bc36:	7b7b      	ldrb	r3, [r7, #13]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f040 8170 	bne.w	800bf1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bc3e:	7b7a      	ldrb	r2, [r7, #13]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bc46:	7b7a      	ldrb	r2, [r7, #13]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	32ae      	adds	r2, #174	; 0xae
 800bc4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 8163 	beq.w	800bf1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bc58:	7b7a      	ldrb	r2, [r7, #13]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	32ae      	adds	r2, #174	; 0xae
 800bc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	4798      	blx	r3
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bc6e:	e156      	b.n	800bf1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	785b      	ldrb	r3, [r3, #1]
 800bc74:	2b03      	cmp	r3, #3
 800bc76:	d008      	beq.n	800bc8a <USBD_StdEPReq+0x9a>
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	f300 8145 	bgt.w	800bf08 <USBD_StdEPReq+0x318>
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 809b 	beq.w	800bdba <USBD_StdEPReq+0x1ca>
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d03c      	beq.n	800bd02 <USBD_StdEPReq+0x112>
 800bc88:	e13e      	b.n	800bf08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d002      	beq.n	800bc9c <USBD_StdEPReq+0xac>
 800bc96:	2b03      	cmp	r3, #3
 800bc98:	d016      	beq.n	800bcc8 <USBD_StdEPReq+0xd8>
 800bc9a:	e02c      	b.n	800bcf6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc9c:	7bbb      	ldrb	r3, [r7, #14]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00d      	beq.n	800bcbe <USBD_StdEPReq+0xce>
 800bca2:	7bbb      	ldrb	r3, [r7, #14]
 800bca4:	2b80      	cmp	r3, #128	; 0x80
 800bca6:	d00a      	beq.n	800bcbe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bca8:	7bbb      	ldrb	r3, [r7, #14]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f004 fc3f 	bl	8010530 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcb2:	2180      	movs	r1, #128	; 0x80
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f004 fc3b 	bl	8010530 <USBD_LL_StallEP>
 800bcba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bcbc:	e020      	b.n	800bd00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bcbe:	6839      	ldr	r1, [r7, #0]
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 fc7a 	bl	800c5ba <USBD_CtlError>
              break;
 800bcc6:	e01b      	b.n	800bd00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	885b      	ldrh	r3, [r3, #2]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10e      	bne.n	800bcee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00b      	beq.n	800bcee <USBD_StdEPReq+0xfe>
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	2b80      	cmp	r3, #128	; 0x80
 800bcda:	d008      	beq.n	800bcee <USBD_StdEPReq+0xfe>
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	88db      	ldrh	r3, [r3, #6]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d104      	bne.n	800bcee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bce4:	7bbb      	ldrb	r3, [r7, #14]
 800bce6:	4619      	mov	r1, r3
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f004 fc21 	bl	8010530 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fd2e 	bl	800c750 <USBD_CtlSendStatus>

              break;
 800bcf4:	e004      	b.n	800bd00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fc5e 	bl	800c5ba <USBD_CtlError>
              break;
 800bcfe:	bf00      	nop
          }
          break;
 800bd00:	e107      	b.n	800bf12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	d002      	beq.n	800bd14 <USBD_StdEPReq+0x124>
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d016      	beq.n	800bd40 <USBD_StdEPReq+0x150>
 800bd12:	e04b      	b.n	800bdac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd14:	7bbb      	ldrb	r3, [r7, #14]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00d      	beq.n	800bd36 <USBD_StdEPReq+0x146>
 800bd1a:	7bbb      	ldrb	r3, [r7, #14]
 800bd1c:	2b80      	cmp	r3, #128	; 0x80
 800bd1e:	d00a      	beq.n	800bd36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd20:	7bbb      	ldrb	r3, [r7, #14]
 800bd22:	4619      	mov	r1, r3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f004 fc03 	bl	8010530 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd2a:	2180      	movs	r1, #128	; 0x80
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f004 fbff 	bl	8010530 <USBD_LL_StallEP>
 800bd32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd34:	e040      	b.n	800bdb8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fc3e 	bl	800c5ba <USBD_CtlError>
              break;
 800bd3e:	e03b      	b.n	800bdb8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	885b      	ldrh	r3, [r3, #2]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d136      	bne.n	800bdb6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
 800bd4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d004      	beq.n	800bd5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd52:	7bbb      	ldrb	r3, [r7, #14]
 800bd54:	4619      	mov	r1, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f004 fc09 	bl	801056e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fcf7 	bl	800c750 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd62:	7bbb      	ldrb	r3, [r7, #14]
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7ff fde2 	bl	800b930 <USBD_CoreFindEP>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd70:	7b7b      	ldrb	r3, [r7, #13]
 800bd72:	2bff      	cmp	r3, #255	; 0xff
 800bd74:	d01f      	beq.n	800bdb6 <USBD_StdEPReq+0x1c6>
 800bd76:	7b7b      	ldrb	r3, [r7, #13]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d11c      	bne.n	800bdb6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bd7c:	7b7a      	ldrb	r2, [r7, #13]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bd84:	7b7a      	ldrb	r2, [r7, #13]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	32ae      	adds	r2, #174	; 0xae
 800bd8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d010      	beq.n	800bdb6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd94:	7b7a      	ldrb	r2, [r7, #13]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	32ae      	adds	r2, #174	; 0xae
 800bd9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	6839      	ldr	r1, [r7, #0]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	4798      	blx	r3
 800bda6:	4603      	mov	r3, r0
 800bda8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bdaa:	e004      	b.n	800bdb6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bdac:	6839      	ldr	r1, [r7, #0]
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fc03 	bl	800c5ba <USBD_CtlError>
              break;
 800bdb4:	e000      	b.n	800bdb8 <USBD_StdEPReq+0x1c8>
              break;
 800bdb6:	bf00      	nop
          }
          break;
 800bdb8:	e0ab      	b.n	800bf12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d002      	beq.n	800bdcc <USBD_StdEPReq+0x1dc>
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d032      	beq.n	800be30 <USBD_StdEPReq+0x240>
 800bdca:	e097      	b.n	800befc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d007      	beq.n	800bde2 <USBD_StdEPReq+0x1f2>
 800bdd2:	7bbb      	ldrb	r3, [r7, #14]
 800bdd4:	2b80      	cmp	r3, #128	; 0x80
 800bdd6:	d004      	beq.n	800bde2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fbed 	bl	800c5ba <USBD_CtlError>
                break;
 800bde0:	e091      	b.n	800bf06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bde2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	da0b      	bge.n	800be02 <USBD_StdEPReq+0x212>
 800bdea:	7bbb      	ldrb	r3, [r7, #14]
 800bdec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4413      	add	r3, r2
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	3310      	adds	r3, #16
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	3304      	adds	r3, #4
 800be00:	e00b      	b.n	800be1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be02:	7bbb      	ldrb	r3, [r7, #14]
 800be04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be08:	4613      	mov	r3, r2
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	4413      	add	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	4413      	add	r3, r2
 800be18:	3304      	adds	r3, #4
 800be1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	2200      	movs	r2, #0
 800be20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	2202      	movs	r2, #2
 800be26:	4619      	mov	r1, r3
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fc37 	bl	800c69c <USBD_CtlSendData>
              break;
 800be2e:	e06a      	b.n	800bf06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be34:	2b00      	cmp	r3, #0
 800be36:	da11      	bge.n	800be5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be38:	7bbb      	ldrb	r3, [r7, #14]
 800be3a:	f003 020f 	and.w	r2, r3, #15
 800be3e:	6879      	ldr	r1, [r7, #4]
 800be40:	4613      	mov	r3, r2
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	4413      	add	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	440b      	add	r3, r1
 800be4a:	3324      	adds	r3, #36	; 0x24
 800be4c:	881b      	ldrh	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d117      	bne.n	800be82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fbb0 	bl	800c5ba <USBD_CtlError>
                  break;
 800be5a:	e054      	b.n	800bf06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
 800be5e:	f003 020f 	and.w	r2, r3, #15
 800be62:	6879      	ldr	r1, [r7, #4]
 800be64:	4613      	mov	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	440b      	add	r3, r1
 800be6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d104      	bne.n	800be82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fb9d 	bl	800c5ba <USBD_CtlError>
                  break;
 800be80:	e041      	b.n	800bf06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be86:	2b00      	cmp	r3, #0
 800be88:	da0b      	bge.n	800bea2 <USBD_StdEPReq+0x2b2>
 800be8a:	7bbb      	ldrb	r3, [r7, #14]
 800be8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be90:	4613      	mov	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	3310      	adds	r3, #16
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	4413      	add	r3, r2
 800be9e:	3304      	adds	r3, #4
 800bea0:	e00b      	b.n	800beba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bea2:	7bbb      	ldrb	r3, [r7, #14]
 800bea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bea8:	4613      	mov	r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	4413      	add	r3, r2
 800beb8:	3304      	adds	r3, #4
 800beba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bebc:	7bbb      	ldrb	r3, [r7, #14]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d002      	beq.n	800bec8 <USBD_StdEPReq+0x2d8>
 800bec2:	7bbb      	ldrb	r3, [r7, #14]
 800bec4:	2b80      	cmp	r3, #128	; 0x80
 800bec6:	d103      	bne.n	800bed0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	e00e      	b.n	800beee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bed0:	7bbb      	ldrb	r3, [r7, #14]
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f004 fb69 	bl	80105ac <USBD_LL_IsStallEP>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	2201      	movs	r2, #1
 800bee4:	601a      	str	r2, [r3, #0]
 800bee6:	e002      	b.n	800beee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2200      	movs	r2, #0
 800beec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2202      	movs	r2, #2
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fbd1 	bl	800c69c <USBD_CtlSendData>
              break;
 800befa:	e004      	b.n	800bf06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fb5b 	bl	800c5ba <USBD_CtlError>
              break;
 800bf04:	bf00      	nop
          }
          break;
 800bf06:	e004      	b.n	800bf12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fb55 	bl	800c5ba <USBD_CtlError>
          break;
 800bf10:	bf00      	nop
      }
      break;
 800bf12:	e005      	b.n	800bf20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fb4f 	bl	800c5ba <USBD_CtlError>
      break;
 800bf1c:	e000      	b.n	800bf20 <USBD_StdEPReq+0x330>
      break;
 800bf1e:	bf00      	nop
  }

  return ret;
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
	...

0800bf2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf36:	2300      	movs	r3, #0
 800bf38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	885b      	ldrh	r3, [r3, #2]
 800bf46:	0a1b      	lsrs	r3, r3, #8
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	2b06      	cmp	r3, #6
 800bf4e:	f200 8128 	bhi.w	800c1a2 <USBD_GetDescriptor+0x276>
 800bf52:	a201      	add	r2, pc, #4	; (adr r2, 800bf58 <USBD_GetDescriptor+0x2c>)
 800bf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf58:	0800bf75 	.word	0x0800bf75
 800bf5c:	0800bf8d 	.word	0x0800bf8d
 800bf60:	0800bfcd 	.word	0x0800bfcd
 800bf64:	0800c1a3 	.word	0x0800c1a3
 800bf68:	0800c1a3 	.word	0x0800c1a3
 800bf6c:	0800c143 	.word	0x0800c143
 800bf70:	0800c16f 	.word	0x0800c16f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	7c12      	ldrb	r2, [r2, #16]
 800bf80:	f107 0108 	add.w	r1, r7, #8
 800bf84:	4610      	mov	r0, r2
 800bf86:	4798      	blx	r3
 800bf88:	60f8      	str	r0, [r7, #12]
      break;
 800bf8a:	e112      	b.n	800c1b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	7c1b      	ldrb	r3, [r3, #16]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10d      	bne.n	800bfb0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf9c:	f107 0208 	add.w	r2, r7, #8
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	4798      	blx	r3
 800bfa4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	2202      	movs	r2, #2
 800bfac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bfae:	e100      	b.n	800c1b2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb8:	f107 0208 	add.w	r2, r7, #8
 800bfbc:	4610      	mov	r0, r2
 800bfbe:	4798      	blx	r3
 800bfc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	701a      	strb	r2, [r3, #0]
      break;
 800bfca:	e0f2      	b.n	800c1b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	885b      	ldrh	r3, [r3, #2]
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	2b05      	cmp	r3, #5
 800bfd4:	f200 80ac 	bhi.w	800c130 <USBD_GetDescriptor+0x204>
 800bfd8:	a201      	add	r2, pc, #4	; (adr r2, 800bfe0 <USBD_GetDescriptor+0xb4>)
 800bfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfde:	bf00      	nop
 800bfe0:	0800bff9 	.word	0x0800bff9
 800bfe4:	0800c02d 	.word	0x0800c02d
 800bfe8:	0800c061 	.word	0x0800c061
 800bfec:	0800c095 	.word	0x0800c095
 800bff0:	0800c0c9 	.word	0x0800c0c9
 800bff4:	0800c0fd 	.word	0x0800c0fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00b      	beq.n	800c01c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	7c12      	ldrb	r2, [r2, #16]
 800c010:	f107 0108 	add.w	r1, r7, #8
 800c014:	4610      	mov	r0, r2
 800c016:	4798      	blx	r3
 800c018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c01a:	e091      	b.n	800c140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 facb 	bl	800c5ba <USBD_CtlError>
            err++;
 800c024:	7afb      	ldrb	r3, [r7, #11]
 800c026:	3301      	adds	r3, #1
 800c028:	72fb      	strb	r3, [r7, #11]
          break;
 800c02a:	e089      	b.n	800c140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00b      	beq.n	800c050 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	7c12      	ldrb	r2, [r2, #16]
 800c044:	f107 0108 	add.w	r1, r7, #8
 800c048:	4610      	mov	r0, r2
 800c04a:	4798      	blx	r3
 800c04c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c04e:	e077      	b.n	800c140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c050:	6839      	ldr	r1, [r7, #0]
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fab1 	bl	800c5ba <USBD_CtlError>
            err++;
 800c058:	7afb      	ldrb	r3, [r7, #11]
 800c05a:	3301      	adds	r3, #1
 800c05c:	72fb      	strb	r3, [r7, #11]
          break;
 800c05e:	e06f      	b.n	800c140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00b      	beq.n	800c084 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	7c12      	ldrb	r2, [r2, #16]
 800c078:	f107 0108 	add.w	r1, r7, #8
 800c07c:	4610      	mov	r0, r2
 800c07e:	4798      	blx	r3
 800c080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c082:	e05d      	b.n	800c140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fa97 	bl	800c5ba <USBD_CtlError>
            err++;
 800c08c:	7afb      	ldrb	r3, [r7, #11]
 800c08e:	3301      	adds	r3, #1
 800c090:	72fb      	strb	r3, [r7, #11]
          break;
 800c092:	e055      	b.n	800c140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00b      	beq.n	800c0b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	7c12      	ldrb	r2, [r2, #16]
 800c0ac:	f107 0108 	add.w	r1, r7, #8
 800c0b0:	4610      	mov	r0, r2
 800c0b2:	4798      	blx	r3
 800c0b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0b6:	e043      	b.n	800c140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fa7d 	bl	800c5ba <USBD_CtlError>
            err++;
 800c0c0:	7afb      	ldrb	r3, [r7, #11]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c0c6:	e03b      	b.n	800c140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0ce:	695b      	ldr	r3, [r3, #20]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00b      	beq.n	800c0ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0da:	695b      	ldr	r3, [r3, #20]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	7c12      	ldrb	r2, [r2, #16]
 800c0e0:	f107 0108 	add.w	r1, r7, #8
 800c0e4:	4610      	mov	r0, r2
 800c0e6:	4798      	blx	r3
 800c0e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ea:	e029      	b.n	800c140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0ec:	6839      	ldr	r1, [r7, #0]
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 fa63 	bl	800c5ba <USBD_CtlError>
            err++;
 800c0f4:	7afb      	ldrb	r3, [r7, #11]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0fa:	e021      	b.n	800c140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00b      	beq.n	800c120 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	7c12      	ldrb	r2, [r2, #16]
 800c114:	f107 0108 	add.w	r1, r7, #8
 800c118:	4610      	mov	r0, r2
 800c11a:	4798      	blx	r3
 800c11c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c11e:	e00f      	b.n	800c140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 fa49 	bl	800c5ba <USBD_CtlError>
            err++;
 800c128:	7afb      	ldrb	r3, [r7, #11]
 800c12a:	3301      	adds	r3, #1
 800c12c:	72fb      	strb	r3, [r7, #11]
          break;
 800c12e:	e007      	b.n	800c140 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fa41 	bl	800c5ba <USBD_CtlError>
          err++;
 800c138:	7afb      	ldrb	r3, [r7, #11]
 800c13a:	3301      	adds	r3, #1
 800c13c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c13e:	bf00      	nop
      }
      break;
 800c140:	e037      	b.n	800c1b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7c1b      	ldrb	r3, [r3, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d109      	bne.n	800c15e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c152:	f107 0208 	add.w	r2, r7, #8
 800c156:	4610      	mov	r0, r2
 800c158:	4798      	blx	r3
 800c15a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c15c:	e029      	b.n	800c1b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c15e:	6839      	ldr	r1, [r7, #0]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fa2a 	bl	800c5ba <USBD_CtlError>
        err++;
 800c166:	7afb      	ldrb	r3, [r7, #11]
 800c168:	3301      	adds	r3, #1
 800c16a:	72fb      	strb	r3, [r7, #11]
      break;
 800c16c:	e021      	b.n	800c1b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	7c1b      	ldrb	r3, [r3, #16]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10d      	bne.n	800c192 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17e:	f107 0208 	add.w	r2, r7, #8
 800c182:	4610      	mov	r0, r2
 800c184:	4798      	blx	r3
 800c186:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3301      	adds	r3, #1
 800c18c:	2207      	movs	r2, #7
 800c18e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c190:	e00f      	b.n	800c1b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fa10 	bl	800c5ba <USBD_CtlError>
        err++;
 800c19a:	7afb      	ldrb	r3, [r7, #11]
 800c19c:	3301      	adds	r3, #1
 800c19e:	72fb      	strb	r3, [r7, #11]
      break;
 800c1a0:	e007      	b.n	800c1b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fa08 	bl	800c5ba <USBD_CtlError>
      err++;
 800c1aa:	7afb      	ldrb	r3, [r7, #11]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	72fb      	strb	r3, [r7, #11]
      break;
 800c1b0:	bf00      	nop
  }

  if (err != 0U)
 800c1b2:	7afb      	ldrb	r3, [r7, #11]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d11e      	bne.n	800c1f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	88db      	ldrh	r3, [r3, #6]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d016      	beq.n	800c1ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c1c0:	893b      	ldrh	r3, [r7, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00e      	beq.n	800c1e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	88da      	ldrh	r2, [r3, #6]
 800c1ca:	893b      	ldrh	r3, [r7, #8]
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	bf28      	it	cs
 800c1d0:	4613      	movcs	r3, r2
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1d6:	893b      	ldrh	r3, [r7, #8]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	68f9      	ldr	r1, [r7, #12]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fa5d 	bl	800c69c <USBD_CtlSendData>
 800c1e2:	e009      	b.n	800c1f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f9e7 	bl	800c5ba <USBD_CtlError>
 800c1ec:	e004      	b.n	800c1f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 faae 	bl	800c750 <USBD_CtlSendStatus>
 800c1f4:	e000      	b.n	800c1f8 <USBD_GetDescriptor+0x2cc>
    return;
 800c1f6:	bf00      	nop
  }
}
 800c1f8:	3710      	adds	r7, #16
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop

0800c200 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	889b      	ldrh	r3, [r3, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d131      	bne.n	800c276 <USBD_SetAddress+0x76>
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	88db      	ldrh	r3, [r3, #6]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d12d      	bne.n	800c276 <USBD_SetAddress+0x76>
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	885b      	ldrh	r3, [r3, #2]
 800c21e:	2b7f      	cmp	r3, #127	; 0x7f
 800c220:	d829      	bhi.n	800c276 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	885b      	ldrh	r3, [r3, #2]
 800c226:	b2db      	uxtb	r3, r3
 800c228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c22c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b03      	cmp	r3, #3
 800c238:	d104      	bne.n	800c244 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f9bc 	bl	800c5ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c242:	e01d      	b.n	800c280 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7bfa      	ldrb	r2, [r7, #15]
 800c248:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f004 f9d7 	bl	8010604 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fa7a 	bl	800c750 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d004      	beq.n	800c26c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2202      	movs	r2, #2
 800c266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c26a:	e009      	b.n	800c280 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c274:	e004      	b.n	800c280 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f99e 	bl	800c5ba <USBD_CtlError>
  }
}
 800c27e:	bf00      	nop
 800c280:	bf00      	nop
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	885b      	ldrh	r3, [r3, #2]
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	4b4e      	ldr	r3, [pc, #312]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c29e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c2a0:	4b4d      	ldr	r3, [pc, #308]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d905      	bls.n	800c2b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f985 	bl	800c5ba <USBD_CtlError>
    return USBD_FAIL;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	e08c      	b.n	800c3ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d002      	beq.n	800c2c6 <USBD_SetConfig+0x3e>
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d029      	beq.n	800c318 <USBD_SetConfig+0x90>
 800c2c4:	e075      	b.n	800c3b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c2c6:	4b44      	ldr	r3, [pc, #272]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d020      	beq.n	800c310 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c2ce:	4b42      	ldr	r3, [pc, #264]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2d8:	4b3f      	ldr	r3, [pc, #252]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7fe ffe7 	bl	800b2b2 <USBD_SetClassConfig>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c2e8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d008      	beq.n	800c300 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 f962 	bl	800c5ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2202      	movs	r2, #2
 800c2fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c2fe:	e065      	b.n	800c3cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fa25 	bl	800c750 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2203      	movs	r2, #3
 800c30a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c30e:	e05d      	b.n	800c3cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fa1d 	bl	800c750 <USBD_CtlSendStatus>
      break;
 800c316:	e059      	b.n	800c3cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c318:	4b2f      	ldr	r3, [pc, #188]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d112      	bne.n	800c346 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2202      	movs	r2, #2
 800c324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c328:	4b2b      	ldr	r3, [pc, #172]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	461a      	mov	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c332:	4b29      	ldr	r3, [pc, #164]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	4619      	mov	r1, r3
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f7fe ffd6 	bl	800b2ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fa06 	bl	800c750 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c344:	e042      	b.n	800c3cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c346:	4b24      	ldr	r3, [pc, #144]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	461a      	mov	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	429a      	cmp	r2, r3
 800c352:	d02a      	beq.n	800c3aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	4619      	mov	r1, r3
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f7fe ffc4 	bl	800b2ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c362:	4b1d      	ldr	r3, [pc, #116]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c36c:	4b1a      	ldr	r3, [pc, #104]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	4619      	mov	r1, r3
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7fe ff9d 	bl	800b2b2 <USBD_SetClassConfig>
 800c378:	4603      	mov	r3, r0
 800c37a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00f      	beq.n	800c3a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f918 	bl	800c5ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	4619      	mov	r1, r3
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7fe ffa9 	bl	800b2ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2202      	movs	r2, #2
 800c39c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c3a0:	e014      	b.n	800c3cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f9d4 	bl	800c750 <USBD_CtlSendStatus>
      break;
 800c3a8:	e010      	b.n	800c3cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 f9d0 	bl	800c750 <USBD_CtlSendStatus>
      break;
 800c3b0:	e00c      	b.n	800c3cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c3b2:	6839      	ldr	r1, [r7, #0]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 f900 	bl	800c5ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3ba:	4b07      	ldr	r3, [pc, #28]	; (800c3d8 <USBD_SetConfig+0x150>)
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f7fe ff92 	bl	800b2ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c3c6:	2303      	movs	r3, #3
 800c3c8:	73fb      	strb	r3, [r7, #15]
      break;
 800c3ca:	bf00      	nop
  }

  return ret;
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	200008ac 	.word	0x200008ac

0800c3dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	88db      	ldrh	r3, [r3, #6]
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d004      	beq.n	800c3f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c3ee:	6839      	ldr	r1, [r7, #0]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f8e2 	bl	800c5ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c3f6:	e023      	b.n	800c440 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	2b02      	cmp	r3, #2
 800c402:	dc02      	bgt.n	800c40a <USBD_GetConfig+0x2e>
 800c404:	2b00      	cmp	r3, #0
 800c406:	dc03      	bgt.n	800c410 <USBD_GetConfig+0x34>
 800c408:	e015      	b.n	800c436 <USBD_GetConfig+0x5a>
 800c40a:	2b03      	cmp	r3, #3
 800c40c:	d00b      	beq.n	800c426 <USBD_GetConfig+0x4a>
 800c40e:	e012      	b.n	800c436 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	3308      	adds	r3, #8
 800c41a:	2201      	movs	r2, #1
 800c41c:	4619      	mov	r1, r3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 f93c 	bl	800c69c <USBD_CtlSendData>
        break;
 800c424:	e00c      	b.n	800c440 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	3304      	adds	r3, #4
 800c42a:	2201      	movs	r2, #1
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f934 	bl	800c69c <USBD_CtlSendData>
        break;
 800c434:	e004      	b.n	800c440 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f8be 	bl	800c5ba <USBD_CtlError>
        break;
 800c43e:	bf00      	nop
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	3b01      	subs	r3, #1
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d81e      	bhi.n	800c49e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	88db      	ldrh	r3, [r3, #6]
 800c464:	2b02      	cmp	r3, #2
 800c466:	d004      	beq.n	800c472 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 f8a5 	bl	800c5ba <USBD_CtlError>
        break;
 800c470:	e01a      	b.n	800c4a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2201      	movs	r2, #1
 800c476:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d005      	beq.n	800c48e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	f043 0202 	orr.w	r2, r3, #2
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	330c      	adds	r3, #12
 800c492:	2202      	movs	r2, #2
 800c494:	4619      	mov	r1, r3
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f900 	bl	800c69c <USBD_CtlSendData>
      break;
 800c49c:	e004      	b.n	800c4a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c49e:	6839      	ldr	r1, [r7, #0]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 f88a 	bl	800c5ba <USBD_CtlError>
      break;
 800c4a6:	bf00      	nop
  }
}
 800c4a8:	bf00      	nop
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	885b      	ldrh	r3, [r3, #2]
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d107      	bne.n	800c4d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f940 	bl	800c750 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c4d0:	e013      	b.n	800c4fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	885b      	ldrh	r3, [r3, #2]
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d10b      	bne.n	800c4f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	889b      	ldrh	r3, [r3, #4]
 800c4de:	0a1b      	lsrs	r3, r3, #8
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	b2da      	uxtb	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f930 	bl	800c750 <USBD_CtlSendStatus>
}
 800c4f0:	e003      	b.n	800c4fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c4f2:	6839      	ldr	r1, [r7, #0]
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 f860 	bl	800c5ba <USBD_CtlError>
}
 800c4fa:	bf00      	nop
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c512:	b2db      	uxtb	r3, r3
 800c514:	3b01      	subs	r3, #1
 800c516:	2b02      	cmp	r3, #2
 800c518:	d80b      	bhi.n	800c532 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	885b      	ldrh	r3, [r3, #2]
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d10c      	bne.n	800c53c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f910 	bl	800c750 <USBD_CtlSendStatus>
      }
      break;
 800c530:	e004      	b.n	800c53c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f840 	bl	800c5ba <USBD_CtlError>
      break;
 800c53a:	e000      	b.n	800c53e <USBD_ClrFeature+0x3c>
      break;
 800c53c:	bf00      	nop
  }
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b084      	sub	sp, #16
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	781a      	ldrb	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	3301      	adds	r3, #1
 800c560:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	781a      	ldrb	r2, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	3301      	adds	r3, #1
 800c56e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f7ff fa41 	bl	800b9f8 <SWAPBYTE>
 800c576:	4603      	mov	r3, r0
 800c578:	461a      	mov	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	3301      	adds	r3, #1
 800c582:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	3301      	adds	r3, #1
 800c588:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f7ff fa34 	bl	800b9f8 <SWAPBYTE>
 800c590:	4603      	mov	r3, r0
 800c592:	461a      	mov	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3301      	adds	r3, #1
 800c59c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f7ff fa27 	bl	800b9f8 <SWAPBYTE>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	80da      	strh	r2, [r3, #6]
}
 800c5b2:	bf00      	nop
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b082      	sub	sp, #8
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5c4:	2180      	movs	r1, #128	; 0x80
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f003 ffb2 	bl	8010530 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f003 ffae 	bl	8010530 <USBD_LL_StallEP>
}
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b086      	sub	sp, #24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d036      	beq.n	800c660 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c5f6:	6938      	ldr	r0, [r7, #16]
 800c5f8:	f000 f836 	bl	800c668 <USBD_GetLen>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	3301      	adds	r3, #1
 800c600:	b29b      	uxth	r3, r3
 800c602:	005b      	lsls	r3, r3, #1
 800c604:	b29a      	uxth	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c60a:	7dfb      	ldrb	r3, [r7, #23]
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	4413      	add	r3, r2
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	7812      	ldrb	r2, [r2, #0]
 800c614:	701a      	strb	r2, [r3, #0]
  idx++;
 800c616:	7dfb      	ldrb	r3, [r7, #23]
 800c618:	3301      	adds	r3, #1
 800c61a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c61c:	7dfb      	ldrb	r3, [r7, #23]
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	4413      	add	r3, r2
 800c622:	2203      	movs	r2, #3
 800c624:	701a      	strb	r2, [r3, #0]
  idx++;
 800c626:	7dfb      	ldrb	r3, [r7, #23]
 800c628:	3301      	adds	r3, #1
 800c62a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c62c:	e013      	b.n	800c656 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c62e:	7dfb      	ldrb	r3, [r7, #23]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	4413      	add	r3, r2
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	7812      	ldrb	r2, [r2, #0]
 800c638:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	3301      	adds	r3, #1
 800c63e:	613b      	str	r3, [r7, #16]
    idx++;
 800c640:	7dfb      	ldrb	r3, [r7, #23]
 800c642:	3301      	adds	r3, #1
 800c644:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c646:	7dfb      	ldrb	r3, [r7, #23]
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	4413      	add	r3, r2
 800c64c:	2200      	movs	r2, #0
 800c64e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c650:	7dfb      	ldrb	r3, [r7, #23]
 800c652:	3301      	adds	r3, #1
 800c654:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1e7      	bne.n	800c62e <USBD_GetString+0x52>
 800c65e:	e000      	b.n	800c662 <USBD_GetString+0x86>
    return;
 800c660:	bf00      	nop
  }
}
 800c662:	3718      	adds	r7, #24
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c670:	2300      	movs	r3, #0
 800c672:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c678:	e005      	b.n	800c686 <USBD_GetLen+0x1e>
  {
    len++;
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
 800c67c:	3301      	adds	r3, #1
 800c67e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	3301      	adds	r3, #1
 800c684:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1f5      	bne.n	800c67a <USBD_GetLen+0x12>
  }

  return len;
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3714      	adds	r7, #20
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f003 ffbd 	bl	8010642 <USBD_LL_Transmit>

  return USBD_OK;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b084      	sub	sp, #16
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	60f8      	str	r0, [r7, #12]
 800c6da:	60b9      	str	r1, [r7, #8]
 800c6dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f003 ffac 	bl	8010642 <USBD_LL_Transmit>

  return USBD_OK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2203      	movs	r2, #3
 800c704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	2100      	movs	r1, #0
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	f003 ffb0 	bl	8010684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b084      	sub	sp, #16
 800c732:	af00      	add	r7, sp, #0
 800c734:	60f8      	str	r0, [r7, #12]
 800c736:	60b9      	str	r1, [r7, #8]
 800c738:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	2100      	movs	r1, #0
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f003 ff9f 	bl	8010684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c746:	2300      	movs	r3, #0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3710      	adds	r7, #16
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2204      	movs	r2, #4
 800c75c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c760:	2300      	movs	r3, #0
 800c762:	2200      	movs	r2, #0
 800c764:	2100      	movs	r1, #0
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f003 ff6b 	bl	8010642 <USBD_LL_Transmit>

  return USBD_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b082      	sub	sp, #8
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2205      	movs	r2, #5
 800c782:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c786:	2300      	movs	r3, #0
 800c788:	2200      	movs	r2, #0
 800c78a:	2100      	movs	r1, #0
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f003 ff79 	bl	8010684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <__NVIC_SetPriority>:
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	6039      	str	r1, [r7, #0]
 800c7a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c7a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	db0a      	blt.n	800c7c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	490c      	ldr	r1, [pc, #48]	; (800c7e8 <__NVIC_SetPriority+0x4c>)
 800c7b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7ba:	0112      	lsls	r2, r2, #4
 800c7bc:	b2d2      	uxtb	r2, r2
 800c7be:	440b      	add	r3, r1
 800c7c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c7c4:	e00a      	b.n	800c7dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	4908      	ldr	r1, [pc, #32]	; (800c7ec <__NVIC_SetPriority+0x50>)
 800c7cc:	79fb      	ldrb	r3, [r7, #7]
 800c7ce:	f003 030f 	and.w	r3, r3, #15
 800c7d2:	3b04      	subs	r3, #4
 800c7d4:	0112      	lsls	r2, r2, #4
 800c7d6:	b2d2      	uxtb	r2, r2
 800c7d8:	440b      	add	r3, r1
 800c7da:	761a      	strb	r2, [r3, #24]
}
 800c7dc:	bf00      	nop
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	e000e100 	.word	0xe000e100
 800c7ec:	e000ed00 	.word	0xe000ed00

0800c7f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c7f4:	4b05      	ldr	r3, [pc, #20]	; (800c80c <SysTick_Handler+0x1c>)
 800c7f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c7f8:	f002 f93e 	bl	800ea78 <xTaskGetSchedulerState>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d001      	beq.n	800c806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c802:	f003 f821 	bl	800f848 <xPortSysTickHandler>
  }
}
 800c806:	bf00      	nop
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	e000e010 	.word	0xe000e010

0800c810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c810:	b580      	push	{r7, lr}
 800c812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c814:	2100      	movs	r1, #0
 800c816:	f06f 0004 	mvn.w	r0, #4
 800c81a:	f7ff ffbf 	bl	800c79c <__NVIC_SetPriority>
#endif
}
 800c81e:	bf00      	nop
 800c820:	bd80      	pop	{r7, pc}
	...

0800c824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c82a:	f3ef 8305 	mrs	r3, IPSR
 800c82e:	603b      	str	r3, [r7, #0]
  return(result);
 800c830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c836:	f06f 0305 	mvn.w	r3, #5
 800c83a:	607b      	str	r3, [r7, #4]
 800c83c:	e00c      	b.n	800c858 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c83e:	4b0a      	ldr	r3, [pc, #40]	; (800c868 <osKernelInitialize+0x44>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d105      	bne.n	800c852 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c846:	4b08      	ldr	r3, [pc, #32]	; (800c868 <osKernelInitialize+0x44>)
 800c848:	2201      	movs	r2, #1
 800c84a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	607b      	str	r3, [r7, #4]
 800c850:	e002      	b.n	800c858 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c852:	f04f 33ff 	mov.w	r3, #4294967295
 800c856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c858:	687b      	ldr	r3, [r7, #4]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	370c      	adds	r7, #12
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	200008b0 	.word	0x200008b0

0800c86c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c872:	f3ef 8305 	mrs	r3, IPSR
 800c876:	603b      	str	r3, [r7, #0]
  return(result);
 800c878:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d003      	beq.n	800c886 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c87e:	f06f 0305 	mvn.w	r3, #5
 800c882:	607b      	str	r3, [r7, #4]
 800c884:	e010      	b.n	800c8a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c886:	4b0b      	ldr	r3, [pc, #44]	; (800c8b4 <osKernelStart+0x48>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d109      	bne.n	800c8a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c88e:	f7ff ffbf 	bl	800c810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c892:	4b08      	ldr	r3, [pc, #32]	; (800c8b4 <osKernelStart+0x48>)
 800c894:	2202      	movs	r2, #2
 800c896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c898:	f001 fca6 	bl	800e1e8 <vTaskStartScheduler>
      stat = osOK;
 800c89c:	2300      	movs	r3, #0
 800c89e:	607b      	str	r3, [r7, #4]
 800c8a0:	e002      	b.n	800c8a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8a8:	687b      	ldr	r3, [r7, #4]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	200008b0 	.word	0x200008b0

0800c8b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08e      	sub	sp, #56	; 0x38
 800c8bc:	af04      	add	r7, sp, #16
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8c8:	f3ef 8305 	mrs	r3, IPSR
 800c8cc:	617b      	str	r3, [r7, #20]
  return(result);
 800c8ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d17e      	bne.n	800c9d2 <osThreadNew+0x11a>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d07b      	beq.n	800c9d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c8da:	2380      	movs	r3, #128	; 0x80
 800c8dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c8de:	2318      	movs	r3, #24
 800c8e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d045      	beq.n	800c97e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <osThreadNew+0x48>
        name = attr->name;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d002      	beq.n	800c90e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d008      	beq.n	800c926 <osThreadNew+0x6e>
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	2b38      	cmp	r3, #56	; 0x38
 800c918:	d805      	bhi.n	800c926 <osThreadNew+0x6e>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	f003 0301 	and.w	r3, r3, #1
 800c922:	2b00      	cmp	r3, #0
 800c924:	d001      	beq.n	800c92a <osThreadNew+0x72>
        return (NULL);
 800c926:	2300      	movs	r3, #0
 800c928:	e054      	b.n	800c9d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	695b      	ldr	r3, [r3, #20]
 800c936:	089b      	lsrs	r3, r3, #2
 800c938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00e      	beq.n	800c960 <osThreadNew+0xa8>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	2b5b      	cmp	r3, #91	; 0x5b
 800c948:	d90a      	bls.n	800c960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d006      	beq.n	800c960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d002      	beq.n	800c960 <osThreadNew+0xa8>
        mem = 1;
 800c95a:	2301      	movs	r3, #1
 800c95c:	61bb      	str	r3, [r7, #24]
 800c95e:	e010      	b.n	800c982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d10c      	bne.n	800c982 <osThreadNew+0xca>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d108      	bne.n	800c982 <osThreadNew+0xca>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d104      	bne.n	800c982 <osThreadNew+0xca>
          mem = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	61bb      	str	r3, [r7, #24]
 800c97c:	e001      	b.n	800c982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d110      	bne.n	800c9aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c990:	9202      	str	r2, [sp, #8]
 800c992:	9301      	str	r3, [sp, #4]
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	6a3a      	ldr	r2, [r7, #32]
 800c99c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f001 fa4c 	bl	800de3c <xTaskCreateStatic>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	613b      	str	r3, [r7, #16]
 800c9a8:	e013      	b.n	800c9d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d110      	bne.n	800c9d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c9b0:	6a3b      	ldr	r3, [r7, #32]
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	f107 0310 	add.w	r3, r7, #16
 800c9b8:	9301      	str	r3, [sp, #4]
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f001 fa97 	bl	800def6 <xTaskCreate>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d001      	beq.n	800c9d2 <osThreadNew+0x11a>
            hTask = NULL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c9d2:	693b      	ldr	r3, [r7, #16]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3728      	adds	r7, #40	; 0x28
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9e4:	f3ef 8305 	mrs	r3, IPSR
 800c9e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <osDelay+0x1c>
    stat = osErrorISR;
 800c9f0:	f06f 0305 	mvn.w	r3, #5
 800c9f4:	60fb      	str	r3, [r7, #12]
 800c9f6:	e007      	b.n	800ca08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d002      	beq.n	800ca08 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f001 fbbc 	bl	800e180 <vTaskDelay>
    }
  }

  return (stat);
 800ca08:	68fb      	ldr	r3, [r7, #12]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b08a      	sub	sp, #40	; 0x28
 800ca16:	af02      	add	r7, sp, #8
 800ca18:	60f8      	str	r0, [r7, #12]
 800ca1a:	60b9      	str	r1, [r7, #8]
 800ca1c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca22:	f3ef 8305 	mrs	r3, IPSR
 800ca26:	613b      	str	r3, [r7, #16]
  return(result);
 800ca28:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d175      	bne.n	800cb1a <osSemaphoreNew+0x108>
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d072      	beq.n	800cb1a <osSemaphoreNew+0x108>
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d86e      	bhi.n	800cb1a <osSemaphoreNew+0x108>
    mem = -1;
 800ca3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca40:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d015      	beq.n	800ca74 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d006      	beq.n	800ca5e <osSemaphoreNew+0x4c>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	2b4f      	cmp	r3, #79	; 0x4f
 800ca56:	d902      	bls.n	800ca5e <osSemaphoreNew+0x4c>
        mem = 1;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	61bb      	str	r3, [r7, #24]
 800ca5c:	e00c      	b.n	800ca78 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d108      	bne.n	800ca78 <osSemaphoreNew+0x66>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d104      	bne.n	800ca78 <osSemaphoreNew+0x66>
          mem = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	61bb      	str	r3, [r7, #24]
 800ca72:	e001      	b.n	800ca78 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ca74:	2300      	movs	r3, #0
 800ca76:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7e:	d04c      	beq.n	800cb1a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d128      	bne.n	800cad8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d10a      	bne.n	800caa2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	2203      	movs	r2, #3
 800ca92:	9200      	str	r2, [sp, #0]
 800ca94:	2200      	movs	r2, #0
 800ca96:	2100      	movs	r1, #0
 800ca98:	2001      	movs	r0, #1
 800ca9a:	f000 fa29 	bl	800cef0 <xQueueGenericCreateStatic>
 800ca9e:	61f8      	str	r0, [r7, #28]
 800caa0:	e005      	b.n	800caae <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800caa2:	2203      	movs	r2, #3
 800caa4:	2100      	movs	r1, #0
 800caa6:	2001      	movs	r0, #1
 800caa8:	f000 fa9a 	bl	800cfe0 <xQueueGenericCreate>
 800caac:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d022      	beq.n	800cafa <osSemaphoreNew+0xe8>
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d01f      	beq.n	800cafa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800caba:	2300      	movs	r3, #0
 800cabc:	2200      	movs	r2, #0
 800cabe:	2100      	movs	r1, #0
 800cac0:	69f8      	ldr	r0, [r7, #28]
 800cac2:	f000 fb55 	bl	800d170 <xQueueGenericSend>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d016      	beq.n	800cafa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800cacc:	69f8      	ldr	r0, [r7, #28]
 800cace:	f000 ffe1 	bl	800da94 <vQueueDelete>
            hSemaphore = NULL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	61fb      	str	r3, [r7, #28]
 800cad6:	e010      	b.n	800cafa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d108      	bne.n	800caf0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	461a      	mov	r2, r3
 800cae4:	68b9      	ldr	r1, [r7, #8]
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f000 fad7 	bl	800d09a <xQueueCreateCountingSemaphoreStatic>
 800caec:	61f8      	str	r0, [r7, #28]
 800caee:	e004      	b.n	800cafa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800caf0:	68b9      	ldr	r1, [r7, #8]
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f000 fb08 	bl	800d108 <xQueueCreateCountingSemaphore>
 800caf8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00c      	beq.n	800cb1a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d003      	beq.n	800cb0e <osSemaphoreNew+0xfc>
          name = attr->name;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	617b      	str	r3, [r7, #20]
 800cb0c:	e001      	b.n	800cb12 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cb12:	6979      	ldr	r1, [r7, #20]
 800cb14:	69f8      	ldr	r0, [r7, #28]
 800cb16:	f001 f909 	bl	800dd2c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cb1a:	69fb      	ldr	r3, [r7, #28]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3720      	adds	r7, #32
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d103      	bne.n	800cb44 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800cb3c:	f06f 0303 	mvn.w	r3, #3
 800cb40:	617b      	str	r3, [r7, #20]
 800cb42:	e039      	b.n	800cbb8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb44:	f3ef 8305 	mrs	r3, IPSR
 800cb48:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d022      	beq.n	800cb96 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d003      	beq.n	800cb5e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800cb56:	f06f 0303 	mvn.w	r3, #3
 800cb5a:	617b      	str	r3, [r7, #20]
 800cb5c:	e02c      	b.n	800cbb8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cb62:	f107 0308 	add.w	r3, r7, #8
 800cb66:	461a      	mov	r2, r3
 800cb68:	2100      	movs	r1, #0
 800cb6a:	6938      	ldr	r0, [r7, #16]
 800cb6c:	f000 ff12 	bl	800d994 <xQueueReceiveFromISR>
 800cb70:	4603      	mov	r3, r0
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d003      	beq.n	800cb7e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800cb76:	f06f 0302 	mvn.w	r3, #2
 800cb7a:	617b      	str	r3, [r7, #20]
 800cb7c:	e01c      	b.n	800cbb8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d019      	beq.n	800cbb8 <osSemaphoreAcquire+0x94>
 800cb84:	4b0f      	ldr	r3, [pc, #60]	; (800cbc4 <osSemaphoreAcquire+0xa0>)
 800cb86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb8a:	601a      	str	r2, [r3, #0]
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	e010      	b.n	800cbb8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cb96:	6839      	ldr	r1, [r7, #0]
 800cb98:	6938      	ldr	r0, [r7, #16]
 800cb9a:	f000 fdef 	bl	800d77c <xQueueSemaphoreTake>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d009      	beq.n	800cbb8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d003      	beq.n	800cbb2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800cbaa:	f06f 0301 	mvn.w	r3, #1
 800cbae:	617b      	str	r3, [r7, #20]
 800cbb0:	e002      	b.n	800cbb8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800cbb2:	f06f 0302 	mvn.w	r3, #2
 800cbb6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cbb8:	697b      	ldr	r3, [r7, #20]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3718      	adds	r7, #24
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	e000ed04 	.word	0xe000ed04

0800cbc8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b086      	sub	sp, #24
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d103      	bne.n	800cbe6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cbde:	f06f 0303 	mvn.w	r3, #3
 800cbe2:	617b      	str	r3, [r7, #20]
 800cbe4:	e02c      	b.n	800cc40 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbe6:	f3ef 8305 	mrs	r3, IPSR
 800cbea:	60fb      	str	r3, [r7, #12]
  return(result);
 800cbec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d01a      	beq.n	800cc28 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cbf6:	f107 0308 	add.w	r3, r7, #8
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	6938      	ldr	r0, [r7, #16]
 800cbfe:	f000 fc50 	bl	800d4a2 <xQueueGiveFromISR>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d003      	beq.n	800cc10 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800cc08:	f06f 0302 	mvn.w	r3, #2
 800cc0c:	617b      	str	r3, [r7, #20]
 800cc0e:	e017      	b.n	800cc40 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d014      	beq.n	800cc40 <osSemaphoreRelease+0x78>
 800cc16:	4b0d      	ldr	r3, [pc, #52]	; (800cc4c <osSemaphoreRelease+0x84>)
 800cc18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	e00b      	b.n	800cc40 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cc28:	2300      	movs	r3, #0
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	6938      	ldr	r0, [r7, #16]
 800cc30:	f000 fa9e 	bl	800d170 <xQueueGenericSend>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d002      	beq.n	800cc40 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800cc3a:	f06f 0302 	mvn.w	r3, #2
 800cc3e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800cc40:	697b      	ldr	r3, [r7, #20]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3718      	adds	r7, #24
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	e000ed04 	.word	0xe000ed04

0800cc50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cc50:	b480      	push	{r7}
 800cc52:	b085      	sub	sp, #20
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	4a07      	ldr	r2, [pc, #28]	; (800cc7c <vApplicationGetIdleTaskMemory+0x2c>)
 800cc60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	4a06      	ldr	r2, [pc, #24]	; (800cc80 <vApplicationGetIdleTaskMemory+0x30>)
 800cc66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2280      	movs	r2, #128	; 0x80
 800cc6c:	601a      	str	r2, [r3, #0]
}
 800cc6e:	bf00      	nop
 800cc70:	3714      	adds	r7, #20
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	200008b4 	.word	0x200008b4
 800cc80:	20000910 	.word	0x20000910

0800cc84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	4a07      	ldr	r2, [pc, #28]	; (800ccb0 <vApplicationGetTimerTaskMemory+0x2c>)
 800cc94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	4a06      	ldr	r2, [pc, #24]	; (800ccb4 <vApplicationGetTimerTaskMemory+0x30>)
 800cc9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cca2:	601a      	str	r2, [r3, #0]
}
 800cca4:	bf00      	nop
 800cca6:	3714      	adds	r7, #20
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr
 800ccb0:	20000b10 	.word	0x20000b10
 800ccb4:	20000b6c 	.word	0x20000b6c

0800ccb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f103 0208 	add.w	r2, r3, #8
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f103 0208 	add.w	r2, r3, #8
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f103 0208 	add.w	r2, r3, #8
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd06:	bf00      	nop
 800cd08:	370c      	adds	r7, #12
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr

0800cd12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd12:	b480      	push	{r7}
 800cd14:	b085      	sub	sp, #20
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	689a      	ldr	r2, [r3, #8]
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	1c5a      	adds	r2, r3, #1
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	601a      	str	r2, [r3, #0]
}
 800cd4e:	bf00      	nop
 800cd50:	3714      	adds	r7, #20
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	b085      	sub	sp, #20
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd70:	d103      	bne.n	800cd7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	691b      	ldr	r3, [r3, #16]
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	e00c      	b.n	800cd94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	3308      	adds	r3, #8
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	e002      	b.n	800cd88 <vListInsert+0x2e>
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	60fb      	str	r3, [r7, #12]
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	68ba      	ldr	r2, [r7, #8]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d2f6      	bcs.n	800cd82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	685a      	ldr	r2, [r3, #4]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	683a      	ldr	r2, [r7, #0]
 800cdae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	1c5a      	adds	r2, r3, #1
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	601a      	str	r2, [r3, #0]
}
 800cdc0:	bf00      	nop
 800cdc2:	3714      	adds	r7, #20
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	6892      	ldr	r2, [r2, #8]
 800cde2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	6852      	ldr	r2, [r2, #4]
 800cdec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d103      	bne.n	800ce00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	689a      	ldr	r2, [r3, #8]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	1e5a      	subs	r2, r3, #1
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3714      	adds	r7, #20
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10a      	bne.n	800ce4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ce34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ce46:	bf00      	nop
 800ce48:	e7fe      	b.n	800ce48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce4a:	f002 fc6b 	bl	800f724 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce56:	68f9      	ldr	r1, [r7, #12]
 800ce58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce5a:	fb01 f303 	mul.w	r3, r1, r3
 800ce5e:	441a      	add	r2, r3
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	68f9      	ldr	r1, [r7, #12]
 800ce7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce80:	fb01 f303 	mul.w	r3, r1, r3
 800ce84:	441a      	add	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	22ff      	movs	r2, #255	; 0xff
 800ce8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	22ff      	movs	r2, #255	; 0xff
 800ce96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d114      	bne.n	800ceca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d01a      	beq.n	800cede <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3310      	adds	r3, #16
 800ceac:	4618      	mov	r0, r3
 800ceae:	f001 fc25 	bl	800e6fc <xTaskRemoveFromEventList>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d012      	beq.n	800cede <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ceb8:	4b0c      	ldr	r3, [pc, #48]	; (800ceec <xQueueGenericReset+0xcc>)
 800ceba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	e009      	b.n	800cede <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	3310      	adds	r3, #16
 800cece:	4618      	mov	r0, r3
 800ced0:	f7ff fef2 	bl	800ccb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	3324      	adds	r3, #36	; 0x24
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7ff feed 	bl	800ccb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cede:	f002 fc51 	bl	800f784 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cee2:	2301      	movs	r3, #1
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3710      	adds	r7, #16
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	e000ed04 	.word	0xe000ed04

0800cef0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08e      	sub	sp, #56	; 0x38
 800cef4:	af02      	add	r7, sp, #8
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
 800cefc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10a      	bne.n	800cf1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf08:	f383 8811 	msr	BASEPRI, r3
 800cf0c:	f3bf 8f6f 	isb	sy
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf16:	bf00      	nop
 800cf18:	e7fe      	b.n	800cf18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10a      	bne.n	800cf36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf32:	bf00      	nop
 800cf34:	e7fe      	b.n	800cf34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d002      	beq.n	800cf42 <xQueueGenericCreateStatic+0x52>
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d001      	beq.n	800cf46 <xQueueGenericCreateStatic+0x56>
 800cf42:	2301      	movs	r3, #1
 800cf44:	e000      	b.n	800cf48 <xQueueGenericCreateStatic+0x58>
 800cf46:	2300      	movs	r3, #0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10a      	bne.n	800cf62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	623b      	str	r3, [r7, #32]
}
 800cf5e:	bf00      	nop
 800cf60:	e7fe      	b.n	800cf60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d102      	bne.n	800cf6e <xQueueGenericCreateStatic+0x7e>
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d101      	bne.n	800cf72 <xQueueGenericCreateStatic+0x82>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e000      	b.n	800cf74 <xQueueGenericCreateStatic+0x84>
 800cf72:	2300      	movs	r3, #0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10a      	bne.n	800cf8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	f383 8811 	msr	BASEPRI, r3
 800cf80:	f3bf 8f6f 	isb	sy
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	61fb      	str	r3, [r7, #28]
}
 800cf8a:	bf00      	nop
 800cf8c:	e7fe      	b.n	800cf8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf8e:	2350      	movs	r3, #80	; 0x50
 800cf90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	2b50      	cmp	r3, #80	; 0x50
 800cf96:	d00a      	beq.n	800cfae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9c:	f383 8811 	msr	BASEPRI, r3
 800cfa0:	f3bf 8f6f 	isb	sy
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	61bb      	str	r3, [r7, #24]
}
 800cfaa:	bf00      	nop
 800cfac:	e7fe      	b.n	800cfac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cfae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d00d      	beq.n	800cfd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	68b9      	ldr	r1, [r7, #8]
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f000 f83f 	bl	800d054 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3730      	adds	r7, #48	; 0x30
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b08a      	sub	sp, #40	; 0x28
 800cfe4:	af02      	add	r7, sp, #8
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	4613      	mov	r3, r2
 800cfec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10a      	bne.n	800d00a <xQueueGenericCreate+0x2a>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	613b      	str	r3, [r7, #16]
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	fb02 f303 	mul.w	r3, r2, r3
 800d012:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	3350      	adds	r3, #80	; 0x50
 800d018:	4618      	mov	r0, r3
 800d01a:	f002 fca5 	bl	800f968 <pvPortMalloc>
 800d01e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d011      	beq.n	800d04a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	3350      	adds	r3, #80	; 0x50
 800d02e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	2200      	movs	r2, #0
 800d034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d038:	79fa      	ldrb	r2, [r7, #7]
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	4613      	mov	r3, r2
 800d040:	697a      	ldr	r2, [r7, #20]
 800d042:	68b9      	ldr	r1, [r7, #8]
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f000 f805 	bl	800d054 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d04a:	69bb      	ldr	r3, [r7, #24]
	}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3720      	adds	r7, #32
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	607a      	str	r2, [r7, #4]
 800d060:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d103      	bne.n	800d070 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	69ba      	ldr	r2, [r7, #24]
 800d06c:	601a      	str	r2, [r3, #0]
 800d06e:	e002      	b.n	800d076 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d082:	2101      	movs	r1, #1
 800d084:	69b8      	ldr	r0, [r7, #24]
 800d086:	f7ff fecb 	bl	800ce20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	78fa      	ldrb	r2, [r7, #3]
 800d08e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d092:	bf00      	nop
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b08a      	sub	sp, #40	; 0x28
 800d09e:	af02      	add	r7, sp, #8
 800d0a0:	60f8      	str	r0, [r7, #12]
 800d0a2:	60b9      	str	r1, [r7, #8]
 800d0a4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d10a      	bne.n	800d0c2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b0:	f383 8811 	msr	BASEPRI, r3
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	f3bf 8f4f 	dsb	sy
 800d0bc:	61bb      	str	r3, [r7, #24]
}
 800d0be:	bf00      	nop
 800d0c0:	e7fe      	b.n	800d0c0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d0c2:	68ba      	ldr	r2, [r7, #8]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d90a      	bls.n	800d0e0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ce:	f383 8811 	msr	BASEPRI, r3
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	617b      	str	r3, [r7, #20]
}
 800d0dc:	bf00      	nop
 800d0de:	e7fe      	b.n	800d0de <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	2100      	movs	r1, #0
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f7ff ff00 	bl	800cef0 <xQueueGenericCreateStatic>
 800d0f0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d002      	beq.n	800d0fe <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	68ba      	ldr	r2, [r7, #8]
 800d0fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d0fe:	69fb      	ldr	r3, [r7, #28]
	}
 800d100:	4618      	mov	r0, r3
 800d102:	3720      	adds	r7, #32
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10a      	bne.n	800d12e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	613b      	str	r3, [r7, #16]
}
 800d12a:	bf00      	nop
 800d12c:	e7fe      	b.n	800d12c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	429a      	cmp	r2, r3
 800d134:	d90a      	bls.n	800d14c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	60fb      	str	r3, [r7, #12]
}
 800d148:	bf00      	nop
 800d14a:	e7fe      	b.n	800d14a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d14c:	2202      	movs	r2, #2
 800d14e:	2100      	movs	r1, #0
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7ff ff45 	bl	800cfe0 <xQueueGenericCreate>
 800d156:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d002      	beq.n	800d164 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	683a      	ldr	r2, [r7, #0]
 800d162:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d164:	697b      	ldr	r3, [r7, #20]
	}
 800d166:	4618      	mov	r0, r3
 800d168:	3718      	adds	r7, #24
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
	...

0800d170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08e      	sub	sp, #56	; 0x38
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d17e:	2300      	movs	r3, #0
 800d180:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10a      	bne.n	800d1a2 <xQueueGenericSend+0x32>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d19e:	bf00      	nop
 800d1a0:	e7fe      	b.n	800d1a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d103      	bne.n	800d1b0 <xQueueGenericSend+0x40>
 800d1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d101      	bne.n	800d1b4 <xQueueGenericSend+0x44>
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	e000      	b.n	800d1b6 <xQueueGenericSend+0x46>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d10a      	bne.n	800d1d0 <xQueueGenericSend+0x60>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1cc:	bf00      	nop
 800d1ce:	e7fe      	b.n	800d1ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d103      	bne.n	800d1de <xQueueGenericSend+0x6e>
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d101      	bne.n	800d1e2 <xQueueGenericSend+0x72>
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e000      	b.n	800d1e4 <xQueueGenericSend+0x74>
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10a      	bne.n	800d1fe <xQueueGenericSend+0x8e>
	__asm volatile
 800d1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ec:	f383 8811 	msr	BASEPRI, r3
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	623b      	str	r3, [r7, #32]
}
 800d1fa:	bf00      	nop
 800d1fc:	e7fe      	b.n	800d1fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1fe:	f001 fc3b 	bl	800ea78 <xTaskGetSchedulerState>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d102      	bne.n	800d20e <xQueueGenericSend+0x9e>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d101      	bne.n	800d212 <xQueueGenericSend+0xa2>
 800d20e:	2301      	movs	r3, #1
 800d210:	e000      	b.n	800d214 <xQueueGenericSend+0xa4>
 800d212:	2300      	movs	r3, #0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10a      	bne.n	800d22e <xQueueGenericSend+0xbe>
	__asm volatile
 800d218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21c:	f383 8811 	msr	BASEPRI, r3
 800d220:	f3bf 8f6f 	isb	sy
 800d224:	f3bf 8f4f 	dsb	sy
 800d228:	61fb      	str	r3, [r7, #28]
}
 800d22a:	bf00      	nop
 800d22c:	e7fe      	b.n	800d22c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d22e:	f002 fa79 	bl	800f724 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d302      	bcc.n	800d244 <xQueueGenericSend+0xd4>
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2b02      	cmp	r3, #2
 800d242:	d129      	bne.n	800d298 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	68b9      	ldr	r1, [r7, #8]
 800d248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d24a:	f000 fc5e 	bl	800db0a <prvCopyDataToQueue>
 800d24e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d254:	2b00      	cmp	r3, #0
 800d256:	d010      	beq.n	800d27a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25a:	3324      	adds	r3, #36	; 0x24
 800d25c:	4618      	mov	r0, r3
 800d25e:	f001 fa4d 	bl	800e6fc <xTaskRemoveFromEventList>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d013      	beq.n	800d290 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d268:	4b3f      	ldr	r3, [pc, #252]	; (800d368 <xQueueGenericSend+0x1f8>)
 800d26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d26e:	601a      	str	r2, [r3, #0]
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	f3bf 8f6f 	isb	sy
 800d278:	e00a      	b.n	800d290 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d007      	beq.n	800d290 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d280:	4b39      	ldr	r3, [pc, #228]	; (800d368 <xQueueGenericSend+0x1f8>)
 800d282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d286:	601a      	str	r2, [r3, #0]
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d290:	f002 fa78 	bl	800f784 <vPortExitCritical>
				return pdPASS;
 800d294:	2301      	movs	r3, #1
 800d296:	e063      	b.n	800d360 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d103      	bne.n	800d2a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d29e:	f002 fa71 	bl	800f784 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e05c      	b.n	800d360 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d106      	bne.n	800d2ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2ac:	f107 0314 	add.w	r3, r7, #20
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f001 fa87 	bl	800e7c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2ba:	f002 fa63 	bl	800f784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2be:	f000 fff9 	bl	800e2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2c2:	f002 fa2f 	bl	800f724 <vPortEnterCritical>
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2cc:	b25b      	sxtb	r3, r3
 800d2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d2:	d103      	bne.n	800d2dc <xQueueGenericSend+0x16c>
 800d2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2e2:	b25b      	sxtb	r3, r3
 800d2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e8:	d103      	bne.n	800d2f2 <xQueueGenericSend+0x182>
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2f2:	f002 fa47 	bl	800f784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2f6:	1d3a      	adds	r2, r7, #4
 800d2f8:	f107 0314 	add.w	r3, r7, #20
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	4618      	mov	r0, r3
 800d300:	f001 fa76 	bl	800e7f0 <xTaskCheckForTimeOut>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d124      	bne.n	800d354 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d30a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d30c:	f000 fcf5 	bl	800dcfa <prvIsQueueFull>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d018      	beq.n	800d348 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d318:	3310      	adds	r3, #16
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	4611      	mov	r1, r2
 800d31e:	4618      	mov	r0, r3
 800d320:	f001 f99c 	bl	800e65c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d326:	f000 fc80 	bl	800dc2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d32a:	f000 ffd1 	bl	800e2d0 <xTaskResumeAll>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	f47f af7c 	bne.w	800d22e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d336:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <xQueueGenericSend+0x1f8>)
 800d338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d33c:	601a      	str	r2, [r3, #0]
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	e772      	b.n	800d22e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d34a:	f000 fc6e 	bl	800dc2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d34e:	f000 ffbf 	bl	800e2d0 <xTaskResumeAll>
 800d352:	e76c      	b.n	800d22e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d356:	f000 fc68 	bl	800dc2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d35a:	f000 ffb9 	bl	800e2d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d35e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d360:	4618      	mov	r0, r3
 800d362:	3738      	adds	r7, #56	; 0x38
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	e000ed04 	.word	0xe000ed04

0800d36c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b090      	sub	sp, #64	; 0x40
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	607a      	str	r2, [r7, #4]
 800d378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10a      	bne.n	800d39a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d103      	bne.n	800d3a8 <xQueueGenericSendFromISR+0x3c>
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d101      	bne.n	800d3ac <xQueueGenericSendFromISR+0x40>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e000      	b.n	800d3ae <xQueueGenericSendFromISR+0x42>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10a      	bne.n	800d3c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3c4:	bf00      	nop
 800d3c6:	e7fe      	b.n	800d3c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	2b02      	cmp	r3, #2
 800d3cc:	d103      	bne.n	800d3d6 <xQueueGenericSendFromISR+0x6a>
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d101      	bne.n	800d3da <xQueueGenericSendFromISR+0x6e>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e000      	b.n	800d3dc <xQueueGenericSendFromISR+0x70>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d10a      	bne.n	800d3f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e4:	f383 8811 	msr	BASEPRI, r3
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	623b      	str	r3, [r7, #32]
}
 800d3f2:	bf00      	nop
 800d3f4:	e7fe      	b.n	800d3f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3f6:	f002 fa77 	bl	800f8e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3fa:	f3ef 8211 	mrs	r2, BASEPRI
 800d3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d402:	f383 8811 	msr	BASEPRI, r3
 800d406:	f3bf 8f6f 	isb	sy
 800d40a:	f3bf 8f4f 	dsb	sy
 800d40e:	61fa      	str	r2, [r7, #28]
 800d410:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d412:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d414:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d41e:	429a      	cmp	r2, r3
 800d420:	d302      	bcc.n	800d428 <xQueueGenericSendFromISR+0xbc>
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	2b02      	cmp	r3, #2
 800d426:	d12f      	bne.n	800d488 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d436:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d438:	683a      	ldr	r2, [r7, #0]
 800d43a:	68b9      	ldr	r1, [r7, #8]
 800d43c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d43e:	f000 fb64 	bl	800db0a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d442:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44a:	d112      	bne.n	800d472 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d450:	2b00      	cmp	r3, #0
 800d452:	d016      	beq.n	800d482 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	3324      	adds	r3, #36	; 0x24
 800d458:	4618      	mov	r0, r3
 800d45a:	f001 f94f 	bl	800e6fc <xTaskRemoveFromEventList>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00e      	beq.n	800d482 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00b      	beq.n	800d482 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2201      	movs	r2, #1
 800d46e:	601a      	str	r2, [r3, #0]
 800d470:	e007      	b.n	800d482 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d476:	3301      	adds	r3, #1
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	b25a      	sxtb	r2, r3
 800d47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d482:	2301      	movs	r3, #1
 800d484:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d486:	e001      	b.n	800d48c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d488:	2300      	movs	r3, #0
 800d48a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d48e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d496:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3740      	adds	r7, #64	; 0x40
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b08e      	sub	sp, #56	; 0x38
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
 800d4aa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d10a      	bne.n	800d4cc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	623b      	str	r3, [r7, #32]
}
 800d4c8:	bf00      	nop
 800d4ca:	e7fe      	b.n	800d4ca <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00a      	beq.n	800d4ea <xQueueGiveFromISR+0x48>
	__asm volatile
 800d4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d8:	f383 8811 	msr	BASEPRI, r3
 800d4dc:	f3bf 8f6f 	isb	sy
 800d4e0:	f3bf 8f4f 	dsb	sy
 800d4e4:	61fb      	str	r3, [r7, #28]
}
 800d4e6:	bf00      	nop
 800d4e8:	e7fe      	b.n	800d4e8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d103      	bne.n	800d4fa <xQueueGiveFromISR+0x58>
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d101      	bne.n	800d4fe <xQueueGiveFromISR+0x5c>
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e000      	b.n	800d500 <xQueueGiveFromISR+0x5e>
 800d4fe:	2300      	movs	r3, #0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10a      	bne.n	800d51a <xQueueGiveFromISR+0x78>
	__asm volatile
 800d504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d508:	f383 8811 	msr	BASEPRI, r3
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	f3bf 8f4f 	dsb	sy
 800d514:	61bb      	str	r3, [r7, #24]
}
 800d516:	bf00      	nop
 800d518:	e7fe      	b.n	800d518 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d51a:	f002 f9e5 	bl	800f8e8 <vPortValidateInterruptPriority>
	__asm volatile
 800d51e:	f3ef 8211 	mrs	r2, BASEPRI
 800d522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d526:	f383 8811 	msr	BASEPRI, r3
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	f3bf 8f4f 	dsb	sy
 800d532:	617a      	str	r2, [r7, #20]
 800d534:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d536:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d538:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d53e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d546:	429a      	cmp	r2, r3
 800d548:	d22b      	bcs.n	800d5a2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d556:	1c5a      	adds	r2, r3, #1
 800d558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d55c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d564:	d112      	bne.n	800d58c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d016      	beq.n	800d59c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	3324      	adds	r3, #36	; 0x24
 800d572:	4618      	mov	r0, r3
 800d574:	f001 f8c2 	bl	800e6fc <xTaskRemoveFromEventList>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00e      	beq.n	800d59c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00b      	beq.n	800d59c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	2201      	movs	r2, #1
 800d588:	601a      	str	r2, [r3, #0]
 800d58a:	e007      	b.n	800d59c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d590:	3301      	adds	r3, #1
 800d592:	b2db      	uxtb	r3, r3
 800d594:	b25a      	sxtb	r2, r3
 800d596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d59c:	2301      	movs	r3, #1
 800d59e:	637b      	str	r3, [r7, #52]	; 0x34
 800d5a0:	e001      	b.n	800d5a6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	637b      	str	r3, [r7, #52]	; 0x34
 800d5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f383 8811 	msr	BASEPRI, r3
}
 800d5b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3738      	adds	r7, #56	; 0x38
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08c      	sub	sp, #48	; 0x30
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10a      	bne.n	800d5ec <xQueueReceive+0x30>
	__asm volatile
 800d5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5da:	f383 8811 	msr	BASEPRI, r3
 800d5de:	f3bf 8f6f 	isb	sy
 800d5e2:	f3bf 8f4f 	dsb	sy
 800d5e6:	623b      	str	r3, [r7, #32]
}
 800d5e8:	bf00      	nop
 800d5ea:	e7fe      	b.n	800d5ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d103      	bne.n	800d5fa <xQueueReceive+0x3e>
 800d5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d101      	bne.n	800d5fe <xQueueReceive+0x42>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e000      	b.n	800d600 <xQueueReceive+0x44>
 800d5fe:	2300      	movs	r3, #0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10a      	bne.n	800d61a <xQueueReceive+0x5e>
	__asm volatile
 800d604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d608:	f383 8811 	msr	BASEPRI, r3
 800d60c:	f3bf 8f6f 	isb	sy
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	61fb      	str	r3, [r7, #28]
}
 800d616:	bf00      	nop
 800d618:	e7fe      	b.n	800d618 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d61a:	f001 fa2d 	bl	800ea78 <xTaskGetSchedulerState>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d102      	bne.n	800d62a <xQueueReceive+0x6e>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d101      	bne.n	800d62e <xQueueReceive+0x72>
 800d62a:	2301      	movs	r3, #1
 800d62c:	e000      	b.n	800d630 <xQueueReceive+0x74>
 800d62e:	2300      	movs	r3, #0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10a      	bne.n	800d64a <xQueueReceive+0x8e>
	__asm volatile
 800d634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d638:	f383 8811 	msr	BASEPRI, r3
 800d63c:	f3bf 8f6f 	isb	sy
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	61bb      	str	r3, [r7, #24]
}
 800d646:	bf00      	nop
 800d648:	e7fe      	b.n	800d648 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d64a:	f002 f86b 	bl	800f724 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d652:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d656:	2b00      	cmp	r3, #0
 800d658:	d01f      	beq.n	800d69a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d65a:	68b9      	ldr	r1, [r7, #8]
 800d65c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d65e:	f000 fabe 	bl	800dbde <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d664:	1e5a      	subs	r2, r3, #1
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00f      	beq.n	800d692 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d674:	3310      	adds	r3, #16
 800d676:	4618      	mov	r0, r3
 800d678:	f001 f840 	bl	800e6fc <xTaskRemoveFromEventList>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d007      	beq.n	800d692 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d682:	4b3d      	ldr	r3, [pc, #244]	; (800d778 <xQueueReceive+0x1bc>)
 800d684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d688:	601a      	str	r2, [r3, #0]
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d692:	f002 f877 	bl	800f784 <vPortExitCritical>
				return pdPASS;
 800d696:	2301      	movs	r3, #1
 800d698:	e069      	b.n	800d76e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d103      	bne.n	800d6a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6a0:	f002 f870 	bl	800f784 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	e062      	b.n	800d76e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d106      	bne.n	800d6bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6ae:	f107 0310 	add.w	r3, r7, #16
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f001 f886 	bl	800e7c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6bc:	f002 f862 	bl	800f784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6c0:	f000 fdf8 	bl	800e2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6c4:	f002 f82e 	bl	800f724 <vPortEnterCritical>
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6ce:	b25b      	sxtb	r3, r3
 800d6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d4:	d103      	bne.n	800d6de <xQueueReceive+0x122>
 800d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6e4:	b25b      	sxtb	r3, r3
 800d6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ea:	d103      	bne.n	800d6f4 <xQueueReceive+0x138>
 800d6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6f4:	f002 f846 	bl	800f784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6f8:	1d3a      	adds	r2, r7, #4
 800d6fa:	f107 0310 	add.w	r3, r7, #16
 800d6fe:	4611      	mov	r1, r2
 800d700:	4618      	mov	r0, r3
 800d702:	f001 f875 	bl	800e7f0 <xTaskCheckForTimeOut>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d123      	bne.n	800d754 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d70c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d70e:	f000 fade 	bl	800dcce <prvIsQueueEmpty>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d017      	beq.n	800d748 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71a:	3324      	adds	r3, #36	; 0x24
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	4611      	mov	r1, r2
 800d720:	4618      	mov	r0, r3
 800d722:	f000 ff9b 	bl	800e65c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d728:	f000 fa7f 	bl	800dc2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d72c:	f000 fdd0 	bl	800e2d0 <xTaskResumeAll>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d189      	bne.n	800d64a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d736:	4b10      	ldr	r3, [pc, #64]	; (800d778 <xQueueReceive+0x1bc>)
 800d738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d73c:	601a      	str	r2, [r3, #0]
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	e780      	b.n	800d64a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d74a:	f000 fa6e 	bl	800dc2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d74e:	f000 fdbf 	bl	800e2d0 <xTaskResumeAll>
 800d752:	e77a      	b.n	800d64a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d756:	f000 fa68 	bl	800dc2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d75a:	f000 fdb9 	bl	800e2d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d75e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d760:	f000 fab5 	bl	800dcce <prvIsQueueEmpty>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	f43f af6f 	beq.w	800d64a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d76c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3730      	adds	r7, #48	; 0x30
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	e000ed04 	.word	0xe000ed04

0800d77c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b08e      	sub	sp, #56	; 0x38
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d786:	2300      	movs	r3, #0
 800d788:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d78e:	2300      	movs	r3, #0
 800d790:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10a      	bne.n	800d7ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79c:	f383 8811 	msr	BASEPRI, r3
 800d7a0:	f3bf 8f6f 	isb	sy
 800d7a4:	f3bf 8f4f 	dsb	sy
 800d7a8:	623b      	str	r3, [r7, #32]
}
 800d7aa:	bf00      	nop
 800d7ac:	e7fe      	b.n	800d7ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00a      	beq.n	800d7cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ba:	f383 8811 	msr	BASEPRI, r3
 800d7be:	f3bf 8f6f 	isb	sy
 800d7c2:	f3bf 8f4f 	dsb	sy
 800d7c6:	61fb      	str	r3, [r7, #28]
}
 800d7c8:	bf00      	nop
 800d7ca:	e7fe      	b.n	800d7ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7cc:	f001 f954 	bl	800ea78 <xTaskGetSchedulerState>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d102      	bne.n	800d7dc <xQueueSemaphoreTake+0x60>
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d101      	bne.n	800d7e0 <xQueueSemaphoreTake+0x64>
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e000      	b.n	800d7e2 <xQueueSemaphoreTake+0x66>
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d10a      	bne.n	800d7fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ea:	f383 8811 	msr	BASEPRI, r3
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	61bb      	str	r3, [r7, #24]
}
 800d7f8:	bf00      	nop
 800d7fa:	e7fe      	b.n	800d7fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7fc:	f001 ff92 	bl	800f724 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d804:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d024      	beq.n	800d856 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80e:	1e5a      	subs	r2, r3, #1
 800d810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d812:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d104      	bne.n	800d826 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d81c:	f001 faa2 	bl	800ed64 <pvTaskIncrementMutexHeldCount>
 800d820:	4602      	mov	r2, r0
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00f      	beq.n	800d84e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	3310      	adds	r3, #16
 800d832:	4618      	mov	r0, r3
 800d834:	f000 ff62 	bl	800e6fc <xTaskRemoveFromEventList>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d007      	beq.n	800d84e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d83e:	4b54      	ldr	r3, [pc, #336]	; (800d990 <xQueueSemaphoreTake+0x214>)
 800d840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d844:	601a      	str	r2, [r3, #0]
 800d846:	f3bf 8f4f 	dsb	sy
 800d84a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d84e:	f001 ff99 	bl	800f784 <vPortExitCritical>
				return pdPASS;
 800d852:	2301      	movs	r3, #1
 800d854:	e097      	b.n	800d986 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d111      	bne.n	800d880 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00a      	beq.n	800d878 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	617b      	str	r3, [r7, #20]
}
 800d874:	bf00      	nop
 800d876:	e7fe      	b.n	800d876 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d878:	f001 ff84 	bl	800f784 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d87c:	2300      	movs	r3, #0
 800d87e:	e082      	b.n	800d986 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d882:	2b00      	cmp	r3, #0
 800d884:	d106      	bne.n	800d894 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d886:	f107 030c 	add.w	r3, r7, #12
 800d88a:	4618      	mov	r0, r3
 800d88c:	f000 ff9a 	bl	800e7c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d890:	2301      	movs	r3, #1
 800d892:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d894:	f001 ff76 	bl	800f784 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d898:	f000 fd0c 	bl	800e2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d89c:	f001 ff42 	bl	800f724 <vPortEnterCritical>
 800d8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8a6:	b25b      	sxtb	r3, r3
 800d8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ac:	d103      	bne.n	800d8b6 <xQueueSemaphoreTake+0x13a>
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8bc:	b25b      	sxtb	r3, r3
 800d8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c2:	d103      	bne.n	800d8cc <xQueueSemaphoreTake+0x150>
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8cc:	f001 ff5a 	bl	800f784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8d0:	463a      	mov	r2, r7
 800d8d2:	f107 030c 	add.w	r3, r7, #12
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 ff89 	bl	800e7f0 <xTaskCheckForTimeOut>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d132      	bne.n	800d94a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8e6:	f000 f9f2 	bl	800dcce <prvIsQueueEmpty>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d026      	beq.n	800d93e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d109      	bne.n	800d90c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d8f8:	f001 ff14 	bl	800f724 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	4618      	mov	r0, r3
 800d902:	f001 f8d7 	bl	800eab4 <xTaskPriorityInherit>
 800d906:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d908:	f001 ff3c 	bl	800f784 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	3324      	adds	r3, #36	; 0x24
 800d910:	683a      	ldr	r2, [r7, #0]
 800d912:	4611      	mov	r1, r2
 800d914:	4618      	mov	r0, r3
 800d916:	f000 fea1 	bl	800e65c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d91a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d91c:	f000 f985 	bl	800dc2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d920:	f000 fcd6 	bl	800e2d0 <xTaskResumeAll>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	f47f af68 	bne.w	800d7fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d92c:	4b18      	ldr	r3, [pc, #96]	; (800d990 <xQueueSemaphoreTake+0x214>)
 800d92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	e75e      	b.n	800d7fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d93e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d940:	f000 f973 	bl	800dc2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d944:	f000 fcc4 	bl	800e2d0 <xTaskResumeAll>
 800d948:	e758      	b.n	800d7fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d94a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d94c:	f000 f96d 	bl	800dc2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d950:	f000 fcbe 	bl	800e2d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d956:	f000 f9ba 	bl	800dcce <prvIsQueueEmpty>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f43f af4d 	beq.w	800d7fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d964:	2b00      	cmp	r3, #0
 800d966:	d00d      	beq.n	800d984 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d968:	f001 fedc 	bl	800f724 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d96c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d96e:	f000 f8b4 	bl	800dada <prvGetDisinheritPriorityAfterTimeout>
 800d972:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d97a:	4618      	mov	r0, r3
 800d97c:	f001 f970 	bl	800ec60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d980:	f001 ff00 	bl	800f784 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d984:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d986:	4618      	mov	r0, r3
 800d988:	3738      	adds	r7, #56	; 0x38
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	e000ed04 	.word	0xe000ed04

0800d994 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b08e      	sub	sp, #56	; 0x38
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10a      	bne.n	800d9c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	623b      	str	r3, [r7, #32]
}
 800d9bc:	bf00      	nop
 800d9be:	e7fe      	b.n	800d9be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d103      	bne.n	800d9ce <xQueueReceiveFromISR+0x3a>
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d101      	bne.n	800d9d2 <xQueueReceiveFromISR+0x3e>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e000      	b.n	800d9d4 <xQueueReceiveFromISR+0x40>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10a      	bne.n	800d9ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9dc:	f383 8811 	msr	BASEPRI, r3
 800d9e0:	f3bf 8f6f 	isb	sy
 800d9e4:	f3bf 8f4f 	dsb	sy
 800d9e8:	61fb      	str	r3, [r7, #28]
}
 800d9ea:	bf00      	nop
 800d9ec:	e7fe      	b.n	800d9ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9ee:	f001 ff7b 	bl	800f8e8 <vPortValidateInterruptPriority>
	__asm volatile
 800d9f2:	f3ef 8211 	mrs	r2, BASEPRI
 800d9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fa:	f383 8811 	msr	BASEPRI, r3
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f3bf 8f4f 	dsb	sy
 800da06:	61ba      	str	r2, [r7, #24]
 800da08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800da0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da12:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da16:	2b00      	cmp	r3, #0
 800da18:	d02f      	beq.n	800da7a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800da1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da24:	68b9      	ldr	r1, [r7, #8]
 800da26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da28:	f000 f8d9 	bl	800dbde <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	1e5a      	subs	r2, r3, #1
 800da30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da32:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800da34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da3c:	d112      	bne.n	800da64 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	691b      	ldr	r3, [r3, #16]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d016      	beq.n	800da74 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	3310      	adds	r3, #16
 800da4a:	4618      	mov	r0, r3
 800da4c:	f000 fe56 	bl	800e6fc <xTaskRemoveFromEventList>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00e      	beq.n	800da74 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00b      	beq.n	800da74 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2201      	movs	r2, #1
 800da60:	601a      	str	r2, [r3, #0]
 800da62:	e007      	b.n	800da74 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800da64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da68:	3301      	adds	r3, #1
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	b25a      	sxtb	r2, r3
 800da6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800da74:	2301      	movs	r3, #1
 800da76:	637b      	str	r3, [r7, #52]	; 0x34
 800da78:	e001      	b.n	800da7e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800da7a:	2300      	movs	r3, #0
 800da7c:	637b      	str	r3, [r7, #52]	; 0x34
 800da7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da80:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	f383 8811 	msr	BASEPRI, r3
}
 800da88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3738      	adds	r7, #56	; 0x38
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10a      	bne.n	800dabc <vQueueDelete+0x28>
	__asm volatile
 800daa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	60bb      	str	r3, [r7, #8]
}
 800dab8:	bf00      	nop
 800daba:	e7fe      	b.n	800daba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f000 f95f 	bl	800dd80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d102      	bne.n	800dad2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f002 f817 	bl	800fb00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dad2:	bf00      	nop
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dada:	b480      	push	{r7}
 800dadc:	b085      	sub	sp, #20
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d006      	beq.n	800daf8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800daf4:	60fb      	str	r3, [r7, #12]
 800daf6:	e001      	b.n	800dafc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800daf8:	2300      	movs	r3, #0
 800dafa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dafc:	68fb      	ldr	r3, [r7, #12]
	}
 800dafe:	4618      	mov	r0, r3
 800db00:	3714      	adds	r7, #20
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr

0800db0a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b086      	sub	sp, #24
 800db0e:	af00      	add	r7, sp, #0
 800db10:	60f8      	str	r0, [r7, #12]
 800db12:	60b9      	str	r1, [r7, #8]
 800db14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800db16:	2300      	movs	r3, #0
 800db18:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10d      	bne.n	800db44 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d14d      	bne.n	800dbcc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	4618      	mov	r0, r3
 800db36:	f001 f825 	bl	800eb84 <xTaskPriorityDisinherit>
 800db3a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2200      	movs	r2, #0
 800db40:	609a      	str	r2, [r3, #8]
 800db42:	e043      	b.n	800dbcc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d119      	bne.n	800db7e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6858      	ldr	r0, [r3, #4]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db52:	461a      	mov	r2, r3
 800db54:	68b9      	ldr	r1, [r7, #8]
 800db56:	f003 fc18 	bl	801138a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	685a      	ldr	r2, [r3, #4]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db62:	441a      	add	r2, r3
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	685a      	ldr	r2, [r3, #4]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	429a      	cmp	r2, r3
 800db72:	d32b      	bcc.n	800dbcc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	605a      	str	r2, [r3, #4]
 800db7c:	e026      	b.n	800dbcc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	68d8      	ldr	r0, [r3, #12]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db86:	461a      	mov	r2, r3
 800db88:	68b9      	ldr	r1, [r7, #8]
 800db8a:	f003 fbfe 	bl	801138a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	68da      	ldr	r2, [r3, #12]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db96:	425b      	negs	r3, r3
 800db98:	441a      	add	r2, r3
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	68da      	ldr	r2, [r3, #12]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d207      	bcs.n	800dbba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	689a      	ldr	r2, [r3, #8]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb2:	425b      	negs	r3, r3
 800dbb4:	441a      	add	r2, r3
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b02      	cmp	r3, #2
 800dbbe:	d105      	bne.n	800dbcc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d002      	beq.n	800dbcc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	3b01      	subs	r3, #1
 800dbca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	1c5a      	adds	r2, r3, #1
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dbd4:	697b      	ldr	r3, [r7, #20]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3718      	adds	r7, #24
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b082      	sub	sp, #8
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
 800dbe6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d018      	beq.n	800dc22 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	68da      	ldr	r2, [r3, #12]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf8:	441a      	add	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	68da      	ldr	r2, [r3, #12]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	689b      	ldr	r3, [r3, #8]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d303      	bcc.n	800dc12 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	68d9      	ldr	r1, [r3, #12]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	6838      	ldr	r0, [r7, #0]
 800dc1e:	f003 fbb4 	bl	801138a <memcpy>
	}
}
 800dc22:	bf00      	nop
 800dc24:	3708      	adds	r7, #8
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b084      	sub	sp, #16
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc32:	f001 fd77 	bl	800f724 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc3c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc3e:	e011      	b.n	800dc64 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d012      	beq.n	800dc6e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	3324      	adds	r3, #36	; 0x24
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f000 fd55 	bl	800e6fc <xTaskRemoveFromEventList>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d001      	beq.n	800dc5c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc58:	f000 fe2c 	bl	800e8b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc5c:	7bfb      	ldrb	r3, [r7, #15]
 800dc5e:	3b01      	subs	r3, #1
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	dce9      	bgt.n	800dc40 <prvUnlockQueue+0x16>
 800dc6c:	e000      	b.n	800dc70 <prvUnlockQueue+0x46>
					break;
 800dc6e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	22ff      	movs	r2, #255	; 0xff
 800dc74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc78:	f001 fd84 	bl	800f784 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc7c:	f001 fd52 	bl	800f724 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc86:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc88:	e011      	b.n	800dcae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	691b      	ldr	r3, [r3, #16]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d012      	beq.n	800dcb8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	3310      	adds	r3, #16
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 fd30 	bl	800e6fc <xTaskRemoveFromEventList>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dca2:	f000 fe07 	bl	800e8b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dca6:	7bbb      	ldrb	r3, [r7, #14]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dcae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	dce9      	bgt.n	800dc8a <prvUnlockQueue+0x60>
 800dcb6:	e000      	b.n	800dcba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dcb8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	22ff      	movs	r2, #255	; 0xff
 800dcbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dcc2:	f001 fd5f 	bl	800f784 <vPortExitCritical>
}
 800dcc6:	bf00      	nop
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b084      	sub	sp, #16
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcd6:	f001 fd25 	bl	800f724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d102      	bne.n	800dce8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dce2:	2301      	movs	r3, #1
 800dce4:	60fb      	str	r3, [r7, #12]
 800dce6:	e001      	b.n	800dcec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dce8:	2300      	movs	r3, #0
 800dcea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcec:	f001 fd4a 	bl	800f784 <vPortExitCritical>

	return xReturn;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b084      	sub	sp, #16
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd02:	f001 fd0f 	bl	800f724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d102      	bne.n	800dd18 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dd12:	2301      	movs	r3, #1
 800dd14:	60fb      	str	r3, [r7, #12]
 800dd16:	e001      	b.n	800dd1c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd1c:	f001 fd32 	bl	800f784 <vPortExitCritical>

	return xReturn;
 800dd20:	68fb      	ldr	r3, [r7, #12]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
	...

0800dd2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b085      	sub	sp, #20
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd36:	2300      	movs	r3, #0
 800dd38:	60fb      	str	r3, [r7, #12]
 800dd3a:	e014      	b.n	800dd66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dd3c:	4a0f      	ldr	r2, [pc, #60]	; (800dd7c <vQueueAddToRegistry+0x50>)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d10b      	bne.n	800dd60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dd48:	490c      	ldr	r1, [pc, #48]	; (800dd7c <vQueueAddToRegistry+0x50>)
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	683a      	ldr	r2, [r7, #0]
 800dd4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dd52:	4a0a      	ldr	r2, [pc, #40]	; (800dd7c <vQueueAddToRegistry+0x50>)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	00db      	lsls	r3, r3, #3
 800dd58:	4413      	add	r3, r2
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dd5e:	e006      	b.n	800dd6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	3301      	adds	r3, #1
 800dd64:	60fb      	str	r3, [r7, #12]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2b07      	cmp	r3, #7
 800dd6a:	d9e7      	bls.n	800dd3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd6c:	bf00      	nop
 800dd6e:	bf00      	nop
 800dd70:	3714      	adds	r7, #20
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr
 800dd7a:	bf00      	nop
 800dd7c:	20000f6c 	.word	0x20000f6c

0800dd80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd88:	2300      	movs	r3, #0
 800dd8a:	60fb      	str	r3, [r7, #12]
 800dd8c:	e016      	b.n	800ddbc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dd8e:	4a10      	ldr	r2, [pc, #64]	; (800ddd0 <vQueueUnregisterQueue+0x50>)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	00db      	lsls	r3, r3, #3
 800dd94:	4413      	add	r3, r2
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d10b      	bne.n	800ddb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dd9e:	4a0c      	ldr	r2, [pc, #48]	; (800ddd0 <vQueueUnregisterQueue+0x50>)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2100      	movs	r1, #0
 800dda4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dda8:	4a09      	ldr	r2, [pc, #36]	; (800ddd0 <vQueueUnregisterQueue+0x50>)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	00db      	lsls	r3, r3, #3
 800ddae:	4413      	add	r3, r2
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	605a      	str	r2, [r3, #4]
				break;
 800ddb4:	e006      	b.n	800ddc4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	60fb      	str	r3, [r7, #12]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2b07      	cmp	r3, #7
 800ddc0:	d9e5      	bls.n	800dd8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ddc2:	bf00      	nop
 800ddc4:	bf00      	nop
 800ddc6:	3714      	adds	r7, #20
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr
 800ddd0:	20000f6c 	.word	0x20000f6c

0800ddd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dde4:	f001 fc9e 	bl	800f724 <vPortEnterCritical>
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddee:	b25b      	sxtb	r3, r3
 800ddf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf4:	d103      	bne.n	800ddfe <vQueueWaitForMessageRestricted+0x2a>
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de04:	b25b      	sxtb	r3, r3
 800de06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de0a:	d103      	bne.n	800de14 <vQueueWaitForMessageRestricted+0x40>
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	2200      	movs	r2, #0
 800de10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de14:	f001 fcb6 	bl	800f784 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d106      	bne.n	800de2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	3324      	adds	r3, #36	; 0x24
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	68b9      	ldr	r1, [r7, #8]
 800de28:	4618      	mov	r0, r3
 800de2a:	f000 fc3b 	bl	800e6a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800de2e:	6978      	ldr	r0, [r7, #20]
 800de30:	f7ff fefb 	bl	800dc2a <prvUnlockQueue>
	}
 800de34:	bf00      	nop
 800de36:	3718      	adds	r7, #24
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b08e      	sub	sp, #56	; 0x38
 800de40:	af04      	add	r7, sp, #16
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
 800de48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800de4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d10a      	bne.n	800de66 <xTaskCreateStatic+0x2a>
	__asm volatile
 800de50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	623b      	str	r3, [r7, #32]
}
 800de62:	bf00      	nop
 800de64:	e7fe      	b.n	800de64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800de66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10a      	bne.n	800de82 <xTaskCreateStatic+0x46>
	__asm volatile
 800de6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de70:	f383 8811 	msr	BASEPRI, r3
 800de74:	f3bf 8f6f 	isb	sy
 800de78:	f3bf 8f4f 	dsb	sy
 800de7c:	61fb      	str	r3, [r7, #28]
}
 800de7e:	bf00      	nop
 800de80:	e7fe      	b.n	800de80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de82:	235c      	movs	r3, #92	; 0x5c
 800de84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	2b5c      	cmp	r3, #92	; 0x5c
 800de8a:	d00a      	beq.n	800dea2 <xTaskCreateStatic+0x66>
	__asm volatile
 800de8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de90:	f383 8811 	msr	BASEPRI, r3
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	61bb      	str	r3, [r7, #24]
}
 800de9e:	bf00      	nop
 800dea0:	e7fe      	b.n	800dea0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dea2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d01e      	beq.n	800dee8 <xTaskCreateStatic+0xac>
 800deaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deac:	2b00      	cmp	r3, #0
 800deae:	d01b      	beq.n	800dee8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800deb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800deb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800deb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800deba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debc:	2202      	movs	r2, #2
 800debe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dec2:	2300      	movs	r3, #0
 800dec4:	9303      	str	r3, [sp, #12]
 800dec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec8:	9302      	str	r3, [sp, #8]
 800deca:	f107 0314 	add.w	r3, r7, #20
 800dece:	9301      	str	r3, [sp, #4]
 800ded0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	68b9      	ldr	r1, [r7, #8]
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f000 f850 	bl	800df80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dee2:	f000 f8dd 	bl	800e0a0 <prvAddNewTaskToReadyList>
 800dee6:	e001      	b.n	800deec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dee8:	2300      	movs	r3, #0
 800deea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800deec:	697b      	ldr	r3, [r7, #20]
	}
 800deee:	4618      	mov	r0, r3
 800def0:	3728      	adds	r7, #40	; 0x28
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800def6:	b580      	push	{r7, lr}
 800def8:	b08c      	sub	sp, #48	; 0x30
 800defa:	af04      	add	r7, sp, #16
 800defc:	60f8      	str	r0, [r7, #12]
 800defe:	60b9      	str	r1, [r7, #8]
 800df00:	603b      	str	r3, [r7, #0]
 800df02:	4613      	mov	r3, r2
 800df04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df06:	88fb      	ldrh	r3, [r7, #6]
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4618      	mov	r0, r3
 800df0c:	f001 fd2c 	bl	800f968 <pvPortMalloc>
 800df10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00e      	beq.n	800df36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df18:	205c      	movs	r0, #92	; 0x5c
 800df1a:	f001 fd25 	bl	800f968 <pvPortMalloc>
 800df1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d003      	beq.n	800df2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	697a      	ldr	r2, [r7, #20]
 800df2a:	631a      	str	r2, [r3, #48]	; 0x30
 800df2c:	e005      	b.n	800df3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800df2e:	6978      	ldr	r0, [r7, #20]
 800df30:	f001 fde6 	bl	800fb00 <vPortFree>
 800df34:	e001      	b.n	800df3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800df36:	2300      	movs	r3, #0
 800df38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d017      	beq.n	800df70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	2200      	movs	r2, #0
 800df44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df48:	88fa      	ldrh	r2, [r7, #6]
 800df4a:	2300      	movs	r3, #0
 800df4c:	9303      	str	r3, [sp, #12]
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	9302      	str	r3, [sp, #8]
 800df52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df54:	9301      	str	r3, [sp, #4]
 800df56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df58:	9300      	str	r3, [sp, #0]
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	68b9      	ldr	r1, [r7, #8]
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	f000 f80e 	bl	800df80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df64:	69f8      	ldr	r0, [r7, #28]
 800df66:	f000 f89b 	bl	800e0a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800df6a:	2301      	movs	r3, #1
 800df6c:	61bb      	str	r3, [r7, #24]
 800df6e:	e002      	b.n	800df76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800df70:	f04f 33ff 	mov.w	r3, #4294967295
 800df74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800df76:	69bb      	ldr	r3, [r7, #24]
	}
 800df78:	4618      	mov	r0, r3
 800df7a:	3720      	adds	r7, #32
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b088      	sub	sp, #32
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
 800df8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	461a      	mov	r2, r3
 800df98:	21a5      	movs	r1, #165	; 0xa5
 800df9a:	f003 f976 	bl	801128a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4413      	add	r3, r2
 800dfae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	f023 0307 	bic.w	r3, r3, #7
 800dfb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dfb8:	69bb      	ldr	r3, [r7, #24]
 800dfba:	f003 0307 	and.w	r3, r3, #7
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00a      	beq.n	800dfd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc6:	f383 8811 	msr	BASEPRI, r3
 800dfca:	f3bf 8f6f 	isb	sy
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	617b      	str	r3, [r7, #20]
}
 800dfd4:	bf00      	nop
 800dfd6:	e7fe      	b.n	800dfd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d01f      	beq.n	800e01e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dfde:	2300      	movs	r3, #0
 800dfe0:	61fb      	str	r3, [r7, #28]
 800dfe2:	e012      	b.n	800e00a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dfe4:	68ba      	ldr	r2, [r7, #8]
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	4413      	add	r3, r2
 800dfea:	7819      	ldrb	r1, [r3, #0]
 800dfec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	4413      	add	r3, r2
 800dff2:	3334      	adds	r3, #52	; 0x34
 800dff4:	460a      	mov	r2, r1
 800dff6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dff8:	68ba      	ldr	r2, [r7, #8]
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	4413      	add	r3, r2
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d006      	beq.n	800e012 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	3301      	adds	r3, #1
 800e008:	61fb      	str	r3, [r7, #28]
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	2b0f      	cmp	r3, #15
 800e00e:	d9e9      	bls.n	800dfe4 <prvInitialiseNewTask+0x64>
 800e010:	e000      	b.n	800e014 <prvInitialiseNewTask+0x94>
			{
				break;
 800e012:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e016:	2200      	movs	r2, #0
 800e018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e01c:	e003      	b.n	800e026 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e020:	2200      	movs	r2, #0
 800e022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e028:	2b37      	cmp	r3, #55	; 0x37
 800e02a:	d901      	bls.n	800e030 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e02c:	2337      	movs	r3, #55	; 0x37
 800e02e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e034:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e03a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03e:	2200      	movs	r2, #0
 800e040:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e044:	3304      	adds	r3, #4
 800e046:	4618      	mov	r0, r3
 800e048:	f7fe fe56 	bl	800ccf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04e:	3318      	adds	r3, #24
 800e050:	4618      	mov	r0, r3
 800e052:	f7fe fe51 	bl	800ccf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e05a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e064:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e06a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	2200      	movs	r2, #0
 800e070:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e074:	2200      	movs	r2, #0
 800e076:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e07a:	683a      	ldr	r2, [r7, #0]
 800e07c:	68f9      	ldr	r1, [r7, #12]
 800e07e:	69b8      	ldr	r0, [r7, #24]
 800e080:	f001 fa26 	bl	800f4d0 <pxPortInitialiseStack>
 800e084:	4602      	mov	r2, r0
 800e086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e088:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e096:	bf00      	nop
 800e098:	3720      	adds	r7, #32
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
	...

0800e0a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e0a8:	f001 fb3c 	bl	800f724 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e0ac:	4b2d      	ldr	r3, [pc, #180]	; (800e164 <prvAddNewTaskToReadyList+0xc4>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	4a2c      	ldr	r2, [pc, #176]	; (800e164 <prvAddNewTaskToReadyList+0xc4>)
 800e0b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e0b6:	4b2c      	ldr	r3, [pc, #176]	; (800e168 <prvAddNewTaskToReadyList+0xc8>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d109      	bne.n	800e0d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e0be:	4a2a      	ldr	r2, [pc, #168]	; (800e168 <prvAddNewTaskToReadyList+0xc8>)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e0c4:	4b27      	ldr	r3, [pc, #156]	; (800e164 <prvAddNewTaskToReadyList+0xc4>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d110      	bne.n	800e0ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e0cc:	f000 fc16 	bl	800e8fc <prvInitialiseTaskLists>
 800e0d0:	e00d      	b.n	800e0ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e0d2:	4b26      	ldr	r3, [pc, #152]	; (800e16c <prvAddNewTaskToReadyList+0xcc>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d109      	bne.n	800e0ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e0da:	4b23      	ldr	r3, [pc, #140]	; (800e168 <prvAddNewTaskToReadyList+0xc8>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d802      	bhi.n	800e0ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e0e8:	4a1f      	ldr	r2, [pc, #124]	; (800e168 <prvAddNewTaskToReadyList+0xc8>)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e0ee:	4b20      	ldr	r3, [pc, #128]	; (800e170 <prvAddNewTaskToReadyList+0xd0>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	4a1e      	ldr	r2, [pc, #120]	; (800e170 <prvAddNewTaskToReadyList+0xd0>)
 800e0f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e0f8:	4b1d      	ldr	r3, [pc, #116]	; (800e170 <prvAddNewTaskToReadyList+0xd0>)
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e104:	4b1b      	ldr	r3, [pc, #108]	; (800e174 <prvAddNewTaskToReadyList+0xd4>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d903      	bls.n	800e114 <prvAddNewTaskToReadyList+0x74>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e110:	4a18      	ldr	r2, [pc, #96]	; (800e174 <prvAddNewTaskToReadyList+0xd4>)
 800e112:	6013      	str	r3, [r2, #0]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e118:	4613      	mov	r3, r2
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4a15      	ldr	r2, [pc, #84]	; (800e178 <prvAddNewTaskToReadyList+0xd8>)
 800e122:	441a      	add	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	3304      	adds	r3, #4
 800e128:	4619      	mov	r1, r3
 800e12a:	4610      	mov	r0, r2
 800e12c:	f7fe fdf1 	bl	800cd12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e130:	f001 fb28 	bl	800f784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e134:	4b0d      	ldr	r3, [pc, #52]	; (800e16c <prvAddNewTaskToReadyList+0xcc>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00e      	beq.n	800e15a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e13c:	4b0a      	ldr	r3, [pc, #40]	; (800e168 <prvAddNewTaskToReadyList+0xc8>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e146:	429a      	cmp	r2, r3
 800e148:	d207      	bcs.n	800e15a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e14a:	4b0c      	ldr	r3, [pc, #48]	; (800e17c <prvAddNewTaskToReadyList+0xdc>)
 800e14c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e150:	601a      	str	r2, [r3, #0]
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e15a:	bf00      	nop
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	20001480 	.word	0x20001480
 800e168:	20000fac 	.word	0x20000fac
 800e16c:	2000148c 	.word	0x2000148c
 800e170:	2000149c 	.word	0x2000149c
 800e174:	20001488 	.word	0x20001488
 800e178:	20000fb0 	.word	0x20000fb0
 800e17c:	e000ed04 	.word	0xe000ed04

0800e180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e188:	2300      	movs	r3, #0
 800e18a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d017      	beq.n	800e1c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e192:	4b13      	ldr	r3, [pc, #76]	; (800e1e0 <vTaskDelay+0x60>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00a      	beq.n	800e1b0 <vTaskDelay+0x30>
	__asm volatile
 800e19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19e:	f383 8811 	msr	BASEPRI, r3
 800e1a2:	f3bf 8f6f 	isb	sy
 800e1a6:	f3bf 8f4f 	dsb	sy
 800e1aa:	60bb      	str	r3, [r7, #8]
}
 800e1ac:	bf00      	nop
 800e1ae:	e7fe      	b.n	800e1ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e1b0:	f000 f880 	bl	800e2b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e1b4:	2100      	movs	r1, #0
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 fde8 	bl	800ed8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e1bc:	f000 f888 	bl	800e2d0 <xTaskResumeAll>
 800e1c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d107      	bne.n	800e1d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e1c8:	4b06      	ldr	r3, [pc, #24]	; (800e1e4 <vTaskDelay+0x64>)
 800e1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ce:	601a      	str	r2, [r3, #0]
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e1d8:	bf00      	nop
 800e1da:	3710      	adds	r7, #16
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	200014a8 	.word	0x200014a8
 800e1e4:	e000ed04 	.word	0xe000ed04

0800e1e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08a      	sub	sp, #40	; 0x28
 800e1ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1f6:	463a      	mov	r2, r7
 800e1f8:	1d39      	adds	r1, r7, #4
 800e1fa:	f107 0308 	add.w	r3, r7, #8
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7fe fd26 	bl	800cc50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e204:	6839      	ldr	r1, [r7, #0]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	68ba      	ldr	r2, [r7, #8]
 800e20a:	9202      	str	r2, [sp, #8]
 800e20c:	9301      	str	r3, [sp, #4]
 800e20e:	2300      	movs	r3, #0
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	2300      	movs	r3, #0
 800e214:	460a      	mov	r2, r1
 800e216:	4921      	ldr	r1, [pc, #132]	; (800e29c <vTaskStartScheduler+0xb4>)
 800e218:	4821      	ldr	r0, [pc, #132]	; (800e2a0 <vTaskStartScheduler+0xb8>)
 800e21a:	f7ff fe0f 	bl	800de3c <xTaskCreateStatic>
 800e21e:	4603      	mov	r3, r0
 800e220:	4a20      	ldr	r2, [pc, #128]	; (800e2a4 <vTaskStartScheduler+0xbc>)
 800e222:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e224:	4b1f      	ldr	r3, [pc, #124]	; (800e2a4 <vTaskStartScheduler+0xbc>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d002      	beq.n	800e232 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e22c:	2301      	movs	r3, #1
 800e22e:	617b      	str	r3, [r7, #20]
 800e230:	e001      	b.n	800e236 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e232:	2300      	movs	r3, #0
 800e234:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d102      	bne.n	800e242 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e23c:	f000 fdfa 	bl	800ee34 <xTimerCreateTimerTask>
 800e240:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	2b01      	cmp	r3, #1
 800e246:	d116      	bne.n	800e276 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24c:	f383 8811 	msr	BASEPRI, r3
 800e250:	f3bf 8f6f 	isb	sy
 800e254:	f3bf 8f4f 	dsb	sy
 800e258:	613b      	str	r3, [r7, #16]
}
 800e25a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e25c:	4b12      	ldr	r3, [pc, #72]	; (800e2a8 <vTaskStartScheduler+0xc0>)
 800e25e:	f04f 32ff 	mov.w	r2, #4294967295
 800e262:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e264:	4b11      	ldr	r3, [pc, #68]	; (800e2ac <vTaskStartScheduler+0xc4>)
 800e266:	2201      	movs	r2, #1
 800e268:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e26a:	4b11      	ldr	r3, [pc, #68]	; (800e2b0 <vTaskStartScheduler+0xc8>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e270:	f001 f9b6 	bl	800f5e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e274:	e00e      	b.n	800e294 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27c:	d10a      	bne.n	800e294 <vTaskStartScheduler+0xac>
	__asm volatile
 800e27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e282:	f383 8811 	msr	BASEPRI, r3
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	f3bf 8f4f 	dsb	sy
 800e28e:	60fb      	str	r3, [r7, #12]
}
 800e290:	bf00      	nop
 800e292:	e7fe      	b.n	800e292 <vTaskStartScheduler+0xaa>
}
 800e294:	bf00      	nop
 800e296:	3718      	adds	r7, #24
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	08013524 	.word	0x08013524
 800e2a0:	0800e8cd 	.word	0x0800e8cd
 800e2a4:	200014a4 	.word	0x200014a4
 800e2a8:	200014a0 	.word	0x200014a0
 800e2ac:	2000148c 	.word	0x2000148c
 800e2b0:	20001484 	.word	0x20001484

0800e2b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e2b8:	4b04      	ldr	r3, [pc, #16]	; (800e2cc <vTaskSuspendAll+0x18>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	3301      	adds	r3, #1
 800e2be:	4a03      	ldr	r2, [pc, #12]	; (800e2cc <vTaskSuspendAll+0x18>)
 800e2c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e2c2:	bf00      	nop
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	200014a8 	.word	0x200014a8

0800e2d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e2de:	4b42      	ldr	r3, [pc, #264]	; (800e3e8 <xTaskResumeAll+0x118>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d10a      	bne.n	800e2fc <xTaskResumeAll+0x2c>
	__asm volatile
 800e2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	603b      	str	r3, [r7, #0]
}
 800e2f8:	bf00      	nop
 800e2fa:	e7fe      	b.n	800e2fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e2fc:	f001 fa12 	bl	800f724 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e300:	4b39      	ldr	r3, [pc, #228]	; (800e3e8 <xTaskResumeAll+0x118>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	3b01      	subs	r3, #1
 800e306:	4a38      	ldr	r2, [pc, #224]	; (800e3e8 <xTaskResumeAll+0x118>)
 800e308:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e30a:	4b37      	ldr	r3, [pc, #220]	; (800e3e8 <xTaskResumeAll+0x118>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d162      	bne.n	800e3d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e312:	4b36      	ldr	r3, [pc, #216]	; (800e3ec <xTaskResumeAll+0x11c>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d05e      	beq.n	800e3d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e31a:	e02f      	b.n	800e37c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e31c:	4b34      	ldr	r3, [pc, #208]	; (800e3f0 <xTaskResumeAll+0x120>)
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	3318      	adds	r3, #24
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fe fd4f 	bl	800cdcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	3304      	adds	r3, #4
 800e332:	4618      	mov	r0, r3
 800e334:	f7fe fd4a 	bl	800cdcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e33c:	4b2d      	ldr	r3, [pc, #180]	; (800e3f4 <xTaskResumeAll+0x124>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	429a      	cmp	r2, r3
 800e342:	d903      	bls.n	800e34c <xTaskResumeAll+0x7c>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e348:	4a2a      	ldr	r2, [pc, #168]	; (800e3f4 <xTaskResumeAll+0x124>)
 800e34a:	6013      	str	r3, [r2, #0]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e350:	4613      	mov	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4413      	add	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	4a27      	ldr	r2, [pc, #156]	; (800e3f8 <xTaskResumeAll+0x128>)
 800e35a:	441a      	add	r2, r3
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	3304      	adds	r3, #4
 800e360:	4619      	mov	r1, r3
 800e362:	4610      	mov	r0, r2
 800e364:	f7fe fcd5 	bl	800cd12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e36c:	4b23      	ldr	r3, [pc, #140]	; (800e3fc <xTaskResumeAll+0x12c>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e372:	429a      	cmp	r2, r3
 800e374:	d302      	bcc.n	800e37c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e376:	4b22      	ldr	r3, [pc, #136]	; (800e400 <xTaskResumeAll+0x130>)
 800e378:	2201      	movs	r2, #1
 800e37a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e37c:	4b1c      	ldr	r3, [pc, #112]	; (800e3f0 <xTaskResumeAll+0x120>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d1cb      	bne.n	800e31c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d001      	beq.n	800e38e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e38a:	f000 fb55 	bl	800ea38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e38e:	4b1d      	ldr	r3, [pc, #116]	; (800e404 <xTaskResumeAll+0x134>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d010      	beq.n	800e3bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e39a:	f000 f847 	bl	800e42c <xTaskIncrementTick>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e3a4:	4b16      	ldr	r3, [pc, #88]	; (800e400 <xTaskResumeAll+0x130>)
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1f1      	bne.n	800e39a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e3b6:	4b13      	ldr	r3, [pc, #76]	; (800e404 <xTaskResumeAll+0x134>)
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e3bc:	4b10      	ldr	r3, [pc, #64]	; (800e400 <xTaskResumeAll+0x130>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d009      	beq.n	800e3d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e3c8:	4b0f      	ldr	r3, [pc, #60]	; (800e408 <xTaskResumeAll+0x138>)
 800e3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ce:	601a      	str	r2, [r3, #0]
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e3d8:	f001 f9d4 	bl	800f784 <vPortExitCritical>

	return xAlreadyYielded;
 800e3dc:	68bb      	ldr	r3, [r7, #8]
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3710      	adds	r7, #16
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	200014a8 	.word	0x200014a8
 800e3ec:	20001480 	.word	0x20001480
 800e3f0:	20001440 	.word	0x20001440
 800e3f4:	20001488 	.word	0x20001488
 800e3f8:	20000fb0 	.word	0x20000fb0
 800e3fc:	20000fac 	.word	0x20000fac
 800e400:	20001494 	.word	0x20001494
 800e404:	20001490 	.word	0x20001490
 800e408:	e000ed04 	.word	0xe000ed04

0800e40c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e412:	4b05      	ldr	r3, [pc, #20]	; (800e428 <xTaskGetTickCount+0x1c>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e418:	687b      	ldr	r3, [r7, #4]
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	370c      	adds	r7, #12
 800e41e:	46bd      	mov	sp, r7
 800e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop
 800e428:	20001484 	.word	0x20001484

0800e42c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b086      	sub	sp, #24
 800e430:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e432:	2300      	movs	r3, #0
 800e434:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e436:	4b4f      	ldr	r3, [pc, #316]	; (800e574 <xTaskIncrementTick+0x148>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	f040 808f 	bne.w	800e55e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e440:	4b4d      	ldr	r3, [pc, #308]	; (800e578 <xTaskIncrementTick+0x14c>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	3301      	adds	r3, #1
 800e446:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e448:	4a4b      	ldr	r2, [pc, #300]	; (800e578 <xTaskIncrementTick+0x14c>)
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d120      	bne.n	800e496 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e454:	4b49      	ldr	r3, [pc, #292]	; (800e57c <xTaskIncrementTick+0x150>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00a      	beq.n	800e474 <xTaskIncrementTick+0x48>
	__asm volatile
 800e45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e462:	f383 8811 	msr	BASEPRI, r3
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	603b      	str	r3, [r7, #0]
}
 800e470:	bf00      	nop
 800e472:	e7fe      	b.n	800e472 <xTaskIncrementTick+0x46>
 800e474:	4b41      	ldr	r3, [pc, #260]	; (800e57c <xTaskIncrementTick+0x150>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	60fb      	str	r3, [r7, #12]
 800e47a:	4b41      	ldr	r3, [pc, #260]	; (800e580 <xTaskIncrementTick+0x154>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	4a3f      	ldr	r2, [pc, #252]	; (800e57c <xTaskIncrementTick+0x150>)
 800e480:	6013      	str	r3, [r2, #0]
 800e482:	4a3f      	ldr	r2, [pc, #252]	; (800e580 <xTaskIncrementTick+0x154>)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6013      	str	r3, [r2, #0]
 800e488:	4b3e      	ldr	r3, [pc, #248]	; (800e584 <xTaskIncrementTick+0x158>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	3301      	adds	r3, #1
 800e48e:	4a3d      	ldr	r2, [pc, #244]	; (800e584 <xTaskIncrementTick+0x158>)
 800e490:	6013      	str	r3, [r2, #0]
 800e492:	f000 fad1 	bl	800ea38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e496:	4b3c      	ldr	r3, [pc, #240]	; (800e588 <xTaskIncrementTick+0x15c>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	693a      	ldr	r2, [r7, #16]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d349      	bcc.n	800e534 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4a0:	4b36      	ldr	r3, [pc, #216]	; (800e57c <xTaskIncrementTick+0x150>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d104      	bne.n	800e4b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4aa:	4b37      	ldr	r3, [pc, #220]	; (800e588 <xTaskIncrementTick+0x15c>)
 800e4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b0:	601a      	str	r2, [r3, #0]
					break;
 800e4b2:	e03f      	b.n	800e534 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4b4:	4b31      	ldr	r3, [pc, #196]	; (800e57c <xTaskIncrementTick+0x150>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e4c4:	693a      	ldr	r2, [r7, #16]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d203      	bcs.n	800e4d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e4cc:	4a2e      	ldr	r2, [pc, #184]	; (800e588 <xTaskIncrementTick+0x15c>)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e4d2:	e02f      	b.n	800e534 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	3304      	adds	r3, #4
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7fe fc77 	bl	800cdcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d004      	beq.n	800e4f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	3318      	adds	r3, #24
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fe fc6e 	bl	800cdcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4f4:	4b25      	ldr	r3, [pc, #148]	; (800e58c <xTaskIncrementTick+0x160>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d903      	bls.n	800e504 <xTaskIncrementTick+0xd8>
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e500:	4a22      	ldr	r2, [pc, #136]	; (800e58c <xTaskIncrementTick+0x160>)
 800e502:	6013      	str	r3, [r2, #0]
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e508:	4613      	mov	r3, r2
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	4413      	add	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	4a1f      	ldr	r2, [pc, #124]	; (800e590 <xTaskIncrementTick+0x164>)
 800e512:	441a      	add	r2, r3
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	3304      	adds	r3, #4
 800e518:	4619      	mov	r1, r3
 800e51a:	4610      	mov	r0, r2
 800e51c:	f7fe fbf9 	bl	800cd12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e524:	4b1b      	ldr	r3, [pc, #108]	; (800e594 <xTaskIncrementTick+0x168>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d3b8      	bcc.n	800e4a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e52e:	2301      	movs	r3, #1
 800e530:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e532:	e7b5      	b.n	800e4a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e534:	4b17      	ldr	r3, [pc, #92]	; (800e594 <xTaskIncrementTick+0x168>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e53a:	4915      	ldr	r1, [pc, #84]	; (800e590 <xTaskIncrementTick+0x164>)
 800e53c:	4613      	mov	r3, r2
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	4413      	add	r3, r2
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	440b      	add	r3, r1
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d901      	bls.n	800e550 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e54c:	2301      	movs	r3, #1
 800e54e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e550:	4b11      	ldr	r3, [pc, #68]	; (800e598 <xTaskIncrementTick+0x16c>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d007      	beq.n	800e568 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e558:	2301      	movs	r3, #1
 800e55a:	617b      	str	r3, [r7, #20]
 800e55c:	e004      	b.n	800e568 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e55e:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <xTaskIncrementTick+0x170>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	3301      	adds	r3, #1
 800e564:	4a0d      	ldr	r2, [pc, #52]	; (800e59c <xTaskIncrementTick+0x170>)
 800e566:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e568:	697b      	ldr	r3, [r7, #20]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3718      	adds	r7, #24
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	200014a8 	.word	0x200014a8
 800e578:	20001484 	.word	0x20001484
 800e57c:	20001438 	.word	0x20001438
 800e580:	2000143c 	.word	0x2000143c
 800e584:	20001498 	.word	0x20001498
 800e588:	200014a0 	.word	0x200014a0
 800e58c:	20001488 	.word	0x20001488
 800e590:	20000fb0 	.word	0x20000fb0
 800e594:	20000fac 	.word	0x20000fac
 800e598:	20001494 	.word	0x20001494
 800e59c:	20001490 	.word	0x20001490

0800e5a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e5a6:	4b28      	ldr	r3, [pc, #160]	; (800e648 <vTaskSwitchContext+0xa8>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d003      	beq.n	800e5b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e5ae:	4b27      	ldr	r3, [pc, #156]	; (800e64c <vTaskSwitchContext+0xac>)
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e5b4:	e041      	b.n	800e63a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e5b6:	4b25      	ldr	r3, [pc, #148]	; (800e64c <vTaskSwitchContext+0xac>)
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5bc:	4b24      	ldr	r3, [pc, #144]	; (800e650 <vTaskSwitchContext+0xb0>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	60fb      	str	r3, [r7, #12]
 800e5c2:	e010      	b.n	800e5e6 <vTaskSwitchContext+0x46>
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d10a      	bne.n	800e5e0 <vTaskSwitchContext+0x40>
	__asm volatile
 800e5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ce:	f383 8811 	msr	BASEPRI, r3
 800e5d2:	f3bf 8f6f 	isb	sy
 800e5d6:	f3bf 8f4f 	dsb	sy
 800e5da:	607b      	str	r3, [r7, #4]
}
 800e5dc:	bf00      	nop
 800e5de:	e7fe      	b.n	800e5de <vTaskSwitchContext+0x3e>
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	60fb      	str	r3, [r7, #12]
 800e5e6:	491b      	ldr	r1, [pc, #108]	; (800e654 <vTaskSwitchContext+0xb4>)
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	4413      	add	r3, r2
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	440b      	add	r3, r1
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d0e4      	beq.n	800e5c4 <vTaskSwitchContext+0x24>
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	4413      	add	r3, r2
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	4a13      	ldr	r2, [pc, #76]	; (800e654 <vTaskSwitchContext+0xb4>)
 800e606:	4413      	add	r3, r2
 800e608:	60bb      	str	r3, [r7, #8]
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	685a      	ldr	r2, [r3, #4]
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	605a      	str	r2, [r3, #4]
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	3308      	adds	r3, #8
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d104      	bne.n	800e62a <vTaskSwitchContext+0x8a>
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	685a      	ldr	r2, [r3, #4]
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	605a      	str	r2, [r3, #4]
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	4a09      	ldr	r2, [pc, #36]	; (800e658 <vTaskSwitchContext+0xb8>)
 800e632:	6013      	str	r3, [r2, #0]
 800e634:	4a06      	ldr	r2, [pc, #24]	; (800e650 <vTaskSwitchContext+0xb0>)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6013      	str	r3, [r2, #0]
}
 800e63a:	bf00      	nop
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	200014a8 	.word	0x200014a8
 800e64c:	20001494 	.word	0x20001494
 800e650:	20001488 	.word	0x20001488
 800e654:	20000fb0 	.word	0x20000fb0
 800e658:	20000fac 	.word	0x20000fac

0800e65c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d10a      	bne.n	800e682 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e670:	f383 8811 	msr	BASEPRI, r3
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	60fb      	str	r3, [r7, #12]
}
 800e67e:	bf00      	nop
 800e680:	e7fe      	b.n	800e680 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e682:	4b07      	ldr	r3, [pc, #28]	; (800e6a0 <vTaskPlaceOnEventList+0x44>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	3318      	adds	r3, #24
 800e688:	4619      	mov	r1, r3
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f7fe fb65 	bl	800cd5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e690:	2101      	movs	r1, #1
 800e692:	6838      	ldr	r0, [r7, #0]
 800e694:	f000 fb7a 	bl	800ed8c <prvAddCurrentTaskToDelayedList>
}
 800e698:	bf00      	nop
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	20000fac 	.word	0x20000fac

0800e6a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b086      	sub	sp, #24
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d10a      	bne.n	800e6cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ba:	f383 8811 	msr	BASEPRI, r3
 800e6be:	f3bf 8f6f 	isb	sy
 800e6c2:	f3bf 8f4f 	dsb	sy
 800e6c6:	617b      	str	r3, [r7, #20]
}
 800e6c8:	bf00      	nop
 800e6ca:	e7fe      	b.n	800e6ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6cc:	4b0a      	ldr	r3, [pc, #40]	; (800e6f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	3318      	adds	r3, #24
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	68f8      	ldr	r0, [r7, #12]
 800e6d6:	f7fe fb1c 	bl	800cd12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d002      	beq.n	800e6e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6e6:	6879      	ldr	r1, [r7, #4]
 800e6e8:	68b8      	ldr	r0, [r7, #8]
 800e6ea:	f000 fb4f 	bl	800ed8c <prvAddCurrentTaskToDelayedList>
	}
 800e6ee:	bf00      	nop
 800e6f0:	3718      	adds	r7, #24
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	20000fac 	.word	0x20000fac

0800e6fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10a      	bne.n	800e728 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e716:	f383 8811 	msr	BASEPRI, r3
 800e71a:	f3bf 8f6f 	isb	sy
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	60fb      	str	r3, [r7, #12]
}
 800e724:	bf00      	nop
 800e726:	e7fe      	b.n	800e726 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	3318      	adds	r3, #24
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7fe fb4d 	bl	800cdcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e732:	4b1e      	ldr	r3, [pc, #120]	; (800e7ac <xTaskRemoveFromEventList+0xb0>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d11d      	bne.n	800e776 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	3304      	adds	r3, #4
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fe fb44 	bl	800cdcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e748:	4b19      	ldr	r3, [pc, #100]	; (800e7b0 <xTaskRemoveFromEventList+0xb4>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d903      	bls.n	800e758 <xTaskRemoveFromEventList+0x5c>
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e754:	4a16      	ldr	r2, [pc, #88]	; (800e7b0 <xTaskRemoveFromEventList+0xb4>)
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75c:	4613      	mov	r3, r2
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	4413      	add	r3, r2
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	4a13      	ldr	r2, [pc, #76]	; (800e7b4 <xTaskRemoveFromEventList+0xb8>)
 800e766:	441a      	add	r2, r3
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	3304      	adds	r3, #4
 800e76c:	4619      	mov	r1, r3
 800e76e:	4610      	mov	r0, r2
 800e770:	f7fe facf 	bl	800cd12 <vListInsertEnd>
 800e774:	e005      	b.n	800e782 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	3318      	adds	r3, #24
 800e77a:	4619      	mov	r1, r3
 800e77c:	480e      	ldr	r0, [pc, #56]	; (800e7b8 <xTaskRemoveFromEventList+0xbc>)
 800e77e:	f7fe fac8 	bl	800cd12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e786:	4b0d      	ldr	r3, [pc, #52]	; (800e7bc <xTaskRemoveFromEventList+0xc0>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d905      	bls.n	800e79c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e790:	2301      	movs	r3, #1
 800e792:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e794:	4b0a      	ldr	r3, [pc, #40]	; (800e7c0 <xTaskRemoveFromEventList+0xc4>)
 800e796:	2201      	movs	r2, #1
 800e798:	601a      	str	r2, [r3, #0]
 800e79a:	e001      	b.n	800e7a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e79c:	2300      	movs	r3, #0
 800e79e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e7a0:	697b      	ldr	r3, [r7, #20]
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3718      	adds	r7, #24
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	200014a8 	.word	0x200014a8
 800e7b0:	20001488 	.word	0x20001488
 800e7b4:	20000fb0 	.word	0x20000fb0
 800e7b8:	20001440 	.word	0x20001440
 800e7bc:	20000fac 	.word	0x20000fac
 800e7c0:	20001494 	.word	0x20001494

0800e7c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e7cc:	4b06      	ldr	r3, [pc, #24]	; (800e7e8 <vTaskInternalSetTimeOutState+0x24>)
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e7d4:	4b05      	ldr	r3, [pc, #20]	; (800e7ec <vTaskInternalSetTimeOutState+0x28>)
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	605a      	str	r2, [r3, #4]
}
 800e7dc:	bf00      	nop
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr
 800e7e8:	20001498 	.word	0x20001498
 800e7ec:	20001484 	.word	0x20001484

0800e7f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b088      	sub	sp, #32
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10a      	bne.n	800e816 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	613b      	str	r3, [r7, #16]
}
 800e812:	bf00      	nop
 800e814:	e7fe      	b.n	800e814 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d10a      	bne.n	800e832 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e820:	f383 8811 	msr	BASEPRI, r3
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	60fb      	str	r3, [r7, #12]
}
 800e82e:	bf00      	nop
 800e830:	e7fe      	b.n	800e830 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e832:	f000 ff77 	bl	800f724 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e836:	4b1d      	ldr	r3, [pc, #116]	; (800e8ac <xTaskCheckForTimeOut+0xbc>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	69ba      	ldr	r2, [r7, #24]
 800e842:	1ad3      	subs	r3, r2, r3
 800e844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e84e:	d102      	bne.n	800e856 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e850:	2300      	movs	r3, #0
 800e852:	61fb      	str	r3, [r7, #28]
 800e854:	e023      	b.n	800e89e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	4b15      	ldr	r3, [pc, #84]	; (800e8b0 <xTaskCheckForTimeOut+0xc0>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	429a      	cmp	r2, r3
 800e860:	d007      	beq.n	800e872 <xTaskCheckForTimeOut+0x82>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	69ba      	ldr	r2, [r7, #24]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d302      	bcc.n	800e872 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e86c:	2301      	movs	r3, #1
 800e86e:	61fb      	str	r3, [r7, #28]
 800e870:	e015      	b.n	800e89e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	697a      	ldr	r2, [r7, #20]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d20b      	bcs.n	800e894 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	1ad2      	subs	r2, r2, r3
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f7ff ff9b 	bl	800e7c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e88e:	2300      	movs	r3, #0
 800e890:	61fb      	str	r3, [r7, #28]
 800e892:	e004      	b.n	800e89e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	2200      	movs	r2, #0
 800e898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e89a:	2301      	movs	r3, #1
 800e89c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e89e:	f000 ff71 	bl	800f784 <vPortExitCritical>

	return xReturn;
 800e8a2:	69fb      	ldr	r3, [r7, #28]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3720      	adds	r7, #32
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	20001484 	.word	0x20001484
 800e8b0:	20001498 	.word	0x20001498

0800e8b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e8b8:	4b03      	ldr	r3, [pc, #12]	; (800e8c8 <vTaskMissedYield+0x14>)
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	601a      	str	r2, [r3, #0]
}
 800e8be:	bf00      	nop
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr
 800e8c8:	20001494 	.word	0x20001494

0800e8cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e8d4:	f000 f852 	bl	800e97c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e8d8:	4b06      	ldr	r3, [pc, #24]	; (800e8f4 <prvIdleTask+0x28>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d9f9      	bls.n	800e8d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e8e0:	4b05      	ldr	r3, [pc, #20]	; (800e8f8 <prvIdleTask+0x2c>)
 800e8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8e6:	601a      	str	r2, [r3, #0]
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e8f0:	e7f0      	b.n	800e8d4 <prvIdleTask+0x8>
 800e8f2:	bf00      	nop
 800e8f4:	20000fb0 	.word	0x20000fb0
 800e8f8:	e000ed04 	.word	0xe000ed04

0800e8fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e902:	2300      	movs	r3, #0
 800e904:	607b      	str	r3, [r7, #4]
 800e906:	e00c      	b.n	800e922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	4613      	mov	r3, r2
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	4413      	add	r3, r2
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	4a12      	ldr	r2, [pc, #72]	; (800e95c <prvInitialiseTaskLists+0x60>)
 800e914:	4413      	add	r3, r2
 800e916:	4618      	mov	r0, r3
 800e918:	f7fe f9ce 	bl	800ccb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	3301      	adds	r3, #1
 800e920:	607b      	str	r3, [r7, #4]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2b37      	cmp	r3, #55	; 0x37
 800e926:	d9ef      	bls.n	800e908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e928:	480d      	ldr	r0, [pc, #52]	; (800e960 <prvInitialiseTaskLists+0x64>)
 800e92a:	f7fe f9c5 	bl	800ccb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e92e:	480d      	ldr	r0, [pc, #52]	; (800e964 <prvInitialiseTaskLists+0x68>)
 800e930:	f7fe f9c2 	bl	800ccb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e934:	480c      	ldr	r0, [pc, #48]	; (800e968 <prvInitialiseTaskLists+0x6c>)
 800e936:	f7fe f9bf 	bl	800ccb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e93a:	480c      	ldr	r0, [pc, #48]	; (800e96c <prvInitialiseTaskLists+0x70>)
 800e93c:	f7fe f9bc 	bl	800ccb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e940:	480b      	ldr	r0, [pc, #44]	; (800e970 <prvInitialiseTaskLists+0x74>)
 800e942:	f7fe f9b9 	bl	800ccb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e946:	4b0b      	ldr	r3, [pc, #44]	; (800e974 <prvInitialiseTaskLists+0x78>)
 800e948:	4a05      	ldr	r2, [pc, #20]	; (800e960 <prvInitialiseTaskLists+0x64>)
 800e94a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e94c:	4b0a      	ldr	r3, [pc, #40]	; (800e978 <prvInitialiseTaskLists+0x7c>)
 800e94e:	4a05      	ldr	r2, [pc, #20]	; (800e964 <prvInitialiseTaskLists+0x68>)
 800e950:	601a      	str	r2, [r3, #0]
}
 800e952:	bf00      	nop
 800e954:	3708      	adds	r7, #8
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	20000fb0 	.word	0x20000fb0
 800e960:	20001410 	.word	0x20001410
 800e964:	20001424 	.word	0x20001424
 800e968:	20001440 	.word	0x20001440
 800e96c:	20001454 	.word	0x20001454
 800e970:	2000146c 	.word	0x2000146c
 800e974:	20001438 	.word	0x20001438
 800e978:	2000143c 	.word	0x2000143c

0800e97c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e982:	e019      	b.n	800e9b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e984:	f000 fece 	bl	800f724 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e988:	4b10      	ldr	r3, [pc, #64]	; (800e9cc <prvCheckTasksWaitingTermination+0x50>)
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	3304      	adds	r3, #4
 800e994:	4618      	mov	r0, r3
 800e996:	f7fe fa19 	bl	800cdcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e99a:	4b0d      	ldr	r3, [pc, #52]	; (800e9d0 <prvCheckTasksWaitingTermination+0x54>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	4a0b      	ldr	r2, [pc, #44]	; (800e9d0 <prvCheckTasksWaitingTermination+0x54>)
 800e9a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e9a4:	4b0b      	ldr	r3, [pc, #44]	; (800e9d4 <prvCheckTasksWaitingTermination+0x58>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	4a0a      	ldr	r2, [pc, #40]	; (800e9d4 <prvCheckTasksWaitingTermination+0x58>)
 800e9ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e9ae:	f000 fee9 	bl	800f784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f000 f810 	bl	800e9d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9b8:	4b06      	ldr	r3, [pc, #24]	; (800e9d4 <prvCheckTasksWaitingTermination+0x58>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d1e1      	bne.n	800e984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e9c0:	bf00      	nop
 800e9c2:	bf00      	nop
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20001454 	.word	0x20001454
 800e9d0:	20001480 	.word	0x20001480
 800e9d4:	20001468 	.word	0x20001468

0800e9d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d108      	bne.n	800e9fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f001 f886 	bl	800fb00 <vPortFree>
				vPortFree( pxTCB );
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f001 f883 	bl	800fb00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9fa:	e018      	b.n	800ea2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d103      	bne.n	800ea0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f001 f87a 	bl	800fb00 <vPortFree>
	}
 800ea0c:	e00f      	b.n	800ea2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ea14:	2b02      	cmp	r3, #2
 800ea16:	d00a      	beq.n	800ea2e <prvDeleteTCB+0x56>
	__asm volatile
 800ea18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1c:	f383 8811 	msr	BASEPRI, r3
 800ea20:	f3bf 8f6f 	isb	sy
 800ea24:	f3bf 8f4f 	dsb	sy
 800ea28:	60fb      	str	r3, [r7, #12]
}
 800ea2a:	bf00      	nop
 800ea2c:	e7fe      	b.n	800ea2c <prvDeleteTCB+0x54>
	}
 800ea2e:	bf00      	nop
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
	...

0800ea38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b083      	sub	sp, #12
 800ea3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea3e:	4b0c      	ldr	r3, [pc, #48]	; (800ea70 <prvResetNextTaskUnblockTime+0x38>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d104      	bne.n	800ea52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea48:	4b0a      	ldr	r3, [pc, #40]	; (800ea74 <prvResetNextTaskUnblockTime+0x3c>)
 800ea4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea50:	e008      	b.n	800ea64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea52:	4b07      	ldr	r3, [pc, #28]	; (800ea70 <prvResetNextTaskUnblockTime+0x38>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	68db      	ldr	r3, [r3, #12]
 800ea5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	4a04      	ldr	r2, [pc, #16]	; (800ea74 <prvResetNextTaskUnblockTime+0x3c>)
 800ea62:	6013      	str	r3, [r2, #0]
}
 800ea64:	bf00      	nop
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr
 800ea70:	20001438 	.word	0x20001438
 800ea74:	200014a0 	.word	0x200014a0

0800ea78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea7e:	4b0b      	ldr	r3, [pc, #44]	; (800eaac <xTaskGetSchedulerState+0x34>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d102      	bne.n	800ea8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea86:	2301      	movs	r3, #1
 800ea88:	607b      	str	r3, [r7, #4]
 800ea8a:	e008      	b.n	800ea9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea8c:	4b08      	ldr	r3, [pc, #32]	; (800eab0 <xTaskGetSchedulerState+0x38>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d102      	bne.n	800ea9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea94:	2302      	movs	r3, #2
 800ea96:	607b      	str	r3, [r7, #4]
 800ea98:	e001      	b.n	800ea9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea9e:	687b      	ldr	r3, [r7, #4]
	}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr
 800eaac:	2000148c 	.word	0x2000148c
 800eab0:	200014a8 	.word	0x200014a8

0800eab4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eac0:	2300      	movs	r3, #0
 800eac2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d051      	beq.n	800eb6e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eace:	4b2a      	ldr	r3, [pc, #168]	; (800eb78 <xTaskPriorityInherit+0xc4>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d241      	bcs.n	800eb5c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	699b      	ldr	r3, [r3, #24]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	db06      	blt.n	800eaee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eae0:	4b25      	ldr	r3, [pc, #148]	; (800eb78 <xTaskPriorityInherit+0xc4>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	6959      	ldr	r1, [r3, #20]
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	4413      	add	r3, r2
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	4a1f      	ldr	r2, [pc, #124]	; (800eb7c <xTaskPriorityInherit+0xc8>)
 800eb00:	4413      	add	r3, r2
 800eb02:	4299      	cmp	r1, r3
 800eb04:	d122      	bne.n	800eb4c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	3304      	adds	r3, #4
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fe f95e 	bl	800cdcc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb10:	4b19      	ldr	r3, [pc, #100]	; (800eb78 <xTaskPriorityInherit+0xc4>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb1e:	4b18      	ldr	r3, [pc, #96]	; (800eb80 <xTaskPriorityInherit+0xcc>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d903      	bls.n	800eb2e <xTaskPriorityInherit+0x7a>
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb2a:	4a15      	ldr	r2, [pc, #84]	; (800eb80 <xTaskPriorityInherit+0xcc>)
 800eb2c:	6013      	str	r3, [r2, #0]
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb32:	4613      	mov	r3, r2
 800eb34:	009b      	lsls	r3, r3, #2
 800eb36:	4413      	add	r3, r2
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	4a10      	ldr	r2, [pc, #64]	; (800eb7c <xTaskPriorityInherit+0xc8>)
 800eb3c:	441a      	add	r2, r3
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	3304      	adds	r3, #4
 800eb42:	4619      	mov	r1, r3
 800eb44:	4610      	mov	r0, r2
 800eb46:	f7fe f8e4 	bl	800cd12 <vListInsertEnd>
 800eb4a:	e004      	b.n	800eb56 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb4c:	4b0a      	ldr	r3, [pc, #40]	; (800eb78 <xTaskPriorityInherit+0xc4>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb56:	2301      	movs	r3, #1
 800eb58:	60fb      	str	r3, [r7, #12]
 800eb5a:	e008      	b.n	800eb6e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb60:	4b05      	ldr	r3, [pc, #20]	; (800eb78 <xTaskPriorityInherit+0xc4>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d201      	bcs.n	800eb6e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
	}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	20000fac 	.word	0x20000fac
 800eb7c:	20000fb0 	.word	0x20000fb0
 800eb80:	20001488 	.word	0x20001488

0800eb84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b086      	sub	sp, #24
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb90:	2300      	movs	r3, #0
 800eb92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d056      	beq.n	800ec48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb9a:	4b2e      	ldr	r3, [pc, #184]	; (800ec54 <xTaskPriorityDisinherit+0xd0>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	693a      	ldr	r2, [r7, #16]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d00a      	beq.n	800ebba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba8:	f383 8811 	msr	BASEPRI, r3
 800ebac:	f3bf 8f6f 	isb	sy
 800ebb0:	f3bf 8f4f 	dsb	sy
 800ebb4:	60fb      	str	r3, [r7, #12]
}
 800ebb6:	bf00      	nop
 800ebb8:	e7fe      	b.n	800ebb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d10a      	bne.n	800ebd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ebc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc6:	f383 8811 	msr	BASEPRI, r3
 800ebca:	f3bf 8f6f 	isb	sy
 800ebce:	f3bf 8f4f 	dsb	sy
 800ebd2:	60bb      	str	r3, [r7, #8]
}
 800ebd4:	bf00      	nop
 800ebd6:	e7fe      	b.n	800ebd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebdc:	1e5a      	subs	r2, r3, #1
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d02c      	beq.n	800ec48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d128      	bne.n	800ec48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	3304      	adds	r3, #4
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fe f8e6 	bl	800cdcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec18:	4b0f      	ldr	r3, [pc, #60]	; (800ec58 <xTaskPriorityDisinherit+0xd4>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d903      	bls.n	800ec28 <xTaskPriorityDisinherit+0xa4>
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec24:	4a0c      	ldr	r2, [pc, #48]	; (800ec58 <xTaskPriorityDisinherit+0xd4>)
 800ec26:	6013      	str	r3, [r2, #0]
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec2c:	4613      	mov	r3, r2
 800ec2e:	009b      	lsls	r3, r3, #2
 800ec30:	4413      	add	r3, r2
 800ec32:	009b      	lsls	r3, r3, #2
 800ec34:	4a09      	ldr	r2, [pc, #36]	; (800ec5c <xTaskPriorityDisinherit+0xd8>)
 800ec36:	441a      	add	r2, r3
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	3304      	adds	r3, #4
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	4610      	mov	r0, r2
 800ec40:	f7fe f867 	bl	800cd12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec44:	2301      	movs	r3, #1
 800ec46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec48:	697b      	ldr	r3, [r7, #20]
	}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3718      	adds	r7, #24
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	20000fac 	.word	0x20000fac
 800ec58:	20001488 	.word	0x20001488
 800ec5c:	20000fb0 	.word	0x20000fb0

0800ec60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b088      	sub	sp, #32
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d06a      	beq.n	800ed4e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d10a      	bne.n	800ec96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ec80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec84:	f383 8811 	msr	BASEPRI, r3
 800ec88:	f3bf 8f6f 	isb	sy
 800ec8c:	f3bf 8f4f 	dsb	sy
 800ec90:	60fb      	str	r3, [r7, #12]
}
 800ec92:	bf00      	nop
 800ec94:	e7fe      	b.n	800ec94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d902      	bls.n	800eca6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	61fb      	str	r3, [r7, #28]
 800eca4:	e002      	b.n	800ecac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecaa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb0:	69fa      	ldr	r2, [r7, #28]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d04b      	beq.n	800ed4e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecba:	697a      	ldr	r2, [r7, #20]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d146      	bne.n	800ed4e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ecc0:	4b25      	ldr	r3, [pc, #148]	; (800ed58 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	69ba      	ldr	r2, [r7, #24]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d10a      	bne.n	800ece0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ecca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecce:	f383 8811 	msr	BASEPRI, r3
 800ecd2:	f3bf 8f6f 	isb	sy
 800ecd6:	f3bf 8f4f 	dsb	sy
 800ecda:	60bb      	str	r3, [r7, #8]
}
 800ecdc:	bf00      	nop
 800ecde:	e7fe      	b.n	800ecde <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	69fa      	ldr	r2, [r7, #28]
 800ecea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	699b      	ldr	r3, [r3, #24]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	db04      	blt.n	800ecfe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	6959      	ldr	r1, [r3, #20]
 800ed02:	693a      	ldr	r2, [r7, #16]
 800ed04:	4613      	mov	r3, r2
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	4413      	add	r3, r2
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	4a13      	ldr	r2, [pc, #76]	; (800ed5c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ed0e:	4413      	add	r3, r2
 800ed10:	4299      	cmp	r1, r3
 800ed12:	d11c      	bne.n	800ed4e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	3304      	adds	r3, #4
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fe f857 	bl	800cdcc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ed1e:	69bb      	ldr	r3, [r7, #24]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	4b0f      	ldr	r3, [pc, #60]	; (800ed60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d903      	bls.n	800ed32 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2e:	4a0c      	ldr	r2, [pc, #48]	; (800ed60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed30:	6013      	str	r3, [r2, #0]
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed36:	4613      	mov	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4413      	add	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4a07      	ldr	r2, [pc, #28]	; (800ed5c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ed40:	441a      	add	r2, r3
 800ed42:	69bb      	ldr	r3, [r7, #24]
 800ed44:	3304      	adds	r3, #4
 800ed46:	4619      	mov	r1, r3
 800ed48:	4610      	mov	r0, r2
 800ed4a:	f7fd ffe2 	bl	800cd12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed4e:	bf00      	nop
 800ed50:	3720      	adds	r7, #32
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	20000fac 	.word	0x20000fac
 800ed5c:	20000fb0 	.word	0x20000fb0
 800ed60:	20001488 	.word	0x20001488

0800ed64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ed64:	b480      	push	{r7}
 800ed66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ed68:	4b07      	ldr	r3, [pc, #28]	; (800ed88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d004      	beq.n	800ed7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ed70:	4b05      	ldr	r3, [pc, #20]	; (800ed88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed76:	3201      	adds	r2, #1
 800ed78:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ed7a:	4b03      	ldr	r3, [pc, #12]	; (800ed88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
	}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr
 800ed88:	20000fac 	.word	0x20000fac

0800ed8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ed96:	4b21      	ldr	r3, [pc, #132]	; (800ee1c <prvAddCurrentTaskToDelayedList+0x90>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed9c:	4b20      	ldr	r3, [pc, #128]	; (800ee20 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	3304      	adds	r3, #4
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fe f812 	bl	800cdcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edae:	d10a      	bne.n	800edc6 <prvAddCurrentTaskToDelayedList+0x3a>
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d007      	beq.n	800edc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edb6:	4b1a      	ldr	r3, [pc, #104]	; (800ee20 <prvAddCurrentTaskToDelayedList+0x94>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	3304      	adds	r3, #4
 800edbc:	4619      	mov	r1, r3
 800edbe:	4819      	ldr	r0, [pc, #100]	; (800ee24 <prvAddCurrentTaskToDelayedList+0x98>)
 800edc0:	f7fd ffa7 	bl	800cd12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800edc4:	e026      	b.n	800ee14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800edc6:	68fa      	ldr	r2, [r7, #12]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4413      	add	r3, r2
 800edcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800edce:	4b14      	ldr	r3, [pc, #80]	; (800ee20 <prvAddCurrentTaskToDelayedList+0x94>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800edd6:	68ba      	ldr	r2, [r7, #8]
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	429a      	cmp	r2, r3
 800eddc:	d209      	bcs.n	800edf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edde:	4b12      	ldr	r3, [pc, #72]	; (800ee28 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	4b0f      	ldr	r3, [pc, #60]	; (800ee20 <prvAddCurrentTaskToDelayedList+0x94>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	3304      	adds	r3, #4
 800ede8:	4619      	mov	r1, r3
 800edea:	4610      	mov	r0, r2
 800edec:	f7fd ffb5 	bl	800cd5a <vListInsert>
}
 800edf0:	e010      	b.n	800ee14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edf2:	4b0e      	ldr	r3, [pc, #56]	; (800ee2c <prvAddCurrentTaskToDelayedList+0xa0>)
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	4b0a      	ldr	r3, [pc, #40]	; (800ee20 <prvAddCurrentTaskToDelayedList+0x94>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	3304      	adds	r3, #4
 800edfc:	4619      	mov	r1, r3
 800edfe:	4610      	mov	r0, r2
 800ee00:	f7fd ffab 	bl	800cd5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee04:	4b0a      	ldr	r3, [pc, #40]	; (800ee30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	68ba      	ldr	r2, [r7, #8]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d202      	bcs.n	800ee14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ee0e:	4a08      	ldr	r2, [pc, #32]	; (800ee30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	6013      	str	r3, [r2, #0]
}
 800ee14:	bf00      	nop
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20001484 	.word	0x20001484
 800ee20:	20000fac 	.word	0x20000fac
 800ee24:	2000146c 	.word	0x2000146c
 800ee28:	2000143c 	.word	0x2000143c
 800ee2c:	20001438 	.word	0x20001438
 800ee30:	200014a0 	.word	0x200014a0

0800ee34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b08a      	sub	sp, #40	; 0x28
 800ee38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ee3e:	f000 fb07 	bl	800f450 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ee42:	4b1c      	ldr	r3, [pc, #112]	; (800eeb4 <xTimerCreateTimerTask+0x80>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d021      	beq.n	800ee8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ee52:	1d3a      	adds	r2, r7, #4
 800ee54:	f107 0108 	add.w	r1, r7, #8
 800ee58:	f107 030c 	add.w	r3, r7, #12
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7fd ff11 	bl	800cc84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ee62:	6879      	ldr	r1, [r7, #4]
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	68fa      	ldr	r2, [r7, #12]
 800ee68:	9202      	str	r2, [sp, #8]
 800ee6a:	9301      	str	r3, [sp, #4]
 800ee6c:	2302      	movs	r3, #2
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	2300      	movs	r3, #0
 800ee72:	460a      	mov	r2, r1
 800ee74:	4910      	ldr	r1, [pc, #64]	; (800eeb8 <xTimerCreateTimerTask+0x84>)
 800ee76:	4811      	ldr	r0, [pc, #68]	; (800eebc <xTimerCreateTimerTask+0x88>)
 800ee78:	f7fe ffe0 	bl	800de3c <xTaskCreateStatic>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	4a10      	ldr	r2, [pc, #64]	; (800eec0 <xTimerCreateTimerTask+0x8c>)
 800ee80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ee82:	4b0f      	ldr	r3, [pc, #60]	; (800eec0 <xTimerCreateTimerTask+0x8c>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10a      	bne.n	800eeaa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ee94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	613b      	str	r3, [r7, #16]
}
 800eea6:	bf00      	nop
 800eea8:	e7fe      	b.n	800eea8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eeaa:	697b      	ldr	r3, [r7, #20]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3718      	adds	r7, #24
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	200014dc 	.word	0x200014dc
 800eeb8:	0801352c 	.word	0x0801352c
 800eebc:	0800eff9 	.word	0x0800eff9
 800eec0:	200014e0 	.word	0x200014e0

0800eec4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08a      	sub	sp, #40	; 0x28
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
 800eed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eed2:	2300      	movs	r3, #0
 800eed4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d10a      	bne.n	800eef2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800eedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	f3bf 8f6f 	isb	sy
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	623b      	str	r3, [r7, #32]
}
 800eeee:	bf00      	nop
 800eef0:	e7fe      	b.n	800eef0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eef2:	4b1a      	ldr	r3, [pc, #104]	; (800ef5c <xTimerGenericCommand+0x98>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d02a      	beq.n	800ef50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	2b05      	cmp	r3, #5
 800ef0a:	dc18      	bgt.n	800ef3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef0c:	f7ff fdb4 	bl	800ea78 <xTaskGetSchedulerState>
 800ef10:	4603      	mov	r3, r0
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	d109      	bne.n	800ef2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef16:	4b11      	ldr	r3, [pc, #68]	; (800ef5c <xTimerGenericCommand+0x98>)
 800ef18:	6818      	ldr	r0, [r3, #0]
 800ef1a:	f107 0110 	add.w	r1, r7, #16
 800ef1e:	2300      	movs	r3, #0
 800ef20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef22:	f7fe f925 	bl	800d170 <xQueueGenericSend>
 800ef26:	6278      	str	r0, [r7, #36]	; 0x24
 800ef28:	e012      	b.n	800ef50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef2a:	4b0c      	ldr	r3, [pc, #48]	; (800ef5c <xTimerGenericCommand+0x98>)
 800ef2c:	6818      	ldr	r0, [r3, #0]
 800ef2e:	f107 0110 	add.w	r1, r7, #16
 800ef32:	2300      	movs	r3, #0
 800ef34:	2200      	movs	r2, #0
 800ef36:	f7fe f91b 	bl	800d170 <xQueueGenericSend>
 800ef3a:	6278      	str	r0, [r7, #36]	; 0x24
 800ef3c:	e008      	b.n	800ef50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ef3e:	4b07      	ldr	r3, [pc, #28]	; (800ef5c <xTimerGenericCommand+0x98>)
 800ef40:	6818      	ldr	r0, [r3, #0]
 800ef42:	f107 0110 	add.w	r1, r7, #16
 800ef46:	2300      	movs	r3, #0
 800ef48:	683a      	ldr	r2, [r7, #0]
 800ef4a:	f7fe fa0f 	bl	800d36c <xQueueGenericSendFromISR>
 800ef4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ef50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3728      	adds	r7, #40	; 0x28
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	200014dc 	.word	0x200014dc

0800ef60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b088      	sub	sp, #32
 800ef64:	af02      	add	r7, sp, #8
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef6a:	4b22      	ldr	r3, [pc, #136]	; (800eff4 <prvProcessExpiredTimer+0x94>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	68db      	ldr	r3, [r3, #12]
 800ef72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	3304      	adds	r3, #4
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7fd ff27 	bl	800cdcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef84:	f003 0304 	and.w	r3, r3, #4
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d022      	beq.n	800efd2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	699a      	ldr	r2, [r3, #24]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	18d1      	adds	r1, r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	6978      	ldr	r0, [r7, #20]
 800ef9a:	f000 f8d1 	bl	800f140 <prvInsertTimerInActiveList>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d01f      	beq.n	800efe4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efa4:	2300      	movs	r3, #0
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	2300      	movs	r3, #0
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	2100      	movs	r1, #0
 800efae:	6978      	ldr	r0, [r7, #20]
 800efb0:	f7ff ff88 	bl	800eec4 <xTimerGenericCommand>
 800efb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d113      	bne.n	800efe4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800efbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc0:	f383 8811 	msr	BASEPRI, r3
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	60fb      	str	r3, [r7, #12]
}
 800efce:	bf00      	nop
 800efd0:	e7fe      	b.n	800efd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efd8:	f023 0301 	bic.w	r3, r3, #1
 800efdc:	b2da      	uxtb	r2, r3
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	6a1b      	ldr	r3, [r3, #32]
 800efe8:	6978      	ldr	r0, [r7, #20]
 800efea:	4798      	blx	r3
}
 800efec:	bf00      	nop
 800efee:	3718      	adds	r7, #24
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	200014d4 	.word	0x200014d4

0800eff8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f000:	f107 0308 	add.w	r3, r7, #8
 800f004:	4618      	mov	r0, r3
 800f006:	f000 f857 	bl	800f0b8 <prvGetNextExpireTime>
 800f00a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	4619      	mov	r1, r3
 800f010:	68f8      	ldr	r0, [r7, #12]
 800f012:	f000 f803 	bl	800f01c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f016:	f000 f8d5 	bl	800f1c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f01a:	e7f1      	b.n	800f000 <prvTimerTask+0x8>

0800f01c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f026:	f7ff f945 	bl	800e2b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f02a:	f107 0308 	add.w	r3, r7, #8
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 f866 	bl	800f100 <prvSampleTimeNow>
 800f034:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d130      	bne.n	800f09e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10a      	bne.n	800f058 <prvProcessTimerOrBlockTask+0x3c>
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	429a      	cmp	r2, r3
 800f048:	d806      	bhi.n	800f058 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f04a:	f7ff f941 	bl	800e2d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f04e:	68f9      	ldr	r1, [r7, #12]
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7ff ff85 	bl	800ef60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f056:	e024      	b.n	800f0a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d008      	beq.n	800f070 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f05e:	4b13      	ldr	r3, [pc, #76]	; (800f0ac <prvProcessTimerOrBlockTask+0x90>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d101      	bne.n	800f06c <prvProcessTimerOrBlockTask+0x50>
 800f068:	2301      	movs	r3, #1
 800f06a:	e000      	b.n	800f06e <prvProcessTimerOrBlockTask+0x52>
 800f06c:	2300      	movs	r3, #0
 800f06e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f070:	4b0f      	ldr	r3, [pc, #60]	; (800f0b0 <prvProcessTimerOrBlockTask+0x94>)
 800f072:	6818      	ldr	r0, [r3, #0]
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	683a      	ldr	r2, [r7, #0]
 800f07c:	4619      	mov	r1, r3
 800f07e:	f7fe fea9 	bl	800ddd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f082:	f7ff f925 	bl	800e2d0 <xTaskResumeAll>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10a      	bne.n	800f0a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f08c:	4b09      	ldr	r3, [pc, #36]	; (800f0b4 <prvProcessTimerOrBlockTask+0x98>)
 800f08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f092:	601a      	str	r2, [r3, #0]
 800f094:	f3bf 8f4f 	dsb	sy
 800f098:	f3bf 8f6f 	isb	sy
}
 800f09c:	e001      	b.n	800f0a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f09e:	f7ff f917 	bl	800e2d0 <xTaskResumeAll>
}
 800f0a2:	bf00      	nop
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	200014d8 	.word	0x200014d8
 800f0b0:	200014dc 	.word	0x200014dc
 800f0b4:	e000ed04 	.word	0xe000ed04

0800f0b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b085      	sub	sp, #20
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f0c0:	4b0e      	ldr	r3, [pc, #56]	; (800f0fc <prvGetNextExpireTime+0x44>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d101      	bne.n	800f0ce <prvGetNextExpireTime+0x16>
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	e000      	b.n	800f0d0 <prvGetNextExpireTime+0x18>
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d105      	bne.n	800f0e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0dc:	4b07      	ldr	r3, [pc, #28]	; (800f0fc <prvGetNextExpireTime+0x44>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	60fb      	str	r3, [r7, #12]
 800f0e6:	e001      	b.n	800f0ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3714      	adds	r7, #20
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr
 800f0fa:	bf00      	nop
 800f0fc:	200014d4 	.word	0x200014d4

0800f100 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f108:	f7ff f980 	bl	800e40c <xTaskGetTickCount>
 800f10c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f10e:	4b0b      	ldr	r3, [pc, #44]	; (800f13c <prvSampleTimeNow+0x3c>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	68fa      	ldr	r2, [r7, #12]
 800f114:	429a      	cmp	r2, r3
 800f116:	d205      	bcs.n	800f124 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f118:	f000 f936 	bl	800f388 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2201      	movs	r2, #1
 800f120:	601a      	str	r2, [r3, #0]
 800f122:	e002      	b.n	800f12a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2200      	movs	r2, #0
 800f128:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f12a:	4a04      	ldr	r2, [pc, #16]	; (800f13c <prvSampleTimeNow+0x3c>)
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f130:	68fb      	ldr	r3, [r7, #12]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3710      	adds	r7, #16
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	200014e4 	.word	0x200014e4

0800f140 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b086      	sub	sp, #24
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
 800f14c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f14e:	2300      	movs	r3, #0
 800f150:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	68ba      	ldr	r2, [r7, #8]
 800f156:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	68fa      	ldr	r2, [r7, #12]
 800f15c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f15e:	68ba      	ldr	r2, [r7, #8]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	429a      	cmp	r2, r3
 800f164:	d812      	bhi.n	800f18c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	1ad2      	subs	r2, r2, r3
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	699b      	ldr	r3, [r3, #24]
 800f170:	429a      	cmp	r2, r3
 800f172:	d302      	bcc.n	800f17a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f174:	2301      	movs	r3, #1
 800f176:	617b      	str	r3, [r7, #20]
 800f178:	e01b      	b.n	800f1b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f17a:	4b10      	ldr	r3, [pc, #64]	; (800f1bc <prvInsertTimerInActiveList+0x7c>)
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	3304      	adds	r3, #4
 800f182:	4619      	mov	r1, r3
 800f184:	4610      	mov	r0, r2
 800f186:	f7fd fde8 	bl	800cd5a <vListInsert>
 800f18a:	e012      	b.n	800f1b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	429a      	cmp	r2, r3
 800f192:	d206      	bcs.n	800f1a2 <prvInsertTimerInActiveList+0x62>
 800f194:	68ba      	ldr	r2, [r7, #8]
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d302      	bcc.n	800f1a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f19c:	2301      	movs	r3, #1
 800f19e:	617b      	str	r3, [r7, #20]
 800f1a0:	e007      	b.n	800f1b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f1a2:	4b07      	ldr	r3, [pc, #28]	; (800f1c0 <prvInsertTimerInActiveList+0x80>)
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	3304      	adds	r3, #4
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	4610      	mov	r0, r2
 800f1ae:	f7fd fdd4 	bl	800cd5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f1b2:	697b      	ldr	r3, [r7, #20]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3718      	adds	r7, #24
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	200014d8 	.word	0x200014d8
 800f1c0:	200014d4 	.word	0x200014d4

0800f1c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b08e      	sub	sp, #56	; 0x38
 800f1c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1ca:	e0ca      	b.n	800f362 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	da18      	bge.n	800f204 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f1d2:	1d3b      	adds	r3, r7, #4
 800f1d4:	3304      	adds	r3, #4
 800f1d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d10a      	bne.n	800f1f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e2:	f383 8811 	msr	BASEPRI, r3
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	f3bf 8f4f 	dsb	sy
 800f1ee:	61fb      	str	r3, [r7, #28]
}
 800f1f0:	bf00      	nop
 800f1f2:	e7fe      	b.n	800f1f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1fa:	6850      	ldr	r0, [r2, #4]
 800f1fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1fe:	6892      	ldr	r2, [r2, #8]
 800f200:	4611      	mov	r1, r2
 800f202:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	f2c0 80ab 	blt.w	800f362 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f212:	695b      	ldr	r3, [r3, #20]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d004      	beq.n	800f222 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21a:	3304      	adds	r3, #4
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7fd fdd5 	bl	800cdcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f222:	463b      	mov	r3, r7
 800f224:	4618      	mov	r0, r3
 800f226:	f7ff ff6b 	bl	800f100 <prvSampleTimeNow>
 800f22a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2b09      	cmp	r3, #9
 800f230:	f200 8096 	bhi.w	800f360 <prvProcessReceivedCommands+0x19c>
 800f234:	a201      	add	r2, pc, #4	; (adr r2, 800f23c <prvProcessReceivedCommands+0x78>)
 800f236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f23a:	bf00      	nop
 800f23c:	0800f265 	.word	0x0800f265
 800f240:	0800f265 	.word	0x0800f265
 800f244:	0800f265 	.word	0x0800f265
 800f248:	0800f2d9 	.word	0x0800f2d9
 800f24c:	0800f2ed 	.word	0x0800f2ed
 800f250:	0800f337 	.word	0x0800f337
 800f254:	0800f265 	.word	0x0800f265
 800f258:	0800f265 	.word	0x0800f265
 800f25c:	0800f2d9 	.word	0x0800f2d9
 800f260:	0800f2ed 	.word	0x0800f2ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f26a:	f043 0301 	orr.w	r3, r3, #1
 800f26e:	b2da      	uxtb	r2, r3
 800f270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f276:	68ba      	ldr	r2, [r7, #8]
 800f278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27a:	699b      	ldr	r3, [r3, #24]
 800f27c:	18d1      	adds	r1, r2, r3
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f284:	f7ff ff5c 	bl	800f140 <prvInsertTimerInActiveList>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d069      	beq.n	800f362 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f290:	6a1b      	ldr	r3, [r3, #32]
 800f292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f294:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f29c:	f003 0304 	and.w	r3, r3, #4
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d05e      	beq.n	800f362 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f2a4:	68ba      	ldr	r2, [r7, #8]
 800f2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a8:	699b      	ldr	r3, [r3, #24]
 800f2aa:	441a      	add	r2, r3
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	9300      	str	r3, [sp, #0]
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2b6:	f7ff fe05 	bl	800eec4 <xTimerGenericCommand>
 800f2ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f2bc:	6a3b      	ldr	r3, [r7, #32]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d14f      	bne.n	800f362 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	61bb      	str	r3, [r7, #24]
}
 800f2d4:	bf00      	nop
 800f2d6:	e7fe      	b.n	800f2d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2de:	f023 0301 	bic.w	r3, r3, #1
 800f2e2:	b2da      	uxtb	r2, r3
 800f2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f2ea:	e03a      	b.n	800f362 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2f2:	f043 0301 	orr.w	r3, r3, #1
 800f2f6:	b2da      	uxtb	r2, r3
 800f2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f2fe:	68ba      	ldr	r2, [r7, #8]
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f306:	699b      	ldr	r3, [r3, #24]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d10a      	bne.n	800f322 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f310:	f383 8811 	msr	BASEPRI, r3
 800f314:	f3bf 8f6f 	isb	sy
 800f318:	f3bf 8f4f 	dsb	sy
 800f31c:	617b      	str	r3, [r7, #20]
}
 800f31e:	bf00      	nop
 800f320:	e7fe      	b.n	800f320 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f324:	699a      	ldr	r2, [r3, #24]
 800f326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f328:	18d1      	adds	r1, r2, r3
 800f32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f32e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f330:	f7ff ff06 	bl	800f140 <prvInsertTimerInActiveList>
					break;
 800f334:	e015      	b.n	800f362 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f33c:	f003 0302 	and.w	r3, r3, #2
 800f340:	2b00      	cmp	r3, #0
 800f342:	d103      	bne.n	800f34c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f346:	f000 fbdb 	bl	800fb00 <vPortFree>
 800f34a:	e00a      	b.n	800f362 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f352:	f023 0301 	bic.w	r3, r3, #1
 800f356:	b2da      	uxtb	r2, r3
 800f358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f35e:	e000      	b.n	800f362 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800f360:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f362:	4b08      	ldr	r3, [pc, #32]	; (800f384 <prvProcessReceivedCommands+0x1c0>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	1d39      	adds	r1, r7, #4
 800f368:	2200      	movs	r2, #0
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7fe f926 	bl	800d5bc <xQueueReceive>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	f47f af2a 	bne.w	800f1cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f378:	bf00      	nop
 800f37a:	bf00      	nop
 800f37c:	3730      	adds	r7, #48	; 0x30
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	200014dc 	.word	0x200014dc

0800f388 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b088      	sub	sp, #32
 800f38c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f38e:	e048      	b.n	800f422 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f390:	4b2d      	ldr	r3, [pc, #180]	; (800f448 <prvSwitchTimerLists+0xc0>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	68db      	ldr	r3, [r3, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f39a:	4b2b      	ldr	r3, [pc, #172]	; (800f448 <prvSwitchTimerLists+0xc0>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	3304      	adds	r3, #4
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7fd fd0f 	bl	800cdcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6a1b      	ldr	r3, [r3, #32]
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3bc:	f003 0304 	and.w	r3, r3, #4
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d02e      	beq.n	800f422 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	699b      	ldr	r3, [r3, #24]
 800f3c8:	693a      	ldr	r2, [r7, #16]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d90e      	bls.n	800f3f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	68ba      	ldr	r2, [r7, #8]
 800f3da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3e2:	4b19      	ldr	r3, [pc, #100]	; (800f448 <prvSwitchTimerLists+0xc0>)
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	3304      	adds	r3, #4
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	f7fd fcb4 	bl	800cd5a <vListInsert>
 800f3f2:	e016      	b.n	800f422 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	693a      	ldr	r2, [r7, #16]
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f7ff fd60 	bl	800eec4 <xTimerGenericCommand>
 800f404:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d10a      	bne.n	800f422 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f410:	f383 8811 	msr	BASEPRI, r3
 800f414:	f3bf 8f6f 	isb	sy
 800f418:	f3bf 8f4f 	dsb	sy
 800f41c:	603b      	str	r3, [r7, #0]
}
 800f41e:	bf00      	nop
 800f420:	e7fe      	b.n	800f420 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f422:	4b09      	ldr	r3, [pc, #36]	; (800f448 <prvSwitchTimerLists+0xc0>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1b1      	bne.n	800f390 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f42c:	4b06      	ldr	r3, [pc, #24]	; (800f448 <prvSwitchTimerLists+0xc0>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f432:	4b06      	ldr	r3, [pc, #24]	; (800f44c <prvSwitchTimerLists+0xc4>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a04      	ldr	r2, [pc, #16]	; (800f448 <prvSwitchTimerLists+0xc0>)
 800f438:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f43a:	4a04      	ldr	r2, [pc, #16]	; (800f44c <prvSwitchTimerLists+0xc4>)
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	6013      	str	r3, [r2, #0]
}
 800f440:	bf00      	nop
 800f442:	3718      	adds	r7, #24
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	200014d4 	.word	0x200014d4
 800f44c:	200014d8 	.word	0x200014d8

0800f450 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f456:	f000 f965 	bl	800f724 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f45a:	4b15      	ldr	r3, [pc, #84]	; (800f4b0 <prvCheckForValidListAndQueue+0x60>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d120      	bne.n	800f4a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f462:	4814      	ldr	r0, [pc, #80]	; (800f4b4 <prvCheckForValidListAndQueue+0x64>)
 800f464:	f7fd fc28 	bl	800ccb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f468:	4813      	ldr	r0, [pc, #76]	; (800f4b8 <prvCheckForValidListAndQueue+0x68>)
 800f46a:	f7fd fc25 	bl	800ccb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f46e:	4b13      	ldr	r3, [pc, #76]	; (800f4bc <prvCheckForValidListAndQueue+0x6c>)
 800f470:	4a10      	ldr	r2, [pc, #64]	; (800f4b4 <prvCheckForValidListAndQueue+0x64>)
 800f472:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f474:	4b12      	ldr	r3, [pc, #72]	; (800f4c0 <prvCheckForValidListAndQueue+0x70>)
 800f476:	4a10      	ldr	r2, [pc, #64]	; (800f4b8 <prvCheckForValidListAndQueue+0x68>)
 800f478:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f47a:	2300      	movs	r3, #0
 800f47c:	9300      	str	r3, [sp, #0]
 800f47e:	4b11      	ldr	r3, [pc, #68]	; (800f4c4 <prvCheckForValidListAndQueue+0x74>)
 800f480:	4a11      	ldr	r2, [pc, #68]	; (800f4c8 <prvCheckForValidListAndQueue+0x78>)
 800f482:	2110      	movs	r1, #16
 800f484:	200a      	movs	r0, #10
 800f486:	f7fd fd33 	bl	800cef0 <xQueueGenericCreateStatic>
 800f48a:	4603      	mov	r3, r0
 800f48c:	4a08      	ldr	r2, [pc, #32]	; (800f4b0 <prvCheckForValidListAndQueue+0x60>)
 800f48e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f490:	4b07      	ldr	r3, [pc, #28]	; (800f4b0 <prvCheckForValidListAndQueue+0x60>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d005      	beq.n	800f4a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f498:	4b05      	ldr	r3, [pc, #20]	; (800f4b0 <prvCheckForValidListAndQueue+0x60>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	490b      	ldr	r1, [pc, #44]	; (800f4cc <prvCheckForValidListAndQueue+0x7c>)
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fe fc44 	bl	800dd2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f4a4:	f000 f96e 	bl	800f784 <vPortExitCritical>
}
 800f4a8:	bf00      	nop
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	200014dc 	.word	0x200014dc
 800f4b4:	200014ac 	.word	0x200014ac
 800f4b8:	200014c0 	.word	0x200014c0
 800f4bc:	200014d4 	.word	0x200014d4
 800f4c0:	200014d8 	.word	0x200014d8
 800f4c4:	20001588 	.word	0x20001588
 800f4c8:	200014e8 	.word	0x200014e8
 800f4cc:	08013534 	.word	0x08013534

0800f4d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	3b04      	subs	r3, #4
 800f4e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f4e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	3b04      	subs	r3, #4
 800f4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	f023 0201 	bic.w	r2, r3, #1
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	3b04      	subs	r3, #4
 800f4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f500:	4a0c      	ldr	r2, [pc, #48]	; (800f534 <pxPortInitialiseStack+0x64>)
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	3b14      	subs	r3, #20
 800f50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	3b04      	subs	r3, #4
 800f516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f06f 0202 	mvn.w	r2, #2
 800f51e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	3b20      	subs	r3, #32
 800f524:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f526:	68fb      	ldr	r3, [r7, #12]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3714      	adds	r7, #20
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr
 800f534:	0800f539 	.word	0x0800f539

0800f538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f538:	b480      	push	{r7}
 800f53a:	b085      	sub	sp, #20
 800f53c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f53e:	2300      	movs	r3, #0
 800f540:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f542:	4b12      	ldr	r3, [pc, #72]	; (800f58c <prvTaskExitError+0x54>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f54a:	d00a      	beq.n	800f562 <prvTaskExitError+0x2a>
	__asm volatile
 800f54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f550:	f383 8811 	msr	BASEPRI, r3
 800f554:	f3bf 8f6f 	isb	sy
 800f558:	f3bf 8f4f 	dsb	sy
 800f55c:	60fb      	str	r3, [r7, #12]
}
 800f55e:	bf00      	nop
 800f560:	e7fe      	b.n	800f560 <prvTaskExitError+0x28>
	__asm volatile
 800f562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f566:	f383 8811 	msr	BASEPRI, r3
 800f56a:	f3bf 8f6f 	isb	sy
 800f56e:	f3bf 8f4f 	dsb	sy
 800f572:	60bb      	str	r3, [r7, #8]
}
 800f574:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f576:	bf00      	nop
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d0fc      	beq.n	800f578 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f57e:	bf00      	nop
 800f580:	bf00      	nop
 800f582:	3714      	adds	r7, #20
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr
 800f58c:	20000120 	.word	0x20000120

0800f590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f590:	4b07      	ldr	r3, [pc, #28]	; (800f5b0 <pxCurrentTCBConst2>)
 800f592:	6819      	ldr	r1, [r3, #0]
 800f594:	6808      	ldr	r0, [r1, #0]
 800f596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f59a:	f380 8809 	msr	PSP, r0
 800f59e:	f3bf 8f6f 	isb	sy
 800f5a2:	f04f 0000 	mov.w	r0, #0
 800f5a6:	f380 8811 	msr	BASEPRI, r0
 800f5aa:	4770      	bx	lr
 800f5ac:	f3af 8000 	nop.w

0800f5b0 <pxCurrentTCBConst2>:
 800f5b0:	20000fac 	.word	0x20000fac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f5b4:	bf00      	nop
 800f5b6:	bf00      	nop

0800f5b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f5b8:	4808      	ldr	r0, [pc, #32]	; (800f5dc <prvPortStartFirstTask+0x24>)
 800f5ba:	6800      	ldr	r0, [r0, #0]
 800f5bc:	6800      	ldr	r0, [r0, #0]
 800f5be:	f380 8808 	msr	MSP, r0
 800f5c2:	f04f 0000 	mov.w	r0, #0
 800f5c6:	f380 8814 	msr	CONTROL, r0
 800f5ca:	b662      	cpsie	i
 800f5cc:	b661      	cpsie	f
 800f5ce:	f3bf 8f4f 	dsb	sy
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	df00      	svc	0
 800f5d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f5da:	bf00      	nop
 800f5dc:	e000ed08 	.word	0xe000ed08

0800f5e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b086      	sub	sp, #24
 800f5e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f5e6:	4b46      	ldr	r3, [pc, #280]	; (800f700 <xPortStartScheduler+0x120>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4a46      	ldr	r2, [pc, #280]	; (800f704 <xPortStartScheduler+0x124>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d10a      	bne.n	800f606 <xPortStartScheduler+0x26>
	__asm volatile
 800f5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f4:	f383 8811 	msr	BASEPRI, r3
 800f5f8:	f3bf 8f6f 	isb	sy
 800f5fc:	f3bf 8f4f 	dsb	sy
 800f600:	613b      	str	r3, [r7, #16]
}
 800f602:	bf00      	nop
 800f604:	e7fe      	b.n	800f604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f606:	4b3e      	ldr	r3, [pc, #248]	; (800f700 <xPortStartScheduler+0x120>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a3f      	ldr	r2, [pc, #252]	; (800f708 <xPortStartScheduler+0x128>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d10a      	bne.n	800f626 <xPortStartScheduler+0x46>
	__asm volatile
 800f610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f614:	f383 8811 	msr	BASEPRI, r3
 800f618:	f3bf 8f6f 	isb	sy
 800f61c:	f3bf 8f4f 	dsb	sy
 800f620:	60fb      	str	r3, [r7, #12]
}
 800f622:	bf00      	nop
 800f624:	e7fe      	b.n	800f624 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f626:	4b39      	ldr	r3, [pc, #228]	; (800f70c <xPortStartScheduler+0x12c>)
 800f628:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	22ff      	movs	r2, #255	; 0xff
 800f636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f640:	78fb      	ldrb	r3, [r7, #3]
 800f642:	b2db      	uxtb	r3, r3
 800f644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f648:	b2da      	uxtb	r2, r3
 800f64a:	4b31      	ldr	r3, [pc, #196]	; (800f710 <xPortStartScheduler+0x130>)
 800f64c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f64e:	4b31      	ldr	r3, [pc, #196]	; (800f714 <xPortStartScheduler+0x134>)
 800f650:	2207      	movs	r2, #7
 800f652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f654:	e009      	b.n	800f66a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f656:	4b2f      	ldr	r3, [pc, #188]	; (800f714 <xPortStartScheduler+0x134>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	3b01      	subs	r3, #1
 800f65c:	4a2d      	ldr	r2, [pc, #180]	; (800f714 <xPortStartScheduler+0x134>)
 800f65e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f660:	78fb      	ldrb	r3, [r7, #3]
 800f662:	b2db      	uxtb	r3, r3
 800f664:	005b      	lsls	r3, r3, #1
 800f666:	b2db      	uxtb	r3, r3
 800f668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f66a:	78fb      	ldrb	r3, [r7, #3]
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f672:	2b80      	cmp	r3, #128	; 0x80
 800f674:	d0ef      	beq.n	800f656 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f676:	4b27      	ldr	r3, [pc, #156]	; (800f714 <xPortStartScheduler+0x134>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f1c3 0307 	rsb	r3, r3, #7
 800f67e:	2b04      	cmp	r3, #4
 800f680:	d00a      	beq.n	800f698 <xPortStartScheduler+0xb8>
	__asm volatile
 800f682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f686:	f383 8811 	msr	BASEPRI, r3
 800f68a:	f3bf 8f6f 	isb	sy
 800f68e:	f3bf 8f4f 	dsb	sy
 800f692:	60bb      	str	r3, [r7, #8]
}
 800f694:	bf00      	nop
 800f696:	e7fe      	b.n	800f696 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f698:	4b1e      	ldr	r3, [pc, #120]	; (800f714 <xPortStartScheduler+0x134>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	021b      	lsls	r3, r3, #8
 800f69e:	4a1d      	ldr	r2, [pc, #116]	; (800f714 <xPortStartScheduler+0x134>)
 800f6a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6a2:	4b1c      	ldr	r3, [pc, #112]	; (800f714 <xPortStartScheduler+0x134>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f6aa:	4a1a      	ldr	r2, [pc, #104]	; (800f714 <xPortStartScheduler+0x134>)
 800f6ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	b2da      	uxtb	r2, r3
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f6b6:	4b18      	ldr	r3, [pc, #96]	; (800f718 <xPortStartScheduler+0x138>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4a17      	ldr	r2, [pc, #92]	; (800f718 <xPortStartScheduler+0x138>)
 800f6bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f6c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f6c2:	4b15      	ldr	r3, [pc, #84]	; (800f718 <xPortStartScheduler+0x138>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4a14      	ldr	r2, [pc, #80]	; (800f718 <xPortStartScheduler+0x138>)
 800f6c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f6cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f6ce:	f000 f8dd 	bl	800f88c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f6d2:	4b12      	ldr	r3, [pc, #72]	; (800f71c <xPortStartScheduler+0x13c>)
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f6d8:	f000 f8fc 	bl	800f8d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f6dc:	4b10      	ldr	r3, [pc, #64]	; (800f720 <xPortStartScheduler+0x140>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a0f      	ldr	r2, [pc, #60]	; (800f720 <xPortStartScheduler+0x140>)
 800f6e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f6e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f6e8:	f7ff ff66 	bl	800f5b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f6ec:	f7fe ff58 	bl	800e5a0 <vTaskSwitchContext>
	prvTaskExitError();
 800f6f0:	f7ff ff22 	bl	800f538 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f6f4:	2300      	movs	r3, #0
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3718      	adds	r7, #24
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	e000ed00 	.word	0xe000ed00
 800f704:	410fc271 	.word	0x410fc271
 800f708:	410fc270 	.word	0x410fc270
 800f70c:	e000e400 	.word	0xe000e400
 800f710:	200015d8 	.word	0x200015d8
 800f714:	200015dc 	.word	0x200015dc
 800f718:	e000ed20 	.word	0xe000ed20
 800f71c:	20000120 	.word	0x20000120
 800f720:	e000ef34 	.word	0xe000ef34

0800f724 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
	__asm volatile
 800f72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72e:	f383 8811 	msr	BASEPRI, r3
 800f732:	f3bf 8f6f 	isb	sy
 800f736:	f3bf 8f4f 	dsb	sy
 800f73a:	607b      	str	r3, [r7, #4]
}
 800f73c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f73e:	4b0f      	ldr	r3, [pc, #60]	; (800f77c <vPortEnterCritical+0x58>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	3301      	adds	r3, #1
 800f744:	4a0d      	ldr	r2, [pc, #52]	; (800f77c <vPortEnterCritical+0x58>)
 800f746:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f748:	4b0c      	ldr	r3, [pc, #48]	; (800f77c <vPortEnterCritical+0x58>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d10f      	bne.n	800f770 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f750:	4b0b      	ldr	r3, [pc, #44]	; (800f780 <vPortEnterCritical+0x5c>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	b2db      	uxtb	r3, r3
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00a      	beq.n	800f770 <vPortEnterCritical+0x4c>
	__asm volatile
 800f75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	603b      	str	r3, [r7, #0]
}
 800f76c:	bf00      	nop
 800f76e:	e7fe      	b.n	800f76e <vPortEnterCritical+0x4a>
	}
}
 800f770:	bf00      	nop
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr
 800f77c:	20000120 	.word	0x20000120
 800f780:	e000ed04 	.word	0xe000ed04

0800f784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f78a:	4b12      	ldr	r3, [pc, #72]	; (800f7d4 <vPortExitCritical+0x50>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d10a      	bne.n	800f7a8 <vPortExitCritical+0x24>
	__asm volatile
 800f792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	607b      	str	r3, [r7, #4]
}
 800f7a4:	bf00      	nop
 800f7a6:	e7fe      	b.n	800f7a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f7a8:	4b0a      	ldr	r3, [pc, #40]	; (800f7d4 <vPortExitCritical+0x50>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	4a09      	ldr	r2, [pc, #36]	; (800f7d4 <vPortExitCritical+0x50>)
 800f7b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f7b2:	4b08      	ldr	r3, [pc, #32]	; (800f7d4 <vPortExitCritical+0x50>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d105      	bne.n	800f7c6 <vPortExitCritical+0x42>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	f383 8811 	msr	BASEPRI, r3
}
 800f7c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f7c6:	bf00      	nop
 800f7c8:	370c      	adds	r7, #12
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	20000120 	.word	0x20000120
	...

0800f7e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f7e0:	f3ef 8009 	mrs	r0, PSP
 800f7e4:	f3bf 8f6f 	isb	sy
 800f7e8:	4b15      	ldr	r3, [pc, #84]	; (800f840 <pxCurrentTCBConst>)
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	f01e 0f10 	tst.w	lr, #16
 800f7f0:	bf08      	it	eq
 800f7f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f7f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7fa:	6010      	str	r0, [r2, #0]
 800f7fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f800:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f804:	f380 8811 	msr	BASEPRI, r0
 800f808:	f3bf 8f4f 	dsb	sy
 800f80c:	f3bf 8f6f 	isb	sy
 800f810:	f7fe fec6 	bl	800e5a0 <vTaskSwitchContext>
 800f814:	f04f 0000 	mov.w	r0, #0
 800f818:	f380 8811 	msr	BASEPRI, r0
 800f81c:	bc09      	pop	{r0, r3}
 800f81e:	6819      	ldr	r1, [r3, #0]
 800f820:	6808      	ldr	r0, [r1, #0]
 800f822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f826:	f01e 0f10 	tst.w	lr, #16
 800f82a:	bf08      	it	eq
 800f82c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f830:	f380 8809 	msr	PSP, r0
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	f3af 8000 	nop.w

0800f840 <pxCurrentTCBConst>:
 800f840:	20000fac 	.word	0x20000fac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f844:	bf00      	nop
 800f846:	bf00      	nop

0800f848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
	__asm volatile
 800f84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f852:	f383 8811 	msr	BASEPRI, r3
 800f856:	f3bf 8f6f 	isb	sy
 800f85a:	f3bf 8f4f 	dsb	sy
 800f85e:	607b      	str	r3, [r7, #4]
}
 800f860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f862:	f7fe fde3 	bl	800e42c <xTaskIncrementTick>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d003      	beq.n	800f874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f86c:	4b06      	ldr	r3, [pc, #24]	; (800f888 <xPortSysTickHandler+0x40>)
 800f86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f872:	601a      	str	r2, [r3, #0]
 800f874:	2300      	movs	r3, #0
 800f876:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	f383 8811 	msr	BASEPRI, r3
}
 800f87e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f880:	bf00      	nop
 800f882:	3708      	adds	r7, #8
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}
 800f888:	e000ed04 	.word	0xe000ed04

0800f88c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f88c:	b480      	push	{r7}
 800f88e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f890:	4b0b      	ldr	r3, [pc, #44]	; (800f8c0 <vPortSetupTimerInterrupt+0x34>)
 800f892:	2200      	movs	r2, #0
 800f894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f896:	4b0b      	ldr	r3, [pc, #44]	; (800f8c4 <vPortSetupTimerInterrupt+0x38>)
 800f898:	2200      	movs	r2, #0
 800f89a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f89c:	4b0a      	ldr	r3, [pc, #40]	; (800f8c8 <vPortSetupTimerInterrupt+0x3c>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4a0a      	ldr	r2, [pc, #40]	; (800f8cc <vPortSetupTimerInterrupt+0x40>)
 800f8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8a6:	099b      	lsrs	r3, r3, #6
 800f8a8:	4a09      	ldr	r2, [pc, #36]	; (800f8d0 <vPortSetupTimerInterrupt+0x44>)
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f8ae:	4b04      	ldr	r3, [pc, #16]	; (800f8c0 <vPortSetupTimerInterrupt+0x34>)
 800f8b0:	2207      	movs	r2, #7
 800f8b2:	601a      	str	r2, [r3, #0]
}
 800f8b4:	bf00      	nop
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	e000e010 	.word	0xe000e010
 800f8c4:	e000e018 	.word	0xe000e018
 800f8c8:	2000000c 	.word	0x2000000c
 800f8cc:	10624dd3 	.word	0x10624dd3
 800f8d0:	e000e014 	.word	0xe000e014

0800f8d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f8d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f8e4 <vPortEnableVFP+0x10>
 800f8d8:	6801      	ldr	r1, [r0, #0]
 800f8da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f8de:	6001      	str	r1, [r0, #0]
 800f8e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f8e2:	bf00      	nop
 800f8e4:	e000ed88 	.word	0xe000ed88

0800f8e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f8ee:	f3ef 8305 	mrs	r3, IPSR
 800f8f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2b0f      	cmp	r3, #15
 800f8f8:	d914      	bls.n	800f924 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f8fa:	4a17      	ldr	r2, [pc, #92]	; (800f958 <vPortValidateInterruptPriority+0x70>)
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	4413      	add	r3, r2
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f904:	4b15      	ldr	r3, [pc, #84]	; (800f95c <vPortValidateInterruptPriority+0x74>)
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	7afa      	ldrb	r2, [r7, #11]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d20a      	bcs.n	800f924 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f912:	f383 8811 	msr	BASEPRI, r3
 800f916:	f3bf 8f6f 	isb	sy
 800f91a:	f3bf 8f4f 	dsb	sy
 800f91e:	607b      	str	r3, [r7, #4]
}
 800f920:	bf00      	nop
 800f922:	e7fe      	b.n	800f922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f924:	4b0e      	ldr	r3, [pc, #56]	; (800f960 <vPortValidateInterruptPriority+0x78>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f92c:	4b0d      	ldr	r3, [pc, #52]	; (800f964 <vPortValidateInterruptPriority+0x7c>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	429a      	cmp	r2, r3
 800f932:	d90a      	bls.n	800f94a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f938:	f383 8811 	msr	BASEPRI, r3
 800f93c:	f3bf 8f6f 	isb	sy
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	603b      	str	r3, [r7, #0]
}
 800f946:	bf00      	nop
 800f948:	e7fe      	b.n	800f948 <vPortValidateInterruptPriority+0x60>
	}
 800f94a:	bf00      	nop
 800f94c:	3714      	adds	r7, #20
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop
 800f958:	e000e3f0 	.word	0xe000e3f0
 800f95c:	200015d8 	.word	0x200015d8
 800f960:	e000ed0c 	.word	0xe000ed0c
 800f964:	200015dc 	.word	0x200015dc

0800f968 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b08a      	sub	sp, #40	; 0x28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f970:	2300      	movs	r3, #0
 800f972:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f974:	f7fe fc9e 	bl	800e2b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f978:	4b5b      	ldr	r3, [pc, #364]	; (800fae8 <pvPortMalloc+0x180>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d101      	bne.n	800f984 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f980:	f000 f920 	bl	800fbc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f984:	4b59      	ldr	r3, [pc, #356]	; (800faec <pvPortMalloc+0x184>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4013      	ands	r3, r2
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f040 8093 	bne.w	800fab8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d01d      	beq.n	800f9d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f998:	2208      	movs	r2, #8
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4413      	add	r3, r2
 800f99e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f003 0307 	and.w	r3, r3, #7
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d014      	beq.n	800f9d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f023 0307 	bic.w	r3, r3, #7
 800f9b0:	3308      	adds	r3, #8
 800f9b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f003 0307 	and.w	r3, r3, #7
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00a      	beq.n	800f9d4 <pvPortMalloc+0x6c>
	__asm volatile
 800f9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c2:	f383 8811 	msr	BASEPRI, r3
 800f9c6:	f3bf 8f6f 	isb	sy
 800f9ca:	f3bf 8f4f 	dsb	sy
 800f9ce:	617b      	str	r3, [r7, #20]
}
 800f9d0:	bf00      	nop
 800f9d2:	e7fe      	b.n	800f9d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d06e      	beq.n	800fab8 <pvPortMalloc+0x150>
 800f9da:	4b45      	ldr	r3, [pc, #276]	; (800faf0 <pvPortMalloc+0x188>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d869      	bhi.n	800fab8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f9e4:	4b43      	ldr	r3, [pc, #268]	; (800faf4 <pvPortMalloc+0x18c>)
 800f9e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f9e8:	4b42      	ldr	r3, [pc, #264]	; (800faf4 <pvPortMalloc+0x18c>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9ee:	e004      	b.n	800f9fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d903      	bls.n	800fa0c <pvPortMalloc+0xa4>
 800fa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d1f1      	bne.n	800f9f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa0c:	4b36      	ldr	r3, [pc, #216]	; (800fae8 <pvPortMalloc+0x180>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d050      	beq.n	800fab8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa16:	6a3b      	ldr	r3, [r7, #32]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2208      	movs	r2, #8
 800fa1c:	4413      	add	r3, r2
 800fa1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	6a3b      	ldr	r3, [r7, #32]
 800fa26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2a:	685a      	ldr	r2, [r3, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	1ad2      	subs	r2, r2, r3
 800fa30:	2308      	movs	r3, #8
 800fa32:	005b      	lsls	r3, r3, #1
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d91f      	bls.n	800fa78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fa38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa40:	69bb      	ldr	r3, [r7, #24]
 800fa42:	f003 0307 	and.w	r3, r3, #7
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00a      	beq.n	800fa60 <pvPortMalloc+0xf8>
	__asm volatile
 800fa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	613b      	str	r3, [r7, #16]
}
 800fa5c:	bf00      	nop
 800fa5e:	e7fe      	b.n	800fa5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa62:	685a      	ldr	r2, [r3, #4]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	1ad2      	subs	r2, r2, r3
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa72:	69b8      	ldr	r0, [r7, #24]
 800fa74:	f000 f908 	bl	800fc88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa78:	4b1d      	ldr	r3, [pc, #116]	; (800faf0 <pvPortMalloc+0x188>)
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	1ad3      	subs	r3, r2, r3
 800fa82:	4a1b      	ldr	r2, [pc, #108]	; (800faf0 <pvPortMalloc+0x188>)
 800fa84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa86:	4b1a      	ldr	r3, [pc, #104]	; (800faf0 <pvPortMalloc+0x188>)
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	4b1b      	ldr	r3, [pc, #108]	; (800faf8 <pvPortMalloc+0x190>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d203      	bcs.n	800fa9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa92:	4b17      	ldr	r3, [pc, #92]	; (800faf0 <pvPortMalloc+0x188>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4a18      	ldr	r2, [pc, #96]	; (800faf8 <pvPortMalloc+0x190>)
 800fa98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9c:	685a      	ldr	r2, [r3, #4]
 800fa9e:	4b13      	ldr	r3, [pc, #76]	; (800faec <pvPortMalloc+0x184>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	431a      	orrs	r2, r3
 800faa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800faa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faaa:	2200      	movs	r2, #0
 800faac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800faae:	4b13      	ldr	r3, [pc, #76]	; (800fafc <pvPortMalloc+0x194>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	3301      	adds	r3, #1
 800fab4:	4a11      	ldr	r2, [pc, #68]	; (800fafc <pvPortMalloc+0x194>)
 800fab6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fab8:	f7fe fc0a 	bl	800e2d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fabc:	69fb      	ldr	r3, [r7, #28]
 800fabe:	f003 0307 	and.w	r3, r3, #7
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00a      	beq.n	800fadc <pvPortMalloc+0x174>
	__asm volatile
 800fac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faca:	f383 8811 	msr	BASEPRI, r3
 800face:	f3bf 8f6f 	isb	sy
 800fad2:	f3bf 8f4f 	dsb	sy
 800fad6:	60fb      	str	r3, [r7, #12]
}
 800fad8:	bf00      	nop
 800fada:	e7fe      	b.n	800fada <pvPortMalloc+0x172>
	return pvReturn;
 800fadc:	69fb      	ldr	r3, [r7, #28]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3728      	adds	r7, #40	; 0x28
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	200051e8 	.word	0x200051e8
 800faec:	200051fc 	.word	0x200051fc
 800faf0:	200051ec 	.word	0x200051ec
 800faf4:	200051e0 	.word	0x200051e0
 800faf8:	200051f0 	.word	0x200051f0
 800fafc:	200051f4 	.word	0x200051f4

0800fb00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b086      	sub	sp, #24
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d04d      	beq.n	800fbae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fb12:	2308      	movs	r3, #8
 800fb14:	425b      	negs	r3, r3
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	4413      	add	r3, r2
 800fb1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	685a      	ldr	r2, [r3, #4]
 800fb24:	4b24      	ldr	r3, [pc, #144]	; (800fbb8 <vPortFree+0xb8>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4013      	ands	r3, r2
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d10a      	bne.n	800fb44 <vPortFree+0x44>
	__asm volatile
 800fb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb32:	f383 8811 	msr	BASEPRI, r3
 800fb36:	f3bf 8f6f 	isb	sy
 800fb3a:	f3bf 8f4f 	dsb	sy
 800fb3e:	60fb      	str	r3, [r7, #12]
}
 800fb40:	bf00      	nop
 800fb42:	e7fe      	b.n	800fb42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00a      	beq.n	800fb62 <vPortFree+0x62>
	__asm volatile
 800fb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb50:	f383 8811 	msr	BASEPRI, r3
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	60bb      	str	r3, [r7, #8]
}
 800fb5e:	bf00      	nop
 800fb60:	e7fe      	b.n	800fb60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	685a      	ldr	r2, [r3, #4]
 800fb66:	4b14      	ldr	r3, [pc, #80]	; (800fbb8 <vPortFree+0xb8>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4013      	ands	r3, r2
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d01e      	beq.n	800fbae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d11a      	bne.n	800fbae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	685a      	ldr	r2, [r3, #4]
 800fb7c:	4b0e      	ldr	r3, [pc, #56]	; (800fbb8 <vPortFree+0xb8>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	43db      	mvns	r3, r3
 800fb82:	401a      	ands	r2, r3
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fb88:	f7fe fb94 	bl	800e2b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	685a      	ldr	r2, [r3, #4]
 800fb90:	4b0a      	ldr	r3, [pc, #40]	; (800fbbc <vPortFree+0xbc>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4413      	add	r3, r2
 800fb96:	4a09      	ldr	r2, [pc, #36]	; (800fbbc <vPortFree+0xbc>)
 800fb98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb9a:	6938      	ldr	r0, [r7, #16]
 800fb9c:	f000 f874 	bl	800fc88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fba0:	4b07      	ldr	r3, [pc, #28]	; (800fbc0 <vPortFree+0xc0>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	3301      	adds	r3, #1
 800fba6:	4a06      	ldr	r2, [pc, #24]	; (800fbc0 <vPortFree+0xc0>)
 800fba8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fbaa:	f7fe fb91 	bl	800e2d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fbae:	bf00      	nop
 800fbb0:	3718      	adds	r7, #24
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	200051fc 	.word	0x200051fc
 800fbbc:	200051ec 	.word	0x200051ec
 800fbc0:	200051f8 	.word	0x200051f8

0800fbc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b085      	sub	sp, #20
 800fbc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fbca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fbce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fbd0:	4b27      	ldr	r3, [pc, #156]	; (800fc70 <prvHeapInit+0xac>)
 800fbd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f003 0307 	and.w	r3, r3, #7
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00c      	beq.n	800fbf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	3307      	adds	r3, #7
 800fbe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f023 0307 	bic.w	r3, r3, #7
 800fbea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	1ad3      	subs	r3, r2, r3
 800fbf2:	4a1f      	ldr	r2, [pc, #124]	; (800fc70 <prvHeapInit+0xac>)
 800fbf4:	4413      	add	r3, r2
 800fbf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fbfc:	4a1d      	ldr	r2, [pc, #116]	; (800fc74 <prvHeapInit+0xb0>)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc02:	4b1c      	ldr	r3, [pc, #112]	; (800fc74 <prvHeapInit+0xb0>)
 800fc04:	2200      	movs	r2, #0
 800fc06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fc10:	2208      	movs	r2, #8
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	1a9b      	subs	r3, r3, r2
 800fc16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f023 0307 	bic.w	r3, r3, #7
 800fc1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	4a15      	ldr	r2, [pc, #84]	; (800fc78 <prvHeapInit+0xb4>)
 800fc24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fc26:	4b14      	ldr	r3, [pc, #80]	; (800fc78 <prvHeapInit+0xb4>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fc2e:	4b12      	ldr	r3, [pc, #72]	; (800fc78 <prvHeapInit+0xb4>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2200      	movs	r2, #0
 800fc34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	68fa      	ldr	r2, [r7, #12]
 800fc3e:	1ad2      	subs	r2, r2, r3
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fc44:	4b0c      	ldr	r3, [pc, #48]	; (800fc78 <prvHeapInit+0xb4>)
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	4a0a      	ldr	r2, [pc, #40]	; (800fc7c <prvHeapInit+0xb8>)
 800fc52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	4a09      	ldr	r2, [pc, #36]	; (800fc80 <prvHeapInit+0xbc>)
 800fc5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fc5c:	4b09      	ldr	r3, [pc, #36]	; (800fc84 <prvHeapInit+0xc0>)
 800fc5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fc62:	601a      	str	r2, [r3, #0]
}
 800fc64:	bf00      	nop
 800fc66:	3714      	adds	r7, #20
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	200015e0 	.word	0x200015e0
 800fc74:	200051e0 	.word	0x200051e0
 800fc78:	200051e8 	.word	0x200051e8
 800fc7c:	200051f0 	.word	0x200051f0
 800fc80:	200051ec 	.word	0x200051ec
 800fc84:	200051fc 	.word	0x200051fc

0800fc88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc90:	4b28      	ldr	r3, [pc, #160]	; (800fd34 <prvInsertBlockIntoFreeList+0xac>)
 800fc92:	60fb      	str	r3, [r7, #12]
 800fc94:	e002      	b.n	800fc9c <prvInsertBlockIntoFreeList+0x14>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	60fb      	str	r3, [r7, #12]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d8f7      	bhi.n	800fc96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d108      	bne.n	800fcca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	685a      	ldr	r2, [r3, #4]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	441a      	add	r2, r3
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	68ba      	ldr	r2, [r7, #8]
 800fcd4:	441a      	add	r2, r3
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d118      	bne.n	800fd10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	4b15      	ldr	r3, [pc, #84]	; (800fd38 <prvInsertBlockIntoFreeList+0xb0>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d00d      	beq.n	800fd06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	685a      	ldr	r2, [r3, #4]
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	441a      	add	r2, r3
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	601a      	str	r2, [r3, #0]
 800fd04:	e008      	b.n	800fd18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd06:	4b0c      	ldr	r3, [pc, #48]	; (800fd38 <prvInsertBlockIntoFreeList+0xb0>)
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	601a      	str	r2, [r3, #0]
 800fd0e:	e003      	b.n	800fd18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d002      	beq.n	800fd26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd26:	bf00      	nop
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	200051e0 	.word	0x200051e0
 800fd38:	200051e8 	.word	0x200051e8

0800fd3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800fd40:	2201      	movs	r2, #1
 800fd42:	4912      	ldr	r1, [pc, #72]	; (800fd8c <MX_USB_DEVICE_Init+0x50>)
 800fd44:	4812      	ldr	r0, [pc, #72]	; (800fd90 <MX_USB_DEVICE_Init+0x54>)
 800fd46:	f7fb fa37 	bl	800b1b8 <USBD_Init>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d001      	beq.n	800fd54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fd50:	f7f1 fd08 	bl	8001764 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800fd54:	490f      	ldr	r1, [pc, #60]	; (800fd94 <MX_USB_DEVICE_Init+0x58>)
 800fd56:	480e      	ldr	r0, [pc, #56]	; (800fd90 <MX_USB_DEVICE_Init+0x54>)
 800fd58:	f7fb fa5e 	bl	800b218 <USBD_RegisterClass>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d001      	beq.n	800fd66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fd62:	f7f1 fcff 	bl	8001764 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800fd66:	490c      	ldr	r1, [pc, #48]	; (800fd98 <MX_USB_DEVICE_Init+0x5c>)
 800fd68:	4809      	ldr	r0, [pc, #36]	; (800fd90 <MX_USB_DEVICE_Init+0x54>)
 800fd6a:	f7fb f94f 	bl	800b00c <USBD_CDC_RegisterInterface>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d001      	beq.n	800fd78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fd74:	f7f1 fcf6 	bl	8001764 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800fd78:	4805      	ldr	r0, [pc, #20]	; (800fd90 <MX_USB_DEVICE_Init+0x54>)
 800fd7a:	f7fb fa83 	bl	800b284 <USBD_Start>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d001      	beq.n	800fd88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fd84:	f7f1 fcee 	bl	8001764 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fd88:	bf00      	nop
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	20000138 	.word	0x20000138
 800fd90:	20005200 	.word	0x20005200
 800fd94:	200000a0 	.word	0x200000a0
 800fd98:	20000124 	.word	0x20000124

0800fd9c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800fda0:	2200      	movs	r2, #0
 800fda2:	4905      	ldr	r1, [pc, #20]	; (800fdb8 <CDC_Init_HS+0x1c>)
 800fda4:	4805      	ldr	r0, [pc, #20]	; (800fdbc <CDC_Init_HS+0x20>)
 800fda6:	f7fb f94b 	bl	800b040 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800fdaa:	4905      	ldr	r1, [pc, #20]	; (800fdc0 <CDC_Init_HS+0x24>)
 800fdac:	4803      	ldr	r0, [pc, #12]	; (800fdbc <CDC_Init_HS+0x20>)
 800fdae:	f7fb f969 	bl	800b084 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fdb2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	20005cdc 	.word	0x20005cdc
 800fdbc:	20005200 	.word	0x20005200
 800fdc0:	200054dc 	.word	0x200054dc

0800fdc4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800fdc8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr

0800fdd4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b083      	sub	sp, #12
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	4603      	mov	r3, r0
 800fddc:	6039      	str	r1, [r7, #0]
 800fdde:	71fb      	strb	r3, [r7, #7]
 800fde0:	4613      	mov	r3, r2
 800fde2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800fde4:	79fb      	ldrb	r3, [r7, #7]
 800fde6:	2b23      	cmp	r3, #35	; 0x23
 800fde8:	d84a      	bhi.n	800fe80 <CDC_Control_HS+0xac>
 800fdea:	a201      	add	r2, pc, #4	; (adr r2, 800fdf0 <CDC_Control_HS+0x1c>)
 800fdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf0:	0800fe81 	.word	0x0800fe81
 800fdf4:	0800fe81 	.word	0x0800fe81
 800fdf8:	0800fe81 	.word	0x0800fe81
 800fdfc:	0800fe81 	.word	0x0800fe81
 800fe00:	0800fe81 	.word	0x0800fe81
 800fe04:	0800fe81 	.word	0x0800fe81
 800fe08:	0800fe81 	.word	0x0800fe81
 800fe0c:	0800fe81 	.word	0x0800fe81
 800fe10:	0800fe81 	.word	0x0800fe81
 800fe14:	0800fe81 	.word	0x0800fe81
 800fe18:	0800fe81 	.word	0x0800fe81
 800fe1c:	0800fe81 	.word	0x0800fe81
 800fe20:	0800fe81 	.word	0x0800fe81
 800fe24:	0800fe81 	.word	0x0800fe81
 800fe28:	0800fe81 	.word	0x0800fe81
 800fe2c:	0800fe81 	.word	0x0800fe81
 800fe30:	0800fe81 	.word	0x0800fe81
 800fe34:	0800fe81 	.word	0x0800fe81
 800fe38:	0800fe81 	.word	0x0800fe81
 800fe3c:	0800fe81 	.word	0x0800fe81
 800fe40:	0800fe81 	.word	0x0800fe81
 800fe44:	0800fe81 	.word	0x0800fe81
 800fe48:	0800fe81 	.word	0x0800fe81
 800fe4c:	0800fe81 	.word	0x0800fe81
 800fe50:	0800fe81 	.word	0x0800fe81
 800fe54:	0800fe81 	.word	0x0800fe81
 800fe58:	0800fe81 	.word	0x0800fe81
 800fe5c:	0800fe81 	.word	0x0800fe81
 800fe60:	0800fe81 	.word	0x0800fe81
 800fe64:	0800fe81 	.word	0x0800fe81
 800fe68:	0800fe81 	.word	0x0800fe81
 800fe6c:	0800fe81 	.word	0x0800fe81
 800fe70:	0800fe81 	.word	0x0800fe81
 800fe74:	0800fe81 	.word	0x0800fe81
 800fe78:	0800fe81 	.word	0x0800fe81
 800fe7c:	0800fe81 	.word	0x0800fe81
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fe80:	bf00      	nop
  }

  return (USBD_OK);
 800fe82:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800fe9a:	6879      	ldr	r1, [r7, #4]
 800fe9c:	4805      	ldr	r0, [pc, #20]	; (800feb4 <CDC_Receive_HS+0x24>)
 800fe9e:	f7fb f8f1 	bl	800b084 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800fea2:	4804      	ldr	r0, [pc, #16]	; (800feb4 <CDC_Receive_HS+0x24>)
 800fea4:	f7fb f952 	bl	800b14c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fea8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	20005200 	.word	0x20005200

0800feb8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b084      	sub	sp, #16
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	460b      	mov	r3, r1
 800fec2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fec4:	2300      	movs	r3, #0
 800fec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800fec8:	4b0d      	ldr	r3, [pc, #52]	; (800ff00 <CDC_Transmit_HS+0x48>)
 800feca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fece:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d001      	beq.n	800fede <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800feda:	2301      	movs	r3, #1
 800fedc:	e00b      	b.n	800fef6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800fede:	887b      	ldrh	r3, [r7, #2]
 800fee0:	461a      	mov	r2, r3
 800fee2:	6879      	ldr	r1, [r7, #4]
 800fee4:	4806      	ldr	r0, [pc, #24]	; (800ff00 <CDC_Transmit_HS+0x48>)
 800fee6:	f7fb f8ab 	bl	800b040 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800feea:	4805      	ldr	r0, [pc, #20]	; (800ff00 <CDC_Transmit_HS+0x48>)
 800feec:	f7fb f8e8 	bl	800b0c0 <USBD_CDC_TransmitPacket>
 800fef0:	4603      	mov	r3, r0
 800fef2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800fef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3710      	adds	r7, #16
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	20005200 	.word	0x20005200

0800ff04 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b087      	sub	sp, #28
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	4613      	mov	r3, r2
 800ff10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff12:	2300      	movs	r3, #0
 800ff14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800ff16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	371c      	adds	r7, #28
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr
	...

0800ff28 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	4603      	mov	r3, r0
 800ff30:	6039      	str	r1, [r7, #0]
 800ff32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	2212      	movs	r2, #18
 800ff38:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ff3a:	4b03      	ldr	r3, [pc, #12]	; (800ff48 <USBD_HS_DeviceDescriptor+0x20>)
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	370c      	adds	r7, #12
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr
 800ff48:	20000154 	.word	0x20000154

0800ff4c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	4603      	mov	r3, r0
 800ff54:	6039      	str	r1, [r7, #0]
 800ff56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	2204      	movs	r2, #4
 800ff5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff5e:	4b03      	ldr	r3, [pc, #12]	; (800ff6c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr
 800ff6c:	20000168 	.word	0x20000168

0800ff70 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	4603      	mov	r3, r0
 800ff78:	6039      	str	r1, [r7, #0]
 800ff7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff7c:	79fb      	ldrb	r3, [r7, #7]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d105      	bne.n	800ff8e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ff82:	683a      	ldr	r2, [r7, #0]
 800ff84:	4907      	ldr	r1, [pc, #28]	; (800ffa4 <USBD_HS_ProductStrDescriptor+0x34>)
 800ff86:	4808      	ldr	r0, [pc, #32]	; (800ffa8 <USBD_HS_ProductStrDescriptor+0x38>)
 800ff88:	f7fc fb28 	bl	800c5dc <USBD_GetString>
 800ff8c:	e004      	b.n	800ff98 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ff8e:	683a      	ldr	r2, [r7, #0]
 800ff90:	4904      	ldr	r1, [pc, #16]	; (800ffa4 <USBD_HS_ProductStrDescriptor+0x34>)
 800ff92:	4805      	ldr	r0, [pc, #20]	; (800ffa8 <USBD_HS_ProductStrDescriptor+0x38>)
 800ff94:	f7fc fb22 	bl	800c5dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff98:	4b02      	ldr	r3, [pc, #8]	; (800ffa4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3708      	adds	r7, #8
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	200064dc 	.word	0x200064dc
 800ffa8:	0801353c 	.word	0x0801353c

0800ffac <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	6039      	str	r1, [r7, #0]
 800ffb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ffb8:	683a      	ldr	r2, [r7, #0]
 800ffba:	4904      	ldr	r1, [pc, #16]	; (800ffcc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ffbc:	4804      	ldr	r0, [pc, #16]	; (800ffd0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ffbe:	f7fc fb0d 	bl	800c5dc <USBD_GetString>
  return USBD_StrDesc;
 800ffc2:	4b02      	ldr	r3, [pc, #8]	; (800ffcc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3708      	adds	r7, #8
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	200064dc 	.word	0x200064dc
 800ffd0:	08013554 	.word	0x08013554

0800ffd4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	4603      	mov	r3, r0
 800ffdc:	6039      	str	r1, [r7, #0]
 800ffde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	221a      	movs	r2, #26
 800ffe4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ffe6:	f000 f843 	bl	8010070 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ffea:	4b02      	ldr	r3, [pc, #8]	; (800fff4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	2000016c 	.word	0x2000016c

0800fff8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	4603      	mov	r3, r0
 8010000:	6039      	str	r1, [r7, #0]
 8010002:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010004:	79fb      	ldrb	r3, [r7, #7]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d105      	bne.n	8010016 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801000a:	683a      	ldr	r2, [r7, #0]
 801000c:	4907      	ldr	r1, [pc, #28]	; (801002c <USBD_HS_ConfigStrDescriptor+0x34>)
 801000e:	4808      	ldr	r0, [pc, #32]	; (8010030 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010010:	f7fc fae4 	bl	800c5dc <USBD_GetString>
 8010014:	e004      	b.n	8010020 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010016:	683a      	ldr	r2, [r7, #0]
 8010018:	4904      	ldr	r1, [pc, #16]	; (801002c <USBD_HS_ConfigStrDescriptor+0x34>)
 801001a:	4805      	ldr	r0, [pc, #20]	; (8010030 <USBD_HS_ConfigStrDescriptor+0x38>)
 801001c:	f7fc fade 	bl	800c5dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8010020:	4b02      	ldr	r3, [pc, #8]	; (801002c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8010022:	4618      	mov	r0, r3
 8010024:	3708      	adds	r7, #8
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	200064dc 	.word	0x200064dc
 8010030:	08013568 	.word	0x08013568

08010034 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	6039      	str	r1, [r7, #0]
 801003e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010040:	79fb      	ldrb	r3, [r7, #7]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d105      	bne.n	8010052 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010046:	683a      	ldr	r2, [r7, #0]
 8010048:	4907      	ldr	r1, [pc, #28]	; (8010068 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801004a:	4808      	ldr	r0, [pc, #32]	; (801006c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801004c:	f7fc fac6 	bl	800c5dc <USBD_GetString>
 8010050:	e004      	b.n	801005c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010052:	683a      	ldr	r2, [r7, #0]
 8010054:	4904      	ldr	r1, [pc, #16]	; (8010068 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010056:	4805      	ldr	r0, [pc, #20]	; (801006c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010058:	f7fc fac0 	bl	800c5dc <USBD_GetString>
  }
  return USBD_StrDesc;
 801005c:	4b02      	ldr	r3, [pc, #8]	; (8010068 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801005e:	4618      	mov	r0, r3
 8010060:	3708      	adds	r7, #8
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	200064dc 	.word	0x200064dc
 801006c:	08013574 	.word	0x08013574

08010070 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010076:	4b0f      	ldr	r3, [pc, #60]	; (80100b4 <Get_SerialNum+0x44>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801007c:	4b0e      	ldr	r3, [pc, #56]	; (80100b8 <Get_SerialNum+0x48>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010082:	4b0e      	ldr	r3, [pc, #56]	; (80100bc <Get_SerialNum+0x4c>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010088:	68fa      	ldr	r2, [r7, #12]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4413      	add	r3, r2
 801008e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d009      	beq.n	80100aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010096:	2208      	movs	r2, #8
 8010098:	4909      	ldr	r1, [pc, #36]	; (80100c0 <Get_SerialNum+0x50>)
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f000 f814 	bl	80100c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80100a0:	2204      	movs	r2, #4
 80100a2:	4908      	ldr	r1, [pc, #32]	; (80100c4 <Get_SerialNum+0x54>)
 80100a4:	68b8      	ldr	r0, [r7, #8]
 80100a6:	f000 f80f 	bl	80100c8 <IntToUnicode>
  }
}
 80100aa:	bf00      	nop
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	1fff7a10 	.word	0x1fff7a10
 80100b8:	1fff7a14 	.word	0x1fff7a14
 80100bc:	1fff7a18 	.word	0x1fff7a18
 80100c0:	2000016e 	.word	0x2000016e
 80100c4:	2000017e 	.word	0x2000017e

080100c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80100c8:	b480      	push	{r7}
 80100ca:	b087      	sub	sp, #28
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	60f8      	str	r0, [r7, #12]
 80100d0:	60b9      	str	r1, [r7, #8]
 80100d2:	4613      	mov	r3, r2
 80100d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80100d6:	2300      	movs	r3, #0
 80100d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80100da:	2300      	movs	r3, #0
 80100dc:	75fb      	strb	r3, [r7, #23]
 80100de:	e027      	b.n	8010130 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	0f1b      	lsrs	r3, r3, #28
 80100e4:	2b09      	cmp	r3, #9
 80100e6:	d80b      	bhi.n	8010100 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	0f1b      	lsrs	r3, r3, #28
 80100ec:	b2da      	uxtb	r2, r3
 80100ee:	7dfb      	ldrb	r3, [r7, #23]
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	4619      	mov	r1, r3
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	440b      	add	r3, r1
 80100f8:	3230      	adds	r2, #48	; 0x30
 80100fa:	b2d2      	uxtb	r2, r2
 80100fc:	701a      	strb	r2, [r3, #0]
 80100fe:	e00a      	b.n	8010116 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	0f1b      	lsrs	r3, r3, #28
 8010104:	b2da      	uxtb	r2, r3
 8010106:	7dfb      	ldrb	r3, [r7, #23]
 8010108:	005b      	lsls	r3, r3, #1
 801010a:	4619      	mov	r1, r3
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	440b      	add	r3, r1
 8010110:	3237      	adds	r2, #55	; 0x37
 8010112:	b2d2      	uxtb	r2, r2
 8010114:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	011b      	lsls	r3, r3, #4
 801011a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801011c:	7dfb      	ldrb	r3, [r7, #23]
 801011e:	005b      	lsls	r3, r3, #1
 8010120:	3301      	adds	r3, #1
 8010122:	68ba      	ldr	r2, [r7, #8]
 8010124:	4413      	add	r3, r2
 8010126:	2200      	movs	r2, #0
 8010128:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801012a:	7dfb      	ldrb	r3, [r7, #23]
 801012c:	3301      	adds	r3, #1
 801012e:	75fb      	strb	r3, [r7, #23]
 8010130:	7dfa      	ldrb	r2, [r7, #23]
 8010132:	79fb      	ldrb	r3, [r7, #7]
 8010134:	429a      	cmp	r2, r3
 8010136:	d3d3      	bcc.n	80100e0 <IntToUnicode+0x18>
  }
}
 8010138:	bf00      	nop
 801013a:	bf00      	nop
 801013c:	371c      	adds	r7, #28
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr
	...

08010148 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b08a      	sub	sp, #40	; 0x28
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010150:	f107 0314 	add.w	r3, r7, #20
 8010154:	2200      	movs	r2, #0
 8010156:	601a      	str	r2, [r3, #0]
 8010158:	605a      	str	r2, [r3, #4]
 801015a:	609a      	str	r2, [r3, #8]
 801015c:	60da      	str	r2, [r3, #12]
 801015e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a1d      	ldr	r2, [pc, #116]	; (80101dc <HAL_PCD_MspInit+0x94>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d134      	bne.n	80101d4 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801016a:	2300      	movs	r3, #0
 801016c:	613b      	str	r3, [r7, #16]
 801016e:	4b1c      	ldr	r3, [pc, #112]	; (80101e0 <HAL_PCD_MspInit+0x98>)
 8010170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010172:	4a1b      	ldr	r2, [pc, #108]	; (80101e0 <HAL_PCD_MspInit+0x98>)
 8010174:	f043 0302 	orr.w	r3, r3, #2
 8010178:	6313      	str	r3, [r2, #48]	; 0x30
 801017a:	4b19      	ldr	r3, [pc, #100]	; (80101e0 <HAL_PCD_MspInit+0x98>)
 801017c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801017e:	f003 0302 	and.w	r3, r3, #2
 8010182:	613b      	str	r3, [r7, #16]
 8010184:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8010186:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801018a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801018c:	2302      	movs	r3, #2
 801018e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010190:	2300      	movs	r3, #0
 8010192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010194:	2303      	movs	r3, #3
 8010196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8010198:	230c      	movs	r3, #12
 801019a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801019c:	f107 0314 	add.w	r3, r7, #20
 80101a0:	4619      	mov	r1, r3
 80101a2:	4810      	ldr	r0, [pc, #64]	; (80101e4 <HAL_PCD_MspInit+0x9c>)
 80101a4:	f7f4 fa70 	bl	8004688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80101a8:	2300      	movs	r3, #0
 80101aa:	60fb      	str	r3, [r7, #12]
 80101ac:	4b0c      	ldr	r3, [pc, #48]	; (80101e0 <HAL_PCD_MspInit+0x98>)
 80101ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101b0:	4a0b      	ldr	r2, [pc, #44]	; (80101e0 <HAL_PCD_MspInit+0x98>)
 80101b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80101b6:	6313      	str	r3, [r2, #48]	; 0x30
 80101b8:	4b09      	ldr	r3, [pc, #36]	; (80101e0 <HAL_PCD_MspInit+0x98>)
 80101ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80101c0:	60fb      	str	r3, [r7, #12]
 80101c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80101c4:	2200      	movs	r2, #0
 80101c6:	2105      	movs	r1, #5
 80101c8:	204d      	movs	r0, #77	; 0x4d
 80101ca:	f7f3 fddf 	bl	8003d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80101ce:	204d      	movs	r0, #77	; 0x4d
 80101d0:	f7f3 fdf8 	bl	8003dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80101d4:	bf00      	nop
 80101d6:	3728      	adds	r7, #40	; 0x28
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	40040000 	.word	0x40040000
 80101e0:	40023800 	.word	0x40023800
 80101e4:	40020400 	.word	0x40020400

080101e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80101fc:	4619      	mov	r1, r3
 80101fe:	4610      	mov	r0, r2
 8010200:	f7fb f88d 	bl	800b31e <USBD_LL_SetupStage>
}
 8010204:	bf00      	nop
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b082      	sub	sp, #8
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	460b      	mov	r3, r1
 8010216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801021e:	78fa      	ldrb	r2, [r7, #3]
 8010220:	6879      	ldr	r1, [r7, #4]
 8010222:	4613      	mov	r3, r2
 8010224:	00db      	lsls	r3, r3, #3
 8010226:	4413      	add	r3, r2
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	440b      	add	r3, r1
 801022c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	78fb      	ldrb	r3, [r7, #3]
 8010234:	4619      	mov	r1, r3
 8010236:	f7fb f8c7 	bl	800b3c8 <USBD_LL_DataOutStage>
}
 801023a:	bf00      	nop
 801023c:	3708      	adds	r7, #8
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b082      	sub	sp, #8
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
 801024a:	460b      	mov	r3, r1
 801024c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010254:	78fa      	ldrb	r2, [r7, #3]
 8010256:	6879      	ldr	r1, [r7, #4]
 8010258:	4613      	mov	r3, r2
 801025a:	00db      	lsls	r3, r3, #3
 801025c:	4413      	add	r3, r2
 801025e:	009b      	lsls	r3, r3, #2
 8010260:	440b      	add	r3, r1
 8010262:	334c      	adds	r3, #76	; 0x4c
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	78fb      	ldrb	r3, [r7, #3]
 8010268:	4619      	mov	r1, r3
 801026a:	f7fb f960 	bl	800b52e <USBD_LL_DataInStage>
}
 801026e:	bf00      	nop
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}

08010276 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010276:	b580      	push	{r7, lr}
 8010278:	b082      	sub	sp, #8
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010284:	4618      	mov	r0, r3
 8010286:	f7fb fa94 	bl	800b7b2 <USBD_LL_SOF>
}
 801028a:	bf00      	nop
 801028c:	3708      	adds	r7, #8
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}

08010292 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010292:	b580      	push	{r7, lr}
 8010294:	b084      	sub	sp, #16
 8010296:	af00      	add	r7, sp, #0
 8010298:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801029a:	2301      	movs	r3, #1
 801029c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	68db      	ldr	r3, [r3, #12]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d102      	bne.n	80102ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80102a6:	2300      	movs	r3, #0
 80102a8:	73fb      	strb	r3, [r7, #15]
 80102aa:	e008      	b.n	80102be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	2b02      	cmp	r3, #2
 80102b2:	d102      	bne.n	80102ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80102b4:	2301      	movs	r3, #1
 80102b6:	73fb      	strb	r3, [r7, #15]
 80102b8:	e001      	b.n	80102be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80102ba:	f7f1 fa53 	bl	8001764 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80102c4:	7bfa      	ldrb	r2, [r7, #15]
 80102c6:	4611      	mov	r1, r2
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fb fa34 	bl	800b736 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fb f9dc 	bl	800b692 <USBD_LL_Reset>
}
 80102da:	bf00      	nop
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
	...

080102e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80102f2:	4618      	mov	r0, r3
 80102f4:	f7fb fa2f 	bl	800b756 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	6812      	ldr	r2, [r2, #0]
 8010306:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801030a:	f043 0301 	orr.w	r3, r3, #1
 801030e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6a1b      	ldr	r3, [r3, #32]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d005      	beq.n	8010324 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010318:	4b04      	ldr	r3, [pc, #16]	; (801032c <HAL_PCD_SuspendCallback+0x48>)
 801031a:	691b      	ldr	r3, [r3, #16]
 801031c:	4a03      	ldr	r2, [pc, #12]	; (801032c <HAL_PCD_SuspendCallback+0x48>)
 801031e:	f043 0306 	orr.w	r3, r3, #6
 8010322:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010324:	bf00      	nop
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	e000ed00 	.word	0xe000ed00

08010330 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801033e:	4618      	mov	r0, r3
 8010340:	f7fb fa1f 	bl	800b782 <USBD_LL_Resume>
}
 8010344:	bf00      	nop
 8010346:	3708      	adds	r7, #8
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	460b      	mov	r3, r1
 8010356:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801035e:	78fa      	ldrb	r2, [r7, #3]
 8010360:	4611      	mov	r1, r2
 8010362:	4618      	mov	r0, r3
 8010364:	f7fb fa77 	bl	800b856 <USBD_LL_IsoOUTIncomplete>
}
 8010368:	bf00      	nop
 801036a:	3708      	adds	r7, #8
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}

08010370 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	460b      	mov	r3, r1
 801037a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010382:	78fa      	ldrb	r2, [r7, #3]
 8010384:	4611      	mov	r1, r2
 8010386:	4618      	mov	r0, r3
 8010388:	f7fb fa33 	bl	800b7f2 <USBD_LL_IsoINIncomplete>
}
 801038c:	bf00      	nop
 801038e:	3708      	adds	r7, #8
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fb fa89 	bl	800b8ba <USBD_LL_DevConnected>
}
 80103a8:	bf00      	nop
 80103aa:	3708      	adds	r7, #8
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}

080103b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b082      	sub	sp, #8
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fb fa86 	bl	800b8d0 <USBD_LL_DevDisconnected>
}
 80103c4:	bf00      	nop
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d140      	bne.n	801045e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80103dc:	4a22      	ldr	r2, [pc, #136]	; (8010468 <USBD_LL_Init+0x9c>)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4a20      	ldr	r2, [pc, #128]	; (8010468 <USBD_LL_Init+0x9c>)
 80103e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80103ec:	4b1e      	ldr	r3, [pc, #120]	; (8010468 <USBD_LL_Init+0x9c>)
 80103ee:	4a1f      	ldr	r2, [pc, #124]	; (801046c <USBD_LL_Init+0xa0>)
 80103f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 80103f2:	4b1d      	ldr	r3, [pc, #116]	; (8010468 <USBD_LL_Init+0x9c>)
 80103f4:	2206      	movs	r2, #6
 80103f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80103f8:	4b1b      	ldr	r3, [pc, #108]	; (8010468 <USBD_LL_Init+0x9c>)
 80103fa:	2202      	movs	r2, #2
 80103fc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80103fe:	4b1a      	ldr	r3, [pc, #104]	; (8010468 <USBD_LL_Init+0x9c>)
 8010400:	2200      	movs	r2, #0
 8010402:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010404:	4b18      	ldr	r3, [pc, #96]	; (8010468 <USBD_LL_Init+0x9c>)
 8010406:	2202      	movs	r2, #2
 8010408:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801040a:	4b17      	ldr	r3, [pc, #92]	; (8010468 <USBD_LL_Init+0x9c>)
 801040c:	2200      	movs	r2, #0
 801040e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010410:	4b15      	ldr	r3, [pc, #84]	; (8010468 <USBD_LL_Init+0x9c>)
 8010412:	2200      	movs	r2, #0
 8010414:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8010416:	4b14      	ldr	r3, [pc, #80]	; (8010468 <USBD_LL_Init+0x9c>)
 8010418:	2200      	movs	r2, #0
 801041a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801041c:	4b12      	ldr	r3, [pc, #72]	; (8010468 <USBD_LL_Init+0x9c>)
 801041e:	2200      	movs	r2, #0
 8010420:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8010422:	4b11      	ldr	r3, [pc, #68]	; (8010468 <USBD_LL_Init+0x9c>)
 8010424:	2200      	movs	r2, #0
 8010426:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8010428:	4b0f      	ldr	r3, [pc, #60]	; (8010468 <USBD_LL_Init+0x9c>)
 801042a:	2200      	movs	r2, #0
 801042c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801042e:	480e      	ldr	r0, [pc, #56]	; (8010468 <USBD_LL_Init+0x9c>)
 8010430:	f7f5 f895 	bl	800555e <HAL_PCD_Init>
 8010434:	4603      	mov	r3, r0
 8010436:	2b00      	cmp	r3, #0
 8010438:	d001      	beq.n	801043e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801043a:	f7f1 f993 	bl	8001764 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801043e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010442:	4809      	ldr	r0, [pc, #36]	; (8010468 <USBD_LL_Init+0x9c>)
 8010444:	f7f6 faeb 	bl	8006a1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8010448:	2280      	movs	r2, #128	; 0x80
 801044a:	2100      	movs	r1, #0
 801044c:	4806      	ldr	r0, [pc, #24]	; (8010468 <USBD_LL_Init+0x9c>)
 801044e:	f7f6 fa9f 	bl	8006990 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8010452:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8010456:	2101      	movs	r1, #1
 8010458:	4803      	ldr	r0, [pc, #12]	; (8010468 <USBD_LL_Init+0x9c>)
 801045a:	f7f6 fa99 	bl	8006990 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801045e:	2300      	movs	r3, #0
}
 8010460:	4618      	mov	r0, r3
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	200066dc 	.word	0x200066dc
 801046c:	40040000 	.word	0x40040000

08010470 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010478:	2300      	movs	r3, #0
 801047a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801047c:	2300      	movs	r3, #0
 801047e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010486:	4618      	mov	r0, r3
 8010488:	f7f5 f986 	bl	8005798 <HAL_PCD_Start>
 801048c:	4603      	mov	r3, r0
 801048e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010490:	7bfb      	ldrb	r3, [r7, #15]
 8010492:	4618      	mov	r0, r3
 8010494:	f000 f942 	bl	801071c <USBD_Get_USB_Status>
 8010498:	4603      	mov	r3, r0
 801049a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801049c:	7bbb      	ldrb	r3, [r7, #14]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b084      	sub	sp, #16
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
 80104ae:	4608      	mov	r0, r1
 80104b0:	4611      	mov	r1, r2
 80104b2:	461a      	mov	r2, r3
 80104b4:	4603      	mov	r3, r0
 80104b6:	70fb      	strb	r3, [r7, #3]
 80104b8:	460b      	mov	r3, r1
 80104ba:	70bb      	strb	r3, [r7, #2]
 80104bc:	4613      	mov	r3, r2
 80104be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104c0:	2300      	movs	r3, #0
 80104c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104c4:	2300      	movs	r3, #0
 80104c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80104ce:	78bb      	ldrb	r3, [r7, #2]
 80104d0:	883a      	ldrh	r2, [r7, #0]
 80104d2:	78f9      	ldrb	r1, [r7, #3]
 80104d4:	f7f5 fe57 	bl	8006186 <HAL_PCD_EP_Open>
 80104d8:	4603      	mov	r3, r0
 80104da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104dc:	7bfb      	ldrb	r3, [r7, #15]
 80104de:	4618      	mov	r0, r3
 80104e0:	f000 f91c 	bl	801071c <USBD_Get_USB_Status>
 80104e4:	4603      	mov	r3, r0
 80104e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b084      	sub	sp, #16
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	460b      	mov	r3, r1
 80104fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104fe:	2300      	movs	r3, #0
 8010500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010502:	2300      	movs	r3, #0
 8010504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801050c:	78fa      	ldrb	r2, [r7, #3]
 801050e:	4611      	mov	r1, r2
 8010510:	4618      	mov	r0, r3
 8010512:	f7f5 fea0 	bl	8006256 <HAL_PCD_EP_Close>
 8010516:	4603      	mov	r3, r0
 8010518:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801051a:	7bfb      	ldrb	r3, [r7, #15]
 801051c:	4618      	mov	r0, r3
 801051e:	f000 f8fd 	bl	801071c <USBD_Get_USB_Status>
 8010522:	4603      	mov	r3, r0
 8010524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010526:	7bbb      	ldrb	r3, [r7, #14]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3710      	adds	r7, #16
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	460b      	mov	r3, r1
 801053a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801053c:	2300      	movs	r3, #0
 801053e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010540:	2300      	movs	r3, #0
 8010542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801054a:	78fa      	ldrb	r2, [r7, #3]
 801054c:	4611      	mov	r1, r2
 801054e:	4618      	mov	r0, r3
 8010550:	f7f5 ff78 	bl	8006444 <HAL_PCD_EP_SetStall>
 8010554:	4603      	mov	r3, r0
 8010556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010558:	7bfb      	ldrb	r3, [r7, #15]
 801055a:	4618      	mov	r0, r3
 801055c:	f000 f8de 	bl	801071c <USBD_Get_USB_Status>
 8010560:	4603      	mov	r3, r0
 8010562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010564:	7bbb      	ldrb	r3, [r7, #14]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3710      	adds	r7, #16
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}

0801056e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b084      	sub	sp, #16
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
 8010576:	460b      	mov	r3, r1
 8010578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801057a:	2300      	movs	r3, #0
 801057c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801057e:	2300      	movs	r3, #0
 8010580:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010588:	78fa      	ldrb	r2, [r7, #3]
 801058a:	4611      	mov	r1, r2
 801058c:	4618      	mov	r0, r3
 801058e:	f7f5 ffbd 	bl	800650c <HAL_PCD_EP_ClrStall>
 8010592:	4603      	mov	r3, r0
 8010594:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010596:	7bfb      	ldrb	r3, [r7, #15]
 8010598:	4618      	mov	r0, r3
 801059a:	f000 f8bf 	bl	801071c <USBD_Get_USB_Status>
 801059e:	4603      	mov	r3, r0
 80105a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3710      	adds	r7, #16
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b085      	sub	sp, #20
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	460b      	mov	r3, r1
 80105b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80105be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80105c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	da0b      	bge.n	80105e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80105c8:	78fb      	ldrb	r3, [r7, #3]
 80105ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105ce:	68f9      	ldr	r1, [r7, #12]
 80105d0:	4613      	mov	r3, r2
 80105d2:	00db      	lsls	r3, r3, #3
 80105d4:	4413      	add	r3, r2
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	440b      	add	r3, r1
 80105da:	333e      	adds	r3, #62	; 0x3e
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	e00b      	b.n	80105f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80105e0:	78fb      	ldrb	r3, [r7, #3]
 80105e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105e6:	68f9      	ldr	r1, [r7, #12]
 80105e8:	4613      	mov	r3, r2
 80105ea:	00db      	lsls	r3, r3, #3
 80105ec:	4413      	add	r3, r2
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	440b      	add	r3, r1
 80105f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80105f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3714      	adds	r7, #20
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr

08010604 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	460b      	mov	r3, r1
 801060e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010610:	2300      	movs	r3, #0
 8010612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010614:	2300      	movs	r3, #0
 8010616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801061e:	78fa      	ldrb	r2, [r7, #3]
 8010620:	4611      	mov	r1, r2
 8010622:	4618      	mov	r0, r3
 8010624:	f7f5 fd8a 	bl	800613c <HAL_PCD_SetAddress>
 8010628:	4603      	mov	r3, r0
 801062a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801062c:	7bfb      	ldrb	r3, [r7, #15]
 801062e:	4618      	mov	r0, r3
 8010630:	f000 f874 	bl	801071c <USBD_Get_USB_Status>
 8010634:	4603      	mov	r3, r0
 8010636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010638:	7bbb      	ldrb	r3, [r7, #14]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b086      	sub	sp, #24
 8010646:	af00      	add	r7, sp, #0
 8010648:	60f8      	str	r0, [r7, #12]
 801064a:	607a      	str	r2, [r7, #4]
 801064c:	603b      	str	r3, [r7, #0]
 801064e:	460b      	mov	r3, r1
 8010650:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010652:	2300      	movs	r3, #0
 8010654:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010656:	2300      	movs	r3, #0
 8010658:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010660:	7af9      	ldrb	r1, [r7, #11]
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	f7f5 fea3 	bl	80063b0 <HAL_PCD_EP_Transmit>
 801066a:	4603      	mov	r3, r0
 801066c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801066e:	7dfb      	ldrb	r3, [r7, #23]
 8010670:	4618      	mov	r0, r3
 8010672:	f000 f853 	bl	801071c <USBD_Get_USB_Status>
 8010676:	4603      	mov	r3, r0
 8010678:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801067a:	7dbb      	ldrb	r3, [r7, #22]
}
 801067c:	4618      	mov	r0, r3
 801067e:	3718      	adds	r7, #24
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}

08010684 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b086      	sub	sp, #24
 8010688:	af00      	add	r7, sp, #0
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	607a      	str	r2, [r7, #4]
 801068e:	603b      	str	r3, [r7, #0]
 8010690:	460b      	mov	r3, r1
 8010692:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010694:	2300      	movs	r3, #0
 8010696:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80106a2:	7af9      	ldrb	r1, [r7, #11]
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	f7f5 fe1f 	bl	80062ea <HAL_PCD_EP_Receive>
 80106ac:	4603      	mov	r3, r0
 80106ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106b0:	7dfb      	ldrb	r3, [r7, #23]
 80106b2:	4618      	mov	r0, r3
 80106b4:	f000 f832 	bl	801071c <USBD_Get_USB_Status>
 80106b8:	4603      	mov	r3, r0
 80106ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80106bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3718      	adds	r7, #24
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b082      	sub	sp, #8
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	460b      	mov	r3, r1
 80106d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80106d8:	78fa      	ldrb	r2, [r7, #3]
 80106da:	4611      	mov	r1, r2
 80106dc:	4618      	mov	r0, r3
 80106de:	f7f5 fe4f 	bl	8006380 <HAL_PCD_EP_GetRxCount>
 80106e2:	4603      	mov	r3, r0
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3708      	adds	r7, #8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}

080106ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80106f4:	4b03      	ldr	r3, [pc, #12]	; (8010704 <USBD_static_malloc+0x18>)
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	370c      	adds	r7, #12
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	20006be8 	.word	0x20006be8

08010708 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]

}
 8010710:	bf00      	nop
 8010712:	370c      	adds	r7, #12
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801071c:	b480      	push	{r7}
 801071e:	b085      	sub	sp, #20
 8010720:	af00      	add	r7, sp, #0
 8010722:	4603      	mov	r3, r0
 8010724:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010726:	2300      	movs	r3, #0
 8010728:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801072a:	79fb      	ldrb	r3, [r7, #7]
 801072c:	2b03      	cmp	r3, #3
 801072e:	d817      	bhi.n	8010760 <USBD_Get_USB_Status+0x44>
 8010730:	a201      	add	r2, pc, #4	; (adr r2, 8010738 <USBD_Get_USB_Status+0x1c>)
 8010732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010736:	bf00      	nop
 8010738:	08010749 	.word	0x08010749
 801073c:	0801074f 	.word	0x0801074f
 8010740:	08010755 	.word	0x08010755
 8010744:	0801075b 	.word	0x0801075b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010748:	2300      	movs	r3, #0
 801074a:	73fb      	strb	r3, [r7, #15]
    break;
 801074c:	e00b      	b.n	8010766 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801074e:	2303      	movs	r3, #3
 8010750:	73fb      	strb	r3, [r7, #15]
    break;
 8010752:	e008      	b.n	8010766 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010754:	2301      	movs	r3, #1
 8010756:	73fb      	strb	r3, [r7, #15]
    break;
 8010758:	e005      	b.n	8010766 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801075a:	2303      	movs	r3, #3
 801075c:	73fb      	strb	r3, [r7, #15]
    break;
 801075e:	e002      	b.n	8010766 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010760:	2303      	movs	r3, #3
 8010762:	73fb      	strb	r3, [r7, #15]
    break;
 8010764:	bf00      	nop
  }
  return usb_status;
 8010766:	7bfb      	ldrb	r3, [r7, #15]
}
 8010768:	4618      	mov	r0, r3
 801076a:	3714      	adds	r7, #20
 801076c:	46bd      	mov	sp, r7
 801076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010772:	4770      	bx	lr

08010774 <__cvt>:
 8010774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010778:	ec55 4b10 	vmov	r4, r5, d0
 801077c:	2d00      	cmp	r5, #0
 801077e:	460e      	mov	r6, r1
 8010780:	4619      	mov	r1, r3
 8010782:	462b      	mov	r3, r5
 8010784:	bfbb      	ittet	lt
 8010786:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801078a:	461d      	movlt	r5, r3
 801078c:	2300      	movge	r3, #0
 801078e:	232d      	movlt	r3, #45	; 0x2d
 8010790:	700b      	strb	r3, [r1, #0]
 8010792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010794:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010798:	4691      	mov	r9, r2
 801079a:	f023 0820 	bic.w	r8, r3, #32
 801079e:	bfbc      	itt	lt
 80107a0:	4622      	movlt	r2, r4
 80107a2:	4614      	movlt	r4, r2
 80107a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80107a8:	d005      	beq.n	80107b6 <__cvt+0x42>
 80107aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80107ae:	d100      	bne.n	80107b2 <__cvt+0x3e>
 80107b0:	3601      	adds	r6, #1
 80107b2:	2102      	movs	r1, #2
 80107b4:	e000      	b.n	80107b8 <__cvt+0x44>
 80107b6:	2103      	movs	r1, #3
 80107b8:	ab03      	add	r3, sp, #12
 80107ba:	9301      	str	r3, [sp, #4]
 80107bc:	ab02      	add	r3, sp, #8
 80107be:	9300      	str	r3, [sp, #0]
 80107c0:	ec45 4b10 	vmov	d0, r4, r5
 80107c4:	4653      	mov	r3, sl
 80107c6:	4632      	mov	r2, r6
 80107c8:	f000 fe76 	bl	80114b8 <_dtoa_r>
 80107cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80107d0:	4607      	mov	r7, r0
 80107d2:	d102      	bne.n	80107da <__cvt+0x66>
 80107d4:	f019 0f01 	tst.w	r9, #1
 80107d8:	d022      	beq.n	8010820 <__cvt+0xac>
 80107da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80107de:	eb07 0906 	add.w	r9, r7, r6
 80107e2:	d110      	bne.n	8010806 <__cvt+0x92>
 80107e4:	783b      	ldrb	r3, [r7, #0]
 80107e6:	2b30      	cmp	r3, #48	; 0x30
 80107e8:	d10a      	bne.n	8010800 <__cvt+0x8c>
 80107ea:	2200      	movs	r2, #0
 80107ec:	2300      	movs	r3, #0
 80107ee:	4620      	mov	r0, r4
 80107f0:	4629      	mov	r1, r5
 80107f2:	f7f0 f979 	bl	8000ae8 <__aeabi_dcmpeq>
 80107f6:	b918      	cbnz	r0, 8010800 <__cvt+0x8c>
 80107f8:	f1c6 0601 	rsb	r6, r6, #1
 80107fc:	f8ca 6000 	str.w	r6, [sl]
 8010800:	f8da 3000 	ldr.w	r3, [sl]
 8010804:	4499      	add	r9, r3
 8010806:	2200      	movs	r2, #0
 8010808:	2300      	movs	r3, #0
 801080a:	4620      	mov	r0, r4
 801080c:	4629      	mov	r1, r5
 801080e:	f7f0 f96b 	bl	8000ae8 <__aeabi_dcmpeq>
 8010812:	b108      	cbz	r0, 8010818 <__cvt+0xa4>
 8010814:	f8cd 900c 	str.w	r9, [sp, #12]
 8010818:	2230      	movs	r2, #48	; 0x30
 801081a:	9b03      	ldr	r3, [sp, #12]
 801081c:	454b      	cmp	r3, r9
 801081e:	d307      	bcc.n	8010830 <__cvt+0xbc>
 8010820:	9b03      	ldr	r3, [sp, #12]
 8010822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010824:	1bdb      	subs	r3, r3, r7
 8010826:	4638      	mov	r0, r7
 8010828:	6013      	str	r3, [r2, #0]
 801082a:	b004      	add	sp, #16
 801082c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010830:	1c59      	adds	r1, r3, #1
 8010832:	9103      	str	r1, [sp, #12]
 8010834:	701a      	strb	r2, [r3, #0]
 8010836:	e7f0      	b.n	801081a <__cvt+0xa6>

08010838 <__exponent>:
 8010838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801083a:	4603      	mov	r3, r0
 801083c:	2900      	cmp	r1, #0
 801083e:	bfb8      	it	lt
 8010840:	4249      	neglt	r1, r1
 8010842:	f803 2b02 	strb.w	r2, [r3], #2
 8010846:	bfb4      	ite	lt
 8010848:	222d      	movlt	r2, #45	; 0x2d
 801084a:	222b      	movge	r2, #43	; 0x2b
 801084c:	2909      	cmp	r1, #9
 801084e:	7042      	strb	r2, [r0, #1]
 8010850:	dd2a      	ble.n	80108a8 <__exponent+0x70>
 8010852:	f10d 0207 	add.w	r2, sp, #7
 8010856:	4617      	mov	r7, r2
 8010858:	260a      	movs	r6, #10
 801085a:	4694      	mov	ip, r2
 801085c:	fb91 f5f6 	sdiv	r5, r1, r6
 8010860:	fb06 1415 	mls	r4, r6, r5, r1
 8010864:	3430      	adds	r4, #48	; 0x30
 8010866:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801086a:	460c      	mov	r4, r1
 801086c:	2c63      	cmp	r4, #99	; 0x63
 801086e:	f102 32ff 	add.w	r2, r2, #4294967295
 8010872:	4629      	mov	r1, r5
 8010874:	dcf1      	bgt.n	801085a <__exponent+0x22>
 8010876:	3130      	adds	r1, #48	; 0x30
 8010878:	f1ac 0402 	sub.w	r4, ip, #2
 801087c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010880:	1c41      	adds	r1, r0, #1
 8010882:	4622      	mov	r2, r4
 8010884:	42ba      	cmp	r2, r7
 8010886:	d30a      	bcc.n	801089e <__exponent+0x66>
 8010888:	f10d 0209 	add.w	r2, sp, #9
 801088c:	eba2 020c 	sub.w	r2, r2, ip
 8010890:	42bc      	cmp	r4, r7
 8010892:	bf88      	it	hi
 8010894:	2200      	movhi	r2, #0
 8010896:	4413      	add	r3, r2
 8010898:	1a18      	subs	r0, r3, r0
 801089a:	b003      	add	sp, #12
 801089c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801089e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80108a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80108a6:	e7ed      	b.n	8010884 <__exponent+0x4c>
 80108a8:	2330      	movs	r3, #48	; 0x30
 80108aa:	3130      	adds	r1, #48	; 0x30
 80108ac:	7083      	strb	r3, [r0, #2]
 80108ae:	70c1      	strb	r1, [r0, #3]
 80108b0:	1d03      	adds	r3, r0, #4
 80108b2:	e7f1      	b.n	8010898 <__exponent+0x60>

080108b4 <_printf_float>:
 80108b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b8:	ed2d 8b02 	vpush	{d8}
 80108bc:	b08d      	sub	sp, #52	; 0x34
 80108be:	460c      	mov	r4, r1
 80108c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80108c4:	4616      	mov	r6, r2
 80108c6:	461f      	mov	r7, r3
 80108c8:	4605      	mov	r5, r0
 80108ca:	f000 fce7 	bl	801129c <_localeconv_r>
 80108ce:	f8d0 a000 	ldr.w	sl, [r0]
 80108d2:	4650      	mov	r0, sl
 80108d4:	f7ef fcdc 	bl	8000290 <strlen>
 80108d8:	2300      	movs	r3, #0
 80108da:	930a      	str	r3, [sp, #40]	; 0x28
 80108dc:	6823      	ldr	r3, [r4, #0]
 80108de:	9305      	str	r3, [sp, #20]
 80108e0:	f8d8 3000 	ldr.w	r3, [r8]
 80108e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80108e8:	3307      	adds	r3, #7
 80108ea:	f023 0307 	bic.w	r3, r3, #7
 80108ee:	f103 0208 	add.w	r2, r3, #8
 80108f2:	f8c8 2000 	str.w	r2, [r8]
 80108f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80108fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80108fe:	9307      	str	r3, [sp, #28]
 8010900:	f8cd 8018 	str.w	r8, [sp, #24]
 8010904:	ee08 0a10 	vmov	s16, r0
 8010908:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801090c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010910:	4b9e      	ldr	r3, [pc, #632]	; (8010b8c <_printf_float+0x2d8>)
 8010912:	f04f 32ff 	mov.w	r2, #4294967295
 8010916:	f7f0 f919 	bl	8000b4c <__aeabi_dcmpun>
 801091a:	bb88      	cbnz	r0, 8010980 <_printf_float+0xcc>
 801091c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010920:	4b9a      	ldr	r3, [pc, #616]	; (8010b8c <_printf_float+0x2d8>)
 8010922:	f04f 32ff 	mov.w	r2, #4294967295
 8010926:	f7f0 f8f3 	bl	8000b10 <__aeabi_dcmple>
 801092a:	bb48      	cbnz	r0, 8010980 <_printf_float+0xcc>
 801092c:	2200      	movs	r2, #0
 801092e:	2300      	movs	r3, #0
 8010930:	4640      	mov	r0, r8
 8010932:	4649      	mov	r1, r9
 8010934:	f7f0 f8e2 	bl	8000afc <__aeabi_dcmplt>
 8010938:	b110      	cbz	r0, 8010940 <_printf_float+0x8c>
 801093a:	232d      	movs	r3, #45	; 0x2d
 801093c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010940:	4a93      	ldr	r2, [pc, #588]	; (8010b90 <_printf_float+0x2dc>)
 8010942:	4b94      	ldr	r3, [pc, #592]	; (8010b94 <_printf_float+0x2e0>)
 8010944:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010948:	bf94      	ite	ls
 801094a:	4690      	movls	r8, r2
 801094c:	4698      	movhi	r8, r3
 801094e:	2303      	movs	r3, #3
 8010950:	6123      	str	r3, [r4, #16]
 8010952:	9b05      	ldr	r3, [sp, #20]
 8010954:	f023 0304 	bic.w	r3, r3, #4
 8010958:	6023      	str	r3, [r4, #0]
 801095a:	f04f 0900 	mov.w	r9, #0
 801095e:	9700      	str	r7, [sp, #0]
 8010960:	4633      	mov	r3, r6
 8010962:	aa0b      	add	r2, sp, #44	; 0x2c
 8010964:	4621      	mov	r1, r4
 8010966:	4628      	mov	r0, r5
 8010968:	f000 f9da 	bl	8010d20 <_printf_common>
 801096c:	3001      	adds	r0, #1
 801096e:	f040 8090 	bne.w	8010a92 <_printf_float+0x1de>
 8010972:	f04f 30ff 	mov.w	r0, #4294967295
 8010976:	b00d      	add	sp, #52	; 0x34
 8010978:	ecbd 8b02 	vpop	{d8}
 801097c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010980:	4642      	mov	r2, r8
 8010982:	464b      	mov	r3, r9
 8010984:	4640      	mov	r0, r8
 8010986:	4649      	mov	r1, r9
 8010988:	f7f0 f8e0 	bl	8000b4c <__aeabi_dcmpun>
 801098c:	b140      	cbz	r0, 80109a0 <_printf_float+0xec>
 801098e:	464b      	mov	r3, r9
 8010990:	2b00      	cmp	r3, #0
 8010992:	bfbc      	itt	lt
 8010994:	232d      	movlt	r3, #45	; 0x2d
 8010996:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801099a:	4a7f      	ldr	r2, [pc, #508]	; (8010b98 <_printf_float+0x2e4>)
 801099c:	4b7f      	ldr	r3, [pc, #508]	; (8010b9c <_printf_float+0x2e8>)
 801099e:	e7d1      	b.n	8010944 <_printf_float+0x90>
 80109a0:	6863      	ldr	r3, [r4, #4]
 80109a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80109a6:	9206      	str	r2, [sp, #24]
 80109a8:	1c5a      	adds	r2, r3, #1
 80109aa:	d13f      	bne.n	8010a2c <_printf_float+0x178>
 80109ac:	2306      	movs	r3, #6
 80109ae:	6063      	str	r3, [r4, #4]
 80109b0:	9b05      	ldr	r3, [sp, #20]
 80109b2:	6861      	ldr	r1, [r4, #4]
 80109b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80109b8:	2300      	movs	r3, #0
 80109ba:	9303      	str	r3, [sp, #12]
 80109bc:	ab0a      	add	r3, sp, #40	; 0x28
 80109be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80109c2:	ab09      	add	r3, sp, #36	; 0x24
 80109c4:	ec49 8b10 	vmov	d0, r8, r9
 80109c8:	9300      	str	r3, [sp, #0]
 80109ca:	6022      	str	r2, [r4, #0]
 80109cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80109d0:	4628      	mov	r0, r5
 80109d2:	f7ff fecf 	bl	8010774 <__cvt>
 80109d6:	9b06      	ldr	r3, [sp, #24]
 80109d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109da:	2b47      	cmp	r3, #71	; 0x47
 80109dc:	4680      	mov	r8, r0
 80109de:	d108      	bne.n	80109f2 <_printf_float+0x13e>
 80109e0:	1cc8      	adds	r0, r1, #3
 80109e2:	db02      	blt.n	80109ea <_printf_float+0x136>
 80109e4:	6863      	ldr	r3, [r4, #4]
 80109e6:	4299      	cmp	r1, r3
 80109e8:	dd41      	ble.n	8010a6e <_printf_float+0x1ba>
 80109ea:	f1ab 0302 	sub.w	r3, fp, #2
 80109ee:	fa5f fb83 	uxtb.w	fp, r3
 80109f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80109f6:	d820      	bhi.n	8010a3a <_printf_float+0x186>
 80109f8:	3901      	subs	r1, #1
 80109fa:	465a      	mov	r2, fp
 80109fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010a00:	9109      	str	r1, [sp, #36]	; 0x24
 8010a02:	f7ff ff19 	bl	8010838 <__exponent>
 8010a06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a08:	1813      	adds	r3, r2, r0
 8010a0a:	2a01      	cmp	r2, #1
 8010a0c:	4681      	mov	r9, r0
 8010a0e:	6123      	str	r3, [r4, #16]
 8010a10:	dc02      	bgt.n	8010a18 <_printf_float+0x164>
 8010a12:	6822      	ldr	r2, [r4, #0]
 8010a14:	07d2      	lsls	r2, r2, #31
 8010a16:	d501      	bpl.n	8010a1c <_printf_float+0x168>
 8010a18:	3301      	adds	r3, #1
 8010a1a:	6123      	str	r3, [r4, #16]
 8010a1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d09c      	beq.n	801095e <_printf_float+0xaa>
 8010a24:	232d      	movs	r3, #45	; 0x2d
 8010a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a2a:	e798      	b.n	801095e <_printf_float+0xaa>
 8010a2c:	9a06      	ldr	r2, [sp, #24]
 8010a2e:	2a47      	cmp	r2, #71	; 0x47
 8010a30:	d1be      	bne.n	80109b0 <_printf_float+0xfc>
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d1bc      	bne.n	80109b0 <_printf_float+0xfc>
 8010a36:	2301      	movs	r3, #1
 8010a38:	e7b9      	b.n	80109ae <_printf_float+0xfa>
 8010a3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010a3e:	d118      	bne.n	8010a72 <_printf_float+0x1be>
 8010a40:	2900      	cmp	r1, #0
 8010a42:	6863      	ldr	r3, [r4, #4]
 8010a44:	dd0b      	ble.n	8010a5e <_printf_float+0x1aa>
 8010a46:	6121      	str	r1, [r4, #16]
 8010a48:	b913      	cbnz	r3, 8010a50 <_printf_float+0x19c>
 8010a4a:	6822      	ldr	r2, [r4, #0]
 8010a4c:	07d0      	lsls	r0, r2, #31
 8010a4e:	d502      	bpl.n	8010a56 <_printf_float+0x1a2>
 8010a50:	3301      	adds	r3, #1
 8010a52:	440b      	add	r3, r1
 8010a54:	6123      	str	r3, [r4, #16]
 8010a56:	65a1      	str	r1, [r4, #88]	; 0x58
 8010a58:	f04f 0900 	mov.w	r9, #0
 8010a5c:	e7de      	b.n	8010a1c <_printf_float+0x168>
 8010a5e:	b913      	cbnz	r3, 8010a66 <_printf_float+0x1b2>
 8010a60:	6822      	ldr	r2, [r4, #0]
 8010a62:	07d2      	lsls	r2, r2, #31
 8010a64:	d501      	bpl.n	8010a6a <_printf_float+0x1b6>
 8010a66:	3302      	adds	r3, #2
 8010a68:	e7f4      	b.n	8010a54 <_printf_float+0x1a0>
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	e7f2      	b.n	8010a54 <_printf_float+0x1a0>
 8010a6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a74:	4299      	cmp	r1, r3
 8010a76:	db05      	blt.n	8010a84 <_printf_float+0x1d0>
 8010a78:	6823      	ldr	r3, [r4, #0]
 8010a7a:	6121      	str	r1, [r4, #16]
 8010a7c:	07d8      	lsls	r0, r3, #31
 8010a7e:	d5ea      	bpl.n	8010a56 <_printf_float+0x1a2>
 8010a80:	1c4b      	adds	r3, r1, #1
 8010a82:	e7e7      	b.n	8010a54 <_printf_float+0x1a0>
 8010a84:	2900      	cmp	r1, #0
 8010a86:	bfd4      	ite	le
 8010a88:	f1c1 0202 	rsble	r2, r1, #2
 8010a8c:	2201      	movgt	r2, #1
 8010a8e:	4413      	add	r3, r2
 8010a90:	e7e0      	b.n	8010a54 <_printf_float+0x1a0>
 8010a92:	6823      	ldr	r3, [r4, #0]
 8010a94:	055a      	lsls	r2, r3, #21
 8010a96:	d407      	bmi.n	8010aa8 <_printf_float+0x1f4>
 8010a98:	6923      	ldr	r3, [r4, #16]
 8010a9a:	4642      	mov	r2, r8
 8010a9c:	4631      	mov	r1, r6
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	47b8      	blx	r7
 8010aa2:	3001      	adds	r0, #1
 8010aa4:	d12c      	bne.n	8010b00 <_printf_float+0x24c>
 8010aa6:	e764      	b.n	8010972 <_printf_float+0xbe>
 8010aa8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010aac:	f240 80e0 	bls.w	8010c70 <_printf_float+0x3bc>
 8010ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	f7f0 f816 	bl	8000ae8 <__aeabi_dcmpeq>
 8010abc:	2800      	cmp	r0, #0
 8010abe:	d034      	beq.n	8010b2a <_printf_float+0x276>
 8010ac0:	4a37      	ldr	r2, [pc, #220]	; (8010ba0 <_printf_float+0x2ec>)
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	4631      	mov	r1, r6
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	47b8      	blx	r7
 8010aca:	3001      	adds	r0, #1
 8010acc:	f43f af51 	beq.w	8010972 <_printf_float+0xbe>
 8010ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	db02      	blt.n	8010ade <_printf_float+0x22a>
 8010ad8:	6823      	ldr	r3, [r4, #0]
 8010ada:	07d8      	lsls	r0, r3, #31
 8010adc:	d510      	bpl.n	8010b00 <_printf_float+0x24c>
 8010ade:	ee18 3a10 	vmov	r3, s16
 8010ae2:	4652      	mov	r2, sl
 8010ae4:	4631      	mov	r1, r6
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	47b8      	blx	r7
 8010aea:	3001      	adds	r0, #1
 8010aec:	f43f af41 	beq.w	8010972 <_printf_float+0xbe>
 8010af0:	f04f 0800 	mov.w	r8, #0
 8010af4:	f104 091a 	add.w	r9, r4, #26
 8010af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010afa:	3b01      	subs	r3, #1
 8010afc:	4543      	cmp	r3, r8
 8010afe:	dc09      	bgt.n	8010b14 <_printf_float+0x260>
 8010b00:	6823      	ldr	r3, [r4, #0]
 8010b02:	079b      	lsls	r3, r3, #30
 8010b04:	f100 8107 	bmi.w	8010d16 <_printf_float+0x462>
 8010b08:	68e0      	ldr	r0, [r4, #12]
 8010b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b0c:	4298      	cmp	r0, r3
 8010b0e:	bfb8      	it	lt
 8010b10:	4618      	movlt	r0, r3
 8010b12:	e730      	b.n	8010976 <_printf_float+0xc2>
 8010b14:	2301      	movs	r3, #1
 8010b16:	464a      	mov	r2, r9
 8010b18:	4631      	mov	r1, r6
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	47b8      	blx	r7
 8010b1e:	3001      	adds	r0, #1
 8010b20:	f43f af27 	beq.w	8010972 <_printf_float+0xbe>
 8010b24:	f108 0801 	add.w	r8, r8, #1
 8010b28:	e7e6      	b.n	8010af8 <_printf_float+0x244>
 8010b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	dc39      	bgt.n	8010ba4 <_printf_float+0x2f0>
 8010b30:	4a1b      	ldr	r2, [pc, #108]	; (8010ba0 <_printf_float+0x2ec>)
 8010b32:	2301      	movs	r3, #1
 8010b34:	4631      	mov	r1, r6
 8010b36:	4628      	mov	r0, r5
 8010b38:	47b8      	blx	r7
 8010b3a:	3001      	adds	r0, #1
 8010b3c:	f43f af19 	beq.w	8010972 <_printf_float+0xbe>
 8010b40:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010b44:	4313      	orrs	r3, r2
 8010b46:	d102      	bne.n	8010b4e <_printf_float+0x29a>
 8010b48:	6823      	ldr	r3, [r4, #0]
 8010b4a:	07d9      	lsls	r1, r3, #31
 8010b4c:	d5d8      	bpl.n	8010b00 <_printf_float+0x24c>
 8010b4e:	ee18 3a10 	vmov	r3, s16
 8010b52:	4652      	mov	r2, sl
 8010b54:	4631      	mov	r1, r6
 8010b56:	4628      	mov	r0, r5
 8010b58:	47b8      	blx	r7
 8010b5a:	3001      	adds	r0, #1
 8010b5c:	f43f af09 	beq.w	8010972 <_printf_float+0xbe>
 8010b60:	f04f 0900 	mov.w	r9, #0
 8010b64:	f104 0a1a 	add.w	sl, r4, #26
 8010b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b6a:	425b      	negs	r3, r3
 8010b6c:	454b      	cmp	r3, r9
 8010b6e:	dc01      	bgt.n	8010b74 <_printf_float+0x2c0>
 8010b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b72:	e792      	b.n	8010a9a <_printf_float+0x1e6>
 8010b74:	2301      	movs	r3, #1
 8010b76:	4652      	mov	r2, sl
 8010b78:	4631      	mov	r1, r6
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	47b8      	blx	r7
 8010b7e:	3001      	adds	r0, #1
 8010b80:	f43f aef7 	beq.w	8010972 <_printf_float+0xbe>
 8010b84:	f109 0901 	add.w	r9, r9, #1
 8010b88:	e7ee      	b.n	8010b68 <_printf_float+0x2b4>
 8010b8a:	bf00      	nop
 8010b8c:	7fefffff 	.word	0x7fefffff
 8010b90:	0801511c 	.word	0x0801511c
 8010b94:	08015120 	.word	0x08015120
 8010b98:	08015124 	.word	0x08015124
 8010b9c:	08015128 	.word	0x08015128
 8010ba0:	0801512c 	.word	0x0801512c
 8010ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ba6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	bfa8      	it	ge
 8010bac:	461a      	movge	r2, r3
 8010bae:	2a00      	cmp	r2, #0
 8010bb0:	4691      	mov	r9, r2
 8010bb2:	dc37      	bgt.n	8010c24 <_printf_float+0x370>
 8010bb4:	f04f 0b00 	mov.w	fp, #0
 8010bb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010bbc:	f104 021a 	add.w	r2, r4, #26
 8010bc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010bc2:	9305      	str	r3, [sp, #20]
 8010bc4:	eba3 0309 	sub.w	r3, r3, r9
 8010bc8:	455b      	cmp	r3, fp
 8010bca:	dc33      	bgt.n	8010c34 <_printf_float+0x380>
 8010bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	db3b      	blt.n	8010c4c <_printf_float+0x398>
 8010bd4:	6823      	ldr	r3, [r4, #0]
 8010bd6:	07da      	lsls	r2, r3, #31
 8010bd8:	d438      	bmi.n	8010c4c <_printf_float+0x398>
 8010bda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010bde:	eba2 0903 	sub.w	r9, r2, r3
 8010be2:	9b05      	ldr	r3, [sp, #20]
 8010be4:	1ad2      	subs	r2, r2, r3
 8010be6:	4591      	cmp	r9, r2
 8010be8:	bfa8      	it	ge
 8010bea:	4691      	movge	r9, r2
 8010bec:	f1b9 0f00 	cmp.w	r9, #0
 8010bf0:	dc35      	bgt.n	8010c5e <_printf_float+0x3aa>
 8010bf2:	f04f 0800 	mov.w	r8, #0
 8010bf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010bfa:	f104 0a1a 	add.w	sl, r4, #26
 8010bfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c02:	1a9b      	subs	r3, r3, r2
 8010c04:	eba3 0309 	sub.w	r3, r3, r9
 8010c08:	4543      	cmp	r3, r8
 8010c0a:	f77f af79 	ble.w	8010b00 <_printf_float+0x24c>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	4652      	mov	r2, sl
 8010c12:	4631      	mov	r1, r6
 8010c14:	4628      	mov	r0, r5
 8010c16:	47b8      	blx	r7
 8010c18:	3001      	adds	r0, #1
 8010c1a:	f43f aeaa 	beq.w	8010972 <_printf_float+0xbe>
 8010c1e:	f108 0801 	add.w	r8, r8, #1
 8010c22:	e7ec      	b.n	8010bfe <_printf_float+0x34a>
 8010c24:	4613      	mov	r3, r2
 8010c26:	4631      	mov	r1, r6
 8010c28:	4642      	mov	r2, r8
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	47b8      	blx	r7
 8010c2e:	3001      	adds	r0, #1
 8010c30:	d1c0      	bne.n	8010bb4 <_printf_float+0x300>
 8010c32:	e69e      	b.n	8010972 <_printf_float+0xbe>
 8010c34:	2301      	movs	r3, #1
 8010c36:	4631      	mov	r1, r6
 8010c38:	4628      	mov	r0, r5
 8010c3a:	9205      	str	r2, [sp, #20]
 8010c3c:	47b8      	blx	r7
 8010c3e:	3001      	adds	r0, #1
 8010c40:	f43f ae97 	beq.w	8010972 <_printf_float+0xbe>
 8010c44:	9a05      	ldr	r2, [sp, #20]
 8010c46:	f10b 0b01 	add.w	fp, fp, #1
 8010c4a:	e7b9      	b.n	8010bc0 <_printf_float+0x30c>
 8010c4c:	ee18 3a10 	vmov	r3, s16
 8010c50:	4652      	mov	r2, sl
 8010c52:	4631      	mov	r1, r6
 8010c54:	4628      	mov	r0, r5
 8010c56:	47b8      	blx	r7
 8010c58:	3001      	adds	r0, #1
 8010c5a:	d1be      	bne.n	8010bda <_printf_float+0x326>
 8010c5c:	e689      	b.n	8010972 <_printf_float+0xbe>
 8010c5e:	9a05      	ldr	r2, [sp, #20]
 8010c60:	464b      	mov	r3, r9
 8010c62:	4442      	add	r2, r8
 8010c64:	4631      	mov	r1, r6
 8010c66:	4628      	mov	r0, r5
 8010c68:	47b8      	blx	r7
 8010c6a:	3001      	adds	r0, #1
 8010c6c:	d1c1      	bne.n	8010bf2 <_printf_float+0x33e>
 8010c6e:	e680      	b.n	8010972 <_printf_float+0xbe>
 8010c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c72:	2a01      	cmp	r2, #1
 8010c74:	dc01      	bgt.n	8010c7a <_printf_float+0x3c6>
 8010c76:	07db      	lsls	r3, r3, #31
 8010c78:	d53a      	bpl.n	8010cf0 <_printf_float+0x43c>
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	4642      	mov	r2, r8
 8010c7e:	4631      	mov	r1, r6
 8010c80:	4628      	mov	r0, r5
 8010c82:	47b8      	blx	r7
 8010c84:	3001      	adds	r0, #1
 8010c86:	f43f ae74 	beq.w	8010972 <_printf_float+0xbe>
 8010c8a:	ee18 3a10 	vmov	r3, s16
 8010c8e:	4652      	mov	r2, sl
 8010c90:	4631      	mov	r1, r6
 8010c92:	4628      	mov	r0, r5
 8010c94:	47b8      	blx	r7
 8010c96:	3001      	adds	r0, #1
 8010c98:	f43f ae6b 	beq.w	8010972 <_printf_float+0xbe>
 8010c9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010ca8:	f7ef ff1e 	bl	8000ae8 <__aeabi_dcmpeq>
 8010cac:	b9d8      	cbnz	r0, 8010ce6 <_printf_float+0x432>
 8010cae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010cb2:	f108 0201 	add.w	r2, r8, #1
 8010cb6:	4631      	mov	r1, r6
 8010cb8:	4628      	mov	r0, r5
 8010cba:	47b8      	blx	r7
 8010cbc:	3001      	adds	r0, #1
 8010cbe:	d10e      	bne.n	8010cde <_printf_float+0x42a>
 8010cc0:	e657      	b.n	8010972 <_printf_float+0xbe>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	4652      	mov	r2, sl
 8010cc6:	4631      	mov	r1, r6
 8010cc8:	4628      	mov	r0, r5
 8010cca:	47b8      	blx	r7
 8010ccc:	3001      	adds	r0, #1
 8010cce:	f43f ae50 	beq.w	8010972 <_printf_float+0xbe>
 8010cd2:	f108 0801 	add.w	r8, r8, #1
 8010cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cd8:	3b01      	subs	r3, #1
 8010cda:	4543      	cmp	r3, r8
 8010cdc:	dcf1      	bgt.n	8010cc2 <_printf_float+0x40e>
 8010cde:	464b      	mov	r3, r9
 8010ce0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010ce4:	e6da      	b.n	8010a9c <_printf_float+0x1e8>
 8010ce6:	f04f 0800 	mov.w	r8, #0
 8010cea:	f104 0a1a 	add.w	sl, r4, #26
 8010cee:	e7f2      	b.n	8010cd6 <_printf_float+0x422>
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	4642      	mov	r2, r8
 8010cf4:	e7df      	b.n	8010cb6 <_printf_float+0x402>
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	464a      	mov	r2, r9
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	47b8      	blx	r7
 8010d00:	3001      	adds	r0, #1
 8010d02:	f43f ae36 	beq.w	8010972 <_printf_float+0xbe>
 8010d06:	f108 0801 	add.w	r8, r8, #1
 8010d0a:	68e3      	ldr	r3, [r4, #12]
 8010d0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d0e:	1a5b      	subs	r3, r3, r1
 8010d10:	4543      	cmp	r3, r8
 8010d12:	dcf0      	bgt.n	8010cf6 <_printf_float+0x442>
 8010d14:	e6f8      	b.n	8010b08 <_printf_float+0x254>
 8010d16:	f04f 0800 	mov.w	r8, #0
 8010d1a:	f104 0919 	add.w	r9, r4, #25
 8010d1e:	e7f4      	b.n	8010d0a <_printf_float+0x456>

08010d20 <_printf_common>:
 8010d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d24:	4616      	mov	r6, r2
 8010d26:	4699      	mov	r9, r3
 8010d28:	688a      	ldr	r2, [r1, #8]
 8010d2a:	690b      	ldr	r3, [r1, #16]
 8010d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d30:	4293      	cmp	r3, r2
 8010d32:	bfb8      	it	lt
 8010d34:	4613      	movlt	r3, r2
 8010d36:	6033      	str	r3, [r6, #0]
 8010d38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010d3c:	4607      	mov	r7, r0
 8010d3e:	460c      	mov	r4, r1
 8010d40:	b10a      	cbz	r2, 8010d46 <_printf_common+0x26>
 8010d42:	3301      	adds	r3, #1
 8010d44:	6033      	str	r3, [r6, #0]
 8010d46:	6823      	ldr	r3, [r4, #0]
 8010d48:	0699      	lsls	r1, r3, #26
 8010d4a:	bf42      	ittt	mi
 8010d4c:	6833      	ldrmi	r3, [r6, #0]
 8010d4e:	3302      	addmi	r3, #2
 8010d50:	6033      	strmi	r3, [r6, #0]
 8010d52:	6825      	ldr	r5, [r4, #0]
 8010d54:	f015 0506 	ands.w	r5, r5, #6
 8010d58:	d106      	bne.n	8010d68 <_printf_common+0x48>
 8010d5a:	f104 0a19 	add.w	sl, r4, #25
 8010d5e:	68e3      	ldr	r3, [r4, #12]
 8010d60:	6832      	ldr	r2, [r6, #0]
 8010d62:	1a9b      	subs	r3, r3, r2
 8010d64:	42ab      	cmp	r3, r5
 8010d66:	dc26      	bgt.n	8010db6 <_printf_common+0x96>
 8010d68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010d6c:	1e13      	subs	r3, r2, #0
 8010d6e:	6822      	ldr	r2, [r4, #0]
 8010d70:	bf18      	it	ne
 8010d72:	2301      	movne	r3, #1
 8010d74:	0692      	lsls	r2, r2, #26
 8010d76:	d42b      	bmi.n	8010dd0 <_printf_common+0xb0>
 8010d78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d7c:	4649      	mov	r1, r9
 8010d7e:	4638      	mov	r0, r7
 8010d80:	47c0      	blx	r8
 8010d82:	3001      	adds	r0, #1
 8010d84:	d01e      	beq.n	8010dc4 <_printf_common+0xa4>
 8010d86:	6823      	ldr	r3, [r4, #0]
 8010d88:	6922      	ldr	r2, [r4, #16]
 8010d8a:	f003 0306 	and.w	r3, r3, #6
 8010d8e:	2b04      	cmp	r3, #4
 8010d90:	bf02      	ittt	eq
 8010d92:	68e5      	ldreq	r5, [r4, #12]
 8010d94:	6833      	ldreq	r3, [r6, #0]
 8010d96:	1aed      	subeq	r5, r5, r3
 8010d98:	68a3      	ldr	r3, [r4, #8]
 8010d9a:	bf0c      	ite	eq
 8010d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010da0:	2500      	movne	r5, #0
 8010da2:	4293      	cmp	r3, r2
 8010da4:	bfc4      	itt	gt
 8010da6:	1a9b      	subgt	r3, r3, r2
 8010da8:	18ed      	addgt	r5, r5, r3
 8010daa:	2600      	movs	r6, #0
 8010dac:	341a      	adds	r4, #26
 8010dae:	42b5      	cmp	r5, r6
 8010db0:	d11a      	bne.n	8010de8 <_printf_common+0xc8>
 8010db2:	2000      	movs	r0, #0
 8010db4:	e008      	b.n	8010dc8 <_printf_common+0xa8>
 8010db6:	2301      	movs	r3, #1
 8010db8:	4652      	mov	r2, sl
 8010dba:	4649      	mov	r1, r9
 8010dbc:	4638      	mov	r0, r7
 8010dbe:	47c0      	blx	r8
 8010dc0:	3001      	adds	r0, #1
 8010dc2:	d103      	bne.n	8010dcc <_printf_common+0xac>
 8010dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8010dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dcc:	3501      	adds	r5, #1
 8010dce:	e7c6      	b.n	8010d5e <_printf_common+0x3e>
 8010dd0:	18e1      	adds	r1, r4, r3
 8010dd2:	1c5a      	adds	r2, r3, #1
 8010dd4:	2030      	movs	r0, #48	; 0x30
 8010dd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010dda:	4422      	add	r2, r4
 8010ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010de0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010de4:	3302      	adds	r3, #2
 8010de6:	e7c7      	b.n	8010d78 <_printf_common+0x58>
 8010de8:	2301      	movs	r3, #1
 8010dea:	4622      	mov	r2, r4
 8010dec:	4649      	mov	r1, r9
 8010dee:	4638      	mov	r0, r7
 8010df0:	47c0      	blx	r8
 8010df2:	3001      	adds	r0, #1
 8010df4:	d0e6      	beq.n	8010dc4 <_printf_common+0xa4>
 8010df6:	3601      	adds	r6, #1
 8010df8:	e7d9      	b.n	8010dae <_printf_common+0x8e>
	...

08010dfc <_printf_i>:
 8010dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e00:	7e0f      	ldrb	r7, [r1, #24]
 8010e02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010e04:	2f78      	cmp	r7, #120	; 0x78
 8010e06:	4691      	mov	r9, r2
 8010e08:	4680      	mov	r8, r0
 8010e0a:	460c      	mov	r4, r1
 8010e0c:	469a      	mov	sl, r3
 8010e0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010e12:	d807      	bhi.n	8010e24 <_printf_i+0x28>
 8010e14:	2f62      	cmp	r7, #98	; 0x62
 8010e16:	d80a      	bhi.n	8010e2e <_printf_i+0x32>
 8010e18:	2f00      	cmp	r7, #0
 8010e1a:	f000 80d4 	beq.w	8010fc6 <_printf_i+0x1ca>
 8010e1e:	2f58      	cmp	r7, #88	; 0x58
 8010e20:	f000 80c0 	beq.w	8010fa4 <_printf_i+0x1a8>
 8010e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010e2c:	e03a      	b.n	8010ea4 <_printf_i+0xa8>
 8010e2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010e32:	2b15      	cmp	r3, #21
 8010e34:	d8f6      	bhi.n	8010e24 <_printf_i+0x28>
 8010e36:	a101      	add	r1, pc, #4	; (adr r1, 8010e3c <_printf_i+0x40>)
 8010e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e3c:	08010e95 	.word	0x08010e95
 8010e40:	08010ea9 	.word	0x08010ea9
 8010e44:	08010e25 	.word	0x08010e25
 8010e48:	08010e25 	.word	0x08010e25
 8010e4c:	08010e25 	.word	0x08010e25
 8010e50:	08010e25 	.word	0x08010e25
 8010e54:	08010ea9 	.word	0x08010ea9
 8010e58:	08010e25 	.word	0x08010e25
 8010e5c:	08010e25 	.word	0x08010e25
 8010e60:	08010e25 	.word	0x08010e25
 8010e64:	08010e25 	.word	0x08010e25
 8010e68:	08010fad 	.word	0x08010fad
 8010e6c:	08010ed5 	.word	0x08010ed5
 8010e70:	08010f67 	.word	0x08010f67
 8010e74:	08010e25 	.word	0x08010e25
 8010e78:	08010e25 	.word	0x08010e25
 8010e7c:	08010fcf 	.word	0x08010fcf
 8010e80:	08010e25 	.word	0x08010e25
 8010e84:	08010ed5 	.word	0x08010ed5
 8010e88:	08010e25 	.word	0x08010e25
 8010e8c:	08010e25 	.word	0x08010e25
 8010e90:	08010f6f 	.word	0x08010f6f
 8010e94:	682b      	ldr	r3, [r5, #0]
 8010e96:	1d1a      	adds	r2, r3, #4
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	602a      	str	r2, [r5, #0]
 8010e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	e09f      	b.n	8010fe8 <_printf_i+0x1ec>
 8010ea8:	6820      	ldr	r0, [r4, #0]
 8010eaa:	682b      	ldr	r3, [r5, #0]
 8010eac:	0607      	lsls	r7, r0, #24
 8010eae:	f103 0104 	add.w	r1, r3, #4
 8010eb2:	6029      	str	r1, [r5, #0]
 8010eb4:	d501      	bpl.n	8010eba <_printf_i+0xbe>
 8010eb6:	681e      	ldr	r6, [r3, #0]
 8010eb8:	e003      	b.n	8010ec2 <_printf_i+0xc6>
 8010eba:	0646      	lsls	r6, r0, #25
 8010ebc:	d5fb      	bpl.n	8010eb6 <_printf_i+0xba>
 8010ebe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010ec2:	2e00      	cmp	r6, #0
 8010ec4:	da03      	bge.n	8010ece <_printf_i+0xd2>
 8010ec6:	232d      	movs	r3, #45	; 0x2d
 8010ec8:	4276      	negs	r6, r6
 8010eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ece:	485a      	ldr	r0, [pc, #360]	; (8011038 <_printf_i+0x23c>)
 8010ed0:	230a      	movs	r3, #10
 8010ed2:	e012      	b.n	8010efa <_printf_i+0xfe>
 8010ed4:	682b      	ldr	r3, [r5, #0]
 8010ed6:	6820      	ldr	r0, [r4, #0]
 8010ed8:	1d19      	adds	r1, r3, #4
 8010eda:	6029      	str	r1, [r5, #0]
 8010edc:	0605      	lsls	r5, r0, #24
 8010ede:	d501      	bpl.n	8010ee4 <_printf_i+0xe8>
 8010ee0:	681e      	ldr	r6, [r3, #0]
 8010ee2:	e002      	b.n	8010eea <_printf_i+0xee>
 8010ee4:	0641      	lsls	r1, r0, #25
 8010ee6:	d5fb      	bpl.n	8010ee0 <_printf_i+0xe4>
 8010ee8:	881e      	ldrh	r6, [r3, #0]
 8010eea:	4853      	ldr	r0, [pc, #332]	; (8011038 <_printf_i+0x23c>)
 8010eec:	2f6f      	cmp	r7, #111	; 0x6f
 8010eee:	bf0c      	ite	eq
 8010ef0:	2308      	moveq	r3, #8
 8010ef2:	230a      	movne	r3, #10
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010efa:	6865      	ldr	r5, [r4, #4]
 8010efc:	60a5      	str	r5, [r4, #8]
 8010efe:	2d00      	cmp	r5, #0
 8010f00:	bfa2      	ittt	ge
 8010f02:	6821      	ldrge	r1, [r4, #0]
 8010f04:	f021 0104 	bicge.w	r1, r1, #4
 8010f08:	6021      	strge	r1, [r4, #0]
 8010f0a:	b90e      	cbnz	r6, 8010f10 <_printf_i+0x114>
 8010f0c:	2d00      	cmp	r5, #0
 8010f0e:	d04b      	beq.n	8010fa8 <_printf_i+0x1ac>
 8010f10:	4615      	mov	r5, r2
 8010f12:	fbb6 f1f3 	udiv	r1, r6, r3
 8010f16:	fb03 6711 	mls	r7, r3, r1, r6
 8010f1a:	5dc7      	ldrb	r7, [r0, r7]
 8010f1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010f20:	4637      	mov	r7, r6
 8010f22:	42bb      	cmp	r3, r7
 8010f24:	460e      	mov	r6, r1
 8010f26:	d9f4      	bls.n	8010f12 <_printf_i+0x116>
 8010f28:	2b08      	cmp	r3, #8
 8010f2a:	d10b      	bne.n	8010f44 <_printf_i+0x148>
 8010f2c:	6823      	ldr	r3, [r4, #0]
 8010f2e:	07de      	lsls	r6, r3, #31
 8010f30:	d508      	bpl.n	8010f44 <_printf_i+0x148>
 8010f32:	6923      	ldr	r3, [r4, #16]
 8010f34:	6861      	ldr	r1, [r4, #4]
 8010f36:	4299      	cmp	r1, r3
 8010f38:	bfde      	ittt	le
 8010f3a:	2330      	movle	r3, #48	; 0x30
 8010f3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010f40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010f44:	1b52      	subs	r2, r2, r5
 8010f46:	6122      	str	r2, [r4, #16]
 8010f48:	f8cd a000 	str.w	sl, [sp]
 8010f4c:	464b      	mov	r3, r9
 8010f4e:	aa03      	add	r2, sp, #12
 8010f50:	4621      	mov	r1, r4
 8010f52:	4640      	mov	r0, r8
 8010f54:	f7ff fee4 	bl	8010d20 <_printf_common>
 8010f58:	3001      	adds	r0, #1
 8010f5a:	d14a      	bne.n	8010ff2 <_printf_i+0x1f6>
 8010f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f60:	b004      	add	sp, #16
 8010f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f66:	6823      	ldr	r3, [r4, #0]
 8010f68:	f043 0320 	orr.w	r3, r3, #32
 8010f6c:	6023      	str	r3, [r4, #0]
 8010f6e:	4833      	ldr	r0, [pc, #204]	; (801103c <_printf_i+0x240>)
 8010f70:	2778      	movs	r7, #120	; 0x78
 8010f72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	6829      	ldr	r1, [r5, #0]
 8010f7a:	061f      	lsls	r7, r3, #24
 8010f7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010f80:	d402      	bmi.n	8010f88 <_printf_i+0x18c>
 8010f82:	065f      	lsls	r7, r3, #25
 8010f84:	bf48      	it	mi
 8010f86:	b2b6      	uxthmi	r6, r6
 8010f88:	07df      	lsls	r7, r3, #31
 8010f8a:	bf48      	it	mi
 8010f8c:	f043 0320 	orrmi.w	r3, r3, #32
 8010f90:	6029      	str	r1, [r5, #0]
 8010f92:	bf48      	it	mi
 8010f94:	6023      	strmi	r3, [r4, #0]
 8010f96:	b91e      	cbnz	r6, 8010fa0 <_printf_i+0x1a4>
 8010f98:	6823      	ldr	r3, [r4, #0]
 8010f9a:	f023 0320 	bic.w	r3, r3, #32
 8010f9e:	6023      	str	r3, [r4, #0]
 8010fa0:	2310      	movs	r3, #16
 8010fa2:	e7a7      	b.n	8010ef4 <_printf_i+0xf8>
 8010fa4:	4824      	ldr	r0, [pc, #144]	; (8011038 <_printf_i+0x23c>)
 8010fa6:	e7e4      	b.n	8010f72 <_printf_i+0x176>
 8010fa8:	4615      	mov	r5, r2
 8010faa:	e7bd      	b.n	8010f28 <_printf_i+0x12c>
 8010fac:	682b      	ldr	r3, [r5, #0]
 8010fae:	6826      	ldr	r6, [r4, #0]
 8010fb0:	6961      	ldr	r1, [r4, #20]
 8010fb2:	1d18      	adds	r0, r3, #4
 8010fb4:	6028      	str	r0, [r5, #0]
 8010fb6:	0635      	lsls	r5, r6, #24
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	d501      	bpl.n	8010fc0 <_printf_i+0x1c4>
 8010fbc:	6019      	str	r1, [r3, #0]
 8010fbe:	e002      	b.n	8010fc6 <_printf_i+0x1ca>
 8010fc0:	0670      	lsls	r0, r6, #25
 8010fc2:	d5fb      	bpl.n	8010fbc <_printf_i+0x1c0>
 8010fc4:	8019      	strh	r1, [r3, #0]
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	6123      	str	r3, [r4, #16]
 8010fca:	4615      	mov	r5, r2
 8010fcc:	e7bc      	b.n	8010f48 <_printf_i+0x14c>
 8010fce:	682b      	ldr	r3, [r5, #0]
 8010fd0:	1d1a      	adds	r2, r3, #4
 8010fd2:	602a      	str	r2, [r5, #0]
 8010fd4:	681d      	ldr	r5, [r3, #0]
 8010fd6:	6862      	ldr	r2, [r4, #4]
 8010fd8:	2100      	movs	r1, #0
 8010fda:	4628      	mov	r0, r5
 8010fdc:	f7ef f908 	bl	80001f0 <memchr>
 8010fe0:	b108      	cbz	r0, 8010fe6 <_printf_i+0x1ea>
 8010fe2:	1b40      	subs	r0, r0, r5
 8010fe4:	6060      	str	r0, [r4, #4]
 8010fe6:	6863      	ldr	r3, [r4, #4]
 8010fe8:	6123      	str	r3, [r4, #16]
 8010fea:	2300      	movs	r3, #0
 8010fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ff0:	e7aa      	b.n	8010f48 <_printf_i+0x14c>
 8010ff2:	6923      	ldr	r3, [r4, #16]
 8010ff4:	462a      	mov	r2, r5
 8010ff6:	4649      	mov	r1, r9
 8010ff8:	4640      	mov	r0, r8
 8010ffa:	47d0      	blx	sl
 8010ffc:	3001      	adds	r0, #1
 8010ffe:	d0ad      	beq.n	8010f5c <_printf_i+0x160>
 8011000:	6823      	ldr	r3, [r4, #0]
 8011002:	079b      	lsls	r3, r3, #30
 8011004:	d413      	bmi.n	801102e <_printf_i+0x232>
 8011006:	68e0      	ldr	r0, [r4, #12]
 8011008:	9b03      	ldr	r3, [sp, #12]
 801100a:	4298      	cmp	r0, r3
 801100c:	bfb8      	it	lt
 801100e:	4618      	movlt	r0, r3
 8011010:	e7a6      	b.n	8010f60 <_printf_i+0x164>
 8011012:	2301      	movs	r3, #1
 8011014:	4632      	mov	r2, r6
 8011016:	4649      	mov	r1, r9
 8011018:	4640      	mov	r0, r8
 801101a:	47d0      	blx	sl
 801101c:	3001      	adds	r0, #1
 801101e:	d09d      	beq.n	8010f5c <_printf_i+0x160>
 8011020:	3501      	adds	r5, #1
 8011022:	68e3      	ldr	r3, [r4, #12]
 8011024:	9903      	ldr	r1, [sp, #12]
 8011026:	1a5b      	subs	r3, r3, r1
 8011028:	42ab      	cmp	r3, r5
 801102a:	dcf2      	bgt.n	8011012 <_printf_i+0x216>
 801102c:	e7eb      	b.n	8011006 <_printf_i+0x20a>
 801102e:	2500      	movs	r5, #0
 8011030:	f104 0619 	add.w	r6, r4, #25
 8011034:	e7f5      	b.n	8011022 <_printf_i+0x226>
 8011036:	bf00      	nop
 8011038:	0801512e 	.word	0x0801512e
 801103c:	0801513f 	.word	0x0801513f

08011040 <std>:
 8011040:	2300      	movs	r3, #0
 8011042:	b510      	push	{r4, lr}
 8011044:	4604      	mov	r4, r0
 8011046:	e9c0 3300 	strd	r3, r3, [r0]
 801104a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801104e:	6083      	str	r3, [r0, #8]
 8011050:	8181      	strh	r1, [r0, #12]
 8011052:	6643      	str	r3, [r0, #100]	; 0x64
 8011054:	81c2      	strh	r2, [r0, #14]
 8011056:	6183      	str	r3, [r0, #24]
 8011058:	4619      	mov	r1, r3
 801105a:	2208      	movs	r2, #8
 801105c:	305c      	adds	r0, #92	; 0x5c
 801105e:	f000 f914 	bl	801128a <memset>
 8011062:	4b0d      	ldr	r3, [pc, #52]	; (8011098 <std+0x58>)
 8011064:	6263      	str	r3, [r4, #36]	; 0x24
 8011066:	4b0d      	ldr	r3, [pc, #52]	; (801109c <std+0x5c>)
 8011068:	62a3      	str	r3, [r4, #40]	; 0x28
 801106a:	4b0d      	ldr	r3, [pc, #52]	; (80110a0 <std+0x60>)
 801106c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801106e:	4b0d      	ldr	r3, [pc, #52]	; (80110a4 <std+0x64>)
 8011070:	6323      	str	r3, [r4, #48]	; 0x30
 8011072:	4b0d      	ldr	r3, [pc, #52]	; (80110a8 <std+0x68>)
 8011074:	6224      	str	r4, [r4, #32]
 8011076:	429c      	cmp	r4, r3
 8011078:	d006      	beq.n	8011088 <std+0x48>
 801107a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801107e:	4294      	cmp	r4, r2
 8011080:	d002      	beq.n	8011088 <std+0x48>
 8011082:	33d0      	adds	r3, #208	; 0xd0
 8011084:	429c      	cmp	r4, r3
 8011086:	d105      	bne.n	8011094 <std+0x54>
 8011088:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801108c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011090:	f000 b978 	b.w	8011384 <__retarget_lock_init_recursive>
 8011094:	bd10      	pop	{r4, pc}
 8011096:	bf00      	nop
 8011098:	08011205 	.word	0x08011205
 801109c:	08011227 	.word	0x08011227
 80110a0:	0801125f 	.word	0x0801125f
 80110a4:	08011283 	.word	0x08011283
 80110a8:	20006e08 	.word	0x20006e08

080110ac <stdio_exit_handler>:
 80110ac:	4a02      	ldr	r2, [pc, #8]	; (80110b8 <stdio_exit_handler+0xc>)
 80110ae:	4903      	ldr	r1, [pc, #12]	; (80110bc <stdio_exit_handler+0x10>)
 80110b0:	4803      	ldr	r0, [pc, #12]	; (80110c0 <stdio_exit_handler+0x14>)
 80110b2:	f000 b869 	b.w	8011188 <_fwalk_sglue>
 80110b6:	bf00      	nop
 80110b8:	20000188 	.word	0x20000188
 80110bc:	08012d51 	.word	0x08012d51
 80110c0:	20000194 	.word	0x20000194

080110c4 <cleanup_stdio>:
 80110c4:	6841      	ldr	r1, [r0, #4]
 80110c6:	4b0c      	ldr	r3, [pc, #48]	; (80110f8 <cleanup_stdio+0x34>)
 80110c8:	4299      	cmp	r1, r3
 80110ca:	b510      	push	{r4, lr}
 80110cc:	4604      	mov	r4, r0
 80110ce:	d001      	beq.n	80110d4 <cleanup_stdio+0x10>
 80110d0:	f001 fe3e 	bl	8012d50 <_fflush_r>
 80110d4:	68a1      	ldr	r1, [r4, #8]
 80110d6:	4b09      	ldr	r3, [pc, #36]	; (80110fc <cleanup_stdio+0x38>)
 80110d8:	4299      	cmp	r1, r3
 80110da:	d002      	beq.n	80110e2 <cleanup_stdio+0x1e>
 80110dc:	4620      	mov	r0, r4
 80110de:	f001 fe37 	bl	8012d50 <_fflush_r>
 80110e2:	68e1      	ldr	r1, [r4, #12]
 80110e4:	4b06      	ldr	r3, [pc, #24]	; (8011100 <cleanup_stdio+0x3c>)
 80110e6:	4299      	cmp	r1, r3
 80110e8:	d004      	beq.n	80110f4 <cleanup_stdio+0x30>
 80110ea:	4620      	mov	r0, r4
 80110ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110f0:	f001 be2e 	b.w	8012d50 <_fflush_r>
 80110f4:	bd10      	pop	{r4, pc}
 80110f6:	bf00      	nop
 80110f8:	20006e08 	.word	0x20006e08
 80110fc:	20006e70 	.word	0x20006e70
 8011100:	20006ed8 	.word	0x20006ed8

08011104 <global_stdio_init.part.0>:
 8011104:	b510      	push	{r4, lr}
 8011106:	4b0b      	ldr	r3, [pc, #44]	; (8011134 <global_stdio_init.part.0+0x30>)
 8011108:	4c0b      	ldr	r4, [pc, #44]	; (8011138 <global_stdio_init.part.0+0x34>)
 801110a:	4a0c      	ldr	r2, [pc, #48]	; (801113c <global_stdio_init.part.0+0x38>)
 801110c:	601a      	str	r2, [r3, #0]
 801110e:	4620      	mov	r0, r4
 8011110:	2200      	movs	r2, #0
 8011112:	2104      	movs	r1, #4
 8011114:	f7ff ff94 	bl	8011040 <std>
 8011118:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801111c:	2201      	movs	r2, #1
 801111e:	2109      	movs	r1, #9
 8011120:	f7ff ff8e 	bl	8011040 <std>
 8011124:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011128:	2202      	movs	r2, #2
 801112a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801112e:	2112      	movs	r1, #18
 8011130:	f7ff bf86 	b.w	8011040 <std>
 8011134:	20006f40 	.word	0x20006f40
 8011138:	20006e08 	.word	0x20006e08
 801113c:	080110ad 	.word	0x080110ad

08011140 <__sfp_lock_acquire>:
 8011140:	4801      	ldr	r0, [pc, #4]	; (8011148 <__sfp_lock_acquire+0x8>)
 8011142:	f000 b920 	b.w	8011386 <__retarget_lock_acquire_recursive>
 8011146:	bf00      	nop
 8011148:	20006f49 	.word	0x20006f49

0801114c <__sfp_lock_release>:
 801114c:	4801      	ldr	r0, [pc, #4]	; (8011154 <__sfp_lock_release+0x8>)
 801114e:	f000 b91b 	b.w	8011388 <__retarget_lock_release_recursive>
 8011152:	bf00      	nop
 8011154:	20006f49 	.word	0x20006f49

08011158 <__sinit>:
 8011158:	b510      	push	{r4, lr}
 801115a:	4604      	mov	r4, r0
 801115c:	f7ff fff0 	bl	8011140 <__sfp_lock_acquire>
 8011160:	6a23      	ldr	r3, [r4, #32]
 8011162:	b11b      	cbz	r3, 801116c <__sinit+0x14>
 8011164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011168:	f7ff bff0 	b.w	801114c <__sfp_lock_release>
 801116c:	4b04      	ldr	r3, [pc, #16]	; (8011180 <__sinit+0x28>)
 801116e:	6223      	str	r3, [r4, #32]
 8011170:	4b04      	ldr	r3, [pc, #16]	; (8011184 <__sinit+0x2c>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d1f5      	bne.n	8011164 <__sinit+0xc>
 8011178:	f7ff ffc4 	bl	8011104 <global_stdio_init.part.0>
 801117c:	e7f2      	b.n	8011164 <__sinit+0xc>
 801117e:	bf00      	nop
 8011180:	080110c5 	.word	0x080110c5
 8011184:	20006f40 	.word	0x20006f40

08011188 <_fwalk_sglue>:
 8011188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801118c:	4607      	mov	r7, r0
 801118e:	4688      	mov	r8, r1
 8011190:	4614      	mov	r4, r2
 8011192:	2600      	movs	r6, #0
 8011194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011198:	f1b9 0901 	subs.w	r9, r9, #1
 801119c:	d505      	bpl.n	80111aa <_fwalk_sglue+0x22>
 801119e:	6824      	ldr	r4, [r4, #0]
 80111a0:	2c00      	cmp	r4, #0
 80111a2:	d1f7      	bne.n	8011194 <_fwalk_sglue+0xc>
 80111a4:	4630      	mov	r0, r6
 80111a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111aa:	89ab      	ldrh	r3, [r5, #12]
 80111ac:	2b01      	cmp	r3, #1
 80111ae:	d907      	bls.n	80111c0 <_fwalk_sglue+0x38>
 80111b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111b4:	3301      	adds	r3, #1
 80111b6:	d003      	beq.n	80111c0 <_fwalk_sglue+0x38>
 80111b8:	4629      	mov	r1, r5
 80111ba:	4638      	mov	r0, r7
 80111bc:	47c0      	blx	r8
 80111be:	4306      	orrs	r6, r0
 80111c0:	3568      	adds	r5, #104	; 0x68
 80111c2:	e7e9      	b.n	8011198 <_fwalk_sglue+0x10>

080111c4 <siprintf>:
 80111c4:	b40e      	push	{r1, r2, r3}
 80111c6:	b500      	push	{lr}
 80111c8:	b09c      	sub	sp, #112	; 0x70
 80111ca:	ab1d      	add	r3, sp, #116	; 0x74
 80111cc:	9002      	str	r0, [sp, #8]
 80111ce:	9006      	str	r0, [sp, #24]
 80111d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80111d4:	4809      	ldr	r0, [pc, #36]	; (80111fc <siprintf+0x38>)
 80111d6:	9107      	str	r1, [sp, #28]
 80111d8:	9104      	str	r1, [sp, #16]
 80111da:	4909      	ldr	r1, [pc, #36]	; (8011200 <siprintf+0x3c>)
 80111dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80111e0:	9105      	str	r1, [sp, #20]
 80111e2:	6800      	ldr	r0, [r0, #0]
 80111e4:	9301      	str	r3, [sp, #4]
 80111e6:	a902      	add	r1, sp, #8
 80111e8:	f001 fc2e 	bl	8012a48 <_svfiprintf_r>
 80111ec:	9b02      	ldr	r3, [sp, #8]
 80111ee:	2200      	movs	r2, #0
 80111f0:	701a      	strb	r2, [r3, #0]
 80111f2:	b01c      	add	sp, #112	; 0x70
 80111f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80111f8:	b003      	add	sp, #12
 80111fa:	4770      	bx	lr
 80111fc:	200001e0 	.word	0x200001e0
 8011200:	ffff0208 	.word	0xffff0208

08011204 <__sread>:
 8011204:	b510      	push	{r4, lr}
 8011206:	460c      	mov	r4, r1
 8011208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801120c:	f000 f86c 	bl	80112e8 <_read_r>
 8011210:	2800      	cmp	r0, #0
 8011212:	bfab      	itete	ge
 8011214:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011216:	89a3      	ldrhlt	r3, [r4, #12]
 8011218:	181b      	addge	r3, r3, r0
 801121a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801121e:	bfac      	ite	ge
 8011220:	6563      	strge	r3, [r4, #84]	; 0x54
 8011222:	81a3      	strhlt	r3, [r4, #12]
 8011224:	bd10      	pop	{r4, pc}

08011226 <__swrite>:
 8011226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801122a:	461f      	mov	r7, r3
 801122c:	898b      	ldrh	r3, [r1, #12]
 801122e:	05db      	lsls	r3, r3, #23
 8011230:	4605      	mov	r5, r0
 8011232:	460c      	mov	r4, r1
 8011234:	4616      	mov	r6, r2
 8011236:	d505      	bpl.n	8011244 <__swrite+0x1e>
 8011238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801123c:	2302      	movs	r3, #2
 801123e:	2200      	movs	r2, #0
 8011240:	f000 f840 	bl	80112c4 <_lseek_r>
 8011244:	89a3      	ldrh	r3, [r4, #12]
 8011246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801124a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801124e:	81a3      	strh	r3, [r4, #12]
 8011250:	4632      	mov	r2, r6
 8011252:	463b      	mov	r3, r7
 8011254:	4628      	mov	r0, r5
 8011256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801125a:	f000 b857 	b.w	801130c <_write_r>

0801125e <__sseek>:
 801125e:	b510      	push	{r4, lr}
 8011260:	460c      	mov	r4, r1
 8011262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011266:	f000 f82d 	bl	80112c4 <_lseek_r>
 801126a:	1c43      	adds	r3, r0, #1
 801126c:	89a3      	ldrh	r3, [r4, #12]
 801126e:	bf15      	itete	ne
 8011270:	6560      	strne	r0, [r4, #84]	; 0x54
 8011272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801127a:	81a3      	strheq	r3, [r4, #12]
 801127c:	bf18      	it	ne
 801127e:	81a3      	strhne	r3, [r4, #12]
 8011280:	bd10      	pop	{r4, pc}

08011282 <__sclose>:
 8011282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011286:	f000 b80d 	b.w	80112a4 <_close_r>

0801128a <memset>:
 801128a:	4402      	add	r2, r0
 801128c:	4603      	mov	r3, r0
 801128e:	4293      	cmp	r3, r2
 8011290:	d100      	bne.n	8011294 <memset+0xa>
 8011292:	4770      	bx	lr
 8011294:	f803 1b01 	strb.w	r1, [r3], #1
 8011298:	e7f9      	b.n	801128e <memset+0x4>
	...

0801129c <_localeconv_r>:
 801129c:	4800      	ldr	r0, [pc, #0]	; (80112a0 <_localeconv_r+0x4>)
 801129e:	4770      	bx	lr
 80112a0:	200002d4 	.word	0x200002d4

080112a4 <_close_r>:
 80112a4:	b538      	push	{r3, r4, r5, lr}
 80112a6:	4d06      	ldr	r5, [pc, #24]	; (80112c0 <_close_r+0x1c>)
 80112a8:	2300      	movs	r3, #0
 80112aa:	4604      	mov	r4, r0
 80112ac:	4608      	mov	r0, r1
 80112ae:	602b      	str	r3, [r5, #0]
 80112b0:	f7f0 fcdb 	bl	8001c6a <_close>
 80112b4:	1c43      	adds	r3, r0, #1
 80112b6:	d102      	bne.n	80112be <_close_r+0x1a>
 80112b8:	682b      	ldr	r3, [r5, #0]
 80112ba:	b103      	cbz	r3, 80112be <_close_r+0x1a>
 80112bc:	6023      	str	r3, [r4, #0]
 80112be:	bd38      	pop	{r3, r4, r5, pc}
 80112c0:	20006f44 	.word	0x20006f44

080112c4 <_lseek_r>:
 80112c4:	b538      	push	{r3, r4, r5, lr}
 80112c6:	4d07      	ldr	r5, [pc, #28]	; (80112e4 <_lseek_r+0x20>)
 80112c8:	4604      	mov	r4, r0
 80112ca:	4608      	mov	r0, r1
 80112cc:	4611      	mov	r1, r2
 80112ce:	2200      	movs	r2, #0
 80112d0:	602a      	str	r2, [r5, #0]
 80112d2:	461a      	mov	r2, r3
 80112d4:	f7f0 fcf0 	bl	8001cb8 <_lseek>
 80112d8:	1c43      	adds	r3, r0, #1
 80112da:	d102      	bne.n	80112e2 <_lseek_r+0x1e>
 80112dc:	682b      	ldr	r3, [r5, #0]
 80112de:	b103      	cbz	r3, 80112e2 <_lseek_r+0x1e>
 80112e0:	6023      	str	r3, [r4, #0]
 80112e2:	bd38      	pop	{r3, r4, r5, pc}
 80112e4:	20006f44 	.word	0x20006f44

080112e8 <_read_r>:
 80112e8:	b538      	push	{r3, r4, r5, lr}
 80112ea:	4d07      	ldr	r5, [pc, #28]	; (8011308 <_read_r+0x20>)
 80112ec:	4604      	mov	r4, r0
 80112ee:	4608      	mov	r0, r1
 80112f0:	4611      	mov	r1, r2
 80112f2:	2200      	movs	r2, #0
 80112f4:	602a      	str	r2, [r5, #0]
 80112f6:	461a      	mov	r2, r3
 80112f8:	f7f0 fc7e 	bl	8001bf8 <_read>
 80112fc:	1c43      	adds	r3, r0, #1
 80112fe:	d102      	bne.n	8011306 <_read_r+0x1e>
 8011300:	682b      	ldr	r3, [r5, #0]
 8011302:	b103      	cbz	r3, 8011306 <_read_r+0x1e>
 8011304:	6023      	str	r3, [r4, #0]
 8011306:	bd38      	pop	{r3, r4, r5, pc}
 8011308:	20006f44 	.word	0x20006f44

0801130c <_write_r>:
 801130c:	b538      	push	{r3, r4, r5, lr}
 801130e:	4d07      	ldr	r5, [pc, #28]	; (801132c <_write_r+0x20>)
 8011310:	4604      	mov	r4, r0
 8011312:	4608      	mov	r0, r1
 8011314:	4611      	mov	r1, r2
 8011316:	2200      	movs	r2, #0
 8011318:	602a      	str	r2, [r5, #0]
 801131a:	461a      	mov	r2, r3
 801131c:	f7f0 fc89 	bl	8001c32 <_write>
 8011320:	1c43      	adds	r3, r0, #1
 8011322:	d102      	bne.n	801132a <_write_r+0x1e>
 8011324:	682b      	ldr	r3, [r5, #0]
 8011326:	b103      	cbz	r3, 801132a <_write_r+0x1e>
 8011328:	6023      	str	r3, [r4, #0]
 801132a:	bd38      	pop	{r3, r4, r5, pc}
 801132c:	20006f44 	.word	0x20006f44

08011330 <__errno>:
 8011330:	4b01      	ldr	r3, [pc, #4]	; (8011338 <__errno+0x8>)
 8011332:	6818      	ldr	r0, [r3, #0]
 8011334:	4770      	bx	lr
 8011336:	bf00      	nop
 8011338:	200001e0 	.word	0x200001e0

0801133c <__libc_init_array>:
 801133c:	b570      	push	{r4, r5, r6, lr}
 801133e:	4d0d      	ldr	r5, [pc, #52]	; (8011374 <__libc_init_array+0x38>)
 8011340:	4c0d      	ldr	r4, [pc, #52]	; (8011378 <__libc_init_array+0x3c>)
 8011342:	1b64      	subs	r4, r4, r5
 8011344:	10a4      	asrs	r4, r4, #2
 8011346:	2600      	movs	r6, #0
 8011348:	42a6      	cmp	r6, r4
 801134a:	d109      	bne.n	8011360 <__libc_init_array+0x24>
 801134c:	4d0b      	ldr	r5, [pc, #44]	; (801137c <__libc_init_array+0x40>)
 801134e:	4c0c      	ldr	r4, [pc, #48]	; (8011380 <__libc_init_array+0x44>)
 8011350:	f002 f894 	bl	801347c <_init>
 8011354:	1b64      	subs	r4, r4, r5
 8011356:	10a4      	asrs	r4, r4, #2
 8011358:	2600      	movs	r6, #0
 801135a:	42a6      	cmp	r6, r4
 801135c:	d105      	bne.n	801136a <__libc_init_array+0x2e>
 801135e:	bd70      	pop	{r4, r5, r6, pc}
 8011360:	f855 3b04 	ldr.w	r3, [r5], #4
 8011364:	4798      	blx	r3
 8011366:	3601      	adds	r6, #1
 8011368:	e7ee      	b.n	8011348 <__libc_init_array+0xc>
 801136a:	f855 3b04 	ldr.w	r3, [r5], #4
 801136e:	4798      	blx	r3
 8011370:	3601      	adds	r6, #1
 8011372:	e7f2      	b.n	801135a <__libc_init_array+0x1e>
 8011374:	08015494 	.word	0x08015494
 8011378:	08015494 	.word	0x08015494
 801137c:	08015494 	.word	0x08015494
 8011380:	08015498 	.word	0x08015498

08011384 <__retarget_lock_init_recursive>:
 8011384:	4770      	bx	lr

08011386 <__retarget_lock_acquire_recursive>:
 8011386:	4770      	bx	lr

08011388 <__retarget_lock_release_recursive>:
 8011388:	4770      	bx	lr

0801138a <memcpy>:
 801138a:	440a      	add	r2, r1
 801138c:	4291      	cmp	r1, r2
 801138e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011392:	d100      	bne.n	8011396 <memcpy+0xc>
 8011394:	4770      	bx	lr
 8011396:	b510      	push	{r4, lr}
 8011398:	f811 4b01 	ldrb.w	r4, [r1], #1
 801139c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80113a0:	4291      	cmp	r1, r2
 80113a2:	d1f9      	bne.n	8011398 <memcpy+0xe>
 80113a4:	bd10      	pop	{r4, pc}

080113a6 <quorem>:
 80113a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113aa:	6903      	ldr	r3, [r0, #16]
 80113ac:	690c      	ldr	r4, [r1, #16]
 80113ae:	42a3      	cmp	r3, r4
 80113b0:	4607      	mov	r7, r0
 80113b2:	db7e      	blt.n	80114b2 <quorem+0x10c>
 80113b4:	3c01      	subs	r4, #1
 80113b6:	f101 0814 	add.w	r8, r1, #20
 80113ba:	f100 0514 	add.w	r5, r0, #20
 80113be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113c2:	9301      	str	r3, [sp, #4]
 80113c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80113c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113cc:	3301      	adds	r3, #1
 80113ce:	429a      	cmp	r2, r3
 80113d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80113d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80113d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80113dc:	d331      	bcc.n	8011442 <quorem+0x9c>
 80113de:	f04f 0e00 	mov.w	lr, #0
 80113e2:	4640      	mov	r0, r8
 80113e4:	46ac      	mov	ip, r5
 80113e6:	46f2      	mov	sl, lr
 80113e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80113ec:	b293      	uxth	r3, r2
 80113ee:	fb06 e303 	mla	r3, r6, r3, lr
 80113f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80113f6:	0c1a      	lsrs	r2, r3, #16
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	ebaa 0303 	sub.w	r3, sl, r3
 80113fe:	f8dc a000 	ldr.w	sl, [ip]
 8011402:	fa13 f38a 	uxtah	r3, r3, sl
 8011406:	fb06 220e 	mla	r2, r6, lr, r2
 801140a:	9300      	str	r3, [sp, #0]
 801140c:	9b00      	ldr	r3, [sp, #0]
 801140e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011412:	b292      	uxth	r2, r2
 8011414:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801141c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011420:	4581      	cmp	r9, r0
 8011422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011426:	f84c 3b04 	str.w	r3, [ip], #4
 801142a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801142e:	d2db      	bcs.n	80113e8 <quorem+0x42>
 8011430:	f855 300b 	ldr.w	r3, [r5, fp]
 8011434:	b92b      	cbnz	r3, 8011442 <quorem+0x9c>
 8011436:	9b01      	ldr	r3, [sp, #4]
 8011438:	3b04      	subs	r3, #4
 801143a:	429d      	cmp	r5, r3
 801143c:	461a      	mov	r2, r3
 801143e:	d32c      	bcc.n	801149a <quorem+0xf4>
 8011440:	613c      	str	r4, [r7, #16]
 8011442:	4638      	mov	r0, r7
 8011444:	f001 f9a6 	bl	8012794 <__mcmp>
 8011448:	2800      	cmp	r0, #0
 801144a:	db22      	blt.n	8011492 <quorem+0xec>
 801144c:	3601      	adds	r6, #1
 801144e:	4629      	mov	r1, r5
 8011450:	2000      	movs	r0, #0
 8011452:	f858 2b04 	ldr.w	r2, [r8], #4
 8011456:	f8d1 c000 	ldr.w	ip, [r1]
 801145a:	b293      	uxth	r3, r2
 801145c:	1ac3      	subs	r3, r0, r3
 801145e:	0c12      	lsrs	r2, r2, #16
 8011460:	fa13 f38c 	uxtah	r3, r3, ip
 8011464:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011468:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801146c:	b29b      	uxth	r3, r3
 801146e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011472:	45c1      	cmp	r9, r8
 8011474:	f841 3b04 	str.w	r3, [r1], #4
 8011478:	ea4f 4022 	mov.w	r0, r2, asr #16
 801147c:	d2e9      	bcs.n	8011452 <quorem+0xac>
 801147e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011486:	b922      	cbnz	r2, 8011492 <quorem+0xec>
 8011488:	3b04      	subs	r3, #4
 801148a:	429d      	cmp	r5, r3
 801148c:	461a      	mov	r2, r3
 801148e:	d30a      	bcc.n	80114a6 <quorem+0x100>
 8011490:	613c      	str	r4, [r7, #16]
 8011492:	4630      	mov	r0, r6
 8011494:	b003      	add	sp, #12
 8011496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801149a:	6812      	ldr	r2, [r2, #0]
 801149c:	3b04      	subs	r3, #4
 801149e:	2a00      	cmp	r2, #0
 80114a0:	d1ce      	bne.n	8011440 <quorem+0x9a>
 80114a2:	3c01      	subs	r4, #1
 80114a4:	e7c9      	b.n	801143a <quorem+0x94>
 80114a6:	6812      	ldr	r2, [r2, #0]
 80114a8:	3b04      	subs	r3, #4
 80114aa:	2a00      	cmp	r2, #0
 80114ac:	d1f0      	bne.n	8011490 <quorem+0xea>
 80114ae:	3c01      	subs	r4, #1
 80114b0:	e7eb      	b.n	801148a <quorem+0xe4>
 80114b2:	2000      	movs	r0, #0
 80114b4:	e7ee      	b.n	8011494 <quorem+0xee>
	...

080114b8 <_dtoa_r>:
 80114b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114bc:	ed2d 8b04 	vpush	{d8-d9}
 80114c0:	69c5      	ldr	r5, [r0, #28]
 80114c2:	b093      	sub	sp, #76	; 0x4c
 80114c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80114c8:	ec57 6b10 	vmov	r6, r7, d0
 80114cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80114d0:	9107      	str	r1, [sp, #28]
 80114d2:	4604      	mov	r4, r0
 80114d4:	920a      	str	r2, [sp, #40]	; 0x28
 80114d6:	930d      	str	r3, [sp, #52]	; 0x34
 80114d8:	b975      	cbnz	r5, 80114f8 <_dtoa_r+0x40>
 80114da:	2010      	movs	r0, #16
 80114dc:	f000 fe2a 	bl	8012134 <malloc>
 80114e0:	4602      	mov	r2, r0
 80114e2:	61e0      	str	r0, [r4, #28]
 80114e4:	b920      	cbnz	r0, 80114f0 <_dtoa_r+0x38>
 80114e6:	4bae      	ldr	r3, [pc, #696]	; (80117a0 <_dtoa_r+0x2e8>)
 80114e8:	21ef      	movs	r1, #239	; 0xef
 80114ea:	48ae      	ldr	r0, [pc, #696]	; (80117a4 <_dtoa_r+0x2ec>)
 80114ec:	f001 fc82 	bl	8012df4 <__assert_func>
 80114f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80114f4:	6005      	str	r5, [r0, #0]
 80114f6:	60c5      	str	r5, [r0, #12]
 80114f8:	69e3      	ldr	r3, [r4, #28]
 80114fa:	6819      	ldr	r1, [r3, #0]
 80114fc:	b151      	cbz	r1, 8011514 <_dtoa_r+0x5c>
 80114fe:	685a      	ldr	r2, [r3, #4]
 8011500:	604a      	str	r2, [r1, #4]
 8011502:	2301      	movs	r3, #1
 8011504:	4093      	lsls	r3, r2
 8011506:	608b      	str	r3, [r1, #8]
 8011508:	4620      	mov	r0, r4
 801150a:	f000 ff07 	bl	801231c <_Bfree>
 801150e:	69e3      	ldr	r3, [r4, #28]
 8011510:	2200      	movs	r2, #0
 8011512:	601a      	str	r2, [r3, #0]
 8011514:	1e3b      	subs	r3, r7, #0
 8011516:	bfbb      	ittet	lt
 8011518:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801151c:	9303      	strlt	r3, [sp, #12]
 801151e:	2300      	movge	r3, #0
 8011520:	2201      	movlt	r2, #1
 8011522:	bfac      	ite	ge
 8011524:	f8c8 3000 	strge.w	r3, [r8]
 8011528:	f8c8 2000 	strlt.w	r2, [r8]
 801152c:	4b9e      	ldr	r3, [pc, #632]	; (80117a8 <_dtoa_r+0x2f0>)
 801152e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011532:	ea33 0308 	bics.w	r3, r3, r8
 8011536:	d11b      	bne.n	8011570 <_dtoa_r+0xb8>
 8011538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801153a:	f242 730f 	movw	r3, #9999	; 0x270f
 801153e:	6013      	str	r3, [r2, #0]
 8011540:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011544:	4333      	orrs	r3, r6
 8011546:	f000 8593 	beq.w	8012070 <_dtoa_r+0xbb8>
 801154a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801154c:	b963      	cbnz	r3, 8011568 <_dtoa_r+0xb0>
 801154e:	4b97      	ldr	r3, [pc, #604]	; (80117ac <_dtoa_r+0x2f4>)
 8011550:	e027      	b.n	80115a2 <_dtoa_r+0xea>
 8011552:	4b97      	ldr	r3, [pc, #604]	; (80117b0 <_dtoa_r+0x2f8>)
 8011554:	9300      	str	r3, [sp, #0]
 8011556:	3308      	adds	r3, #8
 8011558:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801155a:	6013      	str	r3, [r2, #0]
 801155c:	9800      	ldr	r0, [sp, #0]
 801155e:	b013      	add	sp, #76	; 0x4c
 8011560:	ecbd 8b04 	vpop	{d8-d9}
 8011564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011568:	4b90      	ldr	r3, [pc, #576]	; (80117ac <_dtoa_r+0x2f4>)
 801156a:	9300      	str	r3, [sp, #0]
 801156c:	3303      	adds	r3, #3
 801156e:	e7f3      	b.n	8011558 <_dtoa_r+0xa0>
 8011570:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011574:	2200      	movs	r2, #0
 8011576:	ec51 0b17 	vmov	r0, r1, d7
 801157a:	eeb0 8a47 	vmov.f32	s16, s14
 801157e:	eef0 8a67 	vmov.f32	s17, s15
 8011582:	2300      	movs	r3, #0
 8011584:	f7ef fab0 	bl	8000ae8 <__aeabi_dcmpeq>
 8011588:	4681      	mov	r9, r0
 801158a:	b160      	cbz	r0, 80115a6 <_dtoa_r+0xee>
 801158c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801158e:	2301      	movs	r3, #1
 8011590:	6013      	str	r3, [r2, #0]
 8011592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011594:	2b00      	cmp	r3, #0
 8011596:	f000 8568 	beq.w	801206a <_dtoa_r+0xbb2>
 801159a:	4b86      	ldr	r3, [pc, #536]	; (80117b4 <_dtoa_r+0x2fc>)
 801159c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801159e:	6013      	str	r3, [r2, #0]
 80115a0:	3b01      	subs	r3, #1
 80115a2:	9300      	str	r3, [sp, #0]
 80115a4:	e7da      	b.n	801155c <_dtoa_r+0xa4>
 80115a6:	aa10      	add	r2, sp, #64	; 0x40
 80115a8:	a911      	add	r1, sp, #68	; 0x44
 80115aa:	4620      	mov	r0, r4
 80115ac:	eeb0 0a48 	vmov.f32	s0, s16
 80115b0:	eef0 0a68 	vmov.f32	s1, s17
 80115b4:	f001 f994 	bl	80128e0 <__d2b>
 80115b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80115bc:	4682      	mov	sl, r0
 80115be:	2d00      	cmp	r5, #0
 80115c0:	d07f      	beq.n	80116c2 <_dtoa_r+0x20a>
 80115c2:	ee18 3a90 	vmov	r3, s17
 80115c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80115ce:	ec51 0b18 	vmov	r0, r1, d8
 80115d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80115d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80115da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80115de:	4619      	mov	r1, r3
 80115e0:	2200      	movs	r2, #0
 80115e2:	4b75      	ldr	r3, [pc, #468]	; (80117b8 <_dtoa_r+0x300>)
 80115e4:	f7ee fe60 	bl	80002a8 <__aeabi_dsub>
 80115e8:	a367      	add	r3, pc, #412	; (adr r3, 8011788 <_dtoa_r+0x2d0>)
 80115ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ee:	f7ef f813 	bl	8000618 <__aeabi_dmul>
 80115f2:	a367      	add	r3, pc, #412	; (adr r3, 8011790 <_dtoa_r+0x2d8>)
 80115f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f8:	f7ee fe58 	bl	80002ac <__adddf3>
 80115fc:	4606      	mov	r6, r0
 80115fe:	4628      	mov	r0, r5
 8011600:	460f      	mov	r7, r1
 8011602:	f7ee ff9f 	bl	8000544 <__aeabi_i2d>
 8011606:	a364      	add	r3, pc, #400	; (adr r3, 8011798 <_dtoa_r+0x2e0>)
 8011608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160c:	f7ef f804 	bl	8000618 <__aeabi_dmul>
 8011610:	4602      	mov	r2, r0
 8011612:	460b      	mov	r3, r1
 8011614:	4630      	mov	r0, r6
 8011616:	4639      	mov	r1, r7
 8011618:	f7ee fe48 	bl	80002ac <__adddf3>
 801161c:	4606      	mov	r6, r0
 801161e:	460f      	mov	r7, r1
 8011620:	f7ef faaa 	bl	8000b78 <__aeabi_d2iz>
 8011624:	2200      	movs	r2, #0
 8011626:	4683      	mov	fp, r0
 8011628:	2300      	movs	r3, #0
 801162a:	4630      	mov	r0, r6
 801162c:	4639      	mov	r1, r7
 801162e:	f7ef fa65 	bl	8000afc <__aeabi_dcmplt>
 8011632:	b148      	cbz	r0, 8011648 <_dtoa_r+0x190>
 8011634:	4658      	mov	r0, fp
 8011636:	f7ee ff85 	bl	8000544 <__aeabi_i2d>
 801163a:	4632      	mov	r2, r6
 801163c:	463b      	mov	r3, r7
 801163e:	f7ef fa53 	bl	8000ae8 <__aeabi_dcmpeq>
 8011642:	b908      	cbnz	r0, 8011648 <_dtoa_r+0x190>
 8011644:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011648:	f1bb 0f16 	cmp.w	fp, #22
 801164c:	d857      	bhi.n	80116fe <_dtoa_r+0x246>
 801164e:	4b5b      	ldr	r3, [pc, #364]	; (80117bc <_dtoa_r+0x304>)
 8011650:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011658:	ec51 0b18 	vmov	r0, r1, d8
 801165c:	f7ef fa4e 	bl	8000afc <__aeabi_dcmplt>
 8011660:	2800      	cmp	r0, #0
 8011662:	d04e      	beq.n	8011702 <_dtoa_r+0x24a>
 8011664:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011668:	2300      	movs	r3, #0
 801166a:	930c      	str	r3, [sp, #48]	; 0x30
 801166c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801166e:	1b5b      	subs	r3, r3, r5
 8011670:	1e5a      	subs	r2, r3, #1
 8011672:	bf45      	ittet	mi
 8011674:	f1c3 0301 	rsbmi	r3, r3, #1
 8011678:	9305      	strmi	r3, [sp, #20]
 801167a:	2300      	movpl	r3, #0
 801167c:	2300      	movmi	r3, #0
 801167e:	9206      	str	r2, [sp, #24]
 8011680:	bf54      	ite	pl
 8011682:	9305      	strpl	r3, [sp, #20]
 8011684:	9306      	strmi	r3, [sp, #24]
 8011686:	f1bb 0f00 	cmp.w	fp, #0
 801168a:	db3c      	blt.n	8011706 <_dtoa_r+0x24e>
 801168c:	9b06      	ldr	r3, [sp, #24]
 801168e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011692:	445b      	add	r3, fp
 8011694:	9306      	str	r3, [sp, #24]
 8011696:	2300      	movs	r3, #0
 8011698:	9308      	str	r3, [sp, #32]
 801169a:	9b07      	ldr	r3, [sp, #28]
 801169c:	2b09      	cmp	r3, #9
 801169e:	d868      	bhi.n	8011772 <_dtoa_r+0x2ba>
 80116a0:	2b05      	cmp	r3, #5
 80116a2:	bfc4      	itt	gt
 80116a4:	3b04      	subgt	r3, #4
 80116a6:	9307      	strgt	r3, [sp, #28]
 80116a8:	9b07      	ldr	r3, [sp, #28]
 80116aa:	f1a3 0302 	sub.w	r3, r3, #2
 80116ae:	bfcc      	ite	gt
 80116b0:	2500      	movgt	r5, #0
 80116b2:	2501      	movle	r5, #1
 80116b4:	2b03      	cmp	r3, #3
 80116b6:	f200 8085 	bhi.w	80117c4 <_dtoa_r+0x30c>
 80116ba:	e8df f003 	tbb	[pc, r3]
 80116be:	3b2e      	.short	0x3b2e
 80116c0:	5839      	.short	0x5839
 80116c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80116c6:	441d      	add	r5, r3
 80116c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80116cc:	2b20      	cmp	r3, #32
 80116ce:	bfc1      	itttt	gt
 80116d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80116d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80116d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80116dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80116e0:	bfd6      	itet	le
 80116e2:	f1c3 0320 	rsble	r3, r3, #32
 80116e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80116ea:	fa06 f003 	lslle.w	r0, r6, r3
 80116ee:	f7ee ff19 	bl	8000524 <__aeabi_ui2d>
 80116f2:	2201      	movs	r2, #1
 80116f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80116f8:	3d01      	subs	r5, #1
 80116fa:	920e      	str	r2, [sp, #56]	; 0x38
 80116fc:	e76f      	b.n	80115de <_dtoa_r+0x126>
 80116fe:	2301      	movs	r3, #1
 8011700:	e7b3      	b.n	801166a <_dtoa_r+0x1b2>
 8011702:	900c      	str	r0, [sp, #48]	; 0x30
 8011704:	e7b2      	b.n	801166c <_dtoa_r+0x1b4>
 8011706:	9b05      	ldr	r3, [sp, #20]
 8011708:	eba3 030b 	sub.w	r3, r3, fp
 801170c:	9305      	str	r3, [sp, #20]
 801170e:	f1cb 0300 	rsb	r3, fp, #0
 8011712:	9308      	str	r3, [sp, #32]
 8011714:	2300      	movs	r3, #0
 8011716:	930b      	str	r3, [sp, #44]	; 0x2c
 8011718:	e7bf      	b.n	801169a <_dtoa_r+0x1e2>
 801171a:	2300      	movs	r3, #0
 801171c:	9309      	str	r3, [sp, #36]	; 0x24
 801171e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011720:	2b00      	cmp	r3, #0
 8011722:	dc52      	bgt.n	80117ca <_dtoa_r+0x312>
 8011724:	2301      	movs	r3, #1
 8011726:	9301      	str	r3, [sp, #4]
 8011728:	9304      	str	r3, [sp, #16]
 801172a:	461a      	mov	r2, r3
 801172c:	920a      	str	r2, [sp, #40]	; 0x28
 801172e:	e00b      	b.n	8011748 <_dtoa_r+0x290>
 8011730:	2301      	movs	r3, #1
 8011732:	e7f3      	b.n	801171c <_dtoa_r+0x264>
 8011734:	2300      	movs	r3, #0
 8011736:	9309      	str	r3, [sp, #36]	; 0x24
 8011738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801173a:	445b      	add	r3, fp
 801173c:	9301      	str	r3, [sp, #4]
 801173e:	3301      	adds	r3, #1
 8011740:	2b01      	cmp	r3, #1
 8011742:	9304      	str	r3, [sp, #16]
 8011744:	bfb8      	it	lt
 8011746:	2301      	movlt	r3, #1
 8011748:	69e0      	ldr	r0, [r4, #28]
 801174a:	2100      	movs	r1, #0
 801174c:	2204      	movs	r2, #4
 801174e:	f102 0614 	add.w	r6, r2, #20
 8011752:	429e      	cmp	r6, r3
 8011754:	d93d      	bls.n	80117d2 <_dtoa_r+0x31a>
 8011756:	6041      	str	r1, [r0, #4]
 8011758:	4620      	mov	r0, r4
 801175a:	f000 fd9f 	bl	801229c <_Balloc>
 801175e:	9000      	str	r0, [sp, #0]
 8011760:	2800      	cmp	r0, #0
 8011762:	d139      	bne.n	80117d8 <_dtoa_r+0x320>
 8011764:	4b16      	ldr	r3, [pc, #88]	; (80117c0 <_dtoa_r+0x308>)
 8011766:	4602      	mov	r2, r0
 8011768:	f240 11af 	movw	r1, #431	; 0x1af
 801176c:	e6bd      	b.n	80114ea <_dtoa_r+0x32>
 801176e:	2301      	movs	r3, #1
 8011770:	e7e1      	b.n	8011736 <_dtoa_r+0x27e>
 8011772:	2501      	movs	r5, #1
 8011774:	2300      	movs	r3, #0
 8011776:	9307      	str	r3, [sp, #28]
 8011778:	9509      	str	r5, [sp, #36]	; 0x24
 801177a:	f04f 33ff 	mov.w	r3, #4294967295
 801177e:	9301      	str	r3, [sp, #4]
 8011780:	9304      	str	r3, [sp, #16]
 8011782:	2200      	movs	r2, #0
 8011784:	2312      	movs	r3, #18
 8011786:	e7d1      	b.n	801172c <_dtoa_r+0x274>
 8011788:	636f4361 	.word	0x636f4361
 801178c:	3fd287a7 	.word	0x3fd287a7
 8011790:	8b60c8b3 	.word	0x8b60c8b3
 8011794:	3fc68a28 	.word	0x3fc68a28
 8011798:	509f79fb 	.word	0x509f79fb
 801179c:	3fd34413 	.word	0x3fd34413
 80117a0:	0801515d 	.word	0x0801515d
 80117a4:	08015174 	.word	0x08015174
 80117a8:	7ff00000 	.word	0x7ff00000
 80117ac:	08015159 	.word	0x08015159
 80117b0:	08015150 	.word	0x08015150
 80117b4:	0801512d 	.word	0x0801512d
 80117b8:	3ff80000 	.word	0x3ff80000
 80117bc:	08015260 	.word	0x08015260
 80117c0:	080151cc 	.word	0x080151cc
 80117c4:	2301      	movs	r3, #1
 80117c6:	9309      	str	r3, [sp, #36]	; 0x24
 80117c8:	e7d7      	b.n	801177a <_dtoa_r+0x2c2>
 80117ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117cc:	9301      	str	r3, [sp, #4]
 80117ce:	9304      	str	r3, [sp, #16]
 80117d0:	e7ba      	b.n	8011748 <_dtoa_r+0x290>
 80117d2:	3101      	adds	r1, #1
 80117d4:	0052      	lsls	r2, r2, #1
 80117d6:	e7ba      	b.n	801174e <_dtoa_r+0x296>
 80117d8:	69e3      	ldr	r3, [r4, #28]
 80117da:	9a00      	ldr	r2, [sp, #0]
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	9b04      	ldr	r3, [sp, #16]
 80117e0:	2b0e      	cmp	r3, #14
 80117e2:	f200 80a8 	bhi.w	8011936 <_dtoa_r+0x47e>
 80117e6:	2d00      	cmp	r5, #0
 80117e8:	f000 80a5 	beq.w	8011936 <_dtoa_r+0x47e>
 80117ec:	f1bb 0f00 	cmp.w	fp, #0
 80117f0:	dd38      	ble.n	8011864 <_dtoa_r+0x3ac>
 80117f2:	4bc0      	ldr	r3, [pc, #768]	; (8011af4 <_dtoa_r+0x63c>)
 80117f4:	f00b 020f 	and.w	r2, fp, #15
 80117f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80117fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011800:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011804:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011808:	d019      	beq.n	801183e <_dtoa_r+0x386>
 801180a:	4bbb      	ldr	r3, [pc, #748]	; (8011af8 <_dtoa_r+0x640>)
 801180c:	ec51 0b18 	vmov	r0, r1, d8
 8011810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011814:	f7ef f82a 	bl	800086c <__aeabi_ddiv>
 8011818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801181c:	f008 080f 	and.w	r8, r8, #15
 8011820:	2503      	movs	r5, #3
 8011822:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011af8 <_dtoa_r+0x640>
 8011826:	f1b8 0f00 	cmp.w	r8, #0
 801182a:	d10a      	bne.n	8011842 <_dtoa_r+0x38a>
 801182c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011830:	4632      	mov	r2, r6
 8011832:	463b      	mov	r3, r7
 8011834:	f7ef f81a 	bl	800086c <__aeabi_ddiv>
 8011838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801183c:	e02b      	b.n	8011896 <_dtoa_r+0x3de>
 801183e:	2502      	movs	r5, #2
 8011840:	e7ef      	b.n	8011822 <_dtoa_r+0x36a>
 8011842:	f018 0f01 	tst.w	r8, #1
 8011846:	d008      	beq.n	801185a <_dtoa_r+0x3a2>
 8011848:	4630      	mov	r0, r6
 801184a:	4639      	mov	r1, r7
 801184c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011850:	f7ee fee2 	bl	8000618 <__aeabi_dmul>
 8011854:	3501      	adds	r5, #1
 8011856:	4606      	mov	r6, r0
 8011858:	460f      	mov	r7, r1
 801185a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801185e:	f109 0908 	add.w	r9, r9, #8
 8011862:	e7e0      	b.n	8011826 <_dtoa_r+0x36e>
 8011864:	f000 809f 	beq.w	80119a6 <_dtoa_r+0x4ee>
 8011868:	f1cb 0600 	rsb	r6, fp, #0
 801186c:	4ba1      	ldr	r3, [pc, #644]	; (8011af4 <_dtoa_r+0x63c>)
 801186e:	4fa2      	ldr	r7, [pc, #648]	; (8011af8 <_dtoa_r+0x640>)
 8011870:	f006 020f 	and.w	r2, r6, #15
 8011874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187c:	ec51 0b18 	vmov	r0, r1, d8
 8011880:	f7ee feca 	bl	8000618 <__aeabi_dmul>
 8011884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011888:	1136      	asrs	r6, r6, #4
 801188a:	2300      	movs	r3, #0
 801188c:	2502      	movs	r5, #2
 801188e:	2e00      	cmp	r6, #0
 8011890:	d17e      	bne.n	8011990 <_dtoa_r+0x4d8>
 8011892:	2b00      	cmp	r3, #0
 8011894:	d1d0      	bne.n	8011838 <_dtoa_r+0x380>
 8011896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011898:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801189c:	2b00      	cmp	r3, #0
 801189e:	f000 8084 	beq.w	80119aa <_dtoa_r+0x4f2>
 80118a2:	4b96      	ldr	r3, [pc, #600]	; (8011afc <_dtoa_r+0x644>)
 80118a4:	2200      	movs	r2, #0
 80118a6:	4640      	mov	r0, r8
 80118a8:	4649      	mov	r1, r9
 80118aa:	f7ef f927 	bl	8000afc <__aeabi_dcmplt>
 80118ae:	2800      	cmp	r0, #0
 80118b0:	d07b      	beq.n	80119aa <_dtoa_r+0x4f2>
 80118b2:	9b04      	ldr	r3, [sp, #16]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d078      	beq.n	80119aa <_dtoa_r+0x4f2>
 80118b8:	9b01      	ldr	r3, [sp, #4]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	dd39      	ble.n	8011932 <_dtoa_r+0x47a>
 80118be:	4b90      	ldr	r3, [pc, #576]	; (8011b00 <_dtoa_r+0x648>)
 80118c0:	2200      	movs	r2, #0
 80118c2:	4640      	mov	r0, r8
 80118c4:	4649      	mov	r1, r9
 80118c6:	f7ee fea7 	bl	8000618 <__aeabi_dmul>
 80118ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118ce:	9e01      	ldr	r6, [sp, #4]
 80118d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80118d4:	3501      	adds	r5, #1
 80118d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80118da:	4628      	mov	r0, r5
 80118dc:	f7ee fe32 	bl	8000544 <__aeabi_i2d>
 80118e0:	4642      	mov	r2, r8
 80118e2:	464b      	mov	r3, r9
 80118e4:	f7ee fe98 	bl	8000618 <__aeabi_dmul>
 80118e8:	4b86      	ldr	r3, [pc, #536]	; (8011b04 <_dtoa_r+0x64c>)
 80118ea:	2200      	movs	r2, #0
 80118ec:	f7ee fcde 	bl	80002ac <__adddf3>
 80118f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80118f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118f8:	9303      	str	r3, [sp, #12]
 80118fa:	2e00      	cmp	r6, #0
 80118fc:	d158      	bne.n	80119b0 <_dtoa_r+0x4f8>
 80118fe:	4b82      	ldr	r3, [pc, #520]	; (8011b08 <_dtoa_r+0x650>)
 8011900:	2200      	movs	r2, #0
 8011902:	4640      	mov	r0, r8
 8011904:	4649      	mov	r1, r9
 8011906:	f7ee fccf 	bl	80002a8 <__aeabi_dsub>
 801190a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801190e:	4680      	mov	r8, r0
 8011910:	4689      	mov	r9, r1
 8011912:	f7ef f911 	bl	8000b38 <__aeabi_dcmpgt>
 8011916:	2800      	cmp	r0, #0
 8011918:	f040 8296 	bne.w	8011e48 <_dtoa_r+0x990>
 801191c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011920:	4640      	mov	r0, r8
 8011922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011926:	4649      	mov	r1, r9
 8011928:	f7ef f8e8 	bl	8000afc <__aeabi_dcmplt>
 801192c:	2800      	cmp	r0, #0
 801192e:	f040 8289 	bne.w	8011e44 <_dtoa_r+0x98c>
 8011932:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011938:	2b00      	cmp	r3, #0
 801193a:	f2c0 814e 	blt.w	8011bda <_dtoa_r+0x722>
 801193e:	f1bb 0f0e 	cmp.w	fp, #14
 8011942:	f300 814a 	bgt.w	8011bda <_dtoa_r+0x722>
 8011946:	4b6b      	ldr	r3, [pc, #428]	; (8011af4 <_dtoa_r+0x63c>)
 8011948:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801194c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011952:	2b00      	cmp	r3, #0
 8011954:	f280 80dc 	bge.w	8011b10 <_dtoa_r+0x658>
 8011958:	9b04      	ldr	r3, [sp, #16]
 801195a:	2b00      	cmp	r3, #0
 801195c:	f300 80d8 	bgt.w	8011b10 <_dtoa_r+0x658>
 8011960:	f040 826f 	bne.w	8011e42 <_dtoa_r+0x98a>
 8011964:	4b68      	ldr	r3, [pc, #416]	; (8011b08 <_dtoa_r+0x650>)
 8011966:	2200      	movs	r2, #0
 8011968:	4640      	mov	r0, r8
 801196a:	4649      	mov	r1, r9
 801196c:	f7ee fe54 	bl	8000618 <__aeabi_dmul>
 8011970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011974:	f7ef f8d6 	bl	8000b24 <__aeabi_dcmpge>
 8011978:	9e04      	ldr	r6, [sp, #16]
 801197a:	4637      	mov	r7, r6
 801197c:	2800      	cmp	r0, #0
 801197e:	f040 8245 	bne.w	8011e0c <_dtoa_r+0x954>
 8011982:	9d00      	ldr	r5, [sp, #0]
 8011984:	2331      	movs	r3, #49	; 0x31
 8011986:	f805 3b01 	strb.w	r3, [r5], #1
 801198a:	f10b 0b01 	add.w	fp, fp, #1
 801198e:	e241      	b.n	8011e14 <_dtoa_r+0x95c>
 8011990:	07f2      	lsls	r2, r6, #31
 8011992:	d505      	bpl.n	80119a0 <_dtoa_r+0x4e8>
 8011994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011998:	f7ee fe3e 	bl	8000618 <__aeabi_dmul>
 801199c:	3501      	adds	r5, #1
 801199e:	2301      	movs	r3, #1
 80119a0:	1076      	asrs	r6, r6, #1
 80119a2:	3708      	adds	r7, #8
 80119a4:	e773      	b.n	801188e <_dtoa_r+0x3d6>
 80119a6:	2502      	movs	r5, #2
 80119a8:	e775      	b.n	8011896 <_dtoa_r+0x3de>
 80119aa:	9e04      	ldr	r6, [sp, #16]
 80119ac:	465f      	mov	r7, fp
 80119ae:	e792      	b.n	80118d6 <_dtoa_r+0x41e>
 80119b0:	9900      	ldr	r1, [sp, #0]
 80119b2:	4b50      	ldr	r3, [pc, #320]	; (8011af4 <_dtoa_r+0x63c>)
 80119b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80119b8:	4431      	add	r1, r6
 80119ba:	9102      	str	r1, [sp, #8]
 80119bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119be:	eeb0 9a47 	vmov.f32	s18, s14
 80119c2:	eef0 9a67 	vmov.f32	s19, s15
 80119c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80119ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80119ce:	2900      	cmp	r1, #0
 80119d0:	d044      	beq.n	8011a5c <_dtoa_r+0x5a4>
 80119d2:	494e      	ldr	r1, [pc, #312]	; (8011b0c <_dtoa_r+0x654>)
 80119d4:	2000      	movs	r0, #0
 80119d6:	f7ee ff49 	bl	800086c <__aeabi_ddiv>
 80119da:	ec53 2b19 	vmov	r2, r3, d9
 80119de:	f7ee fc63 	bl	80002a8 <__aeabi_dsub>
 80119e2:	9d00      	ldr	r5, [sp, #0]
 80119e4:	ec41 0b19 	vmov	d9, r0, r1
 80119e8:	4649      	mov	r1, r9
 80119ea:	4640      	mov	r0, r8
 80119ec:	f7ef f8c4 	bl	8000b78 <__aeabi_d2iz>
 80119f0:	4606      	mov	r6, r0
 80119f2:	f7ee fda7 	bl	8000544 <__aeabi_i2d>
 80119f6:	4602      	mov	r2, r0
 80119f8:	460b      	mov	r3, r1
 80119fa:	4640      	mov	r0, r8
 80119fc:	4649      	mov	r1, r9
 80119fe:	f7ee fc53 	bl	80002a8 <__aeabi_dsub>
 8011a02:	3630      	adds	r6, #48	; 0x30
 8011a04:	f805 6b01 	strb.w	r6, [r5], #1
 8011a08:	ec53 2b19 	vmov	r2, r3, d9
 8011a0c:	4680      	mov	r8, r0
 8011a0e:	4689      	mov	r9, r1
 8011a10:	f7ef f874 	bl	8000afc <__aeabi_dcmplt>
 8011a14:	2800      	cmp	r0, #0
 8011a16:	d164      	bne.n	8011ae2 <_dtoa_r+0x62a>
 8011a18:	4642      	mov	r2, r8
 8011a1a:	464b      	mov	r3, r9
 8011a1c:	4937      	ldr	r1, [pc, #220]	; (8011afc <_dtoa_r+0x644>)
 8011a1e:	2000      	movs	r0, #0
 8011a20:	f7ee fc42 	bl	80002a8 <__aeabi_dsub>
 8011a24:	ec53 2b19 	vmov	r2, r3, d9
 8011a28:	f7ef f868 	bl	8000afc <__aeabi_dcmplt>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	f040 80b6 	bne.w	8011b9e <_dtoa_r+0x6e6>
 8011a32:	9b02      	ldr	r3, [sp, #8]
 8011a34:	429d      	cmp	r5, r3
 8011a36:	f43f af7c 	beq.w	8011932 <_dtoa_r+0x47a>
 8011a3a:	4b31      	ldr	r3, [pc, #196]	; (8011b00 <_dtoa_r+0x648>)
 8011a3c:	ec51 0b19 	vmov	r0, r1, d9
 8011a40:	2200      	movs	r2, #0
 8011a42:	f7ee fde9 	bl	8000618 <__aeabi_dmul>
 8011a46:	4b2e      	ldr	r3, [pc, #184]	; (8011b00 <_dtoa_r+0x648>)
 8011a48:	ec41 0b19 	vmov	d9, r0, r1
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	4640      	mov	r0, r8
 8011a50:	4649      	mov	r1, r9
 8011a52:	f7ee fde1 	bl	8000618 <__aeabi_dmul>
 8011a56:	4680      	mov	r8, r0
 8011a58:	4689      	mov	r9, r1
 8011a5a:	e7c5      	b.n	80119e8 <_dtoa_r+0x530>
 8011a5c:	ec51 0b17 	vmov	r0, r1, d7
 8011a60:	f7ee fdda 	bl	8000618 <__aeabi_dmul>
 8011a64:	9b02      	ldr	r3, [sp, #8]
 8011a66:	9d00      	ldr	r5, [sp, #0]
 8011a68:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a6a:	ec41 0b19 	vmov	d9, r0, r1
 8011a6e:	4649      	mov	r1, r9
 8011a70:	4640      	mov	r0, r8
 8011a72:	f7ef f881 	bl	8000b78 <__aeabi_d2iz>
 8011a76:	4606      	mov	r6, r0
 8011a78:	f7ee fd64 	bl	8000544 <__aeabi_i2d>
 8011a7c:	3630      	adds	r6, #48	; 0x30
 8011a7e:	4602      	mov	r2, r0
 8011a80:	460b      	mov	r3, r1
 8011a82:	4640      	mov	r0, r8
 8011a84:	4649      	mov	r1, r9
 8011a86:	f7ee fc0f 	bl	80002a8 <__aeabi_dsub>
 8011a8a:	f805 6b01 	strb.w	r6, [r5], #1
 8011a8e:	9b02      	ldr	r3, [sp, #8]
 8011a90:	429d      	cmp	r5, r3
 8011a92:	4680      	mov	r8, r0
 8011a94:	4689      	mov	r9, r1
 8011a96:	f04f 0200 	mov.w	r2, #0
 8011a9a:	d124      	bne.n	8011ae6 <_dtoa_r+0x62e>
 8011a9c:	4b1b      	ldr	r3, [pc, #108]	; (8011b0c <_dtoa_r+0x654>)
 8011a9e:	ec51 0b19 	vmov	r0, r1, d9
 8011aa2:	f7ee fc03 	bl	80002ac <__adddf3>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	4640      	mov	r0, r8
 8011aac:	4649      	mov	r1, r9
 8011aae:	f7ef f843 	bl	8000b38 <__aeabi_dcmpgt>
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	d173      	bne.n	8011b9e <_dtoa_r+0x6e6>
 8011ab6:	ec53 2b19 	vmov	r2, r3, d9
 8011aba:	4914      	ldr	r1, [pc, #80]	; (8011b0c <_dtoa_r+0x654>)
 8011abc:	2000      	movs	r0, #0
 8011abe:	f7ee fbf3 	bl	80002a8 <__aeabi_dsub>
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	4640      	mov	r0, r8
 8011ac8:	4649      	mov	r1, r9
 8011aca:	f7ef f817 	bl	8000afc <__aeabi_dcmplt>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	f43f af2f 	beq.w	8011932 <_dtoa_r+0x47a>
 8011ad4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011ad6:	1e6b      	subs	r3, r5, #1
 8011ad8:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ada:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011ade:	2b30      	cmp	r3, #48	; 0x30
 8011ae0:	d0f8      	beq.n	8011ad4 <_dtoa_r+0x61c>
 8011ae2:	46bb      	mov	fp, r7
 8011ae4:	e04a      	b.n	8011b7c <_dtoa_r+0x6c4>
 8011ae6:	4b06      	ldr	r3, [pc, #24]	; (8011b00 <_dtoa_r+0x648>)
 8011ae8:	f7ee fd96 	bl	8000618 <__aeabi_dmul>
 8011aec:	4680      	mov	r8, r0
 8011aee:	4689      	mov	r9, r1
 8011af0:	e7bd      	b.n	8011a6e <_dtoa_r+0x5b6>
 8011af2:	bf00      	nop
 8011af4:	08015260 	.word	0x08015260
 8011af8:	08015238 	.word	0x08015238
 8011afc:	3ff00000 	.word	0x3ff00000
 8011b00:	40240000 	.word	0x40240000
 8011b04:	401c0000 	.word	0x401c0000
 8011b08:	40140000 	.word	0x40140000
 8011b0c:	3fe00000 	.word	0x3fe00000
 8011b10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011b14:	9d00      	ldr	r5, [sp, #0]
 8011b16:	4642      	mov	r2, r8
 8011b18:	464b      	mov	r3, r9
 8011b1a:	4630      	mov	r0, r6
 8011b1c:	4639      	mov	r1, r7
 8011b1e:	f7ee fea5 	bl	800086c <__aeabi_ddiv>
 8011b22:	f7ef f829 	bl	8000b78 <__aeabi_d2iz>
 8011b26:	9001      	str	r0, [sp, #4]
 8011b28:	f7ee fd0c 	bl	8000544 <__aeabi_i2d>
 8011b2c:	4642      	mov	r2, r8
 8011b2e:	464b      	mov	r3, r9
 8011b30:	f7ee fd72 	bl	8000618 <__aeabi_dmul>
 8011b34:	4602      	mov	r2, r0
 8011b36:	460b      	mov	r3, r1
 8011b38:	4630      	mov	r0, r6
 8011b3a:	4639      	mov	r1, r7
 8011b3c:	f7ee fbb4 	bl	80002a8 <__aeabi_dsub>
 8011b40:	9e01      	ldr	r6, [sp, #4]
 8011b42:	9f04      	ldr	r7, [sp, #16]
 8011b44:	3630      	adds	r6, #48	; 0x30
 8011b46:	f805 6b01 	strb.w	r6, [r5], #1
 8011b4a:	9e00      	ldr	r6, [sp, #0]
 8011b4c:	1bae      	subs	r6, r5, r6
 8011b4e:	42b7      	cmp	r7, r6
 8011b50:	4602      	mov	r2, r0
 8011b52:	460b      	mov	r3, r1
 8011b54:	d134      	bne.n	8011bc0 <_dtoa_r+0x708>
 8011b56:	f7ee fba9 	bl	80002ac <__adddf3>
 8011b5a:	4642      	mov	r2, r8
 8011b5c:	464b      	mov	r3, r9
 8011b5e:	4606      	mov	r6, r0
 8011b60:	460f      	mov	r7, r1
 8011b62:	f7ee ffe9 	bl	8000b38 <__aeabi_dcmpgt>
 8011b66:	b9c8      	cbnz	r0, 8011b9c <_dtoa_r+0x6e4>
 8011b68:	4642      	mov	r2, r8
 8011b6a:	464b      	mov	r3, r9
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	4639      	mov	r1, r7
 8011b70:	f7ee ffba 	bl	8000ae8 <__aeabi_dcmpeq>
 8011b74:	b110      	cbz	r0, 8011b7c <_dtoa_r+0x6c4>
 8011b76:	9b01      	ldr	r3, [sp, #4]
 8011b78:	07db      	lsls	r3, r3, #31
 8011b7a:	d40f      	bmi.n	8011b9c <_dtoa_r+0x6e4>
 8011b7c:	4651      	mov	r1, sl
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f000 fbcc 	bl	801231c <_Bfree>
 8011b84:	2300      	movs	r3, #0
 8011b86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b88:	702b      	strb	r3, [r5, #0]
 8011b8a:	f10b 0301 	add.w	r3, fp, #1
 8011b8e:	6013      	str	r3, [r2, #0]
 8011b90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f43f ace2 	beq.w	801155c <_dtoa_r+0xa4>
 8011b98:	601d      	str	r5, [r3, #0]
 8011b9a:	e4df      	b.n	801155c <_dtoa_r+0xa4>
 8011b9c:	465f      	mov	r7, fp
 8011b9e:	462b      	mov	r3, r5
 8011ba0:	461d      	mov	r5, r3
 8011ba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ba6:	2a39      	cmp	r2, #57	; 0x39
 8011ba8:	d106      	bne.n	8011bb8 <_dtoa_r+0x700>
 8011baa:	9a00      	ldr	r2, [sp, #0]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d1f7      	bne.n	8011ba0 <_dtoa_r+0x6e8>
 8011bb0:	9900      	ldr	r1, [sp, #0]
 8011bb2:	2230      	movs	r2, #48	; 0x30
 8011bb4:	3701      	adds	r7, #1
 8011bb6:	700a      	strb	r2, [r1, #0]
 8011bb8:	781a      	ldrb	r2, [r3, #0]
 8011bba:	3201      	adds	r2, #1
 8011bbc:	701a      	strb	r2, [r3, #0]
 8011bbe:	e790      	b.n	8011ae2 <_dtoa_r+0x62a>
 8011bc0:	4ba3      	ldr	r3, [pc, #652]	; (8011e50 <_dtoa_r+0x998>)
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	f7ee fd28 	bl	8000618 <__aeabi_dmul>
 8011bc8:	2200      	movs	r2, #0
 8011bca:	2300      	movs	r3, #0
 8011bcc:	4606      	mov	r6, r0
 8011bce:	460f      	mov	r7, r1
 8011bd0:	f7ee ff8a 	bl	8000ae8 <__aeabi_dcmpeq>
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	d09e      	beq.n	8011b16 <_dtoa_r+0x65e>
 8011bd8:	e7d0      	b.n	8011b7c <_dtoa_r+0x6c4>
 8011bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bdc:	2a00      	cmp	r2, #0
 8011bde:	f000 80ca 	beq.w	8011d76 <_dtoa_r+0x8be>
 8011be2:	9a07      	ldr	r2, [sp, #28]
 8011be4:	2a01      	cmp	r2, #1
 8011be6:	f300 80ad 	bgt.w	8011d44 <_dtoa_r+0x88c>
 8011bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bec:	2a00      	cmp	r2, #0
 8011bee:	f000 80a5 	beq.w	8011d3c <_dtoa_r+0x884>
 8011bf2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011bf6:	9e08      	ldr	r6, [sp, #32]
 8011bf8:	9d05      	ldr	r5, [sp, #20]
 8011bfa:	9a05      	ldr	r2, [sp, #20]
 8011bfc:	441a      	add	r2, r3
 8011bfe:	9205      	str	r2, [sp, #20]
 8011c00:	9a06      	ldr	r2, [sp, #24]
 8011c02:	2101      	movs	r1, #1
 8011c04:	441a      	add	r2, r3
 8011c06:	4620      	mov	r0, r4
 8011c08:	9206      	str	r2, [sp, #24]
 8011c0a:	f000 fc3d 	bl	8012488 <__i2b>
 8011c0e:	4607      	mov	r7, r0
 8011c10:	b165      	cbz	r5, 8011c2c <_dtoa_r+0x774>
 8011c12:	9b06      	ldr	r3, [sp, #24]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	dd09      	ble.n	8011c2c <_dtoa_r+0x774>
 8011c18:	42ab      	cmp	r3, r5
 8011c1a:	9a05      	ldr	r2, [sp, #20]
 8011c1c:	bfa8      	it	ge
 8011c1e:	462b      	movge	r3, r5
 8011c20:	1ad2      	subs	r2, r2, r3
 8011c22:	9205      	str	r2, [sp, #20]
 8011c24:	9a06      	ldr	r2, [sp, #24]
 8011c26:	1aed      	subs	r5, r5, r3
 8011c28:	1ad3      	subs	r3, r2, r3
 8011c2a:	9306      	str	r3, [sp, #24]
 8011c2c:	9b08      	ldr	r3, [sp, #32]
 8011c2e:	b1f3      	cbz	r3, 8011c6e <_dtoa_r+0x7b6>
 8011c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f000 80a3 	beq.w	8011d7e <_dtoa_r+0x8c6>
 8011c38:	2e00      	cmp	r6, #0
 8011c3a:	dd10      	ble.n	8011c5e <_dtoa_r+0x7a6>
 8011c3c:	4639      	mov	r1, r7
 8011c3e:	4632      	mov	r2, r6
 8011c40:	4620      	mov	r0, r4
 8011c42:	f000 fce1 	bl	8012608 <__pow5mult>
 8011c46:	4652      	mov	r2, sl
 8011c48:	4601      	mov	r1, r0
 8011c4a:	4607      	mov	r7, r0
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	f000 fc31 	bl	80124b4 <__multiply>
 8011c52:	4651      	mov	r1, sl
 8011c54:	4680      	mov	r8, r0
 8011c56:	4620      	mov	r0, r4
 8011c58:	f000 fb60 	bl	801231c <_Bfree>
 8011c5c:	46c2      	mov	sl, r8
 8011c5e:	9b08      	ldr	r3, [sp, #32]
 8011c60:	1b9a      	subs	r2, r3, r6
 8011c62:	d004      	beq.n	8011c6e <_dtoa_r+0x7b6>
 8011c64:	4651      	mov	r1, sl
 8011c66:	4620      	mov	r0, r4
 8011c68:	f000 fcce 	bl	8012608 <__pow5mult>
 8011c6c:	4682      	mov	sl, r0
 8011c6e:	2101      	movs	r1, #1
 8011c70:	4620      	mov	r0, r4
 8011c72:	f000 fc09 	bl	8012488 <__i2b>
 8011c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	4606      	mov	r6, r0
 8011c7c:	f340 8081 	ble.w	8011d82 <_dtoa_r+0x8ca>
 8011c80:	461a      	mov	r2, r3
 8011c82:	4601      	mov	r1, r0
 8011c84:	4620      	mov	r0, r4
 8011c86:	f000 fcbf 	bl	8012608 <__pow5mult>
 8011c8a:	9b07      	ldr	r3, [sp, #28]
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	4606      	mov	r6, r0
 8011c90:	dd7a      	ble.n	8011d88 <_dtoa_r+0x8d0>
 8011c92:	f04f 0800 	mov.w	r8, #0
 8011c96:	6933      	ldr	r3, [r6, #16]
 8011c98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011c9c:	6918      	ldr	r0, [r3, #16]
 8011c9e:	f000 fba5 	bl	80123ec <__hi0bits>
 8011ca2:	f1c0 0020 	rsb	r0, r0, #32
 8011ca6:	9b06      	ldr	r3, [sp, #24]
 8011ca8:	4418      	add	r0, r3
 8011caa:	f010 001f 	ands.w	r0, r0, #31
 8011cae:	f000 8094 	beq.w	8011dda <_dtoa_r+0x922>
 8011cb2:	f1c0 0320 	rsb	r3, r0, #32
 8011cb6:	2b04      	cmp	r3, #4
 8011cb8:	f340 8085 	ble.w	8011dc6 <_dtoa_r+0x90e>
 8011cbc:	9b05      	ldr	r3, [sp, #20]
 8011cbe:	f1c0 001c 	rsb	r0, r0, #28
 8011cc2:	4403      	add	r3, r0
 8011cc4:	9305      	str	r3, [sp, #20]
 8011cc6:	9b06      	ldr	r3, [sp, #24]
 8011cc8:	4403      	add	r3, r0
 8011cca:	4405      	add	r5, r0
 8011ccc:	9306      	str	r3, [sp, #24]
 8011cce:	9b05      	ldr	r3, [sp, #20]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	dd05      	ble.n	8011ce0 <_dtoa_r+0x828>
 8011cd4:	4651      	mov	r1, sl
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	4620      	mov	r0, r4
 8011cda:	f000 fcef 	bl	80126bc <__lshift>
 8011cde:	4682      	mov	sl, r0
 8011ce0:	9b06      	ldr	r3, [sp, #24]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	dd05      	ble.n	8011cf2 <_dtoa_r+0x83a>
 8011ce6:	4631      	mov	r1, r6
 8011ce8:	461a      	mov	r2, r3
 8011cea:	4620      	mov	r0, r4
 8011cec:	f000 fce6 	bl	80126bc <__lshift>
 8011cf0:	4606      	mov	r6, r0
 8011cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d072      	beq.n	8011dde <_dtoa_r+0x926>
 8011cf8:	4631      	mov	r1, r6
 8011cfa:	4650      	mov	r0, sl
 8011cfc:	f000 fd4a 	bl	8012794 <__mcmp>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	da6c      	bge.n	8011dde <_dtoa_r+0x926>
 8011d04:	2300      	movs	r3, #0
 8011d06:	4651      	mov	r1, sl
 8011d08:	220a      	movs	r2, #10
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f000 fb28 	bl	8012360 <__multadd>
 8011d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011d16:	4682      	mov	sl, r0
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f000 81b0 	beq.w	801207e <_dtoa_r+0xbc6>
 8011d1e:	2300      	movs	r3, #0
 8011d20:	4639      	mov	r1, r7
 8011d22:	220a      	movs	r2, #10
 8011d24:	4620      	mov	r0, r4
 8011d26:	f000 fb1b 	bl	8012360 <__multadd>
 8011d2a:	9b01      	ldr	r3, [sp, #4]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	4607      	mov	r7, r0
 8011d30:	f300 8096 	bgt.w	8011e60 <_dtoa_r+0x9a8>
 8011d34:	9b07      	ldr	r3, [sp, #28]
 8011d36:	2b02      	cmp	r3, #2
 8011d38:	dc59      	bgt.n	8011dee <_dtoa_r+0x936>
 8011d3a:	e091      	b.n	8011e60 <_dtoa_r+0x9a8>
 8011d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011d42:	e758      	b.n	8011bf6 <_dtoa_r+0x73e>
 8011d44:	9b04      	ldr	r3, [sp, #16]
 8011d46:	1e5e      	subs	r6, r3, #1
 8011d48:	9b08      	ldr	r3, [sp, #32]
 8011d4a:	42b3      	cmp	r3, r6
 8011d4c:	bfbf      	itttt	lt
 8011d4e:	9b08      	ldrlt	r3, [sp, #32]
 8011d50:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8011d52:	9608      	strlt	r6, [sp, #32]
 8011d54:	1af3      	sublt	r3, r6, r3
 8011d56:	bfb4      	ite	lt
 8011d58:	18d2      	addlt	r2, r2, r3
 8011d5a:	1b9e      	subge	r6, r3, r6
 8011d5c:	9b04      	ldr	r3, [sp, #16]
 8011d5e:	bfbc      	itt	lt
 8011d60:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8011d62:	2600      	movlt	r6, #0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	bfb7      	itett	lt
 8011d68:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8011d6c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011d70:	1a9d      	sublt	r5, r3, r2
 8011d72:	2300      	movlt	r3, #0
 8011d74:	e741      	b.n	8011bfa <_dtoa_r+0x742>
 8011d76:	9e08      	ldr	r6, [sp, #32]
 8011d78:	9d05      	ldr	r5, [sp, #20]
 8011d7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011d7c:	e748      	b.n	8011c10 <_dtoa_r+0x758>
 8011d7e:	9a08      	ldr	r2, [sp, #32]
 8011d80:	e770      	b.n	8011c64 <_dtoa_r+0x7ac>
 8011d82:	9b07      	ldr	r3, [sp, #28]
 8011d84:	2b01      	cmp	r3, #1
 8011d86:	dc19      	bgt.n	8011dbc <_dtoa_r+0x904>
 8011d88:	9b02      	ldr	r3, [sp, #8]
 8011d8a:	b9bb      	cbnz	r3, 8011dbc <_dtoa_r+0x904>
 8011d8c:	9b03      	ldr	r3, [sp, #12]
 8011d8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d92:	b99b      	cbnz	r3, 8011dbc <_dtoa_r+0x904>
 8011d94:	9b03      	ldr	r3, [sp, #12]
 8011d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011d9a:	0d1b      	lsrs	r3, r3, #20
 8011d9c:	051b      	lsls	r3, r3, #20
 8011d9e:	b183      	cbz	r3, 8011dc2 <_dtoa_r+0x90a>
 8011da0:	9b05      	ldr	r3, [sp, #20]
 8011da2:	3301      	adds	r3, #1
 8011da4:	9305      	str	r3, [sp, #20]
 8011da6:	9b06      	ldr	r3, [sp, #24]
 8011da8:	3301      	adds	r3, #1
 8011daa:	9306      	str	r3, [sp, #24]
 8011dac:	f04f 0801 	mov.w	r8, #1
 8011db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	f47f af6f 	bne.w	8011c96 <_dtoa_r+0x7de>
 8011db8:	2001      	movs	r0, #1
 8011dba:	e774      	b.n	8011ca6 <_dtoa_r+0x7ee>
 8011dbc:	f04f 0800 	mov.w	r8, #0
 8011dc0:	e7f6      	b.n	8011db0 <_dtoa_r+0x8f8>
 8011dc2:	4698      	mov	r8, r3
 8011dc4:	e7f4      	b.n	8011db0 <_dtoa_r+0x8f8>
 8011dc6:	d082      	beq.n	8011cce <_dtoa_r+0x816>
 8011dc8:	9a05      	ldr	r2, [sp, #20]
 8011dca:	331c      	adds	r3, #28
 8011dcc:	441a      	add	r2, r3
 8011dce:	9205      	str	r2, [sp, #20]
 8011dd0:	9a06      	ldr	r2, [sp, #24]
 8011dd2:	441a      	add	r2, r3
 8011dd4:	441d      	add	r5, r3
 8011dd6:	9206      	str	r2, [sp, #24]
 8011dd8:	e779      	b.n	8011cce <_dtoa_r+0x816>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	e7f4      	b.n	8011dc8 <_dtoa_r+0x910>
 8011dde:	9b04      	ldr	r3, [sp, #16]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	dc37      	bgt.n	8011e54 <_dtoa_r+0x99c>
 8011de4:	9b07      	ldr	r3, [sp, #28]
 8011de6:	2b02      	cmp	r3, #2
 8011de8:	dd34      	ble.n	8011e54 <_dtoa_r+0x99c>
 8011dea:	9b04      	ldr	r3, [sp, #16]
 8011dec:	9301      	str	r3, [sp, #4]
 8011dee:	9b01      	ldr	r3, [sp, #4]
 8011df0:	b963      	cbnz	r3, 8011e0c <_dtoa_r+0x954>
 8011df2:	4631      	mov	r1, r6
 8011df4:	2205      	movs	r2, #5
 8011df6:	4620      	mov	r0, r4
 8011df8:	f000 fab2 	bl	8012360 <__multadd>
 8011dfc:	4601      	mov	r1, r0
 8011dfe:	4606      	mov	r6, r0
 8011e00:	4650      	mov	r0, sl
 8011e02:	f000 fcc7 	bl	8012794 <__mcmp>
 8011e06:	2800      	cmp	r0, #0
 8011e08:	f73f adbb 	bgt.w	8011982 <_dtoa_r+0x4ca>
 8011e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e0e:	9d00      	ldr	r5, [sp, #0]
 8011e10:	ea6f 0b03 	mvn.w	fp, r3
 8011e14:	f04f 0800 	mov.w	r8, #0
 8011e18:	4631      	mov	r1, r6
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	f000 fa7e 	bl	801231c <_Bfree>
 8011e20:	2f00      	cmp	r7, #0
 8011e22:	f43f aeab 	beq.w	8011b7c <_dtoa_r+0x6c4>
 8011e26:	f1b8 0f00 	cmp.w	r8, #0
 8011e2a:	d005      	beq.n	8011e38 <_dtoa_r+0x980>
 8011e2c:	45b8      	cmp	r8, r7
 8011e2e:	d003      	beq.n	8011e38 <_dtoa_r+0x980>
 8011e30:	4641      	mov	r1, r8
 8011e32:	4620      	mov	r0, r4
 8011e34:	f000 fa72 	bl	801231c <_Bfree>
 8011e38:	4639      	mov	r1, r7
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f000 fa6e 	bl	801231c <_Bfree>
 8011e40:	e69c      	b.n	8011b7c <_dtoa_r+0x6c4>
 8011e42:	2600      	movs	r6, #0
 8011e44:	4637      	mov	r7, r6
 8011e46:	e7e1      	b.n	8011e0c <_dtoa_r+0x954>
 8011e48:	46bb      	mov	fp, r7
 8011e4a:	4637      	mov	r7, r6
 8011e4c:	e599      	b.n	8011982 <_dtoa_r+0x4ca>
 8011e4e:	bf00      	nop
 8011e50:	40240000 	.word	0x40240000
 8011e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	f000 80c8 	beq.w	8011fec <_dtoa_r+0xb34>
 8011e5c:	9b04      	ldr	r3, [sp, #16]
 8011e5e:	9301      	str	r3, [sp, #4]
 8011e60:	2d00      	cmp	r5, #0
 8011e62:	dd05      	ble.n	8011e70 <_dtoa_r+0x9b8>
 8011e64:	4639      	mov	r1, r7
 8011e66:	462a      	mov	r2, r5
 8011e68:	4620      	mov	r0, r4
 8011e6a:	f000 fc27 	bl	80126bc <__lshift>
 8011e6e:	4607      	mov	r7, r0
 8011e70:	f1b8 0f00 	cmp.w	r8, #0
 8011e74:	d05b      	beq.n	8011f2e <_dtoa_r+0xa76>
 8011e76:	6879      	ldr	r1, [r7, #4]
 8011e78:	4620      	mov	r0, r4
 8011e7a:	f000 fa0f 	bl	801229c <_Balloc>
 8011e7e:	4605      	mov	r5, r0
 8011e80:	b928      	cbnz	r0, 8011e8e <_dtoa_r+0x9d6>
 8011e82:	4b83      	ldr	r3, [pc, #524]	; (8012090 <_dtoa_r+0xbd8>)
 8011e84:	4602      	mov	r2, r0
 8011e86:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011e8a:	f7ff bb2e 	b.w	80114ea <_dtoa_r+0x32>
 8011e8e:	693a      	ldr	r2, [r7, #16]
 8011e90:	3202      	adds	r2, #2
 8011e92:	0092      	lsls	r2, r2, #2
 8011e94:	f107 010c 	add.w	r1, r7, #12
 8011e98:	300c      	adds	r0, #12
 8011e9a:	f7ff fa76 	bl	801138a <memcpy>
 8011e9e:	2201      	movs	r2, #1
 8011ea0:	4629      	mov	r1, r5
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	f000 fc0a 	bl	80126bc <__lshift>
 8011ea8:	9b00      	ldr	r3, [sp, #0]
 8011eaa:	3301      	adds	r3, #1
 8011eac:	9304      	str	r3, [sp, #16]
 8011eae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011eb2:	4413      	add	r3, r2
 8011eb4:	9308      	str	r3, [sp, #32]
 8011eb6:	9b02      	ldr	r3, [sp, #8]
 8011eb8:	f003 0301 	and.w	r3, r3, #1
 8011ebc:	46b8      	mov	r8, r7
 8011ebe:	9306      	str	r3, [sp, #24]
 8011ec0:	4607      	mov	r7, r0
 8011ec2:	9b04      	ldr	r3, [sp, #16]
 8011ec4:	4631      	mov	r1, r6
 8011ec6:	3b01      	subs	r3, #1
 8011ec8:	4650      	mov	r0, sl
 8011eca:	9301      	str	r3, [sp, #4]
 8011ecc:	f7ff fa6b 	bl	80113a6 <quorem>
 8011ed0:	4641      	mov	r1, r8
 8011ed2:	9002      	str	r0, [sp, #8]
 8011ed4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011ed8:	4650      	mov	r0, sl
 8011eda:	f000 fc5b 	bl	8012794 <__mcmp>
 8011ede:	463a      	mov	r2, r7
 8011ee0:	9005      	str	r0, [sp, #20]
 8011ee2:	4631      	mov	r1, r6
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	f000 fc71 	bl	80127cc <__mdiff>
 8011eea:	68c2      	ldr	r2, [r0, #12]
 8011eec:	4605      	mov	r5, r0
 8011eee:	bb02      	cbnz	r2, 8011f32 <_dtoa_r+0xa7a>
 8011ef0:	4601      	mov	r1, r0
 8011ef2:	4650      	mov	r0, sl
 8011ef4:	f000 fc4e 	bl	8012794 <__mcmp>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	4629      	mov	r1, r5
 8011efc:	4620      	mov	r0, r4
 8011efe:	9209      	str	r2, [sp, #36]	; 0x24
 8011f00:	f000 fa0c 	bl	801231c <_Bfree>
 8011f04:	9b07      	ldr	r3, [sp, #28]
 8011f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f08:	9d04      	ldr	r5, [sp, #16]
 8011f0a:	ea43 0102 	orr.w	r1, r3, r2
 8011f0e:	9b06      	ldr	r3, [sp, #24]
 8011f10:	4319      	orrs	r1, r3
 8011f12:	d110      	bne.n	8011f36 <_dtoa_r+0xa7e>
 8011f14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011f18:	d029      	beq.n	8011f6e <_dtoa_r+0xab6>
 8011f1a:	9b05      	ldr	r3, [sp, #20]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	dd02      	ble.n	8011f26 <_dtoa_r+0xa6e>
 8011f20:	9b02      	ldr	r3, [sp, #8]
 8011f22:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8011f26:	9b01      	ldr	r3, [sp, #4]
 8011f28:	f883 9000 	strb.w	r9, [r3]
 8011f2c:	e774      	b.n	8011e18 <_dtoa_r+0x960>
 8011f2e:	4638      	mov	r0, r7
 8011f30:	e7ba      	b.n	8011ea8 <_dtoa_r+0x9f0>
 8011f32:	2201      	movs	r2, #1
 8011f34:	e7e1      	b.n	8011efa <_dtoa_r+0xa42>
 8011f36:	9b05      	ldr	r3, [sp, #20]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	db04      	blt.n	8011f46 <_dtoa_r+0xa8e>
 8011f3c:	9907      	ldr	r1, [sp, #28]
 8011f3e:	430b      	orrs	r3, r1
 8011f40:	9906      	ldr	r1, [sp, #24]
 8011f42:	430b      	orrs	r3, r1
 8011f44:	d120      	bne.n	8011f88 <_dtoa_r+0xad0>
 8011f46:	2a00      	cmp	r2, #0
 8011f48:	dded      	ble.n	8011f26 <_dtoa_r+0xa6e>
 8011f4a:	4651      	mov	r1, sl
 8011f4c:	2201      	movs	r2, #1
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f000 fbb4 	bl	80126bc <__lshift>
 8011f54:	4631      	mov	r1, r6
 8011f56:	4682      	mov	sl, r0
 8011f58:	f000 fc1c 	bl	8012794 <__mcmp>
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	dc03      	bgt.n	8011f68 <_dtoa_r+0xab0>
 8011f60:	d1e1      	bne.n	8011f26 <_dtoa_r+0xa6e>
 8011f62:	f019 0f01 	tst.w	r9, #1
 8011f66:	d0de      	beq.n	8011f26 <_dtoa_r+0xa6e>
 8011f68:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011f6c:	d1d8      	bne.n	8011f20 <_dtoa_r+0xa68>
 8011f6e:	9a01      	ldr	r2, [sp, #4]
 8011f70:	2339      	movs	r3, #57	; 0x39
 8011f72:	7013      	strb	r3, [r2, #0]
 8011f74:	462b      	mov	r3, r5
 8011f76:	461d      	mov	r5, r3
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011f7e:	2a39      	cmp	r2, #57	; 0x39
 8011f80:	d06c      	beq.n	801205c <_dtoa_r+0xba4>
 8011f82:	3201      	adds	r2, #1
 8011f84:	701a      	strb	r2, [r3, #0]
 8011f86:	e747      	b.n	8011e18 <_dtoa_r+0x960>
 8011f88:	2a00      	cmp	r2, #0
 8011f8a:	dd07      	ble.n	8011f9c <_dtoa_r+0xae4>
 8011f8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011f90:	d0ed      	beq.n	8011f6e <_dtoa_r+0xab6>
 8011f92:	9a01      	ldr	r2, [sp, #4]
 8011f94:	f109 0301 	add.w	r3, r9, #1
 8011f98:	7013      	strb	r3, [r2, #0]
 8011f9a:	e73d      	b.n	8011e18 <_dtoa_r+0x960>
 8011f9c:	9b04      	ldr	r3, [sp, #16]
 8011f9e:	9a08      	ldr	r2, [sp, #32]
 8011fa0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	d043      	beq.n	8012030 <_dtoa_r+0xb78>
 8011fa8:	4651      	mov	r1, sl
 8011faa:	2300      	movs	r3, #0
 8011fac:	220a      	movs	r2, #10
 8011fae:	4620      	mov	r0, r4
 8011fb0:	f000 f9d6 	bl	8012360 <__multadd>
 8011fb4:	45b8      	cmp	r8, r7
 8011fb6:	4682      	mov	sl, r0
 8011fb8:	f04f 0300 	mov.w	r3, #0
 8011fbc:	f04f 020a 	mov.w	r2, #10
 8011fc0:	4641      	mov	r1, r8
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	d107      	bne.n	8011fd6 <_dtoa_r+0xb1e>
 8011fc6:	f000 f9cb 	bl	8012360 <__multadd>
 8011fca:	4680      	mov	r8, r0
 8011fcc:	4607      	mov	r7, r0
 8011fce:	9b04      	ldr	r3, [sp, #16]
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	9304      	str	r3, [sp, #16]
 8011fd4:	e775      	b.n	8011ec2 <_dtoa_r+0xa0a>
 8011fd6:	f000 f9c3 	bl	8012360 <__multadd>
 8011fda:	4639      	mov	r1, r7
 8011fdc:	4680      	mov	r8, r0
 8011fde:	2300      	movs	r3, #0
 8011fe0:	220a      	movs	r2, #10
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	f000 f9bc 	bl	8012360 <__multadd>
 8011fe8:	4607      	mov	r7, r0
 8011fea:	e7f0      	b.n	8011fce <_dtoa_r+0xb16>
 8011fec:	9b04      	ldr	r3, [sp, #16]
 8011fee:	9301      	str	r3, [sp, #4]
 8011ff0:	9d00      	ldr	r5, [sp, #0]
 8011ff2:	4631      	mov	r1, r6
 8011ff4:	4650      	mov	r0, sl
 8011ff6:	f7ff f9d6 	bl	80113a6 <quorem>
 8011ffa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011ffe:	9b00      	ldr	r3, [sp, #0]
 8012000:	f805 9b01 	strb.w	r9, [r5], #1
 8012004:	1aea      	subs	r2, r5, r3
 8012006:	9b01      	ldr	r3, [sp, #4]
 8012008:	4293      	cmp	r3, r2
 801200a:	dd07      	ble.n	801201c <_dtoa_r+0xb64>
 801200c:	4651      	mov	r1, sl
 801200e:	2300      	movs	r3, #0
 8012010:	220a      	movs	r2, #10
 8012012:	4620      	mov	r0, r4
 8012014:	f000 f9a4 	bl	8012360 <__multadd>
 8012018:	4682      	mov	sl, r0
 801201a:	e7ea      	b.n	8011ff2 <_dtoa_r+0xb3a>
 801201c:	9b01      	ldr	r3, [sp, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	bfc8      	it	gt
 8012022:	461d      	movgt	r5, r3
 8012024:	9b00      	ldr	r3, [sp, #0]
 8012026:	bfd8      	it	le
 8012028:	2501      	movle	r5, #1
 801202a:	441d      	add	r5, r3
 801202c:	f04f 0800 	mov.w	r8, #0
 8012030:	4651      	mov	r1, sl
 8012032:	2201      	movs	r2, #1
 8012034:	4620      	mov	r0, r4
 8012036:	f000 fb41 	bl	80126bc <__lshift>
 801203a:	4631      	mov	r1, r6
 801203c:	4682      	mov	sl, r0
 801203e:	f000 fba9 	bl	8012794 <__mcmp>
 8012042:	2800      	cmp	r0, #0
 8012044:	dc96      	bgt.n	8011f74 <_dtoa_r+0xabc>
 8012046:	d102      	bne.n	801204e <_dtoa_r+0xb96>
 8012048:	f019 0f01 	tst.w	r9, #1
 801204c:	d192      	bne.n	8011f74 <_dtoa_r+0xabc>
 801204e:	462b      	mov	r3, r5
 8012050:	461d      	mov	r5, r3
 8012052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012056:	2a30      	cmp	r2, #48	; 0x30
 8012058:	d0fa      	beq.n	8012050 <_dtoa_r+0xb98>
 801205a:	e6dd      	b.n	8011e18 <_dtoa_r+0x960>
 801205c:	9a00      	ldr	r2, [sp, #0]
 801205e:	429a      	cmp	r2, r3
 8012060:	d189      	bne.n	8011f76 <_dtoa_r+0xabe>
 8012062:	f10b 0b01 	add.w	fp, fp, #1
 8012066:	2331      	movs	r3, #49	; 0x31
 8012068:	e796      	b.n	8011f98 <_dtoa_r+0xae0>
 801206a:	4b0a      	ldr	r3, [pc, #40]	; (8012094 <_dtoa_r+0xbdc>)
 801206c:	f7ff ba99 	b.w	80115a2 <_dtoa_r+0xea>
 8012070:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012072:	2b00      	cmp	r3, #0
 8012074:	f47f aa6d 	bne.w	8011552 <_dtoa_r+0x9a>
 8012078:	4b07      	ldr	r3, [pc, #28]	; (8012098 <_dtoa_r+0xbe0>)
 801207a:	f7ff ba92 	b.w	80115a2 <_dtoa_r+0xea>
 801207e:	9b01      	ldr	r3, [sp, #4]
 8012080:	2b00      	cmp	r3, #0
 8012082:	dcb5      	bgt.n	8011ff0 <_dtoa_r+0xb38>
 8012084:	9b07      	ldr	r3, [sp, #28]
 8012086:	2b02      	cmp	r3, #2
 8012088:	f73f aeb1 	bgt.w	8011dee <_dtoa_r+0x936>
 801208c:	e7b0      	b.n	8011ff0 <_dtoa_r+0xb38>
 801208e:	bf00      	nop
 8012090:	080151cc 	.word	0x080151cc
 8012094:	0801512c 	.word	0x0801512c
 8012098:	08015150 	.word	0x08015150

0801209c <_free_r>:
 801209c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801209e:	2900      	cmp	r1, #0
 80120a0:	d044      	beq.n	801212c <_free_r+0x90>
 80120a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120a6:	9001      	str	r0, [sp, #4]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	f1a1 0404 	sub.w	r4, r1, #4
 80120ae:	bfb8      	it	lt
 80120b0:	18e4      	addlt	r4, r4, r3
 80120b2:	f000 f8e7 	bl	8012284 <__malloc_lock>
 80120b6:	4a1e      	ldr	r2, [pc, #120]	; (8012130 <_free_r+0x94>)
 80120b8:	9801      	ldr	r0, [sp, #4]
 80120ba:	6813      	ldr	r3, [r2, #0]
 80120bc:	b933      	cbnz	r3, 80120cc <_free_r+0x30>
 80120be:	6063      	str	r3, [r4, #4]
 80120c0:	6014      	str	r4, [r2, #0]
 80120c2:	b003      	add	sp, #12
 80120c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80120c8:	f000 b8e2 	b.w	8012290 <__malloc_unlock>
 80120cc:	42a3      	cmp	r3, r4
 80120ce:	d908      	bls.n	80120e2 <_free_r+0x46>
 80120d0:	6825      	ldr	r5, [r4, #0]
 80120d2:	1961      	adds	r1, r4, r5
 80120d4:	428b      	cmp	r3, r1
 80120d6:	bf01      	itttt	eq
 80120d8:	6819      	ldreq	r1, [r3, #0]
 80120da:	685b      	ldreq	r3, [r3, #4]
 80120dc:	1949      	addeq	r1, r1, r5
 80120de:	6021      	streq	r1, [r4, #0]
 80120e0:	e7ed      	b.n	80120be <_free_r+0x22>
 80120e2:	461a      	mov	r2, r3
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	b10b      	cbz	r3, 80120ec <_free_r+0x50>
 80120e8:	42a3      	cmp	r3, r4
 80120ea:	d9fa      	bls.n	80120e2 <_free_r+0x46>
 80120ec:	6811      	ldr	r1, [r2, #0]
 80120ee:	1855      	adds	r5, r2, r1
 80120f0:	42a5      	cmp	r5, r4
 80120f2:	d10b      	bne.n	801210c <_free_r+0x70>
 80120f4:	6824      	ldr	r4, [r4, #0]
 80120f6:	4421      	add	r1, r4
 80120f8:	1854      	adds	r4, r2, r1
 80120fa:	42a3      	cmp	r3, r4
 80120fc:	6011      	str	r1, [r2, #0]
 80120fe:	d1e0      	bne.n	80120c2 <_free_r+0x26>
 8012100:	681c      	ldr	r4, [r3, #0]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	6053      	str	r3, [r2, #4]
 8012106:	440c      	add	r4, r1
 8012108:	6014      	str	r4, [r2, #0]
 801210a:	e7da      	b.n	80120c2 <_free_r+0x26>
 801210c:	d902      	bls.n	8012114 <_free_r+0x78>
 801210e:	230c      	movs	r3, #12
 8012110:	6003      	str	r3, [r0, #0]
 8012112:	e7d6      	b.n	80120c2 <_free_r+0x26>
 8012114:	6825      	ldr	r5, [r4, #0]
 8012116:	1961      	adds	r1, r4, r5
 8012118:	428b      	cmp	r3, r1
 801211a:	bf04      	itt	eq
 801211c:	6819      	ldreq	r1, [r3, #0]
 801211e:	685b      	ldreq	r3, [r3, #4]
 8012120:	6063      	str	r3, [r4, #4]
 8012122:	bf04      	itt	eq
 8012124:	1949      	addeq	r1, r1, r5
 8012126:	6021      	streq	r1, [r4, #0]
 8012128:	6054      	str	r4, [r2, #4]
 801212a:	e7ca      	b.n	80120c2 <_free_r+0x26>
 801212c:	b003      	add	sp, #12
 801212e:	bd30      	pop	{r4, r5, pc}
 8012130:	20006f4c 	.word	0x20006f4c

08012134 <malloc>:
 8012134:	4b02      	ldr	r3, [pc, #8]	; (8012140 <malloc+0xc>)
 8012136:	4601      	mov	r1, r0
 8012138:	6818      	ldr	r0, [r3, #0]
 801213a:	f000 b823 	b.w	8012184 <_malloc_r>
 801213e:	bf00      	nop
 8012140:	200001e0 	.word	0x200001e0

08012144 <sbrk_aligned>:
 8012144:	b570      	push	{r4, r5, r6, lr}
 8012146:	4e0e      	ldr	r6, [pc, #56]	; (8012180 <sbrk_aligned+0x3c>)
 8012148:	460c      	mov	r4, r1
 801214a:	6831      	ldr	r1, [r6, #0]
 801214c:	4605      	mov	r5, r0
 801214e:	b911      	cbnz	r1, 8012156 <sbrk_aligned+0x12>
 8012150:	f000 fe40 	bl	8012dd4 <_sbrk_r>
 8012154:	6030      	str	r0, [r6, #0]
 8012156:	4621      	mov	r1, r4
 8012158:	4628      	mov	r0, r5
 801215a:	f000 fe3b 	bl	8012dd4 <_sbrk_r>
 801215e:	1c43      	adds	r3, r0, #1
 8012160:	d00a      	beq.n	8012178 <sbrk_aligned+0x34>
 8012162:	1cc4      	adds	r4, r0, #3
 8012164:	f024 0403 	bic.w	r4, r4, #3
 8012168:	42a0      	cmp	r0, r4
 801216a:	d007      	beq.n	801217c <sbrk_aligned+0x38>
 801216c:	1a21      	subs	r1, r4, r0
 801216e:	4628      	mov	r0, r5
 8012170:	f000 fe30 	bl	8012dd4 <_sbrk_r>
 8012174:	3001      	adds	r0, #1
 8012176:	d101      	bne.n	801217c <sbrk_aligned+0x38>
 8012178:	f04f 34ff 	mov.w	r4, #4294967295
 801217c:	4620      	mov	r0, r4
 801217e:	bd70      	pop	{r4, r5, r6, pc}
 8012180:	20006f50 	.word	0x20006f50

08012184 <_malloc_r>:
 8012184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012188:	1ccd      	adds	r5, r1, #3
 801218a:	f025 0503 	bic.w	r5, r5, #3
 801218e:	3508      	adds	r5, #8
 8012190:	2d0c      	cmp	r5, #12
 8012192:	bf38      	it	cc
 8012194:	250c      	movcc	r5, #12
 8012196:	2d00      	cmp	r5, #0
 8012198:	4607      	mov	r7, r0
 801219a:	db01      	blt.n	80121a0 <_malloc_r+0x1c>
 801219c:	42a9      	cmp	r1, r5
 801219e:	d905      	bls.n	80121ac <_malloc_r+0x28>
 80121a0:	230c      	movs	r3, #12
 80121a2:	603b      	str	r3, [r7, #0]
 80121a4:	2600      	movs	r6, #0
 80121a6:	4630      	mov	r0, r6
 80121a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012280 <_malloc_r+0xfc>
 80121b0:	f000 f868 	bl	8012284 <__malloc_lock>
 80121b4:	f8d8 3000 	ldr.w	r3, [r8]
 80121b8:	461c      	mov	r4, r3
 80121ba:	bb5c      	cbnz	r4, 8012214 <_malloc_r+0x90>
 80121bc:	4629      	mov	r1, r5
 80121be:	4638      	mov	r0, r7
 80121c0:	f7ff ffc0 	bl	8012144 <sbrk_aligned>
 80121c4:	1c43      	adds	r3, r0, #1
 80121c6:	4604      	mov	r4, r0
 80121c8:	d155      	bne.n	8012276 <_malloc_r+0xf2>
 80121ca:	f8d8 4000 	ldr.w	r4, [r8]
 80121ce:	4626      	mov	r6, r4
 80121d0:	2e00      	cmp	r6, #0
 80121d2:	d145      	bne.n	8012260 <_malloc_r+0xdc>
 80121d4:	2c00      	cmp	r4, #0
 80121d6:	d048      	beq.n	801226a <_malloc_r+0xe6>
 80121d8:	6823      	ldr	r3, [r4, #0]
 80121da:	4631      	mov	r1, r6
 80121dc:	4638      	mov	r0, r7
 80121de:	eb04 0903 	add.w	r9, r4, r3
 80121e2:	f000 fdf7 	bl	8012dd4 <_sbrk_r>
 80121e6:	4581      	cmp	r9, r0
 80121e8:	d13f      	bne.n	801226a <_malloc_r+0xe6>
 80121ea:	6821      	ldr	r1, [r4, #0]
 80121ec:	1a6d      	subs	r5, r5, r1
 80121ee:	4629      	mov	r1, r5
 80121f0:	4638      	mov	r0, r7
 80121f2:	f7ff ffa7 	bl	8012144 <sbrk_aligned>
 80121f6:	3001      	adds	r0, #1
 80121f8:	d037      	beq.n	801226a <_malloc_r+0xe6>
 80121fa:	6823      	ldr	r3, [r4, #0]
 80121fc:	442b      	add	r3, r5
 80121fe:	6023      	str	r3, [r4, #0]
 8012200:	f8d8 3000 	ldr.w	r3, [r8]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d038      	beq.n	801227a <_malloc_r+0xf6>
 8012208:	685a      	ldr	r2, [r3, #4]
 801220a:	42a2      	cmp	r2, r4
 801220c:	d12b      	bne.n	8012266 <_malloc_r+0xe2>
 801220e:	2200      	movs	r2, #0
 8012210:	605a      	str	r2, [r3, #4]
 8012212:	e00f      	b.n	8012234 <_malloc_r+0xb0>
 8012214:	6822      	ldr	r2, [r4, #0]
 8012216:	1b52      	subs	r2, r2, r5
 8012218:	d41f      	bmi.n	801225a <_malloc_r+0xd6>
 801221a:	2a0b      	cmp	r2, #11
 801221c:	d917      	bls.n	801224e <_malloc_r+0xca>
 801221e:	1961      	adds	r1, r4, r5
 8012220:	42a3      	cmp	r3, r4
 8012222:	6025      	str	r5, [r4, #0]
 8012224:	bf18      	it	ne
 8012226:	6059      	strne	r1, [r3, #4]
 8012228:	6863      	ldr	r3, [r4, #4]
 801222a:	bf08      	it	eq
 801222c:	f8c8 1000 	streq.w	r1, [r8]
 8012230:	5162      	str	r2, [r4, r5]
 8012232:	604b      	str	r3, [r1, #4]
 8012234:	4638      	mov	r0, r7
 8012236:	f104 060b 	add.w	r6, r4, #11
 801223a:	f000 f829 	bl	8012290 <__malloc_unlock>
 801223e:	f026 0607 	bic.w	r6, r6, #7
 8012242:	1d23      	adds	r3, r4, #4
 8012244:	1af2      	subs	r2, r6, r3
 8012246:	d0ae      	beq.n	80121a6 <_malloc_r+0x22>
 8012248:	1b9b      	subs	r3, r3, r6
 801224a:	50a3      	str	r3, [r4, r2]
 801224c:	e7ab      	b.n	80121a6 <_malloc_r+0x22>
 801224e:	42a3      	cmp	r3, r4
 8012250:	6862      	ldr	r2, [r4, #4]
 8012252:	d1dd      	bne.n	8012210 <_malloc_r+0x8c>
 8012254:	f8c8 2000 	str.w	r2, [r8]
 8012258:	e7ec      	b.n	8012234 <_malloc_r+0xb0>
 801225a:	4623      	mov	r3, r4
 801225c:	6864      	ldr	r4, [r4, #4]
 801225e:	e7ac      	b.n	80121ba <_malloc_r+0x36>
 8012260:	4634      	mov	r4, r6
 8012262:	6876      	ldr	r6, [r6, #4]
 8012264:	e7b4      	b.n	80121d0 <_malloc_r+0x4c>
 8012266:	4613      	mov	r3, r2
 8012268:	e7cc      	b.n	8012204 <_malloc_r+0x80>
 801226a:	230c      	movs	r3, #12
 801226c:	603b      	str	r3, [r7, #0]
 801226e:	4638      	mov	r0, r7
 8012270:	f000 f80e 	bl	8012290 <__malloc_unlock>
 8012274:	e797      	b.n	80121a6 <_malloc_r+0x22>
 8012276:	6025      	str	r5, [r4, #0]
 8012278:	e7dc      	b.n	8012234 <_malloc_r+0xb0>
 801227a:	605b      	str	r3, [r3, #4]
 801227c:	deff      	udf	#255	; 0xff
 801227e:	bf00      	nop
 8012280:	20006f4c 	.word	0x20006f4c

08012284 <__malloc_lock>:
 8012284:	4801      	ldr	r0, [pc, #4]	; (801228c <__malloc_lock+0x8>)
 8012286:	f7ff b87e 	b.w	8011386 <__retarget_lock_acquire_recursive>
 801228a:	bf00      	nop
 801228c:	20006f48 	.word	0x20006f48

08012290 <__malloc_unlock>:
 8012290:	4801      	ldr	r0, [pc, #4]	; (8012298 <__malloc_unlock+0x8>)
 8012292:	f7ff b879 	b.w	8011388 <__retarget_lock_release_recursive>
 8012296:	bf00      	nop
 8012298:	20006f48 	.word	0x20006f48

0801229c <_Balloc>:
 801229c:	b570      	push	{r4, r5, r6, lr}
 801229e:	69c6      	ldr	r6, [r0, #28]
 80122a0:	4604      	mov	r4, r0
 80122a2:	460d      	mov	r5, r1
 80122a4:	b976      	cbnz	r6, 80122c4 <_Balloc+0x28>
 80122a6:	2010      	movs	r0, #16
 80122a8:	f7ff ff44 	bl	8012134 <malloc>
 80122ac:	4602      	mov	r2, r0
 80122ae:	61e0      	str	r0, [r4, #28]
 80122b0:	b920      	cbnz	r0, 80122bc <_Balloc+0x20>
 80122b2:	4b18      	ldr	r3, [pc, #96]	; (8012314 <_Balloc+0x78>)
 80122b4:	4818      	ldr	r0, [pc, #96]	; (8012318 <_Balloc+0x7c>)
 80122b6:	216b      	movs	r1, #107	; 0x6b
 80122b8:	f000 fd9c 	bl	8012df4 <__assert_func>
 80122bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122c0:	6006      	str	r6, [r0, #0]
 80122c2:	60c6      	str	r6, [r0, #12]
 80122c4:	69e6      	ldr	r6, [r4, #28]
 80122c6:	68f3      	ldr	r3, [r6, #12]
 80122c8:	b183      	cbz	r3, 80122ec <_Balloc+0x50>
 80122ca:	69e3      	ldr	r3, [r4, #28]
 80122cc:	68db      	ldr	r3, [r3, #12]
 80122ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80122d2:	b9b8      	cbnz	r0, 8012304 <_Balloc+0x68>
 80122d4:	2101      	movs	r1, #1
 80122d6:	fa01 f605 	lsl.w	r6, r1, r5
 80122da:	1d72      	adds	r2, r6, #5
 80122dc:	0092      	lsls	r2, r2, #2
 80122de:	4620      	mov	r0, r4
 80122e0:	f000 fda6 	bl	8012e30 <_calloc_r>
 80122e4:	b160      	cbz	r0, 8012300 <_Balloc+0x64>
 80122e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80122ea:	e00e      	b.n	801230a <_Balloc+0x6e>
 80122ec:	2221      	movs	r2, #33	; 0x21
 80122ee:	2104      	movs	r1, #4
 80122f0:	4620      	mov	r0, r4
 80122f2:	f000 fd9d 	bl	8012e30 <_calloc_r>
 80122f6:	69e3      	ldr	r3, [r4, #28]
 80122f8:	60f0      	str	r0, [r6, #12]
 80122fa:	68db      	ldr	r3, [r3, #12]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d1e4      	bne.n	80122ca <_Balloc+0x2e>
 8012300:	2000      	movs	r0, #0
 8012302:	bd70      	pop	{r4, r5, r6, pc}
 8012304:	6802      	ldr	r2, [r0, #0]
 8012306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801230a:	2300      	movs	r3, #0
 801230c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012310:	e7f7      	b.n	8012302 <_Balloc+0x66>
 8012312:	bf00      	nop
 8012314:	0801515d 	.word	0x0801515d
 8012318:	080151dd 	.word	0x080151dd

0801231c <_Bfree>:
 801231c:	b570      	push	{r4, r5, r6, lr}
 801231e:	69c6      	ldr	r6, [r0, #28]
 8012320:	4605      	mov	r5, r0
 8012322:	460c      	mov	r4, r1
 8012324:	b976      	cbnz	r6, 8012344 <_Bfree+0x28>
 8012326:	2010      	movs	r0, #16
 8012328:	f7ff ff04 	bl	8012134 <malloc>
 801232c:	4602      	mov	r2, r0
 801232e:	61e8      	str	r0, [r5, #28]
 8012330:	b920      	cbnz	r0, 801233c <_Bfree+0x20>
 8012332:	4b09      	ldr	r3, [pc, #36]	; (8012358 <_Bfree+0x3c>)
 8012334:	4809      	ldr	r0, [pc, #36]	; (801235c <_Bfree+0x40>)
 8012336:	218f      	movs	r1, #143	; 0x8f
 8012338:	f000 fd5c 	bl	8012df4 <__assert_func>
 801233c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012340:	6006      	str	r6, [r0, #0]
 8012342:	60c6      	str	r6, [r0, #12]
 8012344:	b13c      	cbz	r4, 8012356 <_Bfree+0x3a>
 8012346:	69eb      	ldr	r3, [r5, #28]
 8012348:	6862      	ldr	r2, [r4, #4]
 801234a:	68db      	ldr	r3, [r3, #12]
 801234c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012350:	6021      	str	r1, [r4, #0]
 8012352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012356:	bd70      	pop	{r4, r5, r6, pc}
 8012358:	0801515d 	.word	0x0801515d
 801235c:	080151dd 	.word	0x080151dd

08012360 <__multadd>:
 8012360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012364:	690d      	ldr	r5, [r1, #16]
 8012366:	4607      	mov	r7, r0
 8012368:	460c      	mov	r4, r1
 801236a:	461e      	mov	r6, r3
 801236c:	f101 0c14 	add.w	ip, r1, #20
 8012370:	2000      	movs	r0, #0
 8012372:	f8dc 3000 	ldr.w	r3, [ip]
 8012376:	b299      	uxth	r1, r3
 8012378:	fb02 6101 	mla	r1, r2, r1, r6
 801237c:	0c1e      	lsrs	r6, r3, #16
 801237e:	0c0b      	lsrs	r3, r1, #16
 8012380:	fb02 3306 	mla	r3, r2, r6, r3
 8012384:	b289      	uxth	r1, r1
 8012386:	3001      	adds	r0, #1
 8012388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801238c:	4285      	cmp	r5, r0
 801238e:	f84c 1b04 	str.w	r1, [ip], #4
 8012392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012396:	dcec      	bgt.n	8012372 <__multadd+0x12>
 8012398:	b30e      	cbz	r6, 80123de <__multadd+0x7e>
 801239a:	68a3      	ldr	r3, [r4, #8]
 801239c:	42ab      	cmp	r3, r5
 801239e:	dc19      	bgt.n	80123d4 <__multadd+0x74>
 80123a0:	6861      	ldr	r1, [r4, #4]
 80123a2:	4638      	mov	r0, r7
 80123a4:	3101      	adds	r1, #1
 80123a6:	f7ff ff79 	bl	801229c <_Balloc>
 80123aa:	4680      	mov	r8, r0
 80123ac:	b928      	cbnz	r0, 80123ba <__multadd+0x5a>
 80123ae:	4602      	mov	r2, r0
 80123b0:	4b0c      	ldr	r3, [pc, #48]	; (80123e4 <__multadd+0x84>)
 80123b2:	480d      	ldr	r0, [pc, #52]	; (80123e8 <__multadd+0x88>)
 80123b4:	21ba      	movs	r1, #186	; 0xba
 80123b6:	f000 fd1d 	bl	8012df4 <__assert_func>
 80123ba:	6922      	ldr	r2, [r4, #16]
 80123bc:	3202      	adds	r2, #2
 80123be:	f104 010c 	add.w	r1, r4, #12
 80123c2:	0092      	lsls	r2, r2, #2
 80123c4:	300c      	adds	r0, #12
 80123c6:	f7fe ffe0 	bl	801138a <memcpy>
 80123ca:	4621      	mov	r1, r4
 80123cc:	4638      	mov	r0, r7
 80123ce:	f7ff ffa5 	bl	801231c <_Bfree>
 80123d2:	4644      	mov	r4, r8
 80123d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80123d8:	3501      	adds	r5, #1
 80123da:	615e      	str	r6, [r3, #20]
 80123dc:	6125      	str	r5, [r4, #16]
 80123de:	4620      	mov	r0, r4
 80123e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123e4:	080151cc 	.word	0x080151cc
 80123e8:	080151dd 	.word	0x080151dd

080123ec <__hi0bits>:
 80123ec:	0c03      	lsrs	r3, r0, #16
 80123ee:	041b      	lsls	r3, r3, #16
 80123f0:	b9d3      	cbnz	r3, 8012428 <__hi0bits+0x3c>
 80123f2:	0400      	lsls	r0, r0, #16
 80123f4:	2310      	movs	r3, #16
 80123f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80123fa:	bf04      	itt	eq
 80123fc:	0200      	lsleq	r0, r0, #8
 80123fe:	3308      	addeq	r3, #8
 8012400:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012404:	bf04      	itt	eq
 8012406:	0100      	lsleq	r0, r0, #4
 8012408:	3304      	addeq	r3, #4
 801240a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801240e:	bf04      	itt	eq
 8012410:	0080      	lsleq	r0, r0, #2
 8012412:	3302      	addeq	r3, #2
 8012414:	2800      	cmp	r0, #0
 8012416:	db05      	blt.n	8012424 <__hi0bits+0x38>
 8012418:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801241c:	f103 0301 	add.w	r3, r3, #1
 8012420:	bf08      	it	eq
 8012422:	2320      	moveq	r3, #32
 8012424:	4618      	mov	r0, r3
 8012426:	4770      	bx	lr
 8012428:	2300      	movs	r3, #0
 801242a:	e7e4      	b.n	80123f6 <__hi0bits+0xa>

0801242c <__lo0bits>:
 801242c:	6803      	ldr	r3, [r0, #0]
 801242e:	f013 0207 	ands.w	r2, r3, #7
 8012432:	d00c      	beq.n	801244e <__lo0bits+0x22>
 8012434:	07d9      	lsls	r1, r3, #31
 8012436:	d422      	bmi.n	801247e <__lo0bits+0x52>
 8012438:	079a      	lsls	r2, r3, #30
 801243a:	bf49      	itett	mi
 801243c:	085b      	lsrmi	r3, r3, #1
 801243e:	089b      	lsrpl	r3, r3, #2
 8012440:	6003      	strmi	r3, [r0, #0]
 8012442:	2201      	movmi	r2, #1
 8012444:	bf5c      	itt	pl
 8012446:	6003      	strpl	r3, [r0, #0]
 8012448:	2202      	movpl	r2, #2
 801244a:	4610      	mov	r0, r2
 801244c:	4770      	bx	lr
 801244e:	b299      	uxth	r1, r3
 8012450:	b909      	cbnz	r1, 8012456 <__lo0bits+0x2a>
 8012452:	0c1b      	lsrs	r3, r3, #16
 8012454:	2210      	movs	r2, #16
 8012456:	b2d9      	uxtb	r1, r3
 8012458:	b909      	cbnz	r1, 801245e <__lo0bits+0x32>
 801245a:	3208      	adds	r2, #8
 801245c:	0a1b      	lsrs	r3, r3, #8
 801245e:	0719      	lsls	r1, r3, #28
 8012460:	bf04      	itt	eq
 8012462:	091b      	lsreq	r3, r3, #4
 8012464:	3204      	addeq	r2, #4
 8012466:	0799      	lsls	r1, r3, #30
 8012468:	bf04      	itt	eq
 801246a:	089b      	lsreq	r3, r3, #2
 801246c:	3202      	addeq	r2, #2
 801246e:	07d9      	lsls	r1, r3, #31
 8012470:	d403      	bmi.n	801247a <__lo0bits+0x4e>
 8012472:	085b      	lsrs	r3, r3, #1
 8012474:	f102 0201 	add.w	r2, r2, #1
 8012478:	d003      	beq.n	8012482 <__lo0bits+0x56>
 801247a:	6003      	str	r3, [r0, #0]
 801247c:	e7e5      	b.n	801244a <__lo0bits+0x1e>
 801247e:	2200      	movs	r2, #0
 8012480:	e7e3      	b.n	801244a <__lo0bits+0x1e>
 8012482:	2220      	movs	r2, #32
 8012484:	e7e1      	b.n	801244a <__lo0bits+0x1e>
	...

08012488 <__i2b>:
 8012488:	b510      	push	{r4, lr}
 801248a:	460c      	mov	r4, r1
 801248c:	2101      	movs	r1, #1
 801248e:	f7ff ff05 	bl	801229c <_Balloc>
 8012492:	4602      	mov	r2, r0
 8012494:	b928      	cbnz	r0, 80124a2 <__i2b+0x1a>
 8012496:	4b05      	ldr	r3, [pc, #20]	; (80124ac <__i2b+0x24>)
 8012498:	4805      	ldr	r0, [pc, #20]	; (80124b0 <__i2b+0x28>)
 801249a:	f240 1145 	movw	r1, #325	; 0x145
 801249e:	f000 fca9 	bl	8012df4 <__assert_func>
 80124a2:	2301      	movs	r3, #1
 80124a4:	6144      	str	r4, [r0, #20]
 80124a6:	6103      	str	r3, [r0, #16]
 80124a8:	bd10      	pop	{r4, pc}
 80124aa:	bf00      	nop
 80124ac:	080151cc 	.word	0x080151cc
 80124b0:	080151dd 	.word	0x080151dd

080124b4 <__multiply>:
 80124b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b8:	4691      	mov	r9, r2
 80124ba:	690a      	ldr	r2, [r1, #16]
 80124bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	bfb8      	it	lt
 80124c4:	460b      	movlt	r3, r1
 80124c6:	460c      	mov	r4, r1
 80124c8:	bfbc      	itt	lt
 80124ca:	464c      	movlt	r4, r9
 80124cc:	4699      	movlt	r9, r3
 80124ce:	6927      	ldr	r7, [r4, #16]
 80124d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80124d4:	68a3      	ldr	r3, [r4, #8]
 80124d6:	6861      	ldr	r1, [r4, #4]
 80124d8:	eb07 060a 	add.w	r6, r7, sl
 80124dc:	42b3      	cmp	r3, r6
 80124de:	b085      	sub	sp, #20
 80124e0:	bfb8      	it	lt
 80124e2:	3101      	addlt	r1, #1
 80124e4:	f7ff feda 	bl	801229c <_Balloc>
 80124e8:	b930      	cbnz	r0, 80124f8 <__multiply+0x44>
 80124ea:	4602      	mov	r2, r0
 80124ec:	4b44      	ldr	r3, [pc, #272]	; (8012600 <__multiply+0x14c>)
 80124ee:	4845      	ldr	r0, [pc, #276]	; (8012604 <__multiply+0x150>)
 80124f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80124f4:	f000 fc7e 	bl	8012df4 <__assert_func>
 80124f8:	f100 0514 	add.w	r5, r0, #20
 80124fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012500:	462b      	mov	r3, r5
 8012502:	2200      	movs	r2, #0
 8012504:	4543      	cmp	r3, r8
 8012506:	d321      	bcc.n	801254c <__multiply+0x98>
 8012508:	f104 0314 	add.w	r3, r4, #20
 801250c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012510:	f109 0314 	add.w	r3, r9, #20
 8012514:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012518:	9202      	str	r2, [sp, #8]
 801251a:	1b3a      	subs	r2, r7, r4
 801251c:	3a15      	subs	r2, #21
 801251e:	f022 0203 	bic.w	r2, r2, #3
 8012522:	3204      	adds	r2, #4
 8012524:	f104 0115 	add.w	r1, r4, #21
 8012528:	428f      	cmp	r7, r1
 801252a:	bf38      	it	cc
 801252c:	2204      	movcc	r2, #4
 801252e:	9201      	str	r2, [sp, #4]
 8012530:	9a02      	ldr	r2, [sp, #8]
 8012532:	9303      	str	r3, [sp, #12]
 8012534:	429a      	cmp	r2, r3
 8012536:	d80c      	bhi.n	8012552 <__multiply+0x9e>
 8012538:	2e00      	cmp	r6, #0
 801253a:	dd03      	ble.n	8012544 <__multiply+0x90>
 801253c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012540:	2b00      	cmp	r3, #0
 8012542:	d05b      	beq.n	80125fc <__multiply+0x148>
 8012544:	6106      	str	r6, [r0, #16]
 8012546:	b005      	add	sp, #20
 8012548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801254c:	f843 2b04 	str.w	r2, [r3], #4
 8012550:	e7d8      	b.n	8012504 <__multiply+0x50>
 8012552:	f8b3 a000 	ldrh.w	sl, [r3]
 8012556:	f1ba 0f00 	cmp.w	sl, #0
 801255a:	d024      	beq.n	80125a6 <__multiply+0xf2>
 801255c:	f104 0e14 	add.w	lr, r4, #20
 8012560:	46a9      	mov	r9, r5
 8012562:	f04f 0c00 	mov.w	ip, #0
 8012566:	f85e 2b04 	ldr.w	r2, [lr], #4
 801256a:	f8d9 1000 	ldr.w	r1, [r9]
 801256e:	fa1f fb82 	uxth.w	fp, r2
 8012572:	b289      	uxth	r1, r1
 8012574:	fb0a 110b 	mla	r1, sl, fp, r1
 8012578:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801257c:	f8d9 2000 	ldr.w	r2, [r9]
 8012580:	4461      	add	r1, ip
 8012582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012586:	fb0a c20b 	mla	r2, sl, fp, ip
 801258a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801258e:	b289      	uxth	r1, r1
 8012590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012594:	4577      	cmp	r7, lr
 8012596:	f849 1b04 	str.w	r1, [r9], #4
 801259a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801259e:	d8e2      	bhi.n	8012566 <__multiply+0xb2>
 80125a0:	9a01      	ldr	r2, [sp, #4]
 80125a2:	f845 c002 	str.w	ip, [r5, r2]
 80125a6:	9a03      	ldr	r2, [sp, #12]
 80125a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80125ac:	3304      	adds	r3, #4
 80125ae:	f1b9 0f00 	cmp.w	r9, #0
 80125b2:	d021      	beq.n	80125f8 <__multiply+0x144>
 80125b4:	6829      	ldr	r1, [r5, #0]
 80125b6:	f104 0c14 	add.w	ip, r4, #20
 80125ba:	46ae      	mov	lr, r5
 80125bc:	f04f 0a00 	mov.w	sl, #0
 80125c0:	f8bc b000 	ldrh.w	fp, [ip]
 80125c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80125c8:	fb09 220b 	mla	r2, r9, fp, r2
 80125cc:	4452      	add	r2, sl
 80125ce:	b289      	uxth	r1, r1
 80125d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80125d4:	f84e 1b04 	str.w	r1, [lr], #4
 80125d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80125dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80125e0:	f8be 1000 	ldrh.w	r1, [lr]
 80125e4:	fb09 110a 	mla	r1, r9, sl, r1
 80125e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80125ec:	4567      	cmp	r7, ip
 80125ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80125f2:	d8e5      	bhi.n	80125c0 <__multiply+0x10c>
 80125f4:	9a01      	ldr	r2, [sp, #4]
 80125f6:	50a9      	str	r1, [r5, r2]
 80125f8:	3504      	adds	r5, #4
 80125fa:	e799      	b.n	8012530 <__multiply+0x7c>
 80125fc:	3e01      	subs	r6, #1
 80125fe:	e79b      	b.n	8012538 <__multiply+0x84>
 8012600:	080151cc 	.word	0x080151cc
 8012604:	080151dd 	.word	0x080151dd

08012608 <__pow5mult>:
 8012608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801260c:	4615      	mov	r5, r2
 801260e:	f012 0203 	ands.w	r2, r2, #3
 8012612:	4606      	mov	r6, r0
 8012614:	460f      	mov	r7, r1
 8012616:	d007      	beq.n	8012628 <__pow5mult+0x20>
 8012618:	4c25      	ldr	r4, [pc, #148]	; (80126b0 <__pow5mult+0xa8>)
 801261a:	3a01      	subs	r2, #1
 801261c:	2300      	movs	r3, #0
 801261e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012622:	f7ff fe9d 	bl	8012360 <__multadd>
 8012626:	4607      	mov	r7, r0
 8012628:	10ad      	asrs	r5, r5, #2
 801262a:	d03d      	beq.n	80126a8 <__pow5mult+0xa0>
 801262c:	69f4      	ldr	r4, [r6, #28]
 801262e:	b97c      	cbnz	r4, 8012650 <__pow5mult+0x48>
 8012630:	2010      	movs	r0, #16
 8012632:	f7ff fd7f 	bl	8012134 <malloc>
 8012636:	4602      	mov	r2, r0
 8012638:	61f0      	str	r0, [r6, #28]
 801263a:	b928      	cbnz	r0, 8012648 <__pow5mult+0x40>
 801263c:	4b1d      	ldr	r3, [pc, #116]	; (80126b4 <__pow5mult+0xac>)
 801263e:	481e      	ldr	r0, [pc, #120]	; (80126b8 <__pow5mult+0xb0>)
 8012640:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012644:	f000 fbd6 	bl	8012df4 <__assert_func>
 8012648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801264c:	6004      	str	r4, [r0, #0]
 801264e:	60c4      	str	r4, [r0, #12]
 8012650:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012658:	b94c      	cbnz	r4, 801266e <__pow5mult+0x66>
 801265a:	f240 2171 	movw	r1, #625	; 0x271
 801265e:	4630      	mov	r0, r6
 8012660:	f7ff ff12 	bl	8012488 <__i2b>
 8012664:	2300      	movs	r3, #0
 8012666:	f8c8 0008 	str.w	r0, [r8, #8]
 801266a:	4604      	mov	r4, r0
 801266c:	6003      	str	r3, [r0, #0]
 801266e:	f04f 0900 	mov.w	r9, #0
 8012672:	07eb      	lsls	r3, r5, #31
 8012674:	d50a      	bpl.n	801268c <__pow5mult+0x84>
 8012676:	4639      	mov	r1, r7
 8012678:	4622      	mov	r2, r4
 801267a:	4630      	mov	r0, r6
 801267c:	f7ff ff1a 	bl	80124b4 <__multiply>
 8012680:	4639      	mov	r1, r7
 8012682:	4680      	mov	r8, r0
 8012684:	4630      	mov	r0, r6
 8012686:	f7ff fe49 	bl	801231c <_Bfree>
 801268a:	4647      	mov	r7, r8
 801268c:	106d      	asrs	r5, r5, #1
 801268e:	d00b      	beq.n	80126a8 <__pow5mult+0xa0>
 8012690:	6820      	ldr	r0, [r4, #0]
 8012692:	b938      	cbnz	r0, 80126a4 <__pow5mult+0x9c>
 8012694:	4622      	mov	r2, r4
 8012696:	4621      	mov	r1, r4
 8012698:	4630      	mov	r0, r6
 801269a:	f7ff ff0b 	bl	80124b4 <__multiply>
 801269e:	6020      	str	r0, [r4, #0]
 80126a0:	f8c0 9000 	str.w	r9, [r0]
 80126a4:	4604      	mov	r4, r0
 80126a6:	e7e4      	b.n	8012672 <__pow5mult+0x6a>
 80126a8:	4638      	mov	r0, r7
 80126aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ae:	bf00      	nop
 80126b0:	08015328 	.word	0x08015328
 80126b4:	0801515d 	.word	0x0801515d
 80126b8:	080151dd 	.word	0x080151dd

080126bc <__lshift>:
 80126bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126c0:	460c      	mov	r4, r1
 80126c2:	6849      	ldr	r1, [r1, #4]
 80126c4:	6923      	ldr	r3, [r4, #16]
 80126c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80126ca:	68a3      	ldr	r3, [r4, #8]
 80126cc:	4607      	mov	r7, r0
 80126ce:	4691      	mov	r9, r2
 80126d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126d4:	f108 0601 	add.w	r6, r8, #1
 80126d8:	42b3      	cmp	r3, r6
 80126da:	db0b      	blt.n	80126f4 <__lshift+0x38>
 80126dc:	4638      	mov	r0, r7
 80126de:	f7ff fddd 	bl	801229c <_Balloc>
 80126e2:	4605      	mov	r5, r0
 80126e4:	b948      	cbnz	r0, 80126fa <__lshift+0x3e>
 80126e6:	4602      	mov	r2, r0
 80126e8:	4b28      	ldr	r3, [pc, #160]	; (801278c <__lshift+0xd0>)
 80126ea:	4829      	ldr	r0, [pc, #164]	; (8012790 <__lshift+0xd4>)
 80126ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80126f0:	f000 fb80 	bl	8012df4 <__assert_func>
 80126f4:	3101      	adds	r1, #1
 80126f6:	005b      	lsls	r3, r3, #1
 80126f8:	e7ee      	b.n	80126d8 <__lshift+0x1c>
 80126fa:	2300      	movs	r3, #0
 80126fc:	f100 0114 	add.w	r1, r0, #20
 8012700:	f100 0210 	add.w	r2, r0, #16
 8012704:	4618      	mov	r0, r3
 8012706:	4553      	cmp	r3, sl
 8012708:	db33      	blt.n	8012772 <__lshift+0xb6>
 801270a:	6920      	ldr	r0, [r4, #16]
 801270c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012710:	f104 0314 	add.w	r3, r4, #20
 8012714:	f019 091f 	ands.w	r9, r9, #31
 8012718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801271c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012720:	d02b      	beq.n	801277a <__lshift+0xbe>
 8012722:	f1c9 0e20 	rsb	lr, r9, #32
 8012726:	468a      	mov	sl, r1
 8012728:	2200      	movs	r2, #0
 801272a:	6818      	ldr	r0, [r3, #0]
 801272c:	fa00 f009 	lsl.w	r0, r0, r9
 8012730:	4310      	orrs	r0, r2
 8012732:	f84a 0b04 	str.w	r0, [sl], #4
 8012736:	f853 2b04 	ldr.w	r2, [r3], #4
 801273a:	459c      	cmp	ip, r3
 801273c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012740:	d8f3      	bhi.n	801272a <__lshift+0x6e>
 8012742:	ebac 0304 	sub.w	r3, ip, r4
 8012746:	3b15      	subs	r3, #21
 8012748:	f023 0303 	bic.w	r3, r3, #3
 801274c:	3304      	adds	r3, #4
 801274e:	f104 0015 	add.w	r0, r4, #21
 8012752:	4584      	cmp	ip, r0
 8012754:	bf38      	it	cc
 8012756:	2304      	movcc	r3, #4
 8012758:	50ca      	str	r2, [r1, r3]
 801275a:	b10a      	cbz	r2, 8012760 <__lshift+0xa4>
 801275c:	f108 0602 	add.w	r6, r8, #2
 8012760:	3e01      	subs	r6, #1
 8012762:	4638      	mov	r0, r7
 8012764:	612e      	str	r6, [r5, #16]
 8012766:	4621      	mov	r1, r4
 8012768:	f7ff fdd8 	bl	801231c <_Bfree>
 801276c:	4628      	mov	r0, r5
 801276e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012772:	f842 0f04 	str.w	r0, [r2, #4]!
 8012776:	3301      	adds	r3, #1
 8012778:	e7c5      	b.n	8012706 <__lshift+0x4a>
 801277a:	3904      	subs	r1, #4
 801277c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012780:	f841 2f04 	str.w	r2, [r1, #4]!
 8012784:	459c      	cmp	ip, r3
 8012786:	d8f9      	bhi.n	801277c <__lshift+0xc0>
 8012788:	e7ea      	b.n	8012760 <__lshift+0xa4>
 801278a:	bf00      	nop
 801278c:	080151cc 	.word	0x080151cc
 8012790:	080151dd 	.word	0x080151dd

08012794 <__mcmp>:
 8012794:	b530      	push	{r4, r5, lr}
 8012796:	6902      	ldr	r2, [r0, #16]
 8012798:	690c      	ldr	r4, [r1, #16]
 801279a:	1b12      	subs	r2, r2, r4
 801279c:	d10e      	bne.n	80127bc <__mcmp+0x28>
 801279e:	f100 0314 	add.w	r3, r0, #20
 80127a2:	3114      	adds	r1, #20
 80127a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80127a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80127ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80127b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80127b4:	42a5      	cmp	r5, r4
 80127b6:	d003      	beq.n	80127c0 <__mcmp+0x2c>
 80127b8:	d305      	bcc.n	80127c6 <__mcmp+0x32>
 80127ba:	2201      	movs	r2, #1
 80127bc:	4610      	mov	r0, r2
 80127be:	bd30      	pop	{r4, r5, pc}
 80127c0:	4283      	cmp	r3, r0
 80127c2:	d3f3      	bcc.n	80127ac <__mcmp+0x18>
 80127c4:	e7fa      	b.n	80127bc <__mcmp+0x28>
 80127c6:	f04f 32ff 	mov.w	r2, #4294967295
 80127ca:	e7f7      	b.n	80127bc <__mcmp+0x28>

080127cc <__mdiff>:
 80127cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d0:	460c      	mov	r4, r1
 80127d2:	4606      	mov	r6, r0
 80127d4:	4611      	mov	r1, r2
 80127d6:	4620      	mov	r0, r4
 80127d8:	4690      	mov	r8, r2
 80127da:	f7ff ffdb 	bl	8012794 <__mcmp>
 80127de:	1e05      	subs	r5, r0, #0
 80127e0:	d110      	bne.n	8012804 <__mdiff+0x38>
 80127e2:	4629      	mov	r1, r5
 80127e4:	4630      	mov	r0, r6
 80127e6:	f7ff fd59 	bl	801229c <_Balloc>
 80127ea:	b930      	cbnz	r0, 80127fa <__mdiff+0x2e>
 80127ec:	4b3a      	ldr	r3, [pc, #232]	; (80128d8 <__mdiff+0x10c>)
 80127ee:	4602      	mov	r2, r0
 80127f0:	f240 2137 	movw	r1, #567	; 0x237
 80127f4:	4839      	ldr	r0, [pc, #228]	; (80128dc <__mdiff+0x110>)
 80127f6:	f000 fafd 	bl	8012df4 <__assert_func>
 80127fa:	2301      	movs	r3, #1
 80127fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012804:	bfa4      	itt	ge
 8012806:	4643      	movge	r3, r8
 8012808:	46a0      	movge	r8, r4
 801280a:	4630      	mov	r0, r6
 801280c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012810:	bfa6      	itte	ge
 8012812:	461c      	movge	r4, r3
 8012814:	2500      	movge	r5, #0
 8012816:	2501      	movlt	r5, #1
 8012818:	f7ff fd40 	bl	801229c <_Balloc>
 801281c:	b920      	cbnz	r0, 8012828 <__mdiff+0x5c>
 801281e:	4b2e      	ldr	r3, [pc, #184]	; (80128d8 <__mdiff+0x10c>)
 8012820:	4602      	mov	r2, r0
 8012822:	f240 2145 	movw	r1, #581	; 0x245
 8012826:	e7e5      	b.n	80127f4 <__mdiff+0x28>
 8012828:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801282c:	6926      	ldr	r6, [r4, #16]
 801282e:	60c5      	str	r5, [r0, #12]
 8012830:	f104 0914 	add.w	r9, r4, #20
 8012834:	f108 0514 	add.w	r5, r8, #20
 8012838:	f100 0e14 	add.w	lr, r0, #20
 801283c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012840:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012844:	f108 0210 	add.w	r2, r8, #16
 8012848:	46f2      	mov	sl, lr
 801284a:	2100      	movs	r1, #0
 801284c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012850:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012854:	fa11 f88b 	uxtah	r8, r1, fp
 8012858:	b299      	uxth	r1, r3
 801285a:	0c1b      	lsrs	r3, r3, #16
 801285c:	eba8 0801 	sub.w	r8, r8, r1
 8012860:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012864:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012868:	fa1f f888 	uxth.w	r8, r8
 801286c:	1419      	asrs	r1, r3, #16
 801286e:	454e      	cmp	r6, r9
 8012870:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012874:	f84a 3b04 	str.w	r3, [sl], #4
 8012878:	d8e8      	bhi.n	801284c <__mdiff+0x80>
 801287a:	1b33      	subs	r3, r6, r4
 801287c:	3b15      	subs	r3, #21
 801287e:	f023 0303 	bic.w	r3, r3, #3
 8012882:	3304      	adds	r3, #4
 8012884:	3415      	adds	r4, #21
 8012886:	42a6      	cmp	r6, r4
 8012888:	bf38      	it	cc
 801288a:	2304      	movcc	r3, #4
 801288c:	441d      	add	r5, r3
 801288e:	4473      	add	r3, lr
 8012890:	469e      	mov	lr, r3
 8012892:	462e      	mov	r6, r5
 8012894:	4566      	cmp	r6, ip
 8012896:	d30e      	bcc.n	80128b6 <__mdiff+0xea>
 8012898:	f10c 0203 	add.w	r2, ip, #3
 801289c:	1b52      	subs	r2, r2, r5
 801289e:	f022 0203 	bic.w	r2, r2, #3
 80128a2:	3d03      	subs	r5, #3
 80128a4:	45ac      	cmp	ip, r5
 80128a6:	bf38      	it	cc
 80128a8:	2200      	movcc	r2, #0
 80128aa:	4413      	add	r3, r2
 80128ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80128b0:	b17a      	cbz	r2, 80128d2 <__mdiff+0x106>
 80128b2:	6107      	str	r7, [r0, #16]
 80128b4:	e7a4      	b.n	8012800 <__mdiff+0x34>
 80128b6:	f856 8b04 	ldr.w	r8, [r6], #4
 80128ba:	fa11 f288 	uxtah	r2, r1, r8
 80128be:	1414      	asrs	r4, r2, #16
 80128c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80128c4:	b292      	uxth	r2, r2
 80128c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80128ca:	f84e 2b04 	str.w	r2, [lr], #4
 80128ce:	1421      	asrs	r1, r4, #16
 80128d0:	e7e0      	b.n	8012894 <__mdiff+0xc8>
 80128d2:	3f01      	subs	r7, #1
 80128d4:	e7ea      	b.n	80128ac <__mdiff+0xe0>
 80128d6:	bf00      	nop
 80128d8:	080151cc 	.word	0x080151cc
 80128dc:	080151dd 	.word	0x080151dd

080128e0 <__d2b>:
 80128e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80128e4:	460f      	mov	r7, r1
 80128e6:	2101      	movs	r1, #1
 80128e8:	ec59 8b10 	vmov	r8, r9, d0
 80128ec:	4616      	mov	r6, r2
 80128ee:	f7ff fcd5 	bl	801229c <_Balloc>
 80128f2:	4604      	mov	r4, r0
 80128f4:	b930      	cbnz	r0, 8012904 <__d2b+0x24>
 80128f6:	4602      	mov	r2, r0
 80128f8:	4b24      	ldr	r3, [pc, #144]	; (801298c <__d2b+0xac>)
 80128fa:	4825      	ldr	r0, [pc, #148]	; (8012990 <__d2b+0xb0>)
 80128fc:	f240 310f 	movw	r1, #783	; 0x30f
 8012900:	f000 fa78 	bl	8012df4 <__assert_func>
 8012904:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801290c:	bb2d      	cbnz	r5, 801295a <__d2b+0x7a>
 801290e:	9301      	str	r3, [sp, #4]
 8012910:	f1b8 0300 	subs.w	r3, r8, #0
 8012914:	d026      	beq.n	8012964 <__d2b+0x84>
 8012916:	4668      	mov	r0, sp
 8012918:	9300      	str	r3, [sp, #0]
 801291a:	f7ff fd87 	bl	801242c <__lo0bits>
 801291e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012922:	b1e8      	cbz	r0, 8012960 <__d2b+0x80>
 8012924:	f1c0 0320 	rsb	r3, r0, #32
 8012928:	fa02 f303 	lsl.w	r3, r2, r3
 801292c:	430b      	orrs	r3, r1
 801292e:	40c2      	lsrs	r2, r0
 8012930:	6163      	str	r3, [r4, #20]
 8012932:	9201      	str	r2, [sp, #4]
 8012934:	9b01      	ldr	r3, [sp, #4]
 8012936:	61a3      	str	r3, [r4, #24]
 8012938:	2b00      	cmp	r3, #0
 801293a:	bf14      	ite	ne
 801293c:	2202      	movne	r2, #2
 801293e:	2201      	moveq	r2, #1
 8012940:	6122      	str	r2, [r4, #16]
 8012942:	b1bd      	cbz	r5, 8012974 <__d2b+0x94>
 8012944:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012948:	4405      	add	r5, r0
 801294a:	603d      	str	r5, [r7, #0]
 801294c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012950:	6030      	str	r0, [r6, #0]
 8012952:	4620      	mov	r0, r4
 8012954:	b003      	add	sp, #12
 8012956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801295a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801295e:	e7d6      	b.n	801290e <__d2b+0x2e>
 8012960:	6161      	str	r1, [r4, #20]
 8012962:	e7e7      	b.n	8012934 <__d2b+0x54>
 8012964:	a801      	add	r0, sp, #4
 8012966:	f7ff fd61 	bl	801242c <__lo0bits>
 801296a:	9b01      	ldr	r3, [sp, #4]
 801296c:	6163      	str	r3, [r4, #20]
 801296e:	3020      	adds	r0, #32
 8012970:	2201      	movs	r2, #1
 8012972:	e7e5      	b.n	8012940 <__d2b+0x60>
 8012974:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801297c:	6038      	str	r0, [r7, #0]
 801297e:	6918      	ldr	r0, [r3, #16]
 8012980:	f7ff fd34 	bl	80123ec <__hi0bits>
 8012984:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012988:	e7e2      	b.n	8012950 <__d2b+0x70>
 801298a:	bf00      	nop
 801298c:	080151cc 	.word	0x080151cc
 8012990:	080151dd 	.word	0x080151dd

08012994 <__ssputs_r>:
 8012994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012998:	688e      	ldr	r6, [r1, #8]
 801299a:	461f      	mov	r7, r3
 801299c:	42be      	cmp	r6, r7
 801299e:	680b      	ldr	r3, [r1, #0]
 80129a0:	4682      	mov	sl, r0
 80129a2:	460c      	mov	r4, r1
 80129a4:	4690      	mov	r8, r2
 80129a6:	d82c      	bhi.n	8012a02 <__ssputs_r+0x6e>
 80129a8:	898a      	ldrh	r2, [r1, #12]
 80129aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80129ae:	d026      	beq.n	80129fe <__ssputs_r+0x6a>
 80129b0:	6965      	ldr	r5, [r4, #20]
 80129b2:	6909      	ldr	r1, [r1, #16]
 80129b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80129b8:	eba3 0901 	sub.w	r9, r3, r1
 80129bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80129c0:	1c7b      	adds	r3, r7, #1
 80129c2:	444b      	add	r3, r9
 80129c4:	106d      	asrs	r5, r5, #1
 80129c6:	429d      	cmp	r5, r3
 80129c8:	bf38      	it	cc
 80129ca:	461d      	movcc	r5, r3
 80129cc:	0553      	lsls	r3, r2, #21
 80129ce:	d527      	bpl.n	8012a20 <__ssputs_r+0x8c>
 80129d0:	4629      	mov	r1, r5
 80129d2:	f7ff fbd7 	bl	8012184 <_malloc_r>
 80129d6:	4606      	mov	r6, r0
 80129d8:	b360      	cbz	r0, 8012a34 <__ssputs_r+0xa0>
 80129da:	6921      	ldr	r1, [r4, #16]
 80129dc:	464a      	mov	r2, r9
 80129de:	f7fe fcd4 	bl	801138a <memcpy>
 80129e2:	89a3      	ldrh	r3, [r4, #12]
 80129e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80129e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129ec:	81a3      	strh	r3, [r4, #12]
 80129ee:	6126      	str	r6, [r4, #16]
 80129f0:	6165      	str	r5, [r4, #20]
 80129f2:	444e      	add	r6, r9
 80129f4:	eba5 0509 	sub.w	r5, r5, r9
 80129f8:	6026      	str	r6, [r4, #0]
 80129fa:	60a5      	str	r5, [r4, #8]
 80129fc:	463e      	mov	r6, r7
 80129fe:	42be      	cmp	r6, r7
 8012a00:	d900      	bls.n	8012a04 <__ssputs_r+0x70>
 8012a02:	463e      	mov	r6, r7
 8012a04:	6820      	ldr	r0, [r4, #0]
 8012a06:	4632      	mov	r2, r6
 8012a08:	4641      	mov	r1, r8
 8012a0a:	f000 f9c9 	bl	8012da0 <memmove>
 8012a0e:	68a3      	ldr	r3, [r4, #8]
 8012a10:	1b9b      	subs	r3, r3, r6
 8012a12:	60a3      	str	r3, [r4, #8]
 8012a14:	6823      	ldr	r3, [r4, #0]
 8012a16:	4433      	add	r3, r6
 8012a18:	6023      	str	r3, [r4, #0]
 8012a1a:	2000      	movs	r0, #0
 8012a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a20:	462a      	mov	r2, r5
 8012a22:	f000 fa2d 	bl	8012e80 <_realloc_r>
 8012a26:	4606      	mov	r6, r0
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	d1e0      	bne.n	80129ee <__ssputs_r+0x5a>
 8012a2c:	6921      	ldr	r1, [r4, #16]
 8012a2e:	4650      	mov	r0, sl
 8012a30:	f7ff fb34 	bl	801209c <_free_r>
 8012a34:	230c      	movs	r3, #12
 8012a36:	f8ca 3000 	str.w	r3, [sl]
 8012a3a:	89a3      	ldrh	r3, [r4, #12]
 8012a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a40:	81a3      	strh	r3, [r4, #12]
 8012a42:	f04f 30ff 	mov.w	r0, #4294967295
 8012a46:	e7e9      	b.n	8012a1c <__ssputs_r+0x88>

08012a48 <_svfiprintf_r>:
 8012a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a4c:	4698      	mov	r8, r3
 8012a4e:	898b      	ldrh	r3, [r1, #12]
 8012a50:	061b      	lsls	r3, r3, #24
 8012a52:	b09d      	sub	sp, #116	; 0x74
 8012a54:	4607      	mov	r7, r0
 8012a56:	460d      	mov	r5, r1
 8012a58:	4614      	mov	r4, r2
 8012a5a:	d50e      	bpl.n	8012a7a <_svfiprintf_r+0x32>
 8012a5c:	690b      	ldr	r3, [r1, #16]
 8012a5e:	b963      	cbnz	r3, 8012a7a <_svfiprintf_r+0x32>
 8012a60:	2140      	movs	r1, #64	; 0x40
 8012a62:	f7ff fb8f 	bl	8012184 <_malloc_r>
 8012a66:	6028      	str	r0, [r5, #0]
 8012a68:	6128      	str	r0, [r5, #16]
 8012a6a:	b920      	cbnz	r0, 8012a76 <_svfiprintf_r+0x2e>
 8012a6c:	230c      	movs	r3, #12
 8012a6e:	603b      	str	r3, [r7, #0]
 8012a70:	f04f 30ff 	mov.w	r0, #4294967295
 8012a74:	e0d0      	b.n	8012c18 <_svfiprintf_r+0x1d0>
 8012a76:	2340      	movs	r3, #64	; 0x40
 8012a78:	616b      	str	r3, [r5, #20]
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8012a7e:	2320      	movs	r3, #32
 8012a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a88:	2330      	movs	r3, #48	; 0x30
 8012a8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012c30 <_svfiprintf_r+0x1e8>
 8012a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a92:	f04f 0901 	mov.w	r9, #1
 8012a96:	4623      	mov	r3, r4
 8012a98:	469a      	mov	sl, r3
 8012a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a9e:	b10a      	cbz	r2, 8012aa4 <_svfiprintf_r+0x5c>
 8012aa0:	2a25      	cmp	r2, #37	; 0x25
 8012aa2:	d1f9      	bne.n	8012a98 <_svfiprintf_r+0x50>
 8012aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8012aa8:	d00b      	beq.n	8012ac2 <_svfiprintf_r+0x7a>
 8012aaa:	465b      	mov	r3, fp
 8012aac:	4622      	mov	r2, r4
 8012aae:	4629      	mov	r1, r5
 8012ab0:	4638      	mov	r0, r7
 8012ab2:	f7ff ff6f 	bl	8012994 <__ssputs_r>
 8012ab6:	3001      	adds	r0, #1
 8012ab8:	f000 80a9 	beq.w	8012c0e <_svfiprintf_r+0x1c6>
 8012abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012abe:	445a      	add	r2, fp
 8012ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8012ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f000 80a1 	beq.w	8012c0e <_svfiprintf_r+0x1c6>
 8012acc:	2300      	movs	r3, #0
 8012ace:	f04f 32ff 	mov.w	r2, #4294967295
 8012ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ad6:	f10a 0a01 	add.w	sl, sl, #1
 8012ada:	9304      	str	r3, [sp, #16]
 8012adc:	9307      	str	r3, [sp, #28]
 8012ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8012ae4:	4654      	mov	r4, sl
 8012ae6:	2205      	movs	r2, #5
 8012ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aec:	4850      	ldr	r0, [pc, #320]	; (8012c30 <_svfiprintf_r+0x1e8>)
 8012aee:	f7ed fb7f 	bl	80001f0 <memchr>
 8012af2:	9a04      	ldr	r2, [sp, #16]
 8012af4:	b9d8      	cbnz	r0, 8012b2e <_svfiprintf_r+0xe6>
 8012af6:	06d0      	lsls	r0, r2, #27
 8012af8:	bf44      	itt	mi
 8012afa:	2320      	movmi	r3, #32
 8012afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b00:	0711      	lsls	r1, r2, #28
 8012b02:	bf44      	itt	mi
 8012b04:	232b      	movmi	r3, #43	; 0x2b
 8012b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8012b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8012b10:	d015      	beq.n	8012b3e <_svfiprintf_r+0xf6>
 8012b12:	9a07      	ldr	r2, [sp, #28]
 8012b14:	4654      	mov	r4, sl
 8012b16:	2000      	movs	r0, #0
 8012b18:	f04f 0c0a 	mov.w	ip, #10
 8012b1c:	4621      	mov	r1, r4
 8012b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b22:	3b30      	subs	r3, #48	; 0x30
 8012b24:	2b09      	cmp	r3, #9
 8012b26:	d94d      	bls.n	8012bc4 <_svfiprintf_r+0x17c>
 8012b28:	b1b0      	cbz	r0, 8012b58 <_svfiprintf_r+0x110>
 8012b2a:	9207      	str	r2, [sp, #28]
 8012b2c:	e014      	b.n	8012b58 <_svfiprintf_r+0x110>
 8012b2e:	eba0 0308 	sub.w	r3, r0, r8
 8012b32:	fa09 f303 	lsl.w	r3, r9, r3
 8012b36:	4313      	orrs	r3, r2
 8012b38:	9304      	str	r3, [sp, #16]
 8012b3a:	46a2      	mov	sl, r4
 8012b3c:	e7d2      	b.n	8012ae4 <_svfiprintf_r+0x9c>
 8012b3e:	9b03      	ldr	r3, [sp, #12]
 8012b40:	1d19      	adds	r1, r3, #4
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	9103      	str	r1, [sp, #12]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	bfbb      	ittet	lt
 8012b4a:	425b      	neglt	r3, r3
 8012b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8012b50:	9307      	strge	r3, [sp, #28]
 8012b52:	9307      	strlt	r3, [sp, #28]
 8012b54:	bfb8      	it	lt
 8012b56:	9204      	strlt	r2, [sp, #16]
 8012b58:	7823      	ldrb	r3, [r4, #0]
 8012b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8012b5c:	d10c      	bne.n	8012b78 <_svfiprintf_r+0x130>
 8012b5e:	7863      	ldrb	r3, [r4, #1]
 8012b60:	2b2a      	cmp	r3, #42	; 0x2a
 8012b62:	d134      	bne.n	8012bce <_svfiprintf_r+0x186>
 8012b64:	9b03      	ldr	r3, [sp, #12]
 8012b66:	1d1a      	adds	r2, r3, #4
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	9203      	str	r2, [sp, #12]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	bfb8      	it	lt
 8012b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b74:	3402      	adds	r4, #2
 8012b76:	9305      	str	r3, [sp, #20]
 8012b78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012c40 <_svfiprintf_r+0x1f8>
 8012b7c:	7821      	ldrb	r1, [r4, #0]
 8012b7e:	2203      	movs	r2, #3
 8012b80:	4650      	mov	r0, sl
 8012b82:	f7ed fb35 	bl	80001f0 <memchr>
 8012b86:	b138      	cbz	r0, 8012b98 <_svfiprintf_r+0x150>
 8012b88:	9b04      	ldr	r3, [sp, #16]
 8012b8a:	eba0 000a 	sub.w	r0, r0, sl
 8012b8e:	2240      	movs	r2, #64	; 0x40
 8012b90:	4082      	lsls	r2, r0
 8012b92:	4313      	orrs	r3, r2
 8012b94:	3401      	adds	r4, #1
 8012b96:	9304      	str	r3, [sp, #16]
 8012b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b9c:	4825      	ldr	r0, [pc, #148]	; (8012c34 <_svfiprintf_r+0x1ec>)
 8012b9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ba2:	2206      	movs	r2, #6
 8012ba4:	f7ed fb24 	bl	80001f0 <memchr>
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	d038      	beq.n	8012c1e <_svfiprintf_r+0x1d6>
 8012bac:	4b22      	ldr	r3, [pc, #136]	; (8012c38 <_svfiprintf_r+0x1f0>)
 8012bae:	bb1b      	cbnz	r3, 8012bf8 <_svfiprintf_r+0x1b0>
 8012bb0:	9b03      	ldr	r3, [sp, #12]
 8012bb2:	3307      	adds	r3, #7
 8012bb4:	f023 0307 	bic.w	r3, r3, #7
 8012bb8:	3308      	adds	r3, #8
 8012bba:	9303      	str	r3, [sp, #12]
 8012bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bbe:	4433      	add	r3, r6
 8012bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8012bc2:	e768      	b.n	8012a96 <_svfiprintf_r+0x4e>
 8012bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8012bc8:	460c      	mov	r4, r1
 8012bca:	2001      	movs	r0, #1
 8012bcc:	e7a6      	b.n	8012b1c <_svfiprintf_r+0xd4>
 8012bce:	2300      	movs	r3, #0
 8012bd0:	3401      	adds	r4, #1
 8012bd2:	9305      	str	r3, [sp, #20]
 8012bd4:	4619      	mov	r1, r3
 8012bd6:	f04f 0c0a 	mov.w	ip, #10
 8012bda:	4620      	mov	r0, r4
 8012bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012be0:	3a30      	subs	r2, #48	; 0x30
 8012be2:	2a09      	cmp	r2, #9
 8012be4:	d903      	bls.n	8012bee <_svfiprintf_r+0x1a6>
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d0c6      	beq.n	8012b78 <_svfiprintf_r+0x130>
 8012bea:	9105      	str	r1, [sp, #20]
 8012bec:	e7c4      	b.n	8012b78 <_svfiprintf_r+0x130>
 8012bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8012bf2:	4604      	mov	r4, r0
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	e7f0      	b.n	8012bda <_svfiprintf_r+0x192>
 8012bf8:	ab03      	add	r3, sp, #12
 8012bfa:	9300      	str	r3, [sp, #0]
 8012bfc:	462a      	mov	r2, r5
 8012bfe:	4b0f      	ldr	r3, [pc, #60]	; (8012c3c <_svfiprintf_r+0x1f4>)
 8012c00:	a904      	add	r1, sp, #16
 8012c02:	4638      	mov	r0, r7
 8012c04:	f7fd fe56 	bl	80108b4 <_printf_float>
 8012c08:	1c42      	adds	r2, r0, #1
 8012c0a:	4606      	mov	r6, r0
 8012c0c:	d1d6      	bne.n	8012bbc <_svfiprintf_r+0x174>
 8012c0e:	89ab      	ldrh	r3, [r5, #12]
 8012c10:	065b      	lsls	r3, r3, #25
 8012c12:	f53f af2d 	bmi.w	8012a70 <_svfiprintf_r+0x28>
 8012c16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c18:	b01d      	add	sp, #116	; 0x74
 8012c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c1e:	ab03      	add	r3, sp, #12
 8012c20:	9300      	str	r3, [sp, #0]
 8012c22:	462a      	mov	r2, r5
 8012c24:	4b05      	ldr	r3, [pc, #20]	; (8012c3c <_svfiprintf_r+0x1f4>)
 8012c26:	a904      	add	r1, sp, #16
 8012c28:	4638      	mov	r0, r7
 8012c2a:	f7fe f8e7 	bl	8010dfc <_printf_i>
 8012c2e:	e7eb      	b.n	8012c08 <_svfiprintf_r+0x1c0>
 8012c30:	08015334 	.word	0x08015334
 8012c34:	0801533e 	.word	0x0801533e
 8012c38:	080108b5 	.word	0x080108b5
 8012c3c:	08012995 	.word	0x08012995
 8012c40:	0801533a 	.word	0x0801533a

08012c44 <__sflush_r>:
 8012c44:	898a      	ldrh	r2, [r1, #12]
 8012c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c4a:	4605      	mov	r5, r0
 8012c4c:	0710      	lsls	r0, r2, #28
 8012c4e:	460c      	mov	r4, r1
 8012c50:	d458      	bmi.n	8012d04 <__sflush_r+0xc0>
 8012c52:	684b      	ldr	r3, [r1, #4]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	dc05      	bgt.n	8012c64 <__sflush_r+0x20>
 8012c58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	dc02      	bgt.n	8012c64 <__sflush_r+0x20>
 8012c5e:	2000      	movs	r0, #0
 8012c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c66:	2e00      	cmp	r6, #0
 8012c68:	d0f9      	beq.n	8012c5e <__sflush_r+0x1a>
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012c70:	682f      	ldr	r7, [r5, #0]
 8012c72:	6a21      	ldr	r1, [r4, #32]
 8012c74:	602b      	str	r3, [r5, #0]
 8012c76:	d032      	beq.n	8012cde <__sflush_r+0x9a>
 8012c78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c7a:	89a3      	ldrh	r3, [r4, #12]
 8012c7c:	075a      	lsls	r2, r3, #29
 8012c7e:	d505      	bpl.n	8012c8c <__sflush_r+0x48>
 8012c80:	6863      	ldr	r3, [r4, #4]
 8012c82:	1ac0      	subs	r0, r0, r3
 8012c84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c86:	b10b      	cbz	r3, 8012c8c <__sflush_r+0x48>
 8012c88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c8a:	1ac0      	subs	r0, r0, r3
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	4602      	mov	r2, r0
 8012c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c92:	6a21      	ldr	r1, [r4, #32]
 8012c94:	4628      	mov	r0, r5
 8012c96:	47b0      	blx	r6
 8012c98:	1c43      	adds	r3, r0, #1
 8012c9a:	89a3      	ldrh	r3, [r4, #12]
 8012c9c:	d106      	bne.n	8012cac <__sflush_r+0x68>
 8012c9e:	6829      	ldr	r1, [r5, #0]
 8012ca0:	291d      	cmp	r1, #29
 8012ca2:	d82b      	bhi.n	8012cfc <__sflush_r+0xb8>
 8012ca4:	4a29      	ldr	r2, [pc, #164]	; (8012d4c <__sflush_r+0x108>)
 8012ca6:	410a      	asrs	r2, r1
 8012ca8:	07d6      	lsls	r6, r2, #31
 8012caa:	d427      	bmi.n	8012cfc <__sflush_r+0xb8>
 8012cac:	2200      	movs	r2, #0
 8012cae:	6062      	str	r2, [r4, #4]
 8012cb0:	04d9      	lsls	r1, r3, #19
 8012cb2:	6922      	ldr	r2, [r4, #16]
 8012cb4:	6022      	str	r2, [r4, #0]
 8012cb6:	d504      	bpl.n	8012cc2 <__sflush_r+0x7e>
 8012cb8:	1c42      	adds	r2, r0, #1
 8012cba:	d101      	bne.n	8012cc0 <__sflush_r+0x7c>
 8012cbc:	682b      	ldr	r3, [r5, #0]
 8012cbe:	b903      	cbnz	r3, 8012cc2 <__sflush_r+0x7e>
 8012cc0:	6560      	str	r0, [r4, #84]	; 0x54
 8012cc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cc4:	602f      	str	r7, [r5, #0]
 8012cc6:	2900      	cmp	r1, #0
 8012cc8:	d0c9      	beq.n	8012c5e <__sflush_r+0x1a>
 8012cca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012cce:	4299      	cmp	r1, r3
 8012cd0:	d002      	beq.n	8012cd8 <__sflush_r+0x94>
 8012cd2:	4628      	mov	r0, r5
 8012cd4:	f7ff f9e2 	bl	801209c <_free_r>
 8012cd8:	2000      	movs	r0, #0
 8012cda:	6360      	str	r0, [r4, #52]	; 0x34
 8012cdc:	e7c0      	b.n	8012c60 <__sflush_r+0x1c>
 8012cde:	2301      	movs	r3, #1
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	47b0      	blx	r6
 8012ce4:	1c41      	adds	r1, r0, #1
 8012ce6:	d1c8      	bne.n	8012c7a <__sflush_r+0x36>
 8012ce8:	682b      	ldr	r3, [r5, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d0c5      	beq.n	8012c7a <__sflush_r+0x36>
 8012cee:	2b1d      	cmp	r3, #29
 8012cf0:	d001      	beq.n	8012cf6 <__sflush_r+0xb2>
 8012cf2:	2b16      	cmp	r3, #22
 8012cf4:	d101      	bne.n	8012cfa <__sflush_r+0xb6>
 8012cf6:	602f      	str	r7, [r5, #0]
 8012cf8:	e7b1      	b.n	8012c5e <__sflush_r+0x1a>
 8012cfa:	89a3      	ldrh	r3, [r4, #12]
 8012cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d00:	81a3      	strh	r3, [r4, #12]
 8012d02:	e7ad      	b.n	8012c60 <__sflush_r+0x1c>
 8012d04:	690f      	ldr	r7, [r1, #16]
 8012d06:	2f00      	cmp	r7, #0
 8012d08:	d0a9      	beq.n	8012c5e <__sflush_r+0x1a>
 8012d0a:	0793      	lsls	r3, r2, #30
 8012d0c:	680e      	ldr	r6, [r1, #0]
 8012d0e:	bf08      	it	eq
 8012d10:	694b      	ldreq	r3, [r1, #20]
 8012d12:	600f      	str	r7, [r1, #0]
 8012d14:	bf18      	it	ne
 8012d16:	2300      	movne	r3, #0
 8012d18:	eba6 0807 	sub.w	r8, r6, r7
 8012d1c:	608b      	str	r3, [r1, #8]
 8012d1e:	f1b8 0f00 	cmp.w	r8, #0
 8012d22:	dd9c      	ble.n	8012c5e <__sflush_r+0x1a>
 8012d24:	6a21      	ldr	r1, [r4, #32]
 8012d26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012d28:	4643      	mov	r3, r8
 8012d2a:	463a      	mov	r2, r7
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	47b0      	blx	r6
 8012d30:	2800      	cmp	r0, #0
 8012d32:	dc06      	bgt.n	8012d42 <__sflush_r+0xfe>
 8012d34:	89a3      	ldrh	r3, [r4, #12]
 8012d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d3a:	81a3      	strh	r3, [r4, #12]
 8012d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d40:	e78e      	b.n	8012c60 <__sflush_r+0x1c>
 8012d42:	4407      	add	r7, r0
 8012d44:	eba8 0800 	sub.w	r8, r8, r0
 8012d48:	e7e9      	b.n	8012d1e <__sflush_r+0xda>
 8012d4a:	bf00      	nop
 8012d4c:	dfbffffe 	.word	0xdfbffffe

08012d50 <_fflush_r>:
 8012d50:	b538      	push	{r3, r4, r5, lr}
 8012d52:	690b      	ldr	r3, [r1, #16]
 8012d54:	4605      	mov	r5, r0
 8012d56:	460c      	mov	r4, r1
 8012d58:	b913      	cbnz	r3, 8012d60 <_fflush_r+0x10>
 8012d5a:	2500      	movs	r5, #0
 8012d5c:	4628      	mov	r0, r5
 8012d5e:	bd38      	pop	{r3, r4, r5, pc}
 8012d60:	b118      	cbz	r0, 8012d6a <_fflush_r+0x1a>
 8012d62:	6a03      	ldr	r3, [r0, #32]
 8012d64:	b90b      	cbnz	r3, 8012d6a <_fflush_r+0x1a>
 8012d66:	f7fe f9f7 	bl	8011158 <__sinit>
 8012d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d0f3      	beq.n	8012d5a <_fflush_r+0xa>
 8012d72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d74:	07d0      	lsls	r0, r2, #31
 8012d76:	d404      	bmi.n	8012d82 <_fflush_r+0x32>
 8012d78:	0599      	lsls	r1, r3, #22
 8012d7a:	d402      	bmi.n	8012d82 <_fflush_r+0x32>
 8012d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d7e:	f7fe fb02 	bl	8011386 <__retarget_lock_acquire_recursive>
 8012d82:	4628      	mov	r0, r5
 8012d84:	4621      	mov	r1, r4
 8012d86:	f7ff ff5d 	bl	8012c44 <__sflush_r>
 8012d8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d8c:	07da      	lsls	r2, r3, #31
 8012d8e:	4605      	mov	r5, r0
 8012d90:	d4e4      	bmi.n	8012d5c <_fflush_r+0xc>
 8012d92:	89a3      	ldrh	r3, [r4, #12]
 8012d94:	059b      	lsls	r3, r3, #22
 8012d96:	d4e1      	bmi.n	8012d5c <_fflush_r+0xc>
 8012d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d9a:	f7fe faf5 	bl	8011388 <__retarget_lock_release_recursive>
 8012d9e:	e7dd      	b.n	8012d5c <_fflush_r+0xc>

08012da0 <memmove>:
 8012da0:	4288      	cmp	r0, r1
 8012da2:	b510      	push	{r4, lr}
 8012da4:	eb01 0402 	add.w	r4, r1, r2
 8012da8:	d902      	bls.n	8012db0 <memmove+0x10>
 8012daa:	4284      	cmp	r4, r0
 8012dac:	4623      	mov	r3, r4
 8012dae:	d807      	bhi.n	8012dc0 <memmove+0x20>
 8012db0:	1e43      	subs	r3, r0, #1
 8012db2:	42a1      	cmp	r1, r4
 8012db4:	d008      	beq.n	8012dc8 <memmove+0x28>
 8012db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012dbe:	e7f8      	b.n	8012db2 <memmove+0x12>
 8012dc0:	4402      	add	r2, r0
 8012dc2:	4601      	mov	r1, r0
 8012dc4:	428a      	cmp	r2, r1
 8012dc6:	d100      	bne.n	8012dca <memmove+0x2a>
 8012dc8:	bd10      	pop	{r4, pc}
 8012dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012dd2:	e7f7      	b.n	8012dc4 <memmove+0x24>

08012dd4 <_sbrk_r>:
 8012dd4:	b538      	push	{r3, r4, r5, lr}
 8012dd6:	4d06      	ldr	r5, [pc, #24]	; (8012df0 <_sbrk_r+0x1c>)
 8012dd8:	2300      	movs	r3, #0
 8012dda:	4604      	mov	r4, r0
 8012ddc:	4608      	mov	r0, r1
 8012dde:	602b      	str	r3, [r5, #0]
 8012de0:	f7ee ff78 	bl	8001cd4 <_sbrk>
 8012de4:	1c43      	adds	r3, r0, #1
 8012de6:	d102      	bne.n	8012dee <_sbrk_r+0x1a>
 8012de8:	682b      	ldr	r3, [r5, #0]
 8012dea:	b103      	cbz	r3, 8012dee <_sbrk_r+0x1a>
 8012dec:	6023      	str	r3, [r4, #0]
 8012dee:	bd38      	pop	{r3, r4, r5, pc}
 8012df0:	20006f44 	.word	0x20006f44

08012df4 <__assert_func>:
 8012df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012df6:	4614      	mov	r4, r2
 8012df8:	461a      	mov	r2, r3
 8012dfa:	4b09      	ldr	r3, [pc, #36]	; (8012e20 <__assert_func+0x2c>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	4605      	mov	r5, r0
 8012e00:	68d8      	ldr	r0, [r3, #12]
 8012e02:	b14c      	cbz	r4, 8012e18 <__assert_func+0x24>
 8012e04:	4b07      	ldr	r3, [pc, #28]	; (8012e24 <__assert_func+0x30>)
 8012e06:	9100      	str	r1, [sp, #0]
 8012e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e0c:	4906      	ldr	r1, [pc, #24]	; (8012e28 <__assert_func+0x34>)
 8012e0e:	462b      	mov	r3, r5
 8012e10:	f000 f872 	bl	8012ef8 <fiprintf>
 8012e14:	f000 f882 	bl	8012f1c <abort>
 8012e18:	4b04      	ldr	r3, [pc, #16]	; (8012e2c <__assert_func+0x38>)
 8012e1a:	461c      	mov	r4, r3
 8012e1c:	e7f3      	b.n	8012e06 <__assert_func+0x12>
 8012e1e:	bf00      	nop
 8012e20:	200001e0 	.word	0x200001e0
 8012e24:	0801534f 	.word	0x0801534f
 8012e28:	0801535c 	.word	0x0801535c
 8012e2c:	0801538a 	.word	0x0801538a

08012e30 <_calloc_r>:
 8012e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e32:	fba1 2402 	umull	r2, r4, r1, r2
 8012e36:	b94c      	cbnz	r4, 8012e4c <_calloc_r+0x1c>
 8012e38:	4611      	mov	r1, r2
 8012e3a:	9201      	str	r2, [sp, #4]
 8012e3c:	f7ff f9a2 	bl	8012184 <_malloc_r>
 8012e40:	9a01      	ldr	r2, [sp, #4]
 8012e42:	4605      	mov	r5, r0
 8012e44:	b930      	cbnz	r0, 8012e54 <_calloc_r+0x24>
 8012e46:	4628      	mov	r0, r5
 8012e48:	b003      	add	sp, #12
 8012e4a:	bd30      	pop	{r4, r5, pc}
 8012e4c:	220c      	movs	r2, #12
 8012e4e:	6002      	str	r2, [r0, #0]
 8012e50:	2500      	movs	r5, #0
 8012e52:	e7f8      	b.n	8012e46 <_calloc_r+0x16>
 8012e54:	4621      	mov	r1, r4
 8012e56:	f7fe fa18 	bl	801128a <memset>
 8012e5a:	e7f4      	b.n	8012e46 <_calloc_r+0x16>

08012e5c <__ascii_mbtowc>:
 8012e5c:	b082      	sub	sp, #8
 8012e5e:	b901      	cbnz	r1, 8012e62 <__ascii_mbtowc+0x6>
 8012e60:	a901      	add	r1, sp, #4
 8012e62:	b142      	cbz	r2, 8012e76 <__ascii_mbtowc+0x1a>
 8012e64:	b14b      	cbz	r3, 8012e7a <__ascii_mbtowc+0x1e>
 8012e66:	7813      	ldrb	r3, [r2, #0]
 8012e68:	600b      	str	r3, [r1, #0]
 8012e6a:	7812      	ldrb	r2, [r2, #0]
 8012e6c:	1e10      	subs	r0, r2, #0
 8012e6e:	bf18      	it	ne
 8012e70:	2001      	movne	r0, #1
 8012e72:	b002      	add	sp, #8
 8012e74:	4770      	bx	lr
 8012e76:	4610      	mov	r0, r2
 8012e78:	e7fb      	b.n	8012e72 <__ascii_mbtowc+0x16>
 8012e7a:	f06f 0001 	mvn.w	r0, #1
 8012e7e:	e7f8      	b.n	8012e72 <__ascii_mbtowc+0x16>

08012e80 <_realloc_r>:
 8012e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e84:	4680      	mov	r8, r0
 8012e86:	4614      	mov	r4, r2
 8012e88:	460e      	mov	r6, r1
 8012e8a:	b921      	cbnz	r1, 8012e96 <_realloc_r+0x16>
 8012e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e90:	4611      	mov	r1, r2
 8012e92:	f7ff b977 	b.w	8012184 <_malloc_r>
 8012e96:	b92a      	cbnz	r2, 8012ea4 <_realloc_r+0x24>
 8012e98:	f7ff f900 	bl	801209c <_free_r>
 8012e9c:	4625      	mov	r5, r4
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ea4:	f000 f841 	bl	8012f2a <_malloc_usable_size_r>
 8012ea8:	4284      	cmp	r4, r0
 8012eaa:	4607      	mov	r7, r0
 8012eac:	d802      	bhi.n	8012eb4 <_realloc_r+0x34>
 8012eae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012eb2:	d812      	bhi.n	8012eda <_realloc_r+0x5a>
 8012eb4:	4621      	mov	r1, r4
 8012eb6:	4640      	mov	r0, r8
 8012eb8:	f7ff f964 	bl	8012184 <_malloc_r>
 8012ebc:	4605      	mov	r5, r0
 8012ebe:	2800      	cmp	r0, #0
 8012ec0:	d0ed      	beq.n	8012e9e <_realloc_r+0x1e>
 8012ec2:	42bc      	cmp	r4, r7
 8012ec4:	4622      	mov	r2, r4
 8012ec6:	4631      	mov	r1, r6
 8012ec8:	bf28      	it	cs
 8012eca:	463a      	movcs	r2, r7
 8012ecc:	f7fe fa5d 	bl	801138a <memcpy>
 8012ed0:	4631      	mov	r1, r6
 8012ed2:	4640      	mov	r0, r8
 8012ed4:	f7ff f8e2 	bl	801209c <_free_r>
 8012ed8:	e7e1      	b.n	8012e9e <_realloc_r+0x1e>
 8012eda:	4635      	mov	r5, r6
 8012edc:	e7df      	b.n	8012e9e <_realloc_r+0x1e>

08012ede <__ascii_wctomb>:
 8012ede:	b149      	cbz	r1, 8012ef4 <__ascii_wctomb+0x16>
 8012ee0:	2aff      	cmp	r2, #255	; 0xff
 8012ee2:	bf85      	ittet	hi
 8012ee4:	238a      	movhi	r3, #138	; 0x8a
 8012ee6:	6003      	strhi	r3, [r0, #0]
 8012ee8:	700a      	strbls	r2, [r1, #0]
 8012eea:	f04f 30ff 	movhi.w	r0, #4294967295
 8012eee:	bf98      	it	ls
 8012ef0:	2001      	movls	r0, #1
 8012ef2:	4770      	bx	lr
 8012ef4:	4608      	mov	r0, r1
 8012ef6:	4770      	bx	lr

08012ef8 <fiprintf>:
 8012ef8:	b40e      	push	{r1, r2, r3}
 8012efa:	b503      	push	{r0, r1, lr}
 8012efc:	4601      	mov	r1, r0
 8012efe:	ab03      	add	r3, sp, #12
 8012f00:	4805      	ldr	r0, [pc, #20]	; (8012f18 <fiprintf+0x20>)
 8012f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f06:	6800      	ldr	r0, [r0, #0]
 8012f08:	9301      	str	r3, [sp, #4]
 8012f0a:	f000 f83f 	bl	8012f8c <_vfiprintf_r>
 8012f0e:	b002      	add	sp, #8
 8012f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f14:	b003      	add	sp, #12
 8012f16:	4770      	bx	lr
 8012f18:	200001e0 	.word	0x200001e0

08012f1c <abort>:
 8012f1c:	b508      	push	{r3, lr}
 8012f1e:	2006      	movs	r0, #6
 8012f20:	f000 fa0c 	bl	801333c <raise>
 8012f24:	2001      	movs	r0, #1
 8012f26:	f7ee fe5d 	bl	8001be4 <_exit>

08012f2a <_malloc_usable_size_r>:
 8012f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f2e:	1f18      	subs	r0, r3, #4
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	bfbc      	itt	lt
 8012f34:	580b      	ldrlt	r3, [r1, r0]
 8012f36:	18c0      	addlt	r0, r0, r3
 8012f38:	4770      	bx	lr

08012f3a <__sfputc_r>:
 8012f3a:	6893      	ldr	r3, [r2, #8]
 8012f3c:	3b01      	subs	r3, #1
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	b410      	push	{r4}
 8012f42:	6093      	str	r3, [r2, #8]
 8012f44:	da08      	bge.n	8012f58 <__sfputc_r+0x1e>
 8012f46:	6994      	ldr	r4, [r2, #24]
 8012f48:	42a3      	cmp	r3, r4
 8012f4a:	db01      	blt.n	8012f50 <__sfputc_r+0x16>
 8012f4c:	290a      	cmp	r1, #10
 8012f4e:	d103      	bne.n	8012f58 <__sfputc_r+0x1e>
 8012f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f54:	f000 b934 	b.w	80131c0 <__swbuf_r>
 8012f58:	6813      	ldr	r3, [r2, #0]
 8012f5a:	1c58      	adds	r0, r3, #1
 8012f5c:	6010      	str	r0, [r2, #0]
 8012f5e:	7019      	strb	r1, [r3, #0]
 8012f60:	4608      	mov	r0, r1
 8012f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f66:	4770      	bx	lr

08012f68 <__sfputs_r>:
 8012f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f6a:	4606      	mov	r6, r0
 8012f6c:	460f      	mov	r7, r1
 8012f6e:	4614      	mov	r4, r2
 8012f70:	18d5      	adds	r5, r2, r3
 8012f72:	42ac      	cmp	r4, r5
 8012f74:	d101      	bne.n	8012f7a <__sfputs_r+0x12>
 8012f76:	2000      	movs	r0, #0
 8012f78:	e007      	b.n	8012f8a <__sfputs_r+0x22>
 8012f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f7e:	463a      	mov	r2, r7
 8012f80:	4630      	mov	r0, r6
 8012f82:	f7ff ffda 	bl	8012f3a <__sfputc_r>
 8012f86:	1c43      	adds	r3, r0, #1
 8012f88:	d1f3      	bne.n	8012f72 <__sfputs_r+0xa>
 8012f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012f8c <_vfiprintf_r>:
 8012f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f90:	460d      	mov	r5, r1
 8012f92:	b09d      	sub	sp, #116	; 0x74
 8012f94:	4614      	mov	r4, r2
 8012f96:	4698      	mov	r8, r3
 8012f98:	4606      	mov	r6, r0
 8012f9a:	b118      	cbz	r0, 8012fa4 <_vfiprintf_r+0x18>
 8012f9c:	6a03      	ldr	r3, [r0, #32]
 8012f9e:	b90b      	cbnz	r3, 8012fa4 <_vfiprintf_r+0x18>
 8012fa0:	f7fe f8da 	bl	8011158 <__sinit>
 8012fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012fa6:	07d9      	lsls	r1, r3, #31
 8012fa8:	d405      	bmi.n	8012fb6 <_vfiprintf_r+0x2a>
 8012faa:	89ab      	ldrh	r3, [r5, #12]
 8012fac:	059a      	lsls	r2, r3, #22
 8012fae:	d402      	bmi.n	8012fb6 <_vfiprintf_r+0x2a>
 8012fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012fb2:	f7fe f9e8 	bl	8011386 <__retarget_lock_acquire_recursive>
 8012fb6:	89ab      	ldrh	r3, [r5, #12]
 8012fb8:	071b      	lsls	r3, r3, #28
 8012fba:	d501      	bpl.n	8012fc0 <_vfiprintf_r+0x34>
 8012fbc:	692b      	ldr	r3, [r5, #16]
 8012fbe:	b99b      	cbnz	r3, 8012fe8 <_vfiprintf_r+0x5c>
 8012fc0:	4629      	mov	r1, r5
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	f000 f93a 	bl	801323c <__swsetup_r>
 8012fc8:	b170      	cbz	r0, 8012fe8 <_vfiprintf_r+0x5c>
 8012fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012fcc:	07dc      	lsls	r4, r3, #31
 8012fce:	d504      	bpl.n	8012fda <_vfiprintf_r+0x4e>
 8012fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8012fd4:	b01d      	add	sp, #116	; 0x74
 8012fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fda:	89ab      	ldrh	r3, [r5, #12]
 8012fdc:	0598      	lsls	r0, r3, #22
 8012fde:	d4f7      	bmi.n	8012fd0 <_vfiprintf_r+0x44>
 8012fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012fe2:	f7fe f9d1 	bl	8011388 <__retarget_lock_release_recursive>
 8012fe6:	e7f3      	b.n	8012fd0 <_vfiprintf_r+0x44>
 8012fe8:	2300      	movs	r3, #0
 8012fea:	9309      	str	r3, [sp, #36]	; 0x24
 8012fec:	2320      	movs	r3, #32
 8012fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ff6:	2330      	movs	r3, #48	; 0x30
 8012ff8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80131ac <_vfiprintf_r+0x220>
 8012ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013000:	f04f 0901 	mov.w	r9, #1
 8013004:	4623      	mov	r3, r4
 8013006:	469a      	mov	sl, r3
 8013008:	f813 2b01 	ldrb.w	r2, [r3], #1
 801300c:	b10a      	cbz	r2, 8013012 <_vfiprintf_r+0x86>
 801300e:	2a25      	cmp	r2, #37	; 0x25
 8013010:	d1f9      	bne.n	8013006 <_vfiprintf_r+0x7a>
 8013012:	ebba 0b04 	subs.w	fp, sl, r4
 8013016:	d00b      	beq.n	8013030 <_vfiprintf_r+0xa4>
 8013018:	465b      	mov	r3, fp
 801301a:	4622      	mov	r2, r4
 801301c:	4629      	mov	r1, r5
 801301e:	4630      	mov	r0, r6
 8013020:	f7ff ffa2 	bl	8012f68 <__sfputs_r>
 8013024:	3001      	adds	r0, #1
 8013026:	f000 80a9 	beq.w	801317c <_vfiprintf_r+0x1f0>
 801302a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801302c:	445a      	add	r2, fp
 801302e:	9209      	str	r2, [sp, #36]	; 0x24
 8013030:	f89a 3000 	ldrb.w	r3, [sl]
 8013034:	2b00      	cmp	r3, #0
 8013036:	f000 80a1 	beq.w	801317c <_vfiprintf_r+0x1f0>
 801303a:	2300      	movs	r3, #0
 801303c:	f04f 32ff 	mov.w	r2, #4294967295
 8013040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013044:	f10a 0a01 	add.w	sl, sl, #1
 8013048:	9304      	str	r3, [sp, #16]
 801304a:	9307      	str	r3, [sp, #28]
 801304c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013050:	931a      	str	r3, [sp, #104]	; 0x68
 8013052:	4654      	mov	r4, sl
 8013054:	2205      	movs	r2, #5
 8013056:	f814 1b01 	ldrb.w	r1, [r4], #1
 801305a:	4854      	ldr	r0, [pc, #336]	; (80131ac <_vfiprintf_r+0x220>)
 801305c:	f7ed f8c8 	bl	80001f0 <memchr>
 8013060:	9a04      	ldr	r2, [sp, #16]
 8013062:	b9d8      	cbnz	r0, 801309c <_vfiprintf_r+0x110>
 8013064:	06d1      	lsls	r1, r2, #27
 8013066:	bf44      	itt	mi
 8013068:	2320      	movmi	r3, #32
 801306a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801306e:	0713      	lsls	r3, r2, #28
 8013070:	bf44      	itt	mi
 8013072:	232b      	movmi	r3, #43	; 0x2b
 8013074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013078:	f89a 3000 	ldrb.w	r3, [sl]
 801307c:	2b2a      	cmp	r3, #42	; 0x2a
 801307e:	d015      	beq.n	80130ac <_vfiprintf_r+0x120>
 8013080:	9a07      	ldr	r2, [sp, #28]
 8013082:	4654      	mov	r4, sl
 8013084:	2000      	movs	r0, #0
 8013086:	f04f 0c0a 	mov.w	ip, #10
 801308a:	4621      	mov	r1, r4
 801308c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013090:	3b30      	subs	r3, #48	; 0x30
 8013092:	2b09      	cmp	r3, #9
 8013094:	d94d      	bls.n	8013132 <_vfiprintf_r+0x1a6>
 8013096:	b1b0      	cbz	r0, 80130c6 <_vfiprintf_r+0x13a>
 8013098:	9207      	str	r2, [sp, #28]
 801309a:	e014      	b.n	80130c6 <_vfiprintf_r+0x13a>
 801309c:	eba0 0308 	sub.w	r3, r0, r8
 80130a0:	fa09 f303 	lsl.w	r3, r9, r3
 80130a4:	4313      	orrs	r3, r2
 80130a6:	9304      	str	r3, [sp, #16]
 80130a8:	46a2      	mov	sl, r4
 80130aa:	e7d2      	b.n	8013052 <_vfiprintf_r+0xc6>
 80130ac:	9b03      	ldr	r3, [sp, #12]
 80130ae:	1d19      	adds	r1, r3, #4
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	9103      	str	r1, [sp, #12]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	bfbb      	ittet	lt
 80130b8:	425b      	neglt	r3, r3
 80130ba:	f042 0202 	orrlt.w	r2, r2, #2
 80130be:	9307      	strge	r3, [sp, #28]
 80130c0:	9307      	strlt	r3, [sp, #28]
 80130c2:	bfb8      	it	lt
 80130c4:	9204      	strlt	r2, [sp, #16]
 80130c6:	7823      	ldrb	r3, [r4, #0]
 80130c8:	2b2e      	cmp	r3, #46	; 0x2e
 80130ca:	d10c      	bne.n	80130e6 <_vfiprintf_r+0x15a>
 80130cc:	7863      	ldrb	r3, [r4, #1]
 80130ce:	2b2a      	cmp	r3, #42	; 0x2a
 80130d0:	d134      	bne.n	801313c <_vfiprintf_r+0x1b0>
 80130d2:	9b03      	ldr	r3, [sp, #12]
 80130d4:	1d1a      	adds	r2, r3, #4
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	9203      	str	r2, [sp, #12]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	bfb8      	it	lt
 80130de:	f04f 33ff 	movlt.w	r3, #4294967295
 80130e2:	3402      	adds	r4, #2
 80130e4:	9305      	str	r3, [sp, #20]
 80130e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80131bc <_vfiprintf_r+0x230>
 80130ea:	7821      	ldrb	r1, [r4, #0]
 80130ec:	2203      	movs	r2, #3
 80130ee:	4650      	mov	r0, sl
 80130f0:	f7ed f87e 	bl	80001f0 <memchr>
 80130f4:	b138      	cbz	r0, 8013106 <_vfiprintf_r+0x17a>
 80130f6:	9b04      	ldr	r3, [sp, #16]
 80130f8:	eba0 000a 	sub.w	r0, r0, sl
 80130fc:	2240      	movs	r2, #64	; 0x40
 80130fe:	4082      	lsls	r2, r0
 8013100:	4313      	orrs	r3, r2
 8013102:	3401      	adds	r4, #1
 8013104:	9304      	str	r3, [sp, #16]
 8013106:	f814 1b01 	ldrb.w	r1, [r4], #1
 801310a:	4829      	ldr	r0, [pc, #164]	; (80131b0 <_vfiprintf_r+0x224>)
 801310c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013110:	2206      	movs	r2, #6
 8013112:	f7ed f86d 	bl	80001f0 <memchr>
 8013116:	2800      	cmp	r0, #0
 8013118:	d03f      	beq.n	801319a <_vfiprintf_r+0x20e>
 801311a:	4b26      	ldr	r3, [pc, #152]	; (80131b4 <_vfiprintf_r+0x228>)
 801311c:	bb1b      	cbnz	r3, 8013166 <_vfiprintf_r+0x1da>
 801311e:	9b03      	ldr	r3, [sp, #12]
 8013120:	3307      	adds	r3, #7
 8013122:	f023 0307 	bic.w	r3, r3, #7
 8013126:	3308      	adds	r3, #8
 8013128:	9303      	str	r3, [sp, #12]
 801312a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801312c:	443b      	add	r3, r7
 801312e:	9309      	str	r3, [sp, #36]	; 0x24
 8013130:	e768      	b.n	8013004 <_vfiprintf_r+0x78>
 8013132:	fb0c 3202 	mla	r2, ip, r2, r3
 8013136:	460c      	mov	r4, r1
 8013138:	2001      	movs	r0, #1
 801313a:	e7a6      	b.n	801308a <_vfiprintf_r+0xfe>
 801313c:	2300      	movs	r3, #0
 801313e:	3401      	adds	r4, #1
 8013140:	9305      	str	r3, [sp, #20]
 8013142:	4619      	mov	r1, r3
 8013144:	f04f 0c0a 	mov.w	ip, #10
 8013148:	4620      	mov	r0, r4
 801314a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801314e:	3a30      	subs	r2, #48	; 0x30
 8013150:	2a09      	cmp	r2, #9
 8013152:	d903      	bls.n	801315c <_vfiprintf_r+0x1d0>
 8013154:	2b00      	cmp	r3, #0
 8013156:	d0c6      	beq.n	80130e6 <_vfiprintf_r+0x15a>
 8013158:	9105      	str	r1, [sp, #20]
 801315a:	e7c4      	b.n	80130e6 <_vfiprintf_r+0x15a>
 801315c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013160:	4604      	mov	r4, r0
 8013162:	2301      	movs	r3, #1
 8013164:	e7f0      	b.n	8013148 <_vfiprintf_r+0x1bc>
 8013166:	ab03      	add	r3, sp, #12
 8013168:	9300      	str	r3, [sp, #0]
 801316a:	462a      	mov	r2, r5
 801316c:	4b12      	ldr	r3, [pc, #72]	; (80131b8 <_vfiprintf_r+0x22c>)
 801316e:	a904      	add	r1, sp, #16
 8013170:	4630      	mov	r0, r6
 8013172:	f7fd fb9f 	bl	80108b4 <_printf_float>
 8013176:	4607      	mov	r7, r0
 8013178:	1c78      	adds	r0, r7, #1
 801317a:	d1d6      	bne.n	801312a <_vfiprintf_r+0x19e>
 801317c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801317e:	07d9      	lsls	r1, r3, #31
 8013180:	d405      	bmi.n	801318e <_vfiprintf_r+0x202>
 8013182:	89ab      	ldrh	r3, [r5, #12]
 8013184:	059a      	lsls	r2, r3, #22
 8013186:	d402      	bmi.n	801318e <_vfiprintf_r+0x202>
 8013188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801318a:	f7fe f8fd 	bl	8011388 <__retarget_lock_release_recursive>
 801318e:	89ab      	ldrh	r3, [r5, #12]
 8013190:	065b      	lsls	r3, r3, #25
 8013192:	f53f af1d 	bmi.w	8012fd0 <_vfiprintf_r+0x44>
 8013196:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013198:	e71c      	b.n	8012fd4 <_vfiprintf_r+0x48>
 801319a:	ab03      	add	r3, sp, #12
 801319c:	9300      	str	r3, [sp, #0]
 801319e:	462a      	mov	r2, r5
 80131a0:	4b05      	ldr	r3, [pc, #20]	; (80131b8 <_vfiprintf_r+0x22c>)
 80131a2:	a904      	add	r1, sp, #16
 80131a4:	4630      	mov	r0, r6
 80131a6:	f7fd fe29 	bl	8010dfc <_printf_i>
 80131aa:	e7e4      	b.n	8013176 <_vfiprintf_r+0x1ea>
 80131ac:	08015334 	.word	0x08015334
 80131b0:	0801533e 	.word	0x0801533e
 80131b4:	080108b5 	.word	0x080108b5
 80131b8:	08012f69 	.word	0x08012f69
 80131bc:	0801533a 	.word	0x0801533a

080131c0 <__swbuf_r>:
 80131c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131c2:	460e      	mov	r6, r1
 80131c4:	4614      	mov	r4, r2
 80131c6:	4605      	mov	r5, r0
 80131c8:	b118      	cbz	r0, 80131d2 <__swbuf_r+0x12>
 80131ca:	6a03      	ldr	r3, [r0, #32]
 80131cc:	b90b      	cbnz	r3, 80131d2 <__swbuf_r+0x12>
 80131ce:	f7fd ffc3 	bl	8011158 <__sinit>
 80131d2:	69a3      	ldr	r3, [r4, #24]
 80131d4:	60a3      	str	r3, [r4, #8]
 80131d6:	89a3      	ldrh	r3, [r4, #12]
 80131d8:	071a      	lsls	r2, r3, #28
 80131da:	d525      	bpl.n	8013228 <__swbuf_r+0x68>
 80131dc:	6923      	ldr	r3, [r4, #16]
 80131de:	b31b      	cbz	r3, 8013228 <__swbuf_r+0x68>
 80131e0:	6823      	ldr	r3, [r4, #0]
 80131e2:	6922      	ldr	r2, [r4, #16]
 80131e4:	1a98      	subs	r0, r3, r2
 80131e6:	6963      	ldr	r3, [r4, #20]
 80131e8:	b2f6      	uxtb	r6, r6
 80131ea:	4283      	cmp	r3, r0
 80131ec:	4637      	mov	r7, r6
 80131ee:	dc04      	bgt.n	80131fa <__swbuf_r+0x3a>
 80131f0:	4621      	mov	r1, r4
 80131f2:	4628      	mov	r0, r5
 80131f4:	f7ff fdac 	bl	8012d50 <_fflush_r>
 80131f8:	b9e0      	cbnz	r0, 8013234 <__swbuf_r+0x74>
 80131fa:	68a3      	ldr	r3, [r4, #8]
 80131fc:	3b01      	subs	r3, #1
 80131fe:	60a3      	str	r3, [r4, #8]
 8013200:	6823      	ldr	r3, [r4, #0]
 8013202:	1c5a      	adds	r2, r3, #1
 8013204:	6022      	str	r2, [r4, #0]
 8013206:	701e      	strb	r6, [r3, #0]
 8013208:	6962      	ldr	r2, [r4, #20]
 801320a:	1c43      	adds	r3, r0, #1
 801320c:	429a      	cmp	r2, r3
 801320e:	d004      	beq.n	801321a <__swbuf_r+0x5a>
 8013210:	89a3      	ldrh	r3, [r4, #12]
 8013212:	07db      	lsls	r3, r3, #31
 8013214:	d506      	bpl.n	8013224 <__swbuf_r+0x64>
 8013216:	2e0a      	cmp	r6, #10
 8013218:	d104      	bne.n	8013224 <__swbuf_r+0x64>
 801321a:	4621      	mov	r1, r4
 801321c:	4628      	mov	r0, r5
 801321e:	f7ff fd97 	bl	8012d50 <_fflush_r>
 8013222:	b938      	cbnz	r0, 8013234 <__swbuf_r+0x74>
 8013224:	4638      	mov	r0, r7
 8013226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013228:	4621      	mov	r1, r4
 801322a:	4628      	mov	r0, r5
 801322c:	f000 f806 	bl	801323c <__swsetup_r>
 8013230:	2800      	cmp	r0, #0
 8013232:	d0d5      	beq.n	80131e0 <__swbuf_r+0x20>
 8013234:	f04f 37ff 	mov.w	r7, #4294967295
 8013238:	e7f4      	b.n	8013224 <__swbuf_r+0x64>
	...

0801323c <__swsetup_r>:
 801323c:	b538      	push	{r3, r4, r5, lr}
 801323e:	4b2a      	ldr	r3, [pc, #168]	; (80132e8 <__swsetup_r+0xac>)
 8013240:	4605      	mov	r5, r0
 8013242:	6818      	ldr	r0, [r3, #0]
 8013244:	460c      	mov	r4, r1
 8013246:	b118      	cbz	r0, 8013250 <__swsetup_r+0x14>
 8013248:	6a03      	ldr	r3, [r0, #32]
 801324a:	b90b      	cbnz	r3, 8013250 <__swsetup_r+0x14>
 801324c:	f7fd ff84 	bl	8011158 <__sinit>
 8013250:	89a3      	ldrh	r3, [r4, #12]
 8013252:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013256:	0718      	lsls	r0, r3, #28
 8013258:	d422      	bmi.n	80132a0 <__swsetup_r+0x64>
 801325a:	06d9      	lsls	r1, r3, #27
 801325c:	d407      	bmi.n	801326e <__swsetup_r+0x32>
 801325e:	2309      	movs	r3, #9
 8013260:	602b      	str	r3, [r5, #0]
 8013262:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013266:	81a3      	strh	r3, [r4, #12]
 8013268:	f04f 30ff 	mov.w	r0, #4294967295
 801326c:	e034      	b.n	80132d8 <__swsetup_r+0x9c>
 801326e:	0758      	lsls	r0, r3, #29
 8013270:	d512      	bpl.n	8013298 <__swsetup_r+0x5c>
 8013272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013274:	b141      	cbz	r1, 8013288 <__swsetup_r+0x4c>
 8013276:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801327a:	4299      	cmp	r1, r3
 801327c:	d002      	beq.n	8013284 <__swsetup_r+0x48>
 801327e:	4628      	mov	r0, r5
 8013280:	f7fe ff0c 	bl	801209c <_free_r>
 8013284:	2300      	movs	r3, #0
 8013286:	6363      	str	r3, [r4, #52]	; 0x34
 8013288:	89a3      	ldrh	r3, [r4, #12]
 801328a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801328e:	81a3      	strh	r3, [r4, #12]
 8013290:	2300      	movs	r3, #0
 8013292:	6063      	str	r3, [r4, #4]
 8013294:	6923      	ldr	r3, [r4, #16]
 8013296:	6023      	str	r3, [r4, #0]
 8013298:	89a3      	ldrh	r3, [r4, #12]
 801329a:	f043 0308 	orr.w	r3, r3, #8
 801329e:	81a3      	strh	r3, [r4, #12]
 80132a0:	6923      	ldr	r3, [r4, #16]
 80132a2:	b94b      	cbnz	r3, 80132b8 <__swsetup_r+0x7c>
 80132a4:	89a3      	ldrh	r3, [r4, #12]
 80132a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80132aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80132ae:	d003      	beq.n	80132b8 <__swsetup_r+0x7c>
 80132b0:	4621      	mov	r1, r4
 80132b2:	4628      	mov	r0, r5
 80132b4:	f000 f884 	bl	80133c0 <__smakebuf_r>
 80132b8:	89a0      	ldrh	r0, [r4, #12]
 80132ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132be:	f010 0301 	ands.w	r3, r0, #1
 80132c2:	d00a      	beq.n	80132da <__swsetup_r+0x9e>
 80132c4:	2300      	movs	r3, #0
 80132c6:	60a3      	str	r3, [r4, #8]
 80132c8:	6963      	ldr	r3, [r4, #20]
 80132ca:	425b      	negs	r3, r3
 80132cc:	61a3      	str	r3, [r4, #24]
 80132ce:	6923      	ldr	r3, [r4, #16]
 80132d0:	b943      	cbnz	r3, 80132e4 <__swsetup_r+0xa8>
 80132d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132d6:	d1c4      	bne.n	8013262 <__swsetup_r+0x26>
 80132d8:	bd38      	pop	{r3, r4, r5, pc}
 80132da:	0781      	lsls	r1, r0, #30
 80132dc:	bf58      	it	pl
 80132de:	6963      	ldrpl	r3, [r4, #20]
 80132e0:	60a3      	str	r3, [r4, #8]
 80132e2:	e7f4      	b.n	80132ce <__swsetup_r+0x92>
 80132e4:	2000      	movs	r0, #0
 80132e6:	e7f7      	b.n	80132d8 <__swsetup_r+0x9c>
 80132e8:	200001e0 	.word	0x200001e0

080132ec <_raise_r>:
 80132ec:	291f      	cmp	r1, #31
 80132ee:	b538      	push	{r3, r4, r5, lr}
 80132f0:	4604      	mov	r4, r0
 80132f2:	460d      	mov	r5, r1
 80132f4:	d904      	bls.n	8013300 <_raise_r+0x14>
 80132f6:	2316      	movs	r3, #22
 80132f8:	6003      	str	r3, [r0, #0]
 80132fa:	f04f 30ff 	mov.w	r0, #4294967295
 80132fe:	bd38      	pop	{r3, r4, r5, pc}
 8013300:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013302:	b112      	cbz	r2, 801330a <_raise_r+0x1e>
 8013304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013308:	b94b      	cbnz	r3, 801331e <_raise_r+0x32>
 801330a:	4620      	mov	r0, r4
 801330c:	f000 f830 	bl	8013370 <_getpid_r>
 8013310:	462a      	mov	r2, r5
 8013312:	4601      	mov	r1, r0
 8013314:	4620      	mov	r0, r4
 8013316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801331a:	f000 b817 	b.w	801334c <_kill_r>
 801331e:	2b01      	cmp	r3, #1
 8013320:	d00a      	beq.n	8013338 <_raise_r+0x4c>
 8013322:	1c59      	adds	r1, r3, #1
 8013324:	d103      	bne.n	801332e <_raise_r+0x42>
 8013326:	2316      	movs	r3, #22
 8013328:	6003      	str	r3, [r0, #0]
 801332a:	2001      	movs	r0, #1
 801332c:	e7e7      	b.n	80132fe <_raise_r+0x12>
 801332e:	2400      	movs	r4, #0
 8013330:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013334:	4628      	mov	r0, r5
 8013336:	4798      	blx	r3
 8013338:	2000      	movs	r0, #0
 801333a:	e7e0      	b.n	80132fe <_raise_r+0x12>

0801333c <raise>:
 801333c:	4b02      	ldr	r3, [pc, #8]	; (8013348 <raise+0xc>)
 801333e:	4601      	mov	r1, r0
 8013340:	6818      	ldr	r0, [r3, #0]
 8013342:	f7ff bfd3 	b.w	80132ec <_raise_r>
 8013346:	bf00      	nop
 8013348:	200001e0 	.word	0x200001e0

0801334c <_kill_r>:
 801334c:	b538      	push	{r3, r4, r5, lr}
 801334e:	4d07      	ldr	r5, [pc, #28]	; (801336c <_kill_r+0x20>)
 8013350:	2300      	movs	r3, #0
 8013352:	4604      	mov	r4, r0
 8013354:	4608      	mov	r0, r1
 8013356:	4611      	mov	r1, r2
 8013358:	602b      	str	r3, [r5, #0]
 801335a:	f7ee fc33 	bl	8001bc4 <_kill>
 801335e:	1c43      	adds	r3, r0, #1
 8013360:	d102      	bne.n	8013368 <_kill_r+0x1c>
 8013362:	682b      	ldr	r3, [r5, #0]
 8013364:	b103      	cbz	r3, 8013368 <_kill_r+0x1c>
 8013366:	6023      	str	r3, [r4, #0]
 8013368:	bd38      	pop	{r3, r4, r5, pc}
 801336a:	bf00      	nop
 801336c:	20006f44 	.word	0x20006f44

08013370 <_getpid_r>:
 8013370:	f7ee bc20 	b.w	8001bb4 <_getpid>

08013374 <__swhatbuf_r>:
 8013374:	b570      	push	{r4, r5, r6, lr}
 8013376:	460c      	mov	r4, r1
 8013378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801337c:	2900      	cmp	r1, #0
 801337e:	b096      	sub	sp, #88	; 0x58
 8013380:	4615      	mov	r5, r2
 8013382:	461e      	mov	r6, r3
 8013384:	da0d      	bge.n	80133a2 <__swhatbuf_r+0x2e>
 8013386:	89a3      	ldrh	r3, [r4, #12]
 8013388:	f013 0f80 	tst.w	r3, #128	; 0x80
 801338c:	f04f 0100 	mov.w	r1, #0
 8013390:	bf0c      	ite	eq
 8013392:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013396:	2340      	movne	r3, #64	; 0x40
 8013398:	2000      	movs	r0, #0
 801339a:	6031      	str	r1, [r6, #0]
 801339c:	602b      	str	r3, [r5, #0]
 801339e:	b016      	add	sp, #88	; 0x58
 80133a0:	bd70      	pop	{r4, r5, r6, pc}
 80133a2:	466a      	mov	r2, sp
 80133a4:	f000 f848 	bl	8013438 <_fstat_r>
 80133a8:	2800      	cmp	r0, #0
 80133aa:	dbec      	blt.n	8013386 <__swhatbuf_r+0x12>
 80133ac:	9901      	ldr	r1, [sp, #4]
 80133ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80133b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80133b6:	4259      	negs	r1, r3
 80133b8:	4159      	adcs	r1, r3
 80133ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133be:	e7eb      	b.n	8013398 <__swhatbuf_r+0x24>

080133c0 <__smakebuf_r>:
 80133c0:	898b      	ldrh	r3, [r1, #12]
 80133c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80133c4:	079d      	lsls	r5, r3, #30
 80133c6:	4606      	mov	r6, r0
 80133c8:	460c      	mov	r4, r1
 80133ca:	d507      	bpl.n	80133dc <__smakebuf_r+0x1c>
 80133cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80133d0:	6023      	str	r3, [r4, #0]
 80133d2:	6123      	str	r3, [r4, #16]
 80133d4:	2301      	movs	r3, #1
 80133d6:	6163      	str	r3, [r4, #20]
 80133d8:	b002      	add	sp, #8
 80133da:	bd70      	pop	{r4, r5, r6, pc}
 80133dc:	ab01      	add	r3, sp, #4
 80133de:	466a      	mov	r2, sp
 80133e0:	f7ff ffc8 	bl	8013374 <__swhatbuf_r>
 80133e4:	9900      	ldr	r1, [sp, #0]
 80133e6:	4605      	mov	r5, r0
 80133e8:	4630      	mov	r0, r6
 80133ea:	f7fe fecb 	bl	8012184 <_malloc_r>
 80133ee:	b948      	cbnz	r0, 8013404 <__smakebuf_r+0x44>
 80133f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133f4:	059a      	lsls	r2, r3, #22
 80133f6:	d4ef      	bmi.n	80133d8 <__smakebuf_r+0x18>
 80133f8:	f023 0303 	bic.w	r3, r3, #3
 80133fc:	f043 0302 	orr.w	r3, r3, #2
 8013400:	81a3      	strh	r3, [r4, #12]
 8013402:	e7e3      	b.n	80133cc <__smakebuf_r+0xc>
 8013404:	89a3      	ldrh	r3, [r4, #12]
 8013406:	6020      	str	r0, [r4, #0]
 8013408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801340c:	81a3      	strh	r3, [r4, #12]
 801340e:	9b00      	ldr	r3, [sp, #0]
 8013410:	6163      	str	r3, [r4, #20]
 8013412:	9b01      	ldr	r3, [sp, #4]
 8013414:	6120      	str	r0, [r4, #16]
 8013416:	b15b      	cbz	r3, 8013430 <__smakebuf_r+0x70>
 8013418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801341c:	4630      	mov	r0, r6
 801341e:	f000 f81d 	bl	801345c <_isatty_r>
 8013422:	b128      	cbz	r0, 8013430 <__smakebuf_r+0x70>
 8013424:	89a3      	ldrh	r3, [r4, #12]
 8013426:	f023 0303 	bic.w	r3, r3, #3
 801342a:	f043 0301 	orr.w	r3, r3, #1
 801342e:	81a3      	strh	r3, [r4, #12]
 8013430:	89a3      	ldrh	r3, [r4, #12]
 8013432:	431d      	orrs	r5, r3
 8013434:	81a5      	strh	r5, [r4, #12]
 8013436:	e7cf      	b.n	80133d8 <__smakebuf_r+0x18>

08013438 <_fstat_r>:
 8013438:	b538      	push	{r3, r4, r5, lr}
 801343a:	4d07      	ldr	r5, [pc, #28]	; (8013458 <_fstat_r+0x20>)
 801343c:	2300      	movs	r3, #0
 801343e:	4604      	mov	r4, r0
 8013440:	4608      	mov	r0, r1
 8013442:	4611      	mov	r1, r2
 8013444:	602b      	str	r3, [r5, #0]
 8013446:	f7ee fc1c 	bl	8001c82 <_fstat>
 801344a:	1c43      	adds	r3, r0, #1
 801344c:	d102      	bne.n	8013454 <_fstat_r+0x1c>
 801344e:	682b      	ldr	r3, [r5, #0]
 8013450:	b103      	cbz	r3, 8013454 <_fstat_r+0x1c>
 8013452:	6023      	str	r3, [r4, #0]
 8013454:	bd38      	pop	{r3, r4, r5, pc}
 8013456:	bf00      	nop
 8013458:	20006f44 	.word	0x20006f44

0801345c <_isatty_r>:
 801345c:	b538      	push	{r3, r4, r5, lr}
 801345e:	4d06      	ldr	r5, [pc, #24]	; (8013478 <_isatty_r+0x1c>)
 8013460:	2300      	movs	r3, #0
 8013462:	4604      	mov	r4, r0
 8013464:	4608      	mov	r0, r1
 8013466:	602b      	str	r3, [r5, #0]
 8013468:	f7ee fc1b 	bl	8001ca2 <_isatty>
 801346c:	1c43      	adds	r3, r0, #1
 801346e:	d102      	bne.n	8013476 <_isatty_r+0x1a>
 8013470:	682b      	ldr	r3, [r5, #0]
 8013472:	b103      	cbz	r3, 8013476 <_isatty_r+0x1a>
 8013474:	6023      	str	r3, [r4, #0]
 8013476:	bd38      	pop	{r3, r4, r5, pc}
 8013478:	20006f44 	.word	0x20006f44

0801347c <_init>:
 801347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801347e:	bf00      	nop
 8013480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013482:	bc08      	pop	{r3}
 8013484:	469e      	mov	lr, r3
 8013486:	4770      	bx	lr

08013488 <_fini>:
 8013488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801348a:	bf00      	nop
 801348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801348e:	bc08      	pop	{r3}
 8013490:	469e      	mov	lr, r3
 8013492:	4770      	bx	lr
