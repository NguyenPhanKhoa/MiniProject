
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bd4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f1c  08011d88  08011d88  00021d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ca4  08013ca4  00030344  2**0
                  CONTENTS
  4 .ARM          00000008  08013ca4  08013ca4  00023ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013cac  08013cac  00030344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013cac  08013cac  00023cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013cb0  08013cb0  00023cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  08013cb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030344  2**0
                  CONTENTS
 10 .bss          00006a34  20000344  20000344  00030344  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006d78  20006d78  00030344  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ce51  00000000  00000000  000303b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006c91  00000000  00000000  0005d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002860  00000000  00000000  00063ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001eff  00000000  00000000  00066700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a8bb  00000000  00000000  000685ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003099c  00000000  00000000  00072eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f78d5  00000000  00000000  000a3856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bb50  00000000  00000000  0019b12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001a6c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000344 	.word	0x20000344
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011d6c 	.word	0x08011d6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000348 	.word	0x20000348
 80001ec:	08011d6c 	.word	0x08011d6c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ec8:	b089      	sub	sp, #36	; 0x24
 8000eca:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f002 f978 	bl	80031c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_GYRO_Init();
 8000ed0:	f001 fabc 	bl	800244c <BSP_GYRO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f89e 	bl	8001014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 f984 	bl	80011e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000edc:	f000 f90c 	bl	80010f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ee0:	f000 f94a 	bl	8001178 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000ee4:	f001 fb2c 	bl	8002540 <BSP_LCD_Init>

  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000ee8:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000eec:	2001      	movs	r0, #1
 8000eee:	f001 fba9 	bl	8002644 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f001 fc0a 	bl	800270c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000ef8:	f001 fe54 	bl	8002ba4 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000efc:	483a      	ldr	r0, [pc, #232]	; (8000fe8 <main+0x124>)
 8000efe:	f001 fc61 	bl	80027c4 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000f02:	4839      	ldr	r0, [pc, #228]	; (8000fe8 <main+0x124>)
 8000f04:	f001 fc2a 	bl	800275c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f001 fc0e 	bl	800272c <BSP_LCD_SetTextColor>
    //write text
  int16_t XCir = 160;
 8000f10:	23a0      	movs	r3, #160	; 0xa0
 8000f12:	81fb      	strh	r3, [r7, #14]
  int16_t YCir = 120;
 8000f14:	2378      	movs	r3, #120	; 0x78
 8000f16:	81bb      	strh	r3, [r7, #12]
  int16_t radiusCir = 50;
 8000f18:	2332      	movs	r3, #50	; 0x32
 8000f1a:	817b      	strh	r3, [r7, #10]
  BSP_GYRO_GetXYZ(gryoData);
 8000f1c:	4833      	ldr	r0, [pc, #204]	; (8000fec <main+0x128>)
 8000f1e:	f001 fafb 	bl	8002518 <BSP_GYRO_GetXYZ>
  float defaultHeight = gryoData[2];
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <main+0x128>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	607b      	str	r3, [r7, #4]

  if (defaultHeight <= defaultHeight - 20)
 8000f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f34:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f40:	d802      	bhi.n	8000f48 <main+0x84>
  {
	  startGame = true;
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <main+0x12c>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f48:	f00a fe20 	bl	800bb8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask1, NULL, &Task01_attributes);
 8000f4c:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <main+0x130>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4829      	ldr	r0, [pc, #164]	; (8000ff8 <main+0x134>)
 8000f52:	f00a fe65 	bl	800bc20 <osThreadNew>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <main+0x138>)
 8000f5a:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000f5c:	4a28      	ldr	r2, [pc, #160]	; (8001000 <main+0x13c>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4828      	ldr	r0, [pc, #160]	; (8001004 <main+0x140>)
 8000f62:	f00a fe5d 	bl	800bc20 <osThreadNew>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a27      	ldr	r2, [pc, #156]	; (8001008 <main+0x144>)
 8000f6a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f6c:	f00a fe32 	bl	800bbd4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_LCD_FillCircle(XCir, YCir, radiusCir);
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	89b9      	ldrh	r1, [r7, #12]
 8000f74:	897a      	ldrh	r2, [r7, #10]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fd74 	bl	8002a64 <BSP_LCD_FillCircle>
	  BSP_GYRO_GetXYZ(gryoData);
 8000f7c:	481b      	ldr	r0, [pc, #108]	; (8000fec <main+0x128>)
 8000f7e:	f001 facb 	bl	8002518 <BSP_GYRO_GetXYZ>
	  sprintf(gryoPrint, "X: %f \t Y: %f \t Z:%f \n", gryoData[0], gryoData[1], gryoData[2]);
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <main+0x148>)
 8000f84:	681e      	ldr	r6, [r3, #0]
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <main+0x128>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff faec 	bl	8000568 <__aeabi_f2d>
 8000f90:	4680      	mov	r8, r0
 8000f92:	4689      	mov	r9, r1
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <main+0x128>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fae5 	bl	8000568 <__aeabi_f2d>
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	460d      	mov	r5, r1
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <main+0x128>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fade 	bl	8000568 <__aeabi_f2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fb4:	e9cd 4500 	strd	r4, r5, [sp]
 8000fb8:	4642      	mov	r2, r8
 8000fba:	464b      	mov	r3, r9
 8000fbc:	4914      	ldr	r1, [pc, #80]	; (8001010 <main+0x14c>)
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	f00e fd76 	bl	800fab0 <siprintf>
	  CDC_Transmit_FS((uint8_t*) gryoPrint, strlen(gryoPrint));
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <main+0x148>)
 8000fc6:	681c      	ldr	r4, [r3, #0]
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <main+0x148>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff f95f 	bl	8000290 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f00d fbe5 	bl	800e7a8 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8000fde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe2:	f002 f92f 	bl	8003244 <HAL_Delay>
	  BSP_LCD_FillCircle(XCir, YCir, radiusCir);
 8000fe6:	e7c3      	b.n	8000f70 <main+0xac>
 8000fe8:	ff0000ff 	.word	0xff0000ff
 8000fec:	20000414 	.word	0x20000414
 8000ff0:	20000424 	.word	0x20000424
 8000ff4:	08011e10 	.word	0x08011e10
 8000ff8:	080012a5 	.word	0x080012a5
 8000ffc:	2000040c 	.word	0x2000040c
 8001000:	08011e34 	.word	0x08011e34
 8001004:	080012b9 	.word	0x080012b9
 8001008:	20000410 	.word	0x20000410
 800100c:	20000420 	.word	0x20000420
 8001010:	08011d98 	.word	0x08011d98

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b094      	sub	sp, #80	; 0x50
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	2230      	movs	r2, #48	; 0x30
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f00e fda7 	bl	800fb76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <SystemClock_Config+0xdc>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a2b      	ldr	r2, [pc, #172]	; (80010f0 <SystemClock_Config+0xdc>)
 8001042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <SystemClock_Config+0xdc>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <SystemClock_Config+0xe0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a25      	ldr	r2, [pc, #148]	; (80010f4 <SystemClock_Config+0xe0>)
 800105e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <SystemClock_Config+0xe0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107a:	2302      	movs	r3, #2
 800107c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001084:	2308      	movs	r3, #8
 8001086:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001088:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800108c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001092:	2308      	movs	r3, #8
 8001094:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	4618      	mov	r0, r3
 800109c:	f005 f864 	bl	8006168 <HAL_RCC_OscConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010a6:	f000 f921 	bl	80012ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010aa:	f005 f80d 	bl	80060c8 <HAL_PWREx_EnableOverDrive>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010b4:	f000 f91a 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b8:	230f      	movs	r3, #15
 80010ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010bc:	2302      	movs	r3, #2
 80010be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2105      	movs	r1, #5
 80010d6:	4618      	mov	r0, r3
 80010d8:	f005 fabe 	bl	8006658 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010e2:	f000 f903 	bl	80012ec <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3750      	adds	r7, #80	; 0x50
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_I2C1_Init+0x74>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <MX_I2C1_Init+0x78>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_I2C1_Init+0x74>)
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <MX_I2C1_Init+0x7c>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_I2C1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_I2C1_Init+0x74>)
 8001116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_I2C1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_I2C1_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_I2C1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_I2C1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_I2C1_Init+0x74>)
 8001136:	f003 f8b1 	bl	800429c <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001140:	f000 f8d4 	bl	80012ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4809      	ldr	r0, [pc, #36]	; (800116c <MX_I2C1_Init+0x74>)
 8001148:	f003 f9ec 	bl	8004524 <HAL_I2CEx_ConfigAnalogFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001152:	f000 f8cb 	bl	80012ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_I2C1_Init+0x74>)
 800115a:	f003 fa1f 	bl	800459c <HAL_I2CEx_ConfigDigitalFilter>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001164:	f000 f8c2 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000360 	.word	0x20000360
 8001170:	40005400 	.word	0x40005400
 8001174:	000186a0 	.word	0x000186a0

08001178 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_SPI1_Init+0x64>)
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <MX_SPI1_Init+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_SPI1_Init+0x64>)
 8001184:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001188:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_SPI1_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_SPI1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_SPI1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_SPI1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_SPI1_Init+0x64>)
 80011a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SPI1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SPI1_Init+0x64>)
 80011c4:	220a      	movs	r2, #10
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_SPI1_Init+0x64>)
 80011ca:	f005 fede 	bl	8006f8a <HAL_SPI_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011d4:	f000 f88a 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200003b4 	.word	0x200003b4
 80011e0:	40013000 	.word	0x40013000

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <MX_GPIO_Init+0xb8>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a26      	ldr	r2, [pc, #152]	; (800129c <MX_GPIO_Init+0xb8>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <MX_GPIO_Init+0xb8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <MX_GPIO_Init+0xb8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a1f      	ldr	r2, [pc, #124]	; (800129c <MX_GPIO_Init+0xb8>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_GPIO_Init+0xb8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_GPIO_Init+0xb8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a18      	ldr	r2, [pc, #96]	; (800129c <MX_GPIO_Init+0xb8>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_GPIO_Init+0xb8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_GPIO_Init+0xb8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a11      	ldr	r2, [pc, #68]	; (800129c <MX_GPIO_Init+0xb8>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_GPIO_Init+0xb8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <MX_GPIO_Init+0xbc>)
 8001272:	f002 fff9 	bl	8004268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001276:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_GPIO_Init+0xbc>)
 8001290:	f002 fd32 	bl	8003cf8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020c00 	.word	0x40020c00

080012a4 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80012ac:	f00d f9be 	bl	800e62c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f00a fd47 	bl	800bd44 <osDelay>
 80012b6:	e7fb      	b.n	80012b0 <StartTask1+0xc>

080012b8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012c0:	2001      	movs	r0, #1
 80012c2:	f00a fd3f 	bl	800bd44 <osDelay>
 80012c6:	e7fb      	b.n	80012c0 <StartTask02+0x8>

080012c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012da:	f001 ff93 	bl	8003204 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40001000 	.word	0x40001000

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <Error_Handler+0x8>
	...

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_MspInit+0x54>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a11      	ldr	r2, [pc, #68]	; (800134c <HAL_MspInit+0x54>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_MspInit+0x54>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_MspInit+0x54>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <HAL_MspInit+0x54>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_MspInit+0x54>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	210f      	movs	r1, #15
 800133a:	f06f 0001 	mvn.w	r0, #1
 800133e:	f002 f85d 	bl	80033fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <HAL_I2C_MspInit+0x84>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12b      	bne.n	80013ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800138e:	23c0      	movs	r3, #192	; 0xc0
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139e:	2304      	movs	r3, #4
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <HAL_I2C_MspInit+0x8c>)
 80013aa:	f002 fca5 	bl	8003cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 80013b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40005400 	.word	0x40005400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_SPI_MspInit+0x84>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d12b      	bne.n	800145a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_SPI_MspInit+0x88>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_SPI_MspInit+0x88>)
 800140c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_SPI_MspInit+0x88>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_SPI_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_SPI_MspInit+0x88>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_SPI_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800143a:	23e0      	movs	r3, #224	; 0xe0
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144a:	2305      	movs	r3, #5
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_SPI_MspInit+0x8c>)
 8001456:	f002 fc4f 	bl	8003cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40013000 	.word	0x40013000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_SPI_MspDeInit+0x30>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d109      	bne.n	8001496 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_SPI_MspDeInit+0x34>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_SPI_MspDeInit+0x34>)
 8001488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800148e:	21e0      	movs	r1, #224	; 0xe0
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <HAL_SPI_MspDeInit+0x38>)
 8001492:	f002 fddd 	bl	8004050 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40013000 	.word	0x40013000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000

080014ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	; 0x38
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	4b33      	ldr	r3, [pc, #204]	; (8001590 <HAL_InitTick+0xe4>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a32      	ldr	r2, [pc, #200]	; (8001590 <HAL_InitTick+0xe4>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b30      	ldr	r3, [pc, #192]	; (8001590 <HAL_InitTick+0xe4>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d8:	f107 0210 	add.w	r2, r7, #16
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 fac4 	bl	8006a70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d103      	bne.n	80014fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014f2:	f005 faa9 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 80014f6:	6378      	str	r0, [r7, #52]	; 0x34
 80014f8:	e004      	b.n	8001504 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014fa:	f005 faa5 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 80014fe:	4603      	mov	r3, r0
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001506:	4a23      	ldr	r2, [pc, #140]	; (8001594 <HAL_InitTick+0xe8>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	0c9b      	lsrs	r3, r3, #18
 800150e:	3b01      	subs	r3, #1
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <HAL_InitTick+0xec>)
 8001514:	4a21      	ldr	r2, [pc, #132]	; (800159c <HAL_InitTick+0xf0>)
 8001516:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HAL_InitTick+0xec>)
 800151a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800151e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001520:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <HAL_InitTick+0xec>)
 8001522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001524:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <HAL_InitTick+0xec>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <HAL_InitTick+0xec>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_InitTick+0xec>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001538:	4817      	ldr	r0, [pc, #92]	; (8001598 <HAL_InitTick+0xec>)
 800153a:	f006 fb05 	bl	8007b48 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001544:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001548:	2b00      	cmp	r3, #0
 800154a:	d11b      	bne.n	8001584 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800154c:	4812      	ldr	r0, [pc, #72]	; (8001598 <HAL_InitTick+0xec>)
 800154e:	f006 fb55 	bl	8007bfc <HAL_TIM_Base_Start_IT>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001558:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800155c:	2b00      	cmp	r3, #0
 800155e:	d111      	bne.n	8001584 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001560:	2036      	movs	r0, #54	; 0x36
 8001562:	f001 ff67 	bl	8003434 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d808      	bhi.n	800157e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	2036      	movs	r0, #54	; 0x36
 8001572:	f001 ff43 	bl	80033fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_InitTick+0xf4>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e002      	b.n	8001584 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001584:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001588:	4618      	mov	r0, r3
 800158a:	3738      	adds	r7, #56	; 0x38
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	431bde83 	.word	0x431bde83
 8001598:	20000428 	.word	0x20000428
 800159c:	40001000 	.word	0x40001000
 80015a0:	20000080 	.word	0x20000080

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler+0x4>

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <TIM6_DAC_IRQHandler+0x10>)
 80015d6:	f006 fb81 	bl	8007cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000428 	.word	0x20000428

080015e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <OTG_FS_IRQHandler+0x10>)
 80015ea:	f003 fc40 	bl	8004e6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20006500 	.word	0x20006500

080015f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return 1;
 80015fc:	2301      	movs	r3, #1
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_kill>:

int _kill(int pid, int sig)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001612:	f00e fb03 	bl	800fc1c <__errno>
 8001616:	4603      	mov	r3, r0
 8001618:	2216      	movs	r2, #22
 800161a:	601a      	str	r2, [r3, #0]
  return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_exit>:

void _exit (int status)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ffe7 	bl	8001608 <_kill>
  while (1) {}    /* Make sure we hang here */
 800163a:	e7fe      	b.n	800163a <_exit+0x12>

0800163c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e00a      	b.n	8001664 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800164e:	f3af 8000 	nop.w
 8001652:	4601      	mov	r1, r0
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	60ba      	str	r2, [r7, #8]
 800165a:	b2ca      	uxtb	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf0      	blt.n	800164e <_read+0x12>
  }

  return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	e009      	b.n	800169c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60ba      	str	r2, [r7, #8]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbf1      	blt.n	8001688 <_write+0x12>
  }
  return len;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_close>:

int _close(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d6:	605a      	str	r2, [r3, #4]
  return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_isatty>:

int _isatty(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f00e fa68 	bl	800fc1c <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20030000 	.word	0x20030000
 8001778:	00000400 	.word	0x00000400
 800177c:	20000470 	.word	0x20000470
 8001780:	20006d78 	.word	0x20006d78

08001784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c4:	4c0b      	ldr	r4, [pc, #44]	; (80017f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d2:	f7ff ffd7 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f00e fa27 	bl	800fc28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7ff fb73 	bl	8000ec4 <main>
  bx  lr    
 80017de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 80017ec:	08013cb4 	.word	0x08013cb4
  ldr r2, =_sbss
 80017f0:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 80017f4:	20006d78 	.word	0x20006d78

080017f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC_IRQHandler>

080017fa <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80017fe:	f000 fc73 	bl	80020e8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001802:	20ca      	movs	r0, #202	; 0xca
 8001804:	f000 f95d 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001808:	20c3      	movs	r0, #195	; 0xc3
 800180a:	f000 f967 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800180e:	2008      	movs	r0, #8
 8001810:	f000 f964 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001814:	2050      	movs	r0, #80	; 0x50
 8001816:	f000 f961 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800181a:	20cf      	movs	r0, #207	; 0xcf
 800181c:	f000 f951 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001820:	2000      	movs	r0, #0
 8001822:	f000 f95b 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001826:	20c1      	movs	r0, #193	; 0xc1
 8001828:	f000 f958 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800182c:	2030      	movs	r0, #48	; 0x30
 800182e:	f000 f955 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001832:	20ed      	movs	r0, #237	; 0xed
 8001834:	f000 f945 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001838:	2064      	movs	r0, #100	; 0x64
 800183a:	f000 f94f 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800183e:	2003      	movs	r0, #3
 8001840:	f000 f94c 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001844:	2012      	movs	r0, #18
 8001846:	f000 f949 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800184a:	2081      	movs	r0, #129	; 0x81
 800184c:	f000 f946 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001850:	20e8      	movs	r0, #232	; 0xe8
 8001852:	f000 f936 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001856:	2085      	movs	r0, #133	; 0x85
 8001858:	f000 f940 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800185c:	2000      	movs	r0, #0
 800185e:	f000 f93d 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001862:	2078      	movs	r0, #120	; 0x78
 8001864:	f000 f93a 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001868:	20cb      	movs	r0, #203	; 0xcb
 800186a:	f000 f92a 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800186e:	2039      	movs	r0, #57	; 0x39
 8001870:	f000 f934 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001874:	202c      	movs	r0, #44	; 0x2c
 8001876:	f000 f931 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800187a:	2000      	movs	r0, #0
 800187c:	f000 f92e 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001880:	2034      	movs	r0, #52	; 0x34
 8001882:	f000 f92b 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001886:	2002      	movs	r0, #2
 8001888:	f000 f928 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800188c:	20f7      	movs	r0, #247	; 0xf7
 800188e:	f000 f918 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001892:	2020      	movs	r0, #32
 8001894:	f000 f922 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001898:	20ea      	movs	r0, #234	; 0xea
 800189a:	f000 f912 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800189e:	2000      	movs	r0, #0
 80018a0:	f000 f91c 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f000 f919 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80018aa:	20b1      	movs	r0, #177	; 0xb1
 80018ac:	f000 f909 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f000 f913 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80018b6:	201b      	movs	r0, #27
 80018b8:	f000 f910 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80018bc:	20b6      	movs	r0, #182	; 0xb6
 80018be:	f000 f900 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80018c2:	200a      	movs	r0, #10
 80018c4:	f000 f90a 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80018c8:	20a2      	movs	r0, #162	; 0xa2
 80018ca:	f000 f907 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80018ce:	20c0      	movs	r0, #192	; 0xc0
 80018d0:	f000 f8f7 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80018d4:	2010      	movs	r0, #16
 80018d6:	f000 f901 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80018da:	20c1      	movs	r0, #193	; 0xc1
 80018dc:	f000 f8f1 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80018e0:	2010      	movs	r0, #16
 80018e2:	f000 f8fb 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80018e6:	20c5      	movs	r0, #197	; 0xc5
 80018e8:	f000 f8eb 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80018ec:	2045      	movs	r0, #69	; 0x45
 80018ee:	f000 f8f5 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80018f2:	2015      	movs	r0, #21
 80018f4:	f000 f8f2 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80018f8:	20c7      	movs	r0, #199	; 0xc7
 80018fa:	f000 f8e2 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80018fe:	2090      	movs	r0, #144	; 0x90
 8001900:	f000 f8ec 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001904:	2036      	movs	r0, #54	; 0x36
 8001906:	f000 f8dc 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800190a:	20c8      	movs	r0, #200	; 0xc8
 800190c:	f000 f8e6 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001910:	20f2      	movs	r0, #242	; 0xf2
 8001912:	f000 f8d6 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001916:	2000      	movs	r0, #0
 8001918:	f000 f8e0 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800191c:	20b0      	movs	r0, #176	; 0xb0
 800191e:	f000 f8d0 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001922:	20c2      	movs	r0, #194	; 0xc2
 8001924:	f000 f8da 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001928:	20b6      	movs	r0, #182	; 0xb6
 800192a:	f000 f8ca 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800192e:	200a      	movs	r0, #10
 8001930:	f000 f8d4 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001934:	20a7      	movs	r0, #167	; 0xa7
 8001936:	f000 f8d1 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800193a:	2027      	movs	r0, #39	; 0x27
 800193c:	f000 f8ce 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001940:	2004      	movs	r0, #4
 8001942:	f000 f8cb 	bl	8001adc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001946:	202a      	movs	r0, #42	; 0x2a
 8001948:	f000 f8bb 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800194c:	2000      	movs	r0, #0
 800194e:	f000 f8c5 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001952:	2000      	movs	r0, #0
 8001954:	f000 f8c2 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001958:	2000      	movs	r0, #0
 800195a:	f000 f8bf 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800195e:	20ef      	movs	r0, #239	; 0xef
 8001960:	f000 f8bc 	bl	8001adc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001964:	202b      	movs	r0, #43	; 0x2b
 8001966:	f000 f8ac 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f8b6 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001970:	2000      	movs	r0, #0
 8001972:	f000 f8b3 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001976:	2001      	movs	r0, #1
 8001978:	f000 f8b0 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800197c:	203f      	movs	r0, #63	; 0x3f
 800197e:	f000 f8ad 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001982:	20f6      	movs	r0, #246	; 0xf6
 8001984:	f000 f89d 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001988:	2001      	movs	r0, #1
 800198a:	f000 f8a7 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f8a4 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001994:	2006      	movs	r0, #6
 8001996:	f000 f8a1 	bl	8001adc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800199a:	202c      	movs	r0, #44	; 0x2c
 800199c:	f000 f891 	bl	8001ac2 <ili9341_WriteReg>
  LCD_Delay(200);
 80019a0:	20c8      	movs	r0, #200	; 0xc8
 80019a2:	f000 fc8f 	bl	80022c4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80019a6:	2026      	movs	r0, #38	; 0x26
 80019a8:	f000 f88b 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f000 f895 	bl	8001adc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80019b2:	20e0      	movs	r0, #224	; 0xe0
 80019b4:	f000 f885 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80019b8:	200f      	movs	r0, #15
 80019ba:	f000 f88f 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80019be:	2029      	movs	r0, #41	; 0x29
 80019c0:	f000 f88c 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80019c4:	2024      	movs	r0, #36	; 0x24
 80019c6:	f000 f889 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80019ca:	200c      	movs	r0, #12
 80019cc:	f000 f886 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80019d0:	200e      	movs	r0, #14
 80019d2:	f000 f883 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80019d6:	2009      	movs	r0, #9
 80019d8:	f000 f880 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80019dc:	204e      	movs	r0, #78	; 0x4e
 80019de:	f000 f87d 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80019e2:	2078      	movs	r0, #120	; 0x78
 80019e4:	f000 f87a 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80019e8:	203c      	movs	r0, #60	; 0x3c
 80019ea:	f000 f877 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80019ee:	2009      	movs	r0, #9
 80019f0:	f000 f874 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80019f4:	2013      	movs	r0, #19
 80019f6:	f000 f871 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80019fa:	2005      	movs	r0, #5
 80019fc:	f000 f86e 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001a00:	2017      	movs	r0, #23
 8001a02:	f000 f86b 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001a06:	2011      	movs	r0, #17
 8001a08:	f000 f868 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 f865 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001a12:	20e1      	movs	r0, #225	; 0xe1
 8001a14:	f000 f855 	bl	8001ac2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f000 f85f 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001a1e:	2016      	movs	r0, #22
 8001a20:	f000 f85c 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001a24:	201b      	movs	r0, #27
 8001a26:	f000 f859 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a2a:	2004      	movs	r0, #4
 8001a2c:	f000 f856 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001a30:	2011      	movs	r0, #17
 8001a32:	f000 f853 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001a36:	2007      	movs	r0, #7
 8001a38:	f000 f850 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001a3c:	2031      	movs	r0, #49	; 0x31
 8001a3e:	f000 f84d 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001a42:	2033      	movs	r0, #51	; 0x33
 8001a44:	f000 f84a 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001a48:	2042      	movs	r0, #66	; 0x42
 8001a4a:	f000 f847 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001a4e:	2005      	movs	r0, #5
 8001a50:	f000 f844 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001a54:	200c      	movs	r0, #12
 8001a56:	f000 f841 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f000 f83e 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001a60:	2028      	movs	r0, #40	; 0x28
 8001a62:	f000 f83b 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001a66:	202f      	movs	r0, #47	; 0x2f
 8001a68:	f000 f838 	bl	8001adc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001a6c:	200f      	movs	r0, #15
 8001a6e:	f000 f835 	bl	8001adc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001a72:	2011      	movs	r0, #17
 8001a74:	f000 f825 	bl	8001ac2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001a78:	20c8      	movs	r0, #200	; 0xc8
 8001a7a:	f000 fc23 	bl	80022c4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a7e:	2029      	movs	r0, #41	; 0x29
 8001a80:	f000 f81f 	bl	8001ac2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001a84:	202c      	movs	r0, #44	; 0x2c
 8001a86:	f000 f81c 	bl	8001ac2 <ili9341_WriteReg>
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001a92:	f000 fb29 	bl	80020e8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001a96:	2103      	movs	r1, #3
 8001a98:	20d3      	movs	r0, #211	; 0xd3
 8001a9a:	f000 f82c 	bl	8001af6 <ili9341_ReadData>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b29b      	uxth	r3, r3
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001aaa:	2029      	movs	r0, #41	; 0x29
 8001aac:	f000 f809 	bl	8001ac2 <ili9341_WriteReg>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001ab8:	2028      	movs	r0, #40	; 0x28
 8001aba:	f000 f802 	bl	8001ac2 <ili9341_WriteReg>
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fba4 	bl	800221c <LCD_IO_WriteReg>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 fb75 	bl	80021d8 <LCD_IO_WriteData>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	460a      	mov	r2, r1
 8001b00:	80fb      	strh	r3, [r7, #6]
 8001b02:	4613      	mov	r3, r2
 8001b04:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001b06:	797a      	ldrb	r2, [r7, #5]
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fba7 	bl	8002260 <LCD_IO_ReadData>
 8001b12:	4603      	mov	r3, r0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001b20:	23f0      	movs	r3, #240	; 0xf0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001b30:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001b4c:	f000 fbc6 	bl	80022dc <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001b56:	f107 030f 	add.w	r3, r7, #15
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2120      	movs	r1, #32
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fc08 	bl	8002374 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001b6e:	f107 030f 	add.w	r3, r7, #15
 8001b72:	2201      	movs	r2, #1
 8001b74:	2123      	movs	r1, #35	; 0x23
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 fbfc 	bl	8002374 <GYRO_IO_Write>
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001b98:	f000 fba0 	bl	80022dc <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001b9c:	1dfb      	adds	r3, r7, #7
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fc18 	bl	80023d8 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001bb8:	1dfb      	adds	r3, r7, #7
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2124      	movs	r1, #36	; 0x24
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fc0a 	bl	80023d8 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2124      	movs	r1, #36	; 0x24
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fbcd 	bl	8002374 <GYRO_IO_Write>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001bf6:	f107 030f 	add.w	r3, r7, #15
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2120      	movs	r1, #32
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fbb8 	bl	8002374 <GYRO_IO_Write>
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001c1e:	f107 030f 	add.w	r3, r7, #15
 8001c22:	2201      	movs	r2, #1
 8001c24:	2130      	movs	r1, #48	; 0x30
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fbd6 	bl	80023d8 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001c2c:	f107 030e 	add.w	r3, r7, #14
 8001c30:	2201      	movs	r2, #1
 8001c32:	2122      	movs	r1, #34	; 0x22
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fbcf 	bl	80023d8 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	121b      	asrs	r3, r3, #8
 8001c4a:	b25a      	sxtb	r2, r3
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001c58:	7bbb      	ldrb	r3, [r7, #14]
 8001c5a:	f023 0320 	bic.w	r3, r3, #32
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001c6e:	f107 030f 	add.w	r3, r7, #15
 8001c72:	2201      	movs	r2, #1
 8001c74:	2130      	movs	r1, #48	; 0x30
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fb7c 	bl	8002374 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001c7c:	f107 030e 	add.w	r3, r7, #14
 8001c80:	2201      	movs	r2, #1
 8001c82:	2122      	movs	r1, #34	; 0x22
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fb75 	bl	8002374 <GYRO_IO_Write>
}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c9c:	f107 030f 	add.w	r3, r7, #15
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2122      	movs	r1, #34	; 0x22
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fb97 	bl	80023d8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10a      	bne.n	8001cc6 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	e00c      	b.n	8001ce0 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d109      	bne.n	8001ce0 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	f023 0308 	bic.w	r3, r3, #8
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ce0:	f107 030f 	add.w	r3, r7, #15
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2122      	movs	r1, #34	; 0x22
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fb43 	bl	8002374 <GYRO_IO_Write>
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001d00:	f107 030f 	add.w	r3, r7, #15
 8001d04:	2201      	movs	r2, #1
 8001d06:	2122      	movs	r1, #34	; 0x22
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fb65 	bl	80023d8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	e009      	b.n	8001d38 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d106      	bne.n	8001d38 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	f023 0308 	bic.w	r3, r3, #8
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001d38:	f107 030f 	add.w	r3, r7, #15
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2122      	movs	r1, #34	; 0x22
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fb17 	bl	8002374 <GYRO_IO_Write>
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001d58:	f107 030f 	add.w	r3, r7, #15
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2121      	movs	r1, #33	; 0x21
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fb39 	bl	80023d8 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001d7a:	f107 030f 	add.w	r3, r7, #15
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2121      	movs	r1, #33	; 0x21
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 faf6 	bl	8002374 <GYRO_IO_Write>
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001d9a:	f107 030f 	add.w	r3, r7, #15
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2124      	movs	r1, #36	; 0x24
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fb18 	bl	80023d8 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	f023 0310 	bic.w	r3, r3, #16
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001dbc:	f107 030f 	add.w	r3, r7, #15
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2124      	movs	r1, #36	; 0x24
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fad5 	bl	8002374 <GYRO_IO_Write>
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	2300      	movs	r3, #0
 8001de2:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001dfc:	f107 030f 	add.w	r3, r7, #15
 8001e00:	2201      	movs	r2, #1
 8001e02:	2123      	movs	r1, #35	; 0x23
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fae7 	bl	80023d8 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001e0a:	f107 0318 	add.w	r3, r7, #24
 8001e0e:	2206      	movs	r2, #6
 8001e10:	2128      	movs	r1, #40	; 0x28
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fae0 	bl	80023d8 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d123      	bne.n	8001e6a <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
 8001e26:	e01c      	b.n	8001e62 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	3328      	adds	r3, #40	; 0x28
 8001e30:	443b      	add	r3, r7
 8001e32:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	3328      	adds	r3, #40	; 0x28
 8001e42:	443b      	add	r3, r7
 8001e44:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	3328      	adds	r3, #40	; 0x28
 8001e56:	443b      	add	r3, r7
 8001e58:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	623b      	str	r3, [r7, #32]
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	dddf      	ble.n	8001e28 <L3GD20_ReadXYZAngRate+0x54>
 8001e68:	e022      	b.n	8001eb0 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
 8001e6e:	e01c      	b.n	8001eaa <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	3328      	adds	r3, #40	; 0x28
 8001e76:	443b      	add	r3, r7
 8001e78:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	3301      	adds	r3, #1
 8001e88:	3328      	adds	r3, #40	; 0x28
 8001e8a:	443b      	add	r3, r7
 8001e8c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b21a      	sxth	r2, r3
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	3328      	adds	r3, #40	; 0x28
 8001e9e:	443b      	add	r3, r7
 8001ea0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	623b      	str	r3, [r7, #32]
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	dddf      	ble.n	8001e70 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	d00c      	beq.n	8001ed4 <L3GD20_ReadXYZAngRate+0x100>
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	dc0d      	bgt.n	8001eda <L3GD20_ReadXYZAngRate+0x106>
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <L3GD20_ReadXYZAngRate+0xf4>
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d003      	beq.n	8001ece <L3GD20_ReadXYZAngRate+0xfa>
 8001ec6:	e008      	b.n	8001eda <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <L3GD20_ReadXYZAngRate+0x14c>)
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001ecc:	e005      	b.n	8001eda <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <L3GD20_ReadXYZAngRate+0x150>)
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001ed2:	e002      	b.n	8001eda <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <L3GD20_ReadXYZAngRate+0x154>)
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001ed8:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
 8001ede:	e016      	b.n	8001f0e <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	3328      	adds	r3, #40	; 0x28
 8001ee6:	443b      	add	r3, r7
 8001ee8:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001eec:	ee07 3a90 	vmov	s15, r3
 8001ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f04:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	623b      	str	r3, [r7, #32]
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	dde5      	ble.n	8001ee0 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	410c0000 	.word	0x410c0000
 8001f24:	418c0000 	.word	0x418c0000
 8001f28:	428c0000 	.word	0x428c0000

08001f2c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f30:	4819      	ldr	r0, [pc, #100]	; (8001f98 <SPIx_Init+0x6c>)
 8001f32:	f005 fcca 	bl	80078ca <HAL_SPI_GetState>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d12b      	bne.n	8001f94 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <SPIx_Init+0x6c>)
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <SPIx_Init+0x70>)
 8001f40:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <SPIx_Init+0x6c>)
 8001f44:	2218      	movs	r2, #24
 8001f46:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <SPIx_Init+0x6c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <SPIx_Init+0x6c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <SPIx_Init+0x6c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <SPIx_Init+0x6c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <SPIx_Init+0x6c>)
 8001f62:	2207      	movs	r2, #7
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <SPIx_Init+0x6c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <SPIx_Init+0x6c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <SPIx_Init+0x6c>)
 8001f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f78:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <SPIx_Init+0x6c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <SPIx_Init+0x6c>)
 8001f82:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f86:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <SPIx_Init+0x6c>)
 8001f8a:	f000 f873 	bl	8002074 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001f8e:	4802      	ldr	r0, [pc, #8]	; (8001f98 <SPIx_Init+0x6c>)
 8001f90:	f004 fffb 	bl	8006f8a <HAL_SPI_Init>
  } 
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000474 	.word	0x20000474
 8001f9c:	40015000 	.word	0x40015000

08001fa0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <SPIx_Read+0x38>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f107 0108 	add.w	r1, r7, #8
 8001fba:	4808      	ldr	r0, [pc, #32]	; (8001fdc <SPIx_Read+0x3c>)
 8001fbc:	f005 f9d2 	bl	8007364 <HAL_SPI_Receive>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001fca:	f000 f847 	bl	800205c <SPIx_Error>
  }
  
  return readvalue;
 8001fce:	68bb      	ldr	r3, [r7, #8]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000070 	.word	0x20000070
 8001fdc:	20000474 	.word	0x20000474

08001fe0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <SPIx_Write+0x34>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1db9      	adds	r1, r7, #6
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4808      	ldr	r0, [pc, #32]	; (8002018 <SPIx_Write+0x38>)
 8001ff8:	f005 f878 	bl	80070ec <HAL_SPI_Transmit>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002006:	f000 f829 	bl	800205c <SPIx_Error>
  }
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000070 	.word	0x20000070
 8002018:	20000474 	.word	0x20000474

0800201c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af02      	add	r7, sp, #8
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <SPIx_WriteRead+0x38>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f107 020f 	add.w	r2, r7, #15
 8002032:	1df9      	adds	r1, r7, #7
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2301      	movs	r3, #1
 8002038:	4807      	ldr	r0, [pc, #28]	; (8002058 <SPIx_WriteRead+0x3c>)
 800203a:	f005 faa4 	bl	8007586 <HAL_SPI_TransmitReceive>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002044:	f000 f80a 	bl	800205c <SPIx_Error>
  }
  
  return receivedbyte;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000070 	.word	0x20000070
 8002058:	20000474 	.word	0x20000474

0800205c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <SPIx_Error+0x14>)
 8002062:	f005 f81b 	bl	800709c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002066:	f7ff ff61 	bl	8001f2c <SPIx_Init>
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000474 	.word	0x20000474

08002074 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <SPIx_MspInit+0x6c>)
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <SPIx_MspInit+0x6c>)
 8002086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800208a:	6453      	str	r3, [r2, #68]	; 0x44
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <SPIx_MspInit+0x6c>)
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <SPIx_MspInit+0x6c>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <SPIx_MspInit+0x6c>)
 80020a2:	f043 0320 	orr.w	r3, r3, #32
 80020a6:	6313      	str	r3, [r2, #48]	; 0x30
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <SPIx_MspInit+0x6c>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80020b4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80020b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80020be:	2302      	movs	r3, #2
 80020c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80020c2:	2301      	movs	r3, #1
 80020c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80020c6:	2305      	movs	r3, #5
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <SPIx_MspInit+0x70>)
 80020d2:	f001 fe11 	bl	8003cf8 <HAL_GPIO_Init>
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40021400 	.word	0x40021400

080020e8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <LCD_IO_Init+0xe0>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d164      	bne.n	80021c0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80020f6:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <LCD_IO_Init+0xe0>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	4b32      	ldr	r3, [pc, #200]	; (80021cc <LCD_IO_Init+0xe4>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a31      	ldr	r2, [pc, #196]	; (80021cc <LCD_IO_Init+0xe4>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6313      	str	r3, [r2, #48]	; 0x30
 800210c:	4b2f      	ldr	r3, [pc, #188]	; (80021cc <LCD_IO_Init+0xe4>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800211c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800211e:	2301      	movs	r3, #1
 8002120:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4619      	mov	r1, r3
 8002130:	4827      	ldr	r0, [pc, #156]	; (80021d0 <LCD_IO_Init+0xe8>)
 8002132:	f001 fde1 	bl	8003cf8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <LCD_IO_Init+0xe4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a23      	ldr	r2, [pc, #140]	; (80021cc <LCD_IO_Init+0xe4>)
 8002140:	f043 0308 	orr.w	r3, r3, #8
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <LCD_IO_Init+0xe4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002156:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002160:	2302      	movs	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	4619      	mov	r1, r3
 800216a:	4819      	ldr	r0, [pc, #100]	; (80021d0 <LCD_IO_Init+0xe8>)
 800216c:	f001 fdc4 	bl	8003cf8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002170:	2300      	movs	r3, #0
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <LCD_IO_Init+0xe4>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <LCD_IO_Init+0xe4>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6313      	str	r3, [r2, #48]	; 0x30
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <LCD_IO_Init+0xe4>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800218c:	2304      	movs	r3, #4
 800218e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002190:	2301      	movs	r3, #1
 8002192:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002198:	2302      	movs	r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	4619      	mov	r1, r3
 80021a2:	480c      	ldr	r0, [pc, #48]	; (80021d4 <LCD_IO_Init+0xec>)
 80021a4:	f001 fda8 	bl	8003cf8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80021a8:	2200      	movs	r2, #0
 80021aa:	2104      	movs	r1, #4
 80021ac:	4809      	ldr	r0, [pc, #36]	; (80021d4 <LCD_IO_Init+0xec>)
 80021ae:	f002 f85b 	bl	8004268 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80021b2:	2201      	movs	r2, #1
 80021b4:	2104      	movs	r1, #4
 80021b6:	4807      	ldr	r0, [pc, #28]	; (80021d4 <LCD_IO_Init+0xec>)
 80021b8:	f002 f856 	bl	8004268 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80021bc:	f7ff feb6 	bl	8001f2c <SPIx_Init>
  }
}
 80021c0:	bf00      	nop
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200004cc 	.word	0x200004cc
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40020c00 	.word	0x40020c00
 80021d4:	40020800 	.word	0x40020800

080021d8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80021e2:	2201      	movs	r2, #1
 80021e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021e8:	480a      	ldr	r0, [pc, #40]	; (8002214 <LCD_IO_WriteData+0x3c>)
 80021ea:	f002 f83d 	bl	8004268 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80021ee:	2200      	movs	r2, #0
 80021f0:	2104      	movs	r1, #4
 80021f2:	4809      	ldr	r0, [pc, #36]	; (8002218 <LCD_IO_WriteData+0x40>)
 80021f4:	f002 f838 	bl	8004268 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fef0 	bl	8001fe0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002200:	2201      	movs	r2, #1
 8002202:	2104      	movs	r1, #4
 8002204:	4804      	ldr	r0, [pc, #16]	; (8002218 <LCD_IO_WriteData+0x40>)
 8002206:	f002 f82f 	bl	8004268 <HAL_GPIO_WritePin>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40020c00 	.word	0x40020c00
 8002218:	40020800 	.word	0x40020800

0800221c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800222c:	480a      	ldr	r0, [pc, #40]	; (8002258 <LCD_IO_WriteReg+0x3c>)
 800222e:	f002 f81b 	bl	8004268 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002232:	2200      	movs	r2, #0
 8002234:	2104      	movs	r1, #4
 8002236:	4809      	ldr	r0, [pc, #36]	; (800225c <LCD_IO_WriteReg+0x40>)
 8002238:	f002 f816 	bl	8004268 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fecd 	bl	8001fe0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002246:	2201      	movs	r2, #1
 8002248:	2104      	movs	r1, #4
 800224a:	4804      	ldr	r0, [pc, #16]	; (800225c <LCD_IO_WriteReg+0x40>)
 800224c:	f002 f80c 	bl	8004268 <HAL_GPIO_WritePin>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40020c00 	.word	0x40020c00
 800225c:	40020800 	.word	0x40020800

08002260 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	460a      	mov	r2, r1
 800226a:	80fb      	strh	r3, [r7, #6]
 800226c:	4613      	mov	r3, r2
 800226e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002274:	2200      	movs	r2, #0
 8002276:	2104      	movs	r1, #4
 8002278:	4810      	ldr	r0, [pc, #64]	; (80022bc <LCD_IO_ReadData+0x5c>)
 800227a:	f001 fff5 	bl	8004268 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002284:	480e      	ldr	r0, [pc, #56]	; (80022c0 <LCD_IO_ReadData+0x60>)
 8002286:	f001 ffef 	bl	8004268 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fea7 	bl	8001fe0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002292:	797b      	ldrb	r3, [r7, #5]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fe83 	bl	8001fa0 <SPIx_Read>
 800229a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800229c:	2201      	movs	r2, #1
 800229e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022a2:	4807      	ldr	r0, [pc, #28]	; (80022c0 <LCD_IO_ReadData+0x60>)
 80022a4:	f001 ffe0 	bl	8004268 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022a8:	2201      	movs	r2, #1
 80022aa:	2104      	movs	r1, #4
 80022ac:	4803      	ldr	r0, [pc, #12]	; (80022bc <LCD_IO_ReadData+0x5c>)
 80022ae:	f001 ffdb 	bl	8004268 <HAL_GPIO_WritePin>
  
  return readvalue;
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40020800 	.word	0x40020800
 80022c0:	40020c00 	.word	0x40020c00

080022c4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 ffb9 	bl	8003244 <HAL_Delay>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <GYRO_IO_Init+0x8c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <GYRO_IO_Init+0x8c>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <GYRO_IO_Init+0x8c>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80022fe:	2302      	movs	r3, #2
 8002300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800230a:	2301      	movs	r3, #1
 800230c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	4619      	mov	r1, r3
 8002314:	4815      	ldr	r0, [pc, #84]	; (800236c <GYRO_IO_Init+0x90>)
 8002316:	f001 fcef 	bl	8003cf8 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 800231a:	2201      	movs	r2, #1
 800231c:	2102      	movs	r1, #2
 800231e:	4813      	ldr	r0, [pc, #76]	; (800236c <GYRO_IO_Init+0x90>)
 8002320:	f001 ffa2 	bl	8004268 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <GYRO_IO_Init+0x8c>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <GYRO_IO_Init+0x8c>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6313      	str	r3, [r2, #48]	; 0x30
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <GYRO_IO_Init+0x8c>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002340:	2306      	movs	r3, #6
 8002342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002348:	2302      	movs	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	4619      	mov	r1, r3
 8002356:	4806      	ldr	r0, [pc, #24]	; (8002370 <GYRO_IO_Init+0x94>)
 8002358:	f001 fcce 	bl	8003cf8 <HAL_GPIO_Init>

  SPIx_Init();
 800235c:	f7ff fde6 	bl	8001f2c <SPIx_Init>
}
 8002360:	bf00      	nop
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	40020800 	.word	0x40020800
 8002370:	40020000 	.word	0x40020000

08002374 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
 8002380:	4613      	mov	r3, r2
 8002382:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002384:	883b      	ldrh	r3, [r7, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d903      	bls.n	8002392 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002390:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002392:	2200      	movs	r2, #0
 8002394:	2102      	movs	r1, #2
 8002396:	480f      	ldr	r0, [pc, #60]	; (80023d4 <GYRO_IO_Write+0x60>)
 8002398:	f001 ff66 	bl	8004268 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fe3c 	bl	800201c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80023a4:	e00a      	b.n	80023bc <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fe36 	bl	800201c <SPIx_WriteRead>
    NumByteToWrite--;
 80023b0:	883b      	ldrh	r3, [r7, #0]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3301      	adds	r3, #1
 80023ba:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80023bc:	883b      	ldrh	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f1      	bne.n	80023a6 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80023c2:	2201      	movs	r2, #1
 80023c4:	2102      	movs	r1, #2
 80023c6:	4803      	ldr	r0, [pc, #12]	; (80023d4 <GYRO_IO_Write+0x60>)
 80023c8:	f001 ff4e 	bl	8004268 <HAL_GPIO_WritePin>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40020800 	.word	0x40020800

080023d8 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
 80023e4:	4613      	mov	r3, r2
 80023e6:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80023e8:	883b      	ldrh	r3, [r7, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d904      	bls.n	80023f8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80023f4:	70fb      	strb	r3, [r7, #3]
 80023f6:	e003      	b.n	8002400 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023fe:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002400:	2200      	movs	r2, #0
 8002402:	2102      	movs	r1, #2
 8002404:	4810      	ldr	r0, [pc, #64]	; (8002448 <GYRO_IO_Read+0x70>)
 8002406:	f001 ff2f 	bl	8004268 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fe05 	bl	800201c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002412:	e00c      	b.n	800242e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002414:	2000      	movs	r0, #0
 8002416:	f7ff fe01 	bl	800201c <SPIx_WriteRead>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002422:	883b      	ldrh	r3, [r7, #0]
 8002424:	3b01      	subs	r3, #1
 8002426:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3301      	adds	r3, #1
 800242c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800242e:	883b      	ldrh	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ef      	bne.n	8002414 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002434:	2201      	movs	r2, #1
 8002436:	2102      	movs	r1, #2
 8002438:	4803      	ldr	r0, [pc, #12]	; (8002448 <GYRO_IO_Read+0x70>)
 800243a:	f001 ff15 	bl	8004268 <HAL_GPIO_WritePin>
}  
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40020800 	.word	0x40020800

0800244c <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002456:	2300      	movs	r3, #0
 8002458:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 800245a:	2300      	movs	r3, #0
 800245c:	703b      	strb	r3, [r7, #0]
 800245e:	2300      	movs	r3, #0
 8002460:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <BSP_GYRO_Init+0xc4>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4798      	blx	r3
 8002468:	4603      	mov	r3, r0
 800246a:	2bd4      	cmp	r3, #212	; 0xd4
 800246c:	d005      	beq.n	800247a <BSP_GYRO_Init+0x2e>
 800246e:	4b28      	ldr	r3, [pc, #160]	; (8002510 <BSP_GYRO_Init+0xc4>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	4798      	blx	r3
 8002474:	4603      	mov	r3, r0
 8002476:	2bd5      	cmp	r3, #213	; 0xd5
 8002478:	d145      	bne.n	8002506 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <BSP_GYRO_Init+0xc8>)
 800247c:	4a24      	ldr	r2, [pc, #144]	; (8002510 <BSP_GYRO_Init+0xc4>)
 800247e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002480:	2308      	movs	r3, #8
 8002482:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002484:	2300      	movs	r3, #0
 8002486:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002488:	2307      	movs	r3, #7
 800248a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 800248c:	2330      	movs	r3, #48	; 0x30
 800248e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002490:	2300      	movs	r3, #0
 8002492:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002494:	2300      	movs	r3, #0
 8002496:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002498:	2310      	movs	r3, #16
 800249a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800249c:	793a      	ldrb	r2, [r7, #4]
 800249e:	797b      	ldrb	r3, [r7, #5]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80024a4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80024aa:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80024b2:	7a3a      	ldrb	r2, [r7, #8]
 80024b4:	7a7b      	ldrb	r3, [r7, #9]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80024ba:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80024bc:	4313      	orrs	r3, r2
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	89bb      	ldrh	r3, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <BSP_GYRO_Init+0xc8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	89ba      	ldrh	r2, [r7, #12]
 80024d4:	4610      	mov	r0, r2
 80024d6:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80024d8:	2300      	movs	r3, #0
 80024da:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80024dc:	2300      	movs	r3, #0
 80024de:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80024e0:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80024e2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80024e4:	4313      	orrs	r3, r2
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <BSP_GYRO_Init+0xc8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	89ba      	ldrh	r2, [r7, #12]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	4610      	mov	r0, r2
 80024f6:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <BSP_GYRO_Init+0xc8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	2010      	movs	r0, #16
 8002500:	4798      	blx	r3

    ret = GYRO_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2000003c 	.word	0x2000003c
 8002514:	200004d0 	.word	0x200004d0

08002518 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <BSP_GYRO_GetXYZ+0x24>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <BSP_GYRO_GetXYZ+0x24>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
  }
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200004d0 	.word	0x200004d0

08002540 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <BSP_LCD_Init+0xbc>)
 8002546:	4a2e      	ldr	r2, [pc, #184]	; (8002600 <BSP_LCD_Init+0xc0>)
 8002548:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800254a:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <BSP_LCD_Init+0xbc>)
 800254c:	2209      	movs	r2, #9
 800254e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002550:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <BSP_LCD_Init+0xbc>)
 8002552:	2201      	movs	r2, #1
 8002554:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <BSP_LCD_Init+0xbc>)
 8002558:	221d      	movs	r2, #29
 800255a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <BSP_LCD_Init+0xbc>)
 800255e:	2203      	movs	r2, #3
 8002560:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <BSP_LCD_Init+0xbc>)
 8002564:	f240 120d 	movw	r2, #269	; 0x10d
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800256a:	4b24      	ldr	r3, [pc, #144]	; (80025fc <BSP_LCD_Init+0xbc>)
 800256c:	f240 1243 	movw	r2, #323	; 0x143
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <BSP_LCD_Init+0xbc>)
 8002574:	f240 1217 	movw	r2, #279	; 0x117
 8002578:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800257a:	4b20      	ldr	r3, [pc, #128]	; (80025fc <BSP_LCD_Init+0xbc>)
 800257c:	f240 1247 	movw	r2, #327	; 0x147
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002582:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <BSP_LCD_Init+0xbc>)
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <BSP_LCD_Init+0xbc>)
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <BSP_LCD_Init+0xbc>)
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <BSP_LCD_Init+0xc4>)
 800259c:	2208      	movs	r2, #8
 800259e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <BSP_LCD_Init+0xc4>)
 80025a2:	22c0      	movs	r2, #192	; 0xc0
 80025a4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <BSP_LCD_Init+0xc4>)
 80025a8:	2204      	movs	r2, #4
 80025aa:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <BSP_LCD_Init+0xc4>)
 80025ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80025b4:	4813      	ldr	r0, [pc, #76]	; (8002604 <BSP_LCD_Init+0xc4>)
 80025b6:	f004 fa8d 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <BSP_LCD_Init+0xbc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <BSP_LCD_Init+0xbc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <BSP_LCD_Init+0xbc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <BSP_LCD_Init+0xbc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80025d2:	f000 faf7 	bl	8002bc4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80025d6:	4809      	ldr	r0, [pc, #36]	; (80025fc <BSP_LCD_Init+0xbc>)
 80025d8:	f002 f820 	bl	800461c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <BSP_LCD_Init+0xc8>)
 80025de:	4a0b      	ldr	r2, [pc, #44]	; (800260c <BSP_LCD_Init+0xcc>)
 80025e0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <BSP_LCD_Init+0xc8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80025ea:	f000 fc1f 	bl	8002e2c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80025ee:	4808      	ldr	r0, [pc, #32]	; (8002610 <BSP_LCD_Init+0xd0>)
 80025f0:	f000 f8ce 	bl	8002790 <BSP_LCD_SetFont>

  return LCD_OK;
 80025f4:	2300      	movs	r3, #0
}  
 80025f6:	4618      	mov	r0, r3
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200004d4 	.word	0x200004d4
 8002600:	40016800 	.word	0x40016800
 8002604:	200005bc 	.word	0x200005bc
 8002608:	20000608 	.word	0x20000608
 800260c:	20000004 	.word	0x20000004
 8002610:	20000074 	.word	0x20000074

08002614 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <BSP_LCD_GetXSize+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	4798      	blx	r3
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000608 	.word	0x20000608

0800262c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <BSP_LCD_GetYSize+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	4798      	blx	r3
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000608 	.word	0x20000608

08002644 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002644:	b580      	push	{r7, lr}
 8002646:	b090      	sub	sp, #64	; 0x40
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002654:	f7ff ffde 	bl	8002614 <BSP_LCD_GetXSize>
 8002658:	4603      	mov	r3, r0
 800265a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002660:	f7ff ffe4 	bl	800262c <BSP_LCD_GetYSize>
 8002664:	4603      	mov	r3, r0
 8002666:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002670:	23ff      	movs	r3, #255	; 0xff
 8002672:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800268a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002690:	2307      	movs	r3, #7
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002694:	f7ff ffbe 	bl	8002614 <BSP_LCD_GetXSize>
 8002698:	4603      	mov	r3, r0
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800269c:	f7ff ffc6 	bl	800262c <BSP_LCD_GetYSize>
 80026a0:	4603      	mov	r3, r0
 80026a2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80026a4:	88fa      	ldrh	r2, [r7, #6]
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	4619      	mov	r1, r3
 80026ac:	4814      	ldr	r0, [pc, #80]	; (8002700 <BSP_LCD_LayerDefaultInit+0xbc>)
 80026ae:	f002 f88f 	bl	80047d0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	4913      	ldr	r1, [pc, #76]	; (8002704 <BSP_LCD_LayerDefaultInit+0xc0>)
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3304      	adds	r3, #4
 80026c2:	f04f 32ff 	mov.w	r2, #4294967295
 80026c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	490e      	ldr	r1, [pc, #56]	; (8002704 <BSP_LCD_LayerDefaultInit+0xc0>)
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3308      	adds	r3, #8
 80026d8:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <BSP_LCD_LayerDefaultInit+0xc4>)
 80026da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	4909      	ldr	r1, [pc, #36]	; (8002704 <BSP_LCD_LayerDefaultInit+0xc0>)
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80026ee:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80026f0:	4803      	ldr	r0, [pc, #12]	; (8002700 <BSP_LCD_LayerDefaultInit+0xbc>)
 80026f2:	f002 f8ab 	bl	800484c <HAL_LTDC_EnableDither>
}
 80026f6:	bf00      	nop
 80026f8:	3740      	adds	r7, #64	; 0x40
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200004d4 	.word	0x200004d4
 8002704:	200005f0 	.word	0x200005f0
 8002708:	20000074 	.word	0x20000074

0800270c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <BSP_LCD_SelectLayer+0x1c>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6013      	str	r3, [r2, #0]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	200005ec 	.word	0x200005ec

0800272c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <BSP_LCD_SetTextColor+0x28>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4907      	ldr	r1, [pc, #28]	; (8002758 <BSP_LCD_SetTextColor+0x2c>)
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	601a      	str	r2, [r3, #0]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	200005ec 	.word	0x200005ec
 8002758:	200005f0 	.word	0x200005f0

0800275c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <BSP_LCD_SetBackColor+0x2c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4908      	ldr	r1, [pc, #32]	; (800278c <BSP_LCD_SetBackColor+0x30>)
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	3304      	adds	r3, #4
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	200005ec 	.word	0x200005ec
 800278c:	200005f0 	.word	0x200005f0

08002790 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <BSP_LCD_SetFont+0x2c>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4908      	ldr	r1, [pc, #32]	; (80027c0 <BSP_LCD_SetFont+0x30>)
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3308      	adds	r3, #8
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	601a      	str	r2, [r3, #0]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	200005ec 	.word	0x200005ec
 80027c0:	200005f0 	.word	0x200005f0

080027c4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80027c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <BSP_LCD_Clear+0x48>)
 80027ce:	681c      	ldr	r4, [r3, #0]
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <BSP_LCD_Clear+0x48>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <BSP_LCD_Clear+0x4c>)
 80027d6:	2134      	movs	r1, #52	; 0x34
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	335c      	adds	r3, #92	; 0x5c
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	461e      	mov	r6, r3
 80027e4:	f7ff ff16 	bl	8002614 <BSP_LCD_GetXSize>
 80027e8:	4605      	mov	r5, r0
 80027ea:	f7ff ff1f 	bl	800262c <BSP_LCD_GetYSize>
 80027ee:	4602      	mov	r2, r0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	2300      	movs	r3, #0
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	462a      	mov	r2, r5
 80027fc:	4631      	mov	r1, r6
 80027fe:	4620      	mov	r0, r4
 8002800:	f000 fadc 	bl	8002dbc <FillBuffer>
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280c:	200005ec 	.word	0x200005ec
 8002810:	200004d4 	.word	0x200004d4

08002814 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002814:	b5b0      	push	{r4, r5, r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af02      	add	r7, sp, #8
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]
 800281e:	460b      	mov	r3, r1
 8002820:	80bb      	strh	r3, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <BSP_LCD_DrawHLine+0x70>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a16      	ldr	r2, [pc, #88]	; (8002888 <BSP_LCD_DrawHLine+0x74>)
 8002830:	2134      	movs	r1, #52	; 0x34
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	335c      	adds	r3, #92	; 0x5c
 800283a:	681c      	ldr	r4, [r3, #0]
 800283c:	f7ff feea 	bl	8002614 <BSP_LCD_GetXSize>
 8002840:	4602      	mov	r2, r0
 8002842:	88bb      	ldrh	r3, [r7, #4]
 8002844:	fb03 f202 	mul.w	r2, r3, r2
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4423      	add	r3, r4
 8002850:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <BSP_LCD_DrawHLine+0x70>)
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	68f9      	ldr	r1, [r7, #12]
 8002858:	887c      	ldrh	r4, [r7, #2]
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <BSP_LCD_DrawHLine+0x70>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4d0b      	ldr	r5, [pc, #44]	; (800288c <BSP_LCD_DrawHLine+0x78>)
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	442b      	add	r3, r5
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2300      	movs	r3, #0
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2301      	movs	r3, #1
 8002874:	4622      	mov	r2, r4
 8002876:	f000 faa1 	bl	8002dbc <FillBuffer>
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bdb0      	pop	{r4, r5, r7, pc}
 8002882:	bf00      	nop
 8002884:	200005ec 	.word	0x200005ec
 8002888:	200004d4 	.word	0x200004d4
 800288c:	200005f0 	.word	0x200005f0

08002890 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
 800289a:	460b      	mov	r3, r1
 800289c:	80bb      	strh	r3, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	f1c3 0303 	rsb	r3, r3, #3
 80028aa:	617b      	str	r3, [r7, #20]
  curx = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80028b4:	e0c7      	b.n	8002a46 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	4413      	add	r3, r2
 80028be:	b298      	uxth	r0, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	88ba      	ldrh	r2, [r7, #4]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	b299      	uxth	r1, r3
 80028ca:	4b64      	ldr	r3, [pc, #400]	; (8002a5c <BSP_LCD_DrawCircle+0x1cc>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4c64      	ldr	r4, [pc, #400]	; (8002a60 <BSP_LCD_DrawCircle+0x1d0>)
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4423      	add	r3, r4
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	f000 fa47 	bl	8002d70 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	88fa      	ldrh	r2, [r7, #6]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	b298      	uxth	r0, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	88ba      	ldrh	r2, [r7, #4]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	b299      	uxth	r1, r3
 80028f6:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <BSP_LCD_DrawCircle+0x1cc>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4c59      	ldr	r4, [pc, #356]	; (8002a60 <BSP_LCD_DrawCircle+0x1d0>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4423      	add	r3, r4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	f000 fa31 	bl	8002d70 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	b29a      	uxth	r2, r3
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	4413      	add	r3, r2
 8002916:	b298      	uxth	r0, r3
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	b29b      	uxth	r3, r3
 800291c:	88ba      	ldrh	r2, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	b299      	uxth	r1, r3
 8002922:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <BSP_LCD_DrawCircle+0x1cc>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4c4e      	ldr	r4, [pc, #312]	; (8002a60 <BSP_LCD_DrawCircle+0x1d0>)
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4423      	add	r3, r4
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	f000 fa1b 	bl	8002d70 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	b29b      	uxth	r3, r3
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	b298      	uxth	r0, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	b29b      	uxth	r3, r3
 8002948:	88ba      	ldrh	r2, [r7, #4]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	b299      	uxth	r1, r3
 800294e:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <BSP_LCD_DrawCircle+0x1cc>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4c43      	ldr	r4, [pc, #268]	; (8002a60 <BSP_LCD_DrawCircle+0x1d0>)
 8002954:	4613      	mov	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4423      	add	r3, r4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	f000 fa05 	bl	8002d70 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	b29a      	uxth	r2, r3
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	4413      	add	r3, r2
 800296e:	b298      	uxth	r0, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	b29a      	uxth	r2, r3
 8002974:	88bb      	ldrh	r3, [r7, #4]
 8002976:	4413      	add	r3, r2
 8002978:	b299      	uxth	r1, r3
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <BSP_LCD_DrawCircle+0x1cc>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4c38      	ldr	r4, [pc, #224]	; (8002a60 <BSP_LCD_DrawCircle+0x1d0>)
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4423      	add	r3, r4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	f000 f9ef 	bl	8002d70 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	b29b      	uxth	r3, r3
 8002996:	88fa      	ldrh	r2, [r7, #6]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	b298      	uxth	r0, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	88bb      	ldrh	r3, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	b299      	uxth	r1, r3
 80029a6:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <BSP_LCD_DrawCircle+0x1cc>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4c2d      	ldr	r4, [pc, #180]	; (8002a60 <BSP_LCD_DrawCircle+0x1d0>)
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4423      	add	r3, r4
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	f000 f9d9 	bl	8002d70 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	4413      	add	r3, r2
 80029c6:	b298      	uxth	r0, r3
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	88bb      	ldrh	r3, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	b299      	uxth	r1, r3
 80029d2:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <BSP_LCD_DrawCircle+0x1cc>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4c22      	ldr	r4, [pc, #136]	; (8002a60 <BSP_LCD_DrawCircle+0x1d0>)
 80029d8:	4613      	mov	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4423      	add	r3, r4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	f000 f9c3 	bl	8002d70 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	b298      	uxth	r0, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	88bb      	ldrh	r3, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	b299      	uxth	r1, r3
 80029fe:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <BSP_LCD_DrawCircle+0x1cc>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4c17      	ldr	r4, [pc, #92]	; (8002a60 <BSP_LCD_DrawCircle+0x1d0>)
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4423      	add	r3, r4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	f000 f9ad 	bl	8002d70 <BSP_LCD_DrawPixel>

    if (d < 0)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	da06      	bge.n	8002a2a <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	009a      	lsls	r2, r3, #2
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4413      	add	r3, r2
 8002a24:	3306      	adds	r3, #6
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e00a      	b.n	8002a40 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	009a      	lsls	r2, r3, #2
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4413      	add	r3, r2
 8002a36:	330a      	adds	r3, #10
 8002a38:	617b      	str	r3, [r7, #20]
      cury--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	3301      	adds	r3, #1
 8002a44:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	f67f af33 	bls.w	80028b6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200005ec 	.word	0x200005ec
 8002a60:	200005f0 	.word	0x200005f0

08002a64 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	80fb      	strh	r3, [r7, #6]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	80bb      	strh	r3, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002a76:	887b      	ldrh	r3, [r7, #2]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	f1c3 0303 	rsb	r3, r3, #3
 8002a7e:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002a84:	887b      	ldrh	r3, [r7, #2]
 8002a86:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002a88:	4b44      	ldr	r3, [pc, #272]	; (8002b9c <BSP_LCD_FillCircle+0x138>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4944      	ldr	r1, [pc, #272]	; (8002ba0 <BSP_LCD_FillCircle+0x13c>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fe46 	bl	800272c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002aa0:	e061      	b.n	8002b66 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d021      	beq.n	8002aec <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	88fa      	ldrh	r2, [r7, #6]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	b298      	uxth	r0, r3
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	88bb      	ldrh	r3, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	b299      	uxth	r1, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f7ff fea5 	bl	8002814 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	b298      	uxth	r0, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	88ba      	ldrh	r2, [r7, #4]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	b299      	uxth	r1, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f7ff fe94 	bl	8002814 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d021      	beq.n	8002b36 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	b298      	uxth	r0, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	88ba      	ldrh	r2, [r7, #4]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	b299      	uxth	r1, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f7ff fe80 	bl	8002814 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	b298      	uxth	r0, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	88bb      	ldrh	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	b299      	uxth	r1, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	f7ff fe6f 	bl	8002814 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	da06      	bge.n	8002b4a <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	009a      	lsls	r2, r3, #2
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	4413      	add	r3, r2
 8002b44:	3306      	adds	r3, #6
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	e00a      	b.n	8002b60 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	009a      	lsls	r2, r3, #2
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	4413      	add	r3, r2
 8002b56:	330a      	adds	r3, #10
 8002b58:	617b      	str	r3, [r7, #20]
      cury--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	3301      	adds	r3, #1
 8002b64:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d999      	bls.n	8002aa2 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <BSP_LCD_FillCircle+0x138>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	490b      	ldr	r1, [pc, #44]	; (8002ba0 <BSP_LCD_FillCircle+0x13c>)
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fdd3 	bl	800272c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	88b9      	ldrh	r1, [r7, #4]
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fe7f 	bl	8002890 <BSP_LCD_DrawCircle>
}
 8002b92:	bf00      	nop
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200005ec 	.word	0x200005ec
 8002ba0:	200005f0 	.word	0x200005f0

08002ba4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <BSP_LCD_DisplayOn+0x1c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002bb2:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <BSP_LCD_DisplayOn+0x1c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4798      	blx	r3
  }
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000608 	.word	0x20000608

08002bc4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08e      	sub	sp, #56	; 0x38
 8002bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a60      	ldr	r2, [pc, #384]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b5e      	ldr	r3, [pc, #376]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	4b5a      	ldr	r3, [pc, #360]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a59      	ldr	r2, [pc, #356]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b57      	ldr	r3, [pc, #348]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4a4b      	ldr	r2, [pc, #300]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2e:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	4b45      	ldr	r3, [pc, #276]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a44      	ldr	r2, [pc, #272]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a3d      	ldr	r2, [pc, #244]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a36      	ldr	r2, [pc, #216]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c7c:	f043 0320 	orr.w	r3, r3, #32
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a2f      	ldr	r2, [pc, #188]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <BSP_LCD_MspInit+0x190>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	607b      	str	r3, [r7, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002caa:	f641 0358 	movw	r3, #6232	; 0x1858
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002cbc:	230e      	movs	r3, #14
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4824      	ldr	r0, [pc, #144]	; (8002d58 <BSP_LCD_MspInit+0x194>)
 8002cc8:	f001 f816 	bl	8003cf8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002ccc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4820      	ldr	r0, [pc, #128]	; (8002d5c <BSP_LCD_MspInit+0x198>)
 8002cda:	f001 f80d 	bl	8003cf8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002cde:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce8:	4619      	mov	r1, r3
 8002cea:	481d      	ldr	r0, [pc, #116]	; (8002d60 <BSP_LCD_MspInit+0x19c>)
 8002cec:	f001 f804 	bl	8003cf8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002cf0:	2348      	movs	r3, #72	; 0x48
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	481a      	ldr	r0, [pc, #104]	; (8002d64 <BSP_LCD_MspInit+0x1a0>)
 8002cfc:	f000 fffc 	bl	8003cf8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4816      	ldr	r0, [pc, #88]	; (8002d68 <BSP_LCD_MspInit+0x1a4>)
 8002d0e:	f000 fff3 	bl	8003cf8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002d12:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4813      	ldr	r0, [pc, #76]	; (8002d6c <BSP_LCD_MspInit+0x1a8>)
 8002d20:	f000 ffea 	bl	8003cf8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002d24:	2303      	movs	r3, #3
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002d28:	2309      	movs	r3, #9
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d30:	4619      	mov	r1, r3
 8002d32:	480a      	ldr	r0, [pc, #40]	; (8002d5c <BSP_LCD_MspInit+0x198>)
 8002d34:	f000 ffe0 	bl	8003cf8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002d38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d42:	4619      	mov	r1, r3
 8002d44:	4809      	ldr	r0, [pc, #36]	; (8002d6c <BSP_LCD_MspInit+0x1a8>)
 8002d46:	f000 ffd7 	bl	8003cf8 <HAL_GPIO_Init>
}
 8002d4a:	bf00      	nop
 8002d4c:	3738      	adds	r7, #56	; 0x38
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	40020400 	.word	0x40020400
 8002d60:	40020800 	.word	0x40020800
 8002d64:	40020c00 	.word	0x40020c00
 8002d68:	40021400 	.word	0x40021400
 8002d6c:	40021800 	.word	0x40021800

08002d70 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002d70:	b5b0      	push	{r4, r5, r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	603a      	str	r2, [r7, #0]
 8002d7a:	80fb      	strh	r3, [r7, #6]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <BSP_LCD_DrawPixel+0x44>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <BSP_LCD_DrawPixel+0x48>)
 8002d86:	2134      	movs	r1, #52	; 0x34
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	335c      	adds	r3, #92	; 0x5c
 8002d90:	681c      	ldr	r4, [r3, #0]
 8002d92:	88bd      	ldrh	r5, [r7, #4]
 8002d94:	f7ff fc3e 	bl	8002614 <BSP_LCD_GetXSize>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	fb03 f205 	mul.w	r2, r3, r5
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4423      	add	r3, r4
 8002da6:	461a      	mov	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bdb0      	pop	{r4, r5, r7, pc}
 8002db4:	200005ec 	.word	0x200005ec
 8002db8:	200004d4 	.word	0x200004d4

08002dbc <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <FillBuffer+0x68>)
 8002dcc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002dd0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <FillBuffer+0x68>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002dd8:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <FillBuffer+0x68>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <FillBuffer+0x68>)
 8002de0:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <FillBuffer+0x6c>)
 8002de2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002de4:	480f      	ldr	r0, [pc, #60]	; (8002e24 <FillBuffer+0x68>)
 8002de6:	f000 fcf1 	bl	80037cc <HAL_DMA2D_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d115      	bne.n	8002e1c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002df0:	68f9      	ldr	r1, [r7, #12]
 8002df2:	480c      	ldr	r0, [pc, #48]	; (8002e24 <FillBuffer+0x68>)
 8002df4:	f000 fe52 	bl	8003a9c <HAL_DMA2D_ConfigLayer>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10e      	bne.n	8002e1c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69f9      	ldr	r1, [r7, #28]
 8002e08:	4806      	ldr	r0, [pc, #24]	; (8002e24 <FillBuffer+0x68>)
 8002e0a:	f000 fd32 	bl	8003872 <HAL_DMA2D_Start>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002e14:	210a      	movs	r1, #10
 8002e16:	4803      	ldr	r0, [pc, #12]	; (8002e24 <FillBuffer+0x68>)
 8002e18:	f000 fd56 	bl	80038c8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	2000057c 	.word	0x2000057c
 8002e28:	4002b000 	.word	0x4002b000

08002e2c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002e30:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002e32:	4a2a      	ldr	r2, [pc, #168]	; (8002edc <BSP_SDRAM_Init+0xb0>)
 8002e34:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002e36:	4b2a      	ldr	r3, [pc, #168]	; (8002ee0 <BSP_SDRAM_Init+0xb4>)
 8002e38:	2202      	movs	r2, #2
 8002e3a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <BSP_SDRAM_Init+0xb4>)
 8002e3e:	2207      	movs	r2, #7
 8002e40:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002e42:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <BSP_SDRAM_Init+0xb4>)
 8002e44:	2204      	movs	r2, #4
 8002e46:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <BSP_SDRAM_Init+0xb4>)
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <BSP_SDRAM_Init+0xb4>)
 8002e50:	2202      	movs	r2, #2
 8002e52:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002e54:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <BSP_SDRAM_Init+0xb4>)
 8002e56:	2202      	movs	r2, #2
 8002e58:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002e5a:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <BSP_SDRAM_Init+0xb4>)
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002e60:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002e66:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002e6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002e6e:	2204      	movs	r2, #4
 8002e70:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002e72:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002e74:	2210      	movs	r2, #16
 8002e76:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002e78:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002e80:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002e84:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e92:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002e94:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ea0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	480c      	ldr	r0, [pc, #48]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002ea6:	f000 f87f 	bl	8002fa8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002eaa:	490d      	ldr	r1, [pc, #52]	; (8002ee0 <BSP_SDRAM_Init+0xb4>)
 8002eac:	480a      	ldr	r0, [pc, #40]	; (8002ed8 <BSP_SDRAM_Init+0xac>)
 8002eae:	f003 ffd1 	bl	8006e54 <HAL_SDRAM_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <BSP_SDRAM_Init+0xb8>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e002      	b.n	8002ec6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <BSP_SDRAM_Init+0xb8>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002ec6:	f240 506a 	movw	r0, #1386	; 0x56a
 8002eca:	f000 f80d 	bl	8002ee8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002ece:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <BSP_SDRAM_Init+0xb8>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	2000060c 	.word	0x2000060c
 8002edc:	a0000140 	.word	0xa0000140
 8002ee0:	20000640 	.word	0x20000640
 8002ee4:	2000007c 	.word	0x2000007c

08002ee8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002efc:	2208      	movs	r2, #8
 8002efe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002f06:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f10:	4923      	ldr	r1, [pc, #140]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f12:	4824      	ldr	r0, [pc, #144]	; (8002fa4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f14:	f003 ffdc 	bl	8006ed0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f000 f993 	bl	8003244 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f20:	2202      	movs	r2, #2
 8002f22:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002f24:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f26:	2208      	movs	r2, #8
 8002f28:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002f30:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f3a:	4919      	ldr	r1, [pc, #100]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f3c:	4819      	ldr	r0, [pc, #100]	; (8002fa4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f3e:	f003 ffc7 	bl	8006ed0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002f42:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f44:	2203      	movs	r2, #3
 8002f46:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002f48:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f50:	2204      	movs	r2, #4
 8002f52:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f5e:	4910      	ldr	r1, [pc, #64]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f60:	4810      	ldr	r0, [pc, #64]	; (8002fa4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f62:	f003 ffb5 	bl	8006ed0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002f66:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002f6a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f6e:	2204      	movs	r2, #4
 8002f70:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f74:	2208      	movs	r2, #8
 8002f76:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f82:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f88:	4905      	ldr	r1, [pc, #20]	; (8002fa0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f8a:	4806      	ldr	r0, [pc, #24]	; (8002fa4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f8c:	f003 ffa0 	bl	8006ed0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4804      	ldr	r0, [pc, #16]	; (8002fa4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f94:	f003 ffd1 	bl	8006f3a <HAL_SDRAM_ProgramRefreshRate>
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	2000065c 	.word	0x2000065c
 8002fa4:	2000060c 	.word	0x2000060c

08002fa8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b090      	sub	sp, #64	; 0x40
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80ec 	beq.w	8003192 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fbe:	4b77      	ldr	r3, [pc, #476]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	4a76      	ldr	r2, [pc, #472]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6393      	str	r3, [r2, #56]	; 0x38
 8002fca:	4b74      	ldr	r3, [pc, #464]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fda:	4b70      	ldr	r3, [pc, #448]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a6f      	ldr	r2, [pc, #444]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8002fe0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b6d      	ldr	r3, [pc, #436]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	623b      	str	r3, [r7, #32]
 8002ff6:	4b69      	ldr	r3, [pc, #420]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a68      	ldr	r2, [pc, #416]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b66      	ldr	r3, [pc, #408]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	623b      	str	r3, [r7, #32]
 800300c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	4b62      	ldr	r3, [pc, #392]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a61      	ldr	r2, [pc, #388]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003018:	f043 0304 	orr.w	r3, r3, #4
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4b5f      	ldr	r3, [pc, #380]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	4b5b      	ldr	r3, [pc, #364]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a5a      	ldr	r2, [pc, #360]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003034:	f043 0308 	orr.w	r3, r3, #8
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b58      	ldr	r3, [pc, #352]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	4b54      	ldr	r3, [pc, #336]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a53      	ldr	r2, [pc, #332]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003050:	f043 0310 	orr.w	r3, r3, #16
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b51      	ldr	r3, [pc, #324]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	4b4d      	ldr	r3, [pc, #308]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a4c      	ldr	r2, [pc, #304]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 800306c:	f043 0320 	orr.w	r3, r3, #32
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b4a      	ldr	r3, [pc, #296]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b46      	ldr	r3, [pc, #280]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a45      	ldr	r2, [pc, #276]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b43      	ldr	r3, [pc, #268]	; (800319c <BSP_SDRAM_MspInit+0x1f4>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800309e:	2302      	movs	r3, #2
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80030a6:	230c      	movs	r3, #12
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80030aa:	2360      	movs	r3, #96	; 0x60
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80030ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030b2:	4619      	mov	r1, r3
 80030b4:	483a      	ldr	r0, [pc, #232]	; (80031a0 <BSP_SDRAM_MspInit+0x1f8>)
 80030b6:	f000 fe1f 	bl	8003cf8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80030ba:	2301      	movs	r3, #1
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80030be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030c2:	4619      	mov	r1, r3
 80030c4:	4837      	ldr	r0, [pc, #220]	; (80031a4 <BSP_SDRAM_MspInit+0x1fc>)
 80030c6:	f000 fe17 	bl	8003cf8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80030ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80030d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030d4:	4619      	mov	r1, r3
 80030d6:	4834      	ldr	r0, [pc, #208]	; (80031a8 <BSP_SDRAM_MspInit+0x200>)
 80030d8:	f000 fe0e 	bl	8003cf8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80030dc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80030e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e6:	4619      	mov	r1, r3
 80030e8:	4830      	ldr	r0, [pc, #192]	; (80031ac <BSP_SDRAM_MspInit+0x204>)
 80030ea:	f000 fe05 	bl	8003cf8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80030ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80030f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030f8:	4619      	mov	r1, r3
 80030fa:	482d      	ldr	r0, [pc, #180]	; (80031b0 <BSP_SDRAM_MspInit+0x208>)
 80030fc:	f000 fdfc 	bl	8003cf8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003100:	f248 1333 	movw	r3, #33075	; 0x8133
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800310a:	4619      	mov	r1, r3
 800310c:	4829      	ldr	r0, [pc, #164]	; (80031b4 <BSP_SDRAM_MspInit+0x20c>)
 800310e:	f000 fdf3 	bl	8003cf8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003112:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003114:	2200      	movs	r2, #0
 8003116:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800311e:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003124:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003126:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800312c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800312e:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003134:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003138:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800313c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800313e:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003140:	2200      	movs	r2, #0
 8003142:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003146:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800314a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800314c:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 800314e:	2200      	movs	r2, #0
 8003150:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003152:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003154:	2203      	movs	r2, #3
 8003156:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003158:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 800315a:	2200      	movs	r2, #0
 800315c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800315e:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <BSP_SDRAM_MspInit+0x214>)
 8003168:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
 8003170:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003176:	4810      	ldr	r0, [pc, #64]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 8003178:	f000 fa18 	bl	80035ac <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800317c:	480e      	ldr	r0, [pc, #56]	; (80031b8 <BSP_SDRAM_MspInit+0x210>)
 800317e:	f000 f967 	bl	8003450 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	210f      	movs	r1, #15
 8003186:	2038      	movs	r0, #56	; 0x38
 8003188:	f000 f938 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800318c:	2038      	movs	r0, #56	; 0x38
 800318e:	f000 f951 	bl	8003434 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003192:	bf00      	nop
 8003194:	3740      	adds	r7, #64	; 0x40
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	40020400 	.word	0x40020400
 80031a4:	40020800 	.word	0x40020800
 80031a8:	40020c00 	.word	0x40020c00
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40021400 	.word	0x40021400
 80031b4:	40021800 	.word	0x40021800
 80031b8:	2000066c 	.word	0x2000066c
 80031bc:	40026410 	.word	0x40026410

080031c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_Init+0x40>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <HAL_Init+0x40>)
 80031ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_Init+0x40>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <HAL_Init+0x40>)
 80031d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a07      	ldr	r2, [pc, #28]	; (8003200 <HAL_Init+0x40>)
 80031e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e8:	2003      	movs	r0, #3
 80031ea:	f000 f8fc 	bl	80033e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ee:	200f      	movs	r0, #15
 80031f0:	f7fe f95c 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031f4:	f7fe f880 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023c00 	.word	0x40023c00

08003204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_IncTick+0x20>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_IncTick+0x24>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4413      	add	r3, r2
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <HAL_IncTick+0x24>)
 8003216:	6013      	str	r3, [r2, #0]
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000084 	.word	0x20000084
 8003228:	200006cc 	.word	0x200006cc

0800322c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return uwTick;
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <HAL_GetTick+0x14>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	200006cc 	.word	0x200006cc

08003244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7ff ffee 	bl	800322c <HAL_GetTick>
 8003250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325c:	d005      	beq.n	800326a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <HAL_Delay+0x44>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800326a:	bf00      	nop
 800326c:	f7ff ffde 	bl	800322c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	429a      	cmp	r2, r3
 800327a:	d8f7      	bhi.n	800326c <HAL_Delay+0x28>
  {
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000084 	.word	0x20000084

0800328c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <__NVIC_SetPriorityGrouping+0x44>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032a8:	4013      	ands	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032be:	4a04      	ldr	r2, [pc, #16]	; (80032d0 <__NVIC_SetPriorityGrouping+0x44>)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	60d3      	str	r3, [r2, #12]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <__NVIC_GetPriorityGrouping+0x18>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 0307 	and.w	r3, r3, #7
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	db0b      	blt.n	800331a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	4907      	ldr	r1, [pc, #28]	; (8003328 <__NVIC_EnableIRQ+0x38>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2001      	movs	r0, #1
 8003312:	fa00 f202 	lsl.w	r2, r0, r2
 8003316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000e100 	.word	0xe000e100

0800332c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	2b00      	cmp	r3, #0
 800333e:	db0a      	blt.n	8003356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	490c      	ldr	r1, [pc, #48]	; (8003378 <__NVIC_SetPriority+0x4c>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	0112      	lsls	r2, r2, #4
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	440b      	add	r3, r1
 8003350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003354:	e00a      	b.n	800336c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4908      	ldr	r1, [pc, #32]	; (800337c <__NVIC_SetPriority+0x50>)
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	3b04      	subs	r3, #4
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	440b      	add	r3, r1
 800336a:	761a      	strb	r2, [r3, #24]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000e100 	.word	0xe000e100
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f1c3 0307 	rsb	r3, r3, #7
 800339a:	2b04      	cmp	r3, #4
 800339c:	bf28      	it	cs
 800339e:	2304      	movcs	r3, #4
 80033a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d902      	bls.n	80033b0 <NVIC_EncodePriority+0x30>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3b03      	subs	r3, #3
 80033ae:	e000      	b.n	80033b2 <NVIC_EncodePriority+0x32>
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b4:	f04f 32ff 	mov.w	r2, #4294967295
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43da      	mvns	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	401a      	ands	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c8:	f04f 31ff 	mov.w	r1, #4294967295
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	43d9      	mvns	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	4313      	orrs	r3, r2
         );
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	; 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ff4c 	bl	800328c <__NVIC_SetPriorityGrouping>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800340e:	f7ff ff61 	bl	80032d4 <__NVIC_GetPriorityGrouping>
 8003412:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	6978      	ldr	r0, [r7, #20]
 800341a:	f7ff ffb1 	bl	8003380 <NVIC_EncodePriority>
 800341e:	4602      	mov	r2, r0
 8003420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff80 	bl	800332c <__NVIC_SetPriority>
}
 800342c:	bf00      	nop
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff ff54 	bl	80032f0 <__NVIC_EnableIRQ>
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7ff fee6 	bl	800322c <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e099      	b.n	80035a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348c:	e00f      	b.n	80034ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800348e:	f7ff fecd 	bl	800322c <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b05      	cmp	r3, #5
 800349a:	d908      	bls.n	80034ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2203      	movs	r2, #3
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e078      	b.n	80035a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e8      	bne.n	800348e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_DMA_Init+0x158>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	2b04      	cmp	r3, #4
 8003506:	d107      	bne.n	8003518 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	4313      	orrs	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0307 	bic.w	r3, r3, #7
 800352e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2b04      	cmp	r3, #4
 8003540:	d117      	bne.n	8003572 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8bd 	bl	80036d4 <DMA_CheckFifoParam>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2240      	movs	r2, #64	; 0x40
 8003564:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800356e:	2301      	movs	r3, #1
 8003570:	e016      	b.n	80035a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f874 	bl	8003668 <DMA_CalcBaseAndBitshift>
 8003580:	4603      	mov	r3, r0
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	223f      	movs	r2, #63	; 0x3f
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	f010803f 	.word	0xf010803f

080035ac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e050      	b.n	8003660 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d101      	bne.n	80035ce <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
 80035cc:	e048      	b.n	8003660 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2200      	movs	r2, #0
 80035ec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2221      	movs	r2, #33	; 0x21
 800360c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f82a 	bl	8003668 <DMA_CalcBaseAndBitshift>
 8003614:	4603      	mov	r3, r0
 8003616:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	223f      	movs	r2, #63	; 0x3f
 8003642:	409a      	lsls	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	3b10      	subs	r3, #16
 8003678:	4a14      	ldr	r2, [pc, #80]	; (80036cc <DMA_CalcBaseAndBitshift+0x64>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003682:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d909      	bls.n	80036aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800369e:	f023 0303 	bic.w	r3, r3, #3
 80036a2:	1d1a      	adds	r2, r3, #4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	659a      	str	r2, [r3, #88]	; 0x58
 80036a8:	e007      	b.n	80036ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	aaaaaaab 	.word	0xaaaaaaab
 80036d0:	08013928 	.word	0x08013928

080036d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d11f      	bne.n	800372e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d856      	bhi.n	80037a2 <DMA_CheckFifoParam+0xce>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <DMA_CheckFifoParam+0x28>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	0800371f 	.word	0x0800371f
 8003704:	0800370d 	.word	0x0800370d
 8003708:	080037a3 	.word	0x080037a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d046      	beq.n	80037a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371c:	e043      	b.n	80037a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003726:	d140      	bne.n	80037aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372c:	e03d      	b.n	80037aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003736:	d121      	bne.n	800377c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d837      	bhi.n	80037ae <DMA_CheckFifoParam+0xda>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <DMA_CheckFifoParam+0x70>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003755 	.word	0x08003755
 8003748:	0800375b 	.word	0x0800375b
 800374c:	08003755 	.word	0x08003755
 8003750:	0800376d 	.word	0x0800376d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      break;
 8003758:	e030      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d025      	beq.n	80037b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376a:	e022      	b.n	80037b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003774:	d11f      	bne.n	80037b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800377a:	e01c      	b.n	80037b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d903      	bls.n	800378a <DMA_CheckFifoParam+0xb6>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d003      	beq.n	8003790 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003788:	e018      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
      break;
 800378e:	e015      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
      break;
 80037a0:	e00b      	b.n	80037ba <DMA_CheckFifoParam+0xe6>
      break;
 80037a2:	bf00      	nop
 80037a4:	e00a      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;
 80037a6:	bf00      	nop
 80037a8:	e008      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;
 80037aa:	bf00      	nop
 80037ac:	e006      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
 80037b0:	e004      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
 80037b4:	e002      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;   
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
    }
  } 
  
  return status; 
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop

080037cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e03b      	b.n	8003856 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f833 	bl	800385e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381c:	f023 0107 	bic.w	r1, r3, #7
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003836:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68d1      	ldr	r1, [r2, #12]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	430b      	orrs	r3, r1
 8003844:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af02      	add	r7, sp, #8
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_DMA2D_Start+0x1c>
 800388a:	2302      	movs	r3, #2
 800388c:	e018      	b.n	80038c0 <HAL_DMA2D_Start+0x4e>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2202      	movs	r2, #2
 800389a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f989 	bl	8003bc0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d056      	beq.n	8003992 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80038e4:	f7ff fca2 	bl	800322c <HAL_GetTick>
 80038e8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80038ea:	e04b      	b.n	8003984 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d023      	beq.n	8003946 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	f043 0202 	orr.w	r2, r3, #2
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	f043 0201 	orr.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2221      	movs	r2, #33	; 0x21
 8003930:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2204      	movs	r2, #4
 8003936:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0a5      	b.n	8003a92 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d01a      	beq.n	8003984 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7ff fc6d 	bl	800322c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <HAL_DMA2D_PollForTransfer+0x9c>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10f      	bne.n	8003984 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	f043 0220 	orr.w	r2, r3, #32
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2203      	movs	r2, #3
 8003974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e086      	b.n	8003a92 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0ac      	beq.n	80038ec <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d061      	beq.n	8003a78 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80039b4:	f7ff fc3a 	bl	800322c <HAL_GetTick>
 80039b8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80039ba:	e056      	b.n	8003a6a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d02e      	beq.n	8003a2c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	f043 0204 	orr.w	r2, r3, #4
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	f043 0202 	orr.w	r2, r3, #2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	f043 0201 	orr.w	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2229      	movs	r2, #41	; 0x29
 8003a16:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e032      	b.n	8003a92 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d01a      	beq.n	8003a6a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a34:	f7ff fbfa 	bl	800322c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d302      	bcc.n	8003a4a <HAL_DMA2D_PollForTransfer+0x182>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	f043 0220 	orr.w	r2, r3, #32
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2203      	movs	r2, #3
 8003a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e013      	b.n	8003a92 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0a1      	beq.n	80039bc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2212      	movs	r2, #18
 8003a7e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_DMA2D_ConfigLayer+0x20>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e079      	b.n	8003bb0 <HAL_DMA2D_ConfigLayer+0x114>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	3318      	adds	r3, #24
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003ae6:	4b35      	ldr	r3, [pc, #212]	; (8003bbc <HAL_DMA2D_ConfigLayer+0x120>)
 8003ae8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b0a      	cmp	r3, #10
 8003af0:	d003      	beq.n	8003afa <HAL_DMA2D_ConfigLayer+0x5e>
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b09      	cmp	r3, #9
 8003af8:	d107      	bne.n	8003b0a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e005      	b.n	8003b16 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	061b      	lsls	r3, r3, #24
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d120      	bne.n	8003b5e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	ea02 0103 	and.w	r1, r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b0a      	cmp	r3, #10
 8003b44:	d003      	beq.n	8003b4e <HAL_DMA2D_ConfigLayer+0xb2>
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b09      	cmp	r3, #9
 8003b4c:	d127      	bne.n	8003b9e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b5c:	e01f      	b.n	8003b9e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	ea02 0103 	and.w	r1, r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b0a      	cmp	r3, #10
 8003b86:	d003      	beq.n	8003b90 <HAL_DMA2D_ConfigLayer+0xf4>
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b09      	cmp	r3, #9
 8003b8e:	d106      	bne.n	8003b9e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b9c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	ff03000f 	.word	0xff03000f

08003bc0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b08b      	sub	sp, #44	; 0x2c
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	041a      	lsls	r2, r3, #16
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bf8:	d174      	bne.n	8003ce4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c00:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c08:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c10:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d108      	bne.n	8003c32 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c30:	e053      	b.n	8003cda <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d106      	bne.n	8003c48 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	e048      	b.n	8003cda <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d111      	bne.n	8003c74 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	0cdb      	lsrs	r3, r3, #19
 8003c54:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	0a9b      	lsrs	r3, r3, #10
 8003c5a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	08db      	lsrs	r3, r3, #3
 8003c60:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	02db      	lsls	r3, r3, #11
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
 8003c72:	e032      	b.n	8003cda <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d117      	bne.n	8003cac <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	0fdb      	lsrs	r3, r3, #31
 8003c80:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	0cdb      	lsrs	r3, r3, #19
 8003c86:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	0adb      	lsrs	r3, r3, #11
 8003c8c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	08db      	lsrs	r3, r3, #3
 8003c92:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	029b      	lsls	r3, r3, #10
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	03db      	lsls	r3, r3, #15
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	e016      	b.n	8003cda <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	0f1b      	lsrs	r3, r3, #28
 8003cb0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	0d1b      	lsrs	r3, r3, #20
 8003cb6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	0b1b      	lsrs	r3, r3, #12
 8003cbc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	011a      	lsls	r2, r3, #4
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	031b      	lsls	r3, r3, #12
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003ce2:	e003      	b.n	8003cec <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	60da      	str	r2, [r3, #12]
}
 8003cec:	bf00      	nop
 8003cee:	372c      	adds	r7, #44	; 0x2c
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	e177      	b.n	8004004 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d14:	2201      	movs	r2, #1
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	f040 8166 	bne.w	8003ffe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d005      	beq.n	8003d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d130      	bne.n	8003dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	2203      	movs	r2, #3
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d80:	2201      	movs	r2, #1
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 0201 	and.w	r2, r3, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d017      	beq.n	8003de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d123      	bne.n	8003e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	08da      	lsrs	r2, r3, #3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3208      	adds	r2, #8
 8003dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	220f      	movs	r2, #15
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	08da      	lsrs	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3208      	adds	r2, #8
 8003e36:	69b9      	ldr	r1, [r7, #24]
 8003e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	2203      	movs	r2, #3
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0203 	and.w	r2, r3, #3
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80c0 	beq.w	8003ffe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	4b66      	ldr	r3, [pc, #408]	; (800401c <HAL_GPIO_Init+0x324>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	4a65      	ldr	r2, [pc, #404]	; (800401c <HAL_GPIO_Init+0x324>)
 8003e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8e:	4b63      	ldr	r3, [pc, #396]	; (800401c <HAL_GPIO_Init+0x324>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e9a:	4a61      	ldr	r2, [pc, #388]	; (8004020 <HAL_GPIO_Init+0x328>)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	220f      	movs	r2, #15
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_GPIO_Init+0x32c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d037      	beq.n	8003f36 <HAL_GPIO_Init+0x23e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a57      	ldr	r2, [pc, #348]	; (8004028 <HAL_GPIO_Init+0x330>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d031      	beq.n	8003f32 <HAL_GPIO_Init+0x23a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a56      	ldr	r2, [pc, #344]	; (800402c <HAL_GPIO_Init+0x334>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02b      	beq.n	8003f2e <HAL_GPIO_Init+0x236>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a55      	ldr	r2, [pc, #340]	; (8004030 <HAL_GPIO_Init+0x338>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d025      	beq.n	8003f2a <HAL_GPIO_Init+0x232>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a54      	ldr	r2, [pc, #336]	; (8004034 <HAL_GPIO_Init+0x33c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <HAL_GPIO_Init+0x22e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a53      	ldr	r2, [pc, #332]	; (8004038 <HAL_GPIO_Init+0x340>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d019      	beq.n	8003f22 <HAL_GPIO_Init+0x22a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a52      	ldr	r2, [pc, #328]	; (800403c <HAL_GPIO_Init+0x344>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_GPIO_Init+0x226>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a51      	ldr	r2, [pc, #324]	; (8004040 <HAL_GPIO_Init+0x348>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00d      	beq.n	8003f1a <HAL_GPIO_Init+0x222>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a50      	ldr	r2, [pc, #320]	; (8004044 <HAL_GPIO_Init+0x34c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <HAL_GPIO_Init+0x21e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4f      	ldr	r2, [pc, #316]	; (8004048 <HAL_GPIO_Init+0x350>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_GPIO_Init+0x21a>
 8003f0e:	2309      	movs	r3, #9
 8003f10:	e012      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f12:	230a      	movs	r3, #10
 8003f14:	e010      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f16:	2308      	movs	r3, #8
 8003f18:	e00e      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f1a:	2307      	movs	r3, #7
 8003f1c:	e00c      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f1e:	2306      	movs	r3, #6
 8003f20:	e00a      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f22:	2305      	movs	r3, #5
 8003f24:	e008      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f26:	2304      	movs	r3, #4
 8003f28:	e006      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e004      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e002      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f36:	2300      	movs	r3, #0
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	f002 0203 	and.w	r2, r2, #3
 8003f3e:	0092      	lsls	r2, r2, #2
 8003f40:	4093      	lsls	r3, r2
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f48:	4935      	ldr	r1, [pc, #212]	; (8004020 <HAL_GPIO_Init+0x328>)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3302      	adds	r3, #2
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f56:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_GPIO_Init+0x354>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f7a:	4a34      	ldr	r2, [pc, #208]	; (800404c <HAL_GPIO_Init+0x354>)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f80:	4b32      	ldr	r3, [pc, #200]	; (800404c <HAL_GPIO_Init+0x354>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fa4:	4a29      	ldr	r2, [pc, #164]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003faa:	4b28      	ldr	r3, [pc, #160]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fce:	4a1f      	ldr	r2, [pc, #124]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ff8:	4a14      	ldr	r2, [pc, #80]	; (800404c <HAL_GPIO_Init+0x354>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	f67f ae84 	bls.w	8003d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3724      	adds	r7, #36	; 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	40013800 	.word	0x40013800
 8004024:	40020000 	.word	0x40020000
 8004028:	40020400 	.word	0x40020400
 800402c:	40020800 	.word	0x40020800
 8004030:	40020c00 	.word	0x40020c00
 8004034:	40021000 	.word	0x40021000
 8004038:	40021400 	.word	0x40021400
 800403c:	40021800 	.word	0x40021800
 8004040:	40021c00 	.word	0x40021c00
 8004044:	40022000 	.word	0x40022000
 8004048:	40022400 	.word	0x40022400
 800404c:	40013c00 	.word	0x40013c00

08004050 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e0d9      	b.n	8004220 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800406c:	2201      	movs	r2, #1
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	429a      	cmp	r2, r3
 8004084:	f040 80c9 	bne.w	800421a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004088:	4a6b      	ldr	r2, [pc, #428]	; (8004238 <HAL_GPIO_DeInit+0x1e8>)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	3302      	adds	r3, #2
 8004090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004094:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	220f      	movs	r2, #15
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a63      	ldr	r2, [pc, #396]	; (800423c <HAL_GPIO_DeInit+0x1ec>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d037      	beq.n	8004122 <HAL_GPIO_DeInit+0xd2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a62      	ldr	r2, [pc, #392]	; (8004240 <HAL_GPIO_DeInit+0x1f0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d031      	beq.n	800411e <HAL_GPIO_DeInit+0xce>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a61      	ldr	r2, [pc, #388]	; (8004244 <HAL_GPIO_DeInit+0x1f4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d02b      	beq.n	800411a <HAL_GPIO_DeInit+0xca>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a60      	ldr	r2, [pc, #384]	; (8004248 <HAL_GPIO_DeInit+0x1f8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d025      	beq.n	8004116 <HAL_GPIO_DeInit+0xc6>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a5f      	ldr	r2, [pc, #380]	; (800424c <HAL_GPIO_DeInit+0x1fc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01f      	beq.n	8004112 <HAL_GPIO_DeInit+0xc2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a5e      	ldr	r2, [pc, #376]	; (8004250 <HAL_GPIO_DeInit+0x200>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d019      	beq.n	800410e <HAL_GPIO_DeInit+0xbe>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a5d      	ldr	r2, [pc, #372]	; (8004254 <HAL_GPIO_DeInit+0x204>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <HAL_GPIO_DeInit+0xba>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a5c      	ldr	r2, [pc, #368]	; (8004258 <HAL_GPIO_DeInit+0x208>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00d      	beq.n	8004106 <HAL_GPIO_DeInit+0xb6>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a5b      	ldr	r2, [pc, #364]	; (800425c <HAL_GPIO_DeInit+0x20c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <HAL_GPIO_DeInit+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a5a      	ldr	r2, [pc, #360]	; (8004260 <HAL_GPIO_DeInit+0x210>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <HAL_GPIO_DeInit+0xae>
 80040fa:	2309      	movs	r3, #9
 80040fc:	e012      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 80040fe:	230a      	movs	r3, #10
 8004100:	e010      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 8004102:	2308      	movs	r3, #8
 8004104:	e00e      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 8004106:	2307      	movs	r3, #7
 8004108:	e00c      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 800410a:	2306      	movs	r3, #6
 800410c:	e00a      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 800410e:	2305      	movs	r3, #5
 8004110:	e008      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 8004112:	2304      	movs	r3, #4
 8004114:	e006      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 8004116:	2303      	movs	r3, #3
 8004118:	e004      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 800411a:	2302      	movs	r3, #2
 800411c:	e002      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <HAL_GPIO_DeInit+0xd4>
 8004122:	2300      	movs	r3, #0
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	f002 0203 	and.w	r2, r2, #3
 800412a:	0092      	lsls	r2, r2, #2
 800412c:	4093      	lsls	r3, r2
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	429a      	cmp	r2, r3
 8004132:	d132      	bne.n	800419a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004134:	4b4b      	ldr	r3, [pc, #300]	; (8004264 <HAL_GPIO_DeInit+0x214>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43db      	mvns	r3, r3
 800413c:	4949      	ldr	r1, [pc, #292]	; (8004264 <HAL_GPIO_DeInit+0x214>)
 800413e:	4013      	ands	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004142:	4b48      	ldr	r3, [pc, #288]	; (8004264 <HAL_GPIO_DeInit+0x214>)
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	43db      	mvns	r3, r3
 800414a:	4946      	ldr	r1, [pc, #280]	; (8004264 <HAL_GPIO_DeInit+0x214>)
 800414c:	4013      	ands	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004150:	4b44      	ldr	r3, [pc, #272]	; (8004264 <HAL_GPIO_DeInit+0x214>)
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	43db      	mvns	r3, r3
 8004158:	4942      	ldr	r1, [pc, #264]	; (8004264 <HAL_GPIO_DeInit+0x214>)
 800415a:	4013      	ands	r3, r2
 800415c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800415e:	4b41      	ldr	r3, [pc, #260]	; (8004264 <HAL_GPIO_DeInit+0x214>)
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	43db      	mvns	r3, r3
 8004166:	493f      	ldr	r1, [pc, #252]	; (8004264 <HAL_GPIO_DeInit+0x214>)
 8004168:	4013      	ands	r3, r2
 800416a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800417c:	4a2e      	ldr	r2, [pc, #184]	; (8004238 <HAL_GPIO_DeInit+0x1e8>)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	3302      	adds	r3, #2
 8004184:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	43da      	mvns	r2, r3
 800418c:	482a      	ldr	r0, [pc, #168]	; (8004238 <HAL_GPIO_DeInit+0x1e8>)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	400a      	ands	r2, r1
 8004194:	3302      	adds	r3, #2
 8004196:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	2103      	movs	r1, #3
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	401a      	ands	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	08da      	lsrs	r2, r3, #3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3208      	adds	r2, #8
 80041b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	220f      	movs	r2, #15
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	08d2      	lsrs	r2, r2, #3
 80041d0:	4019      	ands	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3208      	adds	r2, #8
 80041d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	2103      	movs	r1, #3
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	401a      	ands	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	2101      	movs	r1, #1
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	401a      	ands	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	2103      	movs	r1, #3
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	401a      	ands	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	3301      	adds	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	f67f af22 	bls.w	800406c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004228:	bf00      	nop
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40013800 	.word	0x40013800
 800423c:	40020000 	.word	0x40020000
 8004240:	40020400 	.word	0x40020400
 8004244:	40020800 	.word	0x40020800
 8004248:	40020c00 	.word	0x40020c00
 800424c:	40021000 	.word	0x40021000
 8004250:	40021400 	.word	0x40021400
 8004254:	40021800 	.word	0x40021800
 8004258:	40021c00 	.word	0x40021c00
 800425c:	40022000 	.word	0x40022000
 8004260:	40022400 	.word	0x40022400
 8004264:	40013c00 	.word	0x40013c00

08004268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	807b      	strh	r3, [r7, #2]
 8004274:	4613      	mov	r3, r2
 8004276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004278:	787b      	ldrb	r3, [r7, #1]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004284:	e003      	b.n	800428e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004286:	887b      	ldrh	r3, [r7, #2]
 8004288:	041a      	lsls	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	619a      	str	r2, [r3, #24]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e12b      	b.n	8004506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd f844 	bl	8001350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004300:	f002 fba2 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 8004304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4a81      	ldr	r2, [pc, #516]	; (8004510 <HAL_I2C_Init+0x274>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d807      	bhi.n	8004320 <HAL_I2C_Init+0x84>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a80      	ldr	r2, [pc, #512]	; (8004514 <HAL_I2C_Init+0x278>)
 8004314:	4293      	cmp	r3, r2
 8004316:	bf94      	ite	ls
 8004318:	2301      	movls	r3, #1
 800431a:	2300      	movhi	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	e006      	b.n	800432e <HAL_I2C_Init+0x92>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a7d      	ldr	r2, [pc, #500]	; (8004518 <HAL_I2C_Init+0x27c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	bf94      	ite	ls
 8004328:	2301      	movls	r3, #1
 800432a:	2300      	movhi	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e0e7      	b.n	8004506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a78      	ldr	r2, [pc, #480]	; (800451c <HAL_I2C_Init+0x280>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	0c9b      	lsrs	r3, r3, #18
 8004340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4a6a      	ldr	r2, [pc, #424]	; (8004510 <HAL_I2C_Init+0x274>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d802      	bhi.n	8004370 <HAL_I2C_Init+0xd4>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	3301      	adds	r3, #1
 800436e:	e009      	b.n	8004384 <HAL_I2C_Init+0xe8>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	4a69      	ldr	r2, [pc, #420]	; (8004520 <HAL_I2C_Init+0x284>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	099b      	lsrs	r3, r3, #6
 8004382:	3301      	adds	r3, #1
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	430b      	orrs	r3, r1
 800438a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004396:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	495c      	ldr	r1, [pc, #368]	; (8004510 <HAL_I2C_Init+0x274>)
 80043a0:	428b      	cmp	r3, r1
 80043a2:	d819      	bhi.n	80043d8 <HAL_I2C_Init+0x13c>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e59      	subs	r1, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b2:	1c59      	adds	r1, r3, #1
 80043b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043b8:	400b      	ands	r3, r1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_I2C_Init+0x138>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1e59      	subs	r1, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80043cc:	3301      	adds	r3, #1
 80043ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d2:	e051      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 80043d4:	2304      	movs	r3, #4
 80043d6:	e04f      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d111      	bne.n	8004404 <HAL_I2C_Init+0x168>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1e58      	subs	r0, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6859      	ldr	r1, [r3, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	440b      	add	r3, r1
 80043ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f2:	3301      	adds	r3, #1
 80043f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e012      	b.n	800442a <HAL_I2C_Init+0x18e>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e58      	subs	r0, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	0099      	lsls	r1, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	fbb0 f3f3 	udiv	r3, r0, r3
 800441a:	3301      	adds	r3, #1
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_Init+0x196>
 800442e:	2301      	movs	r3, #1
 8004430:	e022      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10e      	bne.n	8004458 <HAL_I2C_Init+0x1bc>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1e58      	subs	r0, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6859      	ldr	r1, [r3, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	440b      	add	r3, r1
 8004448:	fbb0 f3f3 	udiv	r3, r0, r3
 800444c:	3301      	adds	r3, #1
 800444e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004456:	e00f      	b.n	8004478 <HAL_I2C_Init+0x1dc>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	1e58      	subs	r0, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	0099      	lsls	r1, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	fbb0 f3f3 	udiv	r3, r0, r3
 800446e:	3301      	adds	r3, #1
 8004470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	6809      	ldr	r1, [r1, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6911      	ldr	r1, [r2, #16]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68d2      	ldr	r2, [r2, #12]
 80044b2:	4311      	orrs	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	000186a0 	.word	0x000186a0
 8004514:	001e847f 	.word	0x001e847f
 8004518:	003d08ff 	.word	0x003d08ff
 800451c:	431bde83 	.word	0x431bde83
 8004520:	10624dd3 	.word	0x10624dd3

08004524 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b20      	cmp	r3, #32
 8004538:	d129      	bne.n	800458e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2224      	movs	r2, #36	; 0x24
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0210 	bic.w	r2, r2, #16
 8004560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d12a      	bne.n	800460c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2224      	movs	r2, #36	; 0x24
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045d6:	89fb      	ldrh	r3, [r7, #14]
 80045d8:	f023 030f 	bic.w	r3, r3, #15
 80045dc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	89fb      	ldrh	r3, [r7, #14]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	89fa      	ldrh	r2, [r7, #14]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	e000      	b.n	800460e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800460c:	2302      	movs	r3, #2
  }
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0bf      	b.n	80047ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f8ba 	bl	80047bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800465e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6999      	ldr	r1, [r3, #24]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004674:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6899      	ldr	r1, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b4a      	ldr	r3, [pc, #296]	; (80047b8 <HAL_LTDC_Init+0x19c>)
 8004690:	400b      	ands	r3, r1
 8004692:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6899      	ldr	r1, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68d9      	ldr	r1, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <HAL_LTDC_Init+0x19c>)
 80046be:	400b      	ands	r3, r1
 80046c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68d9      	ldr	r1, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6919      	ldr	r1, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b33      	ldr	r3, [pc, #204]	; (80047b8 <HAL_LTDC_Init+0x19c>)
 80046ec:	400b      	ands	r3, r1
 80046ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6919      	ldr	r1, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6959      	ldr	r1, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <HAL_LTDC_Init+0x19c>)
 800471a:	400b      	ands	r3, r1
 800471c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	041b      	lsls	r3, r3, #16
 8004724:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6959      	ldr	r1, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800475e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0206 	orr.w	r2, r2, #6
 800478a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	f000f800 	.word	0xf000f800

080047bc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047d0:	b5b0      	push	{r4, r5, r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_LTDC_ConfigLayer+0x1a>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e02c      	b.n	8004844 <HAL_LTDC_ConfigLayer+0x74>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2134      	movs	r1, #52	; 0x34
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4614      	mov	r4, r2
 800480e:	461d      	mov	r5, r3
 8004810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800481a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f83b 	bl	80048a0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2201      	movs	r2, #1
 8004830:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bdb0      	pop	{r4, r5, r7, pc}

0800484c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_LTDC_EnableDither+0x16>
 800485e:	2302      	movs	r3, #2
 8004860:	e016      	b.n	8004890 <HAL_LTDC_EnableDither+0x44>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <HAL_LTDC_EnableDither+0x50>)
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	4a09      	ldr	r2, [pc, #36]	; (800489c <HAL_LTDC_EnableDither+0x50>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40016800 	.word	0x40016800

080048a0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b089      	sub	sp, #36	; 0x24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	0c1b      	lsrs	r3, r3, #16
 80048b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048bc:	4413      	add	r3, r2
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	01db      	lsls	r3, r3, #7
 80048cc:	4413      	add	r3, r2
 80048ce:	3384      	adds	r3, #132	; 0x84
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	4611      	mov	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	01d2      	lsls	r2, r2, #7
 80048dc:	440a      	add	r2, r1
 80048de:	3284      	adds	r2, #132	; 0x84
 80048e0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80048e4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048f6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048f8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4619      	mov	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	01db      	lsls	r3, r3, #7
 8004904:	440b      	add	r3, r1
 8004906:	3384      	adds	r3, #132	; 0x84
 8004908:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800490e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800491e:	4413      	add	r3, r2
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	01db      	lsls	r3, r3, #7
 800492e:	4413      	add	r3, r2
 8004930:	3384      	adds	r3, #132	; 0x84
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	4611      	mov	r1, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	01d2      	lsls	r2, r2, #7
 800493e:	440a      	add	r2, r1
 8004940:	3284      	adds	r2, #132	; 0x84
 8004942:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004946:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004956:	4413      	add	r3, r2
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4619      	mov	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	01db      	lsls	r3, r3, #7
 8004964:	440b      	add	r3, r1
 8004966:	3384      	adds	r3, #132	; 0x84
 8004968:	4619      	mov	r1, r3
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4313      	orrs	r3, r2
 800496e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	01db      	lsls	r3, r3, #7
 800497a:	4413      	add	r3, r2
 800497c:	3384      	adds	r3, #132	; 0x84
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	4611      	mov	r1, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	01d2      	lsls	r2, r2, #7
 800498a:	440a      	add	r2, r1
 800498c:	3284      	adds	r2, #132	; 0x84
 800498e:	f023 0307 	bic.w	r3, r3, #7
 8004992:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	01db      	lsls	r3, r3, #7
 800499e:	4413      	add	r3, r2
 80049a0:	3384      	adds	r3, #132	; 0x84
 80049a2:	461a      	mov	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	061b      	lsls	r3, r3, #24
 80049c4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	01db      	lsls	r3, r3, #7
 80049d0:	4413      	add	r3, r2
 80049d2:	3384      	adds	r3, #132	; 0x84
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	01db      	lsls	r3, r3, #7
 80049e0:	4413      	add	r3, r2
 80049e2:	3384      	adds	r3, #132	; 0x84
 80049e4:	461a      	mov	r2, r3
 80049e6:	2300      	movs	r3, #0
 80049e8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049f0:	461a      	mov	r2, r3
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4619      	mov	r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	01db      	lsls	r3, r3, #7
 8004a04:	440b      	add	r3, r1
 8004a06:	3384      	adds	r3, #132	; 0x84
 8004a08:	4619      	mov	r1, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	01db      	lsls	r3, r3, #7
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3384      	adds	r3, #132	; 0x84
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	4611      	mov	r1, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	01d2      	lsls	r2, r2, #7
 8004a2a:	440a      	add	r2, r1
 8004a2c:	3284      	adds	r2, #132	; 0x84
 8004a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a32:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	01db      	lsls	r3, r3, #7
 8004a3e:	4413      	add	r3, r2
 8004a40:	3384      	adds	r3, #132	; 0x84
 8004a42:	461a      	mov	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	01db      	lsls	r3, r3, #7
 8004a54:	4413      	add	r3, r2
 8004a56:	3384      	adds	r3, #132	; 0x84
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	6812      	ldr	r2, [r2, #0]
 8004a5e:	4611      	mov	r1, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	01d2      	lsls	r2, r2, #7
 8004a64:	440a      	add	r2, r1
 8004a66:	3284      	adds	r2, #132	; 0x84
 8004a68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a6c:	f023 0307 	bic.w	r3, r3, #7
 8004a70:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	6809      	ldr	r1, [r1, #0]
 8004a7e:	4608      	mov	r0, r1
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	01c9      	lsls	r1, r1, #7
 8004a84:	4401      	add	r1, r0
 8004a86:	3184      	adds	r1, #132	; 0x84
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	01db      	lsls	r3, r3, #7
 8004a96:	4413      	add	r3, r2
 8004a98:	3384      	adds	r3, #132	; 0x84
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	01db      	lsls	r3, r3, #7
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3384      	adds	r3, #132	; 0x84
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	01db      	lsls	r3, r3, #7
 8004aba:	4413      	add	r3, r2
 8004abc:	3384      	adds	r3, #132	; 0x84
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004ace:	2304      	movs	r3, #4
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	e01b      	b.n	8004b0c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d102      	bne.n	8004ae2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004adc:	2303      	movs	r3, #3
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	e014      	b.n	8004b0c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d00b      	beq.n	8004b02 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d007      	beq.n	8004b02 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d003      	beq.n	8004b02 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004afe:	2b07      	cmp	r3, #7
 8004b00:	d102      	bne.n	8004b08 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004b02:	2302      	movs	r3, #2
 8004b04:	61fb      	str	r3, [r7, #28]
 8004b06:	e001      	b.n	8004b0c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	01db      	lsls	r3, r3, #7
 8004b16:	4413      	add	r3, r2
 8004b18:	3384      	adds	r3, #132	; 0x84
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	4611      	mov	r1, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	01d2      	lsls	r2, r2, #7
 8004b26:	440a      	add	r2, r1
 8004b28:	3284      	adds	r2, #132	; 0x84
 8004b2a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	6859      	ldr	r1, [r3, #4]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	1acb      	subs	r3, r1, r3
 8004b46:	69f9      	ldr	r1, [r7, #28]
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004b4e:	68f9      	ldr	r1, [r7, #12]
 8004b50:	6809      	ldr	r1, [r1, #0]
 8004b52:	4608      	mov	r0, r1
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	01c9      	lsls	r1, r1, #7
 8004b58:	4401      	add	r1, r0
 8004b5a:	3184      	adds	r1, #132	; 0x84
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	01db      	lsls	r3, r3, #7
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3384      	adds	r3, #132	; 0x84
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	4611      	mov	r1, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	01d2      	lsls	r2, r2, #7
 8004b7a:	440a      	add	r2, r1
 8004b7c:	3284      	adds	r2, #132	; 0x84
 8004b7e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b82:	f023 0307 	bic.w	r3, r3, #7
 8004b86:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	01db      	lsls	r3, r3, #7
 8004b92:	4413      	add	r3, r2
 8004b94:	3384      	adds	r3, #132	; 0x84
 8004b96:	461a      	mov	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	01db      	lsls	r3, r3, #7
 8004ba8:	4413      	add	r3, r2
 8004baa:	3384      	adds	r3, #132	; 0x84
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	01d2      	lsls	r2, r2, #7
 8004bb8:	440a      	add	r2, r1
 8004bba:	3284      	adds	r2, #132	; 0x84
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	6013      	str	r3, [r2, #0]
}
 8004bc2:	bf00      	nop
 8004bc4:	3724      	adds	r7, #36	; 0x24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd0:	b08f      	sub	sp, #60	; 0x3c
 8004bd2:	af0a      	add	r7, sp, #40	; 0x28
 8004bd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e10f      	b.n	8004e00 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f009 ff1c 	bl	800ea38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2203      	movs	r2, #3
 8004c04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f003 fc6f 	bl	8008502 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	603b      	str	r3, [r7, #0]
 8004c2a:	687e      	ldr	r6, [r7, #4]
 8004c2c:	466d      	mov	r5, sp
 8004c2e:	f106 0410 	add.w	r4, r6, #16
 8004c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c42:	1d33      	adds	r3, r6, #4
 8004c44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c46:	6838      	ldr	r0, [r7, #0]
 8004c48:	f003 fb46 	bl	80082d8 <USB_CoreInit>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0d0      	b.n	8004e00 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2100      	movs	r1, #0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f003 fc5d 	bl	8008524 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	73fb      	strb	r3, [r7, #15]
 8004c6e:	e04a      	b.n	8004d06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c70:	7bfa      	ldrb	r2, [r7, #15]
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	333d      	adds	r3, #61	; 0x3d
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c84:	7bfa      	ldrb	r2, [r7, #15]
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	333c      	adds	r3, #60	; 0x3c
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c98:	7bfa      	ldrb	r2, [r7, #15]
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	b298      	uxth	r0, r3
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	3344      	adds	r3, #68	; 0x44
 8004cac:	4602      	mov	r2, r0
 8004cae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cb0:	7bfa      	ldrb	r2, [r7, #15]
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	3340      	adds	r3, #64	; 0x40
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cc4:	7bfa      	ldrb	r2, [r7, #15]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	3348      	adds	r3, #72	; 0x48
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cd8:	7bfa      	ldrb	r2, [r7, #15]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	334c      	adds	r3, #76	; 0x4c
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cec:	7bfa      	ldrb	r2, [r7, #15]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3354      	adds	r3, #84	; 0x54
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	3301      	adds	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
 8004d06:	7bfa      	ldrb	r2, [r7, #15]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d3af      	bcc.n	8004c70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d10:	2300      	movs	r3, #0
 8004d12:	73fb      	strb	r3, [r7, #15]
 8004d14:	e044      	b.n	8004da0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d16:	7bfa      	ldrb	r2, [r7, #15]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d2c:	7bfa      	ldrb	r2, [r7, #15]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004d3e:	7bfa      	ldrb	r2, [r7, #15]
 8004d40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d42:	7bfa      	ldrb	r2, [r7, #15]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d58:	7bfa      	ldrb	r2, [r7, #15]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d6e:	7bfa      	ldrb	r2, [r7, #15]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
 8004da0:	7bfa      	ldrb	r2, [r7, #15]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d3b5      	bcc.n	8004d16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	687e      	ldr	r6, [r7, #4]
 8004db2:	466d      	mov	r5, sp
 8004db4:	f106 0410 	add.w	r4, r6, #16
 8004db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dc8:	1d33      	adds	r3, r6, #4
 8004dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dcc:	6838      	ldr	r0, [r7, #0]
 8004dce:	f003 fbf5 	bl	80085bc <USB_DevInit>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e00d      	b.n	8004e00 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f004 fd44 	bl	8009886 <USB_DevDisconnect>

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_PCD_Start+0x1c>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e020      	b.n	8004e66 <HAL_PCD_Start+0x5e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d109      	bne.n	8004e48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d005      	beq.n	8004e48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f003 fb47 	bl	80084e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f004 fcf4 	bl	8009844 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e6e:	b590      	push	{r4, r7, lr}
 8004e70:	b08d      	sub	sp, #52	; 0x34
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f004 fdb2 	bl	80099ee <USB_GetMode>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 848a 	bne.w	80057a6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f004 fd16 	bl	80098c8 <USB_ReadInterrupts>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 8480 	beq.w	80057a4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f004 fd03 	bl	80098c8 <USB_ReadInterrupts>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d107      	bne.n	8004edc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f002 0202 	and.w	r2, r2, #2
 8004eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f004 fcf1 	bl	80098c8 <USB_ReadInterrupts>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d161      	bne.n	8004fb4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0210 	bic.w	r2, r2, #16
 8004efe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f003 020f 	and.w	r2, r3, #15
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	0c5b      	lsrs	r3, r3, #17
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d124      	bne.n	8004f76 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d035      	beq.n	8004fa4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	091b      	lsrs	r3, r3, #4
 8004f40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6a38      	ldr	r0, [r7, #32]
 8004f4c:	f004 fb28 	bl	80095a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f5c:	441a      	add	r2, r3
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	6a1a      	ldr	r2, [r3, #32]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f6e:	441a      	add	r2, r3
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	621a      	str	r2, [r3, #32]
 8004f74:	e016      	b.n	8004fa4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	0c5b      	lsrs	r3, r3, #17
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	2b06      	cmp	r3, #6
 8004f80:	d110      	bne.n	8004fa4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f88:	2208      	movs	r2, #8
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6a38      	ldr	r0, [r7, #32]
 8004f8e:	f004 fb07 	bl	80095a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	6a1a      	ldr	r2, [r3, #32]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f9e:	441a      	add	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0210 	orr.w	r2, r2, #16
 8004fb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f004 fc85 	bl	80098c8 <USB_ReadInterrupts>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fc8:	f040 80a7 	bne.w	800511a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f004 fc8a 	bl	80098ee <USB_ReadDevAllOutEpInterrupt>
 8004fda:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004fdc:	e099      	b.n	8005112 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 808e 	beq.w	8005106 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f004 fcae 	bl	8009956 <USB_ReadDevOutEPInterrupt>
 8004ffa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00c      	beq.n	8005020 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005012:	461a      	mov	r2, r3
 8005014:	2301      	movs	r3, #1
 8005016:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fec2 	bl	8005da4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00c      	beq.n	8005044 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005036:	461a      	mov	r2, r3
 8005038:	2308      	movs	r3, #8
 800503a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800503c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 ff98 	bl	8005f74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	461a      	mov	r2, r3
 800505c:	2310      	movs	r3, #16
 800505e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d030      	beq.n	80050cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d109      	bne.n	800508a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005084:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005088:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800508a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508c:	4613      	mov	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	4413      	add	r3, r2
 800509c:	3304      	adds	r3, #4
 800509e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	78db      	ldrb	r3, [r3, #3]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d108      	bne.n	80050ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2200      	movs	r2, #0
 80050ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f009 fdc5 	bl	800ec44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	461a      	mov	r2, r3
 80050c8:	2302      	movs	r3, #2
 80050ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d008      	beq.n	80050e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	461a      	mov	r2, r3
 80050e4:	2320      	movs	r3, #32
 80050e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	461a      	mov	r2, r3
 8005100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005104:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	3301      	adds	r3, #1
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	2b00      	cmp	r3, #0
 8005116:	f47f af62 	bne.w	8004fde <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f004 fbd2 	bl	80098c8 <USB_ReadInterrupts>
 8005124:	4603      	mov	r3, r0
 8005126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800512a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800512e:	f040 80db 	bne.w	80052e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f004 fbf3 	bl	8009922 <USB_ReadDevAllInEpInterrupt>
 800513c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005142:	e0cd      	b.n	80052e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80c2 	beq.w	80052d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f004 fc19 	bl	8009992 <USB_ReadDevInEPInterrupt>
 8005160:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d057      	beq.n	800521c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	2201      	movs	r2, #1
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	43db      	mvns	r3, r3
 8005186:	69f9      	ldr	r1, [r7, #28]
 8005188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800518c:	4013      	ands	r3, r2
 800518e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	461a      	mov	r2, r3
 800519e:	2301      	movs	r3, #1
 80051a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d132      	bne.n	8005210 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ae:	4613      	mov	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	334c      	adds	r3, #76	; 0x4c
 80051ba:	6819      	ldr	r1, [r3, #0]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4403      	add	r3, r0
 80051ca:	3348      	adds	r3, #72	; 0x48
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4419      	add	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d4:	4613      	mov	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4403      	add	r3, r0
 80051de:	334c      	adds	r3, #76	; 0x4c
 80051e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d113      	bne.n	8005210 <HAL_PCD_IRQHandler+0x3a2>
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ec:	4613      	mov	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	3354      	adds	r3, #84	; 0x54
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d108      	bne.n	8005210 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005208:	461a      	mov	r2, r3
 800520a:	2101      	movs	r1, #1
 800520c:	f004 fc20 	bl	8009a50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	b2db      	uxtb	r3, r3
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f009 fc8f 	bl	800eb3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005232:	461a      	mov	r2, r3
 8005234:	2308      	movs	r3, #8
 8005236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524e:	461a      	mov	r2, r3
 8005250:	2310      	movs	r3, #16
 8005252:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	461a      	mov	r2, r3
 800526c:	2340      	movs	r3, #64	; 0x40
 800526e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d023      	beq.n	80052c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800527a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800527c:	6a38      	ldr	r0, [r7, #32]
 800527e:	f003 fb01 	bl	8008884 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005284:	4613      	mov	r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	3338      	adds	r3, #56	; 0x38
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4413      	add	r3, r2
 8005292:	3304      	adds	r3, #4
 8005294:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	78db      	ldrb	r3, [r3, #3]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d108      	bne.n	80052b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	4619      	mov	r1, r3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f009 fcdc 	bl	800ec68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052bc:	461a      	mov	r2, r3
 80052be:	2302      	movs	r3, #2
 80052c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80052cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fcdb 	bl	8005c8a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	3301      	adds	r3, #1
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f47f af2e 	bne.w	8005144 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f004 faeb 	bl	80098c8 <USB_ReadInterrupts>
 80052f2:	4603      	mov	r3, r0
 80052f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052fc:	d122      	bne.n	8005344 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005318:	2b01      	cmp	r3, #1
 800531a:	d108      	bne.n	800532e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005324:	2100      	movs	r1, #0
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fec2 	bl	80060b0 <HAL_PCDEx_LPM_Callback>
 800532c:	e002      	b.n	8005334 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f009 fc7a 	bl	800ec28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f004 fabd 	bl	80098c8 <USB_ReadInterrupts>
 800534e:	4603      	mov	r3, r0
 8005350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005358:	d112      	bne.n	8005380 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d102      	bne.n	8005370 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f009 fc36 	bl	800ebdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800537e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f004 fa9f 	bl	80098c8 <USB_ReadInterrupts>
 800538a:	4603      	mov	r3, r0
 800538c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005394:	f040 80b7 	bne.w	8005506 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2110      	movs	r1, #16
 80053b2:	4618      	mov	r0, r3
 80053b4:	f003 fa66 	bl	8008884 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053b8:	2300      	movs	r3, #0
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053bc:	e046      	b.n	800544c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ca:	461a      	mov	r2, r3
 80053cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	461a      	mov	r2, r3
 8005400:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005404:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	440a      	add	r2, r1
 800541c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005420:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005424:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005436:	0151      	lsls	r1, r2, #5
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	440a      	add	r2, r1
 800543c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005440:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005444:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	3301      	adds	r3, #1
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005452:	429a      	cmp	r2, r3
 8005454:	d3b3      	bcc.n	80053be <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005464:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005468:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	2b00      	cmp	r3, #0
 8005470:	d016      	beq.n	80054a0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005482:	f043 030b 	orr.w	r3, r3, #11
 8005486:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005498:	f043 030b 	orr.w	r3, r3, #11
 800549c:	6453      	str	r3, [r2, #68]	; 0x44
 800549e:	e015      	b.n	80054cc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80054b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c6:	f043 030b 	orr.w	r3, r3, #11
 80054ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054f0:	461a      	mov	r2, r3
 80054f2:	f004 faad 	bl	8009a50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695a      	ldr	r2, [r3, #20]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f004 f9dc 	bl	80098c8 <USB_ReadInterrupts>
 8005510:	4603      	mov	r3, r0
 8005512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551a:	d124      	bne.n	8005566 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f004 fa72 	bl	8009a0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f003 fa27 	bl	800897e <USB_GetDevSpeed>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681c      	ldr	r4, [r3, #0]
 800553c:	f001 fa78 	bl	8006a30 <HAL_RCC_GetHCLKFreq>
 8005540:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	4620      	mov	r0, r4
 800554c:	f002 ff26 	bl	800839c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f009 fb1a 	bl	800eb8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005564:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f004 f9ac 	bl	80098c8 <USB_ReadInterrupts>
 8005570:	4603      	mov	r3, r0
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b08      	cmp	r3, #8
 8005578:	d10a      	bne.n	8005590 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f009 faf7 	bl	800eb6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f002 0208 	and.w	r2, r2, #8
 800558e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f004 f997 	bl	80098c8 <USB_ReadInterrupts>
 800559a:	4603      	mov	r3, r0
 800559c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a0:	2b80      	cmp	r3, #128	; 0x80
 80055a2:	d122      	bne.n	80055ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055b0:	2301      	movs	r3, #1
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
 80055b4:	e014      	b.n	80055e0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d105      	bne.n	80055da <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fb27 	bl	8005c28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	3301      	adds	r3, #1
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d3e5      	bcc.n	80055b6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f004 f96a 	bl	80098c8 <USB_ReadInterrupts>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fe:	d13b      	bne.n	8005678 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005600:	2301      	movs	r3, #1
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
 8005604:	e02b      	b.n	800565e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561a:	4613      	mov	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	3340      	adds	r3, #64	; 0x40
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d115      	bne.n	8005658 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800562c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800562e:	2b00      	cmp	r3, #0
 8005630:	da12      	bge.n	8005658 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005636:	4613      	mov	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	333f      	adds	r3, #63	; 0x3f
 8005642:	2201      	movs	r2, #1
 8005644:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	b2db      	uxtb	r3, r3
 800564a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800564e:	b2db      	uxtb	r3, r3
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fae8 	bl	8005c28 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	3301      	adds	r3, #1
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005664:	429a      	cmp	r2, r3
 8005666:	d3ce      	bcc.n	8005606 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005676:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f004 f923 	bl	80098c8 <USB_ReadInterrupts>
 8005682:	4603      	mov	r3, r0
 8005684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800568c:	d155      	bne.n	800573a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800568e:	2301      	movs	r3, #1
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
 8005692:	e045      	b.n	8005720 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a8:	4613      	mov	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d12e      	bne.n	800571a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80056bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da2b      	bge.n	800571a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80056ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d121      	bne.n	800571a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056da:	4613      	mov	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056e8:	2201      	movs	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005716:	6053      	str	r3, [r2, #4]
            break;
 8005718:	e007      	b.n	800572a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	3301      	adds	r3, #1
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005726:	429a      	cmp	r2, r3
 8005728:	d3b4      	bcc.n	8005694 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f004 f8c2 	bl	80098c8 <USB_ReadInterrupts>
 8005744:	4603      	mov	r3, r0
 8005746:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800574a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574e:	d10a      	bne.n	8005766 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f009 fa9b 	bl	800ec8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f004 f8ac 	bl	80098c8 <USB_ReadInterrupts>
 8005770:	4603      	mov	r3, r0
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b04      	cmp	r3, #4
 8005778:	d115      	bne.n	80057a6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f009 fa8b 	bl	800eca8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6859      	ldr	r1, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	e000      	b.n	80057a6 <HAL_PCD_IRQHandler+0x938>
      return;
 80057a4:	bf00      	nop
    }
  }
}
 80057a6:	3734      	adds	r7, #52	; 0x34
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd90      	pop	{r4, r7, pc}

080057ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_PCD_SetAddress+0x1a>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e013      	b.n	80057ee <HAL_PCD_SetAddress+0x42>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f004 f80a 	bl	80097f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	4608      	mov	r0, r1
 8005800:	4611      	mov	r1, r2
 8005802:	461a      	mov	r2, r3
 8005804:	4603      	mov	r3, r0
 8005806:	70fb      	strb	r3, [r7, #3]
 8005808:	460b      	mov	r3, r1
 800580a:	803b      	strh	r3, [r7, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005818:	2b00      	cmp	r3, #0
 800581a:	da0f      	bge.n	800583c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	f003 020f 	and.w	r2, r3, #15
 8005822:	4613      	mov	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	3338      	adds	r3, #56	; 0x38
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4413      	add	r3, r2
 8005830:	3304      	adds	r3, #4
 8005832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	705a      	strb	r2, [r3, #1]
 800583a:	e00f      	b.n	800585c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	f003 020f 	and.w	r2, r3, #15
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	3304      	adds	r3, #4
 8005854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	b2da      	uxtb	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005868:	883a      	ldrh	r2, [r7, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	78ba      	ldrb	r2, [r7, #2]
 8005872:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d004      	beq.n	8005886 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005886:	78bb      	ldrb	r3, [r7, #2]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d102      	bne.n	8005892 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_PCD_EP_Open+0xaa>
 800589c:	2302      	movs	r3, #2
 800589e:	e00e      	b.n	80058be <HAL_PCD_EP_Open+0xc8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f003 f88a 	bl	80089c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80058bc:	7afb      	ldrb	r3, [r7, #11]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	460b      	mov	r3, r1
 80058d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	da0f      	bge.n	80058fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	f003 020f 	and.w	r2, r3, #15
 80058e0:	4613      	mov	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	3338      	adds	r3, #56	; 0x38
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4413      	add	r3, r2
 80058ee:	3304      	adds	r3, #4
 80058f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	705a      	strb	r2, [r3, #1]
 80058f8:	e00f      	b.n	800591a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	4613      	mov	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4413      	add	r3, r2
 8005910:	3304      	adds	r3, #4
 8005912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_PCD_EP_Close+0x6e>
 8005930:	2302      	movs	r3, #2
 8005932:	e00e      	b.n	8005952 <HAL_PCD_EP_Close+0x8c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68f9      	ldr	r1, [r7, #12]
 8005942:	4618      	mov	r0, r3
 8005944:	f003 f8c8 	bl	8008ad8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b086      	sub	sp, #24
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	460b      	mov	r3, r1
 8005968:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800596a:	7afb      	ldrb	r3, [r7, #11]
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	3304      	adds	r3, #4
 8005982:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2200      	movs	r2, #0
 8005994:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2200      	movs	r2, #0
 800599a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800599c:	7afb      	ldrb	r3, [r7, #11]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d102      	bne.n	80059b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059b6:	7afb      	ldrb	r3, [r7, #11]
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	6979      	ldr	r1, [r7, #20]
 80059ce:	f003 fba7 	bl	8009120 <USB_EP0StartXfer>
 80059d2:	e008      	b.n	80059e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	6979      	ldr	r1, [r7, #20]
 80059e2:	f003 f955 	bl	8008c90 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	f003 020f 	and.w	r2, r3, #15
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005a12:	681b      	ldr	r3, [r3, #0]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a30:	7afb      	ldrb	r3, [r7, #11]
 8005a32:	f003 020f 	and.w	r2, r3, #15
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	3338      	adds	r3, #56	; 0x38
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	3304      	adds	r3, #4
 8005a46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2200      	movs	r2, #0
 8005a58:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d102      	bne.n	8005a7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a7a:	7afb      	ldrb	r3, [r7, #11]
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6979      	ldr	r1, [r7, #20]
 8005a92:	f003 fb45 	bl	8009120 <USB_EP0StartXfer>
 8005a96:	e008      	b.n	8005aaa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6979      	ldr	r1, [r7, #20]
 8005aa6:	f003 f8f3 	bl	8008c90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	f003 020f 	and.w	r2, r3, #15
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d901      	bls.n	8005ad2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e050      	b.n	8005b74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da0f      	bge.n	8005afa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	f003 020f 	and.w	r2, r3, #15
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	3338      	adds	r3, #56	; 0x38
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	3304      	adds	r3, #4
 8005af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	705a      	strb	r2, [r3, #1]
 8005af8:	e00d      	b.n	8005b16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	4613      	mov	r3, r2
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_PCD_EP_SetStall+0x82>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e01e      	b.n	8005b74 <HAL_PCD_EP_SetStall+0xc0>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f003 fd83 	bl	8009650 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b4a:	78fb      	ldrb	r3, [r7, #3]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	b2d9      	uxtb	r1, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b64:	461a      	mov	r2, r3
 8005b66:	f003 ff73 	bl	8009a50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	f003 020f 	and.w	r2, r3, #15
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d901      	bls.n	8005b9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e042      	b.n	8005c20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da0f      	bge.n	8005bc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	f003 020f 	and.w	r2, r3, #15
 8005ba8:	4613      	mov	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	3338      	adds	r3, #56	; 0x38
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	705a      	strb	r2, [r3, #1]
 8005bc0:	e00f      	b.n	8005be2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	f003 020f 	and.w	r2, r3, #15
 8005bc8:	4613      	mov	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	3304      	adds	r3, #4
 8005bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_PCD_EP_ClrStall+0x86>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e00e      	b.n	8005c20 <HAL_PCD_EP_ClrStall+0xa4>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68f9      	ldr	r1, [r7, #12]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f003 fd8b 	bl	800972c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	da0c      	bge.n	8005c56 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	f003 020f 	and.w	r2, r3, #15
 8005c42:	4613      	mov	r3, r2
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	3338      	adds	r3, #56	; 0x38
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	4413      	add	r3, r2
 8005c50:	3304      	adds	r3, #4
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	e00c      	b.n	8005c70 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	f003 020f 	and.w	r2, r3, #15
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68f9      	ldr	r1, [r7, #12]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f003 fbaa 	bl	80093d0 <USB_EPStopXfer>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005c80:	7afb      	ldrb	r3, [r7, #11]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b08a      	sub	sp, #40	; 0x28
 8005c8e:	af02      	add	r7, sp, #8
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	3338      	adds	r3, #56	; 0x38
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	4413      	add	r3, r2
 8005cae:	3304      	adds	r3, #4
 8005cb0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1a      	ldr	r2, [r3, #32]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d901      	bls.n	8005cc2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e06c      	b.n	8005d9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d902      	bls.n	8005cde <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	3303      	adds	r3, #3
 8005ce2:	089b      	lsrs	r3, r3, #2
 8005ce4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ce6:	e02b      	b.n	8005d40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d902      	bls.n	8005d04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	3303      	adds	r3, #3
 8005d08:	089b      	lsrs	r3, r3, #2
 8005d0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6919      	ldr	r1, [r3, #16]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	4603      	mov	r3, r0
 8005d22:	6978      	ldr	r0, [r7, #20]
 8005d24:	f003 fbfe 	bl	8009524 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	441a      	add	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	441a      	add	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d809      	bhi.n	8005d6a <PCD_WriteEmptyTxFifo+0xe0>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1a      	ldr	r2, [r3, #32]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d203      	bcs.n	8005d6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1be      	bne.n	8005ce8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d811      	bhi.n	8005d9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	6939      	ldr	r1, [r7, #16]
 8005d92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d96:	4013      	ands	r3, r2
 8005d98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3720      	adds	r7, #32
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	333c      	adds	r3, #60	; 0x3c
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d17b      	bne.n	8005ed2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d015      	beq.n	8005e10 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	4a61      	ldr	r2, [pc, #388]	; (8005f6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	f240 80b9 	bls.w	8005f60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 80b3 	beq.w	8005f60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	461a      	mov	r2, r3
 8005e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e0c:	6093      	str	r3, [r2, #8]
 8005e0e:	e0a7      	b.n	8005f60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d009      	beq.n	8005e2e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e26:	461a      	mov	r2, r3
 8005e28:	2320      	movs	r3, #32
 8005e2a:	6093      	str	r3, [r2, #8]
 8005e2c:	e098      	b.n	8005f60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f040 8093 	bne.w	8005f60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4a4b      	ldr	r2, [pc, #300]	; (8005f6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d90f      	bls.n	8005e62 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e5e:	6093      	str	r3, [r2, #8]
 8005e60:	e07e      	b.n	8005f60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	4413      	add	r3, r2
 8005e74:	3304      	adds	r3, #4
 8005e76:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	0159      	lsls	r1, r3, #5
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	440b      	add	r3, r1
 8005e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d114      	bne.n	8005ec4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005eac:	461a      	mov	r2, r3
 8005eae:	2101      	movs	r1, #1
 8005eb0:	f003 fdce 	bl	8009a50 <USB_EP0_OutStart>
 8005eb4:	e006      	b.n	8005ec4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	691a      	ldr	r2, [r3, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	441a      	add	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f008 fe1a 	bl	800eb04 <HAL_PCD_DataOutStageCallback>
 8005ed0:	e046      	b.n	8005f60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4a26      	ldr	r2, [pc, #152]	; (8005f70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d124      	bne.n	8005f24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00a      	beq.n	8005efa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef6:	6093      	str	r3, [r2, #8]
 8005ef8:	e032      	b.n	8005f60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	461a      	mov	r2, r3
 8005f12:	2320      	movs	r3, #32
 8005f14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f008 fdf1 	bl	800eb04 <HAL_PCD_DataOutStageCallback>
 8005f22:	e01d      	b.n	8005f60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d114      	bne.n	8005f54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d108      	bne.n	8005f54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	2100      	movs	r1, #0
 8005f50:	f003 fd7e 	bl	8009a50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f008 fdd2 	bl	800eb04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3720      	adds	r7, #32
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	4f54300a 	.word	0x4f54300a
 8005f70:	4f54310a 	.word	0x4f54310a

08005f74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	333c      	adds	r3, #60	; 0x3c
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a15      	ldr	r2, [pc, #84]	; (8005ffc <PCD_EP_OutSetupPacket_int+0x88>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d90e      	bls.n	8005fc8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d009      	beq.n	8005fc8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f008 fd89 	bl	800eae0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <PCD_EP_OutSetupPacket_int+0x88>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d90c      	bls.n	8005ff0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d108      	bne.n	8005ff0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2101      	movs	r1, #1
 8005fec:	f003 fd30 	bl	8009a50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	4f54300a 	.word	0x4f54300a

08006000 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
 800600c:	4613      	mov	r3, r2
 800600e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d107      	bne.n	800602e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800601e:	883b      	ldrh	r3, [r7, #0]
 8006020:	0419      	lsls	r1, r3, #16
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	430a      	orrs	r2, r1
 800602a:	629a      	str	r2, [r3, #40]	; 0x28
 800602c:	e028      	b.n	8006080 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	4413      	add	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]
 8006040:	e00d      	b.n	800605e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	3340      	adds	r3, #64	; 0x40
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	0c1b      	lsrs	r3, r3, #16
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	4413      	add	r3, r2
 8006056:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	3301      	adds	r3, #1
 800605c:	73fb      	strb	r3, [r7, #15]
 800605e:	7bfa      	ldrb	r2, [r7, #15]
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	3b01      	subs	r3, #1
 8006064:	429a      	cmp	r2, r3
 8006066:	d3ec      	bcc.n	8006042 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006068:	883b      	ldrh	r3, [r7, #0]
 800606a:	0418      	lsls	r0, r3, #16
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6819      	ldr	r1, [r3, #0]
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	3b01      	subs	r3, #1
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	4302      	orrs	r2, r0
 8006078:	3340      	adds	r3, #64	; 0x40
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	460b      	mov	r3, r1
 8006098:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	887a      	ldrh	r2, [r7, #2]
 80060a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80060d2:	2300      	movs	r3, #0
 80060d4:	603b      	str	r3, [r7, #0]
 80060d6:	4b20      	ldr	r3, [pc, #128]	; (8006158 <HAL_PWREx_EnableOverDrive+0x90>)
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	4a1f      	ldr	r2, [pc, #124]	; (8006158 <HAL_PWREx_EnableOverDrive+0x90>)
 80060dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e0:	6413      	str	r3, [r2, #64]	; 0x40
 80060e2:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <HAL_PWREx_EnableOverDrive+0x90>)
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80060ee:	4b1b      	ldr	r3, [pc, #108]	; (800615c <HAL_PWREx_EnableOverDrive+0x94>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060f4:	f7fd f89a 	bl	800322c <HAL_GetTick>
 80060f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060fa:	e009      	b.n	8006110 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060fc:	f7fd f896 	bl	800322c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800610a:	d901      	bls.n	8006110 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e01f      	b.n	8006150 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006110:	4b13      	ldr	r3, [pc, #76]	; (8006160 <HAL_PWREx_EnableOverDrive+0x98>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611c:	d1ee      	bne.n	80060fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800611e:	4b11      	ldr	r3, [pc, #68]	; (8006164 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006120:	2201      	movs	r2, #1
 8006122:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006124:	f7fd f882 	bl	800322c <HAL_GetTick>
 8006128:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800612a:	e009      	b.n	8006140 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800612c:	f7fd f87e 	bl	800322c <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800613a:	d901      	bls.n	8006140 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e007      	b.n	8006150 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <HAL_PWREx_EnableOverDrive+0x98>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006148:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800614c:	d1ee      	bne.n	800612c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40023800 	.word	0x40023800
 800615c:	420e0040 	.word	0x420e0040
 8006160:	40007000 	.word	0x40007000
 8006164:	420e0044 	.word	0x420e0044

08006168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e267      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d075      	beq.n	8006272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006186:	4b88      	ldr	r3, [pc, #544]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 030c 	and.w	r3, r3, #12
 800618e:	2b04      	cmp	r3, #4
 8006190:	d00c      	beq.n	80061ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006192:	4b85      	ldr	r3, [pc, #532]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800619a:	2b08      	cmp	r3, #8
 800619c:	d112      	bne.n	80061c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800619e:	4b82      	ldr	r3, [pc, #520]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061aa:	d10b      	bne.n	80061c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ac:	4b7e      	ldr	r3, [pc, #504]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d05b      	beq.n	8006270 <HAL_RCC_OscConfig+0x108>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d157      	bne.n	8006270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e242      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061cc:	d106      	bne.n	80061dc <HAL_RCC_OscConfig+0x74>
 80061ce:	4b76      	ldr	r3, [pc, #472]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a75      	ldr	r2, [pc, #468]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80061d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	e01d      	b.n	8006218 <HAL_RCC_OscConfig+0xb0>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061e4:	d10c      	bne.n	8006200 <HAL_RCC_OscConfig+0x98>
 80061e6:	4b70      	ldr	r3, [pc, #448]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6f      	ldr	r2, [pc, #444]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80061ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	4b6d      	ldr	r3, [pc, #436]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a6c      	ldr	r2, [pc, #432]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80061f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	e00b      	b.n	8006218 <HAL_RCC_OscConfig+0xb0>
 8006200:	4b69      	ldr	r3, [pc, #420]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a68      	ldr	r2, [pc, #416]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 8006206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	4b66      	ldr	r3, [pc, #408]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a65      	ldr	r2, [pc, #404]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 8006212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d013      	beq.n	8006248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006220:	f7fd f804 	bl	800322c <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006228:	f7fd f800 	bl	800322c <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b64      	cmp	r3, #100	; 0x64
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e207      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623a:	4b5b      	ldr	r3, [pc, #364]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f0      	beq.n	8006228 <HAL_RCC_OscConfig+0xc0>
 8006246:	e014      	b.n	8006272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fc fff0 	bl	800322c <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006250:	f7fc ffec 	bl	800322c <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b64      	cmp	r3, #100	; 0x64
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e1f3      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006262:	4b51      	ldr	r3, [pc, #324]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f0      	bne.n	8006250 <HAL_RCC_OscConfig+0xe8>
 800626e:	e000      	b.n	8006272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d063      	beq.n	8006346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800627e:	4b4a      	ldr	r3, [pc, #296]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 030c 	and.w	r3, r3, #12
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00b      	beq.n	80062a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800628a:	4b47      	ldr	r3, [pc, #284]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006292:	2b08      	cmp	r3, #8
 8006294:	d11c      	bne.n	80062d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006296:	4b44      	ldr	r3, [pc, #272]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d116      	bne.n	80062d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062a2:	4b41      	ldr	r3, [pc, #260]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <HAL_RCC_OscConfig+0x152>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d001      	beq.n	80062ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e1c7      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ba:	4b3b      	ldr	r3, [pc, #236]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4937      	ldr	r1, [pc, #220]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ce:	e03a      	b.n	8006346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d020      	beq.n	800631a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062d8:	4b34      	ldr	r3, [pc, #208]	; (80063ac <HAL_RCC_OscConfig+0x244>)
 80062da:	2201      	movs	r2, #1
 80062dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062de:	f7fc ffa5 	bl	800322c <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062e6:	f7fc ffa1 	bl	800322c <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e1a8      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f8:	4b2b      	ldr	r3, [pc, #172]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0f0      	beq.n	80062e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006304:	4b28      	ldr	r3, [pc, #160]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	4925      	ldr	r1, [pc, #148]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 8006314:	4313      	orrs	r3, r2
 8006316:	600b      	str	r3, [r1, #0]
 8006318:	e015      	b.n	8006346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800631a:	4b24      	ldr	r3, [pc, #144]	; (80063ac <HAL_RCC_OscConfig+0x244>)
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fc ff84 	bl	800322c <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006328:	f7fc ff80 	bl	800322c <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e187      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800633a:	4b1b      	ldr	r3, [pc, #108]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f0      	bne.n	8006328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d036      	beq.n	80063c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d016      	beq.n	8006388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800635a:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <HAL_RCC_OscConfig+0x248>)
 800635c:	2201      	movs	r2, #1
 800635e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006360:	f7fc ff64 	bl	800322c <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006368:	f7fc ff60 	bl	800322c <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e167      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <HAL_RCC_OscConfig+0x240>)
 800637c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0f0      	beq.n	8006368 <HAL_RCC_OscConfig+0x200>
 8006386:	e01b      	b.n	80063c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006388:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <HAL_RCC_OscConfig+0x248>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800638e:	f7fc ff4d 	bl	800322c <HAL_GetTick>
 8006392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006394:	e00e      	b.n	80063b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006396:	f7fc ff49 	bl	800322c <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d907      	bls.n	80063b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e150      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
 80063a8:	40023800 	.word	0x40023800
 80063ac:	42470000 	.word	0x42470000
 80063b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063b4:	4b88      	ldr	r3, [pc, #544]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 80063b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1ea      	bne.n	8006396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8097 	beq.w	80064fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ce:	2300      	movs	r3, #0
 80063d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063d2:	4b81      	ldr	r3, [pc, #516]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10f      	bne.n	80063fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]
 80063e2:	4b7d      	ldr	r3, [pc, #500]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	4a7c      	ldr	r2, [pc, #496]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 80063e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ec:	6413      	str	r3, [r2, #64]	; 0x40
 80063ee:	4b7a      	ldr	r3, [pc, #488]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f6:	60bb      	str	r3, [r7, #8]
 80063f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063fe:	4b77      	ldr	r3, [pc, #476]	; (80065dc <HAL_RCC_OscConfig+0x474>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d118      	bne.n	800643c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800640a:	4b74      	ldr	r3, [pc, #464]	; (80065dc <HAL_RCC_OscConfig+0x474>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a73      	ldr	r2, [pc, #460]	; (80065dc <HAL_RCC_OscConfig+0x474>)
 8006410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006416:	f7fc ff09 	bl	800322c <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800641c:	e008      	b.n	8006430 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800641e:	f7fc ff05 	bl	800322c <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e10c      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006430:	4b6a      	ldr	r3, [pc, #424]	; (80065dc <HAL_RCC_OscConfig+0x474>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0f0      	beq.n	800641e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d106      	bne.n	8006452 <HAL_RCC_OscConfig+0x2ea>
 8006444:	4b64      	ldr	r3, [pc, #400]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 8006446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006448:	4a63      	ldr	r2, [pc, #396]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	6713      	str	r3, [r2, #112]	; 0x70
 8006450:	e01c      	b.n	800648c <HAL_RCC_OscConfig+0x324>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b05      	cmp	r3, #5
 8006458:	d10c      	bne.n	8006474 <HAL_RCC_OscConfig+0x30c>
 800645a:	4b5f      	ldr	r3, [pc, #380]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 800645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645e:	4a5e      	ldr	r2, [pc, #376]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 8006460:	f043 0304 	orr.w	r3, r3, #4
 8006464:	6713      	str	r3, [r2, #112]	; 0x70
 8006466:	4b5c      	ldr	r3, [pc, #368]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 8006468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646a:	4a5b      	ldr	r2, [pc, #364]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	6713      	str	r3, [r2, #112]	; 0x70
 8006472:	e00b      	b.n	800648c <HAL_RCC_OscConfig+0x324>
 8006474:	4b58      	ldr	r3, [pc, #352]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 8006476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006478:	4a57      	ldr	r2, [pc, #348]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 800647a:	f023 0301 	bic.w	r3, r3, #1
 800647e:	6713      	str	r3, [r2, #112]	; 0x70
 8006480:	4b55      	ldr	r3, [pc, #340]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 8006482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006484:	4a54      	ldr	r2, [pc, #336]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 8006486:	f023 0304 	bic.w	r3, r3, #4
 800648a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d015      	beq.n	80064c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006494:	f7fc feca 	bl	800322c <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800649a:	e00a      	b.n	80064b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800649c:	f7fc fec6 	bl	800322c <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e0cb      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b2:	4b49      	ldr	r3, [pc, #292]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 80064b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0ee      	beq.n	800649c <HAL_RCC_OscConfig+0x334>
 80064be:	e014      	b.n	80064ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064c0:	f7fc feb4 	bl	800322c <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064c6:	e00a      	b.n	80064de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064c8:	f7fc feb0 	bl	800322c <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e0b5      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064de:	4b3e      	ldr	r3, [pc, #248]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1ee      	bne.n	80064c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d105      	bne.n	80064fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064f0:	4b39      	ldr	r3, [pc, #228]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	4a38      	ldr	r2, [pc, #224]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 80064f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 80a1 	beq.w	8006648 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006506:	4b34      	ldr	r3, [pc, #208]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 030c 	and.w	r3, r3, #12
 800650e:	2b08      	cmp	r3, #8
 8006510:	d05c      	beq.n	80065cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d141      	bne.n	800659e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <HAL_RCC_OscConfig+0x478>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006520:	f7fc fe84 	bl	800322c <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006528:	f7fc fe80 	bl	800322c <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e087      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800653a:	4b27      	ldr	r3, [pc, #156]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69da      	ldr	r2, [r3, #28]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	019b      	lsls	r3, r3, #6
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655c:	085b      	lsrs	r3, r3, #1
 800655e:	3b01      	subs	r3, #1
 8006560:	041b      	lsls	r3, r3, #16
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	061b      	lsls	r3, r3, #24
 800656a:	491b      	ldr	r1, [pc, #108]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 800656c:	4313      	orrs	r3, r2
 800656e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006570:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <HAL_RCC_OscConfig+0x478>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006576:	f7fc fe59 	bl	800322c <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800657e:	f7fc fe55 	bl	800322c <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e05c      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0f0      	beq.n	800657e <HAL_RCC_OscConfig+0x416>
 800659c:	e054      	b.n	8006648 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800659e:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <HAL_RCC_OscConfig+0x478>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a4:	f7fc fe42 	bl	800322c <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ac:	f7fc fe3e 	bl	800322c <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e045      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <HAL_RCC_OscConfig+0x470>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1f0      	bne.n	80065ac <HAL_RCC_OscConfig+0x444>
 80065ca:	e03d      	b.n	8006648 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d107      	bne.n	80065e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e038      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
 80065d8:	40023800 	.word	0x40023800
 80065dc:	40007000 	.word	0x40007000
 80065e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <HAL_RCC_OscConfig+0x4ec>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d028      	beq.n	8006644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d121      	bne.n	8006644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800660a:	429a      	cmp	r2, r3
 800660c:	d11a      	bne.n	8006644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006614:	4013      	ands	r3, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800661a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800661c:	4293      	cmp	r3, r2
 800661e:	d111      	bne.n	8006644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	3b01      	subs	r3, #1
 800662e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006630:	429a      	cmp	r2, r3
 8006632:	d107      	bne.n	8006644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006640:	429a      	cmp	r2, r3
 8006642:	d001      	beq.n	8006648 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e000      	b.n	800664a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800

08006658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e0cc      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800666c:	4b68      	ldr	r3, [pc, #416]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d90c      	bls.n	8006694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800667a:	4b65      	ldr	r3, [pc, #404]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006682:	4b63      	ldr	r3, [pc, #396]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d001      	beq.n	8006694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e0b8      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d020      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066ac:	4b59      	ldr	r3, [pc, #356]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	4a58      	ldr	r2, [pc, #352]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066c4:	4b53      	ldr	r3, [pc, #332]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	4a52      	ldr	r2, [pc, #328]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066d0:	4b50      	ldr	r3, [pc, #320]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	494d      	ldr	r1, [pc, #308]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d044      	beq.n	8006778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d107      	bne.n	8006706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066f6:	4b47      	ldr	r3, [pc, #284]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d119      	bne.n	8006736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e07f      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d003      	beq.n	8006716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006712:	2b03      	cmp	r3, #3
 8006714:	d107      	bne.n	8006726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006716:	4b3f      	ldr	r3, [pc, #252]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d109      	bne.n	8006736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e06f      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006726:	4b3b      	ldr	r3, [pc, #236]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e067      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006736:	4b37      	ldr	r3, [pc, #220]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f023 0203 	bic.w	r2, r3, #3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	4934      	ldr	r1, [pc, #208]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 8006744:	4313      	orrs	r3, r2
 8006746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006748:	f7fc fd70 	bl	800322c <HAL_GetTick>
 800674c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674e:	e00a      	b.n	8006766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006750:	f7fc fd6c 	bl	800322c <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	f241 3288 	movw	r2, #5000	; 0x1388
 800675e:	4293      	cmp	r3, r2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e04f      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006766:	4b2b      	ldr	r3, [pc, #172]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 020c 	and.w	r2, r3, #12
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	429a      	cmp	r2, r3
 8006776:	d1eb      	bne.n	8006750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006778:	4b25      	ldr	r3, [pc, #148]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d20c      	bcs.n	80067a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006786:	4b22      	ldr	r3, [pc, #136]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800678e:	4b20      	ldr	r3, [pc, #128]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d001      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e032      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d008      	beq.n	80067be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067ac:	4b19      	ldr	r3, [pc, #100]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4916      	ldr	r1, [pc, #88]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	490e      	ldr	r1, [pc, #56]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067de:	f000 f821 	bl	8006824 <HAL_RCC_GetSysClockFreq>
 80067e2:	4602      	mov	r2, r0
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	490a      	ldr	r1, [pc, #40]	; (8006818 <HAL_RCC_ClockConfig+0x1c0>)
 80067f0:	5ccb      	ldrb	r3, [r1, r3]
 80067f2:	fa22 f303 	lsr.w	r3, r2, r3
 80067f6:	4a09      	ldr	r2, [pc, #36]	; (800681c <HAL_RCC_ClockConfig+0x1c4>)
 80067f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067fa:	4b09      	ldr	r3, [pc, #36]	; (8006820 <HAL_RCC_ClockConfig+0x1c8>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fa fe54 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40023c00 	.word	0x40023c00
 8006814:	40023800 	.word	0x40023800
 8006818:	08011e58 	.word	0x08011e58
 800681c:	20000000 	.word	0x20000000
 8006820:	20000080 	.word	0x20000080

08006824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006828:	b094      	sub	sp, #80	; 0x50
 800682a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	647b      	str	r3, [r7, #68]	; 0x44
 8006830:	2300      	movs	r3, #0
 8006832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006834:	2300      	movs	r3, #0
 8006836:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800683c:	4b79      	ldr	r3, [pc, #484]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x200>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 030c 	and.w	r3, r3, #12
 8006844:	2b08      	cmp	r3, #8
 8006846:	d00d      	beq.n	8006864 <HAL_RCC_GetSysClockFreq+0x40>
 8006848:	2b08      	cmp	r3, #8
 800684a:	f200 80e1 	bhi.w	8006a10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <HAL_RCC_GetSysClockFreq+0x34>
 8006852:	2b04      	cmp	r3, #4
 8006854:	d003      	beq.n	800685e <HAL_RCC_GetSysClockFreq+0x3a>
 8006856:	e0db      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006858:	4b73      	ldr	r3, [pc, #460]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x204>)
 800685a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800685c:	e0db      	b.n	8006a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800685e:	4b73      	ldr	r3, [pc, #460]	; (8006a2c <HAL_RCC_GetSysClockFreq+0x208>)
 8006860:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006862:	e0d8      	b.n	8006a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006864:	4b6f      	ldr	r3, [pc, #444]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800686c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800686e:	4b6d      	ldr	r3, [pc, #436]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d063      	beq.n	8006942 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800687a:	4b6a      	ldr	r3, [pc, #424]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x200>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	099b      	lsrs	r3, r3, #6
 8006880:	2200      	movs	r2, #0
 8006882:	63bb      	str	r3, [r7, #56]	; 0x38
 8006884:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688c:	633b      	str	r3, [r7, #48]	; 0x30
 800688e:	2300      	movs	r3, #0
 8006890:	637b      	str	r3, [r7, #52]	; 0x34
 8006892:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006896:	4622      	mov	r2, r4
 8006898:	462b      	mov	r3, r5
 800689a:	f04f 0000 	mov.w	r0, #0
 800689e:	f04f 0100 	mov.w	r1, #0
 80068a2:	0159      	lsls	r1, r3, #5
 80068a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068a8:	0150      	lsls	r0, r2, #5
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4621      	mov	r1, r4
 80068b0:	1a51      	subs	r1, r2, r1
 80068b2:	6139      	str	r1, [r7, #16]
 80068b4:	4629      	mov	r1, r5
 80068b6:	eb63 0301 	sbc.w	r3, r3, r1
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	f04f 0300 	mov.w	r3, #0
 80068c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068c8:	4659      	mov	r1, fp
 80068ca:	018b      	lsls	r3, r1, #6
 80068cc:	4651      	mov	r1, sl
 80068ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068d2:	4651      	mov	r1, sl
 80068d4:	018a      	lsls	r2, r1, #6
 80068d6:	4651      	mov	r1, sl
 80068d8:	ebb2 0801 	subs.w	r8, r2, r1
 80068dc:	4659      	mov	r1, fp
 80068de:	eb63 0901 	sbc.w	r9, r3, r1
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068f6:	4690      	mov	r8, r2
 80068f8:	4699      	mov	r9, r3
 80068fa:	4623      	mov	r3, r4
 80068fc:	eb18 0303 	adds.w	r3, r8, r3
 8006900:	60bb      	str	r3, [r7, #8]
 8006902:	462b      	mov	r3, r5
 8006904:	eb49 0303 	adc.w	r3, r9, r3
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006916:	4629      	mov	r1, r5
 8006918:	024b      	lsls	r3, r1, #9
 800691a:	4621      	mov	r1, r4
 800691c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006920:	4621      	mov	r1, r4
 8006922:	024a      	lsls	r2, r1, #9
 8006924:	4610      	mov	r0, r2
 8006926:	4619      	mov	r1, r3
 8006928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692a:	2200      	movs	r2, #0
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28
 800692e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006934:	f7fa f948 	bl	8000bc8 <__aeabi_uldivmod>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4613      	mov	r3, r2
 800693e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006940:	e058      	b.n	80069f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006942:	4b38      	ldr	r3, [pc, #224]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	099b      	lsrs	r3, r3, #6
 8006948:	2200      	movs	r2, #0
 800694a:	4618      	mov	r0, r3
 800694c:	4611      	mov	r1, r2
 800694e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006952:	623b      	str	r3, [r7, #32]
 8006954:	2300      	movs	r3, #0
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
 8006958:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800695c:	4642      	mov	r2, r8
 800695e:	464b      	mov	r3, r9
 8006960:	f04f 0000 	mov.w	r0, #0
 8006964:	f04f 0100 	mov.w	r1, #0
 8006968:	0159      	lsls	r1, r3, #5
 800696a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800696e:	0150      	lsls	r0, r2, #5
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4641      	mov	r1, r8
 8006976:	ebb2 0a01 	subs.w	sl, r2, r1
 800697a:	4649      	mov	r1, r9
 800697c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006980:	f04f 0200 	mov.w	r2, #0
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800698c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006990:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006994:	ebb2 040a 	subs.w	r4, r2, sl
 8006998:	eb63 050b 	sbc.w	r5, r3, fp
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	00eb      	lsls	r3, r5, #3
 80069a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069aa:	00e2      	lsls	r2, r4, #3
 80069ac:	4614      	mov	r4, r2
 80069ae:	461d      	mov	r5, r3
 80069b0:	4643      	mov	r3, r8
 80069b2:	18e3      	adds	r3, r4, r3
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	464b      	mov	r3, r9
 80069b8:	eb45 0303 	adc.w	r3, r5, r3
 80069bc:	607b      	str	r3, [r7, #4]
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069ca:	4629      	mov	r1, r5
 80069cc:	028b      	lsls	r3, r1, #10
 80069ce:	4621      	mov	r1, r4
 80069d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069d4:	4621      	mov	r1, r4
 80069d6:	028a      	lsls	r2, r1, #10
 80069d8:	4610      	mov	r0, r2
 80069da:	4619      	mov	r1, r3
 80069dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069de:	2200      	movs	r2, #0
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	61fa      	str	r2, [r7, #28]
 80069e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069e8:	f7fa f8ee 	bl	8000bc8 <__aeabi_uldivmod>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4613      	mov	r3, r2
 80069f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069f4:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	0c1b      	lsrs	r3, r3, #16
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	3301      	adds	r3, #1
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a0e:	e002      	b.n	8006a16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a10:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3750      	adds	r7, #80	; 0x50
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a22:	bf00      	nop
 8006a24:	40023800 	.word	0x40023800
 8006a28:	00f42400 	.word	0x00f42400
 8006a2c:	007a1200 	.word	0x007a1200

08006a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a34:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a36:	681b      	ldr	r3, [r3, #0]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000000 	.word	0x20000000

08006a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a4c:	f7ff fff0 	bl	8006a30 <HAL_RCC_GetHCLKFreq>
 8006a50:	4602      	mov	r2, r0
 8006a52:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	0a9b      	lsrs	r3, r3, #10
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	4903      	ldr	r1, [pc, #12]	; (8006a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a5e:	5ccb      	ldrb	r3, [r1, r3]
 8006a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	08011e68 	.word	0x08011e68

08006a70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	220f      	movs	r2, #15
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a80:	4b12      	ldr	r3, [pc, #72]	; (8006acc <HAL_RCC_GetClockConfig+0x5c>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 0203 	and.w	r2, r3, #3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <HAL_RCC_GetClockConfig+0x5c>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <HAL_RCC_GetClockConfig+0x5c>)
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006aa4:	4b09      	ldr	r3, [pc, #36]	; (8006acc <HAL_RCC_GetClockConfig+0x5c>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	08db      	lsrs	r3, r3, #3
 8006aaa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ab2:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <HAL_RCC_GetClockConfig+0x60>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 020f 	and.w	r2, r3, #15
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	601a      	str	r2, [r3, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	40023c00 	.word	0x40023c00

08006ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10b      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d075      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b08:	4b91      	ldr	r3, [pc, #580]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b0e:	f7fc fb8d 	bl	800322c <HAL_GetTick>
 8006b12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b14:	e008      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b16:	f7fc fb89 	bl	800322c <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e189      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b28:	4b8a      	ldr	r3, [pc, #552]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1f0      	bne.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d009      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	019a      	lsls	r2, r3, #6
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	071b      	lsls	r3, r3, #28
 8006b4c:	4981      	ldr	r1, [pc, #516]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01f      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b60:	4b7c      	ldr	r3, [pc, #496]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b66:	0f1b      	lsrs	r3, r3, #28
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	019a      	lsls	r2, r3, #6
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	061b      	lsls	r3, r3, #24
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	071b      	lsls	r3, r3, #28
 8006b80:	4974      	ldr	r1, [pc, #464]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b88:	4b72      	ldr	r3, [pc, #456]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8e:	f023 021f 	bic.w	r2, r3, #31
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	496e      	ldr	r1, [pc, #440]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00d      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	019a      	lsls	r2, r3, #6
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	061b      	lsls	r3, r3, #24
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	071b      	lsls	r3, r3, #28
 8006bc0:	4964      	ldr	r1, [pc, #400]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bc8:	4b61      	ldr	r3, [pc, #388]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bce:	f7fc fb2d 	bl	800322c <HAL_GetTick>
 8006bd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bd6:	f7fc fb29 	bl	800322c <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e129      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006be8:	4b5a      	ldr	r3, [pc, #360]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0f0      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d105      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d079      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c0c:	4b52      	ldr	r3, [pc, #328]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c12:	f7fc fb0b 	bl	800322c <HAL_GetTick>
 8006c16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c18:	e008      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c1a:	f7fc fb07 	bl	800322c <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e107      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c2c:	4b49      	ldr	r3, [pc, #292]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c38:	d0ef      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d020      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c46:	4b43      	ldr	r3, [pc, #268]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c4c:	0f1b      	lsrs	r3, r3, #28
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	019a      	lsls	r2, r3, #6
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	061b      	lsls	r3, r3, #24
 8006c60:	431a      	orrs	r2, r3
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	071b      	lsls	r3, r3, #28
 8006c66:	493b      	ldr	r1, [pc, #236]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c6e:	4b39      	ldr	r3, [pc, #228]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	021b      	lsls	r3, r3, #8
 8006c80:	4934      	ldr	r1, [pc, #208]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01e      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c94:	4b2f      	ldr	r3, [pc, #188]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9a:	0e1b      	lsrs	r3, r3, #24
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	019a      	lsls	r2, r3, #6
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	061b      	lsls	r3, r3, #24
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	071b      	lsls	r3, r3, #28
 8006cb4:	4927      	ldr	r1, [pc, #156]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006cbc:	4b25      	ldr	r3, [pc, #148]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	4922      	ldr	r1, [pc, #136]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cd2:	4b21      	ldr	r3, [pc, #132]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cd8:	f7fc faa8 	bl	800322c <HAL_GetTick>
 8006cdc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ce0:	f7fc faa4 	bl	800322c <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e0a4      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cf2:	4b18      	ldr	r3, [pc, #96]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cfe:	d1ef      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 808b 	beq.w	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	4a0f      	ldr	r2, [pc, #60]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d2a:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a0b      	ldr	r2, [pc, #44]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d36:	f7fc fa79 	bl	800322c <HAL_GetTick>
 8006d3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d3c:	e010      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d3e:	f7fc fa75 	bl	800322c <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d909      	bls.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e075      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006d50:	42470068 	.word	0x42470068
 8006d54:	40023800 	.word	0x40023800
 8006d58:	42470070 	.word	0x42470070
 8006d5c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d60:	4b38      	ldr	r3, [pc, #224]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0e8      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d6c:	4b36      	ldr	r3, [pc, #216]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d74:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d02f      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d028      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d8a:	4b2f      	ldr	r3, [pc, #188]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d94:	4b2d      	ldr	r3, [pc, #180]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d9a:	4b2c      	ldr	r3, [pc, #176]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006da0:	4a29      	ldr	r2, [pc, #164]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006da6:	4b28      	ldr	r3, [pc, #160]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d114      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006db2:	f7fc fa3b 	bl	800322c <HAL_GetTick>
 8006db6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db8:	e00a      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dba:	f7fc fa37 	bl	800322c <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e035      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd0:	4b1d      	ldr	r3, [pc, #116]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0ee      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de8:	d10d      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006dea:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfe:	4912      	ldr	r1, [pc, #72]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	608b      	str	r3, [r1, #8]
 8006e04:	e005      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006e06:	4b10      	ldr	r3, [pc, #64]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	4a0f      	ldr	r2, [pc, #60]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e10:	6093      	str	r3, [r2, #8]
 8006e12:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e1e:	490a      	ldr	r1, [pc, #40]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0310 	and.w	r3, r3, #16
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006e36:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006e38:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40007000 	.word	0x40007000
 8006e48:	40023800 	.word	0x40023800
 8006e4c:	42470e40 	.word	0x42470e40
 8006e50:	424711e0 	.word	0x424711e0

08006e54 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e025      	b.n	8006eb4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d106      	bne.n	8006e82 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f81d 	bl	8006ebc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f001 f905 	bl	80080a4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	f001 f95a 	bl	800815e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ee2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d101      	bne.n	8006eee <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006eea:	2302      	movs	r3, #2
 8006eec:	e021      	b.n	8006f32 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d002      	beq.n	8006efa <HAL_SDRAM_SendCommand+0x2a>
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	2b05      	cmp	r3, #5
 8006ef8:	d118      	bne.n	8006f2c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2202      	movs	r2, #2
 8006efe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 f990 	bl	8008230 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d104      	bne.n	8006f22 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2205      	movs	r2, #5
 8006f1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f20:	e006      	b.n	8006f30 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f2a:	e001      	b.n	8006f30 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d101      	bne.n	8006f54 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006f50:	2302      	movs	r3, #2
 8006f52:	e016      	b.n	8006f82 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d10f      	bne.n	8006f80 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 f99b 	bl	80082aa <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e000      	b.n	8006f82 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e07b      	b.n	8007094 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d108      	bne.n	8006fb6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fac:	d009      	beq.n	8006fc2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	61da      	str	r2, [r3, #28]
 8006fb4:	e005      	b.n	8006fc2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7fa f9ff 	bl	80013e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ff8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007014:	431a      	orrs	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007046:	ea42 0103 	orr.w	r1, r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	f003 0104 	and.w	r1, r3, #4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	f003 0210 	and.w	r2, r3, #16
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69da      	ldr	r2, [r3, #28]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007082:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e01a      	b.n	80070e4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fa f9d2 	bl	8001470 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_SPI_Transmit+0x22>
 800710a:	2302      	movs	r3, #2
 800710c:	e126      	b.n	800735c <HAL_SPI_Transmit+0x270>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007116:	f7fc f889 	bl	800322c <HAL_GetTick>
 800711a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b01      	cmp	r3, #1
 800712a:	d002      	beq.n	8007132 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800712c:	2302      	movs	r3, #2
 800712e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007130:	e10b      	b.n	800734a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_SPI_Transmit+0x52>
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007142:	e102      	b.n	800734a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2203      	movs	r2, #3
 8007148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	88fa      	ldrh	r2, [r7, #6]
 800715c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	88fa      	ldrh	r2, [r7, #6]
 8007162:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800718a:	d10f      	bne.n	80071ac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800719a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b6:	2b40      	cmp	r3, #64	; 0x40
 80071b8:	d007      	beq.n	80071ca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d2:	d14b      	bne.n	800726c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <HAL_SPI_Transmit+0xf6>
 80071dc:	8afb      	ldrh	r3, [r7, #22]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d13e      	bne.n	8007260 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	881a      	ldrh	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	1c9a      	adds	r2, r3, #2
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	b29a      	uxth	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007206:	e02b      	b.n	8007260 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b02      	cmp	r3, #2
 8007214:	d112      	bne.n	800723c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	881a      	ldrh	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	1c9a      	adds	r2, r3, #2
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007230:	b29b      	uxth	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	86da      	strh	r2, [r3, #54]	; 0x36
 800723a:	e011      	b.n	8007260 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800723c:	f7fb fff6 	bl	800322c <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d803      	bhi.n	8007254 <HAL_SPI_Transmit+0x168>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007252:	d102      	bne.n	800725a <HAL_SPI_Transmit+0x16e>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d102      	bne.n	8007260 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800725e:	e074      	b.n	800734a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1ce      	bne.n	8007208 <HAL_SPI_Transmit+0x11c>
 800726a:	e04c      	b.n	8007306 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <HAL_SPI_Transmit+0x18e>
 8007274:	8afb      	ldrh	r3, [r7, #22]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d140      	bne.n	80072fc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	330c      	adds	r3, #12
 8007284:	7812      	ldrb	r2, [r2, #0]
 8007286:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072a0:	e02c      	b.n	80072fc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d113      	bne.n	80072d8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80072d6:	e011      	b.n	80072fc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072d8:	f7fb ffa8 	bl	800322c <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d803      	bhi.n	80072f0 <HAL_SPI_Transmit+0x204>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ee:	d102      	bne.n	80072f6 <HAL_SPI_Transmit+0x20a>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80072fa:	e026      	b.n	800734a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1cd      	bne.n	80072a2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 fbda 	bl	8007ac4 <SPI_EndRxTxTransaction>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2220      	movs	r2, #32
 800731a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	77fb      	strb	r3, [r7, #31]
 8007346:	e000      	b.n	800734a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007348:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800735a:	7ffb      	ldrb	r3, [r7, #31]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3720      	adds	r7, #32
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	4613      	mov	r3, r2
 8007372:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007380:	d112      	bne.n	80073a8 <HAL_SPI_Receive+0x44>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10e      	bne.n	80073a8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2204      	movs	r2, #4
 800738e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007392:	88fa      	ldrh	r2, [r7, #6]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	4613      	mov	r3, r2
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 f8f1 	bl	8007586 <HAL_SPI_TransmitReceive>
 80073a4:	4603      	mov	r3, r0
 80073a6:	e0ea      	b.n	800757e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_SPI_Receive+0x52>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e0e3      	b.n	800757e <HAL_SPI_Receive+0x21a>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073be:	f7fb ff35 	bl	800322c <HAL_GetTick>
 80073c2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d002      	beq.n	80073d6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80073d0:	2302      	movs	r3, #2
 80073d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073d4:	e0ca      	b.n	800756c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <HAL_SPI_Receive+0x7e>
 80073dc:	88fb      	ldrh	r3, [r7, #6]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d102      	bne.n	80073e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073e6:	e0c1      	b.n	800756c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2204      	movs	r2, #4
 80073ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	88fa      	ldrh	r2, [r7, #6]
 8007400:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	88fa      	ldrh	r2, [r7, #6]
 8007406:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800742e:	d10f      	bne.n	8007450 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800743e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800744e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745a:	2b40      	cmp	r3, #64	; 0x40
 800745c:	d007      	beq.n	800746e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800746c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d162      	bne.n	800753c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007476:	e02e      	b.n	80074d6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b01      	cmp	r3, #1
 8007484:	d115      	bne.n	80074b2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f103 020c 	add.w	r2, r3, #12
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	7812      	ldrb	r2, [r2, #0]
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074b0:	e011      	b.n	80074d6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074b2:	f7fb febb 	bl	800322c <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d803      	bhi.n	80074ca <HAL_SPI_Receive+0x166>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d102      	bne.n	80074d0 <HAL_SPI_Receive+0x16c>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d102      	bne.n	80074d6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80074d4:	e04a      	b.n	800756c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074da:	b29b      	uxth	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1cb      	bne.n	8007478 <HAL_SPI_Receive+0x114>
 80074e0:	e031      	b.n	8007546 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d113      	bne.n	8007518 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	b292      	uxth	r2, r2
 80074fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	1c9a      	adds	r2, r3, #2
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007516:	e011      	b.n	800753c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007518:	f7fb fe88 	bl	800322c <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	429a      	cmp	r2, r3
 8007526:	d803      	bhi.n	8007530 <HAL_SPI_Receive+0x1cc>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752e:	d102      	bne.n	8007536 <HAL_SPI_Receive+0x1d2>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d102      	bne.n	800753c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	75fb      	strb	r3, [r7, #23]
          goto error;
 800753a:	e017      	b.n	800756c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007540:	b29b      	uxth	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1cd      	bne.n	80074e2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 fa54 	bl	80079f8 <SPI_EndRxTransaction>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2220      	movs	r2, #32
 800755a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	75fb      	strb	r3, [r7, #23]
 8007568:	e000      	b.n	800756c <HAL_SPI_Receive+0x208>
  }

error :
 800756a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b08c      	sub	sp, #48	; 0x30
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007594:	2301      	movs	r3, #1
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_SPI_TransmitReceive+0x26>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e18a      	b.n	80078c2 <HAL_SPI_TransmitReceive+0x33c>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075b4:	f7fb fe3a 	bl	800322c <HAL_GetTick>
 80075b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80075ca:	887b      	ldrh	r3, [r7, #2]
 80075cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d00f      	beq.n	80075f6 <HAL_SPI_TransmitReceive+0x70>
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075dc:	d107      	bne.n	80075ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d103      	bne.n	80075ee <HAL_SPI_TransmitReceive+0x68>
 80075e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d003      	beq.n	80075f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80075ee:	2302      	movs	r3, #2
 80075f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80075f4:	e15b      	b.n	80078ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_SPI_TransmitReceive+0x82>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <HAL_SPI_TransmitReceive+0x82>
 8007602:	887b      	ldrh	r3, [r7, #2]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800760e:	e14e      	b.n	80078ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b04      	cmp	r3, #4
 800761a:	d003      	beq.n	8007624 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2205      	movs	r2, #5
 8007620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	887a      	ldrh	r2, [r7, #2]
 8007634:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	887a      	ldrh	r2, [r7, #2]
 800763a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	887a      	ldrh	r2, [r7, #2]
 8007646:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	887a      	ldrh	r2, [r7, #2]
 800764c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007664:	2b40      	cmp	r3, #64	; 0x40
 8007666:	d007      	beq.n	8007678 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007680:	d178      	bne.n	8007774 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <HAL_SPI_TransmitReceive+0x10a>
 800768a:	8b7b      	ldrh	r3, [r7, #26]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d166      	bne.n	800775e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	881a      	ldrh	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a0:	1c9a      	adds	r2, r3, #2
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076b4:	e053      	b.n	800775e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d11b      	bne.n	80076fc <HAL_SPI_TransmitReceive+0x176>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d016      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x176>
 80076ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d113      	bne.n	80076fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d8:	881a      	ldrh	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e4:	1c9a      	adds	r2, r3, #2
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b01      	cmp	r3, #1
 8007708:	d119      	bne.n	800773e <HAL_SPI_TransmitReceive+0x1b8>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d014      	beq.n	800773e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	b292      	uxth	r2, r2
 8007720:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	1c9a      	adds	r2, r3, #2
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007730:	b29b      	uxth	r3, r3
 8007732:	3b01      	subs	r3, #1
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800773a:	2301      	movs	r3, #1
 800773c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800773e:	f7fb fd75 	bl	800322c <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800774a:	429a      	cmp	r2, r3
 800774c:	d807      	bhi.n	800775e <HAL_SPI_TransmitReceive+0x1d8>
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d003      	beq.n	800775e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800775c:	e0a7      	b.n	80078ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007762:	b29b      	uxth	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1a6      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x130>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1a1      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x130>
 8007772:	e07c      	b.n	800786e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <HAL_SPI_TransmitReceive+0x1fc>
 800777c:	8b7b      	ldrh	r3, [r7, #26]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d16b      	bne.n	800785a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	330c      	adds	r3, #12
 800778c:	7812      	ldrb	r2, [r2, #0]
 800778e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077a8:	e057      	b.n	800785a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d11c      	bne.n	80077f2 <HAL_SPI_TransmitReceive+0x26c>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d017      	beq.n	80077f2 <HAL_SPI_TransmitReceive+0x26c>
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d114      	bne.n	80077f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	330c      	adds	r3, #12
 80077d2:	7812      	ldrb	r2, [r2, #0]
 80077d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d119      	bne.n	8007834 <HAL_SPI_TransmitReceive+0x2ae>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d014      	beq.n	8007834 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007830:	2301      	movs	r3, #1
 8007832:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007834:	f7fb fcfa 	bl	800322c <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007840:	429a      	cmp	r2, r3
 8007842:	d803      	bhi.n	800784c <HAL_SPI_TransmitReceive+0x2c6>
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784a:	d102      	bne.n	8007852 <HAL_SPI_TransmitReceive+0x2cc>
 800784c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784e:	2b00      	cmp	r3, #0
 8007850:	d103      	bne.n	800785a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007858:	e029      	b.n	80078ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800785e:	b29b      	uxth	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1a2      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x224>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007868:	b29b      	uxth	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d19d      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800786e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 f926 	bl	8007ac4 <SPI_EndRxTxTransaction>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d006      	beq.n	800788c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800788a:	e010      	b.n	80078ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10b      	bne.n	80078ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	e000      	b.n	80078ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80078ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3730      	adds	r7, #48	; 0x30
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078d8:	b2db      	uxtb	r3, r3
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
	...

080078e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	4613      	mov	r3, r2
 80078f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078f8:	f7fb fc98 	bl	800322c <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	1a9b      	subs	r3, r3, r2
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4413      	add	r3, r2
 8007906:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007908:	f7fb fc90 	bl	800322c <HAL_GetTick>
 800790c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800790e:	4b39      	ldr	r3, [pc, #228]	; (80079f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	015b      	lsls	r3, r3, #5
 8007914:	0d1b      	lsrs	r3, r3, #20
 8007916:	69fa      	ldr	r2, [r7, #28]
 8007918:	fb02 f303 	mul.w	r3, r2, r3
 800791c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800791e:	e054      	b.n	80079ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007926:	d050      	beq.n	80079ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007928:	f7fb fc80 	bl	800322c <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	429a      	cmp	r2, r3
 8007936:	d902      	bls.n	800793e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d13d      	bne.n	80079ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800794c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007956:	d111      	bne.n	800797c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007960:	d004      	beq.n	800796c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796a:	d107      	bne.n	800797c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007984:	d10f      	bne.n	80079a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e017      	b.n	80079ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4013      	ands	r3, r2
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	bf0c      	ite	eq
 80079da:	2301      	moveq	r3, #1
 80079dc:	2300      	movne	r3, #0
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d19b      	bne.n	8007920 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3720      	adds	r7, #32
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20000000 	.word	0x20000000

080079f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a0c:	d111      	bne.n	8007a32 <SPI_EndRxTransaction+0x3a>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a16:	d004      	beq.n	8007a22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a20:	d107      	bne.n	8007a32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a30:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a3a:	d12a      	bne.n	8007a92 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a44:	d012      	beq.n	8007a6c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2180      	movs	r1, #128	; 0x80
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7ff ff49 	bl	80078e8 <SPI_WaitFlagStateUntilTimeout>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d02d      	beq.n	8007ab8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a60:	f043 0220 	orr.w	r2, r3, #32
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e026      	b.n	8007aba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2200      	movs	r2, #0
 8007a74:	2101      	movs	r1, #1
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f7ff ff36 	bl	80078e8 <SPI_WaitFlagStateUntilTimeout>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d01a      	beq.n	8007ab8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a86:	f043 0220 	orr.w	r2, r3, #32
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e013      	b.n	8007aba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f7ff ff23 	bl	80078e8 <SPI_WaitFlagStateUntilTimeout>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aac:	f043 0220 	orr.w	r2, r3, #32
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e000      	b.n	8007aba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b088      	sub	sp, #32
 8007ac8:	af02      	add	r7, sp, #8
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ad0:	4b1b      	ldr	r3, [pc, #108]	; (8007b40 <SPI_EndRxTxTransaction+0x7c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1b      	ldr	r2, [pc, #108]	; (8007b44 <SPI_EndRxTxTransaction+0x80>)
 8007ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ada:	0d5b      	lsrs	r3, r3, #21
 8007adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ae0:	fb02 f303 	mul.w	r3, r2, r3
 8007ae4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aee:	d112      	bne.n	8007b16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2200      	movs	r2, #0
 8007af8:	2180      	movs	r1, #128	; 0x80
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff fef4 	bl	80078e8 <SPI_WaitFlagStateUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d016      	beq.n	8007b34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	f043 0220 	orr.w	r2, r3, #32
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e00f      	b.n	8007b36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2c:	2b80      	cmp	r3, #128	; 0x80
 8007b2e:	d0f2      	beq.n	8007b16 <SPI_EndRxTxTransaction+0x52>
 8007b30:	e000      	b.n	8007b34 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b32:	bf00      	nop
  }

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000000 	.word	0x20000000
 8007b44:	165e9f81 	.word	0x165e9f81

08007b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e041      	b.n	8007bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d106      	bne.n	8007b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f839 	bl	8007be6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f000 f9d8 	bl	8007f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007bee:	bf00      	nop
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d001      	beq.n	8007c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e04e      	b.n	8007cb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0201 	orr.w	r2, r2, #1
 8007c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a23      	ldr	r2, [pc, #140]	; (8007cc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d022      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x80>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3e:	d01d      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x80>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a1f      	ldr	r2, [pc, #124]	; (8007cc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d018      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x80>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a1e      	ldr	r2, [pc, #120]	; (8007cc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d013      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x80>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a1c      	ldr	r2, [pc, #112]	; (8007ccc <HAL_TIM_Base_Start_IT+0xd0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00e      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x80>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a1b      	ldr	r2, [pc, #108]	; (8007cd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d009      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x80>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a19      	ldr	r2, [pc, #100]	; (8007cd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d004      	beq.n	8007c7c <HAL_TIM_Base_Start_IT+0x80>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a18      	ldr	r2, [pc, #96]	; (8007cd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d111      	bne.n	8007ca0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b06      	cmp	r3, #6
 8007c8c:	d010      	beq.n	8007cb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0201 	orr.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9e:	e007      	b.n	8007cb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	40010000 	.word	0x40010000
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	40000c00 	.word	0x40000c00
 8007cd0:	40010400 	.word	0x40010400
 8007cd4:	40014000 	.word	0x40014000
 8007cd8:	40001800 	.word	0x40001800

08007cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d122      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d11b      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0202 	mvn.w	r2, #2
 8007d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f8ee 	bl	8007f00 <HAL_TIM_IC_CaptureCallback>
 8007d24:	e005      	b.n	8007d32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f8e0 	bl	8007eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8f1 	bl	8007f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d122      	bne.n	8007d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f003 0304 	and.w	r3, r3, #4
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d11b      	bne.n	8007d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f06f 0204 	mvn.w	r2, #4
 8007d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8c4 	bl	8007f00 <HAL_TIM_IC_CaptureCallback>
 8007d78:	e005      	b.n	8007d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f8b6 	bl	8007eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f8c7 	bl	8007f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d122      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d11b      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0208 	mvn.w	r2, #8
 8007db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2204      	movs	r2, #4
 8007db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f89a 	bl	8007f00 <HAL_TIM_IC_CaptureCallback>
 8007dcc:	e005      	b.n	8007dda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f88c 	bl	8007eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f89d 	bl	8007f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0310 	and.w	r3, r3, #16
 8007dea:	2b10      	cmp	r3, #16
 8007dec:	d122      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0310 	and.w	r3, r3, #16
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d11b      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0210 	mvn.w	r2, #16
 8007e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2208      	movs	r2, #8
 8007e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f870 	bl	8007f00 <HAL_TIM_IC_CaptureCallback>
 8007e20:	e005      	b.n	8007e2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f862 	bl	8007eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f873 	bl	8007f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d10e      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d107      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f06f 0201 	mvn.w	r2, #1
 8007e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7f9 fa34 	bl	80012c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6a:	2b80      	cmp	r3, #128	; 0x80
 8007e6c:	d10e      	bne.n	8007e8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e78:	2b80      	cmp	r3, #128	; 0x80
 8007e7a:	d107      	bne.n	8007e8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f902 	bl	8008090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e96:	2b40      	cmp	r3, #64	; 0x40
 8007e98:	d10e      	bne.n	8007eb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea4:	2b40      	cmp	r3, #64	; 0x40
 8007ea6:	d107      	bne.n	8007eb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f838 	bl	8007f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b20      	cmp	r3, #32
 8007ec4:	d10e      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f003 0320 	and.w	r3, r3, #32
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d107      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f06f 0220 	mvn.w	r2, #32
 8007edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f8cc 	bl	800807c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a40      	ldr	r2, [pc, #256]	; (8008050 <TIM_Base_SetConfig+0x114>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d013      	beq.n	8007f7c <TIM_Base_SetConfig+0x40>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5a:	d00f      	beq.n	8007f7c <TIM_Base_SetConfig+0x40>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a3d      	ldr	r2, [pc, #244]	; (8008054 <TIM_Base_SetConfig+0x118>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00b      	beq.n	8007f7c <TIM_Base_SetConfig+0x40>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a3c      	ldr	r2, [pc, #240]	; (8008058 <TIM_Base_SetConfig+0x11c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d007      	beq.n	8007f7c <TIM_Base_SetConfig+0x40>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a3b      	ldr	r2, [pc, #236]	; (800805c <TIM_Base_SetConfig+0x120>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d003      	beq.n	8007f7c <TIM_Base_SetConfig+0x40>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a3a      	ldr	r2, [pc, #232]	; (8008060 <TIM_Base_SetConfig+0x124>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d108      	bne.n	8007f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a2f      	ldr	r2, [pc, #188]	; (8008050 <TIM_Base_SetConfig+0x114>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d02b      	beq.n	8007fee <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f9c:	d027      	beq.n	8007fee <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a2c      	ldr	r2, [pc, #176]	; (8008054 <TIM_Base_SetConfig+0x118>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d023      	beq.n	8007fee <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a2b      	ldr	r2, [pc, #172]	; (8008058 <TIM_Base_SetConfig+0x11c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01f      	beq.n	8007fee <TIM_Base_SetConfig+0xb2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a2a      	ldr	r2, [pc, #168]	; (800805c <TIM_Base_SetConfig+0x120>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01b      	beq.n	8007fee <TIM_Base_SetConfig+0xb2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a29      	ldr	r2, [pc, #164]	; (8008060 <TIM_Base_SetConfig+0x124>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d017      	beq.n	8007fee <TIM_Base_SetConfig+0xb2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a28      	ldr	r2, [pc, #160]	; (8008064 <TIM_Base_SetConfig+0x128>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d013      	beq.n	8007fee <TIM_Base_SetConfig+0xb2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a27      	ldr	r2, [pc, #156]	; (8008068 <TIM_Base_SetConfig+0x12c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00f      	beq.n	8007fee <TIM_Base_SetConfig+0xb2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a26      	ldr	r2, [pc, #152]	; (800806c <TIM_Base_SetConfig+0x130>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00b      	beq.n	8007fee <TIM_Base_SetConfig+0xb2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a25      	ldr	r2, [pc, #148]	; (8008070 <TIM_Base_SetConfig+0x134>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d007      	beq.n	8007fee <TIM_Base_SetConfig+0xb2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a24      	ldr	r2, [pc, #144]	; (8008074 <TIM_Base_SetConfig+0x138>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d003      	beq.n	8007fee <TIM_Base_SetConfig+0xb2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a23      	ldr	r2, [pc, #140]	; (8008078 <TIM_Base_SetConfig+0x13c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d108      	bne.n	8008000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	4313      	orrs	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a0a      	ldr	r2, [pc, #40]	; (8008050 <TIM_Base_SetConfig+0x114>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d003      	beq.n	8008034 <TIM_Base_SetConfig+0xf8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a0c      	ldr	r2, [pc, #48]	; (8008060 <TIM_Base_SetConfig+0x124>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d103      	bne.n	800803c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	615a      	str	r2, [r3, #20]
}
 8008042:	bf00      	nop
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40010000 	.word	0x40010000
 8008054:	40000400 	.word	0x40000400
 8008058:	40000800 	.word	0x40000800
 800805c:	40000c00 	.word	0x40000c00
 8008060:	40010400 	.word	0x40010400
 8008064:	40014000 	.word	0x40014000
 8008068:	40014400 	.word	0x40014400
 800806c:	40014800 	.word	0x40014800
 8008070:	40001800 	.word	0x40001800
 8008074:	40001c00 	.word	0x40001c00
 8008078:	40002000 	.word	0x40002000

0800807c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d123      	bne.n	80080fe <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80080be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	6851      	ldr	r1, [r2, #4]
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	6892      	ldr	r2, [r2, #8]
 80080ca:	4311      	orrs	r1, r2
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	68d2      	ldr	r2, [r2, #12]
 80080d0:	4311      	orrs	r1, r2
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	6912      	ldr	r2, [r2, #16]
 80080d6:	4311      	orrs	r1, r2
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	6952      	ldr	r2, [r2, #20]
 80080dc:	4311      	orrs	r1, r2
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	6992      	ldr	r2, [r2, #24]
 80080e2:	4311      	orrs	r1, r2
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	69d2      	ldr	r2, [r2, #28]
 80080e8:	4311      	orrs	r1, r2
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	6a12      	ldr	r2, [r2, #32]
 80080ee:	4311      	orrs	r1, r2
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080f4:	430a      	orrs	r2, r1
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	e028      	b.n	8008150 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	69d9      	ldr	r1, [r3, #28]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	4319      	orrs	r1, r3
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	430b      	orrs	r3, r1
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008124:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	6851      	ldr	r1, [r2, #4]
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	6892      	ldr	r2, [r2, #8]
 8008130:	4311      	orrs	r1, r2
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	68d2      	ldr	r2, [r2, #12]
 8008136:	4311      	orrs	r1, r2
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	6912      	ldr	r2, [r2, #16]
 800813c:	4311      	orrs	r1, r2
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	6952      	ldr	r2, [r2, #20]
 8008142:	4311      	orrs	r1, r2
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	6992      	ldr	r2, [r2, #24]
 8008148:	430a      	orrs	r2, r1
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800815e:	b480      	push	{r7}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d128      	bne.n	80081c2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	1e59      	subs	r1, r3, #1
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	3b01      	subs	r3, #1
 8008184:	011b      	lsls	r3, r3, #4
 8008186:	4319      	orrs	r1, r3
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	3b01      	subs	r3, #1
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	4319      	orrs	r1, r3
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	3b01      	subs	r3, #1
 8008198:	031b      	lsls	r3, r3, #12
 800819a:	4319      	orrs	r1, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	041b      	lsls	r3, r3, #16
 80081a4:	4319      	orrs	r1, r3
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	051b      	lsls	r3, r3, #20
 80081ae:	4319      	orrs	r1, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	061b      	lsls	r3, r3, #24
 80081b8:	430b      	orrs	r3, r1
 80081ba:	431a      	orrs	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	609a      	str	r2, [r3, #8]
 80081c0:	e02f      	b.n	8008222 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	68d2      	ldr	r2, [r2, #12]
 80081d2:	3a01      	subs	r2, #1
 80081d4:	0311      	lsls	r1, r2, #12
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	6952      	ldr	r2, [r2, #20]
 80081da:	3a01      	subs	r2, #1
 80081dc:	0512      	lsls	r2, r2, #20
 80081de:	430a      	orrs	r2, r1
 80081e0:	431a      	orrs	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	1e59      	subs	r1, r3, #1
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	3b01      	subs	r3, #1
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	4319      	orrs	r1, r3
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	3b01      	subs	r3, #1
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	4319      	orrs	r1, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	3b01      	subs	r3, #1
 800820e:	041b      	lsls	r3, r3, #16
 8008210:	4319      	orrs	r1, r3
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	3b01      	subs	r3, #1
 8008218:	061b      	lsls	r3, r3, #24
 800821a:	430b      	orrs	r3, r1
 800821c:	431a      	orrs	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	0d9b      	lsrs	r3, r3, #22
 8008246:	059b      	lsls	r3, r3, #22
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	6811      	ldr	r1, [r2, #0]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	6852      	ldr	r2, [r2, #4]
 8008250:	4311      	orrs	r1, r2
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	6892      	ldr	r2, [r2, #8]
 8008256:	3a01      	subs	r2, #1
 8008258:	0152      	lsls	r2, r2, #5
 800825a:	4311      	orrs	r1, r2
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	68d2      	ldr	r2, [r2, #12]
 8008260:	0252      	lsls	r2, r2, #9
 8008262:	430a      	orrs	r2, r1
 8008264:	431a      	orrs	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800826a:	f7fa ffdf 	bl	800322c <HAL_GetTick>
 800826e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008270:	e010      	b.n	8008294 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008278:	d00c      	beq.n	8008294 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d007      	beq.n	8008290 <FMC_SDRAM_SendCommand+0x60>
 8008280:	f7fa ffd4 	bl	800322c <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d201      	bcs.n	8008294 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e006      	b.n	80082a2 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	f003 0320 	and.w	r3, r3, #32
 800829c:	2b20      	cmp	r3, #32
 800829e:	d0e8      	beq.n	8008272 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80082bc:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	0052      	lsls	r2, r2, #1
 80082c4:	431a      	orrs	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082d8:	b084      	sub	sp, #16
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	f107 001c 	add.w	r0, r7, #28
 80082e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d122      	bne.n	8008336 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800831a:	2b01      	cmp	r3, #1
 800831c:	d105      	bne.n	800832a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f001 fbee 	bl	8009b0c <USB_CoreReset>
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]
 8008334:	e01a      	b.n	800836c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 fbe2 	bl	8009b0c <USB_CoreReset>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800834c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008356:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	639a      	str	r2, [r3, #56]	; 0x38
 800835e:	e005      	b.n	800836c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008364:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	2b01      	cmp	r3, #1
 8008370:	d10b      	bne.n	800838a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f043 0206 	orr.w	r2, r3, #6
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f043 0220 	orr.w	r2, r3, #32
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800838a:	7bfb      	ldrb	r3, [r7, #15]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008396:	b004      	add	sp, #16
 8008398:	4770      	bx	lr
	...

0800839c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800839c:	b480      	push	{r7}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	4613      	mov	r3, r2
 80083a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d165      	bne.n	800847c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4a41      	ldr	r2, [pc, #260]	; (80084b8 <USB_SetTurnaroundTime+0x11c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d906      	bls.n	80083c6 <USB_SetTurnaroundTime+0x2a>
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	4a40      	ldr	r2, [pc, #256]	; (80084bc <USB_SetTurnaroundTime+0x120>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d202      	bcs.n	80083c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80083c0:	230f      	movs	r3, #15
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	e062      	b.n	800848c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4a3c      	ldr	r2, [pc, #240]	; (80084bc <USB_SetTurnaroundTime+0x120>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d306      	bcc.n	80083dc <USB_SetTurnaroundTime+0x40>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	4a3b      	ldr	r2, [pc, #236]	; (80084c0 <USB_SetTurnaroundTime+0x124>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d202      	bcs.n	80083dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80083d6:	230e      	movs	r3, #14
 80083d8:	617b      	str	r3, [r7, #20]
 80083da:	e057      	b.n	800848c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4a38      	ldr	r2, [pc, #224]	; (80084c0 <USB_SetTurnaroundTime+0x124>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d306      	bcc.n	80083f2 <USB_SetTurnaroundTime+0x56>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4a37      	ldr	r2, [pc, #220]	; (80084c4 <USB_SetTurnaroundTime+0x128>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d202      	bcs.n	80083f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80083ec:	230d      	movs	r3, #13
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	e04c      	b.n	800848c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	4a33      	ldr	r2, [pc, #204]	; (80084c4 <USB_SetTurnaroundTime+0x128>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d306      	bcc.n	8008408 <USB_SetTurnaroundTime+0x6c>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	4a32      	ldr	r2, [pc, #200]	; (80084c8 <USB_SetTurnaroundTime+0x12c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d802      	bhi.n	8008408 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008402:	230c      	movs	r3, #12
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	e041      	b.n	800848c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4a2f      	ldr	r2, [pc, #188]	; (80084c8 <USB_SetTurnaroundTime+0x12c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d906      	bls.n	800841e <USB_SetTurnaroundTime+0x82>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4a2e      	ldr	r2, [pc, #184]	; (80084cc <USB_SetTurnaroundTime+0x130>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d802      	bhi.n	800841e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008418:	230b      	movs	r3, #11
 800841a:	617b      	str	r3, [r7, #20]
 800841c:	e036      	b.n	800848c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	4a2a      	ldr	r2, [pc, #168]	; (80084cc <USB_SetTurnaroundTime+0x130>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d906      	bls.n	8008434 <USB_SetTurnaroundTime+0x98>
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	4a29      	ldr	r2, [pc, #164]	; (80084d0 <USB_SetTurnaroundTime+0x134>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d802      	bhi.n	8008434 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800842e:	230a      	movs	r3, #10
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	e02b      	b.n	800848c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4a26      	ldr	r2, [pc, #152]	; (80084d0 <USB_SetTurnaroundTime+0x134>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d906      	bls.n	800844a <USB_SetTurnaroundTime+0xae>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4a25      	ldr	r2, [pc, #148]	; (80084d4 <USB_SetTurnaroundTime+0x138>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d202      	bcs.n	800844a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008444:	2309      	movs	r3, #9
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	e020      	b.n	800848c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	4a21      	ldr	r2, [pc, #132]	; (80084d4 <USB_SetTurnaroundTime+0x138>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d306      	bcc.n	8008460 <USB_SetTurnaroundTime+0xc4>
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	4a20      	ldr	r2, [pc, #128]	; (80084d8 <USB_SetTurnaroundTime+0x13c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d802      	bhi.n	8008460 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800845a:	2308      	movs	r3, #8
 800845c:	617b      	str	r3, [r7, #20]
 800845e:	e015      	b.n	800848c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	4a1d      	ldr	r2, [pc, #116]	; (80084d8 <USB_SetTurnaroundTime+0x13c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d906      	bls.n	8008476 <USB_SetTurnaroundTime+0xda>
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4a1c      	ldr	r2, [pc, #112]	; (80084dc <USB_SetTurnaroundTime+0x140>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d202      	bcs.n	8008476 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008470:	2307      	movs	r3, #7
 8008472:	617b      	str	r3, [r7, #20]
 8008474:	e00a      	b.n	800848c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008476:	2306      	movs	r3, #6
 8008478:	617b      	str	r3, [r7, #20]
 800847a:	e007      	b.n	800848c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008482:	2309      	movs	r3, #9
 8008484:	617b      	str	r3, [r7, #20]
 8008486:	e001      	b.n	800848c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008488:	2309      	movs	r3, #9
 800848a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	029b      	lsls	r3, r3, #10
 80084a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80084a4:	431a      	orrs	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	371c      	adds	r7, #28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	00d8acbf 	.word	0x00d8acbf
 80084bc:	00e4e1c0 	.word	0x00e4e1c0
 80084c0:	00f42400 	.word	0x00f42400
 80084c4:	01067380 	.word	0x01067380
 80084c8:	011a499f 	.word	0x011a499f
 80084cc:	01312cff 	.word	0x01312cff
 80084d0:	014ca43f 	.word	0x014ca43f
 80084d4:	016e3600 	.word	0x016e3600
 80084d8:	01a6ab1f 	.word	0x01a6ab1f
 80084dc:	01e84800 	.word	0x01e84800

080084e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f043 0201 	orr.w	r2, r3, #1
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f023 0201 	bic.w	r2, r3, #1
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d115      	bne.n	8008572 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008552:	2001      	movs	r0, #1
 8008554:	f7fa fe76 	bl	8003244 <HAL_Delay>
      ms++;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3301      	adds	r3, #1
 800855c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 fa45 	bl	80099ee <USB_GetMode>
 8008564:	4603      	mov	r3, r0
 8008566:	2b01      	cmp	r3, #1
 8008568:	d01e      	beq.n	80085a8 <USB_SetCurrentMode+0x84>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b31      	cmp	r3, #49	; 0x31
 800856e:	d9f0      	bls.n	8008552 <USB_SetCurrentMode+0x2e>
 8008570:	e01a      	b.n	80085a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d115      	bne.n	80085a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008584:	2001      	movs	r0, #1
 8008586:	f7fa fe5d 	bl	8003244 <HAL_Delay>
      ms++;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3301      	adds	r3, #1
 800858e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 fa2c 	bl	80099ee <USB_GetMode>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d005      	beq.n	80085a8 <USB_SetCurrentMode+0x84>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b31      	cmp	r3, #49	; 0x31
 80085a0:	d9f0      	bls.n	8008584 <USB_SetCurrentMode+0x60>
 80085a2:	e001      	b.n	80085a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e005      	b.n	80085b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b32      	cmp	r3, #50	; 0x32
 80085ac:	d101      	bne.n	80085b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e000      	b.n	80085b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085bc:	b084      	sub	sp, #16
 80085be:	b580      	push	{r7, lr}
 80085c0:	b086      	sub	sp, #24
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80085ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80085d6:	2300      	movs	r3, #0
 80085d8:	613b      	str	r3, [r7, #16]
 80085da:	e009      	b.n	80085f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	3340      	adds	r3, #64	; 0x40
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	2200      	movs	r2, #0
 80085e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	3301      	adds	r3, #1
 80085ee:	613b      	str	r3, [r7, #16]
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	2b0e      	cmp	r3, #14
 80085f4:	d9f2      	bls.n	80085dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d11c      	bne.n	8008636 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800860a:	f043 0302 	orr.w	r3, r3, #2
 800860e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008614:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	639a      	str	r2, [r3, #56]	; 0x38
 8008634:	e00b      	b.n	800864e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008646:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008654:	461a      	mov	r2, r3
 8008656:	2300      	movs	r3, #0
 8008658:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008660:	4619      	mov	r1, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008668:	461a      	mov	r2, r3
 800866a:	680b      	ldr	r3, [r1, #0]
 800866c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800866e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008670:	2b01      	cmp	r3, #1
 8008672:	d10c      	bne.n	800868e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800867a:	2100      	movs	r1, #0
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f965 	bl	800894c <USB_SetDevSpeed>
 8008682:	e008      	b.n	8008696 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008684:	2101      	movs	r1, #1
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f960 	bl	800894c <USB_SetDevSpeed>
 800868c:	e003      	b.n	8008696 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800868e:	2103      	movs	r1, #3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f95b 	bl	800894c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008696:	2110      	movs	r1, #16
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f8f3 	bl	8008884 <USB_FlushTxFifo>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f91f 	bl	80088ec <USB_FlushRxFifo>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086be:	461a      	mov	r2, r3
 80086c0:	2300      	movs	r3, #0
 80086c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ca:	461a      	mov	r2, r3
 80086cc:	2300      	movs	r3, #0
 80086ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d6:	461a      	mov	r2, r3
 80086d8:	2300      	movs	r3, #0
 80086da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086dc:	2300      	movs	r3, #0
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	e043      	b.n	800876a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086f8:	d118      	bne.n	800872c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870c:	461a      	mov	r2, r3
 800870e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	e013      	b.n	800873e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008722:	461a      	mov	r2, r3
 8008724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	e008      	b.n	800873e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008738:	461a      	mov	r2, r3
 800873a:	2300      	movs	r3, #0
 800873c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	4413      	add	r3, r2
 8008746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874a:	461a      	mov	r2, r3
 800874c:	2300      	movs	r3, #0
 800874e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875c:	461a      	mov	r2, r3
 800875e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008762:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	3301      	adds	r3, #1
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	429a      	cmp	r2, r3
 8008770:	d3b7      	bcc.n	80086e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008772:	2300      	movs	r3, #0
 8008774:	613b      	str	r3, [r7, #16]
 8008776:	e043      	b.n	8008800 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800878a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800878e:	d118      	bne.n	80087c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10a      	bne.n	80087ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4413      	add	r3, r2
 800879e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a2:	461a      	mov	r2, r3
 80087a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	e013      	b.n	80087d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b8:	461a      	mov	r2, r3
 80087ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	e008      	b.n	80087d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ce:	461a      	mov	r2, r3
 80087d0:	2300      	movs	r3, #0
 80087d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e0:	461a      	mov	r2, r3
 80087e2:	2300      	movs	r3, #0
 80087e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	461a      	mov	r2, r3
 80087f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	3301      	adds	r3, #1
 80087fe:	613b      	str	r3, [r7, #16]
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	429a      	cmp	r2, r3
 8008806:	d3b7      	bcc.n	8008778 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800881a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008828:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	2b00      	cmp	r3, #0
 800882e:	d105      	bne.n	800883c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	f043 0210 	orr.w	r2, r3, #16
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699a      	ldr	r2, [r3, #24]
 8008840:	4b0f      	ldr	r3, [pc, #60]	; (8008880 <USB_DevInit+0x2c4>)
 8008842:	4313      	orrs	r3, r2
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d005      	beq.n	800885a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	f043 0208 	orr.w	r2, r3, #8
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800885a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885c:	2b01      	cmp	r3, #1
 800885e:	d107      	bne.n	8008870 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008868:	f043 0304 	orr.w	r3, r3, #4
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800887c:	b004      	add	sp, #16
 800887e:	4770      	bx	lr
 8008880:	803c3800 	.word	0x803c3800

08008884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4a13      	ldr	r2, [pc, #76]	; (80088e8 <USB_FlushTxFifo+0x64>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d901      	bls.n	80088a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e01b      	b.n	80088dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	daf2      	bge.n	8008892 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	019b      	lsls	r3, r3, #6
 80088b4:	f043 0220 	orr.w	r2, r3, #32
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4a08      	ldr	r2, [pc, #32]	; (80088e8 <USB_FlushTxFifo+0x64>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d901      	bls.n	80088ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e006      	b.n	80088dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d0f0      	beq.n	80088bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	00030d40 	.word	0x00030d40

080088ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3301      	adds	r3, #1
 80088fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4a11      	ldr	r2, [pc, #68]	; (8008948 <USB_FlushRxFifo+0x5c>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d901      	bls.n	800890a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e018      	b.n	800893c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	daf2      	bge.n	80088f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2210      	movs	r2, #16
 800891a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3301      	adds	r3, #1
 8008920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	4a08      	ldr	r2, [pc, #32]	; (8008948 <USB_FlushRxFifo+0x5c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d901      	bls.n	800892e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e006      	b.n	800893c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0310 	and.w	r3, r3, #16
 8008936:	2b10      	cmp	r3, #16
 8008938:	d0f0      	beq.n	800891c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	00030d40 	.word	0x00030d40

0800894c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	78fb      	ldrb	r3, [r7, #3]
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800896c:	4313      	orrs	r3, r2
 800896e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800897e:	b480      	push	{r7}
 8008980:	b087      	sub	sp, #28
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 0306 	and.w	r3, r3, #6
 8008996:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]
 80089a2:	e00a      	b.n	80089ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d002      	beq.n	80089b0 <USB_GetDevSpeed+0x32>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b06      	cmp	r3, #6
 80089ae:	d102      	bne.n	80089b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80089b0:	2302      	movs	r3, #2
 80089b2:	75fb      	strb	r3, [r7, #23]
 80089b4:	e001      	b.n	80089ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80089b6:	230f      	movs	r3, #15
 80089b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	371c      	adds	r7, #28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	785b      	ldrb	r3, [r3, #1]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d13a      	bne.n	8008a5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ea:	69da      	ldr	r2, [r3, #28]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	f003 030f 	and.w	r3, r3, #15
 80089f4:	2101      	movs	r1, #1
 80089f6:	fa01 f303 	lsl.w	r3, r1, r3
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	68f9      	ldr	r1, [r7, #12]
 80089fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a02:	4313      	orrs	r3, r2
 8008a04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d155      	bne.n	8008ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	791b      	ldrb	r3, [r3, #4]
 8008a36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	059b      	lsls	r3, r3, #22
 8008a3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a40:	4313      	orrs	r3, r2
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	0151      	lsls	r1, r2, #5
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	440a      	add	r2, r1
 8008a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	e036      	b.n	8008ac8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a60:	69da      	ldr	r2, [r3, #28]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	f003 030f 	and.w	r3, r3, #15
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a70:	041b      	lsls	r3, r3, #16
 8008a72:	68f9      	ldr	r1, [r7, #12]
 8008a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d11a      	bne.n	8008ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	791b      	ldrb	r3, [r3, #4]
 8008aac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008aae:	430b      	orrs	r3, r1
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	0151      	lsls	r1, r2, #5
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	440a      	add	r2, r1
 8008aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
	...

08008ad8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d161      	bne.n	8008bb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b0a:	d11f      	bne.n	8008b4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	0151      	lsls	r1, r2, #5
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	440a      	add	r2, r1
 8008b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	0151      	lsls	r1, r2, #5
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	440a      	add	r2, r1
 8008b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	f003 030f 	and.w	r3, r3, #15
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	43db      	mvns	r3, r3
 8008b66:	68f9      	ldr	r1, [r7, #12]
 8008b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	f003 030f 	and.w	r3, r3, #15
 8008b80:	2101      	movs	r1, #1
 8008b82:	fa01 f303 	lsl.w	r3, r1, r3
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	43db      	mvns	r3, r3
 8008b8a:	68f9      	ldr	r1, [r7, #12]
 8008b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b90:	4013      	ands	r3, r2
 8008b92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	0159      	lsls	r1, r3, #5
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	440b      	add	r3, r1
 8008baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4b35      	ldr	r3, [pc, #212]	; (8008c88 <USB_DeactivateEndpoint+0x1b0>)
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	600b      	str	r3, [r1, #0]
 8008bb6:	e060      	b.n	8008c7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bce:	d11f      	bne.n	8008c10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	0151      	lsls	r1, r2, #5
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	440a      	add	r2, r1
 8008c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	f003 030f 	and.w	r3, r3, #15
 8008c20:	2101      	movs	r1, #1
 8008c22:	fa01 f303 	lsl.w	r3, r1, r3
 8008c26:	041b      	lsls	r3, r3, #16
 8008c28:	43db      	mvns	r3, r3
 8008c2a:	68f9      	ldr	r1, [r7, #12]
 8008c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c30:	4013      	ands	r3, r2
 8008c32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3a:	69da      	ldr	r2, [r3, #28]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	f003 030f 	and.w	r3, r3, #15
 8008c44:	2101      	movs	r1, #1
 8008c46:	fa01 f303 	lsl.w	r3, r1, r3
 8008c4a:	041b      	lsls	r3, r3, #16
 8008c4c:	43db      	mvns	r3, r3
 8008c4e:	68f9      	ldr	r1, [r7, #12]
 8008c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c54:	4013      	ands	r3, r2
 8008c56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	0159      	lsls	r1, r3, #5
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	440b      	add	r3, r1
 8008c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c72:	4619      	mov	r1, r3
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <USB_DeactivateEndpoint+0x1b4>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	ec337800 	.word	0xec337800
 8008c8c:	eff37800 	.word	0xeff37800

08008c90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08a      	sub	sp, #40	; 0x28
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	f040 815c 	bne.w	8008f6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d132      	bne.n	8008d20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	0151      	lsls	r1, r2, #5
 8008ccc:	69fa      	ldr	r2, [r7, #28]
 8008cce:	440a      	add	r2, r1
 8008cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	0151      	lsls	r1, r2, #5
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	440a      	add	r2, r1
 8008d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d18:	0cdb      	lsrs	r3, r3, #19
 8008d1a:	04db      	lsls	r3, r3, #19
 8008d1c:	6113      	str	r3, [r2, #16]
 8008d1e:	e074      	b.n	8008e0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	0151      	lsls	r1, r2, #5
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	440a      	add	r2, r1
 8008d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d3a:	0cdb      	lsrs	r3, r3, #19
 8008d3c:	04db      	lsls	r3, r3, #19
 8008d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	0151      	lsls	r1, r2, #5
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	440a      	add	r2, r1
 8008d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	6999      	ldr	r1, [r3, #24]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	440b      	add	r3, r1
 8008d7c:	1e59      	subs	r1, r3, #1
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d88:	4b9d      	ldr	r3, [pc, #628]	; (8009000 <USB_EPStartXfer+0x370>)
 8008d8a:	400b      	ands	r3, r1
 8008d8c:	69b9      	ldr	r1, [r7, #24]
 8008d8e:	0148      	lsls	r0, r1, #5
 8008d90:	69f9      	ldr	r1, [r7, #28]
 8008d92:	4401      	add	r1, r0
 8008d94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da8:	691a      	ldr	r2, [r3, #16]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008db2:	69b9      	ldr	r1, [r7, #24]
 8008db4:	0148      	lsls	r0, r1, #5
 8008db6:	69f9      	ldr	r1, [r7, #28]
 8008db8:	4401      	add	r1, r0
 8008dba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	791b      	ldrb	r3, [r3, #4]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d11f      	bne.n	8008e0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	0151      	lsls	r1, r2, #5
 8008ddc:	69fa      	ldr	r2, [r7, #28]
 8008dde:	440a      	add	r2, r1
 8008de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008de4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008de8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	0151      	lsls	r1, r2, #5
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	440a      	add	r2, r1
 8008e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008e0a:	79fb      	ldrb	r3, [r7, #7]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d14b      	bne.n	8008ea8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d009      	beq.n	8008e2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e24:	461a      	mov	r2, r3
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	791b      	ldrb	r3, [r3, #4]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d128      	bne.n	8008e86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d110      	bne.n	8008e66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	e00f      	b.n	8008e86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	0151      	lsls	r1, r2, #5
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	440a      	add	r2, r1
 8008e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	0151      	lsls	r1, r2, #5
 8008e98:	69fa      	ldr	r2, [r7, #28]
 8008e9a:	440a      	add	r2, r1
 8008e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ea0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	e133      	b.n	8009110 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	0151      	lsls	r1, r2, #5
 8008eba:	69fa      	ldr	r2, [r7, #28]
 8008ebc:	440a      	add	r2, r1
 8008ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ec6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	791b      	ldrb	r3, [r3, #4]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d015      	beq.n	8008efc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 811b 	beq.w	8009110 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	f003 030f 	and.w	r3, r3, #15
 8008eea:	2101      	movs	r1, #1
 8008eec:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef0:	69f9      	ldr	r1, [r7, #28]
 8008ef2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	634b      	str	r3, [r1, #52]	; 0x34
 8008efa:	e109      	b.n	8009110 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d110      	bne.n	8008f2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	0151      	lsls	r1, r2, #5
 8008f1e:	69fa      	ldr	r2, [r7, #28]
 8008f20:	440a      	add	r2, r1
 8008f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	e00f      	b.n	8008f4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6919      	ldr	r1, [r3, #16]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	b298      	uxth	r0, r3
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	4603      	mov	r3, r0
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 fade 	bl	8009524 <USB_WritePacket>
 8008f68:	e0d2      	b.n	8009110 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f84:	0cdb      	lsrs	r3, r3, #19
 8008f86:	04db      	lsls	r3, r3, #19
 8008f88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	0151      	lsls	r1, r2, #5
 8008f9c:	69fa      	ldr	r2, [r7, #28]
 8008f9e:	440a      	add	r2, r1
 8008fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d126      	bne.n	8009004 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	015a      	lsls	r2, r3, #5
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc2:	691a      	ldr	r2, [r3, #16]
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fcc:	69b9      	ldr	r1, [r7, #24]
 8008fce:	0148      	lsls	r0, r1, #5
 8008fd0:	69f9      	ldr	r1, [r7, #28]
 8008fd2:	4401      	add	r1, r0
 8008fd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	0151      	lsls	r1, r2, #5
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	440a      	add	r2, r1
 8008ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ffa:	6113      	str	r3, [r2, #16]
 8008ffc:	e03a      	b.n	8009074 <USB_EPStartXfer+0x3e4>
 8008ffe:	bf00      	nop
 8009000:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	699a      	ldr	r2, [r3, #24]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	4413      	add	r3, r2
 800900e:	1e5a      	subs	r2, r3, #1
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	fbb2 f3f3 	udiv	r3, r2, r3
 8009018:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	8afa      	ldrh	r2, [r7, #22]
 8009020:	fb03 f202 	mul.w	r2, r3, r2
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	015a      	lsls	r2, r3, #5
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	4413      	add	r3, r2
 8009030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009034:	691a      	ldr	r2, [r3, #16]
 8009036:	8afb      	ldrh	r3, [r7, #22]
 8009038:	04d9      	lsls	r1, r3, #19
 800903a:	4b38      	ldr	r3, [pc, #224]	; (800911c <USB_EPStartXfer+0x48c>)
 800903c:	400b      	ands	r3, r1
 800903e:	69b9      	ldr	r1, [r7, #24]
 8009040:	0148      	lsls	r0, r1, #5
 8009042:	69f9      	ldr	r1, [r7, #28]
 8009044:	4401      	add	r1, r0
 8009046:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800904a:	4313      	orrs	r3, r2
 800904c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009064:	69b9      	ldr	r1, [r7, #24]
 8009066:	0148      	lsls	r0, r1, #5
 8009068:	69f9      	ldr	r1, [r7, #28]
 800906a:	4401      	add	r1, r0
 800906c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009070:	4313      	orrs	r3, r2
 8009072:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d10d      	bne.n	8009096 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d009      	beq.n	8009096 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	6919      	ldr	r1, [r3, #16]
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	460a      	mov	r2, r1
 8009094:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	791b      	ldrb	r3, [r3, #4]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d128      	bne.n	80090f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d110      	bne.n	80090d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	015a      	lsls	r2, r3, #5
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	4413      	add	r3, r2
 80090b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	0151      	lsls	r1, r2, #5
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	440a      	add	r2, r1
 80090c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	e00f      	b.n	80090f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	0151      	lsls	r1, r2, #5
 80090e2:	69fa      	ldr	r2, [r7, #28]
 80090e4:	440a      	add	r2, r1
 80090e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	0151      	lsls	r1, r2, #5
 8009102:	69fa      	ldr	r2, [r7, #28]
 8009104:	440a      	add	r2, r1
 8009106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800910a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800910e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3720      	adds	r7, #32
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	1ff80000 	.word	0x1ff80000

08009120 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009120:	b480      	push	{r7}
 8009122:	b087      	sub	sp, #28
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	4613      	mov	r3, r2
 800912c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	785b      	ldrb	r3, [r3, #1]
 800913c:	2b01      	cmp	r3, #1
 800913e:	f040 80ce 	bne.w	80092de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d132      	bne.n	80091b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	0151      	lsls	r1, r2, #5
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	440a      	add	r2, r1
 8009160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009164:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009168:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800916c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	4413      	add	r3, r2
 8009176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	0151      	lsls	r1, r2, #5
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	440a      	add	r2, r1
 8009184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800918c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	015a      	lsls	r2, r3, #5
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	4413      	add	r3, r2
 8009196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	0151      	lsls	r1, r2, #5
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	440a      	add	r2, r1
 80091a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091a8:	0cdb      	lsrs	r3, r3, #19
 80091aa:	04db      	lsls	r3, r3, #19
 80091ac:	6113      	str	r3, [r2, #16]
 80091ae:	e04e      	b.n	800924e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	0151      	lsls	r1, r2, #5
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	440a      	add	r2, r1
 80091c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ca:	0cdb      	lsrs	r3, r3, #19
 80091cc:	04db      	lsls	r3, r3, #19
 80091ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	0151      	lsls	r1, r2, #5
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	440a      	add	r2, r1
 80091e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	699a      	ldr	r2, [r3, #24]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d903      	bls.n	8009208 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	68da      	ldr	r2, [r3, #12]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	0151      	lsls	r1, r2, #5
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	440a      	add	r2, r1
 800921e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009222:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009226:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009234:	691a      	ldr	r2, [r3, #16]
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800923e:	6939      	ldr	r1, [r7, #16]
 8009240:	0148      	lsls	r0, r1, #5
 8009242:	6979      	ldr	r1, [r7, #20]
 8009244:	4401      	add	r1, r0
 8009246:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800924a:	4313      	orrs	r3, r2
 800924c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800924e:	79fb      	ldrb	r3, [r7, #7]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d11e      	bne.n	8009292 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d009      	beq.n	8009270 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009268:	461a      	mov	r2, r3
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	0151      	lsls	r1, r2, #5
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	440a      	add	r2, r1
 8009286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800928a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	e097      	b.n	80093c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	0151      	lsls	r1, r2, #5
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	440a      	add	r2, r1
 80092a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 8083 	beq.w	80093c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	f003 030f 	and.w	r3, r3, #15
 80092cc:	2101      	movs	r1, #1
 80092ce:	fa01 f303 	lsl.w	r3, r1, r3
 80092d2:	6979      	ldr	r1, [r7, #20]
 80092d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092d8:	4313      	orrs	r3, r2
 80092da:	634b      	str	r3, [r1, #52]	; 0x34
 80092dc:	e071      	b.n	80093c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	0151      	lsls	r1, r2, #5
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	440a      	add	r2, r1
 80092f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092f8:	0cdb      	lsrs	r3, r3, #19
 80092fa:	04db      	lsls	r3, r3, #19
 80092fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	0151      	lsls	r1, r2, #5
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	440a      	add	r2, r1
 8009314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009318:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800931c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009320:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	68da      	ldr	r2, [r3, #12]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	0151      	lsls	r1, r2, #5
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	440a      	add	r2, r1
 8009350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009358:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	015a      	lsls	r2, r3, #5
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	4413      	add	r3, r2
 8009362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009366:	691a      	ldr	r2, [r3, #16]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009370:	6939      	ldr	r1, [r7, #16]
 8009372:	0148      	lsls	r0, r1, #5
 8009374:	6979      	ldr	r1, [r7, #20]
 8009376:	4401      	add	r1, r0
 8009378:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800937c:	4313      	orrs	r3, r2
 800937e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d10d      	bne.n	80093a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d009      	beq.n	80093a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6919      	ldr	r1, [r3, #16]
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	4413      	add	r3, r2
 800939a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939e:	460a      	mov	r2, r1
 80093a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	0151      	lsls	r1, r2, #5
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	440a      	add	r2, r1
 80093b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	371c      	adds	r7, #28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	785b      	ldrb	r3, [r3, #1]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d14a      	bne.n	8009484 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009406:	f040 8086 	bne.w	8009516 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	7812      	ldrb	r2, [r2, #0]
 800941e:	0151      	lsls	r1, r2, #5
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	440a      	add	r2, r1
 8009424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009428:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800942c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	4413      	add	r3, r2
 8009438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	7812      	ldrb	r2, [r2, #0]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	440a      	add	r2, r1
 8009448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800944c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009450:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3301      	adds	r3, #1
 8009456:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f242 7210 	movw	r2, #10000	; 0x2710
 800945e:	4293      	cmp	r3, r2
 8009460:	d902      	bls.n	8009468 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	75fb      	strb	r3, [r7, #23]
          break;
 8009466:	e056      	b.n	8009516 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800947c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009480:	d0e7      	beq.n	8009452 <USB_EPStopXfer+0x82>
 8009482:	e048      	b.n	8009516 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	4413      	add	r3, r2
 800948e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800949c:	d13b      	bne.n	8009516 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	7812      	ldrb	r2, [r2, #0]
 80094b2:	0151      	lsls	r1, r2, #5
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	440a      	add	r2, r1
 80094b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	7812      	ldrb	r2, [r2, #0]
 80094d6:	0151      	lsls	r1, r2, #5
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	440a      	add	r2, r1
 80094dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3301      	adds	r3, #1
 80094ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d902      	bls.n	80094fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	75fb      	strb	r3, [r7, #23]
          break;
 80094fa:	e00c      	b.n	8009516 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	4413      	add	r3, r2
 8009506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009514:	d0e7      	beq.n	80094e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009516:	7dfb      	ldrb	r3, [r7, #23]
}
 8009518:	4618      	mov	r0, r3
 800951a:	371c      	adds	r7, #28
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009524:	b480      	push	{r7}
 8009526:	b089      	sub	sp, #36	; 0x24
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	4611      	mov	r1, r2
 8009530:	461a      	mov	r2, r3
 8009532:	460b      	mov	r3, r1
 8009534:	71fb      	strb	r3, [r7, #7]
 8009536:	4613      	mov	r3, r2
 8009538:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009542:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009546:	2b00      	cmp	r3, #0
 8009548:	d123      	bne.n	8009592 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800954a:	88bb      	ldrh	r3, [r7, #4]
 800954c:	3303      	adds	r3, #3
 800954e:	089b      	lsrs	r3, r3, #2
 8009550:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009552:	2300      	movs	r3, #0
 8009554:	61bb      	str	r3, [r7, #24]
 8009556:	e018      	b.n	800958a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	031a      	lsls	r2, r3, #12
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	4413      	add	r3, r2
 8009560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009564:	461a      	mov	r2, r3
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	3301      	adds	r3, #1
 8009570:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	3301      	adds	r3, #1
 8009576:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	3301      	adds	r3, #1
 800957c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	3301      	adds	r3, #1
 8009582:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	3301      	adds	r3, #1
 8009588:	61bb      	str	r3, [r7, #24]
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	429a      	cmp	r2, r3
 8009590:	d3e2      	bcc.n	8009558 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3724      	adds	r7, #36	; 0x24
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b08b      	sub	sp, #44	; 0x2c
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	4613      	mov	r3, r2
 80095ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095b6:	88fb      	ldrh	r3, [r7, #6]
 80095b8:	089b      	lsrs	r3, r3, #2
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095be:	88fb      	ldrh	r3, [r7, #6]
 80095c0:	f003 0303 	and.w	r3, r3, #3
 80095c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095c6:	2300      	movs	r3, #0
 80095c8:	623b      	str	r3, [r7, #32]
 80095ca:	e014      	b.n	80095f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	3301      	adds	r3, #1
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	3301      	adds	r3, #1
 80095e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	3301      	adds	r3, #1
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	3301      	adds	r3, #1
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	3301      	adds	r3, #1
 80095f4:	623b      	str	r3, [r7, #32]
 80095f6:	6a3a      	ldr	r2, [r7, #32]
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d3e6      	bcc.n	80095cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80095fe:	8bfb      	ldrh	r3, [r7, #30]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d01e      	beq.n	8009642 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800960e:	461a      	mov	r2, r3
 8009610:	f107 0310 	add.w	r3, r7, #16
 8009614:	6812      	ldr	r2, [r2, #0]
 8009616:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	00db      	lsls	r3, r3, #3
 8009620:	fa22 f303 	lsr.w	r3, r2, r3
 8009624:	b2da      	uxtb	r2, r3
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	701a      	strb	r2, [r3, #0]
      i++;
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	3301      	adds	r3, #1
 800962e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	3301      	adds	r3, #1
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009636:	8bfb      	ldrh	r3, [r7, #30]
 8009638:	3b01      	subs	r3, #1
 800963a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800963c:	8bfb      	ldrh	r3, [r7, #30]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1ea      	bne.n	8009618 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009644:	4618      	mov	r0, r3
 8009646:	372c      	adds	r7, #44	; 0x2c
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	785b      	ldrb	r3, [r3, #1]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d12c      	bne.n	80096c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	db12      	blt.n	80096a4 <USB_EPSetStall+0x54>
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00f      	beq.n	80096a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	0151      	lsls	r1, r2, #5
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	440a      	add	r2, r1
 800969a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800969e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	0151      	lsls	r1, r2, #5
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	440a      	add	r2, r1
 80096ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	e02b      	b.n	800971e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	db12      	blt.n	80096fe <USB_EPSetStall+0xae>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00f      	beq.n	80096fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	0151      	lsls	r1, r2, #5
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	440a      	add	r2, r1
 80096f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	0151      	lsls	r1, r2, #5
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	440a      	add	r2, r1
 8009714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800971c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	785b      	ldrb	r3, [r3, #1]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d128      	bne.n	800979a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	0151      	lsls	r1, r2, #5
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	440a      	add	r2, r1
 800975e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009766:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	791b      	ldrb	r3, [r3, #4]
 800976c:	2b03      	cmp	r3, #3
 800976e:	d003      	beq.n	8009778 <USB_EPClearStall+0x4c>
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	791b      	ldrb	r3, [r3, #4]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d138      	bne.n	80097ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	440a      	add	r2, r1
 800978e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	e027      	b.n	80097ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	0151      	lsls	r1, r2, #5
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	440a      	add	r2, r1
 80097b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	791b      	ldrb	r3, [r3, #4]
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d003      	beq.n	80097ca <USB_EPClearStall+0x9e>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	791b      	ldrb	r3, [r3, #4]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d10f      	bne.n	80097ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	0151      	lsls	r1, r2, #5
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	440a      	add	r2, r1
 80097e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009816:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800981a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	78fb      	ldrb	r3, [r7, #3]
 8009826:	011b      	lsls	r3, r3, #4
 8009828:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800982c:	68f9      	ldr	r1, [r7, #12]
 800982e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009832:	4313      	orrs	r3, r2
 8009834:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800985e:	f023 0303 	bic.w	r3, r3, #3
 8009862:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009872:	f023 0302 	bic.w	r3, r3, #2
 8009876:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009886:	b480      	push	{r7}
 8009888:	b085      	sub	sp, #20
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098a0:	f023 0303 	bic.w	r3, r3, #3
 80098a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098b4:	f043 0302 	orr.w	r3, r3, #2
 80098b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	4013      	ands	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80098e0:	68fb      	ldr	r3, [r7, #12]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b085      	sub	sp, #20
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	4013      	ands	r3, r2
 8009910:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	0c1b      	lsrs	r3, r3, #16
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009922:	b480      	push	{r7}
 8009924:	b085      	sub	sp, #20
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	4013      	ands	r3, r2
 8009944:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	b29b      	uxth	r3, r3
}
 800994a:	4618      	mov	r0, r3
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009956:	b480      	push	{r7}
 8009958:	b085      	sub	sp, #20
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	460b      	mov	r3, r1
 8009960:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009966:	78fb      	ldrb	r3, [r7, #3]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	4013      	ands	r3, r2
 8009982:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009984:	68bb      	ldr	r3, [r7, #8]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009992:	b480      	push	{r7}
 8009994:	b087      	sub	sp, #28
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	460b      	mov	r3, r1
 800999c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	f003 030f 	and.w	r3, r3, #15
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	fa22 f303 	lsr.w	r3, r2, r3
 80099c2:	01db      	lsls	r3, r3, #7
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	4013      	ands	r3, r2
 80099de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099e0:	68bb      	ldr	r3, [r7, #8]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	371c      	adds	r7, #28
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b083      	sub	sp, #12
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	f003 0301 	and.w	r3, r3, #1
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b085      	sub	sp, #20
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009a28:	f023 0307 	bic.w	r3, r3, #7
 8009a2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	333c      	adds	r3, #60	; 0x3c
 8009a66:	3304      	adds	r3, #4
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	4a26      	ldr	r2, [pc, #152]	; (8009b08 <USB_EP0_OutStart+0xb8>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d90a      	bls.n	8009a8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a84:	d101      	bne.n	8009a8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	e037      	b.n	8009afa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a90:	461a      	mov	r2, r3
 8009a92:	2300      	movs	r3, #0
 8009a94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009aa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ab8:	f043 0318 	orr.w	r3, r3, #24
 8009abc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009acc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009ad0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009ad2:	7afb      	ldrb	r3, [r7, #11]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d10f      	bne.n	8009af8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ade:	461a      	mov	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009af2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009af6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	371c      	adds	r7, #28
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	4f54300a 	.word	0x4f54300a

08009b0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	4a13      	ldr	r2, [pc, #76]	; (8009b70 <USB_CoreReset+0x64>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d901      	bls.n	8009b2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e01b      	b.n	8009b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	daf2      	bge.n	8009b18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	f043 0201 	orr.w	r2, r3, #1
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3301      	adds	r3, #1
 8009b46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4a09      	ldr	r2, [pc, #36]	; (8009b70 <USB_CoreReset+0x64>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d901      	bls.n	8009b54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e006      	b.n	8009b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d0f0      	beq.n	8009b42 <USB_CoreReset+0x36>

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	00030d40 	.word	0x00030d40

08009b74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009b84:	f005 fa28 	bl	800efd8 <USBD_static_malloc>
 8009b88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d109      	bne.n	8009ba4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	32b0      	adds	r2, #176	; 0xb0
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	e0d4      	b.n	8009d4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009ba4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009ba8:	2100      	movs	r1, #0
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f005 ffe3 	bl	800fb76 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	32b0      	adds	r2, #176	; 0xb0
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	32b0      	adds	r2, #176	; 0xb0
 8009bca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	7c1b      	ldrb	r3, [r3, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d138      	bne.n	8009c4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009bdc:	4b5e      	ldr	r3, [pc, #376]	; (8009d58 <USBD_CDC_Init+0x1e4>)
 8009bde:	7819      	ldrb	r1, [r3, #0]
 8009be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009be4:	2202      	movs	r2, #2
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f005 f8d3 	bl	800ed92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bec:	4b5a      	ldr	r3, [pc, #360]	; (8009d58 <USBD_CDC_Init+0x1e4>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	f003 020f 	and.w	r2, r3, #15
 8009bf4:	6879      	ldr	r1, [r7, #4]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	440b      	add	r3, r1
 8009c00:	3324      	adds	r3, #36	; 0x24
 8009c02:	2201      	movs	r2, #1
 8009c04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c06:	4b55      	ldr	r3, [pc, #340]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009c08:	7819      	ldrb	r1, [r3, #0]
 8009c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c0e:	2202      	movs	r2, #2
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f005 f8be 	bl	800ed92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c16:	4b51      	ldr	r3, [pc, #324]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	f003 020f 	and.w	r2, r3, #15
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c2e:	2201      	movs	r2, #1
 8009c30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c32:	4b4b      	ldr	r3, [pc, #300]	; (8009d60 <USBD_CDC_Init+0x1ec>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	f003 020f 	and.w	r2, r3, #15
 8009c3a:	6879      	ldr	r1, [r7, #4]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	440b      	add	r3, r1
 8009c46:	3326      	adds	r3, #38	; 0x26
 8009c48:	2210      	movs	r2, #16
 8009c4a:	801a      	strh	r2, [r3, #0]
 8009c4c:	e035      	b.n	8009cba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c4e:	4b42      	ldr	r3, [pc, #264]	; (8009d58 <USBD_CDC_Init+0x1e4>)
 8009c50:	7819      	ldrb	r1, [r3, #0]
 8009c52:	2340      	movs	r3, #64	; 0x40
 8009c54:	2202      	movs	r2, #2
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f005 f89b 	bl	800ed92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c5c:	4b3e      	ldr	r3, [pc, #248]	; (8009d58 <USBD_CDC_Init+0x1e4>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	f003 020f 	and.w	r2, r3, #15
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	440b      	add	r3, r1
 8009c70:	3324      	adds	r3, #36	; 0x24
 8009c72:	2201      	movs	r2, #1
 8009c74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c76:	4b39      	ldr	r3, [pc, #228]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009c78:	7819      	ldrb	r1, [r3, #0]
 8009c7a:	2340      	movs	r3, #64	; 0x40
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f005 f887 	bl	800ed92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c84:	4b35      	ldr	r3, [pc, #212]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	f003 020f 	and.w	r2, r3, #15
 8009c8c:	6879      	ldr	r1, [r7, #4]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	440b      	add	r3, r1
 8009c98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009ca0:	4b2f      	ldr	r3, [pc, #188]	; (8009d60 <USBD_CDC_Init+0x1ec>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	f003 020f 	and.w	r2, r3, #15
 8009ca8:	6879      	ldr	r1, [r7, #4]
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	440b      	add	r3, r1
 8009cb4:	3326      	adds	r3, #38	; 0x26
 8009cb6:	2210      	movs	r2, #16
 8009cb8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cba:	4b29      	ldr	r3, [pc, #164]	; (8009d60 <USBD_CDC_Init+0x1ec>)
 8009cbc:	7819      	ldrb	r1, [r3, #0]
 8009cbe:	2308      	movs	r3, #8
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f005 f865 	bl	800ed92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009cc8:	4b25      	ldr	r3, [pc, #148]	; (8009d60 <USBD_CDC_Init+0x1ec>)
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	f003 020f 	and.w	r2, r3, #15
 8009cd0:	6879      	ldr	r1, [r7, #4]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	440b      	add	r3, r1
 8009cdc:	3324      	adds	r3, #36	; 0x24
 8009cde:	2201      	movs	r2, #1
 8009ce0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	33b0      	adds	r3, #176	; 0xb0
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d101      	bne.n	8009d1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d18:	2302      	movs	r3, #2
 8009d1a:	e018      	b.n	8009d4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7c1b      	ldrb	r3, [r3, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d24:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009d26:	7819      	ldrb	r1, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f005 f91c 	bl	800ef70 <USBD_LL_PrepareReceive>
 8009d38:	e008      	b.n	8009d4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d3a:	4b08      	ldr	r3, [pc, #32]	; (8009d5c <USBD_CDC_Init+0x1e8>)
 8009d3c:	7819      	ldrb	r1, [r3, #0]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d44:	2340      	movs	r3, #64	; 0x40
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f005 f912 	bl	800ef70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	2000010f 	.word	0x2000010f
 8009d5c:	20000110 	.word	0x20000110
 8009d60:	20000111 	.word	0x20000111

08009d64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d70:	4b3a      	ldr	r3, [pc, #232]	; (8009e5c <USBD_CDC_DeInit+0xf8>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f005 f831 	bl	800edde <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d7c:	4b37      	ldr	r3, [pc, #220]	; (8009e5c <USBD_CDC_DeInit+0xf8>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	f003 020f 	and.w	r2, r3, #15
 8009d84:	6879      	ldr	r1, [r7, #4]
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	440b      	add	r3, r1
 8009d90:	3324      	adds	r3, #36	; 0x24
 8009d92:	2200      	movs	r2, #0
 8009d94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d96:	4b32      	ldr	r3, [pc, #200]	; (8009e60 <USBD_CDC_DeInit+0xfc>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f005 f81e 	bl	800edde <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009da2:	4b2f      	ldr	r3, [pc, #188]	; (8009e60 <USBD_CDC_DeInit+0xfc>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	f003 020f 	and.w	r2, r3, #15
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	440b      	add	r3, r1
 8009db6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009dba:	2200      	movs	r2, #0
 8009dbc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009dbe:	4b29      	ldr	r3, [pc, #164]	; (8009e64 <USBD_CDC_DeInit+0x100>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f005 f80a 	bl	800edde <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009dca:	4b26      	ldr	r3, [pc, #152]	; (8009e64 <USBD_CDC_DeInit+0x100>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	f003 020f 	and.w	r2, r3, #15
 8009dd2:	6879      	ldr	r1, [r7, #4]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	440b      	add	r3, r1
 8009dde:	3324      	adds	r3, #36	; 0x24
 8009de0:	2200      	movs	r2, #0
 8009de2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009de4:	4b1f      	ldr	r3, [pc, #124]	; (8009e64 <USBD_CDC_DeInit+0x100>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	f003 020f 	and.w	r2, r3, #15
 8009dec:	6879      	ldr	r1, [r7, #4]
 8009dee:	4613      	mov	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	440b      	add	r3, r1
 8009df8:	3326      	adds	r3, #38	; 0x26
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	32b0      	adds	r2, #176	; 0xb0
 8009e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01f      	beq.n	8009e50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	33b0      	adds	r3, #176	; 0xb0
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4413      	add	r3, r2
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	32b0      	adds	r2, #176	; 0xb0
 8009e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f005 f8de 	bl	800eff4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	32b0      	adds	r2, #176	; 0xb0
 8009e42:	2100      	movs	r1, #0
 8009e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	2000010f 	.word	0x2000010f
 8009e60:	20000110 	.word	0x20000110
 8009e64:	20000111 	.word	0x20000111

08009e68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	32b0      	adds	r2, #176	; 0xb0
 8009e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e82:	2300      	movs	r3, #0
 8009e84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e0bf      	b.n	800a018 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d050      	beq.n	8009f46 <USBD_CDC_Setup+0xde>
 8009ea4:	2b20      	cmp	r3, #32
 8009ea6:	f040 80af 	bne.w	800a008 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	88db      	ldrh	r3, [r3, #6]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d03a      	beq.n	8009f28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	b25b      	sxtb	r3, r3
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	da1b      	bge.n	8009ef4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	33b0      	adds	r3, #176	; 0xb0
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009ed2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	88d2      	ldrh	r2, [r2, #6]
 8009ed8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	88db      	ldrh	r3, [r3, #6]
 8009ede:	2b07      	cmp	r3, #7
 8009ee0:	bf28      	it	cs
 8009ee2:	2307      	movcs	r3, #7
 8009ee4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	89fa      	ldrh	r2, [r7, #14]
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 fd89 	bl	800ba04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009ef2:	e090      	b.n	800a016 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	785a      	ldrb	r2, [r3, #1]
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	88db      	ldrh	r3, [r3, #6]
 8009f02:	2b3f      	cmp	r3, #63	; 0x3f
 8009f04:	d803      	bhi.n	8009f0e <USBD_CDC_Setup+0xa6>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	88db      	ldrh	r3, [r3, #6]
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	e000      	b.n	8009f10 <USBD_CDC_Setup+0xa8>
 8009f0e:	2240      	movs	r2, #64	; 0x40
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f16:	6939      	ldr	r1, [r7, #16]
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009f1e:	461a      	mov	r2, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 fd9b 	bl	800ba5c <USBD_CtlPrepareRx>
      break;
 8009f26:	e076      	b.n	800a016 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	33b0      	adds	r3, #176	; 0xb0
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	7850      	ldrb	r0, [r2, #1]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	4798      	blx	r3
      break;
 8009f44:	e067      	b.n	800a016 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	785b      	ldrb	r3, [r3, #1]
 8009f4a:	2b0b      	cmp	r3, #11
 8009f4c:	d851      	bhi.n	8009ff2 <USBD_CDC_Setup+0x18a>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <USBD_CDC_Setup+0xec>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009f85 	.word	0x08009f85
 8009f58:	0800a001 	.word	0x0800a001
 8009f5c:	08009ff3 	.word	0x08009ff3
 8009f60:	08009ff3 	.word	0x08009ff3
 8009f64:	08009ff3 	.word	0x08009ff3
 8009f68:	08009ff3 	.word	0x08009ff3
 8009f6c:	08009ff3 	.word	0x08009ff3
 8009f70:	08009ff3 	.word	0x08009ff3
 8009f74:	08009ff3 	.word	0x08009ff3
 8009f78:	08009ff3 	.word	0x08009ff3
 8009f7c:	08009faf 	.word	0x08009faf
 8009f80:	08009fd9 	.word	0x08009fd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d107      	bne.n	8009fa0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f90:	f107 030a 	add.w	r3, r7, #10
 8009f94:	2202      	movs	r2, #2
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 fd33 	bl	800ba04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f9e:	e032      	b.n	800a006 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 fcbd 	bl	800b922 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	75fb      	strb	r3, [r7, #23]
          break;
 8009fac:	e02b      	b.n	800a006 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d107      	bne.n	8009fca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009fba:	f107 030d 	add.w	r3, r7, #13
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 fd1e 	bl	800ba04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fc8:	e01d      	b.n	800a006 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 fca8 	bl	800b922 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fd6:	e016      	b.n	800a006 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d00f      	beq.n	800a004 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f001 fc9b 	bl	800b922 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fec:	2303      	movs	r3, #3
 8009fee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ff0:	e008      	b.n	800a004 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 fc94 	bl	800b922 <USBD_CtlError>
          ret = USBD_FAIL;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ffe:	e002      	b.n	800a006 <USBD_CDC_Setup+0x19e>
          break;
 800a000:	bf00      	nop
 800a002:	e008      	b.n	800a016 <USBD_CDC_Setup+0x1ae>
          break;
 800a004:	bf00      	nop
      }
      break;
 800a006:	e006      	b.n	800a016 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f001 fc89 	bl	800b922 <USBD_CtlError>
      ret = USBD_FAIL;
 800a010:	2303      	movs	r3, #3
 800a012:	75fb      	strb	r3, [r7, #23]
      break;
 800a014:	bf00      	nop
  }

  return (uint8_t)ret;
 800a016:	7dfb      	ldrb	r3, [r7, #23]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	460b      	mov	r3, r1
 800a02a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a032:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	32b0      	adds	r2, #176	; 0xb0
 800a03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a046:	2303      	movs	r3, #3
 800a048:	e065      	b.n	800a116 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	32b0      	adds	r2, #176	; 0xb0
 800a054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a058:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a05a:	78fb      	ldrb	r3, [r7, #3]
 800a05c:	f003 020f 	and.w	r2, r3, #15
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	4613      	mov	r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	3318      	adds	r3, #24
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d02f      	beq.n	800a0d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	f003 020f 	and.w	r2, r3, #15
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	440b      	add	r3, r1
 800a086:	3318      	adds	r3, #24
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	78fb      	ldrb	r3, [r7, #3]
 800a08c:	f003 010f 	and.w	r1, r3, #15
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	460b      	mov	r3, r1
 800a094:	00db      	lsls	r3, r3, #3
 800a096:	440b      	add	r3, r1
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4403      	add	r3, r0
 800a09c:	3348      	adds	r3, #72	; 0x48
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0a4:	fb01 f303 	mul.w	r3, r1, r3
 800a0a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d112      	bne.n	800a0d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a0ae:	78fb      	ldrb	r3, [r7, #3]
 800a0b0:	f003 020f 	and.w	r2, r3, #15
 800a0b4:	6879      	ldr	r1, [r7, #4]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4413      	add	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	440b      	add	r3, r1
 800a0c0:	3318      	adds	r3, #24
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0c6:	78f9      	ldrb	r1, [r7, #3]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f004 ff2e 	bl	800ef2e <USBD_LL_Transmit>
 800a0d2:	e01f      	b.n	800a114 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	33b0      	adds	r3, #176	; 0xb0
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d010      	beq.n	800a114 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	33b0      	adds	r3, #176	; 0xb0
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	460b      	mov	r3, r1
 800a128:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	32b0      	adds	r2, #176	; 0xb0
 800a134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a138:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	32b0      	adds	r2, #176	; 0xb0
 800a144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a14c:	2303      	movs	r3, #3
 800a14e:	e01a      	b.n	800a186 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f004 ff2c 	bl	800efb2 <USBD_LL_GetRxDataSize>
 800a15a:	4602      	mov	r2, r0
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	33b0      	adds	r3, #176	; 0xb0
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a180:	4611      	mov	r1, r2
 800a182:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	32b0      	adds	r2, #176	; 0xb0
 800a1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e025      	b.n	800a1fc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	33b0      	adds	r3, #176	; 0xb0
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d01a      	beq.n	800a1fa <USBD_CDC_EP0_RxReady+0x6c>
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a1ca:	2bff      	cmp	r3, #255	; 0xff
 800a1cc:	d015      	beq.n	800a1fa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	33b0      	adds	r3, #176	; 0xb0
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a1e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1ee:	b292      	uxth	r2, r2
 800a1f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	22ff      	movs	r2, #255	; 0xff
 800a1f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a20c:	2182      	movs	r1, #130	; 0x82
 800a20e:	4818      	ldr	r0, [pc, #96]	; (800a270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a210:	f000 fd4f 	bl	800acb2 <USBD_GetEpDesc>
 800a214:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a216:	2101      	movs	r1, #1
 800a218:	4815      	ldr	r0, [pc, #84]	; (800a270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a21a:	f000 fd4a 	bl	800acb2 <USBD_GetEpDesc>
 800a21e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a220:	2181      	movs	r1, #129	; 0x81
 800a222:	4813      	ldr	r0, [pc, #76]	; (800a270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a224:	f000 fd45 	bl	800acb2 <USBD_GetEpDesc>
 800a228:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	2210      	movs	r2, #16
 800a234:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d006      	beq.n	800a24a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	2200      	movs	r2, #0
 800a240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a244:	711a      	strb	r2, [r3, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d006      	beq.n	800a25e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a258:	711a      	strb	r2, [r3, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2243      	movs	r2, #67	; 0x43
 800a262:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a266:	4618      	mov	r0, r3
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	200000cc 	.word	0x200000cc

0800a274 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a27c:	2182      	movs	r1, #130	; 0x82
 800a27e:	4818      	ldr	r0, [pc, #96]	; (800a2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a280:	f000 fd17 	bl	800acb2 <USBD_GetEpDesc>
 800a284:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a286:	2101      	movs	r1, #1
 800a288:	4815      	ldr	r0, [pc, #84]	; (800a2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a28a:	f000 fd12 	bl	800acb2 <USBD_GetEpDesc>
 800a28e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a290:	2181      	movs	r1, #129	; 0x81
 800a292:	4813      	ldr	r0, [pc, #76]	; (800a2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a294:	f000 fd0d 	bl	800acb2 <USBD_GetEpDesc>
 800a298:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2210      	movs	r2, #16
 800a2a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d006      	beq.n	800a2ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	711a      	strb	r2, [r3, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f042 0202 	orr.w	r2, r2, #2
 800a2b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	711a      	strb	r2, [r3, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f042 0202 	orr.w	r2, r2, #2
 800a2cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2243      	movs	r2, #67	; 0x43
 800a2d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2d4:	4b02      	ldr	r3, [pc, #8]	; (800a2e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	200000cc 	.word	0x200000cc

0800a2e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2ec:	2182      	movs	r1, #130	; 0x82
 800a2ee:	4818      	ldr	r0, [pc, #96]	; (800a350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2f0:	f000 fcdf 	bl	800acb2 <USBD_GetEpDesc>
 800a2f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	4815      	ldr	r0, [pc, #84]	; (800a350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2fa:	f000 fcda 	bl	800acb2 <USBD_GetEpDesc>
 800a2fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a300:	2181      	movs	r1, #129	; 0x81
 800a302:	4813      	ldr	r0, [pc, #76]	; (800a350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a304:	f000 fcd5 	bl	800acb2 <USBD_GetEpDesc>
 800a308:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2210      	movs	r2, #16
 800a314:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d006      	beq.n	800a32a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	2200      	movs	r2, #0
 800a320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a324:	711a      	strb	r2, [r3, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d006      	beq.n	800a33e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a338:	711a      	strb	r2, [r3, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2243      	movs	r2, #67	; 0x43
 800a342:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a344:	4b02      	ldr	r3, [pc, #8]	; (800a350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a346:	4618      	mov	r0, r3
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	200000cc 	.word	0x200000cc

0800a354 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	220a      	movs	r2, #10
 800a360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a362:	4b03      	ldr	r3, [pc, #12]	; (800a370 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	20000088 	.word	0x20000088

0800a374 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a384:	2303      	movs	r3, #3
 800a386:	e009      	b.n	800a39c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	33b0      	adds	r3, #176	; 0xb0
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	32b0      	adds	r2, #176	; 0xb0
 800a3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e008      	b.n	800a3e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	371c      	adds	r7, #28
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	32b0      	adds	r2, #176	; 0xb0
 800a400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a404:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e004      	b.n	800a41a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
	...

0800a428 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	32b0      	adds	r2, #176	; 0xb0
 800a43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a440:	2301      	movs	r3, #1
 800a442:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	32b0      	adds	r2, #176	; 0xb0
 800a44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a456:	2303      	movs	r3, #3
 800a458:	e025      	b.n	800a4a6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a460:	2b00      	cmp	r3, #0
 800a462:	d11f      	bne.n	800a4a4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2201      	movs	r2, #1
 800a468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a46c:	4b10      	ldr	r3, [pc, #64]	; (800a4b0 <USBD_CDC_TransmitPacket+0x88>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	f003 020f 	and.w	r2, r3, #15
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4403      	add	r3, r0
 800a486:	3318      	adds	r3, #24
 800a488:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a48a:	4b09      	ldr	r3, [pc, #36]	; (800a4b0 <USBD_CDC_TransmitPacket+0x88>)
 800a48c:	7819      	ldrb	r1, [r3, #0]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f004 fd47 	bl	800ef2e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	2000010f 	.word	0x2000010f

0800a4b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	32b0      	adds	r2, #176	; 0xb0
 800a4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	32b0      	adds	r2, #176	; 0xb0
 800a4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e018      	b.n	800a514 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	7c1b      	ldrb	r3, [r3, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4ea:	4b0c      	ldr	r3, [pc, #48]	; (800a51c <USBD_CDC_ReceivePacket+0x68>)
 800a4ec:	7819      	ldrb	r1, [r3, #0]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f004 fd39 	bl	800ef70 <USBD_LL_PrepareReceive>
 800a4fe:	e008      	b.n	800a512 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a500:	4b06      	ldr	r3, [pc, #24]	; (800a51c <USBD_CDC_ReceivePacket+0x68>)
 800a502:	7819      	ldrb	r1, [r3, #0]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a50a:	2340      	movs	r3, #64	; 0x40
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f004 fd2f 	bl	800ef70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	20000110 	.word	0x20000110

0800a520 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	4613      	mov	r3, r2
 800a52c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a534:	2303      	movs	r3, #3
 800a536:	e01f      	b.n	800a578 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	79fa      	ldrb	r2, [r7, #7]
 800a56a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f004 fba9 	bl	800ecc4 <USBD_LL_Init>
 800a572:	4603      	mov	r3, r0
 800a574:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a576:	7dfb      	ldrb	r3, [r7, #23]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a58a:	2300      	movs	r3, #0
 800a58c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a594:	2303      	movs	r3, #3
 800a596:	e025      	b.n	800a5e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	32ae      	adds	r2, #174	; 0xae
 800a5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00f      	beq.n	800a5d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	32ae      	adds	r2, #174	; 0xae
 800a5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c4:	f107 020e 	add.w	r2, r7, #14
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	4798      	blx	r3
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f004 fbb1 	bl	800ed5c <USBD_LL_Start>
 800a5fa:	4603      	mov	r3, r0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a60c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a60e:	4618      	mov	r0, r3
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	460b      	mov	r3, r1
 800a624:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a630:	2b00      	cmp	r3, #0
 800a632:	d009      	beq.n	800a648 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	78fa      	ldrb	r2, [r7, #3]
 800a63e:	4611      	mov	r1, r2
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	4798      	blx	r3
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a648:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b084      	sub	sp, #16
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	460b      	mov	r3, r1
 800a65c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	78fa      	ldrb	r2, [r7, #3]
 800a66c:	4611      	mov	r1, r2
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	4798      	blx	r3
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a678:	2303      	movs	r3, #3
 800a67a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	4618      	mov	r0, r3
 800a69a:	f001 f908 	bl	800b8ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6ba:	f003 031f 	and.w	r3, r3, #31
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d01a      	beq.n	800a6f8 <USBD_LL_SetupStage+0x72>
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d822      	bhi.n	800a70c <USBD_LL_SetupStage+0x86>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <USBD_LL_SetupStage+0x4a>
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d00a      	beq.n	800a6e4 <USBD_LL_SetupStage+0x5e>
 800a6ce:	e01d      	b.n	800a70c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fb5f 	bl	800ad9c <USBD_StdDevReq>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6e2:	e020      	b.n	800a726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fbc7 	bl	800ae80 <USBD_StdItfReq>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f6:	e016      	b.n	800a726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6fe:	4619      	mov	r1, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fc29 	bl	800af58 <USBD_StdEPReq>
 800a706:	4603      	mov	r3, r0
 800a708:	73fb      	strb	r3, [r7, #15]
      break;
 800a70a:	e00c      	b.n	800a726 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a712:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a716:	b2db      	uxtb	r3, r3
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f004 fb7e 	bl	800ee1c <USBD_LL_StallEP>
 800a720:	4603      	mov	r3, r0
 800a722:	73fb      	strb	r3, [r7, #15]
      break;
 800a724:	bf00      	nop
  }

  return ret;
 800a726:	7bfb      	ldrb	r3, [r7, #15]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	460b      	mov	r3, r1
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a742:	7afb      	ldrb	r3, [r7, #11]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d16e      	bne.n	800a826 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a74e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a756:	2b03      	cmp	r3, #3
 800a758:	f040 8098 	bne.w	800a88c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	429a      	cmp	r2, r3
 800a766:	d913      	bls.n	800a790 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	689a      	ldr	r2, [r3, #8]
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	1ad2      	subs	r2, r2, r3
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	68da      	ldr	r2, [r3, #12]
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	4293      	cmp	r3, r2
 800a780:	bf28      	it	cs
 800a782:	4613      	movcs	r3, r2
 800a784:	461a      	mov	r2, r3
 800a786:	6879      	ldr	r1, [r7, #4]
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f001 f984 	bl	800ba96 <USBD_CtlContinueRx>
 800a78e:	e07d      	b.n	800a88c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a796:	f003 031f 	and.w	r3, r3, #31
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d014      	beq.n	800a7c8 <USBD_LL_DataOutStage+0x98>
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d81d      	bhi.n	800a7de <USBD_LL_DataOutStage+0xae>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <USBD_LL_DataOutStage+0x7c>
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d003      	beq.n	800a7b2 <USBD_LL_DataOutStage+0x82>
 800a7aa:	e018      	b.n	800a7de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	75bb      	strb	r3, [r7, #22]
            break;
 800a7b0:	e018      	b.n	800a7e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f000 fa5e 	bl	800ac7e <USBD_CoreFindIF>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	75bb      	strb	r3, [r7, #22]
            break;
 800a7c6:	e00d      	b.n	800a7e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 fa60 	bl	800ac98 <USBD_CoreFindEP>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	75bb      	strb	r3, [r7, #22]
            break;
 800a7dc:	e002      	b.n	800a7e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	75bb      	strb	r3, [r7, #22]
            break;
 800a7e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a7e4:	7dbb      	ldrb	r3, [r7, #22]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d119      	bne.n	800a81e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d113      	bne.n	800a81e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a7f6:	7dba      	ldrb	r2, [r7, #22]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	32ae      	adds	r2, #174	; 0xae
 800a7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00b      	beq.n	800a81e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a806:	7dba      	ldrb	r2, [r7, #22]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a80e:	7dba      	ldrb	r2, [r7, #22]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	32ae      	adds	r2, #174	; 0xae
 800a814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f001 f94a 	bl	800bab8 <USBD_CtlSendStatus>
 800a824:	e032      	b.n	800a88c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a826:	7afb      	ldrb	r3, [r7, #11]
 800a828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	4619      	mov	r1, r3
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 fa31 	bl	800ac98 <USBD_CoreFindEP>
 800a836:	4603      	mov	r3, r0
 800a838:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a83a:	7dbb      	ldrb	r3, [r7, #22]
 800a83c:	2bff      	cmp	r3, #255	; 0xff
 800a83e:	d025      	beq.n	800a88c <USBD_LL_DataOutStage+0x15c>
 800a840:	7dbb      	ldrb	r3, [r7, #22]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d122      	bne.n	800a88c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d117      	bne.n	800a882 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a852:	7dba      	ldrb	r2, [r7, #22]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	32ae      	adds	r2, #174	; 0xae
 800a858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00f      	beq.n	800a882 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a862:	7dba      	ldrb	r2, [r7, #22]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a86a:	7dba      	ldrb	r2, [r7, #22]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	32ae      	adds	r2, #174	; 0xae
 800a870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	7afa      	ldrb	r2, [r7, #11]
 800a878:	4611      	mov	r1, r2
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	4798      	blx	r3
 800a87e:	4603      	mov	r3, r0
 800a880:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a882:	7dfb      	ldrb	r3, [r7, #23]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a888:	7dfb      	ldrb	r3, [r7, #23]
 800a88a:	e000      	b.n	800a88e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b086      	sub	sp, #24
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	607a      	str	r2, [r7, #4]
 800a8a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a8a4:	7afb      	ldrb	r3, [r7, #11]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d16f      	bne.n	800a98a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3314      	adds	r3, #20
 800a8ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d15a      	bne.n	800a970 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	689a      	ldr	r2, [r3, #8]
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d914      	bls.n	800a8f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	689a      	ldr	r2, [r3, #8]
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	1ad2      	subs	r2, r2, r3
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f001 f8ac 	bl	800ba3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f004 fb41 	bl	800ef70 <USBD_LL_PrepareReceive>
 800a8ee:	e03f      	b.n	800a970 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	68da      	ldr	r2, [r3, #12]
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d11c      	bne.n	800a936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a904:	429a      	cmp	r2, r3
 800a906:	d316      	bcc.n	800a936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a912:	429a      	cmp	r2, r3
 800a914:	d20f      	bcs.n	800a936 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a916:	2200      	movs	r2, #0
 800a918:	2100      	movs	r1, #0
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f001 f88d 	bl	800ba3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a928:	2300      	movs	r3, #0
 800a92a:	2200      	movs	r2, #0
 800a92c:	2100      	movs	r1, #0
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f004 fb1e 	bl	800ef70 <USBD_LL_PrepareReceive>
 800a934:	e01c      	b.n	800a970 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d10f      	bne.n	800a962 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d009      	beq.n	800a962 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a962:	2180      	movs	r1, #128	; 0x80
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f004 fa59 	bl	800ee1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f001 f8b7 	bl	800bade <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d03a      	beq.n	800a9f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7ff fe42 	bl	800a604 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a988:	e032      	b.n	800a9f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a98a:	7afb      	ldrb	r3, [r7, #11]
 800a98c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a990:	b2db      	uxtb	r3, r3
 800a992:	4619      	mov	r1, r3
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 f97f 	bl	800ac98 <USBD_CoreFindEP>
 800a99a:	4603      	mov	r3, r0
 800a99c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
 800a9a0:	2bff      	cmp	r3, #255	; 0xff
 800a9a2:	d025      	beq.n	800a9f0 <USBD_LL_DataInStage+0x15a>
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d122      	bne.n	800a9f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d11c      	bne.n	800a9f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a9b6:	7dfa      	ldrb	r2, [r7, #23]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	32ae      	adds	r2, #174	; 0xae
 800a9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d014      	beq.n	800a9f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a9c6:	7dfa      	ldrb	r2, [r7, #23]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a9ce:	7dfa      	ldrb	r2, [r7, #23]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	32ae      	adds	r2, #174	; 0xae
 800a9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	7afa      	ldrb	r2, [r7, #11]
 800a9dc:	4611      	mov	r1, r2
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	4798      	blx	r3
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a9e6:	7dbb      	ldrb	r3, [r7, #22]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a9ec:	7dbb      	ldrb	r3, [r7, #22]
 800a9ee:	e000      	b.n	800a9f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d014      	beq.n	800aa60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00e      	beq.n	800aa60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	6852      	ldr	r2, [r2, #4]
 800aa4e:	b2d2      	uxtb	r2, r2
 800aa50:	4611      	mov	r1, r2
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	4798      	blx	r3
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa60:	2340      	movs	r3, #64	; 0x40
 800aa62:	2200      	movs	r2, #0
 800aa64:	2100      	movs	r1, #0
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f004 f993 	bl	800ed92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2240      	movs	r2, #64	; 0x40
 800aa78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa7c:	2340      	movs	r3, #64	; 0x40
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2180      	movs	r1, #128	; 0x80
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f004 f985 	bl	800ed92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2240      	movs	r2, #64	; 0x40
 800aa92:	621a      	str	r2, [r3, #32]

  return ret;
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b083      	sub	sp, #12
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	78fa      	ldrb	r2, [r7, #3]
 800aaae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2204      	movs	r2, #4
 800aad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aaea:	b480      	push	{r7}
 800aaec:	b083      	sub	sp, #12
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d106      	bne.n	800ab0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d110      	bne.n	800ab50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00b      	beq.n	800ab50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab3e:	69db      	ldr	r3, [r3, #28]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d005      	beq.n	800ab50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab4a:	69db      	ldr	r3, [r3, #28]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	460b      	mov	r3, r1
 800ab64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	32ae      	adds	r2, #174	; 0xae
 800ab70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e01c      	b.n	800abb6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d115      	bne.n	800abb4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	32ae      	adds	r2, #174	; 0xae
 800ab92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00b      	beq.n	800abb4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	32ae      	adds	r2, #174	; 0xae
 800aba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abaa:	6a1b      	ldr	r3, [r3, #32]
 800abac:	78fa      	ldrb	r2, [r7, #3]
 800abae:	4611      	mov	r1, r2
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b082      	sub	sp, #8
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	32ae      	adds	r2, #174	; 0xae
 800abd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800abdc:	2303      	movs	r3, #3
 800abde:	e01c      	b.n	800ac1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b03      	cmp	r3, #3
 800abea:	d115      	bne.n	800ac18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	32ae      	adds	r2, #174	; 0xae
 800abf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	32ae      	adds	r2, #174	; 0xae
 800ac0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	78fa      	ldrb	r2, [r7, #3]
 800ac12:	4611      	mov	r1, r2
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00e      	beq.n	800ac74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	6852      	ldr	r2, [r2, #4]
 800ac62:	b2d2      	uxtb	r2, r2
 800ac64:	4611      	mov	r1, r2
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	4798      	blx	r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac70:	2303      	movs	r3, #3
 800ac72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b083      	sub	sp, #12
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aca4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b086      	sub	sp, #24
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800acc6:	2300      	movs	r3, #0
 800acc8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	885b      	ldrh	r3, [r3, #2]
 800acce:	b29a      	uxth	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d920      	bls.n	800ad1c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ace2:	e013      	b.n	800ad0c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ace4:	f107 030a 	add.w	r3, r7, #10
 800ace8:	4619      	mov	r1, r3
 800acea:	6978      	ldr	r0, [r7, #20]
 800acec:	f000 f81b 	bl	800ad26 <USBD_GetNextDesc>
 800acf0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	785b      	ldrb	r3, [r3, #1]
 800acf6:	2b05      	cmp	r3, #5
 800acf8:	d108      	bne.n	800ad0c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	789b      	ldrb	r3, [r3, #2]
 800ad02:	78fa      	ldrb	r2, [r7, #3]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d008      	beq.n	800ad1a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	885b      	ldrh	r3, [r3, #2]
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	897b      	ldrh	r3, [r7, #10]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d8e5      	bhi.n	800ace4 <USBD_GetEpDesc+0x32>
 800ad18:	e000      	b.n	800ad1c <USBD_GetEpDesc+0x6a>
          break;
 800ad1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad1c:	693b      	ldr	r3, [r7, #16]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3718      	adds	r7, #24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b085      	sub	sp, #20
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	881a      	ldrh	r2, [r3, #0]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	4413      	add	r3, r2
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4413      	add	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad52:	68fb      	ldr	r3, [r7, #12]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	3301      	adds	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad7e:	8a3b      	ldrh	r3, [r7, #16]
 800ad80:	021b      	lsls	r3, r3, #8
 800ad82:	b21a      	sxth	r2, r3
 800ad84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	b21b      	sxth	r3, r3
 800ad8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad8e:	89fb      	ldrh	r3, [r7, #14]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	371c      	adds	r7, #28
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ada6:	2300      	movs	r3, #0
 800ada8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adb2:	2b40      	cmp	r3, #64	; 0x40
 800adb4:	d005      	beq.n	800adc2 <USBD_StdDevReq+0x26>
 800adb6:	2b40      	cmp	r3, #64	; 0x40
 800adb8:	d857      	bhi.n	800ae6a <USBD_StdDevReq+0xce>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00f      	beq.n	800adde <USBD_StdDevReq+0x42>
 800adbe:	2b20      	cmp	r3, #32
 800adc0:	d153      	bne.n	800ae6a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	32ae      	adds	r2, #174	; 0xae
 800adcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	4798      	blx	r3
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
      break;
 800addc:	e04a      	b.n	800ae74 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	785b      	ldrb	r3, [r3, #1]
 800ade2:	2b09      	cmp	r3, #9
 800ade4:	d83b      	bhi.n	800ae5e <USBD_StdDevReq+0xc2>
 800ade6:	a201      	add	r2, pc, #4	; (adr r2, 800adec <USBD_StdDevReq+0x50>)
 800ade8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adec:	0800ae41 	.word	0x0800ae41
 800adf0:	0800ae55 	.word	0x0800ae55
 800adf4:	0800ae5f 	.word	0x0800ae5f
 800adf8:	0800ae4b 	.word	0x0800ae4b
 800adfc:	0800ae5f 	.word	0x0800ae5f
 800ae00:	0800ae1f 	.word	0x0800ae1f
 800ae04:	0800ae15 	.word	0x0800ae15
 800ae08:	0800ae5f 	.word	0x0800ae5f
 800ae0c:	0800ae37 	.word	0x0800ae37
 800ae10:	0800ae29 	.word	0x0800ae29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fa3c 	bl	800b294 <USBD_GetDescriptor>
          break;
 800ae1c:	e024      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fba1 	bl	800b568 <USBD_SetAddress>
          break;
 800ae26:	e01f      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fbe0 	bl	800b5f0 <USBD_SetConfig>
 800ae30:	4603      	mov	r3, r0
 800ae32:	73fb      	strb	r3, [r7, #15]
          break;
 800ae34:	e018      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fc83 	bl	800b744 <USBD_GetConfig>
          break;
 800ae3e:	e013      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fcb4 	bl	800b7b0 <USBD_GetStatus>
          break;
 800ae48:	e00e      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fce3 	bl	800b818 <USBD_SetFeature>
          break;
 800ae52:	e009      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fd07 	bl	800b86a <USBD_ClrFeature>
          break;
 800ae5c:	e004      	b.n	800ae68 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fd5e 	bl	800b922 <USBD_CtlError>
          break;
 800ae66:	bf00      	nop
      }
      break;
 800ae68:	e004      	b.n	800ae74 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fd58 	bl	800b922 <USBD_CtlError>
      break;
 800ae72:	bf00      	nop
  }

  return ret;
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop

0800ae80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae96:	2b40      	cmp	r3, #64	; 0x40
 800ae98:	d005      	beq.n	800aea6 <USBD_StdItfReq+0x26>
 800ae9a:	2b40      	cmp	r3, #64	; 0x40
 800ae9c:	d852      	bhi.n	800af44 <USBD_StdItfReq+0xc4>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <USBD_StdItfReq+0x26>
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	d14e      	bne.n	800af44 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d840      	bhi.n	800af36 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	889b      	ldrh	r3, [r3, #4]
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d836      	bhi.n	800af2c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	889b      	ldrh	r3, [r3, #4]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff fed9 	bl	800ac7e <USBD_CoreFindIF>
 800aecc:	4603      	mov	r3, r0
 800aece:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	2bff      	cmp	r3, #255	; 0xff
 800aed4:	d01d      	beq.n	800af12 <USBD_StdItfReq+0x92>
 800aed6:	7bbb      	ldrb	r3, [r7, #14]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d11a      	bne.n	800af12 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aedc:	7bba      	ldrb	r2, [r7, #14]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	32ae      	adds	r2, #174	; 0xae
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00f      	beq.n	800af0c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aeec:	7bba      	ldrb	r2, [r7, #14]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aef4:	7bba      	ldrb	r2, [r7, #14]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	32ae      	adds	r2, #174	; 0xae
 800aefa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	4798      	blx	r3
 800af06:	4603      	mov	r3, r0
 800af08:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af0a:	e004      	b.n	800af16 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af0c:	2303      	movs	r3, #3
 800af0e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af10:	e001      	b.n	800af16 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af12:	2303      	movs	r3, #3
 800af14:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	88db      	ldrh	r3, [r3, #6]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d110      	bne.n	800af40 <USBD_StdItfReq+0xc0>
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10d      	bne.n	800af40 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fdc7 	bl	800bab8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af2a:	e009      	b.n	800af40 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fcf7 	bl	800b922 <USBD_CtlError>
          break;
 800af34:	e004      	b.n	800af40 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 fcf2 	bl	800b922 <USBD_CtlError>
          break;
 800af3e:	e000      	b.n	800af42 <USBD_StdItfReq+0xc2>
          break;
 800af40:	bf00      	nop
      }
      break;
 800af42:	e004      	b.n	800af4e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fceb 	bl	800b922 <USBD_CtlError>
      break;
 800af4c:	bf00      	nop
  }

  return ret;
 800af4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	889b      	ldrh	r3, [r3, #4]
 800af6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af74:	2b40      	cmp	r3, #64	; 0x40
 800af76:	d007      	beq.n	800af88 <USBD_StdEPReq+0x30>
 800af78:	2b40      	cmp	r3, #64	; 0x40
 800af7a:	f200 817f 	bhi.w	800b27c <USBD_StdEPReq+0x324>
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d02a      	beq.n	800afd8 <USBD_StdEPReq+0x80>
 800af82:	2b20      	cmp	r3, #32
 800af84:	f040 817a 	bne.w	800b27c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7ff fe83 	bl	800ac98 <USBD_CoreFindEP>
 800af92:	4603      	mov	r3, r0
 800af94:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af96:	7b7b      	ldrb	r3, [r7, #13]
 800af98:	2bff      	cmp	r3, #255	; 0xff
 800af9a:	f000 8174 	beq.w	800b286 <USBD_StdEPReq+0x32e>
 800af9e:	7b7b      	ldrb	r3, [r7, #13]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f040 8170 	bne.w	800b286 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800afa6:	7b7a      	ldrb	r2, [r7, #13]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800afae:	7b7a      	ldrb	r2, [r7, #13]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	32ae      	adds	r2, #174	; 0xae
 800afb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8163 	beq.w	800b286 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800afc0:	7b7a      	ldrb	r2, [r7, #13]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	32ae      	adds	r2, #174	; 0xae
 800afc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	4798      	blx	r3
 800afd2:	4603      	mov	r3, r0
 800afd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800afd6:	e156      	b.n	800b286 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d008      	beq.n	800aff2 <USBD_StdEPReq+0x9a>
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	f300 8145 	bgt.w	800b270 <USBD_StdEPReq+0x318>
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 809b 	beq.w	800b122 <USBD_StdEPReq+0x1ca>
 800afec:	2b01      	cmp	r3, #1
 800afee:	d03c      	beq.n	800b06a <USBD_StdEPReq+0x112>
 800aff0:	e13e      	b.n	800b270 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b02      	cmp	r3, #2
 800affc:	d002      	beq.n	800b004 <USBD_StdEPReq+0xac>
 800affe:	2b03      	cmp	r3, #3
 800b000:	d016      	beq.n	800b030 <USBD_StdEPReq+0xd8>
 800b002:	e02c      	b.n	800b05e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00d      	beq.n	800b026 <USBD_StdEPReq+0xce>
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	2b80      	cmp	r3, #128	; 0x80
 800b00e:	d00a      	beq.n	800b026 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f003 ff01 	bl	800ee1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b01a:	2180      	movs	r1, #128	; 0x80
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f003 fefd 	bl	800ee1c <USBD_LL_StallEP>
 800b022:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b024:	e020      	b.n	800b068 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fc7a 	bl	800b922 <USBD_CtlError>
              break;
 800b02e:	e01b      	b.n	800b068 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	885b      	ldrh	r3, [r3, #2]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10e      	bne.n	800b056 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00b      	beq.n	800b056 <USBD_StdEPReq+0xfe>
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	2b80      	cmp	r3, #128	; 0x80
 800b042:	d008      	beq.n	800b056 <USBD_StdEPReq+0xfe>
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	88db      	ldrh	r3, [r3, #6]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d104      	bne.n	800b056 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f003 fee3 	bl	800ee1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fd2e 	bl	800bab8 <USBD_CtlSendStatus>

              break;
 800b05c:	e004      	b.n	800b068 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fc5e 	bl	800b922 <USBD_CtlError>
              break;
 800b066:	bf00      	nop
          }
          break;
 800b068:	e107      	b.n	800b27a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b070:	b2db      	uxtb	r3, r3
 800b072:	2b02      	cmp	r3, #2
 800b074:	d002      	beq.n	800b07c <USBD_StdEPReq+0x124>
 800b076:	2b03      	cmp	r3, #3
 800b078:	d016      	beq.n	800b0a8 <USBD_StdEPReq+0x150>
 800b07a:	e04b      	b.n	800b114 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00d      	beq.n	800b09e <USBD_StdEPReq+0x146>
 800b082:	7bbb      	ldrb	r3, [r7, #14]
 800b084:	2b80      	cmp	r3, #128	; 0x80
 800b086:	d00a      	beq.n	800b09e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b088:	7bbb      	ldrb	r3, [r7, #14]
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f003 fec5 	bl	800ee1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b092:	2180      	movs	r1, #128	; 0x80
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f003 fec1 	bl	800ee1c <USBD_LL_StallEP>
 800b09a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b09c:	e040      	b.n	800b120 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fc3e 	bl	800b922 <USBD_CtlError>
              break;
 800b0a6:	e03b      	b.n	800b120 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	885b      	ldrh	r3, [r3, #2]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d136      	bne.n	800b11e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d004      	beq.n	800b0c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0ba:	7bbb      	ldrb	r3, [r7, #14]
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f003 fecb 	bl	800ee5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 fcf7 	bl	800bab8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7ff fde2 	bl	800ac98 <USBD_CoreFindEP>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0d8:	7b7b      	ldrb	r3, [r7, #13]
 800b0da:	2bff      	cmp	r3, #255	; 0xff
 800b0dc:	d01f      	beq.n	800b11e <USBD_StdEPReq+0x1c6>
 800b0de:	7b7b      	ldrb	r3, [r7, #13]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d11c      	bne.n	800b11e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b0e4:	7b7a      	ldrb	r2, [r7, #13]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b0ec:	7b7a      	ldrb	r2, [r7, #13]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	32ae      	adds	r2, #174	; 0xae
 800b0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d010      	beq.n	800b11e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b0fc:	7b7a      	ldrb	r2, [r7, #13]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	32ae      	adds	r2, #174	; 0xae
 800b102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	4798      	blx	r3
 800b10e:	4603      	mov	r3, r0
 800b110:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b112:	e004      	b.n	800b11e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fc03 	bl	800b922 <USBD_CtlError>
              break;
 800b11c:	e000      	b.n	800b120 <USBD_StdEPReq+0x1c8>
              break;
 800b11e:	bf00      	nop
          }
          break;
 800b120:	e0ab      	b.n	800b27a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d002      	beq.n	800b134 <USBD_StdEPReq+0x1dc>
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d032      	beq.n	800b198 <USBD_StdEPReq+0x240>
 800b132:	e097      	b.n	800b264 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d007      	beq.n	800b14a <USBD_StdEPReq+0x1f2>
 800b13a:	7bbb      	ldrb	r3, [r7, #14]
 800b13c:	2b80      	cmp	r3, #128	; 0x80
 800b13e:	d004      	beq.n	800b14a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fbed 	bl	800b922 <USBD_CtlError>
                break;
 800b148:	e091      	b.n	800b26e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b14a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	da0b      	bge.n	800b16a <USBD_StdEPReq+0x212>
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b158:	4613      	mov	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	3310      	adds	r3, #16
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	4413      	add	r3, r2
 800b166:	3304      	adds	r3, #4
 800b168:	e00b      	b.n	800b182 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b16a:	7bbb      	ldrb	r3, [r7, #14]
 800b16c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b170:	4613      	mov	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	4413      	add	r3, r2
 800b180:	3304      	adds	r3, #4
 800b182:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2200      	movs	r2, #0
 800b188:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	2202      	movs	r2, #2
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fc37 	bl	800ba04 <USBD_CtlSendData>
              break;
 800b196:	e06a      	b.n	800b26e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da11      	bge.n	800b1c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	f003 020f 	and.w	r2, r3, #15
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4413      	add	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	440b      	add	r3, r1
 800b1b2:	3324      	adds	r3, #36	; 0x24
 800b1b4:	881b      	ldrh	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d117      	bne.n	800b1ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fbb0 	bl	800b922 <USBD_CtlError>
                  break;
 800b1c2:	e054      	b.n	800b26e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1c4:	7bbb      	ldrb	r3, [r7, #14]
 800b1c6:	f003 020f 	and.w	r2, r3, #15
 800b1ca:	6879      	ldr	r1, [r7, #4]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	440b      	add	r3, r1
 800b1d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d104      	bne.n	800b1ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fb9d 	bl	800b922 <USBD_CtlError>
                  break;
 800b1e8:	e041      	b.n	800b26e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	da0b      	bge.n	800b20a <USBD_StdEPReq+0x2b2>
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	3310      	adds	r3, #16
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	4413      	add	r3, r2
 800b206:	3304      	adds	r3, #4
 800b208:	e00b      	b.n	800b222 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b20a:	7bbb      	ldrb	r3, [r7, #14]
 800b20c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b210:	4613      	mov	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	4413      	add	r3, r2
 800b220:	3304      	adds	r3, #4
 800b222:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <USBD_StdEPReq+0x2d8>
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
 800b22c:	2b80      	cmp	r3, #128	; 0x80
 800b22e:	d103      	bne.n	800b238 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	e00e      	b.n	800b256 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b238:	7bbb      	ldrb	r3, [r7, #14]
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f003 fe2b 	bl	800ee98 <USBD_LL_IsStallEP>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d003      	beq.n	800b250 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2201      	movs	r2, #1
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	e002      	b.n	800b256 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	2202      	movs	r2, #2
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 fbd1 	bl	800ba04 <USBD_CtlSendData>
              break;
 800b262:	e004      	b.n	800b26e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b264:	6839      	ldr	r1, [r7, #0]
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fb5b 	bl	800b922 <USBD_CtlError>
              break;
 800b26c:	bf00      	nop
          }
          break;
 800b26e:	e004      	b.n	800b27a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fb55 	bl	800b922 <USBD_CtlError>
          break;
 800b278:	bf00      	nop
      }
      break;
 800b27a:	e005      	b.n	800b288 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fb4f 	bl	800b922 <USBD_CtlError>
      break;
 800b284:	e000      	b.n	800b288 <USBD_StdEPReq+0x330>
      break;
 800b286:	bf00      	nop
  }

  return ret;
 800b288:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
	...

0800b294 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	885b      	ldrh	r3, [r3, #2]
 800b2ae:	0a1b      	lsrs	r3, r3, #8
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	2b06      	cmp	r3, #6
 800b2b6:	f200 8128 	bhi.w	800b50a <USBD_GetDescriptor+0x276>
 800b2ba:	a201      	add	r2, pc, #4	; (adr r2, 800b2c0 <USBD_GetDescriptor+0x2c>)
 800b2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c0:	0800b2dd 	.word	0x0800b2dd
 800b2c4:	0800b2f5 	.word	0x0800b2f5
 800b2c8:	0800b335 	.word	0x0800b335
 800b2cc:	0800b50b 	.word	0x0800b50b
 800b2d0:	0800b50b 	.word	0x0800b50b
 800b2d4:	0800b4ab 	.word	0x0800b4ab
 800b2d8:	0800b4d7 	.word	0x0800b4d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	7c12      	ldrb	r2, [r2, #16]
 800b2e8:	f107 0108 	add.w	r1, r7, #8
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	60f8      	str	r0, [r7, #12]
      break;
 800b2f2:	e112      	b.n	800b51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7c1b      	ldrb	r3, [r3, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10d      	bne.n	800b318 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b304:	f107 0208 	add.w	r2, r7, #8
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3301      	adds	r3, #1
 800b312:	2202      	movs	r2, #2
 800b314:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b316:	e100      	b.n	800b51a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b320:	f107 0208 	add.w	r2, r7, #8
 800b324:	4610      	mov	r0, r2
 800b326:	4798      	blx	r3
 800b328:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3301      	adds	r3, #1
 800b32e:	2202      	movs	r2, #2
 800b330:	701a      	strb	r2, [r3, #0]
      break;
 800b332:	e0f2      	b.n	800b51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	885b      	ldrh	r3, [r3, #2]
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	2b05      	cmp	r3, #5
 800b33c:	f200 80ac 	bhi.w	800b498 <USBD_GetDescriptor+0x204>
 800b340:	a201      	add	r2, pc, #4	; (adr r2, 800b348 <USBD_GetDescriptor+0xb4>)
 800b342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b346:	bf00      	nop
 800b348:	0800b361 	.word	0x0800b361
 800b34c:	0800b395 	.word	0x0800b395
 800b350:	0800b3c9 	.word	0x0800b3c9
 800b354:	0800b3fd 	.word	0x0800b3fd
 800b358:	0800b431 	.word	0x0800b431
 800b35c:	0800b465 	.word	0x0800b465
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00b      	beq.n	800b384 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	7c12      	ldrb	r2, [r2, #16]
 800b378:	f107 0108 	add.w	r1, r7, #8
 800b37c:	4610      	mov	r0, r2
 800b37e:	4798      	blx	r3
 800b380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b382:	e091      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 facb 	bl	800b922 <USBD_CtlError>
            err++;
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	3301      	adds	r3, #1
 800b390:	72fb      	strb	r3, [r7, #11]
          break;
 800b392:	e089      	b.n	800b4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00b      	beq.n	800b3b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	7c12      	ldrb	r2, [r2, #16]
 800b3ac:	f107 0108 	add.w	r1, r7, #8
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
 800b3b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3b6:	e077      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fab1 	bl	800b922 <USBD_CtlError>
            err++;
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3c6:	e06f      	b.n	800b4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00b      	beq.n	800b3ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	7c12      	ldrb	r2, [r2, #16]
 800b3e0:	f107 0108 	add.w	r1, r7, #8
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ea:	e05d      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa97 	bl	800b922 <USBD_CtlError>
            err++;
 800b3f4:	7afb      	ldrb	r3, [r7, #11]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3fa:	e055      	b.n	800b4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	7c12      	ldrb	r2, [r2, #16]
 800b414:	f107 0108 	add.w	r1, r7, #8
 800b418:	4610      	mov	r0, r2
 800b41a:	4798      	blx	r3
 800b41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b41e:	e043      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fa7d 	bl	800b922 <USBD_CtlError>
            err++;
 800b428:	7afb      	ldrb	r3, [r7, #11]
 800b42a:	3301      	adds	r3, #1
 800b42c:	72fb      	strb	r3, [r7, #11]
          break;
 800b42e:	e03b      	b.n	800b4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b436:	695b      	ldr	r3, [r3, #20]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00b      	beq.n	800b454 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b442:	695b      	ldr	r3, [r3, #20]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	7c12      	ldrb	r2, [r2, #16]
 800b448:	f107 0108 	add.w	r1, r7, #8
 800b44c:	4610      	mov	r0, r2
 800b44e:	4798      	blx	r3
 800b450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b452:	e029      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fa63 	bl	800b922 <USBD_CtlError>
            err++;
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	3301      	adds	r3, #1
 800b460:	72fb      	strb	r3, [r7, #11]
          break;
 800b462:	e021      	b.n	800b4a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00b      	beq.n	800b488 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b476:	699b      	ldr	r3, [r3, #24]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	7c12      	ldrb	r2, [r2, #16]
 800b47c:	f107 0108 	add.w	r1, r7, #8
 800b480:	4610      	mov	r0, r2
 800b482:	4798      	blx	r3
 800b484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b486:	e00f      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fa49 	bl	800b922 <USBD_CtlError>
            err++;
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	3301      	adds	r3, #1
 800b494:	72fb      	strb	r3, [r7, #11]
          break;
 800b496:	e007      	b.n	800b4a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa41 	bl	800b922 <USBD_CtlError>
          err++;
 800b4a0:	7afb      	ldrb	r3, [r7, #11]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b4a6:	bf00      	nop
      }
      break;
 800b4a8:	e037      	b.n	800b51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	7c1b      	ldrb	r3, [r3, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d109      	bne.n	800b4c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ba:	f107 0208 	add.w	r2, r7, #8
 800b4be:	4610      	mov	r0, r2
 800b4c0:	4798      	blx	r3
 800b4c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4c4:	e029      	b.n	800b51a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fa2a 	bl	800b922 <USBD_CtlError>
        err++;
 800b4ce:	7afb      	ldrb	r3, [r7, #11]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	72fb      	strb	r3, [r7, #11]
      break;
 800b4d4:	e021      	b.n	800b51a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	7c1b      	ldrb	r3, [r3, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10d      	bne.n	800b4fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e6:	f107 0208 	add.w	r2, r7, #8
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	4798      	blx	r3
 800b4ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	2207      	movs	r2, #7
 800b4f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4f8:	e00f      	b.n	800b51a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fa10 	bl	800b922 <USBD_CtlError>
        err++;
 800b502:	7afb      	ldrb	r3, [r7, #11]
 800b504:	3301      	adds	r3, #1
 800b506:	72fb      	strb	r3, [r7, #11]
      break;
 800b508:	e007      	b.n	800b51a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b50a:	6839      	ldr	r1, [r7, #0]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fa08 	bl	800b922 <USBD_CtlError>
      err++;
 800b512:	7afb      	ldrb	r3, [r7, #11]
 800b514:	3301      	adds	r3, #1
 800b516:	72fb      	strb	r3, [r7, #11]
      break;
 800b518:	bf00      	nop
  }

  if (err != 0U)
 800b51a:	7afb      	ldrb	r3, [r7, #11]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d11e      	bne.n	800b55e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	88db      	ldrh	r3, [r3, #6]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d016      	beq.n	800b556 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b528:	893b      	ldrh	r3, [r7, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00e      	beq.n	800b54c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	88da      	ldrh	r2, [r3, #6]
 800b532:	893b      	ldrh	r3, [r7, #8]
 800b534:	4293      	cmp	r3, r2
 800b536:	bf28      	it	cs
 800b538:	4613      	movcs	r3, r2
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b53e:	893b      	ldrh	r3, [r7, #8]
 800b540:	461a      	mov	r2, r3
 800b542:	68f9      	ldr	r1, [r7, #12]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fa5d 	bl	800ba04 <USBD_CtlSendData>
 800b54a:	e009      	b.n	800b560 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f9e7 	bl	800b922 <USBD_CtlError>
 800b554:	e004      	b.n	800b560 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 faae 	bl	800bab8 <USBD_CtlSendStatus>
 800b55c:	e000      	b.n	800b560 <USBD_GetDescriptor+0x2cc>
    return;
 800b55e:	bf00      	nop
  }
}
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop

0800b568 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	889b      	ldrh	r3, [r3, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d131      	bne.n	800b5de <USBD_SetAddress+0x76>
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	88db      	ldrh	r3, [r3, #6]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d12d      	bne.n	800b5de <USBD_SetAddress+0x76>
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	885b      	ldrh	r3, [r3, #2]
 800b586:	2b7f      	cmp	r3, #127	; 0x7f
 800b588:	d829      	bhi.n	800b5de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	885b      	ldrh	r3, [r3, #2]
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b594:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d104      	bne.n	800b5ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f9bc 	bl	800b922 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5aa:	e01d      	b.n	800b5e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	7bfa      	ldrb	r2, [r7, #15]
 800b5b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f003 fc99 	bl	800eef0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fa7a 	bl	800bab8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d004      	beq.n	800b5d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2202      	movs	r2, #2
 800b5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5d2:	e009      	b.n	800b5e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5dc:	e004      	b.n	800b5e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 f99e 	bl	800b922 <USBD_CtlError>
  }
}
 800b5e6:	bf00      	nop
 800b5e8:	bf00      	nop
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	885b      	ldrh	r3, [r3, #2]
 800b602:	b2da      	uxtb	r2, r3
 800b604:	4b4e      	ldr	r3, [pc, #312]	; (800b740 <USBD_SetConfig+0x150>)
 800b606:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b608:	4b4d      	ldr	r3, [pc, #308]	; (800b740 <USBD_SetConfig+0x150>)
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d905      	bls.n	800b61c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b610:	6839      	ldr	r1, [r7, #0]
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f985 	bl	800b922 <USBD_CtlError>
    return USBD_FAIL;
 800b618:	2303      	movs	r3, #3
 800b61a:	e08c      	b.n	800b736 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b02      	cmp	r3, #2
 800b626:	d002      	beq.n	800b62e <USBD_SetConfig+0x3e>
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d029      	beq.n	800b680 <USBD_SetConfig+0x90>
 800b62c:	e075      	b.n	800b71a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b62e:	4b44      	ldr	r3, [pc, #272]	; (800b740 <USBD_SetConfig+0x150>)
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d020      	beq.n	800b678 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b636:	4b42      	ldr	r3, [pc, #264]	; (800b740 <USBD_SetConfig+0x150>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b640:	4b3f      	ldr	r3, [pc, #252]	; (800b740 <USBD_SetConfig+0x150>)
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	4619      	mov	r1, r3
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7fe ffe7 	bl	800a61a <USBD_SetClassConfig>
 800b64c:	4603      	mov	r3, r0
 800b64e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b650:	7bfb      	ldrb	r3, [r7, #15]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d008      	beq.n	800b668 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f962 	bl	800b922 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2202      	movs	r2, #2
 800b662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b666:	e065      	b.n	800b734 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fa25 	bl	800bab8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2203      	movs	r2, #3
 800b672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b676:	e05d      	b.n	800b734 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fa1d 	bl	800bab8 <USBD_CtlSendStatus>
      break;
 800b67e:	e059      	b.n	800b734 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b680:	4b2f      	ldr	r3, [pc, #188]	; (800b740 <USBD_SetConfig+0x150>)
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d112      	bne.n	800b6ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2202      	movs	r2, #2
 800b68c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b690:	4b2b      	ldr	r3, [pc, #172]	; (800b740 <USBD_SetConfig+0x150>)
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	461a      	mov	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b69a:	4b29      	ldr	r3, [pc, #164]	; (800b740 <USBD_SetConfig+0x150>)
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	4619      	mov	r1, r3
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7fe ffd6 	bl	800a652 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fa06 	bl	800bab8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6ac:	e042      	b.n	800b734 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b6ae:	4b24      	ldr	r3, [pc, #144]	; (800b740 <USBD_SetConfig+0x150>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d02a      	beq.n	800b712 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7fe ffc4 	bl	800a652 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6ca:	4b1d      	ldr	r3, [pc, #116]	; (800b740 <USBD_SetConfig+0x150>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6d4:	4b1a      	ldr	r3, [pc, #104]	; (800b740 <USBD_SetConfig+0x150>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7fe ff9d 	bl	800a61a <USBD_SetClassConfig>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00f      	beq.n	800b70a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f918 	bl	800b922 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7fe ffa9 	bl	800a652 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2202      	movs	r2, #2
 800b704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b708:	e014      	b.n	800b734 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f9d4 	bl	800bab8 <USBD_CtlSendStatus>
      break;
 800b710:	e010      	b.n	800b734 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f9d0 	bl	800bab8 <USBD_CtlSendStatus>
      break;
 800b718:	e00c      	b.n	800b734 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f900 	bl	800b922 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b722:	4b07      	ldr	r3, [pc, #28]	; (800b740 <USBD_SetConfig+0x150>)
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7fe ff92 	bl	800a652 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b72e:	2303      	movs	r3, #3
 800b730:	73fb      	strb	r3, [r7, #15]
      break;
 800b732:	bf00      	nop
  }

  return ret;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	200006d0 	.word	0x200006d0

0800b744 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	88db      	ldrh	r3, [r3, #6]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d004      	beq.n	800b760 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f8e2 	bl	800b922 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b75e:	e023      	b.n	800b7a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b766:	b2db      	uxtb	r3, r3
 800b768:	2b02      	cmp	r3, #2
 800b76a:	dc02      	bgt.n	800b772 <USBD_GetConfig+0x2e>
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dc03      	bgt.n	800b778 <USBD_GetConfig+0x34>
 800b770:	e015      	b.n	800b79e <USBD_GetConfig+0x5a>
 800b772:	2b03      	cmp	r3, #3
 800b774:	d00b      	beq.n	800b78e <USBD_GetConfig+0x4a>
 800b776:	e012      	b.n	800b79e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3308      	adds	r3, #8
 800b782:	2201      	movs	r2, #1
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f93c 	bl	800ba04 <USBD_CtlSendData>
        break;
 800b78c:	e00c      	b.n	800b7a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	3304      	adds	r3, #4
 800b792:	2201      	movs	r2, #1
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f934 	bl	800ba04 <USBD_CtlSendData>
        break;
 800b79c:	e004      	b.n	800b7a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f8be 	bl	800b922 <USBD_CtlError>
        break;
 800b7a6:	bf00      	nop
}
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d81e      	bhi.n	800b806 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	88db      	ldrh	r3, [r3, #6]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d004      	beq.n	800b7da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f8a5 	bl	800b922 <USBD_CtlError>
        break;
 800b7d8:	e01a      	b.n	800b810 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d005      	beq.n	800b7f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	f043 0202 	orr.w	r2, r3, #2
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	330c      	adds	r3, #12
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f900 	bl	800ba04 <USBD_CtlSendData>
      break;
 800b804:	e004      	b.n	800b810 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f88a 	bl	800b922 <USBD_CtlError>
      break;
 800b80e:	bf00      	nop
  }
}
 800b810:	bf00      	nop
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	885b      	ldrh	r3, [r3, #2]
 800b826:	2b01      	cmp	r3, #1
 800b828:	d107      	bne.n	800b83a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f940 	bl	800bab8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b838:	e013      	b.n	800b862 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	885b      	ldrh	r3, [r3, #2]
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d10b      	bne.n	800b85a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	889b      	ldrh	r3, [r3, #4]
 800b846:	0a1b      	lsrs	r3, r3, #8
 800b848:	b29b      	uxth	r3, r3
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 f930 	bl	800bab8 <USBD_CtlSendStatus>
}
 800b858:	e003      	b.n	800b862 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f860 	bl	800b922 <USBD_CtlError>
}
 800b862:	bf00      	nop
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	3b01      	subs	r3, #1
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d80b      	bhi.n	800b89a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	885b      	ldrh	r3, [r3, #2]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d10c      	bne.n	800b8a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f910 	bl	800bab8 <USBD_CtlSendStatus>
      }
      break;
 800b898:	e004      	b.n	800b8a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f840 	bl	800b922 <USBD_CtlError>
      break;
 800b8a2:	e000      	b.n	800b8a6 <USBD_ClrFeature+0x3c>
      break;
 800b8a4:	bf00      	nop
  }
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	781a      	ldrb	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	781a      	ldrb	r2, [r3, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f7ff fa41 	bl	800ad60 <SWAPBYTE>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f7ff fa34 	bl	800ad60 <SWAPBYTE>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	3301      	adds	r3, #1
 800b904:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	3301      	adds	r3, #1
 800b90a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f7ff fa27 	bl	800ad60 <SWAPBYTE>
 800b912:	4603      	mov	r3, r0
 800b914:	461a      	mov	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	80da      	strh	r2, [r3, #6]
}
 800b91a:	bf00      	nop
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b082      	sub	sp, #8
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b92c:	2180      	movs	r1, #128	; 0x80
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f003 fa74 	bl	800ee1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b934:	2100      	movs	r1, #0
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f003 fa70 	bl	800ee1c <USBD_LL_StallEP>
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b950:	2300      	movs	r3, #0
 800b952:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d036      	beq.n	800b9c8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b95e:	6938      	ldr	r0, [r7, #16]
 800b960:	f000 f836 	bl	800b9d0 <USBD_GetLen>
 800b964:	4603      	mov	r3, r0
 800b966:	3301      	adds	r3, #1
 800b968:	b29b      	uxth	r3, r3
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b972:	7dfb      	ldrb	r3, [r7, #23]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	4413      	add	r3, r2
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	7812      	ldrb	r2, [r2, #0]
 800b97c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	3301      	adds	r3, #1
 800b982:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b984:	7dfb      	ldrb	r3, [r7, #23]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	4413      	add	r3, r2
 800b98a:	2203      	movs	r2, #3
 800b98c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b98e:	7dfb      	ldrb	r3, [r7, #23]
 800b990:	3301      	adds	r3, #1
 800b992:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b994:	e013      	b.n	800b9be <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	4413      	add	r3, r2
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	7812      	ldrb	r2, [r2, #0]
 800b9a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	613b      	str	r3, [r7, #16]
    idx++;
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9ae:	7dfb      	ldrb	r3, [r7, #23]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9b8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1e7      	bne.n	800b996 <USBD_GetString+0x52>
 800b9c6:	e000      	b.n	800b9ca <USBD_GetString+0x86>
    return;
 800b9c8:	bf00      	nop
  }
}
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9e0:	e005      	b.n	800b9ee <USBD_GetLen+0x1e>
  {
    len++;
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1f5      	bne.n	800b9e2 <USBD_GetLen+0x12>
  }

  return len;
 800b9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2202      	movs	r2, #2
 800ba14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	2100      	movs	r1, #0
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f003 fa7f 	bl	800ef2e <USBD_LL_Transmit>

  return USBD_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	60f8      	str	r0, [r7, #12]
 800ba42:	60b9      	str	r1, [r7, #8]
 800ba44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f003 fa6e 	bl	800ef2e <USBD_LL_Transmit>

  return USBD_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2203      	movs	r2, #3
 800ba6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	2100      	movs	r1, #0
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f003 fa72 	bl	800ef70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	60f8      	str	r0, [r7, #12]
 800ba9e:	60b9      	str	r1, [r7, #8]
 800baa0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	2100      	movs	r1, #0
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f003 fa61 	bl	800ef70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2204      	movs	r2, #4
 800bac4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bac8:	2300      	movs	r3, #0
 800baca:	2200      	movs	r2, #0
 800bacc:	2100      	movs	r1, #0
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f003 fa2d 	bl	800ef2e <USBD_LL_Transmit>

  return USBD_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2205      	movs	r2, #5
 800baea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baee:	2300      	movs	r3, #0
 800baf0:	2200      	movs	r2, #0
 800baf2:	2100      	movs	r1, #0
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f003 fa3b 	bl	800ef70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <__NVIC_SetPriority>:
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	6039      	str	r1, [r7, #0]
 800bb0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	db0a      	blt.n	800bb2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	b2da      	uxtb	r2, r3
 800bb1c:	490c      	ldr	r1, [pc, #48]	; (800bb50 <__NVIC_SetPriority+0x4c>)
 800bb1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb22:	0112      	lsls	r2, r2, #4
 800bb24:	b2d2      	uxtb	r2, r2
 800bb26:	440b      	add	r3, r1
 800bb28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bb2c:	e00a      	b.n	800bb44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	4908      	ldr	r1, [pc, #32]	; (800bb54 <__NVIC_SetPriority+0x50>)
 800bb34:	79fb      	ldrb	r3, [r7, #7]
 800bb36:	f003 030f 	and.w	r3, r3, #15
 800bb3a:	3b04      	subs	r3, #4
 800bb3c:	0112      	lsls	r2, r2, #4
 800bb3e:	b2d2      	uxtb	r2, r2
 800bb40:	440b      	add	r3, r1
 800bb42:	761a      	strb	r2, [r3, #24]
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	e000e100 	.word	0xe000e100
 800bb54:	e000ed00 	.word	0xe000ed00

0800bb58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bb5c:	4b05      	ldr	r3, [pc, #20]	; (800bb74 <SysTick_Handler+0x1c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bb60:	f001 fcfe 	bl	800d560 <xTaskGetSchedulerState>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d001      	beq.n	800bb6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bb6a:	f002 fae5 	bl	800e138 <xPortSysTickHandler>
  }
}
 800bb6e:	bf00      	nop
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	e000e010 	.word	0xe000e010

0800bb78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	f06f 0004 	mvn.w	r0, #4
 800bb82:	f7ff ffbf 	bl	800bb04 <__NVIC_SetPriority>
#endif
}
 800bb86:	bf00      	nop
 800bb88:	bd80      	pop	{r7, pc}
	...

0800bb8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb92:	f3ef 8305 	mrs	r3, IPSR
 800bb96:	603b      	str	r3, [r7, #0]
  return(result);
 800bb98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d003      	beq.n	800bba6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bb9e:	f06f 0305 	mvn.w	r3, #5
 800bba2:	607b      	str	r3, [r7, #4]
 800bba4:	e00c      	b.n	800bbc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bba6:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <osKernelInitialize+0x44>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d105      	bne.n	800bbba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bbae:	4b08      	ldr	r3, [pc, #32]	; (800bbd0 <osKernelInitialize+0x44>)
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	607b      	str	r3, [r7, #4]
 800bbb8:	e002      	b.n	800bbc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bbba:	f04f 33ff 	mov.w	r3, #4294967295
 800bbbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bbc0:	687b      	ldr	r3, [r7, #4]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	200006d4 	.word	0x200006d4

0800bbd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbda:	f3ef 8305 	mrs	r3, IPSR
 800bbde:	603b      	str	r3, [r7, #0]
  return(result);
 800bbe0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d003      	beq.n	800bbee <osKernelStart+0x1a>
    stat = osErrorISR;
 800bbe6:	f06f 0305 	mvn.w	r3, #5
 800bbea:	607b      	str	r3, [r7, #4]
 800bbec:	e010      	b.n	800bc10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bbee:	4b0b      	ldr	r3, [pc, #44]	; (800bc1c <osKernelStart+0x48>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d109      	bne.n	800bc0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bbf6:	f7ff ffbf 	bl	800bb78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bbfa:	4b08      	ldr	r3, [pc, #32]	; (800bc1c <osKernelStart+0x48>)
 800bbfc:	2202      	movs	r2, #2
 800bbfe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bc00:	f001 f866 	bl	800ccd0 <vTaskStartScheduler>
      stat = osOK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	607b      	str	r3, [r7, #4]
 800bc08:	e002      	b.n	800bc10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bc0a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc10:	687b      	ldr	r3, [r7, #4]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	200006d4 	.word	0x200006d4

0800bc20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08e      	sub	sp, #56	; 0x38
 800bc24:	af04      	add	r7, sp, #16
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc30:	f3ef 8305 	mrs	r3, IPSR
 800bc34:	617b      	str	r3, [r7, #20]
  return(result);
 800bc36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d17e      	bne.n	800bd3a <osThreadNew+0x11a>
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d07b      	beq.n	800bd3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bc42:	2380      	movs	r3, #128	; 0x80
 800bc44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bc46:	2318      	movs	r3, #24
 800bc48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bc4e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d045      	beq.n	800bce6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d002      	beq.n	800bc68 <osThreadNew+0x48>
        name = attr->name;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	699b      	ldr	r3, [r3, #24]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d008      	beq.n	800bc8e <osThreadNew+0x6e>
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	2b38      	cmp	r3, #56	; 0x38
 800bc80:	d805      	bhi.n	800bc8e <osThreadNew+0x6e>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f003 0301 	and.w	r3, r3, #1
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <osThreadNew+0x72>
        return (NULL);
 800bc8e:	2300      	movs	r3, #0
 800bc90:	e054      	b.n	800bd3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d003      	beq.n	800bca2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	089b      	lsrs	r3, r3, #2
 800bca0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00e      	beq.n	800bcc8 <osThreadNew+0xa8>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	2b5b      	cmp	r3, #91	; 0x5b
 800bcb0:	d90a      	bls.n	800bcc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d006      	beq.n	800bcc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	695b      	ldr	r3, [r3, #20]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <osThreadNew+0xa8>
        mem = 1;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	61bb      	str	r3, [r7, #24]
 800bcc6:	e010      	b.n	800bcea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10c      	bne.n	800bcea <osThreadNew+0xca>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d108      	bne.n	800bcea <osThreadNew+0xca>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d104      	bne.n	800bcea <osThreadNew+0xca>
          mem = 0;
 800bce0:	2300      	movs	r3, #0
 800bce2:	61bb      	str	r3, [r7, #24]
 800bce4:	e001      	b.n	800bcea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d110      	bne.n	800bd12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bcf8:	9202      	str	r2, [sp, #8]
 800bcfa:	9301      	str	r3, [sp, #4]
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	6a3a      	ldr	r2, [r7, #32]
 800bd04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f000 fe0c 	bl	800c924 <xTaskCreateStatic>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	613b      	str	r3, [r7, #16]
 800bd10:	e013      	b.n	800bd3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d110      	bne.n	800bd3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bd18:	6a3b      	ldr	r3, [r7, #32]
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	f107 0310 	add.w	r3, r7, #16
 800bd20:	9301      	str	r3, [sp, #4]
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f000 fe57 	bl	800c9de <xTaskCreate>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d001      	beq.n	800bd3a <osThreadNew+0x11a>
            hTask = NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bd3a:	693b      	ldr	r3, [r7, #16]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3728      	adds	r7, #40	; 0x28
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd4c:	f3ef 8305 	mrs	r3, IPSR
 800bd50:	60bb      	str	r3, [r7, #8]
  return(result);
 800bd52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d003      	beq.n	800bd60 <osDelay+0x1c>
    stat = osErrorISR;
 800bd58:	f06f 0305 	mvn.w	r3, #5
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	e007      	b.n	800bd70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bd60:	2300      	movs	r3, #0
 800bd62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d002      	beq.n	800bd70 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 ff7c 	bl	800cc68 <vTaskDelay>
    }
  }

  return (stat);
 800bd70:	68fb      	ldr	r3, [r7, #12]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
	...

0800bd7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	4a07      	ldr	r2, [pc, #28]	; (800bda8 <vApplicationGetIdleTaskMemory+0x2c>)
 800bd8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	4a06      	ldr	r2, [pc, #24]	; (800bdac <vApplicationGetIdleTaskMemory+0x30>)
 800bd92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2280      	movs	r2, #128	; 0x80
 800bd98:	601a      	str	r2, [r3, #0]
}
 800bd9a:	bf00      	nop
 800bd9c:	3714      	adds	r7, #20
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	200006d8 	.word	0x200006d8
 800bdac:	20000734 	.word	0x20000734

0800bdb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4a07      	ldr	r2, [pc, #28]	; (800bddc <vApplicationGetTimerTaskMemory+0x2c>)
 800bdc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	4a06      	ldr	r2, [pc, #24]	; (800bde0 <vApplicationGetTimerTaskMemory+0x30>)
 800bdc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdce:	601a      	str	r2, [r3, #0]
}
 800bdd0:	bf00      	nop
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	20000934 	.word	0x20000934
 800bde0:	20000990 	.word	0x20000990

0800bde4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f103 0208 	add.w	r2, r3, #8
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f103 0208 	add.w	r2, r3, #8
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f103 0208 	add.w	r2, r3, #8
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be18:	bf00      	nop
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be32:	bf00      	nop
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3c:	4770      	bx	lr

0800be3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be3e:	b480      	push	{r7}
 800be40:	b085      	sub	sp, #20
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	689a      	ldr	r2, [r3, #8]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	1c5a      	adds	r2, r3, #1
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	601a      	str	r2, [r3, #0]
}
 800be7a:	bf00      	nop
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be86:	b480      	push	{r7}
 800be88:	b085      	sub	sp, #20
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9c:	d103      	bne.n	800bea6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	e00c      	b.n	800bec0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	3308      	adds	r3, #8
 800beaa:	60fb      	str	r3, [r7, #12]
 800beac:	e002      	b.n	800beb4 <vListInsert+0x2e>
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	68ba      	ldr	r2, [r7, #8]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d2f6      	bcs.n	800beae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	685a      	ldr	r2, [r3, #4]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	683a      	ldr	r2, [r7, #0]
 800beda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	1c5a      	adds	r2, r3, #1
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	601a      	str	r2, [r3, #0]
}
 800beec:	bf00      	nop
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bef8:	b480      	push	{r7}
 800befa:	b085      	sub	sp, #20
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	6892      	ldr	r2, [r2, #8]
 800bf0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	6852      	ldr	r2, [r2, #4]
 800bf18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d103      	bne.n	800bf2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689a      	ldr	r2, [r3, #8]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	1e5a      	subs	r2, r3, #1
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10a      	bne.n	800bf76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bf72:	bf00      	nop
 800bf74:	e7fe      	b.n	800bf74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bf76:	f002 f84d 	bl	800e014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf82:	68f9      	ldr	r1, [r7, #12]
 800bf84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf86:	fb01 f303 	mul.w	r3, r1, r3
 800bf8a:	441a      	add	r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	68f9      	ldr	r1, [r7, #12]
 800bfaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bfac:	fb01 f303 	mul.w	r3, r1, r3
 800bfb0:	441a      	add	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	22ff      	movs	r2, #255	; 0xff
 800bfba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	22ff      	movs	r2, #255	; 0xff
 800bfc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d114      	bne.n	800bff6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d01a      	beq.n	800c00a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3310      	adds	r3, #16
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f001 f903 	bl	800d1e4 <xTaskRemoveFromEventList>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d012      	beq.n	800c00a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bfe4:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <xQueueGenericReset+0xcc>)
 800bfe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfea:	601a      	str	r2, [r3, #0]
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	e009      	b.n	800c00a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3310      	adds	r3, #16
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7ff fef2 	bl	800bde4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	3324      	adds	r3, #36	; 0x24
 800c004:	4618      	mov	r0, r3
 800c006:	f7ff feed 	bl	800bde4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c00a:	f002 f833 	bl	800e074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c00e:	2301      	movs	r3, #1
}
 800c010:	4618      	mov	r0, r3
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	e000ed04 	.word	0xe000ed04

0800c01c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b08e      	sub	sp, #56	; 0x38
 800c020:	af02      	add	r7, sp, #8
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
 800c028:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10a      	bne.n	800c046 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10a      	bne.n	800c062 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c050:	f383 8811 	msr	BASEPRI, r3
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c05e:	bf00      	nop
 800c060:	e7fe      	b.n	800c060 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d002      	beq.n	800c06e <xQueueGenericCreateStatic+0x52>
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <xQueueGenericCreateStatic+0x56>
 800c06e:	2301      	movs	r3, #1
 800c070:	e000      	b.n	800c074 <xQueueGenericCreateStatic+0x58>
 800c072:	2300      	movs	r3, #0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10a      	bne.n	800c08e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	623b      	str	r3, [r7, #32]
}
 800c08a:	bf00      	nop
 800c08c:	e7fe      	b.n	800c08c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d102      	bne.n	800c09a <xQueueGenericCreateStatic+0x7e>
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <xQueueGenericCreateStatic+0x82>
 800c09a:	2301      	movs	r3, #1
 800c09c:	e000      	b.n	800c0a0 <xQueueGenericCreateStatic+0x84>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10a      	bne.n	800c0ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	61fb      	str	r3, [r7, #28]
}
 800c0b6:	bf00      	nop
 800c0b8:	e7fe      	b.n	800c0b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c0ba:	2350      	movs	r3, #80	; 0x50
 800c0bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	2b50      	cmp	r3, #80	; 0x50
 800c0c2:	d00a      	beq.n	800c0da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	61bb      	str	r3, [r7, #24]
}
 800c0d6:	bf00      	nop
 800c0d8:	e7fe      	b.n	800c0d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c0da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00d      	beq.n	800c102 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c0ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	68b9      	ldr	r1, [r7, #8]
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f000 f805 	bl	800c10c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c104:	4618      	mov	r0, r3
 800c106:	3730      	adds	r7, #48	; 0x30
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
 800c118:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d103      	bne.n	800c128 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	69ba      	ldr	r2, [r7, #24]
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	e002      	b.n	800c12e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c13a:	2101      	movs	r1, #1
 800c13c:	69b8      	ldr	r0, [r7, #24]
 800c13e:	f7ff ff05 	bl	800bf4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	78fa      	ldrb	r2, [r7, #3]
 800c146:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c14a:	bf00      	nop
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
	...

0800c154 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b08e      	sub	sp, #56	; 0x38
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c162:	2300      	movs	r3, #0
 800c164:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <xQueueGenericSend+0x32>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d103      	bne.n	800c194 <xQueueGenericSend+0x40>
 800c18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <xQueueGenericSend+0x44>
 800c194:	2301      	movs	r3, #1
 800c196:	e000      	b.n	800c19a <xQueueGenericSend+0x46>
 800c198:	2300      	movs	r3, #0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10a      	bne.n	800c1b4 <xQueueGenericSend+0x60>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	d103      	bne.n	800c1c2 <xQueueGenericSend+0x6e>
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d101      	bne.n	800c1c6 <xQueueGenericSend+0x72>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e000      	b.n	800c1c8 <xQueueGenericSend+0x74>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10a      	bne.n	800c1e2 <xQueueGenericSend+0x8e>
	__asm volatile
 800c1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	623b      	str	r3, [r7, #32]
}
 800c1de:	bf00      	nop
 800c1e0:	e7fe      	b.n	800c1e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1e2:	f001 f9bd 	bl	800d560 <xTaskGetSchedulerState>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d102      	bne.n	800c1f2 <xQueueGenericSend+0x9e>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <xQueueGenericSend+0xa2>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e000      	b.n	800c1f8 <xQueueGenericSend+0xa4>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10a      	bne.n	800c212 <xQueueGenericSend+0xbe>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	61fb      	str	r3, [r7, #28]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c212:	f001 feff 	bl	800e014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c21e:	429a      	cmp	r2, r3
 800c220:	d302      	bcc.n	800c228 <xQueueGenericSend+0xd4>
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	2b02      	cmp	r3, #2
 800c226:	d129      	bne.n	800c27c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c228:	683a      	ldr	r2, [r7, #0]
 800c22a:	68b9      	ldr	r1, [r7, #8]
 800c22c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c22e:	f000 fa0b 	bl	800c648 <prvCopyDataToQueue>
 800c232:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d010      	beq.n	800c25e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	3324      	adds	r3, #36	; 0x24
 800c240:	4618      	mov	r0, r3
 800c242:	f000 ffcf 	bl	800d1e4 <xTaskRemoveFromEventList>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d013      	beq.n	800c274 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c24c:	4b3f      	ldr	r3, [pc, #252]	; (800c34c <xQueueGenericSend+0x1f8>)
 800c24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	e00a      	b.n	800c274 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c260:	2b00      	cmp	r3, #0
 800c262:	d007      	beq.n	800c274 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c264:	4b39      	ldr	r3, [pc, #228]	; (800c34c <xQueueGenericSend+0x1f8>)
 800c266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c274:	f001 fefe 	bl	800e074 <vPortExitCritical>
				return pdPASS;
 800c278:	2301      	movs	r3, #1
 800c27a:	e063      	b.n	800c344 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d103      	bne.n	800c28a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c282:	f001 fef7 	bl	800e074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c286:	2300      	movs	r3, #0
 800c288:	e05c      	b.n	800c344 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d106      	bne.n	800c29e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c290:	f107 0314 	add.w	r3, r7, #20
 800c294:	4618      	mov	r0, r3
 800c296:	f001 f809 	bl	800d2ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c29a:	2301      	movs	r3, #1
 800c29c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c29e:	f001 fee9 	bl	800e074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2a2:	f000 fd7b 	bl	800cd9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2a6:	f001 feb5 	bl	800e014 <vPortEnterCritical>
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2b0:	b25b      	sxtb	r3, r3
 800c2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b6:	d103      	bne.n	800c2c0 <xQueueGenericSend+0x16c>
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2c6:	b25b      	sxtb	r3, r3
 800c2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2cc:	d103      	bne.n	800c2d6 <xQueueGenericSend+0x182>
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2d6:	f001 fecd 	bl	800e074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2da:	1d3a      	adds	r2, r7, #4
 800c2dc:	f107 0314 	add.w	r3, r7, #20
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f000 fff8 	bl	800d2d8 <xTaskCheckForTimeOut>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d124      	bne.n	800c338 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c2ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2f0:	f000 faa2 	bl	800c838 <prvIsQueueFull>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d018      	beq.n	800c32c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fc:	3310      	adds	r3, #16
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	4611      	mov	r1, r2
 800c302:	4618      	mov	r0, r3
 800c304:	f000 ff1e 	bl	800d144 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c30a:	f000 fa2d 	bl	800c768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c30e:	f000 fd53 	bl	800cdb8 <xTaskResumeAll>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	f47f af7c 	bne.w	800c212 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c31a:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <xQueueGenericSend+0x1f8>)
 800c31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c320:	601a      	str	r2, [r3, #0]
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	e772      	b.n	800c212 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c32c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c32e:	f000 fa1b 	bl	800c768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c332:	f000 fd41 	bl	800cdb8 <xTaskResumeAll>
 800c336:	e76c      	b.n	800c212 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c33a:	f000 fa15 	bl	800c768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c33e:	f000 fd3b 	bl	800cdb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c342:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c344:	4618      	mov	r0, r3
 800c346:	3738      	adds	r7, #56	; 0x38
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	e000ed04 	.word	0xe000ed04

0800c350 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b090      	sub	sp, #64	; 0x40
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
 800c35c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c364:	2b00      	cmp	r3, #0
 800c366:	d10a      	bne.n	800c37e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c37a:	bf00      	nop
 800c37c:	e7fe      	b.n	800c37c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d103      	bne.n	800c38c <xQueueGenericSendFromISR+0x3c>
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d101      	bne.n	800c390 <xQueueGenericSendFromISR+0x40>
 800c38c:	2301      	movs	r3, #1
 800c38e:	e000      	b.n	800c392 <xQueueGenericSendFromISR+0x42>
 800c390:	2300      	movs	r3, #0
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10a      	bne.n	800c3ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3a8:	bf00      	nop
 800c3aa:	e7fe      	b.n	800c3aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	d103      	bne.n	800c3ba <xQueueGenericSendFromISR+0x6a>
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d101      	bne.n	800c3be <xQueueGenericSendFromISR+0x6e>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e000      	b.n	800c3c0 <xQueueGenericSendFromISR+0x70>
 800c3be:	2300      	movs	r3, #0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10a      	bne.n	800c3da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	623b      	str	r3, [r7, #32]
}
 800c3d6:	bf00      	nop
 800c3d8:	e7fe      	b.n	800c3d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3da:	f001 fefd 	bl	800e1d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c3de:	f3ef 8211 	mrs	r2, BASEPRI
 800c3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e6:	f383 8811 	msr	BASEPRI, r3
 800c3ea:	f3bf 8f6f 	isb	sy
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	61fa      	str	r2, [r7, #28]
 800c3f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c3f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c402:	429a      	cmp	r2, r3
 800c404:	d302      	bcc.n	800c40c <xQueueGenericSendFromISR+0xbc>
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d12f      	bne.n	800c46c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c41a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c41c:	683a      	ldr	r2, [r7, #0]
 800c41e:	68b9      	ldr	r1, [r7, #8]
 800c420:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c422:	f000 f911 	bl	800c648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c426:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42e:	d112      	bne.n	800c456 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c434:	2b00      	cmp	r3, #0
 800c436:	d016      	beq.n	800c466 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43a:	3324      	adds	r3, #36	; 0x24
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 fed1 	bl	800d1e4 <xTaskRemoveFromEventList>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00e      	beq.n	800c466 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00b      	beq.n	800c466 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	e007      	b.n	800c466 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c456:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c45a:	3301      	adds	r3, #1
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	b25a      	sxtb	r2, r3
 800c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c466:	2301      	movs	r3, #1
 800c468:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c46a:	e001      	b.n	800c470 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c46c:	2300      	movs	r3, #0
 800c46e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c472:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c47a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3740      	adds	r7, #64	; 0x40
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
	...

0800c488 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08c      	sub	sp, #48	; 0x30
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c494:	2300      	movs	r3, #0
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10a      	bne.n	800c4b8 <xQueueReceive+0x30>
	__asm volatile
 800c4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a6:	f383 8811 	msr	BASEPRI, r3
 800c4aa:	f3bf 8f6f 	isb	sy
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	623b      	str	r3, [r7, #32]
}
 800c4b4:	bf00      	nop
 800c4b6:	e7fe      	b.n	800c4b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d103      	bne.n	800c4c6 <xQueueReceive+0x3e>
 800c4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d101      	bne.n	800c4ca <xQueueReceive+0x42>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e000      	b.n	800c4cc <xQueueReceive+0x44>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10a      	bne.n	800c4e6 <xQueueReceive+0x5e>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	61fb      	str	r3, [r7, #28]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4e6:	f001 f83b 	bl	800d560 <xTaskGetSchedulerState>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d102      	bne.n	800c4f6 <xQueueReceive+0x6e>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <xQueueReceive+0x72>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <xQueueReceive+0x74>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10a      	bne.n	800c516 <xQueueReceive+0x8e>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	61bb      	str	r3, [r7, #24]
}
 800c512:	bf00      	nop
 800c514:	e7fe      	b.n	800c514 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c516:	f001 fd7d 	bl	800e014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	2b00      	cmp	r3, #0
 800c524:	d01f      	beq.n	800c566 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c526:	68b9      	ldr	r1, [r7, #8]
 800c528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c52a:	f000 f8f7 	bl	800c71c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	1e5a      	subs	r2, r3, #1
 800c532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c534:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00f      	beq.n	800c55e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c540:	3310      	adds	r3, #16
 800c542:	4618      	mov	r0, r3
 800c544:	f000 fe4e 	bl	800d1e4 <xTaskRemoveFromEventList>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d007      	beq.n	800c55e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c54e:	4b3d      	ldr	r3, [pc, #244]	; (800c644 <xQueueReceive+0x1bc>)
 800c550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c554:	601a      	str	r2, [r3, #0]
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c55e:	f001 fd89 	bl	800e074 <vPortExitCritical>
				return pdPASS;
 800c562:	2301      	movs	r3, #1
 800c564:	e069      	b.n	800c63a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d103      	bne.n	800c574 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c56c:	f001 fd82 	bl	800e074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c570:	2300      	movs	r3, #0
 800c572:	e062      	b.n	800c63a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c576:	2b00      	cmp	r3, #0
 800c578:	d106      	bne.n	800c588 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c57a:	f107 0310 	add.w	r3, r7, #16
 800c57e:	4618      	mov	r0, r3
 800c580:	f000 fe94 	bl	800d2ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c584:	2301      	movs	r3, #1
 800c586:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c588:	f001 fd74 	bl	800e074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c58c:	f000 fc06 	bl	800cd9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c590:	f001 fd40 	bl	800e014 <vPortEnterCritical>
 800c594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c59a:	b25b      	sxtb	r3, r3
 800c59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a0:	d103      	bne.n	800c5aa <xQueueReceive+0x122>
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5b0:	b25b      	sxtb	r3, r3
 800c5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b6:	d103      	bne.n	800c5c0 <xQueueReceive+0x138>
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5c0:	f001 fd58 	bl	800e074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5c4:	1d3a      	adds	r2, r7, #4
 800c5c6:	f107 0310 	add.w	r3, r7, #16
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 fe83 	bl	800d2d8 <xTaskCheckForTimeOut>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d123      	bne.n	800c620 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5da:	f000 f917 	bl	800c80c <prvIsQueueEmpty>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d017      	beq.n	800c614 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	3324      	adds	r3, #36	; 0x24
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f000 fda9 	bl	800d144 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c5f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5f4:	f000 f8b8 	bl	800c768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c5f8:	f000 fbde 	bl	800cdb8 <xTaskResumeAll>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d189      	bne.n	800c516 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c602:	4b10      	ldr	r3, [pc, #64]	; (800c644 <xQueueReceive+0x1bc>)
 800c604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c608:	601a      	str	r2, [r3, #0]
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	e780      	b.n	800c516 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c616:	f000 f8a7 	bl	800c768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c61a:	f000 fbcd 	bl	800cdb8 <xTaskResumeAll>
 800c61e:	e77a      	b.n	800c516 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c622:	f000 f8a1 	bl	800c768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c626:	f000 fbc7 	bl	800cdb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c62a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c62c:	f000 f8ee 	bl	800c80c <prvIsQueueEmpty>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	f43f af6f 	beq.w	800c516 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3730      	adds	r7, #48	; 0x30
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	e000ed04 	.word	0xe000ed04

0800c648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c654:	2300      	movs	r3, #0
 800c656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10d      	bne.n	800c682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d14d      	bne.n	800c70a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	689b      	ldr	r3, [r3, #8]
 800c672:	4618      	mov	r0, r3
 800c674:	f000 ff92 	bl	800d59c <xTaskPriorityDisinherit>
 800c678:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	609a      	str	r2, [r3, #8]
 800c680:	e043      	b.n	800c70a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d119      	bne.n	800c6bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6858      	ldr	r0, [r3, #4]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c690:	461a      	mov	r2, r3
 800c692:	68b9      	ldr	r1, [r7, #8]
 800c694:	f003 faef 	bl	800fc76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a0:	441a      	add	r2, r3
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	685a      	ldr	r2, [r3, #4]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d32b      	bcc.n	800c70a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	605a      	str	r2, [r3, #4]
 800c6ba:	e026      	b.n	800c70a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	68d8      	ldr	r0, [r3, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	68b9      	ldr	r1, [r7, #8]
 800c6c8:	f003 fad5 	bl	800fc76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	68da      	ldr	r2, [r3, #12]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d4:	425b      	negs	r3, r3
 800c6d6:	441a      	add	r2, r3
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	68da      	ldr	r2, [r3, #12]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d207      	bcs.n	800c6f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	689a      	ldr	r2, [r3, #8]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f0:	425b      	negs	r3, r3
 800c6f2:	441a      	add	r2, r3
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d105      	bne.n	800c70a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	3b01      	subs	r3, #1
 800c708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	1c5a      	adds	r2, r3, #1
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c712:	697b      	ldr	r3, [r7, #20]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3718      	adds	r7, #24
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d018      	beq.n	800c760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	68da      	ldr	r2, [r3, #12]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c736:	441a      	add	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	68da      	ldr	r2, [r3, #12]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	429a      	cmp	r2, r3
 800c746:	d303      	bcc.n	800c750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68d9      	ldr	r1, [r3, #12]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c758:	461a      	mov	r2, r3
 800c75a:	6838      	ldr	r0, [r7, #0]
 800c75c:	f003 fa8b 	bl	800fc76 <memcpy>
	}
}
 800c760:	bf00      	nop
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c770:	f001 fc50 	bl	800e014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c77a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c77c:	e011      	b.n	800c7a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c782:	2b00      	cmp	r3, #0
 800c784:	d012      	beq.n	800c7ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	3324      	adds	r3, #36	; 0x24
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 fd2a 	bl	800d1e4 <xTaskRemoveFromEventList>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d001      	beq.n	800c79a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c796:	f000 fe01 	bl	800d39c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c79a:	7bfb      	ldrb	r3, [r7, #15]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	dce9      	bgt.n	800c77e <prvUnlockQueue+0x16>
 800c7aa:	e000      	b.n	800c7ae <prvUnlockQueue+0x46>
					break;
 800c7ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	22ff      	movs	r2, #255	; 0xff
 800c7b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c7b6:	f001 fc5d 	bl	800e074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c7ba:	f001 fc2b 	bl	800e014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7c6:	e011      	b.n	800c7ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	691b      	ldr	r3, [r3, #16]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d012      	beq.n	800c7f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	3310      	adds	r3, #16
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f000 fd05 	bl	800d1e4 <xTaskRemoveFromEventList>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c7e0:	f000 fddc 	bl	800d39c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c7e4:	7bbb      	ldrb	r3, [r7, #14]
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	dce9      	bgt.n	800c7c8 <prvUnlockQueue+0x60>
 800c7f4:	e000      	b.n	800c7f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c7f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	22ff      	movs	r2, #255	; 0xff
 800c7fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c800:	f001 fc38 	bl	800e074 <vPortExitCritical>
}
 800c804:	bf00      	nop
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c814:	f001 fbfe 	bl	800e014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d102      	bne.n	800c826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c820:	2301      	movs	r3, #1
 800c822:	60fb      	str	r3, [r7, #12]
 800c824:	e001      	b.n	800c82a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c826:	2300      	movs	r3, #0
 800c828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c82a:	f001 fc23 	bl	800e074 <vPortExitCritical>

	return xReturn;
 800c82e:	68fb      	ldr	r3, [r7, #12]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c840:	f001 fbe8 	bl	800e014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d102      	bne.n	800c856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c850:	2301      	movs	r3, #1
 800c852:	60fb      	str	r3, [r7, #12]
 800c854:	e001      	b.n	800c85a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c856:	2300      	movs	r3, #0
 800c858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c85a:	f001 fc0b 	bl	800e074 <vPortExitCritical>

	return xReturn;
 800c85e:	68fb      	ldr	r3, [r7, #12]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c872:	2300      	movs	r3, #0
 800c874:	60fb      	str	r3, [r7, #12]
 800c876:	e014      	b.n	800c8a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c878:	4a0f      	ldr	r2, [pc, #60]	; (800c8b8 <vQueueAddToRegistry+0x50>)
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10b      	bne.n	800c89c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c884:	490c      	ldr	r1, [pc, #48]	; (800c8b8 <vQueueAddToRegistry+0x50>)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	683a      	ldr	r2, [r7, #0]
 800c88a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c88e:	4a0a      	ldr	r2, [pc, #40]	; (800c8b8 <vQueueAddToRegistry+0x50>)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	4413      	add	r3, r2
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c89a:	e006      	b.n	800c8aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2b07      	cmp	r3, #7
 800c8a6:	d9e7      	bls.n	800c878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c8a8:	bf00      	nop
 800c8aa:	bf00      	nop
 800c8ac:	3714      	adds	r7, #20
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	20000d90 	.word	0x20000d90

0800c8bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c8cc:	f001 fba2 	bl	800e014 <vPortEnterCritical>
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8d6:	b25b      	sxtb	r3, r3
 800c8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8dc:	d103      	bne.n	800c8e6 <vQueueWaitForMessageRestricted+0x2a>
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8ec:	b25b      	sxtb	r3, r3
 800c8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f2:	d103      	bne.n	800c8fc <vQueueWaitForMessageRestricted+0x40>
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8fc:	f001 fbba 	bl	800e074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c904:	2b00      	cmp	r3, #0
 800c906:	d106      	bne.n	800c916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	3324      	adds	r3, #36	; 0x24
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	68b9      	ldr	r1, [r7, #8]
 800c910:	4618      	mov	r0, r3
 800c912:	f000 fc3b 	bl	800d18c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c916:	6978      	ldr	r0, [r7, #20]
 800c918:	f7ff ff26 	bl	800c768 <prvUnlockQueue>
	}
 800c91c:	bf00      	nop
 800c91e:	3718      	adds	r7, #24
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c924:	b580      	push	{r7, lr}
 800c926:	b08e      	sub	sp, #56	; 0x38
 800c928:	af04      	add	r7, sp, #16
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10a      	bne.n	800c94e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93c:	f383 8811 	msr	BASEPRI, r3
 800c940:	f3bf 8f6f 	isb	sy
 800c944:	f3bf 8f4f 	dsb	sy
 800c948:	623b      	str	r3, [r7, #32]
}
 800c94a:	bf00      	nop
 800c94c:	e7fe      	b.n	800c94c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10a      	bne.n	800c96a <xTaskCreateStatic+0x46>
	__asm volatile
 800c954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	61fb      	str	r3, [r7, #28]
}
 800c966:	bf00      	nop
 800c968:	e7fe      	b.n	800c968 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c96a:	235c      	movs	r3, #92	; 0x5c
 800c96c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	2b5c      	cmp	r3, #92	; 0x5c
 800c972:	d00a      	beq.n	800c98a <xTaskCreateStatic+0x66>
	__asm volatile
 800c974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c978:	f383 8811 	msr	BASEPRI, r3
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	61bb      	str	r3, [r7, #24]
}
 800c986:	bf00      	nop
 800c988:	e7fe      	b.n	800c988 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c98a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d01e      	beq.n	800c9d0 <xTaskCreateStatic+0xac>
 800c992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c994:	2b00      	cmp	r3, #0
 800c996:	d01b      	beq.n	800c9d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a4:	2202      	movs	r2, #2
 800c9a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	9303      	str	r3, [sp, #12]
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	9302      	str	r3, [sp, #8]
 800c9b2:	f107 0314 	add.w	r3, r7, #20
 800c9b6:	9301      	str	r3, [sp, #4]
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	68b9      	ldr	r1, [r7, #8]
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 f850 	bl	800ca68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9ca:	f000 f8dd 	bl	800cb88 <prvAddNewTaskToReadyList>
 800c9ce:	e001      	b.n	800c9d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c9d4:	697b      	ldr	r3, [r7, #20]
	}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3728      	adds	r7, #40	; 0x28
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b08c      	sub	sp, #48	; 0x30
 800c9e2:	af04      	add	r7, sp, #16
 800c9e4:	60f8      	str	r0, [r7, #12]
 800c9e6:	60b9      	str	r1, [r7, #8]
 800c9e8:	603b      	str	r3, [r7, #0]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c9ee:	88fb      	ldrh	r3, [r7, #6]
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f001 fc30 	bl	800e258 <pvPortMalloc>
 800c9f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00e      	beq.n	800ca1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca00:	205c      	movs	r0, #92	; 0x5c
 800ca02:	f001 fc29 	bl	800e258 <pvPortMalloc>
 800ca06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d003      	beq.n	800ca16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	697a      	ldr	r2, [r7, #20]
 800ca12:	631a      	str	r2, [r3, #48]	; 0x30
 800ca14:	e005      	b.n	800ca22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca16:	6978      	ldr	r0, [r7, #20]
 800ca18:	f001 fcea 	bl	800e3f0 <vPortFree>
 800ca1c:	e001      	b.n	800ca22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca22:	69fb      	ldr	r3, [r7, #28]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d017      	beq.n	800ca58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca30:	88fa      	ldrh	r2, [r7, #6]
 800ca32:	2300      	movs	r3, #0
 800ca34:	9303      	str	r3, [sp, #12]
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	9302      	str	r3, [sp, #8]
 800ca3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3c:	9301      	str	r3, [sp, #4]
 800ca3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	68b9      	ldr	r1, [r7, #8]
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f000 f80e 	bl	800ca68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca4c:	69f8      	ldr	r0, [r7, #28]
 800ca4e:	f000 f89b 	bl	800cb88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca52:	2301      	movs	r3, #1
 800ca54:	61bb      	str	r3, [r7, #24]
 800ca56:	e002      	b.n	800ca5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca58:	f04f 33ff 	mov.w	r3, #4294967295
 800ca5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca5e:	69bb      	ldr	r3, [r7, #24]
	}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3720      	adds	r7, #32
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b088      	sub	sp, #32
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
 800ca74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	461a      	mov	r2, r3
 800ca80:	21a5      	movs	r1, #165	; 0xa5
 800ca82:	f003 f878 	bl	800fb76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ca90:	3b01      	subs	r3, #1
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	4413      	add	r3, r2
 800ca96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	f023 0307 	bic.w	r3, r3, #7
 800ca9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00a      	beq.n	800cac0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	f383 8811 	msr	BASEPRI, r3
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	617b      	str	r3, [r7, #20]
}
 800cabc:	bf00      	nop
 800cabe:	e7fe      	b.n	800cabe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d01f      	beq.n	800cb06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cac6:	2300      	movs	r3, #0
 800cac8:	61fb      	str	r3, [r7, #28]
 800caca:	e012      	b.n	800caf2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	4413      	add	r3, r2
 800cad2:	7819      	ldrb	r1, [r3, #0]
 800cad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	4413      	add	r3, r2
 800cada:	3334      	adds	r3, #52	; 0x34
 800cadc:	460a      	mov	r2, r1
 800cade:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	4413      	add	r3, r2
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d006      	beq.n	800cafa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	3301      	adds	r3, #1
 800caf0:	61fb      	str	r3, [r7, #28]
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	2b0f      	cmp	r3, #15
 800caf6:	d9e9      	bls.n	800cacc <prvInitialiseNewTask+0x64>
 800caf8:	e000      	b.n	800cafc <prvInitialiseNewTask+0x94>
			{
				break;
 800cafa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb04:	e003      	b.n	800cb0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb10:	2b37      	cmp	r3, #55	; 0x37
 800cb12:	d901      	bls.n	800cb18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb14:	2337      	movs	r3, #55	; 0x37
 800cb16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb26:	2200      	movs	r2, #0
 800cb28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	3304      	adds	r3, #4
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7ff f978 	bl	800be24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb36:	3318      	adds	r3, #24
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7ff f973 	bl	800be24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb56:	2200      	movs	r2, #0
 800cb58:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb62:	683a      	ldr	r2, [r7, #0]
 800cb64:	68f9      	ldr	r1, [r7, #12]
 800cb66:	69b8      	ldr	r0, [r7, #24]
 800cb68:	f001 f928 	bl	800ddbc <pxPortInitialiseStack>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d002      	beq.n	800cb7e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb7e:	bf00      	nop
 800cb80:	3720      	adds	r7, #32
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
	...

0800cb88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cb90:	f001 fa40 	bl	800e014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb94:	4b2d      	ldr	r3, [pc, #180]	; (800cc4c <prvAddNewTaskToReadyList+0xc4>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	4a2c      	ldr	r2, [pc, #176]	; (800cc4c <prvAddNewTaskToReadyList+0xc4>)
 800cb9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb9e:	4b2c      	ldr	r3, [pc, #176]	; (800cc50 <prvAddNewTaskToReadyList+0xc8>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d109      	bne.n	800cbba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cba6:	4a2a      	ldr	r2, [pc, #168]	; (800cc50 <prvAddNewTaskToReadyList+0xc8>)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cbac:	4b27      	ldr	r3, [pc, #156]	; (800cc4c <prvAddNewTaskToReadyList+0xc4>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d110      	bne.n	800cbd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cbb4:	f000 fc16 	bl	800d3e4 <prvInitialiseTaskLists>
 800cbb8:	e00d      	b.n	800cbd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cbba:	4b26      	ldr	r3, [pc, #152]	; (800cc54 <prvAddNewTaskToReadyList+0xcc>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d109      	bne.n	800cbd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cbc2:	4b23      	ldr	r3, [pc, #140]	; (800cc50 <prvAddNewTaskToReadyList+0xc8>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d802      	bhi.n	800cbd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cbd0:	4a1f      	ldr	r2, [pc, #124]	; (800cc50 <prvAddNewTaskToReadyList+0xc8>)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cbd6:	4b20      	ldr	r3, [pc, #128]	; (800cc58 <prvAddNewTaskToReadyList+0xd0>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	4a1e      	ldr	r2, [pc, #120]	; (800cc58 <prvAddNewTaskToReadyList+0xd0>)
 800cbde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cbe0:	4b1d      	ldr	r3, [pc, #116]	; (800cc58 <prvAddNewTaskToReadyList+0xd0>)
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbec:	4b1b      	ldr	r3, [pc, #108]	; (800cc5c <prvAddNewTaskToReadyList+0xd4>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d903      	bls.n	800cbfc <prvAddNewTaskToReadyList+0x74>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf8:	4a18      	ldr	r2, [pc, #96]	; (800cc5c <prvAddNewTaskToReadyList+0xd4>)
 800cbfa:	6013      	str	r3, [r2, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc00:	4613      	mov	r3, r2
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	4413      	add	r3, r2
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	4a15      	ldr	r2, [pc, #84]	; (800cc60 <prvAddNewTaskToReadyList+0xd8>)
 800cc0a:	441a      	add	r2, r3
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	3304      	adds	r3, #4
 800cc10:	4619      	mov	r1, r3
 800cc12:	4610      	mov	r0, r2
 800cc14:	f7ff f913 	bl	800be3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc18:	f001 fa2c 	bl	800e074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc1c:	4b0d      	ldr	r3, [pc, #52]	; (800cc54 <prvAddNewTaskToReadyList+0xcc>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00e      	beq.n	800cc42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc24:	4b0a      	ldr	r3, [pc, #40]	; (800cc50 <prvAddNewTaskToReadyList+0xc8>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d207      	bcs.n	800cc42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc32:	4b0c      	ldr	r3, [pc, #48]	; (800cc64 <prvAddNewTaskToReadyList+0xdc>)
 800cc34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc38:	601a      	str	r2, [r3, #0]
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc42:	bf00      	nop
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	200012a4 	.word	0x200012a4
 800cc50:	20000dd0 	.word	0x20000dd0
 800cc54:	200012b0 	.word	0x200012b0
 800cc58:	200012c0 	.word	0x200012c0
 800cc5c:	200012ac 	.word	0x200012ac
 800cc60:	20000dd4 	.word	0x20000dd4
 800cc64:	e000ed04 	.word	0xe000ed04

0800cc68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc70:	2300      	movs	r3, #0
 800cc72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d017      	beq.n	800ccaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cc7a:	4b13      	ldr	r3, [pc, #76]	; (800ccc8 <vTaskDelay+0x60>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00a      	beq.n	800cc98 <vTaskDelay+0x30>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	60bb      	str	r3, [r7, #8]
}
 800cc94:	bf00      	nop
 800cc96:	e7fe      	b.n	800cc96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc98:	f000 f880 	bl	800cd9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fcea 	bl	800d678 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cca4:	f000 f888 	bl	800cdb8 <xTaskResumeAll>
 800cca8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d107      	bne.n	800ccc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ccb0:	4b06      	ldr	r3, [pc, #24]	; (800cccc <vTaskDelay+0x64>)
 800ccb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccb6:	601a      	str	r2, [r3, #0]
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ccc0:	bf00      	nop
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	200012cc 	.word	0x200012cc
 800cccc:	e000ed04 	.word	0xe000ed04

0800ccd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08a      	sub	sp, #40	; 0x28
 800ccd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ccde:	463a      	mov	r2, r7
 800cce0:	1d39      	adds	r1, r7, #4
 800cce2:	f107 0308 	add.w	r3, r7, #8
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7ff f848 	bl	800bd7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ccec:	6839      	ldr	r1, [r7, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	9202      	str	r2, [sp, #8]
 800ccf4:	9301      	str	r3, [sp, #4]
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	460a      	mov	r2, r1
 800ccfe:	4921      	ldr	r1, [pc, #132]	; (800cd84 <vTaskStartScheduler+0xb4>)
 800cd00:	4821      	ldr	r0, [pc, #132]	; (800cd88 <vTaskStartScheduler+0xb8>)
 800cd02:	f7ff fe0f 	bl	800c924 <xTaskCreateStatic>
 800cd06:	4603      	mov	r3, r0
 800cd08:	4a20      	ldr	r2, [pc, #128]	; (800cd8c <vTaskStartScheduler+0xbc>)
 800cd0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd0c:	4b1f      	ldr	r3, [pc, #124]	; (800cd8c <vTaskStartScheduler+0xbc>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d002      	beq.n	800cd1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd14:	2301      	movs	r3, #1
 800cd16:	617b      	str	r3, [r7, #20]
 800cd18:	e001      	b.n	800cd1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d102      	bne.n	800cd2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cd24:	f000 fcfc 	bl	800d720 <xTimerCreateTimerTask>
 800cd28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d116      	bne.n	800cd5e <vTaskStartScheduler+0x8e>
	__asm volatile
 800cd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd34:	f383 8811 	msr	BASEPRI, r3
 800cd38:	f3bf 8f6f 	isb	sy
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	613b      	str	r3, [r7, #16]
}
 800cd42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cd44:	4b12      	ldr	r3, [pc, #72]	; (800cd90 <vTaskStartScheduler+0xc0>)
 800cd46:	f04f 32ff 	mov.w	r2, #4294967295
 800cd4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd4c:	4b11      	ldr	r3, [pc, #68]	; (800cd94 <vTaskStartScheduler+0xc4>)
 800cd4e:	2201      	movs	r2, #1
 800cd50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd52:	4b11      	ldr	r3, [pc, #68]	; (800cd98 <vTaskStartScheduler+0xc8>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd58:	f001 f8ba 	bl	800ded0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd5c:	e00e      	b.n	800cd7c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd64:	d10a      	bne.n	800cd7c <vTaskStartScheduler+0xac>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	60fb      	str	r3, [r7, #12]
}
 800cd78:	bf00      	nop
 800cd7a:	e7fe      	b.n	800cd7a <vTaskStartScheduler+0xaa>
}
 800cd7c:	bf00      	nop
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	08011db0 	.word	0x08011db0
 800cd88:	0800d3b5 	.word	0x0800d3b5
 800cd8c:	200012c8 	.word	0x200012c8
 800cd90:	200012c4 	.word	0x200012c4
 800cd94:	200012b0 	.word	0x200012b0
 800cd98:	200012a8 	.word	0x200012a8

0800cd9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cda0:	4b04      	ldr	r3, [pc, #16]	; (800cdb4 <vTaskSuspendAll+0x18>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3301      	adds	r3, #1
 800cda6:	4a03      	ldr	r2, [pc, #12]	; (800cdb4 <vTaskSuspendAll+0x18>)
 800cda8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cdaa:	bf00      	nop
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr
 800cdb4:	200012cc 	.word	0x200012cc

0800cdb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cdc6:	4b42      	ldr	r3, [pc, #264]	; (800ced0 <xTaskResumeAll+0x118>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10a      	bne.n	800cde4 <xTaskResumeAll+0x2c>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	603b      	str	r3, [r7, #0]
}
 800cde0:	bf00      	nop
 800cde2:	e7fe      	b.n	800cde2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cde4:	f001 f916 	bl	800e014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cde8:	4b39      	ldr	r3, [pc, #228]	; (800ced0 <xTaskResumeAll+0x118>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3b01      	subs	r3, #1
 800cdee:	4a38      	ldr	r2, [pc, #224]	; (800ced0 <xTaskResumeAll+0x118>)
 800cdf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdf2:	4b37      	ldr	r3, [pc, #220]	; (800ced0 <xTaskResumeAll+0x118>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d162      	bne.n	800cec0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cdfa:	4b36      	ldr	r3, [pc, #216]	; (800ced4 <xTaskResumeAll+0x11c>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d05e      	beq.n	800cec0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce02:	e02f      	b.n	800ce64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce04:	4b34      	ldr	r3, [pc, #208]	; (800ced8 <xTaskResumeAll+0x120>)
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	3318      	adds	r3, #24
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7ff f871 	bl	800bef8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	3304      	adds	r3, #4
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff f86c 	bl	800bef8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce24:	4b2d      	ldr	r3, [pc, #180]	; (800cedc <xTaskResumeAll+0x124>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d903      	bls.n	800ce34 <xTaskResumeAll+0x7c>
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce30:	4a2a      	ldr	r2, [pc, #168]	; (800cedc <xTaskResumeAll+0x124>)
 800ce32:	6013      	str	r3, [r2, #0]
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce38:	4613      	mov	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	4413      	add	r3, r2
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4a27      	ldr	r2, [pc, #156]	; (800cee0 <xTaskResumeAll+0x128>)
 800ce42:	441a      	add	r2, r3
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	3304      	adds	r3, #4
 800ce48:	4619      	mov	r1, r3
 800ce4a:	4610      	mov	r0, r2
 800ce4c:	f7fe fff7 	bl	800be3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce54:	4b23      	ldr	r3, [pc, #140]	; (800cee4 <xTaskResumeAll+0x12c>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d302      	bcc.n	800ce64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ce5e:	4b22      	ldr	r3, [pc, #136]	; (800cee8 <xTaskResumeAll+0x130>)
 800ce60:	2201      	movs	r2, #1
 800ce62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce64:	4b1c      	ldr	r3, [pc, #112]	; (800ced8 <xTaskResumeAll+0x120>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1cb      	bne.n	800ce04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d001      	beq.n	800ce76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce72:	f000 fb55 	bl	800d520 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce76:	4b1d      	ldr	r3, [pc, #116]	; (800ceec <xTaskResumeAll+0x134>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d010      	beq.n	800cea4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce82:	f000 f847 	bl	800cf14 <xTaskIncrementTick>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d002      	beq.n	800ce92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ce8c:	4b16      	ldr	r3, [pc, #88]	; (800cee8 <xTaskResumeAll+0x130>)
 800ce8e:	2201      	movs	r2, #1
 800ce90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3b01      	subs	r3, #1
 800ce96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1f1      	bne.n	800ce82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ce9e:	4b13      	ldr	r3, [pc, #76]	; (800ceec <xTaskResumeAll+0x134>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cea4:	4b10      	ldr	r3, [pc, #64]	; (800cee8 <xTaskResumeAll+0x130>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d009      	beq.n	800cec0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ceac:	2301      	movs	r3, #1
 800ceae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ceb0:	4b0f      	ldr	r3, [pc, #60]	; (800cef0 <xTaskResumeAll+0x138>)
 800ceb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cec0:	f001 f8d8 	bl	800e074 <vPortExitCritical>

	return xAlreadyYielded;
 800cec4:	68bb      	ldr	r3, [r7, #8]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	200012cc 	.word	0x200012cc
 800ced4:	200012a4 	.word	0x200012a4
 800ced8:	20001264 	.word	0x20001264
 800cedc:	200012ac 	.word	0x200012ac
 800cee0:	20000dd4 	.word	0x20000dd4
 800cee4:	20000dd0 	.word	0x20000dd0
 800cee8:	200012b8 	.word	0x200012b8
 800ceec:	200012b4 	.word	0x200012b4
 800cef0:	e000ed04 	.word	0xe000ed04

0800cef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cefa:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <xTaskGetTickCount+0x1c>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf00:	687b      	ldr	r3, [r7, #4]
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	370c      	adds	r7, #12
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	200012a8 	.word	0x200012a8

0800cf14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b086      	sub	sp, #24
 800cf18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf1e:	4b4f      	ldr	r3, [pc, #316]	; (800d05c <xTaskIncrementTick+0x148>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	f040 808f 	bne.w	800d046 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf28:	4b4d      	ldr	r3, [pc, #308]	; (800d060 <xTaskIncrementTick+0x14c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf30:	4a4b      	ldr	r2, [pc, #300]	; (800d060 <xTaskIncrementTick+0x14c>)
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d120      	bne.n	800cf7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cf3c:	4b49      	ldr	r3, [pc, #292]	; (800d064 <xTaskIncrementTick+0x150>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00a      	beq.n	800cf5c <xTaskIncrementTick+0x48>
	__asm volatile
 800cf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	603b      	str	r3, [r7, #0]
}
 800cf58:	bf00      	nop
 800cf5a:	e7fe      	b.n	800cf5a <xTaskIncrementTick+0x46>
 800cf5c:	4b41      	ldr	r3, [pc, #260]	; (800d064 <xTaskIncrementTick+0x150>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	60fb      	str	r3, [r7, #12]
 800cf62:	4b41      	ldr	r3, [pc, #260]	; (800d068 <xTaskIncrementTick+0x154>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a3f      	ldr	r2, [pc, #252]	; (800d064 <xTaskIncrementTick+0x150>)
 800cf68:	6013      	str	r3, [r2, #0]
 800cf6a:	4a3f      	ldr	r2, [pc, #252]	; (800d068 <xTaskIncrementTick+0x154>)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6013      	str	r3, [r2, #0]
 800cf70:	4b3e      	ldr	r3, [pc, #248]	; (800d06c <xTaskIncrementTick+0x158>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	3301      	adds	r3, #1
 800cf76:	4a3d      	ldr	r2, [pc, #244]	; (800d06c <xTaskIncrementTick+0x158>)
 800cf78:	6013      	str	r3, [r2, #0]
 800cf7a:	f000 fad1 	bl	800d520 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf7e:	4b3c      	ldr	r3, [pc, #240]	; (800d070 <xTaskIncrementTick+0x15c>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d349      	bcc.n	800d01c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf88:	4b36      	ldr	r3, [pc, #216]	; (800d064 <xTaskIncrementTick+0x150>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d104      	bne.n	800cf9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf92:	4b37      	ldr	r3, [pc, #220]	; (800d070 <xTaskIncrementTick+0x15c>)
 800cf94:	f04f 32ff 	mov.w	r2, #4294967295
 800cf98:	601a      	str	r2, [r3, #0]
					break;
 800cf9a:	e03f      	b.n	800d01c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf9c:	4b31      	ldr	r3, [pc, #196]	; (800d064 <xTaskIncrementTick+0x150>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cfac:	693a      	ldr	r2, [r7, #16]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d203      	bcs.n	800cfbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cfb4:	4a2e      	ldr	r2, [pc, #184]	; (800d070 <xTaskIncrementTick+0x15c>)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cfba:	e02f      	b.n	800d01c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe ff99 	bl	800bef8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d004      	beq.n	800cfd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	3318      	adds	r3, #24
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe ff90 	bl	800bef8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfdc:	4b25      	ldr	r3, [pc, #148]	; (800d074 <xTaskIncrementTick+0x160>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d903      	bls.n	800cfec <xTaskIncrementTick+0xd8>
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe8:	4a22      	ldr	r2, [pc, #136]	; (800d074 <xTaskIncrementTick+0x160>)
 800cfea:	6013      	str	r3, [r2, #0]
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff0:	4613      	mov	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4a1f      	ldr	r2, [pc, #124]	; (800d078 <xTaskIncrementTick+0x164>)
 800cffa:	441a      	add	r2, r3
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	3304      	adds	r3, #4
 800d000:	4619      	mov	r1, r3
 800d002:	4610      	mov	r0, r2
 800d004:	f7fe ff1b 	bl	800be3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d00c:	4b1b      	ldr	r3, [pc, #108]	; (800d07c <xTaskIncrementTick+0x168>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d012:	429a      	cmp	r2, r3
 800d014:	d3b8      	bcc.n	800cf88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d016:	2301      	movs	r3, #1
 800d018:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d01a:	e7b5      	b.n	800cf88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d01c:	4b17      	ldr	r3, [pc, #92]	; (800d07c <xTaskIncrementTick+0x168>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d022:	4915      	ldr	r1, [pc, #84]	; (800d078 <xTaskIncrementTick+0x164>)
 800d024:	4613      	mov	r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	440b      	add	r3, r1
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b01      	cmp	r3, #1
 800d032:	d901      	bls.n	800d038 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d034:	2301      	movs	r3, #1
 800d036:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d038:	4b11      	ldr	r3, [pc, #68]	; (800d080 <xTaskIncrementTick+0x16c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d007      	beq.n	800d050 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d040:	2301      	movs	r3, #1
 800d042:	617b      	str	r3, [r7, #20]
 800d044:	e004      	b.n	800d050 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d046:	4b0f      	ldr	r3, [pc, #60]	; (800d084 <xTaskIncrementTick+0x170>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3301      	adds	r3, #1
 800d04c:	4a0d      	ldr	r2, [pc, #52]	; (800d084 <xTaskIncrementTick+0x170>)
 800d04e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d050:	697b      	ldr	r3, [r7, #20]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3718      	adds	r7, #24
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	200012cc 	.word	0x200012cc
 800d060:	200012a8 	.word	0x200012a8
 800d064:	2000125c 	.word	0x2000125c
 800d068:	20001260 	.word	0x20001260
 800d06c:	200012bc 	.word	0x200012bc
 800d070:	200012c4 	.word	0x200012c4
 800d074:	200012ac 	.word	0x200012ac
 800d078:	20000dd4 	.word	0x20000dd4
 800d07c:	20000dd0 	.word	0x20000dd0
 800d080:	200012b8 	.word	0x200012b8
 800d084:	200012b4 	.word	0x200012b4

0800d088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d08e:	4b28      	ldr	r3, [pc, #160]	; (800d130 <vTaskSwitchContext+0xa8>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d003      	beq.n	800d09e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d096:	4b27      	ldr	r3, [pc, #156]	; (800d134 <vTaskSwitchContext+0xac>)
 800d098:	2201      	movs	r2, #1
 800d09a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d09c:	e041      	b.n	800d122 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d09e:	4b25      	ldr	r3, [pc, #148]	; (800d134 <vTaskSwitchContext+0xac>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0a4:	4b24      	ldr	r3, [pc, #144]	; (800d138 <vTaskSwitchContext+0xb0>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	60fb      	str	r3, [r7, #12]
 800d0aa:	e010      	b.n	800d0ce <vTaskSwitchContext+0x46>
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10a      	bne.n	800d0c8 <vTaskSwitchContext+0x40>
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b6:	f383 8811 	msr	BASEPRI, r3
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	f3bf 8f4f 	dsb	sy
 800d0c2:	607b      	str	r3, [r7, #4]
}
 800d0c4:	bf00      	nop
 800d0c6:	e7fe      	b.n	800d0c6 <vTaskSwitchContext+0x3e>
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	60fb      	str	r3, [r7, #12]
 800d0ce:	491b      	ldr	r1, [pc, #108]	; (800d13c <vTaskSwitchContext+0xb4>)
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	440b      	add	r3, r1
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d0e4      	beq.n	800d0ac <vTaskSwitchContext+0x24>
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4413      	add	r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	4a13      	ldr	r2, [pc, #76]	; (800d13c <vTaskSwitchContext+0xb4>)
 800d0ee:	4413      	add	r3, r2
 800d0f0:	60bb      	str	r3, [r7, #8]
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	605a      	str	r2, [r3, #4]
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	685a      	ldr	r2, [r3, #4]
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	3308      	adds	r3, #8
 800d104:	429a      	cmp	r2, r3
 800d106:	d104      	bne.n	800d112 <vTaskSwitchContext+0x8a>
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	685a      	ldr	r2, [r3, #4]
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	605a      	str	r2, [r3, #4]
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	4a09      	ldr	r2, [pc, #36]	; (800d140 <vTaskSwitchContext+0xb8>)
 800d11a:	6013      	str	r3, [r2, #0]
 800d11c:	4a06      	ldr	r2, [pc, #24]	; (800d138 <vTaskSwitchContext+0xb0>)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6013      	str	r3, [r2, #0]
}
 800d122:	bf00      	nop
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	200012cc 	.word	0x200012cc
 800d134:	200012b8 	.word	0x200012b8
 800d138:	200012ac 	.word	0x200012ac
 800d13c:	20000dd4 	.word	0x20000dd4
 800d140:	20000dd0 	.word	0x20000dd0

0800d144 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10a      	bne.n	800d16a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	60fb      	str	r3, [r7, #12]
}
 800d166:	bf00      	nop
 800d168:	e7fe      	b.n	800d168 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d16a:	4b07      	ldr	r3, [pc, #28]	; (800d188 <vTaskPlaceOnEventList+0x44>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	3318      	adds	r3, #24
 800d170:	4619      	mov	r1, r3
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f7fe fe87 	bl	800be86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d178:	2101      	movs	r1, #1
 800d17a:	6838      	ldr	r0, [r7, #0]
 800d17c:	f000 fa7c 	bl	800d678 <prvAddCurrentTaskToDelayedList>
}
 800d180:	bf00      	nop
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	20000dd0 	.word	0x20000dd0

0800d18c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b086      	sub	sp, #24
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d10a      	bne.n	800d1b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a2:	f383 8811 	msr	BASEPRI, r3
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	617b      	str	r3, [r7, #20]
}
 800d1b0:	bf00      	nop
 800d1b2:	e7fe      	b.n	800d1b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1b4:	4b0a      	ldr	r3, [pc, #40]	; (800d1e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	3318      	adds	r3, #24
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f7fe fe3e 	bl	800be3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d002      	beq.n	800d1ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d1ce:	6879      	ldr	r1, [r7, #4]
 800d1d0:	68b8      	ldr	r0, [r7, #8]
 800d1d2:	f000 fa51 	bl	800d678 <prvAddCurrentTaskToDelayedList>
	}
 800d1d6:	bf00      	nop
 800d1d8:	3718      	adds	r7, #24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	20000dd0 	.word	0x20000dd0

0800d1e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b086      	sub	sp, #24
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10a      	bne.n	800d210 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	60fb      	str	r3, [r7, #12]
}
 800d20c:	bf00      	nop
 800d20e:	e7fe      	b.n	800d20e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	3318      	adds	r3, #24
 800d214:	4618      	mov	r0, r3
 800d216:	f7fe fe6f 	bl	800bef8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d21a:	4b1e      	ldr	r3, [pc, #120]	; (800d294 <xTaskRemoveFromEventList+0xb0>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d11d      	bne.n	800d25e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	3304      	adds	r3, #4
 800d226:	4618      	mov	r0, r3
 800d228:	f7fe fe66 	bl	800bef8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d230:	4b19      	ldr	r3, [pc, #100]	; (800d298 <xTaskRemoveFromEventList+0xb4>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	429a      	cmp	r2, r3
 800d236:	d903      	bls.n	800d240 <xTaskRemoveFromEventList+0x5c>
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23c:	4a16      	ldr	r2, [pc, #88]	; (800d298 <xTaskRemoveFromEventList+0xb4>)
 800d23e:	6013      	str	r3, [r2, #0]
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d244:	4613      	mov	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	4413      	add	r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	4a13      	ldr	r2, [pc, #76]	; (800d29c <xTaskRemoveFromEventList+0xb8>)
 800d24e:	441a      	add	r2, r3
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	3304      	adds	r3, #4
 800d254:	4619      	mov	r1, r3
 800d256:	4610      	mov	r0, r2
 800d258:	f7fe fdf1 	bl	800be3e <vListInsertEnd>
 800d25c:	e005      	b.n	800d26a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	3318      	adds	r3, #24
 800d262:	4619      	mov	r1, r3
 800d264:	480e      	ldr	r0, [pc, #56]	; (800d2a0 <xTaskRemoveFromEventList+0xbc>)
 800d266:	f7fe fdea 	bl	800be3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26e:	4b0d      	ldr	r3, [pc, #52]	; (800d2a4 <xTaskRemoveFromEventList+0xc0>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d274:	429a      	cmp	r2, r3
 800d276:	d905      	bls.n	800d284 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d278:	2301      	movs	r3, #1
 800d27a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d27c:	4b0a      	ldr	r3, [pc, #40]	; (800d2a8 <xTaskRemoveFromEventList+0xc4>)
 800d27e:	2201      	movs	r2, #1
 800d280:	601a      	str	r2, [r3, #0]
 800d282:	e001      	b.n	800d288 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d284:	2300      	movs	r3, #0
 800d286:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d288:	697b      	ldr	r3, [r7, #20]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3718      	adds	r7, #24
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	200012cc 	.word	0x200012cc
 800d298:	200012ac 	.word	0x200012ac
 800d29c:	20000dd4 	.word	0x20000dd4
 800d2a0:	20001264 	.word	0x20001264
 800d2a4:	20000dd0 	.word	0x20000dd0
 800d2a8:	200012b8 	.word	0x200012b8

0800d2ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d2b4:	4b06      	ldr	r3, [pc, #24]	; (800d2d0 <vTaskInternalSetTimeOutState+0x24>)
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d2bc:	4b05      	ldr	r3, [pc, #20]	; (800d2d4 <vTaskInternalSetTimeOutState+0x28>)
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	605a      	str	r2, [r3, #4]
}
 800d2c4:	bf00      	nop
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	200012bc 	.word	0x200012bc
 800d2d4:	200012a8 	.word	0x200012a8

0800d2d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b088      	sub	sp, #32
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10a      	bne.n	800d2fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	613b      	str	r3, [r7, #16]
}
 800d2fa:	bf00      	nop
 800d2fc:	e7fe      	b.n	800d2fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10a      	bne.n	800d31a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	60fb      	str	r3, [r7, #12]
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d31a:	f000 fe7b 	bl	800e014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d31e:	4b1d      	ldr	r3, [pc, #116]	; (800d394 <xTaskCheckForTimeOut+0xbc>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	69ba      	ldr	r2, [r7, #24]
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d336:	d102      	bne.n	800d33e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d338:	2300      	movs	r3, #0
 800d33a:	61fb      	str	r3, [r7, #28]
 800d33c:	e023      	b.n	800d386 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	4b15      	ldr	r3, [pc, #84]	; (800d398 <xTaskCheckForTimeOut+0xc0>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	429a      	cmp	r2, r3
 800d348:	d007      	beq.n	800d35a <xTaskCheckForTimeOut+0x82>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	69ba      	ldr	r2, [r7, #24]
 800d350:	429a      	cmp	r2, r3
 800d352:	d302      	bcc.n	800d35a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d354:	2301      	movs	r3, #1
 800d356:	61fb      	str	r3, [r7, #28]
 800d358:	e015      	b.n	800d386 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	697a      	ldr	r2, [r7, #20]
 800d360:	429a      	cmp	r2, r3
 800d362:	d20b      	bcs.n	800d37c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	1ad2      	subs	r2, r2, r3
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7ff ff9b 	bl	800d2ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d376:	2300      	movs	r3, #0
 800d378:	61fb      	str	r3, [r7, #28]
 800d37a:	e004      	b.n	800d386 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d382:	2301      	movs	r3, #1
 800d384:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d386:	f000 fe75 	bl	800e074 <vPortExitCritical>

	return xReturn;
 800d38a:	69fb      	ldr	r3, [r7, #28]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3720      	adds	r7, #32
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	200012a8 	.word	0x200012a8
 800d398:	200012bc 	.word	0x200012bc

0800d39c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d39c:	b480      	push	{r7}
 800d39e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3a0:	4b03      	ldr	r3, [pc, #12]	; (800d3b0 <vTaskMissedYield+0x14>)
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	601a      	str	r2, [r3, #0]
}
 800d3a6:	bf00      	nop
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr
 800d3b0:	200012b8 	.word	0x200012b8

0800d3b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d3bc:	f000 f852 	bl	800d464 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3c0:	4b06      	ldr	r3, [pc, #24]	; (800d3dc <prvIdleTask+0x28>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d9f9      	bls.n	800d3bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800d3c8:	4b05      	ldr	r3, [pc, #20]	; (800d3e0 <prvIdleTask+0x2c>)
 800d3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ce:	601a      	str	r2, [r3, #0]
 800d3d0:	f3bf 8f4f 	dsb	sy
 800d3d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d3d8:	e7f0      	b.n	800d3bc <prvIdleTask+0x8>
 800d3da:	bf00      	nop
 800d3dc:	20000dd4 	.word	0x20000dd4
 800d3e0:	e000ed04 	.word	0xe000ed04

0800d3e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b082      	sub	sp, #8
 800d3e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	607b      	str	r3, [r7, #4]
 800d3ee:	e00c      	b.n	800d40a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4413      	add	r3, r2
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	4a12      	ldr	r2, [pc, #72]	; (800d444 <prvInitialiseTaskLists+0x60>)
 800d3fc:	4413      	add	r3, r2
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fe fcf0 	bl	800bde4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3301      	adds	r3, #1
 800d408:	607b      	str	r3, [r7, #4]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b37      	cmp	r3, #55	; 0x37
 800d40e:	d9ef      	bls.n	800d3f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d410:	480d      	ldr	r0, [pc, #52]	; (800d448 <prvInitialiseTaskLists+0x64>)
 800d412:	f7fe fce7 	bl	800bde4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d416:	480d      	ldr	r0, [pc, #52]	; (800d44c <prvInitialiseTaskLists+0x68>)
 800d418:	f7fe fce4 	bl	800bde4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d41c:	480c      	ldr	r0, [pc, #48]	; (800d450 <prvInitialiseTaskLists+0x6c>)
 800d41e:	f7fe fce1 	bl	800bde4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d422:	480c      	ldr	r0, [pc, #48]	; (800d454 <prvInitialiseTaskLists+0x70>)
 800d424:	f7fe fcde 	bl	800bde4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d428:	480b      	ldr	r0, [pc, #44]	; (800d458 <prvInitialiseTaskLists+0x74>)
 800d42a:	f7fe fcdb 	bl	800bde4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d42e:	4b0b      	ldr	r3, [pc, #44]	; (800d45c <prvInitialiseTaskLists+0x78>)
 800d430:	4a05      	ldr	r2, [pc, #20]	; (800d448 <prvInitialiseTaskLists+0x64>)
 800d432:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d434:	4b0a      	ldr	r3, [pc, #40]	; (800d460 <prvInitialiseTaskLists+0x7c>)
 800d436:	4a05      	ldr	r2, [pc, #20]	; (800d44c <prvInitialiseTaskLists+0x68>)
 800d438:	601a      	str	r2, [r3, #0]
}
 800d43a:	bf00      	nop
 800d43c:	3708      	adds	r7, #8
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	20000dd4 	.word	0x20000dd4
 800d448:	20001234 	.word	0x20001234
 800d44c:	20001248 	.word	0x20001248
 800d450:	20001264 	.word	0x20001264
 800d454:	20001278 	.word	0x20001278
 800d458:	20001290 	.word	0x20001290
 800d45c:	2000125c 	.word	0x2000125c
 800d460:	20001260 	.word	0x20001260

0800d464 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d46a:	e019      	b.n	800d4a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d46c:	f000 fdd2 	bl	800e014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d470:	4b10      	ldr	r3, [pc, #64]	; (800d4b4 <prvCheckTasksWaitingTermination+0x50>)
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	3304      	adds	r3, #4
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fe fd3b 	bl	800bef8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d482:	4b0d      	ldr	r3, [pc, #52]	; (800d4b8 <prvCheckTasksWaitingTermination+0x54>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3b01      	subs	r3, #1
 800d488:	4a0b      	ldr	r2, [pc, #44]	; (800d4b8 <prvCheckTasksWaitingTermination+0x54>)
 800d48a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d48c:	4b0b      	ldr	r3, [pc, #44]	; (800d4bc <prvCheckTasksWaitingTermination+0x58>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	3b01      	subs	r3, #1
 800d492:	4a0a      	ldr	r2, [pc, #40]	; (800d4bc <prvCheckTasksWaitingTermination+0x58>)
 800d494:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d496:	f000 fded 	bl	800e074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f810 	bl	800d4c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4a0:	4b06      	ldr	r3, [pc, #24]	; (800d4bc <prvCheckTasksWaitingTermination+0x58>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d1e1      	bne.n	800d46c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d4a8:	bf00      	nop
 800d4aa:	bf00      	nop
 800d4ac:	3708      	adds	r7, #8
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	20001278 	.word	0x20001278
 800d4b8:	200012a4 	.word	0x200012a4
 800d4bc:	2000128c 	.word	0x2000128c

0800d4c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d108      	bne.n	800d4e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f000 ff8a 	bl	800e3f0 <vPortFree>
				vPortFree( pxTCB );
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 ff87 	bl	800e3f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d4e2:	e018      	b.n	800d516 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d103      	bne.n	800d4f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 ff7e 	bl	800e3f0 <vPortFree>
	}
 800d4f4:	e00f      	b.n	800d516 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d4fc:	2b02      	cmp	r3, #2
 800d4fe:	d00a      	beq.n	800d516 <prvDeleteTCB+0x56>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	60fb      	str	r3, [r7, #12]
}
 800d512:	bf00      	nop
 800d514:	e7fe      	b.n	800d514 <prvDeleteTCB+0x54>
	}
 800d516:	bf00      	nop
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
	...

0800d520 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d526:	4b0c      	ldr	r3, [pc, #48]	; (800d558 <prvResetNextTaskUnblockTime+0x38>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d104      	bne.n	800d53a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d530:	4b0a      	ldr	r3, [pc, #40]	; (800d55c <prvResetNextTaskUnblockTime+0x3c>)
 800d532:	f04f 32ff 	mov.w	r2, #4294967295
 800d536:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d538:	e008      	b.n	800d54c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d53a:	4b07      	ldr	r3, [pc, #28]	; (800d558 <prvResetNextTaskUnblockTime+0x38>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	4a04      	ldr	r2, [pc, #16]	; (800d55c <prvResetNextTaskUnblockTime+0x3c>)
 800d54a:	6013      	str	r3, [r2, #0]
}
 800d54c:	bf00      	nop
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr
 800d558:	2000125c 	.word	0x2000125c
 800d55c:	200012c4 	.word	0x200012c4

0800d560 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d566:	4b0b      	ldr	r3, [pc, #44]	; (800d594 <xTaskGetSchedulerState+0x34>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d102      	bne.n	800d574 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d56e:	2301      	movs	r3, #1
 800d570:	607b      	str	r3, [r7, #4]
 800d572:	e008      	b.n	800d586 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d574:	4b08      	ldr	r3, [pc, #32]	; (800d598 <xTaskGetSchedulerState+0x38>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d102      	bne.n	800d582 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d57c:	2302      	movs	r3, #2
 800d57e:	607b      	str	r3, [r7, #4]
 800d580:	e001      	b.n	800d586 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d582:	2300      	movs	r3, #0
 800d584:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d586:	687b      	ldr	r3, [r7, #4]
	}
 800d588:	4618      	mov	r0, r3
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr
 800d594:	200012b0 	.word	0x200012b0
 800d598:	200012cc 	.word	0x200012cc

0800d59c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b086      	sub	sp, #24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d056      	beq.n	800d660 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d5b2:	4b2e      	ldr	r3, [pc, #184]	; (800d66c <xTaskPriorityDisinherit+0xd0>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	693a      	ldr	r2, [r7, #16]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d00a      	beq.n	800d5d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	60fb      	str	r3, [r7, #12]
}
 800d5ce:	bf00      	nop
 800d5d0:	e7fe      	b.n	800d5d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d10a      	bne.n	800d5f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	60bb      	str	r3, [r7, #8]
}
 800d5ec:	bf00      	nop
 800d5ee:	e7fe      	b.n	800d5ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5f4:	1e5a      	subs	r2, r3, #1
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d602:	429a      	cmp	r2, r3
 800d604:	d02c      	beq.n	800d660 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d128      	bne.n	800d660 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	3304      	adds	r3, #4
 800d612:	4618      	mov	r0, r3
 800d614:	f7fe fc70 	bl	800bef8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d624:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d630:	4b0f      	ldr	r3, [pc, #60]	; (800d670 <xTaskPriorityDisinherit+0xd4>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	d903      	bls.n	800d640 <xTaskPriorityDisinherit+0xa4>
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63c:	4a0c      	ldr	r2, [pc, #48]	; (800d670 <xTaskPriorityDisinherit+0xd4>)
 800d63e:	6013      	str	r3, [r2, #0]
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d644:	4613      	mov	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4413      	add	r3, r2
 800d64a:	009b      	lsls	r3, r3, #2
 800d64c:	4a09      	ldr	r2, [pc, #36]	; (800d674 <xTaskPriorityDisinherit+0xd8>)
 800d64e:	441a      	add	r2, r3
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	3304      	adds	r3, #4
 800d654:	4619      	mov	r1, r3
 800d656:	4610      	mov	r0, r2
 800d658:	f7fe fbf1 	bl	800be3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d65c:	2301      	movs	r3, #1
 800d65e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d660:	697b      	ldr	r3, [r7, #20]
	}
 800d662:	4618      	mov	r0, r3
 800d664:	3718      	adds	r7, #24
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	20000dd0 	.word	0x20000dd0
 800d670:	200012ac 	.word	0x200012ac
 800d674:	20000dd4 	.word	0x20000dd4

0800d678 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d682:	4b21      	ldr	r3, [pc, #132]	; (800d708 <prvAddCurrentTaskToDelayedList+0x90>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d688:	4b20      	ldr	r3, [pc, #128]	; (800d70c <prvAddCurrentTaskToDelayedList+0x94>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	3304      	adds	r3, #4
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fe fc32 	bl	800bef8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d69a:	d10a      	bne.n	800d6b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d007      	beq.n	800d6b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6a2:	4b1a      	ldr	r3, [pc, #104]	; (800d70c <prvAddCurrentTaskToDelayedList+0x94>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	3304      	adds	r3, #4
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	4819      	ldr	r0, [pc, #100]	; (800d710 <prvAddCurrentTaskToDelayedList+0x98>)
 800d6ac:	f7fe fbc7 	bl	800be3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d6b0:	e026      	b.n	800d700 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4413      	add	r3, r2
 800d6b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d6ba:	4b14      	ldr	r3, [pc, #80]	; (800d70c <prvAddCurrentTaskToDelayedList+0x94>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d209      	bcs.n	800d6de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6ca:	4b12      	ldr	r3, [pc, #72]	; (800d714 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	4b0f      	ldr	r3, [pc, #60]	; (800d70c <prvAddCurrentTaskToDelayedList+0x94>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	f7fe fbd5 	bl	800be86 <vListInsert>
}
 800d6dc:	e010      	b.n	800d700 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6de:	4b0e      	ldr	r3, [pc, #56]	; (800d718 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	4b0a      	ldr	r3, [pc, #40]	; (800d70c <prvAddCurrentTaskToDelayedList+0x94>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	f7fe fbcb 	bl	800be86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d6f0:	4b0a      	ldr	r3, [pc, #40]	; (800d71c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d202      	bcs.n	800d700 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d6fa:	4a08      	ldr	r2, [pc, #32]	; (800d71c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	6013      	str	r3, [r2, #0]
}
 800d700:	bf00      	nop
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	200012a8 	.word	0x200012a8
 800d70c:	20000dd0 	.word	0x20000dd0
 800d710:	20001290 	.word	0x20001290
 800d714:	20001260 	.word	0x20001260
 800d718:	2000125c 	.word	0x2000125c
 800d71c:	200012c4 	.word	0x200012c4

0800d720 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b08a      	sub	sp, #40	; 0x28
 800d724:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d726:	2300      	movs	r3, #0
 800d728:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d72a:	f000 fb07 	bl	800dd3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d72e:	4b1c      	ldr	r3, [pc, #112]	; (800d7a0 <xTimerCreateTimerTask+0x80>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d021      	beq.n	800d77a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d736:	2300      	movs	r3, #0
 800d738:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d73a:	2300      	movs	r3, #0
 800d73c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d73e:	1d3a      	adds	r2, r7, #4
 800d740:	f107 0108 	add.w	r1, r7, #8
 800d744:	f107 030c 	add.w	r3, r7, #12
 800d748:	4618      	mov	r0, r3
 800d74a:	f7fe fb31 	bl	800bdb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d74e:	6879      	ldr	r1, [r7, #4]
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	9202      	str	r2, [sp, #8]
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	2302      	movs	r3, #2
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	2300      	movs	r3, #0
 800d75e:	460a      	mov	r2, r1
 800d760:	4910      	ldr	r1, [pc, #64]	; (800d7a4 <xTimerCreateTimerTask+0x84>)
 800d762:	4811      	ldr	r0, [pc, #68]	; (800d7a8 <xTimerCreateTimerTask+0x88>)
 800d764:	f7ff f8de 	bl	800c924 <xTaskCreateStatic>
 800d768:	4603      	mov	r3, r0
 800d76a:	4a10      	ldr	r2, [pc, #64]	; (800d7ac <xTimerCreateTimerTask+0x8c>)
 800d76c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d76e:	4b0f      	ldr	r3, [pc, #60]	; (800d7ac <xTimerCreateTimerTask+0x8c>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d001      	beq.n	800d77a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d776:	2301      	movs	r3, #1
 800d778:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10a      	bne.n	800d796 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	613b      	str	r3, [r7, #16]
}
 800d792:	bf00      	nop
 800d794:	e7fe      	b.n	800d794 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d796:	697b      	ldr	r3, [r7, #20]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3718      	adds	r7, #24
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	20001300 	.word	0x20001300
 800d7a4:	08011db8 	.word	0x08011db8
 800d7a8:	0800d8e5 	.word	0x0800d8e5
 800d7ac:	20001304 	.word	0x20001304

0800d7b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b08a      	sub	sp, #40	; 0x28
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10a      	bne.n	800d7de <xTimerGenericCommand+0x2e>
	__asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	623b      	str	r3, [r7, #32]
}
 800d7da:	bf00      	nop
 800d7dc:	e7fe      	b.n	800d7dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d7de:	4b1a      	ldr	r3, [pc, #104]	; (800d848 <xTimerGenericCommand+0x98>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d02a      	beq.n	800d83c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	2b05      	cmp	r3, #5
 800d7f6:	dc18      	bgt.n	800d82a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d7f8:	f7ff feb2 	bl	800d560 <xTaskGetSchedulerState>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d109      	bne.n	800d816 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d802:	4b11      	ldr	r3, [pc, #68]	; (800d848 <xTimerGenericCommand+0x98>)
 800d804:	6818      	ldr	r0, [r3, #0]
 800d806:	f107 0110 	add.w	r1, r7, #16
 800d80a:	2300      	movs	r3, #0
 800d80c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d80e:	f7fe fca1 	bl	800c154 <xQueueGenericSend>
 800d812:	6278      	str	r0, [r7, #36]	; 0x24
 800d814:	e012      	b.n	800d83c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d816:	4b0c      	ldr	r3, [pc, #48]	; (800d848 <xTimerGenericCommand+0x98>)
 800d818:	6818      	ldr	r0, [r3, #0]
 800d81a:	f107 0110 	add.w	r1, r7, #16
 800d81e:	2300      	movs	r3, #0
 800d820:	2200      	movs	r2, #0
 800d822:	f7fe fc97 	bl	800c154 <xQueueGenericSend>
 800d826:	6278      	str	r0, [r7, #36]	; 0x24
 800d828:	e008      	b.n	800d83c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d82a:	4b07      	ldr	r3, [pc, #28]	; (800d848 <xTimerGenericCommand+0x98>)
 800d82c:	6818      	ldr	r0, [r3, #0]
 800d82e:	f107 0110 	add.w	r1, r7, #16
 800d832:	2300      	movs	r3, #0
 800d834:	683a      	ldr	r2, [r7, #0]
 800d836:	f7fe fd8b 	bl	800c350 <xQueueGenericSendFromISR>
 800d83a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3728      	adds	r7, #40	; 0x28
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	20001300 	.word	0x20001300

0800d84c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b088      	sub	sp, #32
 800d850:	af02      	add	r7, sp, #8
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d856:	4b22      	ldr	r3, [pc, #136]	; (800d8e0 <prvProcessExpiredTimer+0x94>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	3304      	adds	r3, #4
 800d864:	4618      	mov	r0, r3
 800d866:	f7fe fb47 	bl	800bef8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d870:	f003 0304 	and.w	r3, r3, #4
 800d874:	2b00      	cmp	r3, #0
 800d876:	d022      	beq.n	800d8be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	699a      	ldr	r2, [r3, #24]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	18d1      	adds	r1, r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	683a      	ldr	r2, [r7, #0]
 800d884:	6978      	ldr	r0, [r7, #20]
 800d886:	f000 f8d1 	bl	800da2c <prvInsertTimerInActiveList>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d01f      	beq.n	800d8d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d890:	2300      	movs	r3, #0
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	2300      	movs	r3, #0
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	2100      	movs	r1, #0
 800d89a:	6978      	ldr	r0, [r7, #20]
 800d89c:	f7ff ff88 	bl	800d7b0 <xTimerGenericCommand>
 800d8a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d113      	bne.n	800d8d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ac:	f383 8811 	msr	BASEPRI, r3
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	60fb      	str	r3, [r7, #12]
}
 800d8ba:	bf00      	nop
 800d8bc:	e7fe      	b.n	800d8bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8c4:	f023 0301 	bic.w	r3, r3, #1
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	6a1b      	ldr	r3, [r3, #32]
 800d8d4:	6978      	ldr	r0, [r7, #20]
 800d8d6:	4798      	blx	r3
}
 800d8d8:	bf00      	nop
 800d8da:	3718      	adds	r7, #24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	200012f8 	.word	0x200012f8

0800d8e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d8ec:	f107 0308 	add.w	r3, r7, #8
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f000 f857 	bl	800d9a4 <prvGetNextExpireTime>
 800d8f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f000 f803 	bl	800d908 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d902:	f000 f8d5 	bl	800dab0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d906:	e7f1      	b.n	800d8ec <prvTimerTask+0x8>

0800d908 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d912:	f7ff fa43 	bl	800cd9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d916:	f107 0308 	add.w	r3, r7, #8
 800d91a:	4618      	mov	r0, r3
 800d91c:	f000 f866 	bl	800d9ec <prvSampleTimeNow>
 800d920:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d130      	bne.n	800d98a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10a      	bne.n	800d944 <prvProcessTimerOrBlockTask+0x3c>
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	429a      	cmp	r2, r3
 800d934:	d806      	bhi.n	800d944 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d936:	f7ff fa3f 	bl	800cdb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d93a:	68f9      	ldr	r1, [r7, #12]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f7ff ff85 	bl	800d84c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d942:	e024      	b.n	800d98e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d008      	beq.n	800d95c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d94a:	4b13      	ldr	r3, [pc, #76]	; (800d998 <prvProcessTimerOrBlockTask+0x90>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <prvProcessTimerOrBlockTask+0x50>
 800d954:	2301      	movs	r3, #1
 800d956:	e000      	b.n	800d95a <prvProcessTimerOrBlockTask+0x52>
 800d958:	2300      	movs	r3, #0
 800d95a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d95c:	4b0f      	ldr	r3, [pc, #60]	; (800d99c <prvProcessTimerOrBlockTask+0x94>)
 800d95e:	6818      	ldr	r0, [r3, #0]
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	1ad3      	subs	r3, r2, r3
 800d966:	683a      	ldr	r2, [r7, #0]
 800d968:	4619      	mov	r1, r3
 800d96a:	f7fe ffa7 	bl	800c8bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d96e:	f7ff fa23 	bl	800cdb8 <xTaskResumeAll>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10a      	bne.n	800d98e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d978:	4b09      	ldr	r3, [pc, #36]	; (800d9a0 <prvProcessTimerOrBlockTask+0x98>)
 800d97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d97e:	601a      	str	r2, [r3, #0]
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	f3bf 8f6f 	isb	sy
}
 800d988:	e001      	b.n	800d98e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d98a:	f7ff fa15 	bl	800cdb8 <xTaskResumeAll>
}
 800d98e:	bf00      	nop
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	200012fc 	.word	0x200012fc
 800d99c:	20001300 	.word	0x20001300
 800d9a0:	e000ed04 	.word	0xe000ed04

0800d9a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d9ac:	4b0e      	ldr	r3, [pc, #56]	; (800d9e8 <prvGetNextExpireTime+0x44>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d101      	bne.n	800d9ba <prvGetNextExpireTime+0x16>
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	e000      	b.n	800d9bc <prvGetNextExpireTime+0x18>
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d105      	bne.n	800d9d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9c8:	4b07      	ldr	r3, [pc, #28]	; (800d9e8 <prvGetNextExpireTime+0x44>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	60fb      	str	r3, [r7, #12]
 800d9d2:	e001      	b.n	800d9d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3714      	adds	r7, #20
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	200012f8 	.word	0x200012f8

0800d9ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d9f4:	f7ff fa7e 	bl	800cef4 <xTaskGetTickCount>
 800d9f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d9fa:	4b0b      	ldr	r3, [pc, #44]	; (800da28 <prvSampleTimeNow+0x3c>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	429a      	cmp	r2, r3
 800da02:	d205      	bcs.n	800da10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800da04:	f000 f936 	bl	800dc74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	601a      	str	r2, [r3, #0]
 800da0e:	e002      	b.n	800da16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2200      	movs	r2, #0
 800da14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800da16:	4a04      	ldr	r2, [pc, #16]	; (800da28 <prvSampleTimeNow+0x3c>)
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800da1c:	68fb      	ldr	r3, [r7, #12]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	20001308 	.word	0x20001308

0800da2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
 800da38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800da3a:	2300      	movs	r3, #0
 800da3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	68fa      	ldr	r2, [r7, #12]
 800da48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800da4a:	68ba      	ldr	r2, [r7, #8]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d812      	bhi.n	800da78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	1ad2      	subs	r2, r2, r3
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d302      	bcc.n	800da66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800da60:	2301      	movs	r3, #1
 800da62:	617b      	str	r3, [r7, #20]
 800da64:	e01b      	b.n	800da9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800da66:	4b10      	ldr	r3, [pc, #64]	; (800daa8 <prvInsertTimerInActiveList+0x7c>)
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	3304      	adds	r3, #4
 800da6e:	4619      	mov	r1, r3
 800da70:	4610      	mov	r0, r2
 800da72:	f7fe fa08 	bl	800be86 <vListInsert>
 800da76:	e012      	b.n	800da9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d206      	bcs.n	800da8e <prvInsertTimerInActiveList+0x62>
 800da80:	68ba      	ldr	r2, [r7, #8]
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	429a      	cmp	r2, r3
 800da86:	d302      	bcc.n	800da8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800da88:	2301      	movs	r3, #1
 800da8a:	617b      	str	r3, [r7, #20]
 800da8c:	e007      	b.n	800da9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da8e:	4b07      	ldr	r3, [pc, #28]	; (800daac <prvInsertTimerInActiveList+0x80>)
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	3304      	adds	r3, #4
 800da96:	4619      	mov	r1, r3
 800da98:	4610      	mov	r0, r2
 800da9a:	f7fe f9f4 	bl	800be86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800da9e:	697b      	ldr	r3, [r7, #20]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3718      	adds	r7, #24
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	200012fc 	.word	0x200012fc
 800daac:	200012f8 	.word	0x200012f8

0800dab0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b08e      	sub	sp, #56	; 0x38
 800dab4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dab6:	e0ca      	b.n	800dc4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	da18      	bge.n	800daf0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dabe:	1d3b      	adds	r3, r7, #4
 800dac0:	3304      	adds	r3, #4
 800dac2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10a      	bne.n	800dae0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	61fb      	str	r3, [r7, #28]
}
 800dadc:	bf00      	nop
 800dade:	e7fe      	b.n	800dade <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dae6:	6850      	ldr	r0, [r2, #4]
 800dae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daea:	6892      	ldr	r2, [r2, #8]
 800daec:	4611      	mov	r1, r2
 800daee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	f2c0 80ab 	blt.w	800dc4e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d004      	beq.n	800db0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db06:	3304      	adds	r3, #4
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe f9f5 	bl	800bef8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db0e:	463b      	mov	r3, r7
 800db10:	4618      	mov	r0, r3
 800db12:	f7ff ff6b 	bl	800d9ec <prvSampleTimeNow>
 800db16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b09      	cmp	r3, #9
 800db1c:	f200 8096 	bhi.w	800dc4c <prvProcessReceivedCommands+0x19c>
 800db20:	a201      	add	r2, pc, #4	; (adr r2, 800db28 <prvProcessReceivedCommands+0x78>)
 800db22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db26:	bf00      	nop
 800db28:	0800db51 	.word	0x0800db51
 800db2c:	0800db51 	.word	0x0800db51
 800db30:	0800db51 	.word	0x0800db51
 800db34:	0800dbc5 	.word	0x0800dbc5
 800db38:	0800dbd9 	.word	0x0800dbd9
 800db3c:	0800dc23 	.word	0x0800dc23
 800db40:	0800db51 	.word	0x0800db51
 800db44:	0800db51 	.word	0x0800db51
 800db48:	0800dbc5 	.word	0x0800dbc5
 800db4c:	0800dbd9 	.word	0x0800dbd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db56:	f043 0301 	orr.w	r3, r3, #1
 800db5a:	b2da      	uxtb	r2, r3
 800db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800db62:	68ba      	ldr	r2, [r7, #8]
 800db64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db66:	699b      	ldr	r3, [r3, #24]
 800db68:	18d1      	adds	r1, r2, r3
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db70:	f7ff ff5c 	bl	800da2c <prvInsertTimerInActiveList>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d069      	beq.n	800dc4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db88:	f003 0304 	and.w	r3, r3, #4
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d05e      	beq.n	800dc4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db94:	699b      	ldr	r3, [r3, #24]
 800db96:	441a      	add	r2, r3
 800db98:	2300      	movs	r3, #0
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	2300      	movs	r3, #0
 800db9e:	2100      	movs	r1, #0
 800dba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dba2:	f7ff fe05 	bl	800d7b0 <xTimerGenericCommand>
 800dba6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dba8:	6a3b      	ldr	r3, [r7, #32]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d14f      	bne.n	800dc4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	61bb      	str	r3, [r7, #24]
}
 800dbc0:	bf00      	nop
 800dbc2:	e7fe      	b.n	800dbc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbca:	f023 0301 	bic.w	r3, r3, #1
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dbd6:	e03a      	b.n	800dc4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbde:	f043 0301 	orr.w	r3, r3, #1
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf2:	699b      	ldr	r3, [r3, #24]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d10a      	bne.n	800dc0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfc:	f383 8811 	msr	BASEPRI, r3
 800dc00:	f3bf 8f6f 	isb	sy
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	617b      	str	r3, [r7, #20]
}
 800dc0a:	bf00      	nop
 800dc0c:	e7fe      	b.n	800dc0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc10:	699a      	ldr	r2, [r3, #24]
 800dc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc14:	18d1      	adds	r1, r2, r3
 800dc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc1c:	f7ff ff06 	bl	800da2c <prvInsertTimerInActiveList>
					break;
 800dc20:	e015      	b.n	800dc4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc28:	f003 0302 	and.w	r3, r3, #2
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d103      	bne.n	800dc38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dc30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc32:	f000 fbdd 	bl	800e3f0 <vPortFree>
 800dc36:	e00a      	b.n	800dc4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc3e:	f023 0301 	bic.w	r3, r3, #1
 800dc42:	b2da      	uxtb	r2, r3
 800dc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dc4a:	e000      	b.n	800dc4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800dc4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc4e:	4b08      	ldr	r3, [pc, #32]	; (800dc70 <prvProcessReceivedCommands+0x1c0>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	1d39      	adds	r1, r7, #4
 800dc54:	2200      	movs	r2, #0
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fe fc16 	bl	800c488 <xQueueReceive>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f47f af2a 	bne.w	800dab8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dc64:	bf00      	nop
 800dc66:	bf00      	nop
 800dc68:	3730      	adds	r7, #48	; 0x30
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	20001300 	.word	0x20001300

0800dc74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc7a:	e048      	b.n	800dd0e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc7c:	4b2d      	ldr	r3, [pc, #180]	; (800dd34 <prvSwitchTimerLists+0xc0>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	68db      	ldr	r3, [r3, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc86:	4b2b      	ldr	r3, [pc, #172]	; (800dd34 <prvSwitchTimerLists+0xc0>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	3304      	adds	r3, #4
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fe f92f 	bl	800bef8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	6a1b      	ldr	r3, [r3, #32]
 800dc9e:	68f8      	ldr	r0, [r7, #12]
 800dca0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dca8:	f003 0304 	and.w	r3, r3, #4
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d02e      	beq.n	800dd0e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	699b      	ldr	r3, [r3, #24]
 800dcb4:	693a      	ldr	r2, [r7, #16]
 800dcb6:	4413      	add	r3, r2
 800dcb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dcba:	68ba      	ldr	r2, [r7, #8]
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d90e      	bls.n	800dce0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	68fa      	ldr	r2, [r7, #12]
 800dccc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcce:	4b19      	ldr	r3, [pc, #100]	; (800dd34 <prvSwitchTimerLists+0xc0>)
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4610      	mov	r0, r2
 800dcda:	f7fe f8d4 	bl	800be86 <vListInsert>
 800dcde:	e016      	b.n	800dd0e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dce0:	2300      	movs	r3, #0
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	2300      	movs	r3, #0
 800dce6:	693a      	ldr	r2, [r7, #16]
 800dce8:	2100      	movs	r1, #0
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f7ff fd60 	bl	800d7b0 <xTimerGenericCommand>
 800dcf0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d10a      	bne.n	800dd0e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfc:	f383 8811 	msr	BASEPRI, r3
 800dd00:	f3bf 8f6f 	isb	sy
 800dd04:	f3bf 8f4f 	dsb	sy
 800dd08:	603b      	str	r3, [r7, #0]
}
 800dd0a:	bf00      	nop
 800dd0c:	e7fe      	b.n	800dd0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd0e:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <prvSwitchTimerLists+0xc0>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1b1      	bne.n	800dc7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dd18:	4b06      	ldr	r3, [pc, #24]	; (800dd34 <prvSwitchTimerLists+0xc0>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dd1e:	4b06      	ldr	r3, [pc, #24]	; (800dd38 <prvSwitchTimerLists+0xc4>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a04      	ldr	r2, [pc, #16]	; (800dd34 <prvSwitchTimerLists+0xc0>)
 800dd24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dd26:	4a04      	ldr	r2, [pc, #16]	; (800dd38 <prvSwitchTimerLists+0xc4>)
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	6013      	str	r3, [r2, #0]
}
 800dd2c:	bf00      	nop
 800dd2e:	3718      	adds	r7, #24
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	200012f8 	.word	0x200012f8
 800dd38:	200012fc 	.word	0x200012fc

0800dd3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dd42:	f000 f967 	bl	800e014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dd46:	4b15      	ldr	r3, [pc, #84]	; (800dd9c <prvCheckForValidListAndQueue+0x60>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d120      	bne.n	800dd90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dd4e:	4814      	ldr	r0, [pc, #80]	; (800dda0 <prvCheckForValidListAndQueue+0x64>)
 800dd50:	f7fe f848 	bl	800bde4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dd54:	4813      	ldr	r0, [pc, #76]	; (800dda4 <prvCheckForValidListAndQueue+0x68>)
 800dd56:	f7fe f845 	bl	800bde4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dd5a:	4b13      	ldr	r3, [pc, #76]	; (800dda8 <prvCheckForValidListAndQueue+0x6c>)
 800dd5c:	4a10      	ldr	r2, [pc, #64]	; (800dda0 <prvCheckForValidListAndQueue+0x64>)
 800dd5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dd60:	4b12      	ldr	r3, [pc, #72]	; (800ddac <prvCheckForValidListAndQueue+0x70>)
 800dd62:	4a10      	ldr	r2, [pc, #64]	; (800dda4 <prvCheckForValidListAndQueue+0x68>)
 800dd64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd66:	2300      	movs	r3, #0
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	4b11      	ldr	r3, [pc, #68]	; (800ddb0 <prvCheckForValidListAndQueue+0x74>)
 800dd6c:	4a11      	ldr	r2, [pc, #68]	; (800ddb4 <prvCheckForValidListAndQueue+0x78>)
 800dd6e:	2110      	movs	r1, #16
 800dd70:	200a      	movs	r0, #10
 800dd72:	f7fe f953 	bl	800c01c <xQueueGenericCreateStatic>
 800dd76:	4603      	mov	r3, r0
 800dd78:	4a08      	ldr	r2, [pc, #32]	; (800dd9c <prvCheckForValidListAndQueue+0x60>)
 800dd7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dd7c:	4b07      	ldr	r3, [pc, #28]	; (800dd9c <prvCheckForValidListAndQueue+0x60>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d005      	beq.n	800dd90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dd84:	4b05      	ldr	r3, [pc, #20]	; (800dd9c <prvCheckForValidListAndQueue+0x60>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	490b      	ldr	r1, [pc, #44]	; (800ddb8 <prvCheckForValidListAndQueue+0x7c>)
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7fe fd6c 	bl	800c868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd90:	f000 f970 	bl	800e074 <vPortExitCritical>
}
 800dd94:	bf00      	nop
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	20001300 	.word	0x20001300
 800dda0:	200012d0 	.word	0x200012d0
 800dda4:	200012e4 	.word	0x200012e4
 800dda8:	200012f8 	.word	0x200012f8
 800ddac:	200012fc 	.word	0x200012fc
 800ddb0:	200013ac 	.word	0x200013ac
 800ddb4:	2000130c 	.word	0x2000130c
 800ddb8:	08011dc0 	.word	0x08011dc0

0800ddbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	3b04      	subs	r3, #4
 800ddcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ddd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	3b04      	subs	r3, #4
 800ddda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	f023 0201 	bic.w	r2, r3, #1
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3b04      	subs	r3, #4
 800ddea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ddec:	4a0c      	ldr	r2, [pc, #48]	; (800de20 <pxPortInitialiseStack+0x64>)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	3b14      	subs	r3, #20
 800ddf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	3b04      	subs	r3, #4
 800de02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f06f 0202 	mvn.w	r2, #2
 800de0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	3b20      	subs	r3, #32
 800de10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800de12:	68fb      	ldr	r3, [r7, #12]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3714      	adds	r7, #20
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr
 800de20:	0800de25 	.word	0x0800de25

0800de24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800de2a:	2300      	movs	r3, #0
 800de2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800de2e:	4b12      	ldr	r3, [pc, #72]	; (800de78 <prvTaskExitError+0x54>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de36:	d00a      	beq.n	800de4e <prvTaskExitError+0x2a>
	__asm volatile
 800de38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3c:	f383 8811 	msr	BASEPRI, r3
 800de40:	f3bf 8f6f 	isb	sy
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	60fb      	str	r3, [r7, #12]
}
 800de4a:	bf00      	nop
 800de4c:	e7fe      	b.n	800de4c <prvTaskExitError+0x28>
	__asm volatile
 800de4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de52:	f383 8811 	msr	BASEPRI, r3
 800de56:	f3bf 8f6f 	isb	sy
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	60bb      	str	r3, [r7, #8]
}
 800de60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de62:	bf00      	nop
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d0fc      	beq.n	800de64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de6a:	bf00      	nop
 800de6c:	bf00      	nop
 800de6e:	3714      	adds	r7, #20
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr
 800de78:	20000114 	.word	0x20000114
 800de7c:	00000000 	.word	0x00000000

0800de80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800de80:	4b07      	ldr	r3, [pc, #28]	; (800dea0 <pxCurrentTCBConst2>)
 800de82:	6819      	ldr	r1, [r3, #0]
 800de84:	6808      	ldr	r0, [r1, #0]
 800de86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8a:	f380 8809 	msr	PSP, r0
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	f04f 0000 	mov.w	r0, #0
 800de96:	f380 8811 	msr	BASEPRI, r0
 800de9a:	4770      	bx	lr
 800de9c:	f3af 8000 	nop.w

0800dea0 <pxCurrentTCBConst2>:
 800dea0:	20000dd0 	.word	0x20000dd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dea4:	bf00      	nop
 800dea6:	bf00      	nop

0800dea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dea8:	4808      	ldr	r0, [pc, #32]	; (800decc <prvPortStartFirstTask+0x24>)
 800deaa:	6800      	ldr	r0, [r0, #0]
 800deac:	6800      	ldr	r0, [r0, #0]
 800deae:	f380 8808 	msr	MSP, r0
 800deb2:	f04f 0000 	mov.w	r0, #0
 800deb6:	f380 8814 	msr	CONTROL, r0
 800deba:	b662      	cpsie	i
 800debc:	b661      	cpsie	f
 800debe:	f3bf 8f4f 	dsb	sy
 800dec2:	f3bf 8f6f 	isb	sy
 800dec6:	df00      	svc	0
 800dec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800deca:	bf00      	nop
 800decc:	e000ed08 	.word	0xe000ed08

0800ded0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ded6:	4b46      	ldr	r3, [pc, #280]	; (800dff0 <xPortStartScheduler+0x120>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4a46      	ldr	r2, [pc, #280]	; (800dff4 <xPortStartScheduler+0x124>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d10a      	bne.n	800def6 <xPortStartScheduler+0x26>
	__asm volatile
 800dee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	613b      	str	r3, [r7, #16]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800def6:	4b3e      	ldr	r3, [pc, #248]	; (800dff0 <xPortStartScheduler+0x120>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a3f      	ldr	r2, [pc, #252]	; (800dff8 <xPortStartScheduler+0x128>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d10a      	bne.n	800df16 <xPortStartScheduler+0x46>
	__asm volatile
 800df00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	60fb      	str	r3, [r7, #12]
}
 800df12:	bf00      	nop
 800df14:	e7fe      	b.n	800df14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800df16:	4b39      	ldr	r3, [pc, #228]	; (800dffc <xPortStartScheduler+0x12c>)
 800df18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	22ff      	movs	r2, #255	; 0xff
 800df26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800df30:	78fb      	ldrb	r3, [r7, #3]
 800df32:	b2db      	uxtb	r3, r3
 800df34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800df38:	b2da      	uxtb	r2, r3
 800df3a:	4b31      	ldr	r3, [pc, #196]	; (800e000 <xPortStartScheduler+0x130>)
 800df3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800df3e:	4b31      	ldr	r3, [pc, #196]	; (800e004 <xPortStartScheduler+0x134>)
 800df40:	2207      	movs	r2, #7
 800df42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df44:	e009      	b.n	800df5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800df46:	4b2f      	ldr	r3, [pc, #188]	; (800e004 <xPortStartScheduler+0x134>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	3b01      	subs	r3, #1
 800df4c:	4a2d      	ldr	r2, [pc, #180]	; (800e004 <xPortStartScheduler+0x134>)
 800df4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800df50:	78fb      	ldrb	r3, [r7, #3]
 800df52:	b2db      	uxtb	r3, r3
 800df54:	005b      	lsls	r3, r3, #1
 800df56:	b2db      	uxtb	r3, r3
 800df58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df5a:	78fb      	ldrb	r3, [r7, #3]
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df62:	2b80      	cmp	r3, #128	; 0x80
 800df64:	d0ef      	beq.n	800df46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800df66:	4b27      	ldr	r3, [pc, #156]	; (800e004 <xPortStartScheduler+0x134>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f1c3 0307 	rsb	r3, r3, #7
 800df6e:	2b04      	cmp	r3, #4
 800df70:	d00a      	beq.n	800df88 <xPortStartScheduler+0xb8>
	__asm volatile
 800df72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	60bb      	str	r3, [r7, #8]
}
 800df84:	bf00      	nop
 800df86:	e7fe      	b.n	800df86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df88:	4b1e      	ldr	r3, [pc, #120]	; (800e004 <xPortStartScheduler+0x134>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	021b      	lsls	r3, r3, #8
 800df8e:	4a1d      	ldr	r2, [pc, #116]	; (800e004 <xPortStartScheduler+0x134>)
 800df90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df92:	4b1c      	ldr	r3, [pc, #112]	; (800e004 <xPortStartScheduler+0x134>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df9a:	4a1a      	ldr	r2, [pc, #104]	; (800e004 <xPortStartScheduler+0x134>)
 800df9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	b2da      	uxtb	r2, r3
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dfa6:	4b18      	ldr	r3, [pc, #96]	; (800e008 <xPortStartScheduler+0x138>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a17      	ldr	r2, [pc, #92]	; (800e008 <xPortStartScheduler+0x138>)
 800dfac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dfb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dfb2:	4b15      	ldr	r3, [pc, #84]	; (800e008 <xPortStartScheduler+0x138>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a14      	ldr	r2, [pc, #80]	; (800e008 <xPortStartScheduler+0x138>)
 800dfb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dfbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dfbe:	f000 f8dd 	bl	800e17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dfc2:	4b12      	ldr	r3, [pc, #72]	; (800e00c <xPortStartScheduler+0x13c>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dfc8:	f000 f8fc 	bl	800e1c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dfcc:	4b10      	ldr	r3, [pc, #64]	; (800e010 <xPortStartScheduler+0x140>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a0f      	ldr	r2, [pc, #60]	; (800e010 <xPortStartScheduler+0x140>)
 800dfd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dfd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dfd8:	f7ff ff66 	bl	800dea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dfdc:	f7ff f854 	bl	800d088 <vTaskSwitchContext>
	prvTaskExitError();
 800dfe0:	f7ff ff20 	bl	800de24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3718      	adds	r7, #24
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	e000ed00 	.word	0xe000ed00
 800dff4:	410fc271 	.word	0x410fc271
 800dff8:	410fc270 	.word	0x410fc270
 800dffc:	e000e400 	.word	0xe000e400
 800e000:	200013fc 	.word	0x200013fc
 800e004:	20001400 	.word	0x20001400
 800e008:	e000ed20 	.word	0xe000ed20
 800e00c:	20000114 	.word	0x20000114
 800e010:	e000ef34 	.word	0xe000ef34

0800e014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
	__asm volatile
 800e01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01e:	f383 8811 	msr	BASEPRI, r3
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	f3bf 8f4f 	dsb	sy
 800e02a:	607b      	str	r3, [r7, #4]
}
 800e02c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e02e:	4b0f      	ldr	r3, [pc, #60]	; (800e06c <vPortEnterCritical+0x58>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3301      	adds	r3, #1
 800e034:	4a0d      	ldr	r2, [pc, #52]	; (800e06c <vPortEnterCritical+0x58>)
 800e036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e038:	4b0c      	ldr	r3, [pc, #48]	; (800e06c <vPortEnterCritical+0x58>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d10f      	bne.n	800e060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e040:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <vPortEnterCritical+0x5c>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b00      	cmp	r3, #0
 800e048:	d00a      	beq.n	800e060 <vPortEnterCritical+0x4c>
	__asm volatile
 800e04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04e:	f383 8811 	msr	BASEPRI, r3
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	603b      	str	r3, [r7, #0]
}
 800e05c:	bf00      	nop
 800e05e:	e7fe      	b.n	800e05e <vPortEnterCritical+0x4a>
	}
}
 800e060:	bf00      	nop
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr
 800e06c:	20000114 	.word	0x20000114
 800e070:	e000ed04 	.word	0xe000ed04

0800e074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e07a:	4b12      	ldr	r3, [pc, #72]	; (800e0c4 <vPortExitCritical+0x50>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d10a      	bne.n	800e098 <vPortExitCritical+0x24>
	__asm volatile
 800e082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e086:	f383 8811 	msr	BASEPRI, r3
 800e08a:	f3bf 8f6f 	isb	sy
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	607b      	str	r3, [r7, #4]
}
 800e094:	bf00      	nop
 800e096:	e7fe      	b.n	800e096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e098:	4b0a      	ldr	r3, [pc, #40]	; (800e0c4 <vPortExitCritical+0x50>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	3b01      	subs	r3, #1
 800e09e:	4a09      	ldr	r2, [pc, #36]	; (800e0c4 <vPortExitCritical+0x50>)
 800e0a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e0a2:	4b08      	ldr	r3, [pc, #32]	; (800e0c4 <vPortExitCritical+0x50>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d105      	bne.n	800e0b6 <vPortExitCritical+0x42>
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	f383 8811 	msr	BASEPRI, r3
}
 800e0b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e0b6:	bf00      	nop
 800e0b8:	370c      	adds	r7, #12
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	20000114 	.word	0x20000114
	...

0800e0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e0d0:	f3ef 8009 	mrs	r0, PSP
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	4b15      	ldr	r3, [pc, #84]	; (800e130 <pxCurrentTCBConst>)
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	f01e 0f10 	tst.w	lr, #16
 800e0e0:	bf08      	it	eq
 800e0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ea:	6010      	str	r0, [r2, #0]
 800e0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e0f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e0f4:	f380 8811 	msr	BASEPRI, r0
 800e0f8:	f3bf 8f4f 	dsb	sy
 800e0fc:	f3bf 8f6f 	isb	sy
 800e100:	f7fe ffc2 	bl	800d088 <vTaskSwitchContext>
 800e104:	f04f 0000 	mov.w	r0, #0
 800e108:	f380 8811 	msr	BASEPRI, r0
 800e10c:	bc09      	pop	{r0, r3}
 800e10e:	6819      	ldr	r1, [r3, #0]
 800e110:	6808      	ldr	r0, [r1, #0]
 800e112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e116:	f01e 0f10 	tst.w	lr, #16
 800e11a:	bf08      	it	eq
 800e11c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e120:	f380 8809 	msr	PSP, r0
 800e124:	f3bf 8f6f 	isb	sy
 800e128:	4770      	bx	lr
 800e12a:	bf00      	nop
 800e12c:	f3af 8000 	nop.w

0800e130 <pxCurrentTCBConst>:
 800e130:	20000dd0 	.word	0x20000dd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e134:	bf00      	nop
 800e136:	bf00      	nop

0800e138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	607b      	str	r3, [r7, #4]
}
 800e150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e152:	f7fe fedf 	bl	800cf14 <xTaskIncrementTick>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d003      	beq.n	800e164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e15c:	4b06      	ldr	r3, [pc, #24]	; (800e178 <xPortSysTickHandler+0x40>)
 800e15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e162:	601a      	str	r2, [r3, #0]
 800e164:	2300      	movs	r3, #0
 800e166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	f383 8811 	msr	BASEPRI, r3
}
 800e16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e170:	bf00      	nop
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	e000ed04 	.word	0xe000ed04

0800e17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e17c:	b480      	push	{r7}
 800e17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e180:	4b0b      	ldr	r3, [pc, #44]	; (800e1b0 <vPortSetupTimerInterrupt+0x34>)
 800e182:	2200      	movs	r2, #0
 800e184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e186:	4b0b      	ldr	r3, [pc, #44]	; (800e1b4 <vPortSetupTimerInterrupt+0x38>)
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e18c:	4b0a      	ldr	r3, [pc, #40]	; (800e1b8 <vPortSetupTimerInterrupt+0x3c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a0a      	ldr	r2, [pc, #40]	; (800e1bc <vPortSetupTimerInterrupt+0x40>)
 800e192:	fba2 2303 	umull	r2, r3, r2, r3
 800e196:	099b      	lsrs	r3, r3, #6
 800e198:	4a09      	ldr	r2, [pc, #36]	; (800e1c0 <vPortSetupTimerInterrupt+0x44>)
 800e19a:	3b01      	subs	r3, #1
 800e19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e19e:	4b04      	ldr	r3, [pc, #16]	; (800e1b0 <vPortSetupTimerInterrupt+0x34>)
 800e1a0:	2207      	movs	r2, #7
 800e1a2:	601a      	str	r2, [r3, #0]
}
 800e1a4:	bf00      	nop
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop
 800e1b0:	e000e010 	.word	0xe000e010
 800e1b4:	e000e018 	.word	0xe000e018
 800e1b8:	20000000 	.word	0x20000000
 800e1bc:	10624dd3 	.word	0x10624dd3
 800e1c0:	e000e014 	.word	0xe000e014

0800e1c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e1c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e1d4 <vPortEnableVFP+0x10>
 800e1c8:	6801      	ldr	r1, [r0, #0]
 800e1ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e1ce:	6001      	str	r1, [r0, #0]
 800e1d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e1d2:	bf00      	nop
 800e1d4:	e000ed88 	.word	0xe000ed88

0800e1d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e1d8:	b480      	push	{r7}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e1de:	f3ef 8305 	mrs	r3, IPSR
 800e1e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b0f      	cmp	r3, #15
 800e1e8:	d914      	bls.n	800e214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e1ea:	4a17      	ldr	r2, [pc, #92]	; (800e248 <vPortValidateInterruptPriority+0x70>)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e1f4:	4b15      	ldr	r3, [pc, #84]	; (800e24c <vPortValidateInterruptPriority+0x74>)
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	7afa      	ldrb	r2, [r7, #11]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d20a      	bcs.n	800e214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e202:	f383 8811 	msr	BASEPRI, r3
 800e206:	f3bf 8f6f 	isb	sy
 800e20a:	f3bf 8f4f 	dsb	sy
 800e20e:	607b      	str	r3, [r7, #4]
}
 800e210:	bf00      	nop
 800e212:	e7fe      	b.n	800e212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e214:	4b0e      	ldr	r3, [pc, #56]	; (800e250 <vPortValidateInterruptPriority+0x78>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e21c:	4b0d      	ldr	r3, [pc, #52]	; (800e254 <vPortValidateInterruptPriority+0x7c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	429a      	cmp	r2, r3
 800e222:	d90a      	bls.n	800e23a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e228:	f383 8811 	msr	BASEPRI, r3
 800e22c:	f3bf 8f6f 	isb	sy
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	603b      	str	r3, [r7, #0]
}
 800e236:	bf00      	nop
 800e238:	e7fe      	b.n	800e238 <vPortValidateInterruptPriority+0x60>
	}
 800e23a:	bf00      	nop
 800e23c:	3714      	adds	r7, #20
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr
 800e246:	bf00      	nop
 800e248:	e000e3f0 	.word	0xe000e3f0
 800e24c:	200013fc 	.word	0x200013fc
 800e250:	e000ed0c 	.word	0xe000ed0c
 800e254:	20001400 	.word	0x20001400

0800e258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b08a      	sub	sp, #40	; 0x28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e260:	2300      	movs	r3, #0
 800e262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e264:	f7fe fd9a 	bl	800cd9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e268:	4b5b      	ldr	r3, [pc, #364]	; (800e3d8 <pvPortMalloc+0x180>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d101      	bne.n	800e274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e270:	f000 f920 	bl	800e4b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e274:	4b59      	ldr	r3, [pc, #356]	; (800e3dc <pvPortMalloc+0x184>)
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4013      	ands	r3, r2
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f040 8093 	bne.w	800e3a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d01d      	beq.n	800e2c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e288:	2208      	movs	r2, #8
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4413      	add	r3, r2
 800e28e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f003 0307 	and.w	r3, r3, #7
 800e296:	2b00      	cmp	r3, #0
 800e298:	d014      	beq.n	800e2c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f023 0307 	bic.w	r3, r3, #7
 800e2a0:	3308      	adds	r3, #8
 800e2a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f003 0307 	and.w	r3, r3, #7
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00a      	beq.n	800e2c4 <pvPortMalloc+0x6c>
	__asm volatile
 800e2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	617b      	str	r3, [r7, #20]
}
 800e2c0:	bf00      	nop
 800e2c2:	e7fe      	b.n	800e2c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d06e      	beq.n	800e3a8 <pvPortMalloc+0x150>
 800e2ca:	4b45      	ldr	r3, [pc, #276]	; (800e3e0 <pvPortMalloc+0x188>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d869      	bhi.n	800e3a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e2d4:	4b43      	ldr	r3, [pc, #268]	; (800e3e4 <pvPortMalloc+0x18c>)
 800e2d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e2d8:	4b42      	ldr	r3, [pc, #264]	; (800e3e4 <pvPortMalloc+0x18c>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2de:	e004      	b.n	800e2ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d903      	bls.n	800e2fc <pvPortMalloc+0xa4>
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1f1      	bne.n	800e2e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e2fc:	4b36      	ldr	r3, [pc, #216]	; (800e3d8 <pvPortMalloc+0x180>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e302:	429a      	cmp	r2, r3
 800e304:	d050      	beq.n	800e3a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e306:	6a3b      	ldr	r3, [r7, #32]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2208      	movs	r2, #8
 800e30c:	4413      	add	r3, r2
 800e30e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31a:	685a      	ldr	r2, [r3, #4]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	1ad2      	subs	r2, r2, r3
 800e320:	2308      	movs	r3, #8
 800e322:	005b      	lsls	r3, r3, #1
 800e324:	429a      	cmp	r2, r3
 800e326:	d91f      	bls.n	800e368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	4413      	add	r3, r2
 800e32e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	f003 0307 	and.w	r3, r3, #7
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00a      	beq.n	800e350 <pvPortMalloc+0xf8>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	613b      	str	r3, [r7, #16]
}
 800e34c:	bf00      	nop
 800e34e:	e7fe      	b.n	800e34e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e352:	685a      	ldr	r2, [r3, #4]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	1ad2      	subs	r2, r2, r3
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e362:	69b8      	ldr	r0, [r7, #24]
 800e364:	f000 f908 	bl	800e578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e368:	4b1d      	ldr	r3, [pc, #116]	; (800e3e0 <pvPortMalloc+0x188>)
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	4a1b      	ldr	r2, [pc, #108]	; (800e3e0 <pvPortMalloc+0x188>)
 800e374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e376:	4b1a      	ldr	r3, [pc, #104]	; (800e3e0 <pvPortMalloc+0x188>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	4b1b      	ldr	r3, [pc, #108]	; (800e3e8 <pvPortMalloc+0x190>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d203      	bcs.n	800e38a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e382:	4b17      	ldr	r3, [pc, #92]	; (800e3e0 <pvPortMalloc+0x188>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a18      	ldr	r2, [pc, #96]	; (800e3e8 <pvPortMalloc+0x190>)
 800e388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	4b13      	ldr	r3, [pc, #76]	; (800e3dc <pvPortMalloc+0x184>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	431a      	orrs	r2, r3
 800e394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	2200      	movs	r2, #0
 800e39c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e39e:	4b13      	ldr	r3, [pc, #76]	; (800e3ec <pvPortMalloc+0x194>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	4a11      	ldr	r2, [pc, #68]	; (800e3ec <pvPortMalloc+0x194>)
 800e3a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e3a8:	f7fe fd06 	bl	800cdb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	f003 0307 	and.w	r3, r3, #7
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00a      	beq.n	800e3cc <pvPortMalloc+0x174>
	__asm volatile
 800e3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ba:	f383 8811 	msr	BASEPRI, r3
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	60fb      	str	r3, [r7, #12]
}
 800e3c8:	bf00      	nop
 800e3ca:	e7fe      	b.n	800e3ca <pvPortMalloc+0x172>
	return pvReturn;
 800e3cc:	69fb      	ldr	r3, [r7, #28]
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3728      	adds	r7, #40	; 0x28
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	2000500c 	.word	0x2000500c
 800e3dc:	20005020 	.word	0x20005020
 800e3e0:	20005010 	.word	0x20005010
 800e3e4:	20005004 	.word	0x20005004
 800e3e8:	20005014 	.word	0x20005014
 800e3ec:	20005018 	.word	0x20005018

0800e3f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b086      	sub	sp, #24
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d04d      	beq.n	800e49e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e402:	2308      	movs	r3, #8
 800e404:	425b      	negs	r3, r3
 800e406:	697a      	ldr	r2, [r7, #20]
 800e408:	4413      	add	r3, r2
 800e40a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	685a      	ldr	r2, [r3, #4]
 800e414:	4b24      	ldr	r3, [pc, #144]	; (800e4a8 <vPortFree+0xb8>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4013      	ands	r3, r2
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d10a      	bne.n	800e434 <vPortFree+0x44>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	60fb      	str	r3, [r7, #12]
}
 800e430:	bf00      	nop
 800e432:	e7fe      	b.n	800e432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00a      	beq.n	800e452 <vPortFree+0x62>
	__asm volatile
 800e43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e440:	f383 8811 	msr	BASEPRI, r3
 800e444:	f3bf 8f6f 	isb	sy
 800e448:	f3bf 8f4f 	dsb	sy
 800e44c:	60bb      	str	r3, [r7, #8]
}
 800e44e:	bf00      	nop
 800e450:	e7fe      	b.n	800e450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	685a      	ldr	r2, [r3, #4]
 800e456:	4b14      	ldr	r3, [pc, #80]	; (800e4a8 <vPortFree+0xb8>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4013      	ands	r3, r2
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d01e      	beq.n	800e49e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d11a      	bne.n	800e49e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	685a      	ldr	r2, [r3, #4]
 800e46c:	4b0e      	ldr	r3, [pc, #56]	; (800e4a8 <vPortFree+0xb8>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	43db      	mvns	r3, r3
 800e472:	401a      	ands	r2, r3
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e478:	f7fe fc90 	bl	800cd9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	685a      	ldr	r2, [r3, #4]
 800e480:	4b0a      	ldr	r3, [pc, #40]	; (800e4ac <vPortFree+0xbc>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4413      	add	r3, r2
 800e486:	4a09      	ldr	r2, [pc, #36]	; (800e4ac <vPortFree+0xbc>)
 800e488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e48a:	6938      	ldr	r0, [r7, #16]
 800e48c:	f000 f874 	bl	800e578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e490:	4b07      	ldr	r3, [pc, #28]	; (800e4b0 <vPortFree+0xc0>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	3301      	adds	r3, #1
 800e496:	4a06      	ldr	r2, [pc, #24]	; (800e4b0 <vPortFree+0xc0>)
 800e498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e49a:	f7fe fc8d 	bl	800cdb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e49e:	bf00      	nop
 800e4a0:	3718      	adds	r7, #24
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20005020 	.word	0x20005020
 800e4ac:	20005010 	.word	0x20005010
 800e4b0:	2000501c 	.word	0x2000501c

0800e4b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b085      	sub	sp, #20
 800e4b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e4ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e4be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e4c0:	4b27      	ldr	r3, [pc, #156]	; (800e560 <prvHeapInit+0xac>)
 800e4c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f003 0307 	and.w	r3, r3, #7
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d00c      	beq.n	800e4e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3307      	adds	r3, #7
 800e4d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f023 0307 	bic.w	r3, r3, #7
 800e4da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4dc:	68ba      	ldr	r2, [r7, #8]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	1ad3      	subs	r3, r2, r3
 800e4e2:	4a1f      	ldr	r2, [pc, #124]	; (800e560 <prvHeapInit+0xac>)
 800e4e4:	4413      	add	r3, r2
 800e4e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4ec:	4a1d      	ldr	r2, [pc, #116]	; (800e564 <prvHeapInit+0xb0>)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e4f2:	4b1c      	ldr	r3, [pc, #112]	; (800e564 <prvHeapInit+0xb0>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e500:	2208      	movs	r2, #8
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	1a9b      	subs	r3, r3, r2
 800e506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f023 0307 	bic.w	r3, r3, #7
 800e50e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4a15      	ldr	r2, [pc, #84]	; (800e568 <prvHeapInit+0xb4>)
 800e514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e516:	4b14      	ldr	r3, [pc, #80]	; (800e568 <prvHeapInit+0xb4>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2200      	movs	r2, #0
 800e51c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e51e:	4b12      	ldr	r3, [pc, #72]	; (800e568 <prvHeapInit+0xb4>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	2200      	movs	r2, #0
 800e524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	1ad2      	subs	r2, r2, r3
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e534:	4b0c      	ldr	r3, [pc, #48]	; (800e568 <prvHeapInit+0xb4>)
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	4a0a      	ldr	r2, [pc, #40]	; (800e56c <prvHeapInit+0xb8>)
 800e542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	4a09      	ldr	r2, [pc, #36]	; (800e570 <prvHeapInit+0xbc>)
 800e54a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e54c:	4b09      	ldr	r3, [pc, #36]	; (800e574 <prvHeapInit+0xc0>)
 800e54e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e552:	601a      	str	r2, [r3, #0]
}
 800e554:	bf00      	nop
 800e556:	3714      	adds	r7, #20
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr
 800e560:	20001404 	.word	0x20001404
 800e564:	20005004 	.word	0x20005004
 800e568:	2000500c 	.word	0x2000500c
 800e56c:	20005014 	.word	0x20005014
 800e570:	20005010 	.word	0x20005010
 800e574:	20005020 	.word	0x20005020

0800e578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e578:	b480      	push	{r7}
 800e57a:	b085      	sub	sp, #20
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e580:	4b28      	ldr	r3, [pc, #160]	; (800e624 <prvInsertBlockIntoFreeList+0xac>)
 800e582:	60fb      	str	r3, [r7, #12]
 800e584:	e002      	b.n	800e58c <prvInsertBlockIntoFreeList+0x14>
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	429a      	cmp	r2, r3
 800e594:	d8f7      	bhi.n	800e586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	4413      	add	r3, r2
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d108      	bne.n	800e5ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	685a      	ldr	r2, [r3, #4]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	441a      	add	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	441a      	add	r2, r3
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d118      	bne.n	800e600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	4b15      	ldr	r3, [pc, #84]	; (800e628 <prvInsertBlockIntoFreeList+0xb0>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d00d      	beq.n	800e5f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	685a      	ldr	r2, [r3, #4]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	441a      	add	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	601a      	str	r2, [r3, #0]
 800e5f4:	e008      	b.n	800e608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e5f6:	4b0c      	ldr	r3, [pc, #48]	; (800e628 <prvInsertBlockIntoFreeList+0xb0>)
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	601a      	str	r2, [r3, #0]
 800e5fe:	e003      	b.n	800e608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d002      	beq.n	800e616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e616:	bf00      	nop
 800e618:	3714      	adds	r7, #20
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	20005004 	.word	0x20005004
 800e628:	2000500c 	.word	0x2000500c

0800e62c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e630:	2200      	movs	r2, #0
 800e632:	4912      	ldr	r1, [pc, #72]	; (800e67c <MX_USB_DEVICE_Init+0x50>)
 800e634:	4812      	ldr	r0, [pc, #72]	; (800e680 <MX_USB_DEVICE_Init+0x54>)
 800e636:	f7fb ff73 	bl	800a520 <USBD_Init>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d001      	beq.n	800e644 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e640:	f7f2 fe54 	bl	80012ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e644:	490f      	ldr	r1, [pc, #60]	; (800e684 <MX_USB_DEVICE_Init+0x58>)
 800e646:	480e      	ldr	r0, [pc, #56]	; (800e680 <MX_USB_DEVICE_Init+0x54>)
 800e648:	f7fb ff9a 	bl	800a580 <USBD_RegisterClass>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d001      	beq.n	800e656 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e652:	f7f2 fe4b 	bl	80012ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e656:	490c      	ldr	r1, [pc, #48]	; (800e688 <MX_USB_DEVICE_Init+0x5c>)
 800e658:	4809      	ldr	r0, [pc, #36]	; (800e680 <MX_USB_DEVICE_Init+0x54>)
 800e65a:	f7fb fe8b 	bl	800a374 <USBD_CDC_RegisterInterface>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	d001      	beq.n	800e668 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e664:	f7f2 fe42 	bl	80012ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e668:	4805      	ldr	r0, [pc, #20]	; (800e680 <MX_USB_DEVICE_Init+0x54>)
 800e66a:	f7fb ffbf 	bl	800a5ec <USBD_Start>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d001      	beq.n	800e678 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e674:	f7f2 fe3a 	bl	80012ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e678:	bf00      	nop
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	2000012c 	.word	0x2000012c
 800e680:	20005024 	.word	0x20005024
 800e684:	20000094 	.word	0x20000094
 800e688:	20000118 	.word	0x20000118

0800e68c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e690:	2200      	movs	r2, #0
 800e692:	4905      	ldr	r1, [pc, #20]	; (800e6a8 <CDC_Init_FS+0x1c>)
 800e694:	4805      	ldr	r0, [pc, #20]	; (800e6ac <CDC_Init_FS+0x20>)
 800e696:	f7fb fe87 	bl	800a3a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e69a:	4905      	ldr	r1, [pc, #20]	; (800e6b0 <CDC_Init_FS+0x24>)
 800e69c:	4803      	ldr	r0, [pc, #12]	; (800e6ac <CDC_Init_FS+0x20>)
 800e69e:	f7fb fea5 	bl	800a3ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e6a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	20005b00 	.word	0x20005b00
 800e6ac:	20005024 	.word	0x20005024
 800e6b0:	20005300 	.word	0x20005300

0800e6b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e6b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	6039      	str	r1, [r7, #0]
 800e6ce:	71fb      	strb	r3, [r7, #7]
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e6d4:	79fb      	ldrb	r3, [r7, #7]
 800e6d6:	2b23      	cmp	r3, #35	; 0x23
 800e6d8:	d84a      	bhi.n	800e770 <CDC_Control_FS+0xac>
 800e6da:	a201      	add	r2, pc, #4	; (adr r2, 800e6e0 <CDC_Control_FS+0x1c>)
 800e6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e0:	0800e771 	.word	0x0800e771
 800e6e4:	0800e771 	.word	0x0800e771
 800e6e8:	0800e771 	.word	0x0800e771
 800e6ec:	0800e771 	.word	0x0800e771
 800e6f0:	0800e771 	.word	0x0800e771
 800e6f4:	0800e771 	.word	0x0800e771
 800e6f8:	0800e771 	.word	0x0800e771
 800e6fc:	0800e771 	.word	0x0800e771
 800e700:	0800e771 	.word	0x0800e771
 800e704:	0800e771 	.word	0x0800e771
 800e708:	0800e771 	.word	0x0800e771
 800e70c:	0800e771 	.word	0x0800e771
 800e710:	0800e771 	.word	0x0800e771
 800e714:	0800e771 	.word	0x0800e771
 800e718:	0800e771 	.word	0x0800e771
 800e71c:	0800e771 	.word	0x0800e771
 800e720:	0800e771 	.word	0x0800e771
 800e724:	0800e771 	.word	0x0800e771
 800e728:	0800e771 	.word	0x0800e771
 800e72c:	0800e771 	.word	0x0800e771
 800e730:	0800e771 	.word	0x0800e771
 800e734:	0800e771 	.word	0x0800e771
 800e738:	0800e771 	.word	0x0800e771
 800e73c:	0800e771 	.word	0x0800e771
 800e740:	0800e771 	.word	0x0800e771
 800e744:	0800e771 	.word	0x0800e771
 800e748:	0800e771 	.word	0x0800e771
 800e74c:	0800e771 	.word	0x0800e771
 800e750:	0800e771 	.word	0x0800e771
 800e754:	0800e771 	.word	0x0800e771
 800e758:	0800e771 	.word	0x0800e771
 800e75c:	0800e771 	.word	0x0800e771
 800e760:	0800e771 	.word	0x0800e771
 800e764:	0800e771 	.word	0x0800e771
 800e768:	0800e771 	.word	0x0800e771
 800e76c:	0800e771 	.word	0x0800e771
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e770:	bf00      	nop
  }

  return (USBD_OK);
 800e772:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e774:	4618      	mov	r0, r3
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e78a:	6879      	ldr	r1, [r7, #4]
 800e78c:	4805      	ldr	r0, [pc, #20]	; (800e7a4 <CDC_Receive_FS+0x24>)
 800e78e:	f7fb fe2d 	bl	800a3ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e792:	4804      	ldr	r0, [pc, #16]	; (800e7a4 <CDC_Receive_FS+0x24>)
 800e794:	f7fb fe8e 	bl	800a4b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e798:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	20005024 	.word	0x20005024

0800e7a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e7b8:	4b0d      	ldr	r3, [pc, #52]	; (800e7f0 <CDC_Transmit_FS+0x48>)
 800e7ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e00b      	b.n	800e7e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e7ce:	887b      	ldrh	r3, [r7, #2]
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	6879      	ldr	r1, [r7, #4]
 800e7d4:	4806      	ldr	r0, [pc, #24]	; (800e7f0 <CDC_Transmit_FS+0x48>)
 800e7d6:	f7fb fde7 	bl	800a3a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e7da:	4805      	ldr	r0, [pc, #20]	; (800e7f0 <CDC_Transmit_FS+0x48>)
 800e7dc:	f7fb fe24 	bl	800a428 <USBD_CDC_TransmitPacket>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	20005024 	.word	0x20005024

0800e7f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b087      	sub	sp, #28
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	4613      	mov	r3, r2
 800e800:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e802:	2300      	movs	r3, #0
 800e804:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	371c      	adds	r7, #28
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr
	...

0800e818 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	4603      	mov	r3, r0
 800e820:	6039      	str	r1, [r7, #0]
 800e822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	2212      	movs	r2, #18
 800e828:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e82a:	4b03      	ldr	r3, [pc, #12]	; (800e838 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr
 800e838:	20000148 	.word	0x20000148

0800e83c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b083      	sub	sp, #12
 800e840:	af00      	add	r7, sp, #0
 800e842:	4603      	mov	r3, r0
 800e844:	6039      	str	r1, [r7, #0]
 800e846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2204      	movs	r2, #4
 800e84c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e84e:	4b03      	ldr	r3, [pc, #12]	; (800e85c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e850:	4618      	mov	r0, r3
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr
 800e85c:	2000015c 	.word	0x2000015c

0800e860 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	4603      	mov	r3, r0
 800e868:	6039      	str	r1, [r7, #0]
 800e86a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e86c:	79fb      	ldrb	r3, [r7, #7]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d105      	bne.n	800e87e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	4907      	ldr	r1, [pc, #28]	; (800e894 <USBD_FS_ProductStrDescriptor+0x34>)
 800e876:	4808      	ldr	r0, [pc, #32]	; (800e898 <USBD_FS_ProductStrDescriptor+0x38>)
 800e878:	f7fd f864 	bl	800b944 <USBD_GetString>
 800e87c:	e004      	b.n	800e888 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e87e:	683a      	ldr	r2, [r7, #0]
 800e880:	4904      	ldr	r1, [pc, #16]	; (800e894 <USBD_FS_ProductStrDescriptor+0x34>)
 800e882:	4805      	ldr	r0, [pc, #20]	; (800e898 <USBD_FS_ProductStrDescriptor+0x38>)
 800e884:	f7fd f85e 	bl	800b944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e888:	4b02      	ldr	r3, [pc, #8]	; (800e894 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3708      	adds	r7, #8
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	20006300 	.word	0x20006300
 800e898:	08011dc8 	.word	0x08011dc8

0800e89c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	6039      	str	r1, [r7, #0]
 800e8a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e8a8:	683a      	ldr	r2, [r7, #0]
 800e8aa:	4904      	ldr	r1, [pc, #16]	; (800e8bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e8ac:	4804      	ldr	r0, [pc, #16]	; (800e8c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e8ae:	f7fd f849 	bl	800b944 <USBD_GetString>
  return USBD_StrDesc;
 800e8b2:	4b02      	ldr	r3, [pc, #8]	; (800e8bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	20006300 	.word	0x20006300
 800e8c0:	08011de0 	.word	0x08011de0

0800e8c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	6039      	str	r1, [r7, #0]
 800e8ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	221a      	movs	r2, #26
 800e8d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e8d6:	f000 f843 	bl	800e960 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e8da:	4b02      	ldr	r3, [pc, #8]	; (800e8e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	20000160 	.word	0x20000160

0800e8e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	6039      	str	r1, [r7, #0]
 800e8f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e8f4:	79fb      	ldrb	r3, [r7, #7]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d105      	bne.n	800e906 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e8fa:	683a      	ldr	r2, [r7, #0]
 800e8fc:	4907      	ldr	r1, [pc, #28]	; (800e91c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e8fe:	4808      	ldr	r0, [pc, #32]	; (800e920 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e900:	f7fd f820 	bl	800b944 <USBD_GetString>
 800e904:	e004      	b.n	800e910 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	4904      	ldr	r1, [pc, #16]	; (800e91c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e90a:	4805      	ldr	r0, [pc, #20]	; (800e920 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e90c:	f7fd f81a 	bl	800b944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e910:	4b02      	ldr	r3, [pc, #8]	; (800e91c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e912:	4618      	mov	r0, r3
 800e914:	3708      	adds	r7, #8
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	20006300 	.word	0x20006300
 800e920:	08011df4 	.word	0x08011df4

0800e924 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	4603      	mov	r3, r0
 800e92c:	6039      	str	r1, [r7, #0]
 800e92e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e930:	79fb      	ldrb	r3, [r7, #7]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d105      	bne.n	800e942 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e936:	683a      	ldr	r2, [r7, #0]
 800e938:	4907      	ldr	r1, [pc, #28]	; (800e958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e93a:	4808      	ldr	r0, [pc, #32]	; (800e95c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e93c:	f7fd f802 	bl	800b944 <USBD_GetString>
 800e940:	e004      	b.n	800e94c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e942:	683a      	ldr	r2, [r7, #0]
 800e944:	4904      	ldr	r1, [pc, #16]	; (800e958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e946:	4805      	ldr	r0, [pc, #20]	; (800e95c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e948:	f7fc fffc 	bl	800b944 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e94c:	4b02      	ldr	r3, [pc, #8]	; (800e958 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3708      	adds	r7, #8
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	20006300 	.word	0x20006300
 800e95c:	08011e00 	.word	0x08011e00

0800e960 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e966:	4b0f      	ldr	r3, [pc, #60]	; (800e9a4 <Get_SerialNum+0x44>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e96c:	4b0e      	ldr	r3, [pc, #56]	; (800e9a8 <Get_SerialNum+0x48>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e972:	4b0e      	ldr	r3, [pc, #56]	; (800e9ac <Get_SerialNum+0x4c>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4413      	add	r3, r2
 800e97e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d009      	beq.n	800e99a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e986:	2208      	movs	r2, #8
 800e988:	4909      	ldr	r1, [pc, #36]	; (800e9b0 <Get_SerialNum+0x50>)
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f000 f814 	bl	800e9b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e990:	2204      	movs	r2, #4
 800e992:	4908      	ldr	r1, [pc, #32]	; (800e9b4 <Get_SerialNum+0x54>)
 800e994:	68b8      	ldr	r0, [r7, #8]
 800e996:	f000 f80f 	bl	800e9b8 <IntToUnicode>
  }
}
 800e99a:	bf00      	nop
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	1fff7a10 	.word	0x1fff7a10
 800e9a8:	1fff7a14 	.word	0x1fff7a14
 800e9ac:	1fff7a18 	.word	0x1fff7a18
 800e9b0:	20000162 	.word	0x20000162
 800e9b4:	20000172 	.word	0x20000172

0800e9b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b087      	sub	sp, #28
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	75fb      	strb	r3, [r7, #23]
 800e9ce:	e027      	b.n	800ea20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	0f1b      	lsrs	r3, r3, #28
 800e9d4:	2b09      	cmp	r3, #9
 800e9d6:	d80b      	bhi.n	800e9f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	0f1b      	lsrs	r3, r3, #28
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	7dfb      	ldrb	r3, [r7, #23]
 800e9e0:	005b      	lsls	r3, r3, #1
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	440b      	add	r3, r1
 800e9e8:	3230      	adds	r2, #48	; 0x30
 800e9ea:	b2d2      	uxtb	r2, r2
 800e9ec:	701a      	strb	r2, [r3, #0]
 800e9ee:	e00a      	b.n	800ea06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	0f1b      	lsrs	r3, r3, #28
 800e9f4:	b2da      	uxtb	r2, r3
 800e9f6:	7dfb      	ldrb	r3, [r7, #23]
 800e9f8:	005b      	lsls	r3, r3, #1
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	440b      	add	r3, r1
 800ea00:	3237      	adds	r2, #55	; 0x37
 800ea02:	b2d2      	uxtb	r2, r2
 800ea04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	011b      	lsls	r3, r3, #4
 800ea0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ea0c:	7dfb      	ldrb	r3, [r7, #23]
 800ea0e:	005b      	lsls	r3, r3, #1
 800ea10:	3301      	adds	r3, #1
 800ea12:	68ba      	ldr	r2, [r7, #8]
 800ea14:	4413      	add	r3, r2
 800ea16:	2200      	movs	r2, #0
 800ea18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ea1a:	7dfb      	ldrb	r3, [r7, #23]
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	75fb      	strb	r3, [r7, #23]
 800ea20:	7dfa      	ldrb	r2, [r7, #23]
 800ea22:	79fb      	ldrb	r3, [r7, #7]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d3d3      	bcc.n	800e9d0 <IntToUnicode+0x18>
  }
}
 800ea28:	bf00      	nop
 800ea2a:	bf00      	nop
 800ea2c:	371c      	adds	r7, #28
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr
	...

0800ea38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b08a      	sub	sp, #40	; 0x28
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea40:	f107 0314 	add.w	r3, r7, #20
 800ea44:	2200      	movs	r2, #0
 800ea46:	601a      	str	r2, [r3, #0]
 800ea48:	605a      	str	r2, [r3, #4]
 800ea4a:	609a      	str	r2, [r3, #8]
 800ea4c:	60da      	str	r2, [r3, #12]
 800ea4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea58:	d13a      	bne.n	800ead0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	613b      	str	r3, [r7, #16]
 800ea5e:	4b1e      	ldr	r3, [pc, #120]	; (800ead8 <HAL_PCD_MspInit+0xa0>)
 800ea60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea62:	4a1d      	ldr	r2, [pc, #116]	; (800ead8 <HAL_PCD_MspInit+0xa0>)
 800ea64:	f043 0301 	orr.w	r3, r3, #1
 800ea68:	6313      	str	r3, [r2, #48]	; 0x30
 800ea6a:	4b1b      	ldr	r3, [pc, #108]	; (800ead8 <HAL_PCD_MspInit+0xa0>)
 800ea6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea6e:	f003 0301 	and.w	r3, r3, #1
 800ea72:	613b      	str	r3, [r7, #16]
 800ea74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ea76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ea7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea7c:	2302      	movs	r3, #2
 800ea7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea80:	2300      	movs	r3, #0
 800ea82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea84:	2303      	movs	r3, #3
 800ea86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ea88:	230a      	movs	r3, #10
 800ea8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea8c:	f107 0314 	add.w	r3, r7, #20
 800ea90:	4619      	mov	r1, r3
 800ea92:	4812      	ldr	r0, [pc, #72]	; (800eadc <HAL_PCD_MspInit+0xa4>)
 800ea94:	f7f5 f930 	bl	8003cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ea98:	4b0f      	ldr	r3, [pc, #60]	; (800ead8 <HAL_PCD_MspInit+0xa0>)
 800ea9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea9c:	4a0e      	ldr	r2, [pc, #56]	; (800ead8 <HAL_PCD_MspInit+0xa0>)
 800ea9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eaa2:	6353      	str	r3, [r2, #52]	; 0x34
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	60fb      	str	r3, [r7, #12]
 800eaa8:	4b0b      	ldr	r3, [pc, #44]	; (800ead8 <HAL_PCD_MspInit+0xa0>)
 800eaaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaac:	4a0a      	ldr	r2, [pc, #40]	; (800ead8 <HAL_PCD_MspInit+0xa0>)
 800eaae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eab2:	6453      	str	r3, [r2, #68]	; 0x44
 800eab4:	4b08      	ldr	r3, [pc, #32]	; (800ead8 <HAL_PCD_MspInit+0xa0>)
 800eab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eabc:	60fb      	str	r3, [r7, #12]
 800eabe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800eac0:	2200      	movs	r2, #0
 800eac2:	2105      	movs	r1, #5
 800eac4:	2043      	movs	r0, #67	; 0x43
 800eac6:	f7f4 fc99 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eaca:	2043      	movs	r0, #67	; 0x43
 800eacc:	f7f4 fcb2 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ead0:	bf00      	nop
 800ead2:	3728      	adds	r7, #40	; 0x28
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	40023800 	.word	0x40023800
 800eadc:	40020000 	.word	0x40020000

0800eae0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	f7fb fdc5 	bl	800a686 <USBD_LL_SetupStage>
}
 800eafc:	bf00      	nop
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800eb16:	78fa      	ldrb	r2, [r7, #3]
 800eb18:	6879      	ldr	r1, [r7, #4]
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	00db      	lsls	r3, r3, #3
 800eb1e:	4413      	add	r3, r2
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	440b      	add	r3, r1
 800eb24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	78fb      	ldrb	r3, [r7, #3]
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	f7fb fdff 	bl	800a730 <USBD_LL_DataOutStage>
}
 800eb32:	bf00      	nop
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b082      	sub	sp, #8
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
 800eb42:	460b      	mov	r3, r1
 800eb44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800eb4c:	78fa      	ldrb	r2, [r7, #3]
 800eb4e:	6879      	ldr	r1, [r7, #4]
 800eb50:	4613      	mov	r3, r2
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	4413      	add	r3, r2
 800eb56:	009b      	lsls	r3, r3, #2
 800eb58:	440b      	add	r3, r1
 800eb5a:	334c      	adds	r3, #76	; 0x4c
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	78fb      	ldrb	r3, [r7, #3]
 800eb60:	4619      	mov	r1, r3
 800eb62:	f7fb fe98 	bl	800a896 <USBD_LL_DataInStage>
}
 800eb66:	bf00      	nop
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b082      	sub	sp, #8
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7fb ffcc 	bl	800ab1a <USBD_LL_SOF>
}
 800eb82:	bf00      	nop
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b084      	sub	sp, #16
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eb92:	2301      	movs	r3, #1
 800eb94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d102      	bne.n	800eba4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	73fb      	strb	r3, [r7, #15]
 800eba2:	e008      	b.n	800ebb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	d102      	bne.n	800ebb2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ebac:	2301      	movs	r3, #1
 800ebae:	73fb      	strb	r3, [r7, #15]
 800ebb0:	e001      	b.n	800ebb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ebb2:	f7f2 fb9b 	bl	80012ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ebbc:	7bfa      	ldrb	r2, [r7, #15]
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fb ff6c 	bl	800aa9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fb ff14 	bl	800a9fa <USBD_LL_Reset>
}
 800ebd2:	bf00      	nop
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
	...

0800ebdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7fb ff67 	bl	800aabe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	6812      	ldr	r2, [r2, #0]
 800ebfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ec02:	f043 0301 	orr.w	r3, r3, #1
 800ec06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6a1b      	ldr	r3, [r3, #32]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d005      	beq.n	800ec1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec10:	4b04      	ldr	r3, [pc, #16]	; (800ec24 <HAL_PCD_SuspendCallback+0x48>)
 800ec12:	691b      	ldr	r3, [r3, #16]
 800ec14:	4a03      	ldr	r2, [pc, #12]	; (800ec24 <HAL_PCD_SuspendCallback+0x48>)
 800ec16:	f043 0306 	orr.w	r3, r3, #6
 800ec1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ec1c:	bf00      	nop
 800ec1e:	3708      	adds	r7, #8
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	e000ed00 	.word	0xe000ed00

0800ec28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fb ff57 	bl	800aaea <USBD_LL_Resume>
}
 800ec3c:	bf00      	nop
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec56:	78fa      	ldrb	r2, [r7, #3]
 800ec58:	4611      	mov	r1, r2
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fb ffaf 	bl	800abbe <USBD_LL_IsoOUTIncomplete>
}
 800ec60:	bf00      	nop
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	460b      	mov	r3, r1
 800ec72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec7a:	78fa      	ldrb	r2, [r7, #3]
 800ec7c:	4611      	mov	r1, r2
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fb ff6b 	bl	800ab5a <USBD_LL_IsoINIncomplete>
}
 800ec84:	bf00      	nop
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fb ffc1 	bl	800ac22 <USBD_LL_DevConnected>
}
 800eca0:	bf00      	nop
 800eca2:	3708      	adds	r7, #8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fb ffbe 	bl	800ac38 <USBD_LL_DevDisconnected>
}
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d13c      	bne.n	800ed4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ecd4:	4a20      	ldr	r2, [pc, #128]	; (800ed58 <USBD_LL_Init+0x94>)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a1e      	ldr	r2, [pc, #120]	; (800ed58 <USBD_LL_Init+0x94>)
 800ece0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ece4:	4b1c      	ldr	r3, [pc, #112]	; (800ed58 <USBD_LL_Init+0x94>)
 800ece6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ecea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ecec:	4b1a      	ldr	r3, [pc, #104]	; (800ed58 <USBD_LL_Init+0x94>)
 800ecee:	2204      	movs	r2, #4
 800ecf0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ecf2:	4b19      	ldr	r3, [pc, #100]	; (800ed58 <USBD_LL_Init+0x94>)
 800ecf4:	2202      	movs	r2, #2
 800ecf6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ecf8:	4b17      	ldr	r3, [pc, #92]	; (800ed58 <USBD_LL_Init+0x94>)
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ecfe:	4b16      	ldr	r3, [pc, #88]	; (800ed58 <USBD_LL_Init+0x94>)
 800ed00:	2202      	movs	r2, #2
 800ed02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ed04:	4b14      	ldr	r3, [pc, #80]	; (800ed58 <USBD_LL_Init+0x94>)
 800ed06:	2200      	movs	r2, #0
 800ed08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ed0a:	4b13      	ldr	r3, [pc, #76]	; (800ed58 <USBD_LL_Init+0x94>)
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ed10:	4b11      	ldr	r3, [pc, #68]	; (800ed58 <USBD_LL_Init+0x94>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ed16:	4b10      	ldr	r3, [pc, #64]	; (800ed58 <USBD_LL_Init+0x94>)
 800ed18:	2200      	movs	r2, #0
 800ed1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ed1c:	4b0e      	ldr	r3, [pc, #56]	; (800ed58 <USBD_LL_Init+0x94>)
 800ed1e:	2200      	movs	r2, #0
 800ed20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ed22:	480d      	ldr	r0, [pc, #52]	; (800ed58 <USBD_LL_Init+0x94>)
 800ed24:	f7f5 ff53 	bl	8004bce <HAL_PCD_Init>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d001      	beq.n	800ed32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ed2e:	f7f2 fadd 	bl	80012ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ed32:	2180      	movs	r1, #128	; 0x80
 800ed34:	4808      	ldr	r0, [pc, #32]	; (800ed58 <USBD_LL_Init+0x94>)
 800ed36:	f7f7 f9aa 	bl	800608e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ed3a:	2240      	movs	r2, #64	; 0x40
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	4806      	ldr	r0, [pc, #24]	; (800ed58 <USBD_LL_Init+0x94>)
 800ed40:	f7f7 f95e 	bl	8006000 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ed44:	2280      	movs	r2, #128	; 0x80
 800ed46:	2101      	movs	r1, #1
 800ed48:	4803      	ldr	r0, [pc, #12]	; (800ed58 <USBD_LL_Init+0x94>)
 800ed4a:	f7f7 f959 	bl	8006000 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ed4e:	2300      	movs	r3, #0
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	20006500 	.word	0x20006500

0800ed5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed64:	2300      	movs	r3, #0
 800ed66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7f6 f848 	bl	8004e08 <HAL_PCD_Start>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed7c:	7bfb      	ldrb	r3, [r7, #15]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f000 f942 	bl	800f008 <USBD_Get_USB_Status>
 800ed84:	4603      	mov	r3, r0
 800ed86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b084      	sub	sp, #16
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
 800ed9a:	4608      	mov	r0, r1
 800ed9c:	4611      	mov	r1, r2
 800ed9e:	461a      	mov	r2, r3
 800eda0:	4603      	mov	r3, r0
 800eda2:	70fb      	strb	r3, [r7, #3]
 800eda4:	460b      	mov	r3, r1
 800eda6:	70bb      	strb	r3, [r7, #2]
 800eda8:	4613      	mov	r3, r2
 800edaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edac:	2300      	movs	r3, #0
 800edae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edb0:	2300      	movs	r3, #0
 800edb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edba:	78bb      	ldrb	r3, [r7, #2]
 800edbc:	883a      	ldrh	r2, [r7, #0]
 800edbe:	78f9      	ldrb	r1, [r7, #3]
 800edc0:	f7f6 fd19 	bl	80057f6 <HAL_PCD_EP_Open>
 800edc4:	4603      	mov	r3, r0
 800edc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edc8:	7bfb      	ldrb	r3, [r7, #15]
 800edca:	4618      	mov	r0, r3
 800edcc:	f000 f91c 	bl	800f008 <USBD_Get_USB_Status>
 800edd0:	4603      	mov	r3, r0
 800edd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b084      	sub	sp, #16
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
 800ede6:	460b      	mov	r3, r1
 800ede8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edea:	2300      	movs	r3, #0
 800edec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edee:	2300      	movs	r3, #0
 800edf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800edf8:	78fa      	ldrb	r2, [r7, #3]
 800edfa:	4611      	mov	r1, r2
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7f6 fd62 	bl	80058c6 <HAL_PCD_EP_Close>
 800ee02:	4603      	mov	r3, r0
 800ee04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee06:	7bfb      	ldrb	r3, [r7, #15]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f000 f8fd 	bl	800f008 <USBD_Get_USB_Status>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	460b      	mov	r3, r1
 800ee26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee36:	78fa      	ldrb	r2, [r7, #3]
 800ee38:	4611      	mov	r1, r2
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7f6 fe3a 	bl	8005ab4 <HAL_PCD_EP_SetStall>
 800ee40:	4603      	mov	r3, r0
 800ee42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee44:	7bfb      	ldrb	r3, [r7, #15]
 800ee46:	4618      	mov	r0, r3
 800ee48:	f000 f8de 	bl	800f008 <USBD_Get_USB_Status>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3710      	adds	r7, #16
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}

0800ee5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee5a:	b580      	push	{r7, lr}
 800ee5c:	b084      	sub	sp, #16
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
 800ee62:	460b      	mov	r3, r1
 800ee64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee74:	78fa      	ldrb	r2, [r7, #3]
 800ee76:	4611      	mov	r1, r2
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7f6 fe7f 	bl	8005b7c <HAL_PCD_EP_ClrStall>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee82:	7bfb      	ldrb	r3, [r7, #15]
 800ee84:	4618      	mov	r0, r3
 800ee86:	f000 f8bf 	bl	800f008 <USBD_Get_USB_Status>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	460b      	mov	r3, r1
 800eea2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eeaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eeac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	da0b      	bge.n	800eecc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eeb4:	78fb      	ldrb	r3, [r7, #3]
 800eeb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eeba:	68f9      	ldr	r1, [r7, #12]
 800eebc:	4613      	mov	r3, r2
 800eebe:	00db      	lsls	r3, r3, #3
 800eec0:	4413      	add	r3, r2
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	440b      	add	r3, r1
 800eec6:	333e      	adds	r3, #62	; 0x3e
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	e00b      	b.n	800eee4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eecc:	78fb      	ldrb	r3, [r7, #3]
 800eece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eed2:	68f9      	ldr	r1, [r7, #12]
 800eed4:	4613      	mov	r3, r2
 800eed6:	00db      	lsls	r3, r3, #3
 800eed8:	4413      	add	r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	440b      	add	r3, r1
 800eede:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800eee2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3714      	adds	r7, #20
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr

0800eef0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	460b      	mov	r3, r1
 800eefa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eefc:	2300      	movs	r3, #0
 800eefe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef00:	2300      	movs	r3, #0
 800ef02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ef0a:	78fa      	ldrb	r2, [r7, #3]
 800ef0c:	4611      	mov	r1, r2
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7f6 fc4c 	bl	80057ac <HAL_PCD_SetAddress>
 800ef14:	4603      	mov	r3, r0
 800ef16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f000 f874 	bl	800f008 <USBD_Get_USB_Status>
 800ef20:	4603      	mov	r3, r0
 800ef22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}

0800ef2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef2e:	b580      	push	{r7, lr}
 800ef30:	b086      	sub	sp, #24
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	60f8      	str	r0, [r7, #12]
 800ef36:	607a      	str	r2, [r7, #4]
 800ef38:	603b      	str	r3, [r7, #0]
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef42:	2300      	movs	r3, #0
 800ef44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ef4c:	7af9      	ldrb	r1, [r7, #11]
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	687a      	ldr	r2, [r7, #4]
 800ef52:	f7f6 fd65 	bl	8005a20 <HAL_PCD_EP_Transmit>
 800ef56:	4603      	mov	r3, r0
 800ef58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef5a:	7dfb      	ldrb	r3, [r7, #23]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f000 f853 	bl	800f008 <USBD_Get_USB_Status>
 800ef62:	4603      	mov	r3, r0
 800ef64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef66:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3718      	adds	r7, #24
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	60f8      	str	r0, [r7, #12]
 800ef78:	607a      	str	r2, [r7, #4]
 800ef7a:	603b      	str	r3, [r7, #0]
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef80:	2300      	movs	r3, #0
 800ef82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef84:	2300      	movs	r3, #0
 800ef86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ef8e:	7af9      	ldrb	r1, [r7, #11]
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	f7f6 fce1 	bl	800595a <HAL_PCD_EP_Receive>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef9c:	7dfb      	ldrb	r3, [r7, #23]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f000 f832 	bl	800f008 <USBD_Get_USB_Status>
 800efa4:	4603      	mov	r3, r0
 800efa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800efa8:	7dbb      	ldrb	r3, [r7, #22]
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3718      	adds	r7, #24
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}

0800efb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b082      	sub	sp, #8
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
 800efba:	460b      	mov	r3, r1
 800efbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800efc4:	78fa      	ldrb	r2, [r7, #3]
 800efc6:	4611      	mov	r1, r2
 800efc8:	4618      	mov	r0, r3
 800efca:	f7f6 fd11 	bl	80059f0 <HAL_PCD_EP_GetRxCount>
 800efce:	4603      	mov	r3, r0
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800efe0:	4b03      	ldr	r3, [pc, #12]	; (800eff0 <USBD_static_malloc+0x18>)
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	370c      	adds	r7, #12
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop
 800eff0:	20006a0c 	.word	0x20006a0c

0800eff4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]

}
 800effc:	bf00      	nop
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	4603      	mov	r3, r0
 800f010:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f012:	2300      	movs	r3, #0
 800f014:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f016:	79fb      	ldrb	r3, [r7, #7]
 800f018:	2b03      	cmp	r3, #3
 800f01a:	d817      	bhi.n	800f04c <USBD_Get_USB_Status+0x44>
 800f01c:	a201      	add	r2, pc, #4	; (adr r2, 800f024 <USBD_Get_USB_Status+0x1c>)
 800f01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f022:	bf00      	nop
 800f024:	0800f035 	.word	0x0800f035
 800f028:	0800f03b 	.word	0x0800f03b
 800f02c:	0800f041 	.word	0x0800f041
 800f030:	0800f047 	.word	0x0800f047
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f034:	2300      	movs	r3, #0
 800f036:	73fb      	strb	r3, [r7, #15]
    break;
 800f038:	e00b      	b.n	800f052 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f03a:	2303      	movs	r3, #3
 800f03c:	73fb      	strb	r3, [r7, #15]
    break;
 800f03e:	e008      	b.n	800f052 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f040:	2301      	movs	r3, #1
 800f042:	73fb      	strb	r3, [r7, #15]
    break;
 800f044:	e005      	b.n	800f052 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f046:	2303      	movs	r3, #3
 800f048:	73fb      	strb	r3, [r7, #15]
    break;
 800f04a:	e002      	b.n	800f052 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f04c:	2303      	movs	r3, #3
 800f04e:	73fb      	strb	r3, [r7, #15]
    break;
 800f050:	bf00      	nop
  }
  return usb_status;
 800f052:	7bfb      	ldrb	r3, [r7, #15]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3714      	adds	r7, #20
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <__cvt>:
 800f060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f064:	ec55 4b10 	vmov	r4, r5, d0
 800f068:	2d00      	cmp	r5, #0
 800f06a:	460e      	mov	r6, r1
 800f06c:	4619      	mov	r1, r3
 800f06e:	462b      	mov	r3, r5
 800f070:	bfbb      	ittet	lt
 800f072:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f076:	461d      	movlt	r5, r3
 800f078:	2300      	movge	r3, #0
 800f07a:	232d      	movlt	r3, #45	; 0x2d
 800f07c:	700b      	strb	r3, [r1, #0]
 800f07e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f080:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f084:	4691      	mov	r9, r2
 800f086:	f023 0820 	bic.w	r8, r3, #32
 800f08a:	bfbc      	itt	lt
 800f08c:	4622      	movlt	r2, r4
 800f08e:	4614      	movlt	r4, r2
 800f090:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f094:	d005      	beq.n	800f0a2 <__cvt+0x42>
 800f096:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f09a:	d100      	bne.n	800f09e <__cvt+0x3e>
 800f09c:	3601      	adds	r6, #1
 800f09e:	2102      	movs	r1, #2
 800f0a0:	e000      	b.n	800f0a4 <__cvt+0x44>
 800f0a2:	2103      	movs	r1, #3
 800f0a4:	ab03      	add	r3, sp, #12
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	ab02      	add	r3, sp, #8
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	ec45 4b10 	vmov	d0, r4, r5
 800f0b0:	4653      	mov	r3, sl
 800f0b2:	4632      	mov	r2, r6
 800f0b4:	f000 fe78 	bl	800fda8 <_dtoa_r>
 800f0b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f0bc:	4607      	mov	r7, r0
 800f0be:	d102      	bne.n	800f0c6 <__cvt+0x66>
 800f0c0:	f019 0f01 	tst.w	r9, #1
 800f0c4:	d022      	beq.n	800f10c <__cvt+0xac>
 800f0c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f0ca:	eb07 0906 	add.w	r9, r7, r6
 800f0ce:	d110      	bne.n	800f0f2 <__cvt+0x92>
 800f0d0:	783b      	ldrb	r3, [r7, #0]
 800f0d2:	2b30      	cmp	r3, #48	; 0x30
 800f0d4:	d10a      	bne.n	800f0ec <__cvt+0x8c>
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	2300      	movs	r3, #0
 800f0da:	4620      	mov	r0, r4
 800f0dc:	4629      	mov	r1, r5
 800f0de:	f7f1 fd03 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0e2:	b918      	cbnz	r0, 800f0ec <__cvt+0x8c>
 800f0e4:	f1c6 0601 	rsb	r6, r6, #1
 800f0e8:	f8ca 6000 	str.w	r6, [sl]
 800f0ec:	f8da 3000 	ldr.w	r3, [sl]
 800f0f0:	4499      	add	r9, r3
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	4629      	mov	r1, r5
 800f0fa:	f7f1 fcf5 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0fe:	b108      	cbz	r0, 800f104 <__cvt+0xa4>
 800f100:	f8cd 900c 	str.w	r9, [sp, #12]
 800f104:	2230      	movs	r2, #48	; 0x30
 800f106:	9b03      	ldr	r3, [sp, #12]
 800f108:	454b      	cmp	r3, r9
 800f10a:	d307      	bcc.n	800f11c <__cvt+0xbc>
 800f10c:	9b03      	ldr	r3, [sp, #12]
 800f10e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f110:	1bdb      	subs	r3, r3, r7
 800f112:	4638      	mov	r0, r7
 800f114:	6013      	str	r3, [r2, #0]
 800f116:	b004      	add	sp, #16
 800f118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f11c:	1c59      	adds	r1, r3, #1
 800f11e:	9103      	str	r1, [sp, #12]
 800f120:	701a      	strb	r2, [r3, #0]
 800f122:	e7f0      	b.n	800f106 <__cvt+0xa6>

0800f124 <__exponent>:
 800f124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f126:	4603      	mov	r3, r0
 800f128:	2900      	cmp	r1, #0
 800f12a:	bfb8      	it	lt
 800f12c:	4249      	neglt	r1, r1
 800f12e:	f803 2b02 	strb.w	r2, [r3], #2
 800f132:	bfb4      	ite	lt
 800f134:	222d      	movlt	r2, #45	; 0x2d
 800f136:	222b      	movge	r2, #43	; 0x2b
 800f138:	2909      	cmp	r1, #9
 800f13a:	7042      	strb	r2, [r0, #1]
 800f13c:	dd2a      	ble.n	800f194 <__exponent+0x70>
 800f13e:	f10d 0207 	add.w	r2, sp, #7
 800f142:	4617      	mov	r7, r2
 800f144:	260a      	movs	r6, #10
 800f146:	4694      	mov	ip, r2
 800f148:	fb91 f5f6 	sdiv	r5, r1, r6
 800f14c:	fb06 1415 	mls	r4, r6, r5, r1
 800f150:	3430      	adds	r4, #48	; 0x30
 800f152:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f156:	460c      	mov	r4, r1
 800f158:	2c63      	cmp	r4, #99	; 0x63
 800f15a:	f102 32ff 	add.w	r2, r2, #4294967295
 800f15e:	4629      	mov	r1, r5
 800f160:	dcf1      	bgt.n	800f146 <__exponent+0x22>
 800f162:	3130      	adds	r1, #48	; 0x30
 800f164:	f1ac 0402 	sub.w	r4, ip, #2
 800f168:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f16c:	1c41      	adds	r1, r0, #1
 800f16e:	4622      	mov	r2, r4
 800f170:	42ba      	cmp	r2, r7
 800f172:	d30a      	bcc.n	800f18a <__exponent+0x66>
 800f174:	f10d 0209 	add.w	r2, sp, #9
 800f178:	eba2 020c 	sub.w	r2, r2, ip
 800f17c:	42bc      	cmp	r4, r7
 800f17e:	bf88      	it	hi
 800f180:	2200      	movhi	r2, #0
 800f182:	4413      	add	r3, r2
 800f184:	1a18      	subs	r0, r3, r0
 800f186:	b003      	add	sp, #12
 800f188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f18a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f18e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f192:	e7ed      	b.n	800f170 <__exponent+0x4c>
 800f194:	2330      	movs	r3, #48	; 0x30
 800f196:	3130      	adds	r1, #48	; 0x30
 800f198:	7083      	strb	r3, [r0, #2]
 800f19a:	70c1      	strb	r1, [r0, #3]
 800f19c:	1d03      	adds	r3, r0, #4
 800f19e:	e7f1      	b.n	800f184 <__exponent+0x60>

0800f1a0 <_printf_float>:
 800f1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a4:	ed2d 8b02 	vpush	{d8}
 800f1a8:	b08d      	sub	sp, #52	; 0x34
 800f1aa:	460c      	mov	r4, r1
 800f1ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f1b0:	4616      	mov	r6, r2
 800f1b2:	461f      	mov	r7, r3
 800f1b4:	4605      	mov	r5, r0
 800f1b6:	f000 fce7 	bl	800fb88 <_localeconv_r>
 800f1ba:	f8d0 a000 	ldr.w	sl, [r0]
 800f1be:	4650      	mov	r0, sl
 800f1c0:	f7f1 f866 	bl	8000290 <strlen>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	930a      	str	r3, [sp, #40]	; 0x28
 800f1c8:	6823      	ldr	r3, [r4, #0]
 800f1ca:	9305      	str	r3, [sp, #20]
 800f1cc:	f8d8 3000 	ldr.w	r3, [r8]
 800f1d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f1d4:	3307      	adds	r3, #7
 800f1d6:	f023 0307 	bic.w	r3, r3, #7
 800f1da:	f103 0208 	add.w	r2, r3, #8
 800f1de:	f8c8 2000 	str.w	r2, [r8]
 800f1e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f1e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f1ea:	9307      	str	r3, [sp, #28]
 800f1ec:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1f0:	ee08 0a10 	vmov	s16, r0
 800f1f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f1f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1fc:	4b9e      	ldr	r3, [pc, #632]	; (800f478 <_printf_float+0x2d8>)
 800f1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f202:	f7f1 fca3 	bl	8000b4c <__aeabi_dcmpun>
 800f206:	bb88      	cbnz	r0, 800f26c <_printf_float+0xcc>
 800f208:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f20c:	4b9a      	ldr	r3, [pc, #616]	; (800f478 <_printf_float+0x2d8>)
 800f20e:	f04f 32ff 	mov.w	r2, #4294967295
 800f212:	f7f1 fc7d 	bl	8000b10 <__aeabi_dcmple>
 800f216:	bb48      	cbnz	r0, 800f26c <_printf_float+0xcc>
 800f218:	2200      	movs	r2, #0
 800f21a:	2300      	movs	r3, #0
 800f21c:	4640      	mov	r0, r8
 800f21e:	4649      	mov	r1, r9
 800f220:	f7f1 fc6c 	bl	8000afc <__aeabi_dcmplt>
 800f224:	b110      	cbz	r0, 800f22c <_printf_float+0x8c>
 800f226:	232d      	movs	r3, #45	; 0x2d
 800f228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f22c:	4a93      	ldr	r2, [pc, #588]	; (800f47c <_printf_float+0x2dc>)
 800f22e:	4b94      	ldr	r3, [pc, #592]	; (800f480 <_printf_float+0x2e0>)
 800f230:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f234:	bf94      	ite	ls
 800f236:	4690      	movls	r8, r2
 800f238:	4698      	movhi	r8, r3
 800f23a:	2303      	movs	r3, #3
 800f23c:	6123      	str	r3, [r4, #16]
 800f23e:	9b05      	ldr	r3, [sp, #20]
 800f240:	f023 0304 	bic.w	r3, r3, #4
 800f244:	6023      	str	r3, [r4, #0]
 800f246:	f04f 0900 	mov.w	r9, #0
 800f24a:	9700      	str	r7, [sp, #0]
 800f24c:	4633      	mov	r3, r6
 800f24e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f250:	4621      	mov	r1, r4
 800f252:	4628      	mov	r0, r5
 800f254:	f000 f9da 	bl	800f60c <_printf_common>
 800f258:	3001      	adds	r0, #1
 800f25a:	f040 8090 	bne.w	800f37e <_printf_float+0x1de>
 800f25e:	f04f 30ff 	mov.w	r0, #4294967295
 800f262:	b00d      	add	sp, #52	; 0x34
 800f264:	ecbd 8b02 	vpop	{d8}
 800f268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f26c:	4642      	mov	r2, r8
 800f26e:	464b      	mov	r3, r9
 800f270:	4640      	mov	r0, r8
 800f272:	4649      	mov	r1, r9
 800f274:	f7f1 fc6a 	bl	8000b4c <__aeabi_dcmpun>
 800f278:	b140      	cbz	r0, 800f28c <_printf_float+0xec>
 800f27a:	464b      	mov	r3, r9
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	bfbc      	itt	lt
 800f280:	232d      	movlt	r3, #45	; 0x2d
 800f282:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f286:	4a7f      	ldr	r2, [pc, #508]	; (800f484 <_printf_float+0x2e4>)
 800f288:	4b7f      	ldr	r3, [pc, #508]	; (800f488 <_printf_float+0x2e8>)
 800f28a:	e7d1      	b.n	800f230 <_printf_float+0x90>
 800f28c:	6863      	ldr	r3, [r4, #4]
 800f28e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f292:	9206      	str	r2, [sp, #24]
 800f294:	1c5a      	adds	r2, r3, #1
 800f296:	d13f      	bne.n	800f318 <_printf_float+0x178>
 800f298:	2306      	movs	r3, #6
 800f29a:	6063      	str	r3, [r4, #4]
 800f29c:	9b05      	ldr	r3, [sp, #20]
 800f29e:	6861      	ldr	r1, [r4, #4]
 800f2a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	9303      	str	r3, [sp, #12]
 800f2a8:	ab0a      	add	r3, sp, #40	; 0x28
 800f2aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f2ae:	ab09      	add	r3, sp, #36	; 0x24
 800f2b0:	ec49 8b10 	vmov	d0, r8, r9
 800f2b4:	9300      	str	r3, [sp, #0]
 800f2b6:	6022      	str	r2, [r4, #0]
 800f2b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f2bc:	4628      	mov	r0, r5
 800f2be:	f7ff fecf 	bl	800f060 <__cvt>
 800f2c2:	9b06      	ldr	r3, [sp, #24]
 800f2c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2c6:	2b47      	cmp	r3, #71	; 0x47
 800f2c8:	4680      	mov	r8, r0
 800f2ca:	d108      	bne.n	800f2de <_printf_float+0x13e>
 800f2cc:	1cc8      	adds	r0, r1, #3
 800f2ce:	db02      	blt.n	800f2d6 <_printf_float+0x136>
 800f2d0:	6863      	ldr	r3, [r4, #4]
 800f2d2:	4299      	cmp	r1, r3
 800f2d4:	dd41      	ble.n	800f35a <_printf_float+0x1ba>
 800f2d6:	f1ab 0302 	sub.w	r3, fp, #2
 800f2da:	fa5f fb83 	uxtb.w	fp, r3
 800f2de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f2e2:	d820      	bhi.n	800f326 <_printf_float+0x186>
 800f2e4:	3901      	subs	r1, #1
 800f2e6:	465a      	mov	r2, fp
 800f2e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f2ec:	9109      	str	r1, [sp, #36]	; 0x24
 800f2ee:	f7ff ff19 	bl	800f124 <__exponent>
 800f2f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2f4:	1813      	adds	r3, r2, r0
 800f2f6:	2a01      	cmp	r2, #1
 800f2f8:	4681      	mov	r9, r0
 800f2fa:	6123      	str	r3, [r4, #16]
 800f2fc:	dc02      	bgt.n	800f304 <_printf_float+0x164>
 800f2fe:	6822      	ldr	r2, [r4, #0]
 800f300:	07d2      	lsls	r2, r2, #31
 800f302:	d501      	bpl.n	800f308 <_printf_float+0x168>
 800f304:	3301      	adds	r3, #1
 800f306:	6123      	str	r3, [r4, #16]
 800f308:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d09c      	beq.n	800f24a <_printf_float+0xaa>
 800f310:	232d      	movs	r3, #45	; 0x2d
 800f312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f316:	e798      	b.n	800f24a <_printf_float+0xaa>
 800f318:	9a06      	ldr	r2, [sp, #24]
 800f31a:	2a47      	cmp	r2, #71	; 0x47
 800f31c:	d1be      	bne.n	800f29c <_printf_float+0xfc>
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d1bc      	bne.n	800f29c <_printf_float+0xfc>
 800f322:	2301      	movs	r3, #1
 800f324:	e7b9      	b.n	800f29a <_printf_float+0xfa>
 800f326:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f32a:	d118      	bne.n	800f35e <_printf_float+0x1be>
 800f32c:	2900      	cmp	r1, #0
 800f32e:	6863      	ldr	r3, [r4, #4]
 800f330:	dd0b      	ble.n	800f34a <_printf_float+0x1aa>
 800f332:	6121      	str	r1, [r4, #16]
 800f334:	b913      	cbnz	r3, 800f33c <_printf_float+0x19c>
 800f336:	6822      	ldr	r2, [r4, #0]
 800f338:	07d0      	lsls	r0, r2, #31
 800f33a:	d502      	bpl.n	800f342 <_printf_float+0x1a2>
 800f33c:	3301      	adds	r3, #1
 800f33e:	440b      	add	r3, r1
 800f340:	6123      	str	r3, [r4, #16]
 800f342:	65a1      	str	r1, [r4, #88]	; 0x58
 800f344:	f04f 0900 	mov.w	r9, #0
 800f348:	e7de      	b.n	800f308 <_printf_float+0x168>
 800f34a:	b913      	cbnz	r3, 800f352 <_printf_float+0x1b2>
 800f34c:	6822      	ldr	r2, [r4, #0]
 800f34e:	07d2      	lsls	r2, r2, #31
 800f350:	d501      	bpl.n	800f356 <_printf_float+0x1b6>
 800f352:	3302      	adds	r3, #2
 800f354:	e7f4      	b.n	800f340 <_printf_float+0x1a0>
 800f356:	2301      	movs	r3, #1
 800f358:	e7f2      	b.n	800f340 <_printf_float+0x1a0>
 800f35a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f360:	4299      	cmp	r1, r3
 800f362:	db05      	blt.n	800f370 <_printf_float+0x1d0>
 800f364:	6823      	ldr	r3, [r4, #0]
 800f366:	6121      	str	r1, [r4, #16]
 800f368:	07d8      	lsls	r0, r3, #31
 800f36a:	d5ea      	bpl.n	800f342 <_printf_float+0x1a2>
 800f36c:	1c4b      	adds	r3, r1, #1
 800f36e:	e7e7      	b.n	800f340 <_printf_float+0x1a0>
 800f370:	2900      	cmp	r1, #0
 800f372:	bfd4      	ite	le
 800f374:	f1c1 0202 	rsble	r2, r1, #2
 800f378:	2201      	movgt	r2, #1
 800f37a:	4413      	add	r3, r2
 800f37c:	e7e0      	b.n	800f340 <_printf_float+0x1a0>
 800f37e:	6823      	ldr	r3, [r4, #0]
 800f380:	055a      	lsls	r2, r3, #21
 800f382:	d407      	bmi.n	800f394 <_printf_float+0x1f4>
 800f384:	6923      	ldr	r3, [r4, #16]
 800f386:	4642      	mov	r2, r8
 800f388:	4631      	mov	r1, r6
 800f38a:	4628      	mov	r0, r5
 800f38c:	47b8      	blx	r7
 800f38e:	3001      	adds	r0, #1
 800f390:	d12c      	bne.n	800f3ec <_printf_float+0x24c>
 800f392:	e764      	b.n	800f25e <_printf_float+0xbe>
 800f394:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f398:	f240 80e0 	bls.w	800f55c <_printf_float+0x3bc>
 800f39c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	f7f1 fba0 	bl	8000ae8 <__aeabi_dcmpeq>
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	d034      	beq.n	800f416 <_printf_float+0x276>
 800f3ac:	4a37      	ldr	r2, [pc, #220]	; (800f48c <_printf_float+0x2ec>)
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	4631      	mov	r1, r6
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	47b8      	blx	r7
 800f3b6:	3001      	adds	r0, #1
 800f3b8:	f43f af51 	beq.w	800f25e <_printf_float+0xbe>
 800f3bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	db02      	blt.n	800f3ca <_printf_float+0x22a>
 800f3c4:	6823      	ldr	r3, [r4, #0]
 800f3c6:	07d8      	lsls	r0, r3, #31
 800f3c8:	d510      	bpl.n	800f3ec <_printf_float+0x24c>
 800f3ca:	ee18 3a10 	vmov	r3, s16
 800f3ce:	4652      	mov	r2, sl
 800f3d0:	4631      	mov	r1, r6
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	47b8      	blx	r7
 800f3d6:	3001      	adds	r0, #1
 800f3d8:	f43f af41 	beq.w	800f25e <_printf_float+0xbe>
 800f3dc:	f04f 0800 	mov.w	r8, #0
 800f3e0:	f104 091a 	add.w	r9, r4, #26
 800f3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3e6:	3b01      	subs	r3, #1
 800f3e8:	4543      	cmp	r3, r8
 800f3ea:	dc09      	bgt.n	800f400 <_printf_float+0x260>
 800f3ec:	6823      	ldr	r3, [r4, #0]
 800f3ee:	079b      	lsls	r3, r3, #30
 800f3f0:	f100 8107 	bmi.w	800f602 <_printf_float+0x462>
 800f3f4:	68e0      	ldr	r0, [r4, #12]
 800f3f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3f8:	4298      	cmp	r0, r3
 800f3fa:	bfb8      	it	lt
 800f3fc:	4618      	movlt	r0, r3
 800f3fe:	e730      	b.n	800f262 <_printf_float+0xc2>
 800f400:	2301      	movs	r3, #1
 800f402:	464a      	mov	r2, r9
 800f404:	4631      	mov	r1, r6
 800f406:	4628      	mov	r0, r5
 800f408:	47b8      	blx	r7
 800f40a:	3001      	adds	r0, #1
 800f40c:	f43f af27 	beq.w	800f25e <_printf_float+0xbe>
 800f410:	f108 0801 	add.w	r8, r8, #1
 800f414:	e7e6      	b.n	800f3e4 <_printf_float+0x244>
 800f416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dc39      	bgt.n	800f490 <_printf_float+0x2f0>
 800f41c:	4a1b      	ldr	r2, [pc, #108]	; (800f48c <_printf_float+0x2ec>)
 800f41e:	2301      	movs	r3, #1
 800f420:	4631      	mov	r1, r6
 800f422:	4628      	mov	r0, r5
 800f424:	47b8      	blx	r7
 800f426:	3001      	adds	r0, #1
 800f428:	f43f af19 	beq.w	800f25e <_printf_float+0xbe>
 800f42c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f430:	4313      	orrs	r3, r2
 800f432:	d102      	bne.n	800f43a <_printf_float+0x29a>
 800f434:	6823      	ldr	r3, [r4, #0]
 800f436:	07d9      	lsls	r1, r3, #31
 800f438:	d5d8      	bpl.n	800f3ec <_printf_float+0x24c>
 800f43a:	ee18 3a10 	vmov	r3, s16
 800f43e:	4652      	mov	r2, sl
 800f440:	4631      	mov	r1, r6
 800f442:	4628      	mov	r0, r5
 800f444:	47b8      	blx	r7
 800f446:	3001      	adds	r0, #1
 800f448:	f43f af09 	beq.w	800f25e <_printf_float+0xbe>
 800f44c:	f04f 0900 	mov.w	r9, #0
 800f450:	f104 0a1a 	add.w	sl, r4, #26
 800f454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f456:	425b      	negs	r3, r3
 800f458:	454b      	cmp	r3, r9
 800f45a:	dc01      	bgt.n	800f460 <_printf_float+0x2c0>
 800f45c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f45e:	e792      	b.n	800f386 <_printf_float+0x1e6>
 800f460:	2301      	movs	r3, #1
 800f462:	4652      	mov	r2, sl
 800f464:	4631      	mov	r1, r6
 800f466:	4628      	mov	r0, r5
 800f468:	47b8      	blx	r7
 800f46a:	3001      	adds	r0, #1
 800f46c:	f43f aef7 	beq.w	800f25e <_printf_float+0xbe>
 800f470:	f109 0901 	add.w	r9, r9, #1
 800f474:	e7ee      	b.n	800f454 <_printf_float+0x2b4>
 800f476:	bf00      	nop
 800f478:	7fefffff 	.word	0x7fefffff
 800f47c:	08013930 	.word	0x08013930
 800f480:	08013934 	.word	0x08013934
 800f484:	08013938 	.word	0x08013938
 800f488:	0801393c 	.word	0x0801393c
 800f48c:	08013940 	.word	0x08013940
 800f490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f494:	429a      	cmp	r2, r3
 800f496:	bfa8      	it	ge
 800f498:	461a      	movge	r2, r3
 800f49a:	2a00      	cmp	r2, #0
 800f49c:	4691      	mov	r9, r2
 800f49e:	dc37      	bgt.n	800f510 <_printf_float+0x370>
 800f4a0:	f04f 0b00 	mov.w	fp, #0
 800f4a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4a8:	f104 021a 	add.w	r2, r4, #26
 800f4ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f4ae:	9305      	str	r3, [sp, #20]
 800f4b0:	eba3 0309 	sub.w	r3, r3, r9
 800f4b4:	455b      	cmp	r3, fp
 800f4b6:	dc33      	bgt.n	800f520 <_printf_float+0x380>
 800f4b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	db3b      	blt.n	800f538 <_printf_float+0x398>
 800f4c0:	6823      	ldr	r3, [r4, #0]
 800f4c2:	07da      	lsls	r2, r3, #31
 800f4c4:	d438      	bmi.n	800f538 <_printf_float+0x398>
 800f4c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f4ca:	eba2 0903 	sub.w	r9, r2, r3
 800f4ce:	9b05      	ldr	r3, [sp, #20]
 800f4d0:	1ad2      	subs	r2, r2, r3
 800f4d2:	4591      	cmp	r9, r2
 800f4d4:	bfa8      	it	ge
 800f4d6:	4691      	movge	r9, r2
 800f4d8:	f1b9 0f00 	cmp.w	r9, #0
 800f4dc:	dc35      	bgt.n	800f54a <_printf_float+0x3aa>
 800f4de:	f04f 0800 	mov.w	r8, #0
 800f4e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4e6:	f104 0a1a 	add.w	sl, r4, #26
 800f4ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4ee:	1a9b      	subs	r3, r3, r2
 800f4f0:	eba3 0309 	sub.w	r3, r3, r9
 800f4f4:	4543      	cmp	r3, r8
 800f4f6:	f77f af79 	ble.w	800f3ec <_printf_float+0x24c>
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	4652      	mov	r2, sl
 800f4fe:	4631      	mov	r1, r6
 800f500:	4628      	mov	r0, r5
 800f502:	47b8      	blx	r7
 800f504:	3001      	adds	r0, #1
 800f506:	f43f aeaa 	beq.w	800f25e <_printf_float+0xbe>
 800f50a:	f108 0801 	add.w	r8, r8, #1
 800f50e:	e7ec      	b.n	800f4ea <_printf_float+0x34a>
 800f510:	4613      	mov	r3, r2
 800f512:	4631      	mov	r1, r6
 800f514:	4642      	mov	r2, r8
 800f516:	4628      	mov	r0, r5
 800f518:	47b8      	blx	r7
 800f51a:	3001      	adds	r0, #1
 800f51c:	d1c0      	bne.n	800f4a0 <_printf_float+0x300>
 800f51e:	e69e      	b.n	800f25e <_printf_float+0xbe>
 800f520:	2301      	movs	r3, #1
 800f522:	4631      	mov	r1, r6
 800f524:	4628      	mov	r0, r5
 800f526:	9205      	str	r2, [sp, #20]
 800f528:	47b8      	blx	r7
 800f52a:	3001      	adds	r0, #1
 800f52c:	f43f ae97 	beq.w	800f25e <_printf_float+0xbe>
 800f530:	9a05      	ldr	r2, [sp, #20]
 800f532:	f10b 0b01 	add.w	fp, fp, #1
 800f536:	e7b9      	b.n	800f4ac <_printf_float+0x30c>
 800f538:	ee18 3a10 	vmov	r3, s16
 800f53c:	4652      	mov	r2, sl
 800f53e:	4631      	mov	r1, r6
 800f540:	4628      	mov	r0, r5
 800f542:	47b8      	blx	r7
 800f544:	3001      	adds	r0, #1
 800f546:	d1be      	bne.n	800f4c6 <_printf_float+0x326>
 800f548:	e689      	b.n	800f25e <_printf_float+0xbe>
 800f54a:	9a05      	ldr	r2, [sp, #20]
 800f54c:	464b      	mov	r3, r9
 800f54e:	4442      	add	r2, r8
 800f550:	4631      	mov	r1, r6
 800f552:	4628      	mov	r0, r5
 800f554:	47b8      	blx	r7
 800f556:	3001      	adds	r0, #1
 800f558:	d1c1      	bne.n	800f4de <_printf_float+0x33e>
 800f55a:	e680      	b.n	800f25e <_printf_float+0xbe>
 800f55c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f55e:	2a01      	cmp	r2, #1
 800f560:	dc01      	bgt.n	800f566 <_printf_float+0x3c6>
 800f562:	07db      	lsls	r3, r3, #31
 800f564:	d53a      	bpl.n	800f5dc <_printf_float+0x43c>
 800f566:	2301      	movs	r3, #1
 800f568:	4642      	mov	r2, r8
 800f56a:	4631      	mov	r1, r6
 800f56c:	4628      	mov	r0, r5
 800f56e:	47b8      	blx	r7
 800f570:	3001      	adds	r0, #1
 800f572:	f43f ae74 	beq.w	800f25e <_printf_float+0xbe>
 800f576:	ee18 3a10 	vmov	r3, s16
 800f57a:	4652      	mov	r2, sl
 800f57c:	4631      	mov	r1, r6
 800f57e:	4628      	mov	r0, r5
 800f580:	47b8      	blx	r7
 800f582:	3001      	adds	r0, #1
 800f584:	f43f ae6b 	beq.w	800f25e <_printf_float+0xbe>
 800f588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f58c:	2200      	movs	r2, #0
 800f58e:	2300      	movs	r3, #0
 800f590:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f594:	f7f1 faa8 	bl	8000ae8 <__aeabi_dcmpeq>
 800f598:	b9d8      	cbnz	r0, 800f5d2 <_printf_float+0x432>
 800f59a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f59e:	f108 0201 	add.w	r2, r8, #1
 800f5a2:	4631      	mov	r1, r6
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	47b8      	blx	r7
 800f5a8:	3001      	adds	r0, #1
 800f5aa:	d10e      	bne.n	800f5ca <_printf_float+0x42a>
 800f5ac:	e657      	b.n	800f25e <_printf_float+0xbe>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	4652      	mov	r2, sl
 800f5b2:	4631      	mov	r1, r6
 800f5b4:	4628      	mov	r0, r5
 800f5b6:	47b8      	blx	r7
 800f5b8:	3001      	adds	r0, #1
 800f5ba:	f43f ae50 	beq.w	800f25e <_printf_float+0xbe>
 800f5be:	f108 0801 	add.w	r8, r8, #1
 800f5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5c4:	3b01      	subs	r3, #1
 800f5c6:	4543      	cmp	r3, r8
 800f5c8:	dcf1      	bgt.n	800f5ae <_printf_float+0x40e>
 800f5ca:	464b      	mov	r3, r9
 800f5cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f5d0:	e6da      	b.n	800f388 <_printf_float+0x1e8>
 800f5d2:	f04f 0800 	mov.w	r8, #0
 800f5d6:	f104 0a1a 	add.w	sl, r4, #26
 800f5da:	e7f2      	b.n	800f5c2 <_printf_float+0x422>
 800f5dc:	2301      	movs	r3, #1
 800f5de:	4642      	mov	r2, r8
 800f5e0:	e7df      	b.n	800f5a2 <_printf_float+0x402>
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	464a      	mov	r2, r9
 800f5e6:	4631      	mov	r1, r6
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	47b8      	blx	r7
 800f5ec:	3001      	adds	r0, #1
 800f5ee:	f43f ae36 	beq.w	800f25e <_printf_float+0xbe>
 800f5f2:	f108 0801 	add.w	r8, r8, #1
 800f5f6:	68e3      	ldr	r3, [r4, #12]
 800f5f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5fa:	1a5b      	subs	r3, r3, r1
 800f5fc:	4543      	cmp	r3, r8
 800f5fe:	dcf0      	bgt.n	800f5e2 <_printf_float+0x442>
 800f600:	e6f8      	b.n	800f3f4 <_printf_float+0x254>
 800f602:	f04f 0800 	mov.w	r8, #0
 800f606:	f104 0919 	add.w	r9, r4, #25
 800f60a:	e7f4      	b.n	800f5f6 <_printf_float+0x456>

0800f60c <_printf_common>:
 800f60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f610:	4616      	mov	r6, r2
 800f612:	4699      	mov	r9, r3
 800f614:	688a      	ldr	r2, [r1, #8]
 800f616:	690b      	ldr	r3, [r1, #16]
 800f618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f61c:	4293      	cmp	r3, r2
 800f61e:	bfb8      	it	lt
 800f620:	4613      	movlt	r3, r2
 800f622:	6033      	str	r3, [r6, #0]
 800f624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f628:	4607      	mov	r7, r0
 800f62a:	460c      	mov	r4, r1
 800f62c:	b10a      	cbz	r2, 800f632 <_printf_common+0x26>
 800f62e:	3301      	adds	r3, #1
 800f630:	6033      	str	r3, [r6, #0]
 800f632:	6823      	ldr	r3, [r4, #0]
 800f634:	0699      	lsls	r1, r3, #26
 800f636:	bf42      	ittt	mi
 800f638:	6833      	ldrmi	r3, [r6, #0]
 800f63a:	3302      	addmi	r3, #2
 800f63c:	6033      	strmi	r3, [r6, #0]
 800f63e:	6825      	ldr	r5, [r4, #0]
 800f640:	f015 0506 	ands.w	r5, r5, #6
 800f644:	d106      	bne.n	800f654 <_printf_common+0x48>
 800f646:	f104 0a19 	add.w	sl, r4, #25
 800f64a:	68e3      	ldr	r3, [r4, #12]
 800f64c:	6832      	ldr	r2, [r6, #0]
 800f64e:	1a9b      	subs	r3, r3, r2
 800f650:	42ab      	cmp	r3, r5
 800f652:	dc26      	bgt.n	800f6a2 <_printf_common+0x96>
 800f654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f658:	1e13      	subs	r3, r2, #0
 800f65a:	6822      	ldr	r2, [r4, #0]
 800f65c:	bf18      	it	ne
 800f65e:	2301      	movne	r3, #1
 800f660:	0692      	lsls	r2, r2, #26
 800f662:	d42b      	bmi.n	800f6bc <_printf_common+0xb0>
 800f664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f668:	4649      	mov	r1, r9
 800f66a:	4638      	mov	r0, r7
 800f66c:	47c0      	blx	r8
 800f66e:	3001      	adds	r0, #1
 800f670:	d01e      	beq.n	800f6b0 <_printf_common+0xa4>
 800f672:	6823      	ldr	r3, [r4, #0]
 800f674:	6922      	ldr	r2, [r4, #16]
 800f676:	f003 0306 	and.w	r3, r3, #6
 800f67a:	2b04      	cmp	r3, #4
 800f67c:	bf02      	ittt	eq
 800f67e:	68e5      	ldreq	r5, [r4, #12]
 800f680:	6833      	ldreq	r3, [r6, #0]
 800f682:	1aed      	subeq	r5, r5, r3
 800f684:	68a3      	ldr	r3, [r4, #8]
 800f686:	bf0c      	ite	eq
 800f688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f68c:	2500      	movne	r5, #0
 800f68e:	4293      	cmp	r3, r2
 800f690:	bfc4      	itt	gt
 800f692:	1a9b      	subgt	r3, r3, r2
 800f694:	18ed      	addgt	r5, r5, r3
 800f696:	2600      	movs	r6, #0
 800f698:	341a      	adds	r4, #26
 800f69a:	42b5      	cmp	r5, r6
 800f69c:	d11a      	bne.n	800f6d4 <_printf_common+0xc8>
 800f69e:	2000      	movs	r0, #0
 800f6a0:	e008      	b.n	800f6b4 <_printf_common+0xa8>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	4652      	mov	r2, sl
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	4638      	mov	r0, r7
 800f6aa:	47c0      	blx	r8
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	d103      	bne.n	800f6b8 <_printf_common+0xac>
 800f6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6b8:	3501      	adds	r5, #1
 800f6ba:	e7c6      	b.n	800f64a <_printf_common+0x3e>
 800f6bc:	18e1      	adds	r1, r4, r3
 800f6be:	1c5a      	adds	r2, r3, #1
 800f6c0:	2030      	movs	r0, #48	; 0x30
 800f6c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f6c6:	4422      	add	r2, r4
 800f6c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f6cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f6d0:	3302      	adds	r3, #2
 800f6d2:	e7c7      	b.n	800f664 <_printf_common+0x58>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	4622      	mov	r2, r4
 800f6d8:	4649      	mov	r1, r9
 800f6da:	4638      	mov	r0, r7
 800f6dc:	47c0      	blx	r8
 800f6de:	3001      	adds	r0, #1
 800f6e0:	d0e6      	beq.n	800f6b0 <_printf_common+0xa4>
 800f6e2:	3601      	adds	r6, #1
 800f6e4:	e7d9      	b.n	800f69a <_printf_common+0x8e>
	...

0800f6e8 <_printf_i>:
 800f6e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6ec:	7e0f      	ldrb	r7, [r1, #24]
 800f6ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6f0:	2f78      	cmp	r7, #120	; 0x78
 800f6f2:	4691      	mov	r9, r2
 800f6f4:	4680      	mov	r8, r0
 800f6f6:	460c      	mov	r4, r1
 800f6f8:	469a      	mov	sl, r3
 800f6fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6fe:	d807      	bhi.n	800f710 <_printf_i+0x28>
 800f700:	2f62      	cmp	r7, #98	; 0x62
 800f702:	d80a      	bhi.n	800f71a <_printf_i+0x32>
 800f704:	2f00      	cmp	r7, #0
 800f706:	f000 80d4 	beq.w	800f8b2 <_printf_i+0x1ca>
 800f70a:	2f58      	cmp	r7, #88	; 0x58
 800f70c:	f000 80c0 	beq.w	800f890 <_printf_i+0x1a8>
 800f710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f718:	e03a      	b.n	800f790 <_printf_i+0xa8>
 800f71a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f71e:	2b15      	cmp	r3, #21
 800f720:	d8f6      	bhi.n	800f710 <_printf_i+0x28>
 800f722:	a101      	add	r1, pc, #4	; (adr r1, 800f728 <_printf_i+0x40>)
 800f724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f728:	0800f781 	.word	0x0800f781
 800f72c:	0800f795 	.word	0x0800f795
 800f730:	0800f711 	.word	0x0800f711
 800f734:	0800f711 	.word	0x0800f711
 800f738:	0800f711 	.word	0x0800f711
 800f73c:	0800f711 	.word	0x0800f711
 800f740:	0800f795 	.word	0x0800f795
 800f744:	0800f711 	.word	0x0800f711
 800f748:	0800f711 	.word	0x0800f711
 800f74c:	0800f711 	.word	0x0800f711
 800f750:	0800f711 	.word	0x0800f711
 800f754:	0800f899 	.word	0x0800f899
 800f758:	0800f7c1 	.word	0x0800f7c1
 800f75c:	0800f853 	.word	0x0800f853
 800f760:	0800f711 	.word	0x0800f711
 800f764:	0800f711 	.word	0x0800f711
 800f768:	0800f8bb 	.word	0x0800f8bb
 800f76c:	0800f711 	.word	0x0800f711
 800f770:	0800f7c1 	.word	0x0800f7c1
 800f774:	0800f711 	.word	0x0800f711
 800f778:	0800f711 	.word	0x0800f711
 800f77c:	0800f85b 	.word	0x0800f85b
 800f780:	682b      	ldr	r3, [r5, #0]
 800f782:	1d1a      	adds	r2, r3, #4
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	602a      	str	r2, [r5, #0]
 800f788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f78c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f790:	2301      	movs	r3, #1
 800f792:	e09f      	b.n	800f8d4 <_printf_i+0x1ec>
 800f794:	6820      	ldr	r0, [r4, #0]
 800f796:	682b      	ldr	r3, [r5, #0]
 800f798:	0607      	lsls	r7, r0, #24
 800f79a:	f103 0104 	add.w	r1, r3, #4
 800f79e:	6029      	str	r1, [r5, #0]
 800f7a0:	d501      	bpl.n	800f7a6 <_printf_i+0xbe>
 800f7a2:	681e      	ldr	r6, [r3, #0]
 800f7a4:	e003      	b.n	800f7ae <_printf_i+0xc6>
 800f7a6:	0646      	lsls	r6, r0, #25
 800f7a8:	d5fb      	bpl.n	800f7a2 <_printf_i+0xba>
 800f7aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f7ae:	2e00      	cmp	r6, #0
 800f7b0:	da03      	bge.n	800f7ba <_printf_i+0xd2>
 800f7b2:	232d      	movs	r3, #45	; 0x2d
 800f7b4:	4276      	negs	r6, r6
 800f7b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7ba:	485a      	ldr	r0, [pc, #360]	; (800f924 <_printf_i+0x23c>)
 800f7bc:	230a      	movs	r3, #10
 800f7be:	e012      	b.n	800f7e6 <_printf_i+0xfe>
 800f7c0:	682b      	ldr	r3, [r5, #0]
 800f7c2:	6820      	ldr	r0, [r4, #0]
 800f7c4:	1d19      	adds	r1, r3, #4
 800f7c6:	6029      	str	r1, [r5, #0]
 800f7c8:	0605      	lsls	r5, r0, #24
 800f7ca:	d501      	bpl.n	800f7d0 <_printf_i+0xe8>
 800f7cc:	681e      	ldr	r6, [r3, #0]
 800f7ce:	e002      	b.n	800f7d6 <_printf_i+0xee>
 800f7d0:	0641      	lsls	r1, r0, #25
 800f7d2:	d5fb      	bpl.n	800f7cc <_printf_i+0xe4>
 800f7d4:	881e      	ldrh	r6, [r3, #0]
 800f7d6:	4853      	ldr	r0, [pc, #332]	; (800f924 <_printf_i+0x23c>)
 800f7d8:	2f6f      	cmp	r7, #111	; 0x6f
 800f7da:	bf0c      	ite	eq
 800f7dc:	2308      	moveq	r3, #8
 800f7de:	230a      	movne	r3, #10
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7e6:	6865      	ldr	r5, [r4, #4]
 800f7e8:	60a5      	str	r5, [r4, #8]
 800f7ea:	2d00      	cmp	r5, #0
 800f7ec:	bfa2      	ittt	ge
 800f7ee:	6821      	ldrge	r1, [r4, #0]
 800f7f0:	f021 0104 	bicge.w	r1, r1, #4
 800f7f4:	6021      	strge	r1, [r4, #0]
 800f7f6:	b90e      	cbnz	r6, 800f7fc <_printf_i+0x114>
 800f7f8:	2d00      	cmp	r5, #0
 800f7fa:	d04b      	beq.n	800f894 <_printf_i+0x1ac>
 800f7fc:	4615      	mov	r5, r2
 800f7fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800f802:	fb03 6711 	mls	r7, r3, r1, r6
 800f806:	5dc7      	ldrb	r7, [r0, r7]
 800f808:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f80c:	4637      	mov	r7, r6
 800f80e:	42bb      	cmp	r3, r7
 800f810:	460e      	mov	r6, r1
 800f812:	d9f4      	bls.n	800f7fe <_printf_i+0x116>
 800f814:	2b08      	cmp	r3, #8
 800f816:	d10b      	bne.n	800f830 <_printf_i+0x148>
 800f818:	6823      	ldr	r3, [r4, #0]
 800f81a:	07de      	lsls	r6, r3, #31
 800f81c:	d508      	bpl.n	800f830 <_printf_i+0x148>
 800f81e:	6923      	ldr	r3, [r4, #16]
 800f820:	6861      	ldr	r1, [r4, #4]
 800f822:	4299      	cmp	r1, r3
 800f824:	bfde      	ittt	le
 800f826:	2330      	movle	r3, #48	; 0x30
 800f828:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f82c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f830:	1b52      	subs	r2, r2, r5
 800f832:	6122      	str	r2, [r4, #16]
 800f834:	f8cd a000 	str.w	sl, [sp]
 800f838:	464b      	mov	r3, r9
 800f83a:	aa03      	add	r2, sp, #12
 800f83c:	4621      	mov	r1, r4
 800f83e:	4640      	mov	r0, r8
 800f840:	f7ff fee4 	bl	800f60c <_printf_common>
 800f844:	3001      	adds	r0, #1
 800f846:	d14a      	bne.n	800f8de <_printf_i+0x1f6>
 800f848:	f04f 30ff 	mov.w	r0, #4294967295
 800f84c:	b004      	add	sp, #16
 800f84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f852:	6823      	ldr	r3, [r4, #0]
 800f854:	f043 0320 	orr.w	r3, r3, #32
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	4833      	ldr	r0, [pc, #204]	; (800f928 <_printf_i+0x240>)
 800f85c:	2778      	movs	r7, #120	; 0x78
 800f85e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f862:	6823      	ldr	r3, [r4, #0]
 800f864:	6829      	ldr	r1, [r5, #0]
 800f866:	061f      	lsls	r7, r3, #24
 800f868:	f851 6b04 	ldr.w	r6, [r1], #4
 800f86c:	d402      	bmi.n	800f874 <_printf_i+0x18c>
 800f86e:	065f      	lsls	r7, r3, #25
 800f870:	bf48      	it	mi
 800f872:	b2b6      	uxthmi	r6, r6
 800f874:	07df      	lsls	r7, r3, #31
 800f876:	bf48      	it	mi
 800f878:	f043 0320 	orrmi.w	r3, r3, #32
 800f87c:	6029      	str	r1, [r5, #0]
 800f87e:	bf48      	it	mi
 800f880:	6023      	strmi	r3, [r4, #0]
 800f882:	b91e      	cbnz	r6, 800f88c <_printf_i+0x1a4>
 800f884:	6823      	ldr	r3, [r4, #0]
 800f886:	f023 0320 	bic.w	r3, r3, #32
 800f88a:	6023      	str	r3, [r4, #0]
 800f88c:	2310      	movs	r3, #16
 800f88e:	e7a7      	b.n	800f7e0 <_printf_i+0xf8>
 800f890:	4824      	ldr	r0, [pc, #144]	; (800f924 <_printf_i+0x23c>)
 800f892:	e7e4      	b.n	800f85e <_printf_i+0x176>
 800f894:	4615      	mov	r5, r2
 800f896:	e7bd      	b.n	800f814 <_printf_i+0x12c>
 800f898:	682b      	ldr	r3, [r5, #0]
 800f89a:	6826      	ldr	r6, [r4, #0]
 800f89c:	6961      	ldr	r1, [r4, #20]
 800f89e:	1d18      	adds	r0, r3, #4
 800f8a0:	6028      	str	r0, [r5, #0]
 800f8a2:	0635      	lsls	r5, r6, #24
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	d501      	bpl.n	800f8ac <_printf_i+0x1c4>
 800f8a8:	6019      	str	r1, [r3, #0]
 800f8aa:	e002      	b.n	800f8b2 <_printf_i+0x1ca>
 800f8ac:	0670      	lsls	r0, r6, #25
 800f8ae:	d5fb      	bpl.n	800f8a8 <_printf_i+0x1c0>
 800f8b0:	8019      	strh	r1, [r3, #0]
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	6123      	str	r3, [r4, #16]
 800f8b6:	4615      	mov	r5, r2
 800f8b8:	e7bc      	b.n	800f834 <_printf_i+0x14c>
 800f8ba:	682b      	ldr	r3, [r5, #0]
 800f8bc:	1d1a      	adds	r2, r3, #4
 800f8be:	602a      	str	r2, [r5, #0]
 800f8c0:	681d      	ldr	r5, [r3, #0]
 800f8c2:	6862      	ldr	r2, [r4, #4]
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	f7f0 fc92 	bl	80001f0 <memchr>
 800f8cc:	b108      	cbz	r0, 800f8d2 <_printf_i+0x1ea>
 800f8ce:	1b40      	subs	r0, r0, r5
 800f8d0:	6060      	str	r0, [r4, #4]
 800f8d2:	6863      	ldr	r3, [r4, #4]
 800f8d4:	6123      	str	r3, [r4, #16]
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8dc:	e7aa      	b.n	800f834 <_printf_i+0x14c>
 800f8de:	6923      	ldr	r3, [r4, #16]
 800f8e0:	462a      	mov	r2, r5
 800f8e2:	4649      	mov	r1, r9
 800f8e4:	4640      	mov	r0, r8
 800f8e6:	47d0      	blx	sl
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	d0ad      	beq.n	800f848 <_printf_i+0x160>
 800f8ec:	6823      	ldr	r3, [r4, #0]
 800f8ee:	079b      	lsls	r3, r3, #30
 800f8f0:	d413      	bmi.n	800f91a <_printf_i+0x232>
 800f8f2:	68e0      	ldr	r0, [r4, #12]
 800f8f4:	9b03      	ldr	r3, [sp, #12]
 800f8f6:	4298      	cmp	r0, r3
 800f8f8:	bfb8      	it	lt
 800f8fa:	4618      	movlt	r0, r3
 800f8fc:	e7a6      	b.n	800f84c <_printf_i+0x164>
 800f8fe:	2301      	movs	r3, #1
 800f900:	4632      	mov	r2, r6
 800f902:	4649      	mov	r1, r9
 800f904:	4640      	mov	r0, r8
 800f906:	47d0      	blx	sl
 800f908:	3001      	adds	r0, #1
 800f90a:	d09d      	beq.n	800f848 <_printf_i+0x160>
 800f90c:	3501      	adds	r5, #1
 800f90e:	68e3      	ldr	r3, [r4, #12]
 800f910:	9903      	ldr	r1, [sp, #12]
 800f912:	1a5b      	subs	r3, r3, r1
 800f914:	42ab      	cmp	r3, r5
 800f916:	dcf2      	bgt.n	800f8fe <_printf_i+0x216>
 800f918:	e7eb      	b.n	800f8f2 <_printf_i+0x20a>
 800f91a:	2500      	movs	r5, #0
 800f91c:	f104 0619 	add.w	r6, r4, #25
 800f920:	e7f5      	b.n	800f90e <_printf_i+0x226>
 800f922:	bf00      	nop
 800f924:	08013942 	.word	0x08013942
 800f928:	08013953 	.word	0x08013953

0800f92c <std>:
 800f92c:	2300      	movs	r3, #0
 800f92e:	b510      	push	{r4, lr}
 800f930:	4604      	mov	r4, r0
 800f932:	e9c0 3300 	strd	r3, r3, [r0]
 800f936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f93a:	6083      	str	r3, [r0, #8]
 800f93c:	8181      	strh	r1, [r0, #12]
 800f93e:	6643      	str	r3, [r0, #100]	; 0x64
 800f940:	81c2      	strh	r2, [r0, #14]
 800f942:	6183      	str	r3, [r0, #24]
 800f944:	4619      	mov	r1, r3
 800f946:	2208      	movs	r2, #8
 800f948:	305c      	adds	r0, #92	; 0x5c
 800f94a:	f000 f914 	bl	800fb76 <memset>
 800f94e:	4b0d      	ldr	r3, [pc, #52]	; (800f984 <std+0x58>)
 800f950:	6263      	str	r3, [r4, #36]	; 0x24
 800f952:	4b0d      	ldr	r3, [pc, #52]	; (800f988 <std+0x5c>)
 800f954:	62a3      	str	r3, [r4, #40]	; 0x28
 800f956:	4b0d      	ldr	r3, [pc, #52]	; (800f98c <std+0x60>)
 800f958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f95a:	4b0d      	ldr	r3, [pc, #52]	; (800f990 <std+0x64>)
 800f95c:	6323      	str	r3, [r4, #48]	; 0x30
 800f95e:	4b0d      	ldr	r3, [pc, #52]	; (800f994 <std+0x68>)
 800f960:	6224      	str	r4, [r4, #32]
 800f962:	429c      	cmp	r4, r3
 800f964:	d006      	beq.n	800f974 <std+0x48>
 800f966:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f96a:	4294      	cmp	r4, r2
 800f96c:	d002      	beq.n	800f974 <std+0x48>
 800f96e:	33d0      	adds	r3, #208	; 0xd0
 800f970:	429c      	cmp	r4, r3
 800f972:	d105      	bne.n	800f980 <std+0x54>
 800f974:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f97c:	f000 b978 	b.w	800fc70 <__retarget_lock_init_recursive>
 800f980:	bd10      	pop	{r4, pc}
 800f982:	bf00      	nop
 800f984:	0800faf1 	.word	0x0800faf1
 800f988:	0800fb13 	.word	0x0800fb13
 800f98c:	0800fb4b 	.word	0x0800fb4b
 800f990:	0800fb6f 	.word	0x0800fb6f
 800f994:	20006c2c 	.word	0x20006c2c

0800f998 <stdio_exit_handler>:
 800f998:	4a02      	ldr	r2, [pc, #8]	; (800f9a4 <stdio_exit_handler+0xc>)
 800f99a:	4903      	ldr	r1, [pc, #12]	; (800f9a8 <stdio_exit_handler+0x10>)
 800f99c:	4803      	ldr	r0, [pc, #12]	; (800f9ac <stdio_exit_handler+0x14>)
 800f99e:	f000 b869 	b.w	800fa74 <_fwalk_sglue>
 800f9a2:	bf00      	nop
 800f9a4:	2000017c 	.word	0x2000017c
 800f9a8:	08011641 	.word	0x08011641
 800f9ac:	20000188 	.word	0x20000188

0800f9b0 <cleanup_stdio>:
 800f9b0:	6841      	ldr	r1, [r0, #4]
 800f9b2:	4b0c      	ldr	r3, [pc, #48]	; (800f9e4 <cleanup_stdio+0x34>)
 800f9b4:	4299      	cmp	r1, r3
 800f9b6:	b510      	push	{r4, lr}
 800f9b8:	4604      	mov	r4, r0
 800f9ba:	d001      	beq.n	800f9c0 <cleanup_stdio+0x10>
 800f9bc:	f001 fe40 	bl	8011640 <_fflush_r>
 800f9c0:	68a1      	ldr	r1, [r4, #8]
 800f9c2:	4b09      	ldr	r3, [pc, #36]	; (800f9e8 <cleanup_stdio+0x38>)
 800f9c4:	4299      	cmp	r1, r3
 800f9c6:	d002      	beq.n	800f9ce <cleanup_stdio+0x1e>
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	f001 fe39 	bl	8011640 <_fflush_r>
 800f9ce:	68e1      	ldr	r1, [r4, #12]
 800f9d0:	4b06      	ldr	r3, [pc, #24]	; (800f9ec <cleanup_stdio+0x3c>)
 800f9d2:	4299      	cmp	r1, r3
 800f9d4:	d004      	beq.n	800f9e0 <cleanup_stdio+0x30>
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9dc:	f001 be30 	b.w	8011640 <_fflush_r>
 800f9e0:	bd10      	pop	{r4, pc}
 800f9e2:	bf00      	nop
 800f9e4:	20006c2c 	.word	0x20006c2c
 800f9e8:	20006c94 	.word	0x20006c94
 800f9ec:	20006cfc 	.word	0x20006cfc

0800f9f0 <global_stdio_init.part.0>:
 800f9f0:	b510      	push	{r4, lr}
 800f9f2:	4b0b      	ldr	r3, [pc, #44]	; (800fa20 <global_stdio_init.part.0+0x30>)
 800f9f4:	4c0b      	ldr	r4, [pc, #44]	; (800fa24 <global_stdio_init.part.0+0x34>)
 800f9f6:	4a0c      	ldr	r2, [pc, #48]	; (800fa28 <global_stdio_init.part.0+0x38>)
 800f9f8:	601a      	str	r2, [r3, #0]
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	2104      	movs	r1, #4
 800fa00:	f7ff ff94 	bl	800f92c <std>
 800fa04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fa08:	2201      	movs	r2, #1
 800fa0a:	2109      	movs	r1, #9
 800fa0c:	f7ff ff8e 	bl	800f92c <std>
 800fa10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fa14:	2202      	movs	r2, #2
 800fa16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa1a:	2112      	movs	r1, #18
 800fa1c:	f7ff bf86 	b.w	800f92c <std>
 800fa20:	20006d64 	.word	0x20006d64
 800fa24:	20006c2c 	.word	0x20006c2c
 800fa28:	0800f999 	.word	0x0800f999

0800fa2c <__sfp_lock_acquire>:
 800fa2c:	4801      	ldr	r0, [pc, #4]	; (800fa34 <__sfp_lock_acquire+0x8>)
 800fa2e:	f000 b920 	b.w	800fc72 <__retarget_lock_acquire_recursive>
 800fa32:	bf00      	nop
 800fa34:	20006d6d 	.word	0x20006d6d

0800fa38 <__sfp_lock_release>:
 800fa38:	4801      	ldr	r0, [pc, #4]	; (800fa40 <__sfp_lock_release+0x8>)
 800fa3a:	f000 b91b 	b.w	800fc74 <__retarget_lock_release_recursive>
 800fa3e:	bf00      	nop
 800fa40:	20006d6d 	.word	0x20006d6d

0800fa44 <__sinit>:
 800fa44:	b510      	push	{r4, lr}
 800fa46:	4604      	mov	r4, r0
 800fa48:	f7ff fff0 	bl	800fa2c <__sfp_lock_acquire>
 800fa4c:	6a23      	ldr	r3, [r4, #32]
 800fa4e:	b11b      	cbz	r3, 800fa58 <__sinit+0x14>
 800fa50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa54:	f7ff bff0 	b.w	800fa38 <__sfp_lock_release>
 800fa58:	4b04      	ldr	r3, [pc, #16]	; (800fa6c <__sinit+0x28>)
 800fa5a:	6223      	str	r3, [r4, #32]
 800fa5c:	4b04      	ldr	r3, [pc, #16]	; (800fa70 <__sinit+0x2c>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d1f5      	bne.n	800fa50 <__sinit+0xc>
 800fa64:	f7ff ffc4 	bl	800f9f0 <global_stdio_init.part.0>
 800fa68:	e7f2      	b.n	800fa50 <__sinit+0xc>
 800fa6a:	bf00      	nop
 800fa6c:	0800f9b1 	.word	0x0800f9b1
 800fa70:	20006d64 	.word	0x20006d64

0800fa74 <_fwalk_sglue>:
 800fa74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa78:	4607      	mov	r7, r0
 800fa7a:	4688      	mov	r8, r1
 800fa7c:	4614      	mov	r4, r2
 800fa7e:	2600      	movs	r6, #0
 800fa80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa84:	f1b9 0901 	subs.w	r9, r9, #1
 800fa88:	d505      	bpl.n	800fa96 <_fwalk_sglue+0x22>
 800fa8a:	6824      	ldr	r4, [r4, #0]
 800fa8c:	2c00      	cmp	r4, #0
 800fa8e:	d1f7      	bne.n	800fa80 <_fwalk_sglue+0xc>
 800fa90:	4630      	mov	r0, r6
 800fa92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa96:	89ab      	ldrh	r3, [r5, #12]
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d907      	bls.n	800faac <_fwalk_sglue+0x38>
 800fa9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800faa0:	3301      	adds	r3, #1
 800faa2:	d003      	beq.n	800faac <_fwalk_sglue+0x38>
 800faa4:	4629      	mov	r1, r5
 800faa6:	4638      	mov	r0, r7
 800faa8:	47c0      	blx	r8
 800faaa:	4306      	orrs	r6, r0
 800faac:	3568      	adds	r5, #104	; 0x68
 800faae:	e7e9      	b.n	800fa84 <_fwalk_sglue+0x10>

0800fab0 <siprintf>:
 800fab0:	b40e      	push	{r1, r2, r3}
 800fab2:	b500      	push	{lr}
 800fab4:	b09c      	sub	sp, #112	; 0x70
 800fab6:	ab1d      	add	r3, sp, #116	; 0x74
 800fab8:	9002      	str	r0, [sp, #8]
 800faba:	9006      	str	r0, [sp, #24]
 800fabc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fac0:	4809      	ldr	r0, [pc, #36]	; (800fae8 <siprintf+0x38>)
 800fac2:	9107      	str	r1, [sp, #28]
 800fac4:	9104      	str	r1, [sp, #16]
 800fac6:	4909      	ldr	r1, [pc, #36]	; (800faec <siprintf+0x3c>)
 800fac8:	f853 2b04 	ldr.w	r2, [r3], #4
 800facc:	9105      	str	r1, [sp, #20]
 800face:	6800      	ldr	r0, [r0, #0]
 800fad0:	9301      	str	r3, [sp, #4]
 800fad2:	a902      	add	r1, sp, #8
 800fad4:	f001 fc30 	bl	8011338 <_svfiprintf_r>
 800fad8:	9b02      	ldr	r3, [sp, #8]
 800fada:	2200      	movs	r2, #0
 800fadc:	701a      	strb	r2, [r3, #0]
 800fade:	b01c      	add	sp, #112	; 0x70
 800fae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fae4:	b003      	add	sp, #12
 800fae6:	4770      	bx	lr
 800fae8:	200001d4 	.word	0x200001d4
 800faec:	ffff0208 	.word	0xffff0208

0800faf0 <__sread>:
 800faf0:	b510      	push	{r4, lr}
 800faf2:	460c      	mov	r4, r1
 800faf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faf8:	f000 f86c 	bl	800fbd4 <_read_r>
 800fafc:	2800      	cmp	r0, #0
 800fafe:	bfab      	itete	ge
 800fb00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fb02:	89a3      	ldrhlt	r3, [r4, #12]
 800fb04:	181b      	addge	r3, r3, r0
 800fb06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fb0a:	bfac      	ite	ge
 800fb0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fb0e:	81a3      	strhlt	r3, [r4, #12]
 800fb10:	bd10      	pop	{r4, pc}

0800fb12 <__swrite>:
 800fb12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb16:	461f      	mov	r7, r3
 800fb18:	898b      	ldrh	r3, [r1, #12]
 800fb1a:	05db      	lsls	r3, r3, #23
 800fb1c:	4605      	mov	r5, r0
 800fb1e:	460c      	mov	r4, r1
 800fb20:	4616      	mov	r6, r2
 800fb22:	d505      	bpl.n	800fb30 <__swrite+0x1e>
 800fb24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb28:	2302      	movs	r3, #2
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f000 f840 	bl	800fbb0 <_lseek_r>
 800fb30:	89a3      	ldrh	r3, [r4, #12]
 800fb32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb3a:	81a3      	strh	r3, [r4, #12]
 800fb3c:	4632      	mov	r2, r6
 800fb3e:	463b      	mov	r3, r7
 800fb40:	4628      	mov	r0, r5
 800fb42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb46:	f000 b857 	b.w	800fbf8 <_write_r>

0800fb4a <__sseek>:
 800fb4a:	b510      	push	{r4, lr}
 800fb4c:	460c      	mov	r4, r1
 800fb4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb52:	f000 f82d 	bl	800fbb0 <_lseek_r>
 800fb56:	1c43      	adds	r3, r0, #1
 800fb58:	89a3      	ldrh	r3, [r4, #12]
 800fb5a:	bf15      	itete	ne
 800fb5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb66:	81a3      	strheq	r3, [r4, #12]
 800fb68:	bf18      	it	ne
 800fb6a:	81a3      	strhne	r3, [r4, #12]
 800fb6c:	bd10      	pop	{r4, pc}

0800fb6e <__sclose>:
 800fb6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb72:	f000 b80d 	b.w	800fb90 <_close_r>

0800fb76 <memset>:
 800fb76:	4402      	add	r2, r0
 800fb78:	4603      	mov	r3, r0
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d100      	bne.n	800fb80 <memset+0xa>
 800fb7e:	4770      	bx	lr
 800fb80:	f803 1b01 	strb.w	r1, [r3], #1
 800fb84:	e7f9      	b.n	800fb7a <memset+0x4>
	...

0800fb88 <_localeconv_r>:
 800fb88:	4800      	ldr	r0, [pc, #0]	; (800fb8c <_localeconv_r+0x4>)
 800fb8a:	4770      	bx	lr
 800fb8c:	200002c8 	.word	0x200002c8

0800fb90 <_close_r>:
 800fb90:	b538      	push	{r3, r4, r5, lr}
 800fb92:	4d06      	ldr	r5, [pc, #24]	; (800fbac <_close_r+0x1c>)
 800fb94:	2300      	movs	r3, #0
 800fb96:	4604      	mov	r4, r0
 800fb98:	4608      	mov	r0, r1
 800fb9a:	602b      	str	r3, [r5, #0]
 800fb9c:	f7f1 fd87 	bl	80016ae <_close>
 800fba0:	1c43      	adds	r3, r0, #1
 800fba2:	d102      	bne.n	800fbaa <_close_r+0x1a>
 800fba4:	682b      	ldr	r3, [r5, #0]
 800fba6:	b103      	cbz	r3, 800fbaa <_close_r+0x1a>
 800fba8:	6023      	str	r3, [r4, #0]
 800fbaa:	bd38      	pop	{r3, r4, r5, pc}
 800fbac:	20006d68 	.word	0x20006d68

0800fbb0 <_lseek_r>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	4d07      	ldr	r5, [pc, #28]	; (800fbd0 <_lseek_r+0x20>)
 800fbb4:	4604      	mov	r4, r0
 800fbb6:	4608      	mov	r0, r1
 800fbb8:	4611      	mov	r1, r2
 800fbba:	2200      	movs	r2, #0
 800fbbc:	602a      	str	r2, [r5, #0]
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	f7f1 fd9c 	bl	80016fc <_lseek>
 800fbc4:	1c43      	adds	r3, r0, #1
 800fbc6:	d102      	bne.n	800fbce <_lseek_r+0x1e>
 800fbc8:	682b      	ldr	r3, [r5, #0]
 800fbca:	b103      	cbz	r3, 800fbce <_lseek_r+0x1e>
 800fbcc:	6023      	str	r3, [r4, #0]
 800fbce:	bd38      	pop	{r3, r4, r5, pc}
 800fbd0:	20006d68 	.word	0x20006d68

0800fbd4 <_read_r>:
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	4d07      	ldr	r5, [pc, #28]	; (800fbf4 <_read_r+0x20>)
 800fbd8:	4604      	mov	r4, r0
 800fbda:	4608      	mov	r0, r1
 800fbdc:	4611      	mov	r1, r2
 800fbde:	2200      	movs	r2, #0
 800fbe0:	602a      	str	r2, [r5, #0]
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	f7f1 fd2a 	bl	800163c <_read>
 800fbe8:	1c43      	adds	r3, r0, #1
 800fbea:	d102      	bne.n	800fbf2 <_read_r+0x1e>
 800fbec:	682b      	ldr	r3, [r5, #0]
 800fbee:	b103      	cbz	r3, 800fbf2 <_read_r+0x1e>
 800fbf0:	6023      	str	r3, [r4, #0]
 800fbf2:	bd38      	pop	{r3, r4, r5, pc}
 800fbf4:	20006d68 	.word	0x20006d68

0800fbf8 <_write_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	4d07      	ldr	r5, [pc, #28]	; (800fc18 <_write_r+0x20>)
 800fbfc:	4604      	mov	r4, r0
 800fbfe:	4608      	mov	r0, r1
 800fc00:	4611      	mov	r1, r2
 800fc02:	2200      	movs	r2, #0
 800fc04:	602a      	str	r2, [r5, #0]
 800fc06:	461a      	mov	r2, r3
 800fc08:	f7f1 fd35 	bl	8001676 <_write>
 800fc0c:	1c43      	adds	r3, r0, #1
 800fc0e:	d102      	bne.n	800fc16 <_write_r+0x1e>
 800fc10:	682b      	ldr	r3, [r5, #0]
 800fc12:	b103      	cbz	r3, 800fc16 <_write_r+0x1e>
 800fc14:	6023      	str	r3, [r4, #0]
 800fc16:	bd38      	pop	{r3, r4, r5, pc}
 800fc18:	20006d68 	.word	0x20006d68

0800fc1c <__errno>:
 800fc1c:	4b01      	ldr	r3, [pc, #4]	; (800fc24 <__errno+0x8>)
 800fc1e:	6818      	ldr	r0, [r3, #0]
 800fc20:	4770      	bx	lr
 800fc22:	bf00      	nop
 800fc24:	200001d4 	.word	0x200001d4

0800fc28 <__libc_init_array>:
 800fc28:	b570      	push	{r4, r5, r6, lr}
 800fc2a:	4d0d      	ldr	r5, [pc, #52]	; (800fc60 <__libc_init_array+0x38>)
 800fc2c:	4c0d      	ldr	r4, [pc, #52]	; (800fc64 <__libc_init_array+0x3c>)
 800fc2e:	1b64      	subs	r4, r4, r5
 800fc30:	10a4      	asrs	r4, r4, #2
 800fc32:	2600      	movs	r6, #0
 800fc34:	42a6      	cmp	r6, r4
 800fc36:	d109      	bne.n	800fc4c <__libc_init_array+0x24>
 800fc38:	4d0b      	ldr	r5, [pc, #44]	; (800fc68 <__libc_init_array+0x40>)
 800fc3a:	4c0c      	ldr	r4, [pc, #48]	; (800fc6c <__libc_init_array+0x44>)
 800fc3c:	f002 f896 	bl	8011d6c <_init>
 800fc40:	1b64      	subs	r4, r4, r5
 800fc42:	10a4      	asrs	r4, r4, #2
 800fc44:	2600      	movs	r6, #0
 800fc46:	42a6      	cmp	r6, r4
 800fc48:	d105      	bne.n	800fc56 <__libc_init_array+0x2e>
 800fc4a:	bd70      	pop	{r4, r5, r6, pc}
 800fc4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc50:	4798      	blx	r3
 800fc52:	3601      	adds	r6, #1
 800fc54:	e7ee      	b.n	800fc34 <__libc_init_array+0xc>
 800fc56:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc5a:	4798      	blx	r3
 800fc5c:	3601      	adds	r6, #1
 800fc5e:	e7f2      	b.n	800fc46 <__libc_init_array+0x1e>
 800fc60:	08013cac 	.word	0x08013cac
 800fc64:	08013cac 	.word	0x08013cac
 800fc68:	08013cac 	.word	0x08013cac
 800fc6c:	08013cb0 	.word	0x08013cb0

0800fc70 <__retarget_lock_init_recursive>:
 800fc70:	4770      	bx	lr

0800fc72 <__retarget_lock_acquire_recursive>:
 800fc72:	4770      	bx	lr

0800fc74 <__retarget_lock_release_recursive>:
 800fc74:	4770      	bx	lr

0800fc76 <memcpy>:
 800fc76:	440a      	add	r2, r1
 800fc78:	4291      	cmp	r1, r2
 800fc7a:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc7e:	d100      	bne.n	800fc82 <memcpy+0xc>
 800fc80:	4770      	bx	lr
 800fc82:	b510      	push	{r4, lr}
 800fc84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc8c:	4291      	cmp	r1, r2
 800fc8e:	d1f9      	bne.n	800fc84 <memcpy+0xe>
 800fc90:	bd10      	pop	{r4, pc}

0800fc92 <quorem>:
 800fc92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc96:	6903      	ldr	r3, [r0, #16]
 800fc98:	690c      	ldr	r4, [r1, #16]
 800fc9a:	42a3      	cmp	r3, r4
 800fc9c:	4607      	mov	r7, r0
 800fc9e:	db7e      	blt.n	800fd9e <quorem+0x10c>
 800fca0:	3c01      	subs	r4, #1
 800fca2:	f101 0814 	add.w	r8, r1, #20
 800fca6:	f100 0514 	add.w	r5, r0, #20
 800fcaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fcae:	9301      	str	r3, [sp, #4]
 800fcb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fcb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fcc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fcc4:	fbb2 f6f3 	udiv	r6, r2, r3
 800fcc8:	d331      	bcc.n	800fd2e <quorem+0x9c>
 800fcca:	f04f 0e00 	mov.w	lr, #0
 800fcce:	4640      	mov	r0, r8
 800fcd0:	46ac      	mov	ip, r5
 800fcd2:	46f2      	mov	sl, lr
 800fcd4:	f850 2b04 	ldr.w	r2, [r0], #4
 800fcd8:	b293      	uxth	r3, r2
 800fcda:	fb06 e303 	mla	r3, r6, r3, lr
 800fcde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fce2:	0c1a      	lsrs	r2, r3, #16
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	ebaa 0303 	sub.w	r3, sl, r3
 800fcea:	f8dc a000 	ldr.w	sl, [ip]
 800fcee:	fa13 f38a 	uxtah	r3, r3, sl
 800fcf2:	fb06 220e 	mla	r2, r6, lr, r2
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	9b00      	ldr	r3, [sp, #0]
 800fcfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fcfe:	b292      	uxth	r2, r2
 800fd00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fd04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd08:	f8bd 3000 	ldrh.w	r3, [sp]
 800fd0c:	4581      	cmp	r9, r0
 800fd0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd12:	f84c 3b04 	str.w	r3, [ip], #4
 800fd16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fd1a:	d2db      	bcs.n	800fcd4 <quorem+0x42>
 800fd1c:	f855 300b 	ldr.w	r3, [r5, fp]
 800fd20:	b92b      	cbnz	r3, 800fd2e <quorem+0x9c>
 800fd22:	9b01      	ldr	r3, [sp, #4]
 800fd24:	3b04      	subs	r3, #4
 800fd26:	429d      	cmp	r5, r3
 800fd28:	461a      	mov	r2, r3
 800fd2a:	d32c      	bcc.n	800fd86 <quorem+0xf4>
 800fd2c:	613c      	str	r4, [r7, #16]
 800fd2e:	4638      	mov	r0, r7
 800fd30:	f001 f9a8 	bl	8011084 <__mcmp>
 800fd34:	2800      	cmp	r0, #0
 800fd36:	db22      	blt.n	800fd7e <quorem+0xec>
 800fd38:	3601      	adds	r6, #1
 800fd3a:	4629      	mov	r1, r5
 800fd3c:	2000      	movs	r0, #0
 800fd3e:	f858 2b04 	ldr.w	r2, [r8], #4
 800fd42:	f8d1 c000 	ldr.w	ip, [r1]
 800fd46:	b293      	uxth	r3, r2
 800fd48:	1ac3      	subs	r3, r0, r3
 800fd4a:	0c12      	lsrs	r2, r2, #16
 800fd4c:	fa13 f38c 	uxtah	r3, r3, ip
 800fd50:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fd54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd5e:	45c1      	cmp	r9, r8
 800fd60:	f841 3b04 	str.w	r3, [r1], #4
 800fd64:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fd68:	d2e9      	bcs.n	800fd3e <quorem+0xac>
 800fd6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd72:	b922      	cbnz	r2, 800fd7e <quorem+0xec>
 800fd74:	3b04      	subs	r3, #4
 800fd76:	429d      	cmp	r5, r3
 800fd78:	461a      	mov	r2, r3
 800fd7a:	d30a      	bcc.n	800fd92 <quorem+0x100>
 800fd7c:	613c      	str	r4, [r7, #16]
 800fd7e:	4630      	mov	r0, r6
 800fd80:	b003      	add	sp, #12
 800fd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd86:	6812      	ldr	r2, [r2, #0]
 800fd88:	3b04      	subs	r3, #4
 800fd8a:	2a00      	cmp	r2, #0
 800fd8c:	d1ce      	bne.n	800fd2c <quorem+0x9a>
 800fd8e:	3c01      	subs	r4, #1
 800fd90:	e7c9      	b.n	800fd26 <quorem+0x94>
 800fd92:	6812      	ldr	r2, [r2, #0]
 800fd94:	3b04      	subs	r3, #4
 800fd96:	2a00      	cmp	r2, #0
 800fd98:	d1f0      	bne.n	800fd7c <quorem+0xea>
 800fd9a:	3c01      	subs	r4, #1
 800fd9c:	e7eb      	b.n	800fd76 <quorem+0xe4>
 800fd9e:	2000      	movs	r0, #0
 800fda0:	e7ee      	b.n	800fd80 <quorem+0xee>
 800fda2:	0000      	movs	r0, r0
 800fda4:	0000      	movs	r0, r0
	...

0800fda8 <_dtoa_r>:
 800fda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdac:	ed2d 8b04 	vpush	{d8-d9}
 800fdb0:	69c5      	ldr	r5, [r0, #28]
 800fdb2:	b093      	sub	sp, #76	; 0x4c
 800fdb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fdb8:	ec57 6b10 	vmov	r6, r7, d0
 800fdbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fdc0:	9107      	str	r1, [sp, #28]
 800fdc2:	4604      	mov	r4, r0
 800fdc4:	920a      	str	r2, [sp, #40]	; 0x28
 800fdc6:	930d      	str	r3, [sp, #52]	; 0x34
 800fdc8:	b975      	cbnz	r5, 800fde8 <_dtoa_r+0x40>
 800fdca:	2010      	movs	r0, #16
 800fdcc:	f000 fe2a 	bl	8010a24 <malloc>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	61e0      	str	r0, [r4, #28]
 800fdd4:	b920      	cbnz	r0, 800fde0 <_dtoa_r+0x38>
 800fdd6:	4bae      	ldr	r3, [pc, #696]	; (8010090 <_dtoa_r+0x2e8>)
 800fdd8:	21ef      	movs	r1, #239	; 0xef
 800fdda:	48ae      	ldr	r0, [pc, #696]	; (8010094 <_dtoa_r+0x2ec>)
 800fddc:	f001 fc82 	bl	80116e4 <__assert_func>
 800fde0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fde4:	6005      	str	r5, [r0, #0]
 800fde6:	60c5      	str	r5, [r0, #12]
 800fde8:	69e3      	ldr	r3, [r4, #28]
 800fdea:	6819      	ldr	r1, [r3, #0]
 800fdec:	b151      	cbz	r1, 800fe04 <_dtoa_r+0x5c>
 800fdee:	685a      	ldr	r2, [r3, #4]
 800fdf0:	604a      	str	r2, [r1, #4]
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	4093      	lsls	r3, r2
 800fdf6:	608b      	str	r3, [r1, #8]
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f000 ff07 	bl	8010c0c <_Bfree>
 800fdfe:	69e3      	ldr	r3, [r4, #28]
 800fe00:	2200      	movs	r2, #0
 800fe02:	601a      	str	r2, [r3, #0]
 800fe04:	1e3b      	subs	r3, r7, #0
 800fe06:	bfbb      	ittet	lt
 800fe08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fe0c:	9303      	strlt	r3, [sp, #12]
 800fe0e:	2300      	movge	r3, #0
 800fe10:	2201      	movlt	r2, #1
 800fe12:	bfac      	ite	ge
 800fe14:	f8c8 3000 	strge.w	r3, [r8]
 800fe18:	f8c8 2000 	strlt.w	r2, [r8]
 800fe1c:	4b9e      	ldr	r3, [pc, #632]	; (8010098 <_dtoa_r+0x2f0>)
 800fe1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fe22:	ea33 0308 	bics.w	r3, r3, r8
 800fe26:	d11b      	bne.n	800fe60 <_dtoa_r+0xb8>
 800fe28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe2a:	f242 730f 	movw	r3, #9999	; 0x270f
 800fe2e:	6013      	str	r3, [r2, #0]
 800fe30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fe34:	4333      	orrs	r3, r6
 800fe36:	f000 8593 	beq.w	8010960 <_dtoa_r+0xbb8>
 800fe3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe3c:	b963      	cbnz	r3, 800fe58 <_dtoa_r+0xb0>
 800fe3e:	4b97      	ldr	r3, [pc, #604]	; (801009c <_dtoa_r+0x2f4>)
 800fe40:	e027      	b.n	800fe92 <_dtoa_r+0xea>
 800fe42:	4b97      	ldr	r3, [pc, #604]	; (80100a0 <_dtoa_r+0x2f8>)
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	3308      	adds	r3, #8
 800fe48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe4a:	6013      	str	r3, [r2, #0]
 800fe4c:	9800      	ldr	r0, [sp, #0]
 800fe4e:	b013      	add	sp, #76	; 0x4c
 800fe50:	ecbd 8b04 	vpop	{d8-d9}
 800fe54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe58:	4b90      	ldr	r3, [pc, #576]	; (801009c <_dtoa_r+0x2f4>)
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	3303      	adds	r3, #3
 800fe5e:	e7f3      	b.n	800fe48 <_dtoa_r+0xa0>
 800fe60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe64:	2200      	movs	r2, #0
 800fe66:	ec51 0b17 	vmov	r0, r1, d7
 800fe6a:	eeb0 8a47 	vmov.f32	s16, s14
 800fe6e:	eef0 8a67 	vmov.f32	s17, s15
 800fe72:	2300      	movs	r3, #0
 800fe74:	f7f0 fe38 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe78:	4681      	mov	r9, r0
 800fe7a:	b160      	cbz	r0, 800fe96 <_dtoa_r+0xee>
 800fe7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe7e:	2301      	movs	r3, #1
 800fe80:	6013      	str	r3, [r2, #0]
 800fe82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f000 8568 	beq.w	801095a <_dtoa_r+0xbb2>
 800fe8a:	4b86      	ldr	r3, [pc, #536]	; (80100a4 <_dtoa_r+0x2fc>)
 800fe8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe8e:	6013      	str	r3, [r2, #0]
 800fe90:	3b01      	subs	r3, #1
 800fe92:	9300      	str	r3, [sp, #0]
 800fe94:	e7da      	b.n	800fe4c <_dtoa_r+0xa4>
 800fe96:	aa10      	add	r2, sp, #64	; 0x40
 800fe98:	a911      	add	r1, sp, #68	; 0x44
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	eeb0 0a48 	vmov.f32	s0, s16
 800fea0:	eef0 0a68 	vmov.f32	s1, s17
 800fea4:	f001 f994 	bl	80111d0 <__d2b>
 800fea8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800feac:	4682      	mov	sl, r0
 800feae:	2d00      	cmp	r5, #0
 800feb0:	d07f      	beq.n	800ffb2 <_dtoa_r+0x20a>
 800feb2:	ee18 3a90 	vmov	r3, s17
 800feb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800feba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800febe:	ec51 0b18 	vmov	r0, r1, d8
 800fec2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800feca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fece:	4619      	mov	r1, r3
 800fed0:	2200      	movs	r2, #0
 800fed2:	4b75      	ldr	r3, [pc, #468]	; (80100a8 <_dtoa_r+0x300>)
 800fed4:	f7f0 f9e8 	bl	80002a8 <__aeabi_dsub>
 800fed8:	a367      	add	r3, pc, #412	; (adr r3, 8010078 <_dtoa_r+0x2d0>)
 800feda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fede:	f7f0 fb9b 	bl	8000618 <__aeabi_dmul>
 800fee2:	a367      	add	r3, pc, #412	; (adr r3, 8010080 <_dtoa_r+0x2d8>)
 800fee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee8:	f7f0 f9e0 	bl	80002ac <__adddf3>
 800feec:	4606      	mov	r6, r0
 800feee:	4628      	mov	r0, r5
 800fef0:	460f      	mov	r7, r1
 800fef2:	f7f0 fb27 	bl	8000544 <__aeabi_i2d>
 800fef6:	a364      	add	r3, pc, #400	; (adr r3, 8010088 <_dtoa_r+0x2e0>)
 800fef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefc:	f7f0 fb8c 	bl	8000618 <__aeabi_dmul>
 800ff00:	4602      	mov	r2, r0
 800ff02:	460b      	mov	r3, r1
 800ff04:	4630      	mov	r0, r6
 800ff06:	4639      	mov	r1, r7
 800ff08:	f7f0 f9d0 	bl	80002ac <__adddf3>
 800ff0c:	4606      	mov	r6, r0
 800ff0e:	460f      	mov	r7, r1
 800ff10:	f7f0 fe32 	bl	8000b78 <__aeabi_d2iz>
 800ff14:	2200      	movs	r2, #0
 800ff16:	4683      	mov	fp, r0
 800ff18:	2300      	movs	r3, #0
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	4639      	mov	r1, r7
 800ff1e:	f7f0 fded 	bl	8000afc <__aeabi_dcmplt>
 800ff22:	b148      	cbz	r0, 800ff38 <_dtoa_r+0x190>
 800ff24:	4658      	mov	r0, fp
 800ff26:	f7f0 fb0d 	bl	8000544 <__aeabi_i2d>
 800ff2a:	4632      	mov	r2, r6
 800ff2c:	463b      	mov	r3, r7
 800ff2e:	f7f0 fddb 	bl	8000ae8 <__aeabi_dcmpeq>
 800ff32:	b908      	cbnz	r0, 800ff38 <_dtoa_r+0x190>
 800ff34:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ff38:	f1bb 0f16 	cmp.w	fp, #22
 800ff3c:	d857      	bhi.n	800ffee <_dtoa_r+0x246>
 800ff3e:	4b5b      	ldr	r3, [pc, #364]	; (80100ac <_dtoa_r+0x304>)
 800ff40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ff44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff48:	ec51 0b18 	vmov	r0, r1, d8
 800ff4c:	f7f0 fdd6 	bl	8000afc <__aeabi_dcmplt>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d04e      	beq.n	800fff2 <_dtoa_r+0x24a>
 800ff54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ff58:	2300      	movs	r3, #0
 800ff5a:	930c      	str	r3, [sp, #48]	; 0x30
 800ff5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff5e:	1b5b      	subs	r3, r3, r5
 800ff60:	1e5a      	subs	r2, r3, #1
 800ff62:	bf45      	ittet	mi
 800ff64:	f1c3 0301 	rsbmi	r3, r3, #1
 800ff68:	9305      	strmi	r3, [sp, #20]
 800ff6a:	2300      	movpl	r3, #0
 800ff6c:	2300      	movmi	r3, #0
 800ff6e:	9206      	str	r2, [sp, #24]
 800ff70:	bf54      	ite	pl
 800ff72:	9305      	strpl	r3, [sp, #20]
 800ff74:	9306      	strmi	r3, [sp, #24]
 800ff76:	f1bb 0f00 	cmp.w	fp, #0
 800ff7a:	db3c      	blt.n	800fff6 <_dtoa_r+0x24e>
 800ff7c:	9b06      	ldr	r3, [sp, #24]
 800ff7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ff82:	445b      	add	r3, fp
 800ff84:	9306      	str	r3, [sp, #24]
 800ff86:	2300      	movs	r3, #0
 800ff88:	9308      	str	r3, [sp, #32]
 800ff8a:	9b07      	ldr	r3, [sp, #28]
 800ff8c:	2b09      	cmp	r3, #9
 800ff8e:	d868      	bhi.n	8010062 <_dtoa_r+0x2ba>
 800ff90:	2b05      	cmp	r3, #5
 800ff92:	bfc4      	itt	gt
 800ff94:	3b04      	subgt	r3, #4
 800ff96:	9307      	strgt	r3, [sp, #28]
 800ff98:	9b07      	ldr	r3, [sp, #28]
 800ff9a:	f1a3 0302 	sub.w	r3, r3, #2
 800ff9e:	bfcc      	ite	gt
 800ffa0:	2500      	movgt	r5, #0
 800ffa2:	2501      	movle	r5, #1
 800ffa4:	2b03      	cmp	r3, #3
 800ffa6:	f200 8085 	bhi.w	80100b4 <_dtoa_r+0x30c>
 800ffaa:	e8df f003 	tbb	[pc, r3]
 800ffae:	3b2e      	.short	0x3b2e
 800ffb0:	5839      	.short	0x5839
 800ffb2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ffb6:	441d      	add	r5, r3
 800ffb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ffbc:	2b20      	cmp	r3, #32
 800ffbe:	bfc1      	itttt	gt
 800ffc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ffc4:	fa08 f803 	lslgt.w	r8, r8, r3
 800ffc8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ffcc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ffd0:	bfd6      	itet	le
 800ffd2:	f1c3 0320 	rsble	r3, r3, #32
 800ffd6:	ea48 0003 	orrgt.w	r0, r8, r3
 800ffda:	fa06 f003 	lslle.w	r0, r6, r3
 800ffde:	f7f0 faa1 	bl	8000524 <__aeabi_ui2d>
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ffe8:	3d01      	subs	r5, #1
 800ffea:	920e      	str	r2, [sp, #56]	; 0x38
 800ffec:	e76f      	b.n	800fece <_dtoa_r+0x126>
 800ffee:	2301      	movs	r3, #1
 800fff0:	e7b3      	b.n	800ff5a <_dtoa_r+0x1b2>
 800fff2:	900c      	str	r0, [sp, #48]	; 0x30
 800fff4:	e7b2      	b.n	800ff5c <_dtoa_r+0x1b4>
 800fff6:	9b05      	ldr	r3, [sp, #20]
 800fff8:	eba3 030b 	sub.w	r3, r3, fp
 800fffc:	9305      	str	r3, [sp, #20]
 800fffe:	f1cb 0300 	rsb	r3, fp, #0
 8010002:	9308      	str	r3, [sp, #32]
 8010004:	2300      	movs	r3, #0
 8010006:	930b      	str	r3, [sp, #44]	; 0x2c
 8010008:	e7bf      	b.n	800ff8a <_dtoa_r+0x1e2>
 801000a:	2300      	movs	r3, #0
 801000c:	9309      	str	r3, [sp, #36]	; 0x24
 801000e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010010:	2b00      	cmp	r3, #0
 8010012:	dc52      	bgt.n	80100ba <_dtoa_r+0x312>
 8010014:	2301      	movs	r3, #1
 8010016:	9301      	str	r3, [sp, #4]
 8010018:	9304      	str	r3, [sp, #16]
 801001a:	461a      	mov	r2, r3
 801001c:	920a      	str	r2, [sp, #40]	; 0x28
 801001e:	e00b      	b.n	8010038 <_dtoa_r+0x290>
 8010020:	2301      	movs	r3, #1
 8010022:	e7f3      	b.n	801000c <_dtoa_r+0x264>
 8010024:	2300      	movs	r3, #0
 8010026:	9309      	str	r3, [sp, #36]	; 0x24
 8010028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801002a:	445b      	add	r3, fp
 801002c:	9301      	str	r3, [sp, #4]
 801002e:	3301      	adds	r3, #1
 8010030:	2b01      	cmp	r3, #1
 8010032:	9304      	str	r3, [sp, #16]
 8010034:	bfb8      	it	lt
 8010036:	2301      	movlt	r3, #1
 8010038:	69e0      	ldr	r0, [r4, #28]
 801003a:	2100      	movs	r1, #0
 801003c:	2204      	movs	r2, #4
 801003e:	f102 0614 	add.w	r6, r2, #20
 8010042:	429e      	cmp	r6, r3
 8010044:	d93d      	bls.n	80100c2 <_dtoa_r+0x31a>
 8010046:	6041      	str	r1, [r0, #4]
 8010048:	4620      	mov	r0, r4
 801004a:	f000 fd9f 	bl	8010b8c <_Balloc>
 801004e:	9000      	str	r0, [sp, #0]
 8010050:	2800      	cmp	r0, #0
 8010052:	d139      	bne.n	80100c8 <_dtoa_r+0x320>
 8010054:	4b16      	ldr	r3, [pc, #88]	; (80100b0 <_dtoa_r+0x308>)
 8010056:	4602      	mov	r2, r0
 8010058:	f240 11af 	movw	r1, #431	; 0x1af
 801005c:	e6bd      	b.n	800fdda <_dtoa_r+0x32>
 801005e:	2301      	movs	r3, #1
 8010060:	e7e1      	b.n	8010026 <_dtoa_r+0x27e>
 8010062:	2501      	movs	r5, #1
 8010064:	2300      	movs	r3, #0
 8010066:	9307      	str	r3, [sp, #28]
 8010068:	9509      	str	r5, [sp, #36]	; 0x24
 801006a:	f04f 33ff 	mov.w	r3, #4294967295
 801006e:	9301      	str	r3, [sp, #4]
 8010070:	9304      	str	r3, [sp, #16]
 8010072:	2200      	movs	r2, #0
 8010074:	2312      	movs	r3, #18
 8010076:	e7d1      	b.n	801001c <_dtoa_r+0x274>
 8010078:	636f4361 	.word	0x636f4361
 801007c:	3fd287a7 	.word	0x3fd287a7
 8010080:	8b60c8b3 	.word	0x8b60c8b3
 8010084:	3fc68a28 	.word	0x3fc68a28
 8010088:	509f79fb 	.word	0x509f79fb
 801008c:	3fd34413 	.word	0x3fd34413
 8010090:	08013971 	.word	0x08013971
 8010094:	08013988 	.word	0x08013988
 8010098:	7ff00000 	.word	0x7ff00000
 801009c:	0801396d 	.word	0x0801396d
 80100a0:	08013964 	.word	0x08013964
 80100a4:	08013941 	.word	0x08013941
 80100a8:	3ff80000 	.word	0x3ff80000
 80100ac:	08013a78 	.word	0x08013a78
 80100b0:	080139e0 	.word	0x080139e0
 80100b4:	2301      	movs	r3, #1
 80100b6:	9309      	str	r3, [sp, #36]	; 0x24
 80100b8:	e7d7      	b.n	801006a <_dtoa_r+0x2c2>
 80100ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100bc:	9301      	str	r3, [sp, #4]
 80100be:	9304      	str	r3, [sp, #16]
 80100c0:	e7ba      	b.n	8010038 <_dtoa_r+0x290>
 80100c2:	3101      	adds	r1, #1
 80100c4:	0052      	lsls	r2, r2, #1
 80100c6:	e7ba      	b.n	801003e <_dtoa_r+0x296>
 80100c8:	69e3      	ldr	r3, [r4, #28]
 80100ca:	9a00      	ldr	r2, [sp, #0]
 80100cc:	601a      	str	r2, [r3, #0]
 80100ce:	9b04      	ldr	r3, [sp, #16]
 80100d0:	2b0e      	cmp	r3, #14
 80100d2:	f200 80a8 	bhi.w	8010226 <_dtoa_r+0x47e>
 80100d6:	2d00      	cmp	r5, #0
 80100d8:	f000 80a5 	beq.w	8010226 <_dtoa_r+0x47e>
 80100dc:	f1bb 0f00 	cmp.w	fp, #0
 80100e0:	dd38      	ble.n	8010154 <_dtoa_r+0x3ac>
 80100e2:	4bc0      	ldr	r3, [pc, #768]	; (80103e4 <_dtoa_r+0x63c>)
 80100e4:	f00b 020f 	and.w	r2, fp, #15
 80100e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80100f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80100f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80100f8:	d019      	beq.n	801012e <_dtoa_r+0x386>
 80100fa:	4bbb      	ldr	r3, [pc, #748]	; (80103e8 <_dtoa_r+0x640>)
 80100fc:	ec51 0b18 	vmov	r0, r1, d8
 8010100:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010104:	f7f0 fbb2 	bl	800086c <__aeabi_ddiv>
 8010108:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801010c:	f008 080f 	and.w	r8, r8, #15
 8010110:	2503      	movs	r5, #3
 8010112:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80103e8 <_dtoa_r+0x640>
 8010116:	f1b8 0f00 	cmp.w	r8, #0
 801011a:	d10a      	bne.n	8010132 <_dtoa_r+0x38a>
 801011c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010120:	4632      	mov	r2, r6
 8010122:	463b      	mov	r3, r7
 8010124:	f7f0 fba2 	bl	800086c <__aeabi_ddiv>
 8010128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801012c:	e02b      	b.n	8010186 <_dtoa_r+0x3de>
 801012e:	2502      	movs	r5, #2
 8010130:	e7ef      	b.n	8010112 <_dtoa_r+0x36a>
 8010132:	f018 0f01 	tst.w	r8, #1
 8010136:	d008      	beq.n	801014a <_dtoa_r+0x3a2>
 8010138:	4630      	mov	r0, r6
 801013a:	4639      	mov	r1, r7
 801013c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010140:	f7f0 fa6a 	bl	8000618 <__aeabi_dmul>
 8010144:	3501      	adds	r5, #1
 8010146:	4606      	mov	r6, r0
 8010148:	460f      	mov	r7, r1
 801014a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801014e:	f109 0908 	add.w	r9, r9, #8
 8010152:	e7e0      	b.n	8010116 <_dtoa_r+0x36e>
 8010154:	f000 809f 	beq.w	8010296 <_dtoa_r+0x4ee>
 8010158:	f1cb 0600 	rsb	r6, fp, #0
 801015c:	4ba1      	ldr	r3, [pc, #644]	; (80103e4 <_dtoa_r+0x63c>)
 801015e:	4fa2      	ldr	r7, [pc, #648]	; (80103e8 <_dtoa_r+0x640>)
 8010160:	f006 020f 	and.w	r2, r6, #15
 8010164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016c:	ec51 0b18 	vmov	r0, r1, d8
 8010170:	f7f0 fa52 	bl	8000618 <__aeabi_dmul>
 8010174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010178:	1136      	asrs	r6, r6, #4
 801017a:	2300      	movs	r3, #0
 801017c:	2502      	movs	r5, #2
 801017e:	2e00      	cmp	r6, #0
 8010180:	d17e      	bne.n	8010280 <_dtoa_r+0x4d8>
 8010182:	2b00      	cmp	r3, #0
 8010184:	d1d0      	bne.n	8010128 <_dtoa_r+0x380>
 8010186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010188:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801018c:	2b00      	cmp	r3, #0
 801018e:	f000 8084 	beq.w	801029a <_dtoa_r+0x4f2>
 8010192:	4b96      	ldr	r3, [pc, #600]	; (80103ec <_dtoa_r+0x644>)
 8010194:	2200      	movs	r2, #0
 8010196:	4640      	mov	r0, r8
 8010198:	4649      	mov	r1, r9
 801019a:	f7f0 fcaf 	bl	8000afc <__aeabi_dcmplt>
 801019e:	2800      	cmp	r0, #0
 80101a0:	d07b      	beq.n	801029a <_dtoa_r+0x4f2>
 80101a2:	9b04      	ldr	r3, [sp, #16]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d078      	beq.n	801029a <_dtoa_r+0x4f2>
 80101a8:	9b01      	ldr	r3, [sp, #4]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	dd39      	ble.n	8010222 <_dtoa_r+0x47a>
 80101ae:	4b90      	ldr	r3, [pc, #576]	; (80103f0 <_dtoa_r+0x648>)
 80101b0:	2200      	movs	r2, #0
 80101b2:	4640      	mov	r0, r8
 80101b4:	4649      	mov	r1, r9
 80101b6:	f7f0 fa2f 	bl	8000618 <__aeabi_dmul>
 80101ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101be:	9e01      	ldr	r6, [sp, #4]
 80101c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80101c4:	3501      	adds	r5, #1
 80101c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80101ca:	4628      	mov	r0, r5
 80101cc:	f7f0 f9ba 	bl	8000544 <__aeabi_i2d>
 80101d0:	4642      	mov	r2, r8
 80101d2:	464b      	mov	r3, r9
 80101d4:	f7f0 fa20 	bl	8000618 <__aeabi_dmul>
 80101d8:	4b86      	ldr	r3, [pc, #536]	; (80103f4 <_dtoa_r+0x64c>)
 80101da:	2200      	movs	r2, #0
 80101dc:	f7f0 f866 	bl	80002ac <__adddf3>
 80101e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80101e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101e8:	9303      	str	r3, [sp, #12]
 80101ea:	2e00      	cmp	r6, #0
 80101ec:	d158      	bne.n	80102a0 <_dtoa_r+0x4f8>
 80101ee:	4b82      	ldr	r3, [pc, #520]	; (80103f8 <_dtoa_r+0x650>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	4640      	mov	r0, r8
 80101f4:	4649      	mov	r1, r9
 80101f6:	f7f0 f857 	bl	80002a8 <__aeabi_dsub>
 80101fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101fe:	4680      	mov	r8, r0
 8010200:	4689      	mov	r9, r1
 8010202:	f7f0 fc99 	bl	8000b38 <__aeabi_dcmpgt>
 8010206:	2800      	cmp	r0, #0
 8010208:	f040 8296 	bne.w	8010738 <_dtoa_r+0x990>
 801020c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010210:	4640      	mov	r0, r8
 8010212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010216:	4649      	mov	r1, r9
 8010218:	f7f0 fc70 	bl	8000afc <__aeabi_dcmplt>
 801021c:	2800      	cmp	r0, #0
 801021e:	f040 8289 	bne.w	8010734 <_dtoa_r+0x98c>
 8010222:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010226:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010228:	2b00      	cmp	r3, #0
 801022a:	f2c0 814e 	blt.w	80104ca <_dtoa_r+0x722>
 801022e:	f1bb 0f0e 	cmp.w	fp, #14
 8010232:	f300 814a 	bgt.w	80104ca <_dtoa_r+0x722>
 8010236:	4b6b      	ldr	r3, [pc, #428]	; (80103e4 <_dtoa_r+0x63c>)
 8010238:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801023c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010242:	2b00      	cmp	r3, #0
 8010244:	f280 80dc 	bge.w	8010400 <_dtoa_r+0x658>
 8010248:	9b04      	ldr	r3, [sp, #16]
 801024a:	2b00      	cmp	r3, #0
 801024c:	f300 80d8 	bgt.w	8010400 <_dtoa_r+0x658>
 8010250:	f040 826f 	bne.w	8010732 <_dtoa_r+0x98a>
 8010254:	4b68      	ldr	r3, [pc, #416]	; (80103f8 <_dtoa_r+0x650>)
 8010256:	2200      	movs	r2, #0
 8010258:	4640      	mov	r0, r8
 801025a:	4649      	mov	r1, r9
 801025c:	f7f0 f9dc 	bl	8000618 <__aeabi_dmul>
 8010260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010264:	f7f0 fc5e 	bl	8000b24 <__aeabi_dcmpge>
 8010268:	9e04      	ldr	r6, [sp, #16]
 801026a:	4637      	mov	r7, r6
 801026c:	2800      	cmp	r0, #0
 801026e:	f040 8245 	bne.w	80106fc <_dtoa_r+0x954>
 8010272:	9d00      	ldr	r5, [sp, #0]
 8010274:	2331      	movs	r3, #49	; 0x31
 8010276:	f805 3b01 	strb.w	r3, [r5], #1
 801027a:	f10b 0b01 	add.w	fp, fp, #1
 801027e:	e241      	b.n	8010704 <_dtoa_r+0x95c>
 8010280:	07f2      	lsls	r2, r6, #31
 8010282:	d505      	bpl.n	8010290 <_dtoa_r+0x4e8>
 8010284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010288:	f7f0 f9c6 	bl	8000618 <__aeabi_dmul>
 801028c:	3501      	adds	r5, #1
 801028e:	2301      	movs	r3, #1
 8010290:	1076      	asrs	r6, r6, #1
 8010292:	3708      	adds	r7, #8
 8010294:	e773      	b.n	801017e <_dtoa_r+0x3d6>
 8010296:	2502      	movs	r5, #2
 8010298:	e775      	b.n	8010186 <_dtoa_r+0x3de>
 801029a:	9e04      	ldr	r6, [sp, #16]
 801029c:	465f      	mov	r7, fp
 801029e:	e792      	b.n	80101c6 <_dtoa_r+0x41e>
 80102a0:	9900      	ldr	r1, [sp, #0]
 80102a2:	4b50      	ldr	r3, [pc, #320]	; (80103e4 <_dtoa_r+0x63c>)
 80102a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102a8:	4431      	add	r1, r6
 80102aa:	9102      	str	r1, [sp, #8]
 80102ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102ae:	eeb0 9a47 	vmov.f32	s18, s14
 80102b2:	eef0 9a67 	vmov.f32	s19, s15
 80102b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80102ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80102be:	2900      	cmp	r1, #0
 80102c0:	d044      	beq.n	801034c <_dtoa_r+0x5a4>
 80102c2:	494e      	ldr	r1, [pc, #312]	; (80103fc <_dtoa_r+0x654>)
 80102c4:	2000      	movs	r0, #0
 80102c6:	f7f0 fad1 	bl	800086c <__aeabi_ddiv>
 80102ca:	ec53 2b19 	vmov	r2, r3, d9
 80102ce:	f7ef ffeb 	bl	80002a8 <__aeabi_dsub>
 80102d2:	9d00      	ldr	r5, [sp, #0]
 80102d4:	ec41 0b19 	vmov	d9, r0, r1
 80102d8:	4649      	mov	r1, r9
 80102da:	4640      	mov	r0, r8
 80102dc:	f7f0 fc4c 	bl	8000b78 <__aeabi_d2iz>
 80102e0:	4606      	mov	r6, r0
 80102e2:	f7f0 f92f 	bl	8000544 <__aeabi_i2d>
 80102e6:	4602      	mov	r2, r0
 80102e8:	460b      	mov	r3, r1
 80102ea:	4640      	mov	r0, r8
 80102ec:	4649      	mov	r1, r9
 80102ee:	f7ef ffdb 	bl	80002a8 <__aeabi_dsub>
 80102f2:	3630      	adds	r6, #48	; 0x30
 80102f4:	f805 6b01 	strb.w	r6, [r5], #1
 80102f8:	ec53 2b19 	vmov	r2, r3, d9
 80102fc:	4680      	mov	r8, r0
 80102fe:	4689      	mov	r9, r1
 8010300:	f7f0 fbfc 	bl	8000afc <__aeabi_dcmplt>
 8010304:	2800      	cmp	r0, #0
 8010306:	d164      	bne.n	80103d2 <_dtoa_r+0x62a>
 8010308:	4642      	mov	r2, r8
 801030a:	464b      	mov	r3, r9
 801030c:	4937      	ldr	r1, [pc, #220]	; (80103ec <_dtoa_r+0x644>)
 801030e:	2000      	movs	r0, #0
 8010310:	f7ef ffca 	bl	80002a8 <__aeabi_dsub>
 8010314:	ec53 2b19 	vmov	r2, r3, d9
 8010318:	f7f0 fbf0 	bl	8000afc <__aeabi_dcmplt>
 801031c:	2800      	cmp	r0, #0
 801031e:	f040 80b6 	bne.w	801048e <_dtoa_r+0x6e6>
 8010322:	9b02      	ldr	r3, [sp, #8]
 8010324:	429d      	cmp	r5, r3
 8010326:	f43f af7c 	beq.w	8010222 <_dtoa_r+0x47a>
 801032a:	4b31      	ldr	r3, [pc, #196]	; (80103f0 <_dtoa_r+0x648>)
 801032c:	ec51 0b19 	vmov	r0, r1, d9
 8010330:	2200      	movs	r2, #0
 8010332:	f7f0 f971 	bl	8000618 <__aeabi_dmul>
 8010336:	4b2e      	ldr	r3, [pc, #184]	; (80103f0 <_dtoa_r+0x648>)
 8010338:	ec41 0b19 	vmov	d9, r0, r1
 801033c:	2200      	movs	r2, #0
 801033e:	4640      	mov	r0, r8
 8010340:	4649      	mov	r1, r9
 8010342:	f7f0 f969 	bl	8000618 <__aeabi_dmul>
 8010346:	4680      	mov	r8, r0
 8010348:	4689      	mov	r9, r1
 801034a:	e7c5      	b.n	80102d8 <_dtoa_r+0x530>
 801034c:	ec51 0b17 	vmov	r0, r1, d7
 8010350:	f7f0 f962 	bl	8000618 <__aeabi_dmul>
 8010354:	9b02      	ldr	r3, [sp, #8]
 8010356:	9d00      	ldr	r5, [sp, #0]
 8010358:	930f      	str	r3, [sp, #60]	; 0x3c
 801035a:	ec41 0b19 	vmov	d9, r0, r1
 801035e:	4649      	mov	r1, r9
 8010360:	4640      	mov	r0, r8
 8010362:	f7f0 fc09 	bl	8000b78 <__aeabi_d2iz>
 8010366:	4606      	mov	r6, r0
 8010368:	f7f0 f8ec 	bl	8000544 <__aeabi_i2d>
 801036c:	3630      	adds	r6, #48	; 0x30
 801036e:	4602      	mov	r2, r0
 8010370:	460b      	mov	r3, r1
 8010372:	4640      	mov	r0, r8
 8010374:	4649      	mov	r1, r9
 8010376:	f7ef ff97 	bl	80002a8 <__aeabi_dsub>
 801037a:	f805 6b01 	strb.w	r6, [r5], #1
 801037e:	9b02      	ldr	r3, [sp, #8]
 8010380:	429d      	cmp	r5, r3
 8010382:	4680      	mov	r8, r0
 8010384:	4689      	mov	r9, r1
 8010386:	f04f 0200 	mov.w	r2, #0
 801038a:	d124      	bne.n	80103d6 <_dtoa_r+0x62e>
 801038c:	4b1b      	ldr	r3, [pc, #108]	; (80103fc <_dtoa_r+0x654>)
 801038e:	ec51 0b19 	vmov	r0, r1, d9
 8010392:	f7ef ff8b 	bl	80002ac <__adddf3>
 8010396:	4602      	mov	r2, r0
 8010398:	460b      	mov	r3, r1
 801039a:	4640      	mov	r0, r8
 801039c:	4649      	mov	r1, r9
 801039e:	f7f0 fbcb 	bl	8000b38 <__aeabi_dcmpgt>
 80103a2:	2800      	cmp	r0, #0
 80103a4:	d173      	bne.n	801048e <_dtoa_r+0x6e6>
 80103a6:	ec53 2b19 	vmov	r2, r3, d9
 80103aa:	4914      	ldr	r1, [pc, #80]	; (80103fc <_dtoa_r+0x654>)
 80103ac:	2000      	movs	r0, #0
 80103ae:	f7ef ff7b 	bl	80002a8 <__aeabi_dsub>
 80103b2:	4602      	mov	r2, r0
 80103b4:	460b      	mov	r3, r1
 80103b6:	4640      	mov	r0, r8
 80103b8:	4649      	mov	r1, r9
 80103ba:	f7f0 fb9f 	bl	8000afc <__aeabi_dcmplt>
 80103be:	2800      	cmp	r0, #0
 80103c0:	f43f af2f 	beq.w	8010222 <_dtoa_r+0x47a>
 80103c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80103c6:	1e6b      	subs	r3, r5, #1
 80103c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80103ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80103ce:	2b30      	cmp	r3, #48	; 0x30
 80103d0:	d0f8      	beq.n	80103c4 <_dtoa_r+0x61c>
 80103d2:	46bb      	mov	fp, r7
 80103d4:	e04a      	b.n	801046c <_dtoa_r+0x6c4>
 80103d6:	4b06      	ldr	r3, [pc, #24]	; (80103f0 <_dtoa_r+0x648>)
 80103d8:	f7f0 f91e 	bl	8000618 <__aeabi_dmul>
 80103dc:	4680      	mov	r8, r0
 80103de:	4689      	mov	r9, r1
 80103e0:	e7bd      	b.n	801035e <_dtoa_r+0x5b6>
 80103e2:	bf00      	nop
 80103e4:	08013a78 	.word	0x08013a78
 80103e8:	08013a50 	.word	0x08013a50
 80103ec:	3ff00000 	.word	0x3ff00000
 80103f0:	40240000 	.word	0x40240000
 80103f4:	401c0000 	.word	0x401c0000
 80103f8:	40140000 	.word	0x40140000
 80103fc:	3fe00000 	.word	0x3fe00000
 8010400:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010404:	9d00      	ldr	r5, [sp, #0]
 8010406:	4642      	mov	r2, r8
 8010408:	464b      	mov	r3, r9
 801040a:	4630      	mov	r0, r6
 801040c:	4639      	mov	r1, r7
 801040e:	f7f0 fa2d 	bl	800086c <__aeabi_ddiv>
 8010412:	f7f0 fbb1 	bl	8000b78 <__aeabi_d2iz>
 8010416:	9001      	str	r0, [sp, #4]
 8010418:	f7f0 f894 	bl	8000544 <__aeabi_i2d>
 801041c:	4642      	mov	r2, r8
 801041e:	464b      	mov	r3, r9
 8010420:	f7f0 f8fa 	bl	8000618 <__aeabi_dmul>
 8010424:	4602      	mov	r2, r0
 8010426:	460b      	mov	r3, r1
 8010428:	4630      	mov	r0, r6
 801042a:	4639      	mov	r1, r7
 801042c:	f7ef ff3c 	bl	80002a8 <__aeabi_dsub>
 8010430:	9e01      	ldr	r6, [sp, #4]
 8010432:	9f04      	ldr	r7, [sp, #16]
 8010434:	3630      	adds	r6, #48	; 0x30
 8010436:	f805 6b01 	strb.w	r6, [r5], #1
 801043a:	9e00      	ldr	r6, [sp, #0]
 801043c:	1bae      	subs	r6, r5, r6
 801043e:	42b7      	cmp	r7, r6
 8010440:	4602      	mov	r2, r0
 8010442:	460b      	mov	r3, r1
 8010444:	d134      	bne.n	80104b0 <_dtoa_r+0x708>
 8010446:	f7ef ff31 	bl	80002ac <__adddf3>
 801044a:	4642      	mov	r2, r8
 801044c:	464b      	mov	r3, r9
 801044e:	4606      	mov	r6, r0
 8010450:	460f      	mov	r7, r1
 8010452:	f7f0 fb71 	bl	8000b38 <__aeabi_dcmpgt>
 8010456:	b9c8      	cbnz	r0, 801048c <_dtoa_r+0x6e4>
 8010458:	4642      	mov	r2, r8
 801045a:	464b      	mov	r3, r9
 801045c:	4630      	mov	r0, r6
 801045e:	4639      	mov	r1, r7
 8010460:	f7f0 fb42 	bl	8000ae8 <__aeabi_dcmpeq>
 8010464:	b110      	cbz	r0, 801046c <_dtoa_r+0x6c4>
 8010466:	9b01      	ldr	r3, [sp, #4]
 8010468:	07db      	lsls	r3, r3, #31
 801046a:	d40f      	bmi.n	801048c <_dtoa_r+0x6e4>
 801046c:	4651      	mov	r1, sl
 801046e:	4620      	mov	r0, r4
 8010470:	f000 fbcc 	bl	8010c0c <_Bfree>
 8010474:	2300      	movs	r3, #0
 8010476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010478:	702b      	strb	r3, [r5, #0]
 801047a:	f10b 0301 	add.w	r3, fp, #1
 801047e:	6013      	str	r3, [r2, #0]
 8010480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010482:	2b00      	cmp	r3, #0
 8010484:	f43f ace2 	beq.w	800fe4c <_dtoa_r+0xa4>
 8010488:	601d      	str	r5, [r3, #0]
 801048a:	e4df      	b.n	800fe4c <_dtoa_r+0xa4>
 801048c:	465f      	mov	r7, fp
 801048e:	462b      	mov	r3, r5
 8010490:	461d      	mov	r5, r3
 8010492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010496:	2a39      	cmp	r2, #57	; 0x39
 8010498:	d106      	bne.n	80104a8 <_dtoa_r+0x700>
 801049a:	9a00      	ldr	r2, [sp, #0]
 801049c:	429a      	cmp	r2, r3
 801049e:	d1f7      	bne.n	8010490 <_dtoa_r+0x6e8>
 80104a0:	9900      	ldr	r1, [sp, #0]
 80104a2:	2230      	movs	r2, #48	; 0x30
 80104a4:	3701      	adds	r7, #1
 80104a6:	700a      	strb	r2, [r1, #0]
 80104a8:	781a      	ldrb	r2, [r3, #0]
 80104aa:	3201      	adds	r2, #1
 80104ac:	701a      	strb	r2, [r3, #0]
 80104ae:	e790      	b.n	80103d2 <_dtoa_r+0x62a>
 80104b0:	4ba3      	ldr	r3, [pc, #652]	; (8010740 <_dtoa_r+0x998>)
 80104b2:	2200      	movs	r2, #0
 80104b4:	f7f0 f8b0 	bl	8000618 <__aeabi_dmul>
 80104b8:	2200      	movs	r2, #0
 80104ba:	2300      	movs	r3, #0
 80104bc:	4606      	mov	r6, r0
 80104be:	460f      	mov	r7, r1
 80104c0:	f7f0 fb12 	bl	8000ae8 <__aeabi_dcmpeq>
 80104c4:	2800      	cmp	r0, #0
 80104c6:	d09e      	beq.n	8010406 <_dtoa_r+0x65e>
 80104c8:	e7d0      	b.n	801046c <_dtoa_r+0x6c4>
 80104ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104cc:	2a00      	cmp	r2, #0
 80104ce:	f000 80ca 	beq.w	8010666 <_dtoa_r+0x8be>
 80104d2:	9a07      	ldr	r2, [sp, #28]
 80104d4:	2a01      	cmp	r2, #1
 80104d6:	f300 80ad 	bgt.w	8010634 <_dtoa_r+0x88c>
 80104da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80104dc:	2a00      	cmp	r2, #0
 80104de:	f000 80a5 	beq.w	801062c <_dtoa_r+0x884>
 80104e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80104e6:	9e08      	ldr	r6, [sp, #32]
 80104e8:	9d05      	ldr	r5, [sp, #20]
 80104ea:	9a05      	ldr	r2, [sp, #20]
 80104ec:	441a      	add	r2, r3
 80104ee:	9205      	str	r2, [sp, #20]
 80104f0:	9a06      	ldr	r2, [sp, #24]
 80104f2:	2101      	movs	r1, #1
 80104f4:	441a      	add	r2, r3
 80104f6:	4620      	mov	r0, r4
 80104f8:	9206      	str	r2, [sp, #24]
 80104fa:	f000 fc3d 	bl	8010d78 <__i2b>
 80104fe:	4607      	mov	r7, r0
 8010500:	b165      	cbz	r5, 801051c <_dtoa_r+0x774>
 8010502:	9b06      	ldr	r3, [sp, #24]
 8010504:	2b00      	cmp	r3, #0
 8010506:	dd09      	ble.n	801051c <_dtoa_r+0x774>
 8010508:	42ab      	cmp	r3, r5
 801050a:	9a05      	ldr	r2, [sp, #20]
 801050c:	bfa8      	it	ge
 801050e:	462b      	movge	r3, r5
 8010510:	1ad2      	subs	r2, r2, r3
 8010512:	9205      	str	r2, [sp, #20]
 8010514:	9a06      	ldr	r2, [sp, #24]
 8010516:	1aed      	subs	r5, r5, r3
 8010518:	1ad3      	subs	r3, r2, r3
 801051a:	9306      	str	r3, [sp, #24]
 801051c:	9b08      	ldr	r3, [sp, #32]
 801051e:	b1f3      	cbz	r3, 801055e <_dtoa_r+0x7b6>
 8010520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010522:	2b00      	cmp	r3, #0
 8010524:	f000 80a3 	beq.w	801066e <_dtoa_r+0x8c6>
 8010528:	2e00      	cmp	r6, #0
 801052a:	dd10      	ble.n	801054e <_dtoa_r+0x7a6>
 801052c:	4639      	mov	r1, r7
 801052e:	4632      	mov	r2, r6
 8010530:	4620      	mov	r0, r4
 8010532:	f000 fce1 	bl	8010ef8 <__pow5mult>
 8010536:	4652      	mov	r2, sl
 8010538:	4601      	mov	r1, r0
 801053a:	4607      	mov	r7, r0
 801053c:	4620      	mov	r0, r4
 801053e:	f000 fc31 	bl	8010da4 <__multiply>
 8010542:	4651      	mov	r1, sl
 8010544:	4680      	mov	r8, r0
 8010546:	4620      	mov	r0, r4
 8010548:	f000 fb60 	bl	8010c0c <_Bfree>
 801054c:	46c2      	mov	sl, r8
 801054e:	9b08      	ldr	r3, [sp, #32]
 8010550:	1b9a      	subs	r2, r3, r6
 8010552:	d004      	beq.n	801055e <_dtoa_r+0x7b6>
 8010554:	4651      	mov	r1, sl
 8010556:	4620      	mov	r0, r4
 8010558:	f000 fcce 	bl	8010ef8 <__pow5mult>
 801055c:	4682      	mov	sl, r0
 801055e:	2101      	movs	r1, #1
 8010560:	4620      	mov	r0, r4
 8010562:	f000 fc09 	bl	8010d78 <__i2b>
 8010566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010568:	2b00      	cmp	r3, #0
 801056a:	4606      	mov	r6, r0
 801056c:	f340 8081 	ble.w	8010672 <_dtoa_r+0x8ca>
 8010570:	461a      	mov	r2, r3
 8010572:	4601      	mov	r1, r0
 8010574:	4620      	mov	r0, r4
 8010576:	f000 fcbf 	bl	8010ef8 <__pow5mult>
 801057a:	9b07      	ldr	r3, [sp, #28]
 801057c:	2b01      	cmp	r3, #1
 801057e:	4606      	mov	r6, r0
 8010580:	dd7a      	ble.n	8010678 <_dtoa_r+0x8d0>
 8010582:	f04f 0800 	mov.w	r8, #0
 8010586:	6933      	ldr	r3, [r6, #16]
 8010588:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801058c:	6918      	ldr	r0, [r3, #16]
 801058e:	f000 fba5 	bl	8010cdc <__hi0bits>
 8010592:	f1c0 0020 	rsb	r0, r0, #32
 8010596:	9b06      	ldr	r3, [sp, #24]
 8010598:	4418      	add	r0, r3
 801059a:	f010 001f 	ands.w	r0, r0, #31
 801059e:	f000 8094 	beq.w	80106ca <_dtoa_r+0x922>
 80105a2:	f1c0 0320 	rsb	r3, r0, #32
 80105a6:	2b04      	cmp	r3, #4
 80105a8:	f340 8085 	ble.w	80106b6 <_dtoa_r+0x90e>
 80105ac:	9b05      	ldr	r3, [sp, #20]
 80105ae:	f1c0 001c 	rsb	r0, r0, #28
 80105b2:	4403      	add	r3, r0
 80105b4:	9305      	str	r3, [sp, #20]
 80105b6:	9b06      	ldr	r3, [sp, #24]
 80105b8:	4403      	add	r3, r0
 80105ba:	4405      	add	r5, r0
 80105bc:	9306      	str	r3, [sp, #24]
 80105be:	9b05      	ldr	r3, [sp, #20]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	dd05      	ble.n	80105d0 <_dtoa_r+0x828>
 80105c4:	4651      	mov	r1, sl
 80105c6:	461a      	mov	r2, r3
 80105c8:	4620      	mov	r0, r4
 80105ca:	f000 fcef 	bl	8010fac <__lshift>
 80105ce:	4682      	mov	sl, r0
 80105d0:	9b06      	ldr	r3, [sp, #24]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	dd05      	ble.n	80105e2 <_dtoa_r+0x83a>
 80105d6:	4631      	mov	r1, r6
 80105d8:	461a      	mov	r2, r3
 80105da:	4620      	mov	r0, r4
 80105dc:	f000 fce6 	bl	8010fac <__lshift>
 80105e0:	4606      	mov	r6, r0
 80105e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d072      	beq.n	80106ce <_dtoa_r+0x926>
 80105e8:	4631      	mov	r1, r6
 80105ea:	4650      	mov	r0, sl
 80105ec:	f000 fd4a 	bl	8011084 <__mcmp>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	da6c      	bge.n	80106ce <_dtoa_r+0x926>
 80105f4:	2300      	movs	r3, #0
 80105f6:	4651      	mov	r1, sl
 80105f8:	220a      	movs	r2, #10
 80105fa:	4620      	mov	r0, r4
 80105fc:	f000 fb28 	bl	8010c50 <__multadd>
 8010600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010602:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010606:	4682      	mov	sl, r0
 8010608:	2b00      	cmp	r3, #0
 801060a:	f000 81b0 	beq.w	801096e <_dtoa_r+0xbc6>
 801060e:	2300      	movs	r3, #0
 8010610:	4639      	mov	r1, r7
 8010612:	220a      	movs	r2, #10
 8010614:	4620      	mov	r0, r4
 8010616:	f000 fb1b 	bl	8010c50 <__multadd>
 801061a:	9b01      	ldr	r3, [sp, #4]
 801061c:	2b00      	cmp	r3, #0
 801061e:	4607      	mov	r7, r0
 8010620:	f300 8096 	bgt.w	8010750 <_dtoa_r+0x9a8>
 8010624:	9b07      	ldr	r3, [sp, #28]
 8010626:	2b02      	cmp	r3, #2
 8010628:	dc59      	bgt.n	80106de <_dtoa_r+0x936>
 801062a:	e091      	b.n	8010750 <_dtoa_r+0x9a8>
 801062c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801062e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010632:	e758      	b.n	80104e6 <_dtoa_r+0x73e>
 8010634:	9b04      	ldr	r3, [sp, #16]
 8010636:	1e5e      	subs	r6, r3, #1
 8010638:	9b08      	ldr	r3, [sp, #32]
 801063a:	42b3      	cmp	r3, r6
 801063c:	bfbf      	itttt	lt
 801063e:	9b08      	ldrlt	r3, [sp, #32]
 8010640:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010642:	9608      	strlt	r6, [sp, #32]
 8010644:	1af3      	sublt	r3, r6, r3
 8010646:	bfb4      	ite	lt
 8010648:	18d2      	addlt	r2, r2, r3
 801064a:	1b9e      	subge	r6, r3, r6
 801064c:	9b04      	ldr	r3, [sp, #16]
 801064e:	bfbc      	itt	lt
 8010650:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010652:	2600      	movlt	r6, #0
 8010654:	2b00      	cmp	r3, #0
 8010656:	bfb7      	itett	lt
 8010658:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801065c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010660:	1a9d      	sublt	r5, r3, r2
 8010662:	2300      	movlt	r3, #0
 8010664:	e741      	b.n	80104ea <_dtoa_r+0x742>
 8010666:	9e08      	ldr	r6, [sp, #32]
 8010668:	9d05      	ldr	r5, [sp, #20]
 801066a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801066c:	e748      	b.n	8010500 <_dtoa_r+0x758>
 801066e:	9a08      	ldr	r2, [sp, #32]
 8010670:	e770      	b.n	8010554 <_dtoa_r+0x7ac>
 8010672:	9b07      	ldr	r3, [sp, #28]
 8010674:	2b01      	cmp	r3, #1
 8010676:	dc19      	bgt.n	80106ac <_dtoa_r+0x904>
 8010678:	9b02      	ldr	r3, [sp, #8]
 801067a:	b9bb      	cbnz	r3, 80106ac <_dtoa_r+0x904>
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010682:	b99b      	cbnz	r3, 80106ac <_dtoa_r+0x904>
 8010684:	9b03      	ldr	r3, [sp, #12]
 8010686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801068a:	0d1b      	lsrs	r3, r3, #20
 801068c:	051b      	lsls	r3, r3, #20
 801068e:	b183      	cbz	r3, 80106b2 <_dtoa_r+0x90a>
 8010690:	9b05      	ldr	r3, [sp, #20]
 8010692:	3301      	adds	r3, #1
 8010694:	9305      	str	r3, [sp, #20]
 8010696:	9b06      	ldr	r3, [sp, #24]
 8010698:	3301      	adds	r3, #1
 801069a:	9306      	str	r3, [sp, #24]
 801069c:	f04f 0801 	mov.w	r8, #1
 80106a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	f47f af6f 	bne.w	8010586 <_dtoa_r+0x7de>
 80106a8:	2001      	movs	r0, #1
 80106aa:	e774      	b.n	8010596 <_dtoa_r+0x7ee>
 80106ac:	f04f 0800 	mov.w	r8, #0
 80106b0:	e7f6      	b.n	80106a0 <_dtoa_r+0x8f8>
 80106b2:	4698      	mov	r8, r3
 80106b4:	e7f4      	b.n	80106a0 <_dtoa_r+0x8f8>
 80106b6:	d082      	beq.n	80105be <_dtoa_r+0x816>
 80106b8:	9a05      	ldr	r2, [sp, #20]
 80106ba:	331c      	adds	r3, #28
 80106bc:	441a      	add	r2, r3
 80106be:	9205      	str	r2, [sp, #20]
 80106c0:	9a06      	ldr	r2, [sp, #24]
 80106c2:	441a      	add	r2, r3
 80106c4:	441d      	add	r5, r3
 80106c6:	9206      	str	r2, [sp, #24]
 80106c8:	e779      	b.n	80105be <_dtoa_r+0x816>
 80106ca:	4603      	mov	r3, r0
 80106cc:	e7f4      	b.n	80106b8 <_dtoa_r+0x910>
 80106ce:	9b04      	ldr	r3, [sp, #16]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	dc37      	bgt.n	8010744 <_dtoa_r+0x99c>
 80106d4:	9b07      	ldr	r3, [sp, #28]
 80106d6:	2b02      	cmp	r3, #2
 80106d8:	dd34      	ble.n	8010744 <_dtoa_r+0x99c>
 80106da:	9b04      	ldr	r3, [sp, #16]
 80106dc:	9301      	str	r3, [sp, #4]
 80106de:	9b01      	ldr	r3, [sp, #4]
 80106e0:	b963      	cbnz	r3, 80106fc <_dtoa_r+0x954>
 80106e2:	4631      	mov	r1, r6
 80106e4:	2205      	movs	r2, #5
 80106e6:	4620      	mov	r0, r4
 80106e8:	f000 fab2 	bl	8010c50 <__multadd>
 80106ec:	4601      	mov	r1, r0
 80106ee:	4606      	mov	r6, r0
 80106f0:	4650      	mov	r0, sl
 80106f2:	f000 fcc7 	bl	8011084 <__mcmp>
 80106f6:	2800      	cmp	r0, #0
 80106f8:	f73f adbb 	bgt.w	8010272 <_dtoa_r+0x4ca>
 80106fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106fe:	9d00      	ldr	r5, [sp, #0]
 8010700:	ea6f 0b03 	mvn.w	fp, r3
 8010704:	f04f 0800 	mov.w	r8, #0
 8010708:	4631      	mov	r1, r6
 801070a:	4620      	mov	r0, r4
 801070c:	f000 fa7e 	bl	8010c0c <_Bfree>
 8010710:	2f00      	cmp	r7, #0
 8010712:	f43f aeab 	beq.w	801046c <_dtoa_r+0x6c4>
 8010716:	f1b8 0f00 	cmp.w	r8, #0
 801071a:	d005      	beq.n	8010728 <_dtoa_r+0x980>
 801071c:	45b8      	cmp	r8, r7
 801071e:	d003      	beq.n	8010728 <_dtoa_r+0x980>
 8010720:	4641      	mov	r1, r8
 8010722:	4620      	mov	r0, r4
 8010724:	f000 fa72 	bl	8010c0c <_Bfree>
 8010728:	4639      	mov	r1, r7
 801072a:	4620      	mov	r0, r4
 801072c:	f000 fa6e 	bl	8010c0c <_Bfree>
 8010730:	e69c      	b.n	801046c <_dtoa_r+0x6c4>
 8010732:	2600      	movs	r6, #0
 8010734:	4637      	mov	r7, r6
 8010736:	e7e1      	b.n	80106fc <_dtoa_r+0x954>
 8010738:	46bb      	mov	fp, r7
 801073a:	4637      	mov	r7, r6
 801073c:	e599      	b.n	8010272 <_dtoa_r+0x4ca>
 801073e:	bf00      	nop
 8010740:	40240000 	.word	0x40240000
 8010744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010746:	2b00      	cmp	r3, #0
 8010748:	f000 80c8 	beq.w	80108dc <_dtoa_r+0xb34>
 801074c:	9b04      	ldr	r3, [sp, #16]
 801074e:	9301      	str	r3, [sp, #4]
 8010750:	2d00      	cmp	r5, #0
 8010752:	dd05      	ble.n	8010760 <_dtoa_r+0x9b8>
 8010754:	4639      	mov	r1, r7
 8010756:	462a      	mov	r2, r5
 8010758:	4620      	mov	r0, r4
 801075a:	f000 fc27 	bl	8010fac <__lshift>
 801075e:	4607      	mov	r7, r0
 8010760:	f1b8 0f00 	cmp.w	r8, #0
 8010764:	d05b      	beq.n	801081e <_dtoa_r+0xa76>
 8010766:	6879      	ldr	r1, [r7, #4]
 8010768:	4620      	mov	r0, r4
 801076a:	f000 fa0f 	bl	8010b8c <_Balloc>
 801076e:	4605      	mov	r5, r0
 8010770:	b928      	cbnz	r0, 801077e <_dtoa_r+0x9d6>
 8010772:	4b83      	ldr	r3, [pc, #524]	; (8010980 <_dtoa_r+0xbd8>)
 8010774:	4602      	mov	r2, r0
 8010776:	f240 21ef 	movw	r1, #751	; 0x2ef
 801077a:	f7ff bb2e 	b.w	800fdda <_dtoa_r+0x32>
 801077e:	693a      	ldr	r2, [r7, #16]
 8010780:	3202      	adds	r2, #2
 8010782:	0092      	lsls	r2, r2, #2
 8010784:	f107 010c 	add.w	r1, r7, #12
 8010788:	300c      	adds	r0, #12
 801078a:	f7ff fa74 	bl	800fc76 <memcpy>
 801078e:	2201      	movs	r2, #1
 8010790:	4629      	mov	r1, r5
 8010792:	4620      	mov	r0, r4
 8010794:	f000 fc0a 	bl	8010fac <__lshift>
 8010798:	9b00      	ldr	r3, [sp, #0]
 801079a:	3301      	adds	r3, #1
 801079c:	9304      	str	r3, [sp, #16]
 801079e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107a2:	4413      	add	r3, r2
 80107a4:	9308      	str	r3, [sp, #32]
 80107a6:	9b02      	ldr	r3, [sp, #8]
 80107a8:	f003 0301 	and.w	r3, r3, #1
 80107ac:	46b8      	mov	r8, r7
 80107ae:	9306      	str	r3, [sp, #24]
 80107b0:	4607      	mov	r7, r0
 80107b2:	9b04      	ldr	r3, [sp, #16]
 80107b4:	4631      	mov	r1, r6
 80107b6:	3b01      	subs	r3, #1
 80107b8:	4650      	mov	r0, sl
 80107ba:	9301      	str	r3, [sp, #4]
 80107bc:	f7ff fa69 	bl	800fc92 <quorem>
 80107c0:	4641      	mov	r1, r8
 80107c2:	9002      	str	r0, [sp, #8]
 80107c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80107c8:	4650      	mov	r0, sl
 80107ca:	f000 fc5b 	bl	8011084 <__mcmp>
 80107ce:	463a      	mov	r2, r7
 80107d0:	9005      	str	r0, [sp, #20]
 80107d2:	4631      	mov	r1, r6
 80107d4:	4620      	mov	r0, r4
 80107d6:	f000 fc71 	bl	80110bc <__mdiff>
 80107da:	68c2      	ldr	r2, [r0, #12]
 80107dc:	4605      	mov	r5, r0
 80107de:	bb02      	cbnz	r2, 8010822 <_dtoa_r+0xa7a>
 80107e0:	4601      	mov	r1, r0
 80107e2:	4650      	mov	r0, sl
 80107e4:	f000 fc4e 	bl	8011084 <__mcmp>
 80107e8:	4602      	mov	r2, r0
 80107ea:	4629      	mov	r1, r5
 80107ec:	4620      	mov	r0, r4
 80107ee:	9209      	str	r2, [sp, #36]	; 0x24
 80107f0:	f000 fa0c 	bl	8010c0c <_Bfree>
 80107f4:	9b07      	ldr	r3, [sp, #28]
 80107f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107f8:	9d04      	ldr	r5, [sp, #16]
 80107fa:	ea43 0102 	orr.w	r1, r3, r2
 80107fe:	9b06      	ldr	r3, [sp, #24]
 8010800:	4319      	orrs	r1, r3
 8010802:	d110      	bne.n	8010826 <_dtoa_r+0xa7e>
 8010804:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010808:	d029      	beq.n	801085e <_dtoa_r+0xab6>
 801080a:	9b05      	ldr	r3, [sp, #20]
 801080c:	2b00      	cmp	r3, #0
 801080e:	dd02      	ble.n	8010816 <_dtoa_r+0xa6e>
 8010810:	9b02      	ldr	r3, [sp, #8]
 8010812:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010816:	9b01      	ldr	r3, [sp, #4]
 8010818:	f883 9000 	strb.w	r9, [r3]
 801081c:	e774      	b.n	8010708 <_dtoa_r+0x960>
 801081e:	4638      	mov	r0, r7
 8010820:	e7ba      	b.n	8010798 <_dtoa_r+0x9f0>
 8010822:	2201      	movs	r2, #1
 8010824:	e7e1      	b.n	80107ea <_dtoa_r+0xa42>
 8010826:	9b05      	ldr	r3, [sp, #20]
 8010828:	2b00      	cmp	r3, #0
 801082a:	db04      	blt.n	8010836 <_dtoa_r+0xa8e>
 801082c:	9907      	ldr	r1, [sp, #28]
 801082e:	430b      	orrs	r3, r1
 8010830:	9906      	ldr	r1, [sp, #24]
 8010832:	430b      	orrs	r3, r1
 8010834:	d120      	bne.n	8010878 <_dtoa_r+0xad0>
 8010836:	2a00      	cmp	r2, #0
 8010838:	dded      	ble.n	8010816 <_dtoa_r+0xa6e>
 801083a:	4651      	mov	r1, sl
 801083c:	2201      	movs	r2, #1
 801083e:	4620      	mov	r0, r4
 8010840:	f000 fbb4 	bl	8010fac <__lshift>
 8010844:	4631      	mov	r1, r6
 8010846:	4682      	mov	sl, r0
 8010848:	f000 fc1c 	bl	8011084 <__mcmp>
 801084c:	2800      	cmp	r0, #0
 801084e:	dc03      	bgt.n	8010858 <_dtoa_r+0xab0>
 8010850:	d1e1      	bne.n	8010816 <_dtoa_r+0xa6e>
 8010852:	f019 0f01 	tst.w	r9, #1
 8010856:	d0de      	beq.n	8010816 <_dtoa_r+0xa6e>
 8010858:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801085c:	d1d8      	bne.n	8010810 <_dtoa_r+0xa68>
 801085e:	9a01      	ldr	r2, [sp, #4]
 8010860:	2339      	movs	r3, #57	; 0x39
 8010862:	7013      	strb	r3, [r2, #0]
 8010864:	462b      	mov	r3, r5
 8010866:	461d      	mov	r5, r3
 8010868:	3b01      	subs	r3, #1
 801086a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801086e:	2a39      	cmp	r2, #57	; 0x39
 8010870:	d06c      	beq.n	801094c <_dtoa_r+0xba4>
 8010872:	3201      	adds	r2, #1
 8010874:	701a      	strb	r2, [r3, #0]
 8010876:	e747      	b.n	8010708 <_dtoa_r+0x960>
 8010878:	2a00      	cmp	r2, #0
 801087a:	dd07      	ble.n	801088c <_dtoa_r+0xae4>
 801087c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010880:	d0ed      	beq.n	801085e <_dtoa_r+0xab6>
 8010882:	9a01      	ldr	r2, [sp, #4]
 8010884:	f109 0301 	add.w	r3, r9, #1
 8010888:	7013      	strb	r3, [r2, #0]
 801088a:	e73d      	b.n	8010708 <_dtoa_r+0x960>
 801088c:	9b04      	ldr	r3, [sp, #16]
 801088e:	9a08      	ldr	r2, [sp, #32]
 8010890:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010894:	4293      	cmp	r3, r2
 8010896:	d043      	beq.n	8010920 <_dtoa_r+0xb78>
 8010898:	4651      	mov	r1, sl
 801089a:	2300      	movs	r3, #0
 801089c:	220a      	movs	r2, #10
 801089e:	4620      	mov	r0, r4
 80108a0:	f000 f9d6 	bl	8010c50 <__multadd>
 80108a4:	45b8      	cmp	r8, r7
 80108a6:	4682      	mov	sl, r0
 80108a8:	f04f 0300 	mov.w	r3, #0
 80108ac:	f04f 020a 	mov.w	r2, #10
 80108b0:	4641      	mov	r1, r8
 80108b2:	4620      	mov	r0, r4
 80108b4:	d107      	bne.n	80108c6 <_dtoa_r+0xb1e>
 80108b6:	f000 f9cb 	bl	8010c50 <__multadd>
 80108ba:	4680      	mov	r8, r0
 80108bc:	4607      	mov	r7, r0
 80108be:	9b04      	ldr	r3, [sp, #16]
 80108c0:	3301      	adds	r3, #1
 80108c2:	9304      	str	r3, [sp, #16]
 80108c4:	e775      	b.n	80107b2 <_dtoa_r+0xa0a>
 80108c6:	f000 f9c3 	bl	8010c50 <__multadd>
 80108ca:	4639      	mov	r1, r7
 80108cc:	4680      	mov	r8, r0
 80108ce:	2300      	movs	r3, #0
 80108d0:	220a      	movs	r2, #10
 80108d2:	4620      	mov	r0, r4
 80108d4:	f000 f9bc 	bl	8010c50 <__multadd>
 80108d8:	4607      	mov	r7, r0
 80108da:	e7f0      	b.n	80108be <_dtoa_r+0xb16>
 80108dc:	9b04      	ldr	r3, [sp, #16]
 80108de:	9301      	str	r3, [sp, #4]
 80108e0:	9d00      	ldr	r5, [sp, #0]
 80108e2:	4631      	mov	r1, r6
 80108e4:	4650      	mov	r0, sl
 80108e6:	f7ff f9d4 	bl	800fc92 <quorem>
 80108ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80108ee:	9b00      	ldr	r3, [sp, #0]
 80108f0:	f805 9b01 	strb.w	r9, [r5], #1
 80108f4:	1aea      	subs	r2, r5, r3
 80108f6:	9b01      	ldr	r3, [sp, #4]
 80108f8:	4293      	cmp	r3, r2
 80108fa:	dd07      	ble.n	801090c <_dtoa_r+0xb64>
 80108fc:	4651      	mov	r1, sl
 80108fe:	2300      	movs	r3, #0
 8010900:	220a      	movs	r2, #10
 8010902:	4620      	mov	r0, r4
 8010904:	f000 f9a4 	bl	8010c50 <__multadd>
 8010908:	4682      	mov	sl, r0
 801090a:	e7ea      	b.n	80108e2 <_dtoa_r+0xb3a>
 801090c:	9b01      	ldr	r3, [sp, #4]
 801090e:	2b00      	cmp	r3, #0
 8010910:	bfc8      	it	gt
 8010912:	461d      	movgt	r5, r3
 8010914:	9b00      	ldr	r3, [sp, #0]
 8010916:	bfd8      	it	le
 8010918:	2501      	movle	r5, #1
 801091a:	441d      	add	r5, r3
 801091c:	f04f 0800 	mov.w	r8, #0
 8010920:	4651      	mov	r1, sl
 8010922:	2201      	movs	r2, #1
 8010924:	4620      	mov	r0, r4
 8010926:	f000 fb41 	bl	8010fac <__lshift>
 801092a:	4631      	mov	r1, r6
 801092c:	4682      	mov	sl, r0
 801092e:	f000 fba9 	bl	8011084 <__mcmp>
 8010932:	2800      	cmp	r0, #0
 8010934:	dc96      	bgt.n	8010864 <_dtoa_r+0xabc>
 8010936:	d102      	bne.n	801093e <_dtoa_r+0xb96>
 8010938:	f019 0f01 	tst.w	r9, #1
 801093c:	d192      	bne.n	8010864 <_dtoa_r+0xabc>
 801093e:	462b      	mov	r3, r5
 8010940:	461d      	mov	r5, r3
 8010942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010946:	2a30      	cmp	r2, #48	; 0x30
 8010948:	d0fa      	beq.n	8010940 <_dtoa_r+0xb98>
 801094a:	e6dd      	b.n	8010708 <_dtoa_r+0x960>
 801094c:	9a00      	ldr	r2, [sp, #0]
 801094e:	429a      	cmp	r2, r3
 8010950:	d189      	bne.n	8010866 <_dtoa_r+0xabe>
 8010952:	f10b 0b01 	add.w	fp, fp, #1
 8010956:	2331      	movs	r3, #49	; 0x31
 8010958:	e796      	b.n	8010888 <_dtoa_r+0xae0>
 801095a:	4b0a      	ldr	r3, [pc, #40]	; (8010984 <_dtoa_r+0xbdc>)
 801095c:	f7ff ba99 	b.w	800fe92 <_dtoa_r+0xea>
 8010960:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010962:	2b00      	cmp	r3, #0
 8010964:	f47f aa6d 	bne.w	800fe42 <_dtoa_r+0x9a>
 8010968:	4b07      	ldr	r3, [pc, #28]	; (8010988 <_dtoa_r+0xbe0>)
 801096a:	f7ff ba92 	b.w	800fe92 <_dtoa_r+0xea>
 801096e:	9b01      	ldr	r3, [sp, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	dcb5      	bgt.n	80108e0 <_dtoa_r+0xb38>
 8010974:	9b07      	ldr	r3, [sp, #28]
 8010976:	2b02      	cmp	r3, #2
 8010978:	f73f aeb1 	bgt.w	80106de <_dtoa_r+0x936>
 801097c:	e7b0      	b.n	80108e0 <_dtoa_r+0xb38>
 801097e:	bf00      	nop
 8010980:	080139e0 	.word	0x080139e0
 8010984:	08013940 	.word	0x08013940
 8010988:	08013964 	.word	0x08013964

0801098c <_free_r>:
 801098c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801098e:	2900      	cmp	r1, #0
 8010990:	d044      	beq.n	8010a1c <_free_r+0x90>
 8010992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010996:	9001      	str	r0, [sp, #4]
 8010998:	2b00      	cmp	r3, #0
 801099a:	f1a1 0404 	sub.w	r4, r1, #4
 801099e:	bfb8      	it	lt
 80109a0:	18e4      	addlt	r4, r4, r3
 80109a2:	f000 f8e7 	bl	8010b74 <__malloc_lock>
 80109a6:	4a1e      	ldr	r2, [pc, #120]	; (8010a20 <_free_r+0x94>)
 80109a8:	9801      	ldr	r0, [sp, #4]
 80109aa:	6813      	ldr	r3, [r2, #0]
 80109ac:	b933      	cbnz	r3, 80109bc <_free_r+0x30>
 80109ae:	6063      	str	r3, [r4, #4]
 80109b0:	6014      	str	r4, [r2, #0]
 80109b2:	b003      	add	sp, #12
 80109b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109b8:	f000 b8e2 	b.w	8010b80 <__malloc_unlock>
 80109bc:	42a3      	cmp	r3, r4
 80109be:	d908      	bls.n	80109d2 <_free_r+0x46>
 80109c0:	6825      	ldr	r5, [r4, #0]
 80109c2:	1961      	adds	r1, r4, r5
 80109c4:	428b      	cmp	r3, r1
 80109c6:	bf01      	itttt	eq
 80109c8:	6819      	ldreq	r1, [r3, #0]
 80109ca:	685b      	ldreq	r3, [r3, #4]
 80109cc:	1949      	addeq	r1, r1, r5
 80109ce:	6021      	streq	r1, [r4, #0]
 80109d0:	e7ed      	b.n	80109ae <_free_r+0x22>
 80109d2:	461a      	mov	r2, r3
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	b10b      	cbz	r3, 80109dc <_free_r+0x50>
 80109d8:	42a3      	cmp	r3, r4
 80109da:	d9fa      	bls.n	80109d2 <_free_r+0x46>
 80109dc:	6811      	ldr	r1, [r2, #0]
 80109de:	1855      	adds	r5, r2, r1
 80109e0:	42a5      	cmp	r5, r4
 80109e2:	d10b      	bne.n	80109fc <_free_r+0x70>
 80109e4:	6824      	ldr	r4, [r4, #0]
 80109e6:	4421      	add	r1, r4
 80109e8:	1854      	adds	r4, r2, r1
 80109ea:	42a3      	cmp	r3, r4
 80109ec:	6011      	str	r1, [r2, #0]
 80109ee:	d1e0      	bne.n	80109b2 <_free_r+0x26>
 80109f0:	681c      	ldr	r4, [r3, #0]
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	6053      	str	r3, [r2, #4]
 80109f6:	440c      	add	r4, r1
 80109f8:	6014      	str	r4, [r2, #0]
 80109fa:	e7da      	b.n	80109b2 <_free_r+0x26>
 80109fc:	d902      	bls.n	8010a04 <_free_r+0x78>
 80109fe:	230c      	movs	r3, #12
 8010a00:	6003      	str	r3, [r0, #0]
 8010a02:	e7d6      	b.n	80109b2 <_free_r+0x26>
 8010a04:	6825      	ldr	r5, [r4, #0]
 8010a06:	1961      	adds	r1, r4, r5
 8010a08:	428b      	cmp	r3, r1
 8010a0a:	bf04      	itt	eq
 8010a0c:	6819      	ldreq	r1, [r3, #0]
 8010a0e:	685b      	ldreq	r3, [r3, #4]
 8010a10:	6063      	str	r3, [r4, #4]
 8010a12:	bf04      	itt	eq
 8010a14:	1949      	addeq	r1, r1, r5
 8010a16:	6021      	streq	r1, [r4, #0]
 8010a18:	6054      	str	r4, [r2, #4]
 8010a1a:	e7ca      	b.n	80109b2 <_free_r+0x26>
 8010a1c:	b003      	add	sp, #12
 8010a1e:	bd30      	pop	{r4, r5, pc}
 8010a20:	20006d70 	.word	0x20006d70

08010a24 <malloc>:
 8010a24:	4b02      	ldr	r3, [pc, #8]	; (8010a30 <malloc+0xc>)
 8010a26:	4601      	mov	r1, r0
 8010a28:	6818      	ldr	r0, [r3, #0]
 8010a2a:	f000 b823 	b.w	8010a74 <_malloc_r>
 8010a2e:	bf00      	nop
 8010a30:	200001d4 	.word	0x200001d4

08010a34 <sbrk_aligned>:
 8010a34:	b570      	push	{r4, r5, r6, lr}
 8010a36:	4e0e      	ldr	r6, [pc, #56]	; (8010a70 <sbrk_aligned+0x3c>)
 8010a38:	460c      	mov	r4, r1
 8010a3a:	6831      	ldr	r1, [r6, #0]
 8010a3c:	4605      	mov	r5, r0
 8010a3e:	b911      	cbnz	r1, 8010a46 <sbrk_aligned+0x12>
 8010a40:	f000 fe40 	bl	80116c4 <_sbrk_r>
 8010a44:	6030      	str	r0, [r6, #0]
 8010a46:	4621      	mov	r1, r4
 8010a48:	4628      	mov	r0, r5
 8010a4a:	f000 fe3b 	bl	80116c4 <_sbrk_r>
 8010a4e:	1c43      	adds	r3, r0, #1
 8010a50:	d00a      	beq.n	8010a68 <sbrk_aligned+0x34>
 8010a52:	1cc4      	adds	r4, r0, #3
 8010a54:	f024 0403 	bic.w	r4, r4, #3
 8010a58:	42a0      	cmp	r0, r4
 8010a5a:	d007      	beq.n	8010a6c <sbrk_aligned+0x38>
 8010a5c:	1a21      	subs	r1, r4, r0
 8010a5e:	4628      	mov	r0, r5
 8010a60:	f000 fe30 	bl	80116c4 <_sbrk_r>
 8010a64:	3001      	adds	r0, #1
 8010a66:	d101      	bne.n	8010a6c <sbrk_aligned+0x38>
 8010a68:	f04f 34ff 	mov.w	r4, #4294967295
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	bd70      	pop	{r4, r5, r6, pc}
 8010a70:	20006d74 	.word	0x20006d74

08010a74 <_malloc_r>:
 8010a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a78:	1ccd      	adds	r5, r1, #3
 8010a7a:	f025 0503 	bic.w	r5, r5, #3
 8010a7e:	3508      	adds	r5, #8
 8010a80:	2d0c      	cmp	r5, #12
 8010a82:	bf38      	it	cc
 8010a84:	250c      	movcc	r5, #12
 8010a86:	2d00      	cmp	r5, #0
 8010a88:	4607      	mov	r7, r0
 8010a8a:	db01      	blt.n	8010a90 <_malloc_r+0x1c>
 8010a8c:	42a9      	cmp	r1, r5
 8010a8e:	d905      	bls.n	8010a9c <_malloc_r+0x28>
 8010a90:	230c      	movs	r3, #12
 8010a92:	603b      	str	r3, [r7, #0]
 8010a94:	2600      	movs	r6, #0
 8010a96:	4630      	mov	r0, r6
 8010a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010b70 <_malloc_r+0xfc>
 8010aa0:	f000 f868 	bl	8010b74 <__malloc_lock>
 8010aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8010aa8:	461c      	mov	r4, r3
 8010aaa:	bb5c      	cbnz	r4, 8010b04 <_malloc_r+0x90>
 8010aac:	4629      	mov	r1, r5
 8010aae:	4638      	mov	r0, r7
 8010ab0:	f7ff ffc0 	bl	8010a34 <sbrk_aligned>
 8010ab4:	1c43      	adds	r3, r0, #1
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	d155      	bne.n	8010b66 <_malloc_r+0xf2>
 8010aba:	f8d8 4000 	ldr.w	r4, [r8]
 8010abe:	4626      	mov	r6, r4
 8010ac0:	2e00      	cmp	r6, #0
 8010ac2:	d145      	bne.n	8010b50 <_malloc_r+0xdc>
 8010ac4:	2c00      	cmp	r4, #0
 8010ac6:	d048      	beq.n	8010b5a <_malloc_r+0xe6>
 8010ac8:	6823      	ldr	r3, [r4, #0]
 8010aca:	4631      	mov	r1, r6
 8010acc:	4638      	mov	r0, r7
 8010ace:	eb04 0903 	add.w	r9, r4, r3
 8010ad2:	f000 fdf7 	bl	80116c4 <_sbrk_r>
 8010ad6:	4581      	cmp	r9, r0
 8010ad8:	d13f      	bne.n	8010b5a <_malloc_r+0xe6>
 8010ada:	6821      	ldr	r1, [r4, #0]
 8010adc:	1a6d      	subs	r5, r5, r1
 8010ade:	4629      	mov	r1, r5
 8010ae0:	4638      	mov	r0, r7
 8010ae2:	f7ff ffa7 	bl	8010a34 <sbrk_aligned>
 8010ae6:	3001      	adds	r0, #1
 8010ae8:	d037      	beq.n	8010b5a <_malloc_r+0xe6>
 8010aea:	6823      	ldr	r3, [r4, #0]
 8010aec:	442b      	add	r3, r5
 8010aee:	6023      	str	r3, [r4, #0]
 8010af0:	f8d8 3000 	ldr.w	r3, [r8]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d038      	beq.n	8010b6a <_malloc_r+0xf6>
 8010af8:	685a      	ldr	r2, [r3, #4]
 8010afa:	42a2      	cmp	r2, r4
 8010afc:	d12b      	bne.n	8010b56 <_malloc_r+0xe2>
 8010afe:	2200      	movs	r2, #0
 8010b00:	605a      	str	r2, [r3, #4]
 8010b02:	e00f      	b.n	8010b24 <_malloc_r+0xb0>
 8010b04:	6822      	ldr	r2, [r4, #0]
 8010b06:	1b52      	subs	r2, r2, r5
 8010b08:	d41f      	bmi.n	8010b4a <_malloc_r+0xd6>
 8010b0a:	2a0b      	cmp	r2, #11
 8010b0c:	d917      	bls.n	8010b3e <_malloc_r+0xca>
 8010b0e:	1961      	adds	r1, r4, r5
 8010b10:	42a3      	cmp	r3, r4
 8010b12:	6025      	str	r5, [r4, #0]
 8010b14:	bf18      	it	ne
 8010b16:	6059      	strne	r1, [r3, #4]
 8010b18:	6863      	ldr	r3, [r4, #4]
 8010b1a:	bf08      	it	eq
 8010b1c:	f8c8 1000 	streq.w	r1, [r8]
 8010b20:	5162      	str	r2, [r4, r5]
 8010b22:	604b      	str	r3, [r1, #4]
 8010b24:	4638      	mov	r0, r7
 8010b26:	f104 060b 	add.w	r6, r4, #11
 8010b2a:	f000 f829 	bl	8010b80 <__malloc_unlock>
 8010b2e:	f026 0607 	bic.w	r6, r6, #7
 8010b32:	1d23      	adds	r3, r4, #4
 8010b34:	1af2      	subs	r2, r6, r3
 8010b36:	d0ae      	beq.n	8010a96 <_malloc_r+0x22>
 8010b38:	1b9b      	subs	r3, r3, r6
 8010b3a:	50a3      	str	r3, [r4, r2]
 8010b3c:	e7ab      	b.n	8010a96 <_malloc_r+0x22>
 8010b3e:	42a3      	cmp	r3, r4
 8010b40:	6862      	ldr	r2, [r4, #4]
 8010b42:	d1dd      	bne.n	8010b00 <_malloc_r+0x8c>
 8010b44:	f8c8 2000 	str.w	r2, [r8]
 8010b48:	e7ec      	b.n	8010b24 <_malloc_r+0xb0>
 8010b4a:	4623      	mov	r3, r4
 8010b4c:	6864      	ldr	r4, [r4, #4]
 8010b4e:	e7ac      	b.n	8010aaa <_malloc_r+0x36>
 8010b50:	4634      	mov	r4, r6
 8010b52:	6876      	ldr	r6, [r6, #4]
 8010b54:	e7b4      	b.n	8010ac0 <_malloc_r+0x4c>
 8010b56:	4613      	mov	r3, r2
 8010b58:	e7cc      	b.n	8010af4 <_malloc_r+0x80>
 8010b5a:	230c      	movs	r3, #12
 8010b5c:	603b      	str	r3, [r7, #0]
 8010b5e:	4638      	mov	r0, r7
 8010b60:	f000 f80e 	bl	8010b80 <__malloc_unlock>
 8010b64:	e797      	b.n	8010a96 <_malloc_r+0x22>
 8010b66:	6025      	str	r5, [r4, #0]
 8010b68:	e7dc      	b.n	8010b24 <_malloc_r+0xb0>
 8010b6a:	605b      	str	r3, [r3, #4]
 8010b6c:	deff      	udf	#255	; 0xff
 8010b6e:	bf00      	nop
 8010b70:	20006d70 	.word	0x20006d70

08010b74 <__malloc_lock>:
 8010b74:	4801      	ldr	r0, [pc, #4]	; (8010b7c <__malloc_lock+0x8>)
 8010b76:	f7ff b87c 	b.w	800fc72 <__retarget_lock_acquire_recursive>
 8010b7a:	bf00      	nop
 8010b7c:	20006d6c 	.word	0x20006d6c

08010b80 <__malloc_unlock>:
 8010b80:	4801      	ldr	r0, [pc, #4]	; (8010b88 <__malloc_unlock+0x8>)
 8010b82:	f7ff b877 	b.w	800fc74 <__retarget_lock_release_recursive>
 8010b86:	bf00      	nop
 8010b88:	20006d6c 	.word	0x20006d6c

08010b8c <_Balloc>:
 8010b8c:	b570      	push	{r4, r5, r6, lr}
 8010b8e:	69c6      	ldr	r6, [r0, #28]
 8010b90:	4604      	mov	r4, r0
 8010b92:	460d      	mov	r5, r1
 8010b94:	b976      	cbnz	r6, 8010bb4 <_Balloc+0x28>
 8010b96:	2010      	movs	r0, #16
 8010b98:	f7ff ff44 	bl	8010a24 <malloc>
 8010b9c:	4602      	mov	r2, r0
 8010b9e:	61e0      	str	r0, [r4, #28]
 8010ba0:	b920      	cbnz	r0, 8010bac <_Balloc+0x20>
 8010ba2:	4b18      	ldr	r3, [pc, #96]	; (8010c04 <_Balloc+0x78>)
 8010ba4:	4818      	ldr	r0, [pc, #96]	; (8010c08 <_Balloc+0x7c>)
 8010ba6:	216b      	movs	r1, #107	; 0x6b
 8010ba8:	f000 fd9c 	bl	80116e4 <__assert_func>
 8010bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010bb0:	6006      	str	r6, [r0, #0]
 8010bb2:	60c6      	str	r6, [r0, #12]
 8010bb4:	69e6      	ldr	r6, [r4, #28]
 8010bb6:	68f3      	ldr	r3, [r6, #12]
 8010bb8:	b183      	cbz	r3, 8010bdc <_Balloc+0x50>
 8010bba:	69e3      	ldr	r3, [r4, #28]
 8010bbc:	68db      	ldr	r3, [r3, #12]
 8010bbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010bc2:	b9b8      	cbnz	r0, 8010bf4 <_Balloc+0x68>
 8010bc4:	2101      	movs	r1, #1
 8010bc6:	fa01 f605 	lsl.w	r6, r1, r5
 8010bca:	1d72      	adds	r2, r6, #5
 8010bcc:	0092      	lsls	r2, r2, #2
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f000 fda6 	bl	8011720 <_calloc_r>
 8010bd4:	b160      	cbz	r0, 8010bf0 <_Balloc+0x64>
 8010bd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010bda:	e00e      	b.n	8010bfa <_Balloc+0x6e>
 8010bdc:	2221      	movs	r2, #33	; 0x21
 8010bde:	2104      	movs	r1, #4
 8010be0:	4620      	mov	r0, r4
 8010be2:	f000 fd9d 	bl	8011720 <_calloc_r>
 8010be6:	69e3      	ldr	r3, [r4, #28]
 8010be8:	60f0      	str	r0, [r6, #12]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d1e4      	bne.n	8010bba <_Balloc+0x2e>
 8010bf0:	2000      	movs	r0, #0
 8010bf2:	bd70      	pop	{r4, r5, r6, pc}
 8010bf4:	6802      	ldr	r2, [r0, #0]
 8010bf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010c00:	e7f7      	b.n	8010bf2 <_Balloc+0x66>
 8010c02:	bf00      	nop
 8010c04:	08013971 	.word	0x08013971
 8010c08:	080139f1 	.word	0x080139f1

08010c0c <_Bfree>:
 8010c0c:	b570      	push	{r4, r5, r6, lr}
 8010c0e:	69c6      	ldr	r6, [r0, #28]
 8010c10:	4605      	mov	r5, r0
 8010c12:	460c      	mov	r4, r1
 8010c14:	b976      	cbnz	r6, 8010c34 <_Bfree+0x28>
 8010c16:	2010      	movs	r0, #16
 8010c18:	f7ff ff04 	bl	8010a24 <malloc>
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	61e8      	str	r0, [r5, #28]
 8010c20:	b920      	cbnz	r0, 8010c2c <_Bfree+0x20>
 8010c22:	4b09      	ldr	r3, [pc, #36]	; (8010c48 <_Bfree+0x3c>)
 8010c24:	4809      	ldr	r0, [pc, #36]	; (8010c4c <_Bfree+0x40>)
 8010c26:	218f      	movs	r1, #143	; 0x8f
 8010c28:	f000 fd5c 	bl	80116e4 <__assert_func>
 8010c2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c30:	6006      	str	r6, [r0, #0]
 8010c32:	60c6      	str	r6, [r0, #12]
 8010c34:	b13c      	cbz	r4, 8010c46 <_Bfree+0x3a>
 8010c36:	69eb      	ldr	r3, [r5, #28]
 8010c38:	6862      	ldr	r2, [r4, #4]
 8010c3a:	68db      	ldr	r3, [r3, #12]
 8010c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c40:	6021      	str	r1, [r4, #0]
 8010c42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c46:	bd70      	pop	{r4, r5, r6, pc}
 8010c48:	08013971 	.word	0x08013971
 8010c4c:	080139f1 	.word	0x080139f1

08010c50 <__multadd>:
 8010c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c54:	690d      	ldr	r5, [r1, #16]
 8010c56:	4607      	mov	r7, r0
 8010c58:	460c      	mov	r4, r1
 8010c5a:	461e      	mov	r6, r3
 8010c5c:	f101 0c14 	add.w	ip, r1, #20
 8010c60:	2000      	movs	r0, #0
 8010c62:	f8dc 3000 	ldr.w	r3, [ip]
 8010c66:	b299      	uxth	r1, r3
 8010c68:	fb02 6101 	mla	r1, r2, r1, r6
 8010c6c:	0c1e      	lsrs	r6, r3, #16
 8010c6e:	0c0b      	lsrs	r3, r1, #16
 8010c70:	fb02 3306 	mla	r3, r2, r6, r3
 8010c74:	b289      	uxth	r1, r1
 8010c76:	3001      	adds	r0, #1
 8010c78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010c7c:	4285      	cmp	r5, r0
 8010c7e:	f84c 1b04 	str.w	r1, [ip], #4
 8010c82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c86:	dcec      	bgt.n	8010c62 <__multadd+0x12>
 8010c88:	b30e      	cbz	r6, 8010cce <__multadd+0x7e>
 8010c8a:	68a3      	ldr	r3, [r4, #8]
 8010c8c:	42ab      	cmp	r3, r5
 8010c8e:	dc19      	bgt.n	8010cc4 <__multadd+0x74>
 8010c90:	6861      	ldr	r1, [r4, #4]
 8010c92:	4638      	mov	r0, r7
 8010c94:	3101      	adds	r1, #1
 8010c96:	f7ff ff79 	bl	8010b8c <_Balloc>
 8010c9a:	4680      	mov	r8, r0
 8010c9c:	b928      	cbnz	r0, 8010caa <__multadd+0x5a>
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	4b0c      	ldr	r3, [pc, #48]	; (8010cd4 <__multadd+0x84>)
 8010ca2:	480d      	ldr	r0, [pc, #52]	; (8010cd8 <__multadd+0x88>)
 8010ca4:	21ba      	movs	r1, #186	; 0xba
 8010ca6:	f000 fd1d 	bl	80116e4 <__assert_func>
 8010caa:	6922      	ldr	r2, [r4, #16]
 8010cac:	3202      	adds	r2, #2
 8010cae:	f104 010c 	add.w	r1, r4, #12
 8010cb2:	0092      	lsls	r2, r2, #2
 8010cb4:	300c      	adds	r0, #12
 8010cb6:	f7fe ffde 	bl	800fc76 <memcpy>
 8010cba:	4621      	mov	r1, r4
 8010cbc:	4638      	mov	r0, r7
 8010cbe:	f7ff ffa5 	bl	8010c0c <_Bfree>
 8010cc2:	4644      	mov	r4, r8
 8010cc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010cc8:	3501      	adds	r5, #1
 8010cca:	615e      	str	r6, [r3, #20]
 8010ccc:	6125      	str	r5, [r4, #16]
 8010cce:	4620      	mov	r0, r4
 8010cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cd4:	080139e0 	.word	0x080139e0
 8010cd8:	080139f1 	.word	0x080139f1

08010cdc <__hi0bits>:
 8010cdc:	0c03      	lsrs	r3, r0, #16
 8010cde:	041b      	lsls	r3, r3, #16
 8010ce0:	b9d3      	cbnz	r3, 8010d18 <__hi0bits+0x3c>
 8010ce2:	0400      	lsls	r0, r0, #16
 8010ce4:	2310      	movs	r3, #16
 8010ce6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010cea:	bf04      	itt	eq
 8010cec:	0200      	lsleq	r0, r0, #8
 8010cee:	3308      	addeq	r3, #8
 8010cf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010cf4:	bf04      	itt	eq
 8010cf6:	0100      	lsleq	r0, r0, #4
 8010cf8:	3304      	addeq	r3, #4
 8010cfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010cfe:	bf04      	itt	eq
 8010d00:	0080      	lsleq	r0, r0, #2
 8010d02:	3302      	addeq	r3, #2
 8010d04:	2800      	cmp	r0, #0
 8010d06:	db05      	blt.n	8010d14 <__hi0bits+0x38>
 8010d08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010d0c:	f103 0301 	add.w	r3, r3, #1
 8010d10:	bf08      	it	eq
 8010d12:	2320      	moveq	r3, #32
 8010d14:	4618      	mov	r0, r3
 8010d16:	4770      	bx	lr
 8010d18:	2300      	movs	r3, #0
 8010d1a:	e7e4      	b.n	8010ce6 <__hi0bits+0xa>

08010d1c <__lo0bits>:
 8010d1c:	6803      	ldr	r3, [r0, #0]
 8010d1e:	f013 0207 	ands.w	r2, r3, #7
 8010d22:	d00c      	beq.n	8010d3e <__lo0bits+0x22>
 8010d24:	07d9      	lsls	r1, r3, #31
 8010d26:	d422      	bmi.n	8010d6e <__lo0bits+0x52>
 8010d28:	079a      	lsls	r2, r3, #30
 8010d2a:	bf49      	itett	mi
 8010d2c:	085b      	lsrmi	r3, r3, #1
 8010d2e:	089b      	lsrpl	r3, r3, #2
 8010d30:	6003      	strmi	r3, [r0, #0]
 8010d32:	2201      	movmi	r2, #1
 8010d34:	bf5c      	itt	pl
 8010d36:	6003      	strpl	r3, [r0, #0]
 8010d38:	2202      	movpl	r2, #2
 8010d3a:	4610      	mov	r0, r2
 8010d3c:	4770      	bx	lr
 8010d3e:	b299      	uxth	r1, r3
 8010d40:	b909      	cbnz	r1, 8010d46 <__lo0bits+0x2a>
 8010d42:	0c1b      	lsrs	r3, r3, #16
 8010d44:	2210      	movs	r2, #16
 8010d46:	b2d9      	uxtb	r1, r3
 8010d48:	b909      	cbnz	r1, 8010d4e <__lo0bits+0x32>
 8010d4a:	3208      	adds	r2, #8
 8010d4c:	0a1b      	lsrs	r3, r3, #8
 8010d4e:	0719      	lsls	r1, r3, #28
 8010d50:	bf04      	itt	eq
 8010d52:	091b      	lsreq	r3, r3, #4
 8010d54:	3204      	addeq	r2, #4
 8010d56:	0799      	lsls	r1, r3, #30
 8010d58:	bf04      	itt	eq
 8010d5a:	089b      	lsreq	r3, r3, #2
 8010d5c:	3202      	addeq	r2, #2
 8010d5e:	07d9      	lsls	r1, r3, #31
 8010d60:	d403      	bmi.n	8010d6a <__lo0bits+0x4e>
 8010d62:	085b      	lsrs	r3, r3, #1
 8010d64:	f102 0201 	add.w	r2, r2, #1
 8010d68:	d003      	beq.n	8010d72 <__lo0bits+0x56>
 8010d6a:	6003      	str	r3, [r0, #0]
 8010d6c:	e7e5      	b.n	8010d3a <__lo0bits+0x1e>
 8010d6e:	2200      	movs	r2, #0
 8010d70:	e7e3      	b.n	8010d3a <__lo0bits+0x1e>
 8010d72:	2220      	movs	r2, #32
 8010d74:	e7e1      	b.n	8010d3a <__lo0bits+0x1e>
	...

08010d78 <__i2b>:
 8010d78:	b510      	push	{r4, lr}
 8010d7a:	460c      	mov	r4, r1
 8010d7c:	2101      	movs	r1, #1
 8010d7e:	f7ff ff05 	bl	8010b8c <_Balloc>
 8010d82:	4602      	mov	r2, r0
 8010d84:	b928      	cbnz	r0, 8010d92 <__i2b+0x1a>
 8010d86:	4b05      	ldr	r3, [pc, #20]	; (8010d9c <__i2b+0x24>)
 8010d88:	4805      	ldr	r0, [pc, #20]	; (8010da0 <__i2b+0x28>)
 8010d8a:	f240 1145 	movw	r1, #325	; 0x145
 8010d8e:	f000 fca9 	bl	80116e4 <__assert_func>
 8010d92:	2301      	movs	r3, #1
 8010d94:	6144      	str	r4, [r0, #20]
 8010d96:	6103      	str	r3, [r0, #16]
 8010d98:	bd10      	pop	{r4, pc}
 8010d9a:	bf00      	nop
 8010d9c:	080139e0 	.word	0x080139e0
 8010da0:	080139f1 	.word	0x080139f1

08010da4 <__multiply>:
 8010da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da8:	4691      	mov	r9, r2
 8010daa:	690a      	ldr	r2, [r1, #16]
 8010dac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	bfb8      	it	lt
 8010db4:	460b      	movlt	r3, r1
 8010db6:	460c      	mov	r4, r1
 8010db8:	bfbc      	itt	lt
 8010dba:	464c      	movlt	r4, r9
 8010dbc:	4699      	movlt	r9, r3
 8010dbe:	6927      	ldr	r7, [r4, #16]
 8010dc0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010dc4:	68a3      	ldr	r3, [r4, #8]
 8010dc6:	6861      	ldr	r1, [r4, #4]
 8010dc8:	eb07 060a 	add.w	r6, r7, sl
 8010dcc:	42b3      	cmp	r3, r6
 8010dce:	b085      	sub	sp, #20
 8010dd0:	bfb8      	it	lt
 8010dd2:	3101      	addlt	r1, #1
 8010dd4:	f7ff feda 	bl	8010b8c <_Balloc>
 8010dd8:	b930      	cbnz	r0, 8010de8 <__multiply+0x44>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	4b44      	ldr	r3, [pc, #272]	; (8010ef0 <__multiply+0x14c>)
 8010dde:	4845      	ldr	r0, [pc, #276]	; (8010ef4 <__multiply+0x150>)
 8010de0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010de4:	f000 fc7e 	bl	80116e4 <__assert_func>
 8010de8:	f100 0514 	add.w	r5, r0, #20
 8010dec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010df0:	462b      	mov	r3, r5
 8010df2:	2200      	movs	r2, #0
 8010df4:	4543      	cmp	r3, r8
 8010df6:	d321      	bcc.n	8010e3c <__multiply+0x98>
 8010df8:	f104 0314 	add.w	r3, r4, #20
 8010dfc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010e00:	f109 0314 	add.w	r3, r9, #20
 8010e04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010e08:	9202      	str	r2, [sp, #8]
 8010e0a:	1b3a      	subs	r2, r7, r4
 8010e0c:	3a15      	subs	r2, #21
 8010e0e:	f022 0203 	bic.w	r2, r2, #3
 8010e12:	3204      	adds	r2, #4
 8010e14:	f104 0115 	add.w	r1, r4, #21
 8010e18:	428f      	cmp	r7, r1
 8010e1a:	bf38      	it	cc
 8010e1c:	2204      	movcc	r2, #4
 8010e1e:	9201      	str	r2, [sp, #4]
 8010e20:	9a02      	ldr	r2, [sp, #8]
 8010e22:	9303      	str	r3, [sp, #12]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d80c      	bhi.n	8010e42 <__multiply+0x9e>
 8010e28:	2e00      	cmp	r6, #0
 8010e2a:	dd03      	ble.n	8010e34 <__multiply+0x90>
 8010e2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d05b      	beq.n	8010eec <__multiply+0x148>
 8010e34:	6106      	str	r6, [r0, #16]
 8010e36:	b005      	add	sp, #20
 8010e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e3c:	f843 2b04 	str.w	r2, [r3], #4
 8010e40:	e7d8      	b.n	8010df4 <__multiply+0x50>
 8010e42:	f8b3 a000 	ldrh.w	sl, [r3]
 8010e46:	f1ba 0f00 	cmp.w	sl, #0
 8010e4a:	d024      	beq.n	8010e96 <__multiply+0xf2>
 8010e4c:	f104 0e14 	add.w	lr, r4, #20
 8010e50:	46a9      	mov	r9, r5
 8010e52:	f04f 0c00 	mov.w	ip, #0
 8010e56:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010e5a:	f8d9 1000 	ldr.w	r1, [r9]
 8010e5e:	fa1f fb82 	uxth.w	fp, r2
 8010e62:	b289      	uxth	r1, r1
 8010e64:	fb0a 110b 	mla	r1, sl, fp, r1
 8010e68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010e6c:	f8d9 2000 	ldr.w	r2, [r9]
 8010e70:	4461      	add	r1, ip
 8010e72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e76:	fb0a c20b 	mla	r2, sl, fp, ip
 8010e7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010e7e:	b289      	uxth	r1, r1
 8010e80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010e84:	4577      	cmp	r7, lr
 8010e86:	f849 1b04 	str.w	r1, [r9], #4
 8010e8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e8e:	d8e2      	bhi.n	8010e56 <__multiply+0xb2>
 8010e90:	9a01      	ldr	r2, [sp, #4]
 8010e92:	f845 c002 	str.w	ip, [r5, r2]
 8010e96:	9a03      	ldr	r2, [sp, #12]
 8010e98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010e9c:	3304      	adds	r3, #4
 8010e9e:	f1b9 0f00 	cmp.w	r9, #0
 8010ea2:	d021      	beq.n	8010ee8 <__multiply+0x144>
 8010ea4:	6829      	ldr	r1, [r5, #0]
 8010ea6:	f104 0c14 	add.w	ip, r4, #20
 8010eaa:	46ae      	mov	lr, r5
 8010eac:	f04f 0a00 	mov.w	sl, #0
 8010eb0:	f8bc b000 	ldrh.w	fp, [ip]
 8010eb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010eb8:	fb09 220b 	mla	r2, r9, fp, r2
 8010ebc:	4452      	add	r2, sl
 8010ebe:	b289      	uxth	r1, r1
 8010ec0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010ec4:	f84e 1b04 	str.w	r1, [lr], #4
 8010ec8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010ecc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010ed0:	f8be 1000 	ldrh.w	r1, [lr]
 8010ed4:	fb09 110a 	mla	r1, r9, sl, r1
 8010ed8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010edc:	4567      	cmp	r7, ip
 8010ede:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010ee2:	d8e5      	bhi.n	8010eb0 <__multiply+0x10c>
 8010ee4:	9a01      	ldr	r2, [sp, #4]
 8010ee6:	50a9      	str	r1, [r5, r2]
 8010ee8:	3504      	adds	r5, #4
 8010eea:	e799      	b.n	8010e20 <__multiply+0x7c>
 8010eec:	3e01      	subs	r6, #1
 8010eee:	e79b      	b.n	8010e28 <__multiply+0x84>
 8010ef0:	080139e0 	.word	0x080139e0
 8010ef4:	080139f1 	.word	0x080139f1

08010ef8 <__pow5mult>:
 8010ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010efc:	4615      	mov	r5, r2
 8010efe:	f012 0203 	ands.w	r2, r2, #3
 8010f02:	4606      	mov	r6, r0
 8010f04:	460f      	mov	r7, r1
 8010f06:	d007      	beq.n	8010f18 <__pow5mult+0x20>
 8010f08:	4c25      	ldr	r4, [pc, #148]	; (8010fa0 <__pow5mult+0xa8>)
 8010f0a:	3a01      	subs	r2, #1
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f12:	f7ff fe9d 	bl	8010c50 <__multadd>
 8010f16:	4607      	mov	r7, r0
 8010f18:	10ad      	asrs	r5, r5, #2
 8010f1a:	d03d      	beq.n	8010f98 <__pow5mult+0xa0>
 8010f1c:	69f4      	ldr	r4, [r6, #28]
 8010f1e:	b97c      	cbnz	r4, 8010f40 <__pow5mult+0x48>
 8010f20:	2010      	movs	r0, #16
 8010f22:	f7ff fd7f 	bl	8010a24 <malloc>
 8010f26:	4602      	mov	r2, r0
 8010f28:	61f0      	str	r0, [r6, #28]
 8010f2a:	b928      	cbnz	r0, 8010f38 <__pow5mult+0x40>
 8010f2c:	4b1d      	ldr	r3, [pc, #116]	; (8010fa4 <__pow5mult+0xac>)
 8010f2e:	481e      	ldr	r0, [pc, #120]	; (8010fa8 <__pow5mult+0xb0>)
 8010f30:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010f34:	f000 fbd6 	bl	80116e4 <__assert_func>
 8010f38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f3c:	6004      	str	r4, [r0, #0]
 8010f3e:	60c4      	str	r4, [r0, #12]
 8010f40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010f44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010f48:	b94c      	cbnz	r4, 8010f5e <__pow5mult+0x66>
 8010f4a:	f240 2171 	movw	r1, #625	; 0x271
 8010f4e:	4630      	mov	r0, r6
 8010f50:	f7ff ff12 	bl	8010d78 <__i2b>
 8010f54:	2300      	movs	r3, #0
 8010f56:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	6003      	str	r3, [r0, #0]
 8010f5e:	f04f 0900 	mov.w	r9, #0
 8010f62:	07eb      	lsls	r3, r5, #31
 8010f64:	d50a      	bpl.n	8010f7c <__pow5mult+0x84>
 8010f66:	4639      	mov	r1, r7
 8010f68:	4622      	mov	r2, r4
 8010f6a:	4630      	mov	r0, r6
 8010f6c:	f7ff ff1a 	bl	8010da4 <__multiply>
 8010f70:	4639      	mov	r1, r7
 8010f72:	4680      	mov	r8, r0
 8010f74:	4630      	mov	r0, r6
 8010f76:	f7ff fe49 	bl	8010c0c <_Bfree>
 8010f7a:	4647      	mov	r7, r8
 8010f7c:	106d      	asrs	r5, r5, #1
 8010f7e:	d00b      	beq.n	8010f98 <__pow5mult+0xa0>
 8010f80:	6820      	ldr	r0, [r4, #0]
 8010f82:	b938      	cbnz	r0, 8010f94 <__pow5mult+0x9c>
 8010f84:	4622      	mov	r2, r4
 8010f86:	4621      	mov	r1, r4
 8010f88:	4630      	mov	r0, r6
 8010f8a:	f7ff ff0b 	bl	8010da4 <__multiply>
 8010f8e:	6020      	str	r0, [r4, #0]
 8010f90:	f8c0 9000 	str.w	r9, [r0]
 8010f94:	4604      	mov	r4, r0
 8010f96:	e7e4      	b.n	8010f62 <__pow5mult+0x6a>
 8010f98:	4638      	mov	r0, r7
 8010f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f9e:	bf00      	nop
 8010fa0:	08013b40 	.word	0x08013b40
 8010fa4:	08013971 	.word	0x08013971
 8010fa8:	080139f1 	.word	0x080139f1

08010fac <__lshift>:
 8010fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fb0:	460c      	mov	r4, r1
 8010fb2:	6849      	ldr	r1, [r1, #4]
 8010fb4:	6923      	ldr	r3, [r4, #16]
 8010fb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010fba:	68a3      	ldr	r3, [r4, #8]
 8010fbc:	4607      	mov	r7, r0
 8010fbe:	4691      	mov	r9, r2
 8010fc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010fc4:	f108 0601 	add.w	r6, r8, #1
 8010fc8:	42b3      	cmp	r3, r6
 8010fca:	db0b      	blt.n	8010fe4 <__lshift+0x38>
 8010fcc:	4638      	mov	r0, r7
 8010fce:	f7ff fddd 	bl	8010b8c <_Balloc>
 8010fd2:	4605      	mov	r5, r0
 8010fd4:	b948      	cbnz	r0, 8010fea <__lshift+0x3e>
 8010fd6:	4602      	mov	r2, r0
 8010fd8:	4b28      	ldr	r3, [pc, #160]	; (801107c <__lshift+0xd0>)
 8010fda:	4829      	ldr	r0, [pc, #164]	; (8011080 <__lshift+0xd4>)
 8010fdc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010fe0:	f000 fb80 	bl	80116e4 <__assert_func>
 8010fe4:	3101      	adds	r1, #1
 8010fe6:	005b      	lsls	r3, r3, #1
 8010fe8:	e7ee      	b.n	8010fc8 <__lshift+0x1c>
 8010fea:	2300      	movs	r3, #0
 8010fec:	f100 0114 	add.w	r1, r0, #20
 8010ff0:	f100 0210 	add.w	r2, r0, #16
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	4553      	cmp	r3, sl
 8010ff8:	db33      	blt.n	8011062 <__lshift+0xb6>
 8010ffa:	6920      	ldr	r0, [r4, #16]
 8010ffc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011000:	f104 0314 	add.w	r3, r4, #20
 8011004:	f019 091f 	ands.w	r9, r9, #31
 8011008:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801100c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011010:	d02b      	beq.n	801106a <__lshift+0xbe>
 8011012:	f1c9 0e20 	rsb	lr, r9, #32
 8011016:	468a      	mov	sl, r1
 8011018:	2200      	movs	r2, #0
 801101a:	6818      	ldr	r0, [r3, #0]
 801101c:	fa00 f009 	lsl.w	r0, r0, r9
 8011020:	4310      	orrs	r0, r2
 8011022:	f84a 0b04 	str.w	r0, [sl], #4
 8011026:	f853 2b04 	ldr.w	r2, [r3], #4
 801102a:	459c      	cmp	ip, r3
 801102c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011030:	d8f3      	bhi.n	801101a <__lshift+0x6e>
 8011032:	ebac 0304 	sub.w	r3, ip, r4
 8011036:	3b15      	subs	r3, #21
 8011038:	f023 0303 	bic.w	r3, r3, #3
 801103c:	3304      	adds	r3, #4
 801103e:	f104 0015 	add.w	r0, r4, #21
 8011042:	4584      	cmp	ip, r0
 8011044:	bf38      	it	cc
 8011046:	2304      	movcc	r3, #4
 8011048:	50ca      	str	r2, [r1, r3]
 801104a:	b10a      	cbz	r2, 8011050 <__lshift+0xa4>
 801104c:	f108 0602 	add.w	r6, r8, #2
 8011050:	3e01      	subs	r6, #1
 8011052:	4638      	mov	r0, r7
 8011054:	612e      	str	r6, [r5, #16]
 8011056:	4621      	mov	r1, r4
 8011058:	f7ff fdd8 	bl	8010c0c <_Bfree>
 801105c:	4628      	mov	r0, r5
 801105e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011062:	f842 0f04 	str.w	r0, [r2, #4]!
 8011066:	3301      	adds	r3, #1
 8011068:	e7c5      	b.n	8010ff6 <__lshift+0x4a>
 801106a:	3904      	subs	r1, #4
 801106c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011070:	f841 2f04 	str.w	r2, [r1, #4]!
 8011074:	459c      	cmp	ip, r3
 8011076:	d8f9      	bhi.n	801106c <__lshift+0xc0>
 8011078:	e7ea      	b.n	8011050 <__lshift+0xa4>
 801107a:	bf00      	nop
 801107c:	080139e0 	.word	0x080139e0
 8011080:	080139f1 	.word	0x080139f1

08011084 <__mcmp>:
 8011084:	b530      	push	{r4, r5, lr}
 8011086:	6902      	ldr	r2, [r0, #16]
 8011088:	690c      	ldr	r4, [r1, #16]
 801108a:	1b12      	subs	r2, r2, r4
 801108c:	d10e      	bne.n	80110ac <__mcmp+0x28>
 801108e:	f100 0314 	add.w	r3, r0, #20
 8011092:	3114      	adds	r1, #20
 8011094:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011098:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801109c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80110a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80110a4:	42a5      	cmp	r5, r4
 80110a6:	d003      	beq.n	80110b0 <__mcmp+0x2c>
 80110a8:	d305      	bcc.n	80110b6 <__mcmp+0x32>
 80110aa:	2201      	movs	r2, #1
 80110ac:	4610      	mov	r0, r2
 80110ae:	bd30      	pop	{r4, r5, pc}
 80110b0:	4283      	cmp	r3, r0
 80110b2:	d3f3      	bcc.n	801109c <__mcmp+0x18>
 80110b4:	e7fa      	b.n	80110ac <__mcmp+0x28>
 80110b6:	f04f 32ff 	mov.w	r2, #4294967295
 80110ba:	e7f7      	b.n	80110ac <__mcmp+0x28>

080110bc <__mdiff>:
 80110bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c0:	460c      	mov	r4, r1
 80110c2:	4606      	mov	r6, r0
 80110c4:	4611      	mov	r1, r2
 80110c6:	4620      	mov	r0, r4
 80110c8:	4690      	mov	r8, r2
 80110ca:	f7ff ffdb 	bl	8011084 <__mcmp>
 80110ce:	1e05      	subs	r5, r0, #0
 80110d0:	d110      	bne.n	80110f4 <__mdiff+0x38>
 80110d2:	4629      	mov	r1, r5
 80110d4:	4630      	mov	r0, r6
 80110d6:	f7ff fd59 	bl	8010b8c <_Balloc>
 80110da:	b930      	cbnz	r0, 80110ea <__mdiff+0x2e>
 80110dc:	4b3a      	ldr	r3, [pc, #232]	; (80111c8 <__mdiff+0x10c>)
 80110de:	4602      	mov	r2, r0
 80110e0:	f240 2137 	movw	r1, #567	; 0x237
 80110e4:	4839      	ldr	r0, [pc, #228]	; (80111cc <__mdiff+0x110>)
 80110e6:	f000 fafd 	bl	80116e4 <__assert_func>
 80110ea:	2301      	movs	r3, #1
 80110ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80110f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f4:	bfa4      	itt	ge
 80110f6:	4643      	movge	r3, r8
 80110f8:	46a0      	movge	r8, r4
 80110fa:	4630      	mov	r0, r6
 80110fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011100:	bfa6      	itte	ge
 8011102:	461c      	movge	r4, r3
 8011104:	2500      	movge	r5, #0
 8011106:	2501      	movlt	r5, #1
 8011108:	f7ff fd40 	bl	8010b8c <_Balloc>
 801110c:	b920      	cbnz	r0, 8011118 <__mdiff+0x5c>
 801110e:	4b2e      	ldr	r3, [pc, #184]	; (80111c8 <__mdiff+0x10c>)
 8011110:	4602      	mov	r2, r0
 8011112:	f240 2145 	movw	r1, #581	; 0x245
 8011116:	e7e5      	b.n	80110e4 <__mdiff+0x28>
 8011118:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801111c:	6926      	ldr	r6, [r4, #16]
 801111e:	60c5      	str	r5, [r0, #12]
 8011120:	f104 0914 	add.w	r9, r4, #20
 8011124:	f108 0514 	add.w	r5, r8, #20
 8011128:	f100 0e14 	add.w	lr, r0, #20
 801112c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011130:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011134:	f108 0210 	add.w	r2, r8, #16
 8011138:	46f2      	mov	sl, lr
 801113a:	2100      	movs	r1, #0
 801113c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011140:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011144:	fa11 f88b 	uxtah	r8, r1, fp
 8011148:	b299      	uxth	r1, r3
 801114a:	0c1b      	lsrs	r3, r3, #16
 801114c:	eba8 0801 	sub.w	r8, r8, r1
 8011150:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011154:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011158:	fa1f f888 	uxth.w	r8, r8
 801115c:	1419      	asrs	r1, r3, #16
 801115e:	454e      	cmp	r6, r9
 8011160:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011164:	f84a 3b04 	str.w	r3, [sl], #4
 8011168:	d8e8      	bhi.n	801113c <__mdiff+0x80>
 801116a:	1b33      	subs	r3, r6, r4
 801116c:	3b15      	subs	r3, #21
 801116e:	f023 0303 	bic.w	r3, r3, #3
 8011172:	3304      	adds	r3, #4
 8011174:	3415      	adds	r4, #21
 8011176:	42a6      	cmp	r6, r4
 8011178:	bf38      	it	cc
 801117a:	2304      	movcc	r3, #4
 801117c:	441d      	add	r5, r3
 801117e:	4473      	add	r3, lr
 8011180:	469e      	mov	lr, r3
 8011182:	462e      	mov	r6, r5
 8011184:	4566      	cmp	r6, ip
 8011186:	d30e      	bcc.n	80111a6 <__mdiff+0xea>
 8011188:	f10c 0203 	add.w	r2, ip, #3
 801118c:	1b52      	subs	r2, r2, r5
 801118e:	f022 0203 	bic.w	r2, r2, #3
 8011192:	3d03      	subs	r5, #3
 8011194:	45ac      	cmp	ip, r5
 8011196:	bf38      	it	cc
 8011198:	2200      	movcc	r2, #0
 801119a:	4413      	add	r3, r2
 801119c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80111a0:	b17a      	cbz	r2, 80111c2 <__mdiff+0x106>
 80111a2:	6107      	str	r7, [r0, #16]
 80111a4:	e7a4      	b.n	80110f0 <__mdiff+0x34>
 80111a6:	f856 8b04 	ldr.w	r8, [r6], #4
 80111aa:	fa11 f288 	uxtah	r2, r1, r8
 80111ae:	1414      	asrs	r4, r2, #16
 80111b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80111b4:	b292      	uxth	r2, r2
 80111b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80111ba:	f84e 2b04 	str.w	r2, [lr], #4
 80111be:	1421      	asrs	r1, r4, #16
 80111c0:	e7e0      	b.n	8011184 <__mdiff+0xc8>
 80111c2:	3f01      	subs	r7, #1
 80111c4:	e7ea      	b.n	801119c <__mdiff+0xe0>
 80111c6:	bf00      	nop
 80111c8:	080139e0 	.word	0x080139e0
 80111cc:	080139f1 	.word	0x080139f1

080111d0 <__d2b>:
 80111d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80111d4:	460f      	mov	r7, r1
 80111d6:	2101      	movs	r1, #1
 80111d8:	ec59 8b10 	vmov	r8, r9, d0
 80111dc:	4616      	mov	r6, r2
 80111de:	f7ff fcd5 	bl	8010b8c <_Balloc>
 80111e2:	4604      	mov	r4, r0
 80111e4:	b930      	cbnz	r0, 80111f4 <__d2b+0x24>
 80111e6:	4602      	mov	r2, r0
 80111e8:	4b24      	ldr	r3, [pc, #144]	; (801127c <__d2b+0xac>)
 80111ea:	4825      	ldr	r0, [pc, #148]	; (8011280 <__d2b+0xb0>)
 80111ec:	f240 310f 	movw	r1, #783	; 0x30f
 80111f0:	f000 fa78 	bl	80116e4 <__assert_func>
 80111f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80111f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111fc:	bb2d      	cbnz	r5, 801124a <__d2b+0x7a>
 80111fe:	9301      	str	r3, [sp, #4]
 8011200:	f1b8 0300 	subs.w	r3, r8, #0
 8011204:	d026      	beq.n	8011254 <__d2b+0x84>
 8011206:	4668      	mov	r0, sp
 8011208:	9300      	str	r3, [sp, #0]
 801120a:	f7ff fd87 	bl	8010d1c <__lo0bits>
 801120e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011212:	b1e8      	cbz	r0, 8011250 <__d2b+0x80>
 8011214:	f1c0 0320 	rsb	r3, r0, #32
 8011218:	fa02 f303 	lsl.w	r3, r2, r3
 801121c:	430b      	orrs	r3, r1
 801121e:	40c2      	lsrs	r2, r0
 8011220:	6163      	str	r3, [r4, #20]
 8011222:	9201      	str	r2, [sp, #4]
 8011224:	9b01      	ldr	r3, [sp, #4]
 8011226:	61a3      	str	r3, [r4, #24]
 8011228:	2b00      	cmp	r3, #0
 801122a:	bf14      	ite	ne
 801122c:	2202      	movne	r2, #2
 801122e:	2201      	moveq	r2, #1
 8011230:	6122      	str	r2, [r4, #16]
 8011232:	b1bd      	cbz	r5, 8011264 <__d2b+0x94>
 8011234:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011238:	4405      	add	r5, r0
 801123a:	603d      	str	r5, [r7, #0]
 801123c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011240:	6030      	str	r0, [r6, #0]
 8011242:	4620      	mov	r0, r4
 8011244:	b003      	add	sp, #12
 8011246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801124a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801124e:	e7d6      	b.n	80111fe <__d2b+0x2e>
 8011250:	6161      	str	r1, [r4, #20]
 8011252:	e7e7      	b.n	8011224 <__d2b+0x54>
 8011254:	a801      	add	r0, sp, #4
 8011256:	f7ff fd61 	bl	8010d1c <__lo0bits>
 801125a:	9b01      	ldr	r3, [sp, #4]
 801125c:	6163      	str	r3, [r4, #20]
 801125e:	3020      	adds	r0, #32
 8011260:	2201      	movs	r2, #1
 8011262:	e7e5      	b.n	8011230 <__d2b+0x60>
 8011264:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011268:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801126c:	6038      	str	r0, [r7, #0]
 801126e:	6918      	ldr	r0, [r3, #16]
 8011270:	f7ff fd34 	bl	8010cdc <__hi0bits>
 8011274:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011278:	e7e2      	b.n	8011240 <__d2b+0x70>
 801127a:	bf00      	nop
 801127c:	080139e0 	.word	0x080139e0
 8011280:	080139f1 	.word	0x080139f1

08011284 <__ssputs_r>:
 8011284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011288:	688e      	ldr	r6, [r1, #8]
 801128a:	461f      	mov	r7, r3
 801128c:	42be      	cmp	r6, r7
 801128e:	680b      	ldr	r3, [r1, #0]
 8011290:	4682      	mov	sl, r0
 8011292:	460c      	mov	r4, r1
 8011294:	4690      	mov	r8, r2
 8011296:	d82c      	bhi.n	80112f2 <__ssputs_r+0x6e>
 8011298:	898a      	ldrh	r2, [r1, #12]
 801129a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801129e:	d026      	beq.n	80112ee <__ssputs_r+0x6a>
 80112a0:	6965      	ldr	r5, [r4, #20]
 80112a2:	6909      	ldr	r1, [r1, #16]
 80112a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80112a8:	eba3 0901 	sub.w	r9, r3, r1
 80112ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80112b0:	1c7b      	adds	r3, r7, #1
 80112b2:	444b      	add	r3, r9
 80112b4:	106d      	asrs	r5, r5, #1
 80112b6:	429d      	cmp	r5, r3
 80112b8:	bf38      	it	cc
 80112ba:	461d      	movcc	r5, r3
 80112bc:	0553      	lsls	r3, r2, #21
 80112be:	d527      	bpl.n	8011310 <__ssputs_r+0x8c>
 80112c0:	4629      	mov	r1, r5
 80112c2:	f7ff fbd7 	bl	8010a74 <_malloc_r>
 80112c6:	4606      	mov	r6, r0
 80112c8:	b360      	cbz	r0, 8011324 <__ssputs_r+0xa0>
 80112ca:	6921      	ldr	r1, [r4, #16]
 80112cc:	464a      	mov	r2, r9
 80112ce:	f7fe fcd2 	bl	800fc76 <memcpy>
 80112d2:	89a3      	ldrh	r3, [r4, #12]
 80112d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80112d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112dc:	81a3      	strh	r3, [r4, #12]
 80112de:	6126      	str	r6, [r4, #16]
 80112e0:	6165      	str	r5, [r4, #20]
 80112e2:	444e      	add	r6, r9
 80112e4:	eba5 0509 	sub.w	r5, r5, r9
 80112e8:	6026      	str	r6, [r4, #0]
 80112ea:	60a5      	str	r5, [r4, #8]
 80112ec:	463e      	mov	r6, r7
 80112ee:	42be      	cmp	r6, r7
 80112f0:	d900      	bls.n	80112f4 <__ssputs_r+0x70>
 80112f2:	463e      	mov	r6, r7
 80112f4:	6820      	ldr	r0, [r4, #0]
 80112f6:	4632      	mov	r2, r6
 80112f8:	4641      	mov	r1, r8
 80112fa:	f000 f9c9 	bl	8011690 <memmove>
 80112fe:	68a3      	ldr	r3, [r4, #8]
 8011300:	1b9b      	subs	r3, r3, r6
 8011302:	60a3      	str	r3, [r4, #8]
 8011304:	6823      	ldr	r3, [r4, #0]
 8011306:	4433      	add	r3, r6
 8011308:	6023      	str	r3, [r4, #0]
 801130a:	2000      	movs	r0, #0
 801130c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011310:	462a      	mov	r2, r5
 8011312:	f000 fa2d 	bl	8011770 <_realloc_r>
 8011316:	4606      	mov	r6, r0
 8011318:	2800      	cmp	r0, #0
 801131a:	d1e0      	bne.n	80112de <__ssputs_r+0x5a>
 801131c:	6921      	ldr	r1, [r4, #16]
 801131e:	4650      	mov	r0, sl
 8011320:	f7ff fb34 	bl	801098c <_free_r>
 8011324:	230c      	movs	r3, #12
 8011326:	f8ca 3000 	str.w	r3, [sl]
 801132a:	89a3      	ldrh	r3, [r4, #12]
 801132c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011330:	81a3      	strh	r3, [r4, #12]
 8011332:	f04f 30ff 	mov.w	r0, #4294967295
 8011336:	e7e9      	b.n	801130c <__ssputs_r+0x88>

08011338 <_svfiprintf_r>:
 8011338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801133c:	4698      	mov	r8, r3
 801133e:	898b      	ldrh	r3, [r1, #12]
 8011340:	061b      	lsls	r3, r3, #24
 8011342:	b09d      	sub	sp, #116	; 0x74
 8011344:	4607      	mov	r7, r0
 8011346:	460d      	mov	r5, r1
 8011348:	4614      	mov	r4, r2
 801134a:	d50e      	bpl.n	801136a <_svfiprintf_r+0x32>
 801134c:	690b      	ldr	r3, [r1, #16]
 801134e:	b963      	cbnz	r3, 801136a <_svfiprintf_r+0x32>
 8011350:	2140      	movs	r1, #64	; 0x40
 8011352:	f7ff fb8f 	bl	8010a74 <_malloc_r>
 8011356:	6028      	str	r0, [r5, #0]
 8011358:	6128      	str	r0, [r5, #16]
 801135a:	b920      	cbnz	r0, 8011366 <_svfiprintf_r+0x2e>
 801135c:	230c      	movs	r3, #12
 801135e:	603b      	str	r3, [r7, #0]
 8011360:	f04f 30ff 	mov.w	r0, #4294967295
 8011364:	e0d0      	b.n	8011508 <_svfiprintf_r+0x1d0>
 8011366:	2340      	movs	r3, #64	; 0x40
 8011368:	616b      	str	r3, [r5, #20]
 801136a:	2300      	movs	r3, #0
 801136c:	9309      	str	r3, [sp, #36]	; 0x24
 801136e:	2320      	movs	r3, #32
 8011370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011374:	f8cd 800c 	str.w	r8, [sp, #12]
 8011378:	2330      	movs	r3, #48	; 0x30
 801137a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011520 <_svfiprintf_r+0x1e8>
 801137e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011382:	f04f 0901 	mov.w	r9, #1
 8011386:	4623      	mov	r3, r4
 8011388:	469a      	mov	sl, r3
 801138a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801138e:	b10a      	cbz	r2, 8011394 <_svfiprintf_r+0x5c>
 8011390:	2a25      	cmp	r2, #37	; 0x25
 8011392:	d1f9      	bne.n	8011388 <_svfiprintf_r+0x50>
 8011394:	ebba 0b04 	subs.w	fp, sl, r4
 8011398:	d00b      	beq.n	80113b2 <_svfiprintf_r+0x7a>
 801139a:	465b      	mov	r3, fp
 801139c:	4622      	mov	r2, r4
 801139e:	4629      	mov	r1, r5
 80113a0:	4638      	mov	r0, r7
 80113a2:	f7ff ff6f 	bl	8011284 <__ssputs_r>
 80113a6:	3001      	adds	r0, #1
 80113a8:	f000 80a9 	beq.w	80114fe <_svfiprintf_r+0x1c6>
 80113ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113ae:	445a      	add	r2, fp
 80113b0:	9209      	str	r2, [sp, #36]	; 0x24
 80113b2:	f89a 3000 	ldrb.w	r3, [sl]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	f000 80a1 	beq.w	80114fe <_svfiprintf_r+0x1c6>
 80113bc:	2300      	movs	r3, #0
 80113be:	f04f 32ff 	mov.w	r2, #4294967295
 80113c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113c6:	f10a 0a01 	add.w	sl, sl, #1
 80113ca:	9304      	str	r3, [sp, #16]
 80113cc:	9307      	str	r3, [sp, #28]
 80113ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113d2:	931a      	str	r3, [sp, #104]	; 0x68
 80113d4:	4654      	mov	r4, sl
 80113d6:	2205      	movs	r2, #5
 80113d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113dc:	4850      	ldr	r0, [pc, #320]	; (8011520 <_svfiprintf_r+0x1e8>)
 80113de:	f7ee ff07 	bl	80001f0 <memchr>
 80113e2:	9a04      	ldr	r2, [sp, #16]
 80113e4:	b9d8      	cbnz	r0, 801141e <_svfiprintf_r+0xe6>
 80113e6:	06d0      	lsls	r0, r2, #27
 80113e8:	bf44      	itt	mi
 80113ea:	2320      	movmi	r3, #32
 80113ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113f0:	0711      	lsls	r1, r2, #28
 80113f2:	bf44      	itt	mi
 80113f4:	232b      	movmi	r3, #43	; 0x2b
 80113f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113fa:	f89a 3000 	ldrb.w	r3, [sl]
 80113fe:	2b2a      	cmp	r3, #42	; 0x2a
 8011400:	d015      	beq.n	801142e <_svfiprintf_r+0xf6>
 8011402:	9a07      	ldr	r2, [sp, #28]
 8011404:	4654      	mov	r4, sl
 8011406:	2000      	movs	r0, #0
 8011408:	f04f 0c0a 	mov.w	ip, #10
 801140c:	4621      	mov	r1, r4
 801140e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011412:	3b30      	subs	r3, #48	; 0x30
 8011414:	2b09      	cmp	r3, #9
 8011416:	d94d      	bls.n	80114b4 <_svfiprintf_r+0x17c>
 8011418:	b1b0      	cbz	r0, 8011448 <_svfiprintf_r+0x110>
 801141a:	9207      	str	r2, [sp, #28]
 801141c:	e014      	b.n	8011448 <_svfiprintf_r+0x110>
 801141e:	eba0 0308 	sub.w	r3, r0, r8
 8011422:	fa09 f303 	lsl.w	r3, r9, r3
 8011426:	4313      	orrs	r3, r2
 8011428:	9304      	str	r3, [sp, #16]
 801142a:	46a2      	mov	sl, r4
 801142c:	e7d2      	b.n	80113d4 <_svfiprintf_r+0x9c>
 801142e:	9b03      	ldr	r3, [sp, #12]
 8011430:	1d19      	adds	r1, r3, #4
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	9103      	str	r1, [sp, #12]
 8011436:	2b00      	cmp	r3, #0
 8011438:	bfbb      	ittet	lt
 801143a:	425b      	neglt	r3, r3
 801143c:	f042 0202 	orrlt.w	r2, r2, #2
 8011440:	9307      	strge	r3, [sp, #28]
 8011442:	9307      	strlt	r3, [sp, #28]
 8011444:	bfb8      	it	lt
 8011446:	9204      	strlt	r2, [sp, #16]
 8011448:	7823      	ldrb	r3, [r4, #0]
 801144a:	2b2e      	cmp	r3, #46	; 0x2e
 801144c:	d10c      	bne.n	8011468 <_svfiprintf_r+0x130>
 801144e:	7863      	ldrb	r3, [r4, #1]
 8011450:	2b2a      	cmp	r3, #42	; 0x2a
 8011452:	d134      	bne.n	80114be <_svfiprintf_r+0x186>
 8011454:	9b03      	ldr	r3, [sp, #12]
 8011456:	1d1a      	adds	r2, r3, #4
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	9203      	str	r2, [sp, #12]
 801145c:	2b00      	cmp	r3, #0
 801145e:	bfb8      	it	lt
 8011460:	f04f 33ff 	movlt.w	r3, #4294967295
 8011464:	3402      	adds	r4, #2
 8011466:	9305      	str	r3, [sp, #20]
 8011468:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011530 <_svfiprintf_r+0x1f8>
 801146c:	7821      	ldrb	r1, [r4, #0]
 801146e:	2203      	movs	r2, #3
 8011470:	4650      	mov	r0, sl
 8011472:	f7ee febd 	bl	80001f0 <memchr>
 8011476:	b138      	cbz	r0, 8011488 <_svfiprintf_r+0x150>
 8011478:	9b04      	ldr	r3, [sp, #16]
 801147a:	eba0 000a 	sub.w	r0, r0, sl
 801147e:	2240      	movs	r2, #64	; 0x40
 8011480:	4082      	lsls	r2, r0
 8011482:	4313      	orrs	r3, r2
 8011484:	3401      	adds	r4, #1
 8011486:	9304      	str	r3, [sp, #16]
 8011488:	f814 1b01 	ldrb.w	r1, [r4], #1
 801148c:	4825      	ldr	r0, [pc, #148]	; (8011524 <_svfiprintf_r+0x1ec>)
 801148e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011492:	2206      	movs	r2, #6
 8011494:	f7ee feac 	bl	80001f0 <memchr>
 8011498:	2800      	cmp	r0, #0
 801149a:	d038      	beq.n	801150e <_svfiprintf_r+0x1d6>
 801149c:	4b22      	ldr	r3, [pc, #136]	; (8011528 <_svfiprintf_r+0x1f0>)
 801149e:	bb1b      	cbnz	r3, 80114e8 <_svfiprintf_r+0x1b0>
 80114a0:	9b03      	ldr	r3, [sp, #12]
 80114a2:	3307      	adds	r3, #7
 80114a4:	f023 0307 	bic.w	r3, r3, #7
 80114a8:	3308      	adds	r3, #8
 80114aa:	9303      	str	r3, [sp, #12]
 80114ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ae:	4433      	add	r3, r6
 80114b0:	9309      	str	r3, [sp, #36]	; 0x24
 80114b2:	e768      	b.n	8011386 <_svfiprintf_r+0x4e>
 80114b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80114b8:	460c      	mov	r4, r1
 80114ba:	2001      	movs	r0, #1
 80114bc:	e7a6      	b.n	801140c <_svfiprintf_r+0xd4>
 80114be:	2300      	movs	r3, #0
 80114c0:	3401      	adds	r4, #1
 80114c2:	9305      	str	r3, [sp, #20]
 80114c4:	4619      	mov	r1, r3
 80114c6:	f04f 0c0a 	mov.w	ip, #10
 80114ca:	4620      	mov	r0, r4
 80114cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114d0:	3a30      	subs	r2, #48	; 0x30
 80114d2:	2a09      	cmp	r2, #9
 80114d4:	d903      	bls.n	80114de <_svfiprintf_r+0x1a6>
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d0c6      	beq.n	8011468 <_svfiprintf_r+0x130>
 80114da:	9105      	str	r1, [sp, #20]
 80114dc:	e7c4      	b.n	8011468 <_svfiprintf_r+0x130>
 80114de:	fb0c 2101 	mla	r1, ip, r1, r2
 80114e2:	4604      	mov	r4, r0
 80114e4:	2301      	movs	r3, #1
 80114e6:	e7f0      	b.n	80114ca <_svfiprintf_r+0x192>
 80114e8:	ab03      	add	r3, sp, #12
 80114ea:	9300      	str	r3, [sp, #0]
 80114ec:	462a      	mov	r2, r5
 80114ee:	4b0f      	ldr	r3, [pc, #60]	; (801152c <_svfiprintf_r+0x1f4>)
 80114f0:	a904      	add	r1, sp, #16
 80114f2:	4638      	mov	r0, r7
 80114f4:	f7fd fe54 	bl	800f1a0 <_printf_float>
 80114f8:	1c42      	adds	r2, r0, #1
 80114fa:	4606      	mov	r6, r0
 80114fc:	d1d6      	bne.n	80114ac <_svfiprintf_r+0x174>
 80114fe:	89ab      	ldrh	r3, [r5, #12]
 8011500:	065b      	lsls	r3, r3, #25
 8011502:	f53f af2d 	bmi.w	8011360 <_svfiprintf_r+0x28>
 8011506:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011508:	b01d      	add	sp, #116	; 0x74
 801150a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801150e:	ab03      	add	r3, sp, #12
 8011510:	9300      	str	r3, [sp, #0]
 8011512:	462a      	mov	r2, r5
 8011514:	4b05      	ldr	r3, [pc, #20]	; (801152c <_svfiprintf_r+0x1f4>)
 8011516:	a904      	add	r1, sp, #16
 8011518:	4638      	mov	r0, r7
 801151a:	f7fe f8e5 	bl	800f6e8 <_printf_i>
 801151e:	e7eb      	b.n	80114f8 <_svfiprintf_r+0x1c0>
 8011520:	08013b4c 	.word	0x08013b4c
 8011524:	08013b56 	.word	0x08013b56
 8011528:	0800f1a1 	.word	0x0800f1a1
 801152c:	08011285 	.word	0x08011285
 8011530:	08013b52 	.word	0x08013b52

08011534 <__sflush_r>:
 8011534:	898a      	ldrh	r2, [r1, #12]
 8011536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801153a:	4605      	mov	r5, r0
 801153c:	0710      	lsls	r0, r2, #28
 801153e:	460c      	mov	r4, r1
 8011540:	d458      	bmi.n	80115f4 <__sflush_r+0xc0>
 8011542:	684b      	ldr	r3, [r1, #4]
 8011544:	2b00      	cmp	r3, #0
 8011546:	dc05      	bgt.n	8011554 <__sflush_r+0x20>
 8011548:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801154a:	2b00      	cmp	r3, #0
 801154c:	dc02      	bgt.n	8011554 <__sflush_r+0x20>
 801154e:	2000      	movs	r0, #0
 8011550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011556:	2e00      	cmp	r6, #0
 8011558:	d0f9      	beq.n	801154e <__sflush_r+0x1a>
 801155a:	2300      	movs	r3, #0
 801155c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011560:	682f      	ldr	r7, [r5, #0]
 8011562:	6a21      	ldr	r1, [r4, #32]
 8011564:	602b      	str	r3, [r5, #0]
 8011566:	d032      	beq.n	80115ce <__sflush_r+0x9a>
 8011568:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801156a:	89a3      	ldrh	r3, [r4, #12]
 801156c:	075a      	lsls	r2, r3, #29
 801156e:	d505      	bpl.n	801157c <__sflush_r+0x48>
 8011570:	6863      	ldr	r3, [r4, #4]
 8011572:	1ac0      	subs	r0, r0, r3
 8011574:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011576:	b10b      	cbz	r3, 801157c <__sflush_r+0x48>
 8011578:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801157a:	1ac0      	subs	r0, r0, r3
 801157c:	2300      	movs	r3, #0
 801157e:	4602      	mov	r2, r0
 8011580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011582:	6a21      	ldr	r1, [r4, #32]
 8011584:	4628      	mov	r0, r5
 8011586:	47b0      	blx	r6
 8011588:	1c43      	adds	r3, r0, #1
 801158a:	89a3      	ldrh	r3, [r4, #12]
 801158c:	d106      	bne.n	801159c <__sflush_r+0x68>
 801158e:	6829      	ldr	r1, [r5, #0]
 8011590:	291d      	cmp	r1, #29
 8011592:	d82b      	bhi.n	80115ec <__sflush_r+0xb8>
 8011594:	4a29      	ldr	r2, [pc, #164]	; (801163c <__sflush_r+0x108>)
 8011596:	410a      	asrs	r2, r1
 8011598:	07d6      	lsls	r6, r2, #31
 801159a:	d427      	bmi.n	80115ec <__sflush_r+0xb8>
 801159c:	2200      	movs	r2, #0
 801159e:	6062      	str	r2, [r4, #4]
 80115a0:	04d9      	lsls	r1, r3, #19
 80115a2:	6922      	ldr	r2, [r4, #16]
 80115a4:	6022      	str	r2, [r4, #0]
 80115a6:	d504      	bpl.n	80115b2 <__sflush_r+0x7e>
 80115a8:	1c42      	adds	r2, r0, #1
 80115aa:	d101      	bne.n	80115b0 <__sflush_r+0x7c>
 80115ac:	682b      	ldr	r3, [r5, #0]
 80115ae:	b903      	cbnz	r3, 80115b2 <__sflush_r+0x7e>
 80115b0:	6560      	str	r0, [r4, #84]	; 0x54
 80115b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115b4:	602f      	str	r7, [r5, #0]
 80115b6:	2900      	cmp	r1, #0
 80115b8:	d0c9      	beq.n	801154e <__sflush_r+0x1a>
 80115ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115be:	4299      	cmp	r1, r3
 80115c0:	d002      	beq.n	80115c8 <__sflush_r+0x94>
 80115c2:	4628      	mov	r0, r5
 80115c4:	f7ff f9e2 	bl	801098c <_free_r>
 80115c8:	2000      	movs	r0, #0
 80115ca:	6360      	str	r0, [r4, #52]	; 0x34
 80115cc:	e7c0      	b.n	8011550 <__sflush_r+0x1c>
 80115ce:	2301      	movs	r3, #1
 80115d0:	4628      	mov	r0, r5
 80115d2:	47b0      	blx	r6
 80115d4:	1c41      	adds	r1, r0, #1
 80115d6:	d1c8      	bne.n	801156a <__sflush_r+0x36>
 80115d8:	682b      	ldr	r3, [r5, #0]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d0c5      	beq.n	801156a <__sflush_r+0x36>
 80115de:	2b1d      	cmp	r3, #29
 80115e0:	d001      	beq.n	80115e6 <__sflush_r+0xb2>
 80115e2:	2b16      	cmp	r3, #22
 80115e4:	d101      	bne.n	80115ea <__sflush_r+0xb6>
 80115e6:	602f      	str	r7, [r5, #0]
 80115e8:	e7b1      	b.n	801154e <__sflush_r+0x1a>
 80115ea:	89a3      	ldrh	r3, [r4, #12]
 80115ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115f0:	81a3      	strh	r3, [r4, #12]
 80115f2:	e7ad      	b.n	8011550 <__sflush_r+0x1c>
 80115f4:	690f      	ldr	r7, [r1, #16]
 80115f6:	2f00      	cmp	r7, #0
 80115f8:	d0a9      	beq.n	801154e <__sflush_r+0x1a>
 80115fa:	0793      	lsls	r3, r2, #30
 80115fc:	680e      	ldr	r6, [r1, #0]
 80115fe:	bf08      	it	eq
 8011600:	694b      	ldreq	r3, [r1, #20]
 8011602:	600f      	str	r7, [r1, #0]
 8011604:	bf18      	it	ne
 8011606:	2300      	movne	r3, #0
 8011608:	eba6 0807 	sub.w	r8, r6, r7
 801160c:	608b      	str	r3, [r1, #8]
 801160e:	f1b8 0f00 	cmp.w	r8, #0
 8011612:	dd9c      	ble.n	801154e <__sflush_r+0x1a>
 8011614:	6a21      	ldr	r1, [r4, #32]
 8011616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011618:	4643      	mov	r3, r8
 801161a:	463a      	mov	r2, r7
 801161c:	4628      	mov	r0, r5
 801161e:	47b0      	blx	r6
 8011620:	2800      	cmp	r0, #0
 8011622:	dc06      	bgt.n	8011632 <__sflush_r+0xfe>
 8011624:	89a3      	ldrh	r3, [r4, #12]
 8011626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801162a:	81a3      	strh	r3, [r4, #12]
 801162c:	f04f 30ff 	mov.w	r0, #4294967295
 8011630:	e78e      	b.n	8011550 <__sflush_r+0x1c>
 8011632:	4407      	add	r7, r0
 8011634:	eba8 0800 	sub.w	r8, r8, r0
 8011638:	e7e9      	b.n	801160e <__sflush_r+0xda>
 801163a:	bf00      	nop
 801163c:	dfbffffe 	.word	0xdfbffffe

08011640 <_fflush_r>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	690b      	ldr	r3, [r1, #16]
 8011644:	4605      	mov	r5, r0
 8011646:	460c      	mov	r4, r1
 8011648:	b913      	cbnz	r3, 8011650 <_fflush_r+0x10>
 801164a:	2500      	movs	r5, #0
 801164c:	4628      	mov	r0, r5
 801164e:	bd38      	pop	{r3, r4, r5, pc}
 8011650:	b118      	cbz	r0, 801165a <_fflush_r+0x1a>
 8011652:	6a03      	ldr	r3, [r0, #32]
 8011654:	b90b      	cbnz	r3, 801165a <_fflush_r+0x1a>
 8011656:	f7fe f9f5 	bl	800fa44 <__sinit>
 801165a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d0f3      	beq.n	801164a <_fflush_r+0xa>
 8011662:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011664:	07d0      	lsls	r0, r2, #31
 8011666:	d404      	bmi.n	8011672 <_fflush_r+0x32>
 8011668:	0599      	lsls	r1, r3, #22
 801166a:	d402      	bmi.n	8011672 <_fflush_r+0x32>
 801166c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801166e:	f7fe fb00 	bl	800fc72 <__retarget_lock_acquire_recursive>
 8011672:	4628      	mov	r0, r5
 8011674:	4621      	mov	r1, r4
 8011676:	f7ff ff5d 	bl	8011534 <__sflush_r>
 801167a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801167c:	07da      	lsls	r2, r3, #31
 801167e:	4605      	mov	r5, r0
 8011680:	d4e4      	bmi.n	801164c <_fflush_r+0xc>
 8011682:	89a3      	ldrh	r3, [r4, #12]
 8011684:	059b      	lsls	r3, r3, #22
 8011686:	d4e1      	bmi.n	801164c <_fflush_r+0xc>
 8011688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801168a:	f7fe faf3 	bl	800fc74 <__retarget_lock_release_recursive>
 801168e:	e7dd      	b.n	801164c <_fflush_r+0xc>

08011690 <memmove>:
 8011690:	4288      	cmp	r0, r1
 8011692:	b510      	push	{r4, lr}
 8011694:	eb01 0402 	add.w	r4, r1, r2
 8011698:	d902      	bls.n	80116a0 <memmove+0x10>
 801169a:	4284      	cmp	r4, r0
 801169c:	4623      	mov	r3, r4
 801169e:	d807      	bhi.n	80116b0 <memmove+0x20>
 80116a0:	1e43      	subs	r3, r0, #1
 80116a2:	42a1      	cmp	r1, r4
 80116a4:	d008      	beq.n	80116b8 <memmove+0x28>
 80116a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80116ae:	e7f8      	b.n	80116a2 <memmove+0x12>
 80116b0:	4402      	add	r2, r0
 80116b2:	4601      	mov	r1, r0
 80116b4:	428a      	cmp	r2, r1
 80116b6:	d100      	bne.n	80116ba <memmove+0x2a>
 80116b8:	bd10      	pop	{r4, pc}
 80116ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80116c2:	e7f7      	b.n	80116b4 <memmove+0x24>

080116c4 <_sbrk_r>:
 80116c4:	b538      	push	{r3, r4, r5, lr}
 80116c6:	4d06      	ldr	r5, [pc, #24]	; (80116e0 <_sbrk_r+0x1c>)
 80116c8:	2300      	movs	r3, #0
 80116ca:	4604      	mov	r4, r0
 80116cc:	4608      	mov	r0, r1
 80116ce:	602b      	str	r3, [r5, #0]
 80116d0:	f7f0 f822 	bl	8001718 <_sbrk>
 80116d4:	1c43      	adds	r3, r0, #1
 80116d6:	d102      	bne.n	80116de <_sbrk_r+0x1a>
 80116d8:	682b      	ldr	r3, [r5, #0]
 80116da:	b103      	cbz	r3, 80116de <_sbrk_r+0x1a>
 80116dc:	6023      	str	r3, [r4, #0]
 80116de:	bd38      	pop	{r3, r4, r5, pc}
 80116e0:	20006d68 	.word	0x20006d68

080116e4 <__assert_func>:
 80116e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116e6:	4614      	mov	r4, r2
 80116e8:	461a      	mov	r2, r3
 80116ea:	4b09      	ldr	r3, [pc, #36]	; (8011710 <__assert_func+0x2c>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	4605      	mov	r5, r0
 80116f0:	68d8      	ldr	r0, [r3, #12]
 80116f2:	b14c      	cbz	r4, 8011708 <__assert_func+0x24>
 80116f4:	4b07      	ldr	r3, [pc, #28]	; (8011714 <__assert_func+0x30>)
 80116f6:	9100      	str	r1, [sp, #0]
 80116f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80116fc:	4906      	ldr	r1, [pc, #24]	; (8011718 <__assert_func+0x34>)
 80116fe:	462b      	mov	r3, r5
 8011700:	f000 f872 	bl	80117e8 <fiprintf>
 8011704:	f000 f882 	bl	801180c <abort>
 8011708:	4b04      	ldr	r3, [pc, #16]	; (801171c <__assert_func+0x38>)
 801170a:	461c      	mov	r4, r3
 801170c:	e7f3      	b.n	80116f6 <__assert_func+0x12>
 801170e:	bf00      	nop
 8011710:	200001d4 	.word	0x200001d4
 8011714:	08013b67 	.word	0x08013b67
 8011718:	08013b74 	.word	0x08013b74
 801171c:	08013ba2 	.word	0x08013ba2

08011720 <_calloc_r>:
 8011720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011722:	fba1 2402 	umull	r2, r4, r1, r2
 8011726:	b94c      	cbnz	r4, 801173c <_calloc_r+0x1c>
 8011728:	4611      	mov	r1, r2
 801172a:	9201      	str	r2, [sp, #4]
 801172c:	f7ff f9a2 	bl	8010a74 <_malloc_r>
 8011730:	9a01      	ldr	r2, [sp, #4]
 8011732:	4605      	mov	r5, r0
 8011734:	b930      	cbnz	r0, 8011744 <_calloc_r+0x24>
 8011736:	4628      	mov	r0, r5
 8011738:	b003      	add	sp, #12
 801173a:	bd30      	pop	{r4, r5, pc}
 801173c:	220c      	movs	r2, #12
 801173e:	6002      	str	r2, [r0, #0]
 8011740:	2500      	movs	r5, #0
 8011742:	e7f8      	b.n	8011736 <_calloc_r+0x16>
 8011744:	4621      	mov	r1, r4
 8011746:	f7fe fa16 	bl	800fb76 <memset>
 801174a:	e7f4      	b.n	8011736 <_calloc_r+0x16>

0801174c <__ascii_mbtowc>:
 801174c:	b082      	sub	sp, #8
 801174e:	b901      	cbnz	r1, 8011752 <__ascii_mbtowc+0x6>
 8011750:	a901      	add	r1, sp, #4
 8011752:	b142      	cbz	r2, 8011766 <__ascii_mbtowc+0x1a>
 8011754:	b14b      	cbz	r3, 801176a <__ascii_mbtowc+0x1e>
 8011756:	7813      	ldrb	r3, [r2, #0]
 8011758:	600b      	str	r3, [r1, #0]
 801175a:	7812      	ldrb	r2, [r2, #0]
 801175c:	1e10      	subs	r0, r2, #0
 801175e:	bf18      	it	ne
 8011760:	2001      	movne	r0, #1
 8011762:	b002      	add	sp, #8
 8011764:	4770      	bx	lr
 8011766:	4610      	mov	r0, r2
 8011768:	e7fb      	b.n	8011762 <__ascii_mbtowc+0x16>
 801176a:	f06f 0001 	mvn.w	r0, #1
 801176e:	e7f8      	b.n	8011762 <__ascii_mbtowc+0x16>

08011770 <_realloc_r>:
 8011770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011774:	4680      	mov	r8, r0
 8011776:	4614      	mov	r4, r2
 8011778:	460e      	mov	r6, r1
 801177a:	b921      	cbnz	r1, 8011786 <_realloc_r+0x16>
 801177c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011780:	4611      	mov	r1, r2
 8011782:	f7ff b977 	b.w	8010a74 <_malloc_r>
 8011786:	b92a      	cbnz	r2, 8011794 <_realloc_r+0x24>
 8011788:	f7ff f900 	bl	801098c <_free_r>
 801178c:	4625      	mov	r5, r4
 801178e:	4628      	mov	r0, r5
 8011790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011794:	f000 f841 	bl	801181a <_malloc_usable_size_r>
 8011798:	4284      	cmp	r4, r0
 801179a:	4607      	mov	r7, r0
 801179c:	d802      	bhi.n	80117a4 <_realloc_r+0x34>
 801179e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80117a2:	d812      	bhi.n	80117ca <_realloc_r+0x5a>
 80117a4:	4621      	mov	r1, r4
 80117a6:	4640      	mov	r0, r8
 80117a8:	f7ff f964 	bl	8010a74 <_malloc_r>
 80117ac:	4605      	mov	r5, r0
 80117ae:	2800      	cmp	r0, #0
 80117b0:	d0ed      	beq.n	801178e <_realloc_r+0x1e>
 80117b2:	42bc      	cmp	r4, r7
 80117b4:	4622      	mov	r2, r4
 80117b6:	4631      	mov	r1, r6
 80117b8:	bf28      	it	cs
 80117ba:	463a      	movcs	r2, r7
 80117bc:	f7fe fa5b 	bl	800fc76 <memcpy>
 80117c0:	4631      	mov	r1, r6
 80117c2:	4640      	mov	r0, r8
 80117c4:	f7ff f8e2 	bl	801098c <_free_r>
 80117c8:	e7e1      	b.n	801178e <_realloc_r+0x1e>
 80117ca:	4635      	mov	r5, r6
 80117cc:	e7df      	b.n	801178e <_realloc_r+0x1e>

080117ce <__ascii_wctomb>:
 80117ce:	b149      	cbz	r1, 80117e4 <__ascii_wctomb+0x16>
 80117d0:	2aff      	cmp	r2, #255	; 0xff
 80117d2:	bf85      	ittet	hi
 80117d4:	238a      	movhi	r3, #138	; 0x8a
 80117d6:	6003      	strhi	r3, [r0, #0]
 80117d8:	700a      	strbls	r2, [r1, #0]
 80117da:	f04f 30ff 	movhi.w	r0, #4294967295
 80117de:	bf98      	it	ls
 80117e0:	2001      	movls	r0, #1
 80117e2:	4770      	bx	lr
 80117e4:	4608      	mov	r0, r1
 80117e6:	4770      	bx	lr

080117e8 <fiprintf>:
 80117e8:	b40e      	push	{r1, r2, r3}
 80117ea:	b503      	push	{r0, r1, lr}
 80117ec:	4601      	mov	r1, r0
 80117ee:	ab03      	add	r3, sp, #12
 80117f0:	4805      	ldr	r0, [pc, #20]	; (8011808 <fiprintf+0x20>)
 80117f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80117f6:	6800      	ldr	r0, [r0, #0]
 80117f8:	9301      	str	r3, [sp, #4]
 80117fa:	f000 f83f 	bl	801187c <_vfiprintf_r>
 80117fe:	b002      	add	sp, #8
 8011800:	f85d eb04 	ldr.w	lr, [sp], #4
 8011804:	b003      	add	sp, #12
 8011806:	4770      	bx	lr
 8011808:	200001d4 	.word	0x200001d4

0801180c <abort>:
 801180c:	b508      	push	{r3, lr}
 801180e:	2006      	movs	r0, #6
 8011810:	f000 fa0c 	bl	8011c2c <raise>
 8011814:	2001      	movs	r0, #1
 8011816:	f7ef ff07 	bl	8001628 <_exit>

0801181a <_malloc_usable_size_r>:
 801181a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801181e:	1f18      	subs	r0, r3, #4
 8011820:	2b00      	cmp	r3, #0
 8011822:	bfbc      	itt	lt
 8011824:	580b      	ldrlt	r3, [r1, r0]
 8011826:	18c0      	addlt	r0, r0, r3
 8011828:	4770      	bx	lr

0801182a <__sfputc_r>:
 801182a:	6893      	ldr	r3, [r2, #8]
 801182c:	3b01      	subs	r3, #1
 801182e:	2b00      	cmp	r3, #0
 8011830:	b410      	push	{r4}
 8011832:	6093      	str	r3, [r2, #8]
 8011834:	da08      	bge.n	8011848 <__sfputc_r+0x1e>
 8011836:	6994      	ldr	r4, [r2, #24]
 8011838:	42a3      	cmp	r3, r4
 801183a:	db01      	blt.n	8011840 <__sfputc_r+0x16>
 801183c:	290a      	cmp	r1, #10
 801183e:	d103      	bne.n	8011848 <__sfputc_r+0x1e>
 8011840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011844:	f000 b934 	b.w	8011ab0 <__swbuf_r>
 8011848:	6813      	ldr	r3, [r2, #0]
 801184a:	1c58      	adds	r0, r3, #1
 801184c:	6010      	str	r0, [r2, #0]
 801184e:	7019      	strb	r1, [r3, #0]
 8011850:	4608      	mov	r0, r1
 8011852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011856:	4770      	bx	lr

08011858 <__sfputs_r>:
 8011858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185a:	4606      	mov	r6, r0
 801185c:	460f      	mov	r7, r1
 801185e:	4614      	mov	r4, r2
 8011860:	18d5      	adds	r5, r2, r3
 8011862:	42ac      	cmp	r4, r5
 8011864:	d101      	bne.n	801186a <__sfputs_r+0x12>
 8011866:	2000      	movs	r0, #0
 8011868:	e007      	b.n	801187a <__sfputs_r+0x22>
 801186a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801186e:	463a      	mov	r2, r7
 8011870:	4630      	mov	r0, r6
 8011872:	f7ff ffda 	bl	801182a <__sfputc_r>
 8011876:	1c43      	adds	r3, r0, #1
 8011878:	d1f3      	bne.n	8011862 <__sfputs_r+0xa>
 801187a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801187c <_vfiprintf_r>:
 801187c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011880:	460d      	mov	r5, r1
 8011882:	b09d      	sub	sp, #116	; 0x74
 8011884:	4614      	mov	r4, r2
 8011886:	4698      	mov	r8, r3
 8011888:	4606      	mov	r6, r0
 801188a:	b118      	cbz	r0, 8011894 <_vfiprintf_r+0x18>
 801188c:	6a03      	ldr	r3, [r0, #32]
 801188e:	b90b      	cbnz	r3, 8011894 <_vfiprintf_r+0x18>
 8011890:	f7fe f8d8 	bl	800fa44 <__sinit>
 8011894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011896:	07d9      	lsls	r1, r3, #31
 8011898:	d405      	bmi.n	80118a6 <_vfiprintf_r+0x2a>
 801189a:	89ab      	ldrh	r3, [r5, #12]
 801189c:	059a      	lsls	r2, r3, #22
 801189e:	d402      	bmi.n	80118a6 <_vfiprintf_r+0x2a>
 80118a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118a2:	f7fe f9e6 	bl	800fc72 <__retarget_lock_acquire_recursive>
 80118a6:	89ab      	ldrh	r3, [r5, #12]
 80118a8:	071b      	lsls	r3, r3, #28
 80118aa:	d501      	bpl.n	80118b0 <_vfiprintf_r+0x34>
 80118ac:	692b      	ldr	r3, [r5, #16]
 80118ae:	b99b      	cbnz	r3, 80118d8 <_vfiprintf_r+0x5c>
 80118b0:	4629      	mov	r1, r5
 80118b2:	4630      	mov	r0, r6
 80118b4:	f000 f93a 	bl	8011b2c <__swsetup_r>
 80118b8:	b170      	cbz	r0, 80118d8 <_vfiprintf_r+0x5c>
 80118ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118bc:	07dc      	lsls	r4, r3, #31
 80118be:	d504      	bpl.n	80118ca <_vfiprintf_r+0x4e>
 80118c0:	f04f 30ff 	mov.w	r0, #4294967295
 80118c4:	b01d      	add	sp, #116	; 0x74
 80118c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ca:	89ab      	ldrh	r3, [r5, #12]
 80118cc:	0598      	lsls	r0, r3, #22
 80118ce:	d4f7      	bmi.n	80118c0 <_vfiprintf_r+0x44>
 80118d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118d2:	f7fe f9cf 	bl	800fc74 <__retarget_lock_release_recursive>
 80118d6:	e7f3      	b.n	80118c0 <_vfiprintf_r+0x44>
 80118d8:	2300      	movs	r3, #0
 80118da:	9309      	str	r3, [sp, #36]	; 0x24
 80118dc:	2320      	movs	r3, #32
 80118de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80118e6:	2330      	movs	r3, #48	; 0x30
 80118e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011a9c <_vfiprintf_r+0x220>
 80118ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118f0:	f04f 0901 	mov.w	r9, #1
 80118f4:	4623      	mov	r3, r4
 80118f6:	469a      	mov	sl, r3
 80118f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118fc:	b10a      	cbz	r2, 8011902 <_vfiprintf_r+0x86>
 80118fe:	2a25      	cmp	r2, #37	; 0x25
 8011900:	d1f9      	bne.n	80118f6 <_vfiprintf_r+0x7a>
 8011902:	ebba 0b04 	subs.w	fp, sl, r4
 8011906:	d00b      	beq.n	8011920 <_vfiprintf_r+0xa4>
 8011908:	465b      	mov	r3, fp
 801190a:	4622      	mov	r2, r4
 801190c:	4629      	mov	r1, r5
 801190e:	4630      	mov	r0, r6
 8011910:	f7ff ffa2 	bl	8011858 <__sfputs_r>
 8011914:	3001      	adds	r0, #1
 8011916:	f000 80a9 	beq.w	8011a6c <_vfiprintf_r+0x1f0>
 801191a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801191c:	445a      	add	r2, fp
 801191e:	9209      	str	r2, [sp, #36]	; 0x24
 8011920:	f89a 3000 	ldrb.w	r3, [sl]
 8011924:	2b00      	cmp	r3, #0
 8011926:	f000 80a1 	beq.w	8011a6c <_vfiprintf_r+0x1f0>
 801192a:	2300      	movs	r3, #0
 801192c:	f04f 32ff 	mov.w	r2, #4294967295
 8011930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011934:	f10a 0a01 	add.w	sl, sl, #1
 8011938:	9304      	str	r3, [sp, #16]
 801193a:	9307      	str	r3, [sp, #28]
 801193c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011940:	931a      	str	r3, [sp, #104]	; 0x68
 8011942:	4654      	mov	r4, sl
 8011944:	2205      	movs	r2, #5
 8011946:	f814 1b01 	ldrb.w	r1, [r4], #1
 801194a:	4854      	ldr	r0, [pc, #336]	; (8011a9c <_vfiprintf_r+0x220>)
 801194c:	f7ee fc50 	bl	80001f0 <memchr>
 8011950:	9a04      	ldr	r2, [sp, #16]
 8011952:	b9d8      	cbnz	r0, 801198c <_vfiprintf_r+0x110>
 8011954:	06d1      	lsls	r1, r2, #27
 8011956:	bf44      	itt	mi
 8011958:	2320      	movmi	r3, #32
 801195a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801195e:	0713      	lsls	r3, r2, #28
 8011960:	bf44      	itt	mi
 8011962:	232b      	movmi	r3, #43	; 0x2b
 8011964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011968:	f89a 3000 	ldrb.w	r3, [sl]
 801196c:	2b2a      	cmp	r3, #42	; 0x2a
 801196e:	d015      	beq.n	801199c <_vfiprintf_r+0x120>
 8011970:	9a07      	ldr	r2, [sp, #28]
 8011972:	4654      	mov	r4, sl
 8011974:	2000      	movs	r0, #0
 8011976:	f04f 0c0a 	mov.w	ip, #10
 801197a:	4621      	mov	r1, r4
 801197c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011980:	3b30      	subs	r3, #48	; 0x30
 8011982:	2b09      	cmp	r3, #9
 8011984:	d94d      	bls.n	8011a22 <_vfiprintf_r+0x1a6>
 8011986:	b1b0      	cbz	r0, 80119b6 <_vfiprintf_r+0x13a>
 8011988:	9207      	str	r2, [sp, #28]
 801198a:	e014      	b.n	80119b6 <_vfiprintf_r+0x13a>
 801198c:	eba0 0308 	sub.w	r3, r0, r8
 8011990:	fa09 f303 	lsl.w	r3, r9, r3
 8011994:	4313      	orrs	r3, r2
 8011996:	9304      	str	r3, [sp, #16]
 8011998:	46a2      	mov	sl, r4
 801199a:	e7d2      	b.n	8011942 <_vfiprintf_r+0xc6>
 801199c:	9b03      	ldr	r3, [sp, #12]
 801199e:	1d19      	adds	r1, r3, #4
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	9103      	str	r1, [sp, #12]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	bfbb      	ittet	lt
 80119a8:	425b      	neglt	r3, r3
 80119aa:	f042 0202 	orrlt.w	r2, r2, #2
 80119ae:	9307      	strge	r3, [sp, #28]
 80119b0:	9307      	strlt	r3, [sp, #28]
 80119b2:	bfb8      	it	lt
 80119b4:	9204      	strlt	r2, [sp, #16]
 80119b6:	7823      	ldrb	r3, [r4, #0]
 80119b8:	2b2e      	cmp	r3, #46	; 0x2e
 80119ba:	d10c      	bne.n	80119d6 <_vfiprintf_r+0x15a>
 80119bc:	7863      	ldrb	r3, [r4, #1]
 80119be:	2b2a      	cmp	r3, #42	; 0x2a
 80119c0:	d134      	bne.n	8011a2c <_vfiprintf_r+0x1b0>
 80119c2:	9b03      	ldr	r3, [sp, #12]
 80119c4:	1d1a      	adds	r2, r3, #4
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	9203      	str	r2, [sp, #12]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	bfb8      	it	lt
 80119ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80119d2:	3402      	adds	r4, #2
 80119d4:	9305      	str	r3, [sp, #20]
 80119d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011aac <_vfiprintf_r+0x230>
 80119da:	7821      	ldrb	r1, [r4, #0]
 80119dc:	2203      	movs	r2, #3
 80119de:	4650      	mov	r0, sl
 80119e0:	f7ee fc06 	bl	80001f0 <memchr>
 80119e4:	b138      	cbz	r0, 80119f6 <_vfiprintf_r+0x17a>
 80119e6:	9b04      	ldr	r3, [sp, #16]
 80119e8:	eba0 000a 	sub.w	r0, r0, sl
 80119ec:	2240      	movs	r2, #64	; 0x40
 80119ee:	4082      	lsls	r2, r0
 80119f0:	4313      	orrs	r3, r2
 80119f2:	3401      	adds	r4, #1
 80119f4:	9304      	str	r3, [sp, #16]
 80119f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119fa:	4829      	ldr	r0, [pc, #164]	; (8011aa0 <_vfiprintf_r+0x224>)
 80119fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a00:	2206      	movs	r2, #6
 8011a02:	f7ee fbf5 	bl	80001f0 <memchr>
 8011a06:	2800      	cmp	r0, #0
 8011a08:	d03f      	beq.n	8011a8a <_vfiprintf_r+0x20e>
 8011a0a:	4b26      	ldr	r3, [pc, #152]	; (8011aa4 <_vfiprintf_r+0x228>)
 8011a0c:	bb1b      	cbnz	r3, 8011a56 <_vfiprintf_r+0x1da>
 8011a0e:	9b03      	ldr	r3, [sp, #12]
 8011a10:	3307      	adds	r3, #7
 8011a12:	f023 0307 	bic.w	r3, r3, #7
 8011a16:	3308      	adds	r3, #8
 8011a18:	9303      	str	r3, [sp, #12]
 8011a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a1c:	443b      	add	r3, r7
 8011a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011a20:	e768      	b.n	80118f4 <_vfiprintf_r+0x78>
 8011a22:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a26:	460c      	mov	r4, r1
 8011a28:	2001      	movs	r0, #1
 8011a2a:	e7a6      	b.n	801197a <_vfiprintf_r+0xfe>
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	3401      	adds	r4, #1
 8011a30:	9305      	str	r3, [sp, #20]
 8011a32:	4619      	mov	r1, r3
 8011a34:	f04f 0c0a 	mov.w	ip, #10
 8011a38:	4620      	mov	r0, r4
 8011a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a3e:	3a30      	subs	r2, #48	; 0x30
 8011a40:	2a09      	cmp	r2, #9
 8011a42:	d903      	bls.n	8011a4c <_vfiprintf_r+0x1d0>
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d0c6      	beq.n	80119d6 <_vfiprintf_r+0x15a>
 8011a48:	9105      	str	r1, [sp, #20]
 8011a4a:	e7c4      	b.n	80119d6 <_vfiprintf_r+0x15a>
 8011a4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a50:	4604      	mov	r4, r0
 8011a52:	2301      	movs	r3, #1
 8011a54:	e7f0      	b.n	8011a38 <_vfiprintf_r+0x1bc>
 8011a56:	ab03      	add	r3, sp, #12
 8011a58:	9300      	str	r3, [sp, #0]
 8011a5a:	462a      	mov	r2, r5
 8011a5c:	4b12      	ldr	r3, [pc, #72]	; (8011aa8 <_vfiprintf_r+0x22c>)
 8011a5e:	a904      	add	r1, sp, #16
 8011a60:	4630      	mov	r0, r6
 8011a62:	f7fd fb9d 	bl	800f1a0 <_printf_float>
 8011a66:	4607      	mov	r7, r0
 8011a68:	1c78      	adds	r0, r7, #1
 8011a6a:	d1d6      	bne.n	8011a1a <_vfiprintf_r+0x19e>
 8011a6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a6e:	07d9      	lsls	r1, r3, #31
 8011a70:	d405      	bmi.n	8011a7e <_vfiprintf_r+0x202>
 8011a72:	89ab      	ldrh	r3, [r5, #12]
 8011a74:	059a      	lsls	r2, r3, #22
 8011a76:	d402      	bmi.n	8011a7e <_vfiprintf_r+0x202>
 8011a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a7a:	f7fe f8fb 	bl	800fc74 <__retarget_lock_release_recursive>
 8011a7e:	89ab      	ldrh	r3, [r5, #12]
 8011a80:	065b      	lsls	r3, r3, #25
 8011a82:	f53f af1d 	bmi.w	80118c0 <_vfiprintf_r+0x44>
 8011a86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a88:	e71c      	b.n	80118c4 <_vfiprintf_r+0x48>
 8011a8a:	ab03      	add	r3, sp, #12
 8011a8c:	9300      	str	r3, [sp, #0]
 8011a8e:	462a      	mov	r2, r5
 8011a90:	4b05      	ldr	r3, [pc, #20]	; (8011aa8 <_vfiprintf_r+0x22c>)
 8011a92:	a904      	add	r1, sp, #16
 8011a94:	4630      	mov	r0, r6
 8011a96:	f7fd fe27 	bl	800f6e8 <_printf_i>
 8011a9a:	e7e4      	b.n	8011a66 <_vfiprintf_r+0x1ea>
 8011a9c:	08013b4c 	.word	0x08013b4c
 8011aa0:	08013b56 	.word	0x08013b56
 8011aa4:	0800f1a1 	.word	0x0800f1a1
 8011aa8:	08011859 	.word	0x08011859
 8011aac:	08013b52 	.word	0x08013b52

08011ab0 <__swbuf_r>:
 8011ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ab2:	460e      	mov	r6, r1
 8011ab4:	4614      	mov	r4, r2
 8011ab6:	4605      	mov	r5, r0
 8011ab8:	b118      	cbz	r0, 8011ac2 <__swbuf_r+0x12>
 8011aba:	6a03      	ldr	r3, [r0, #32]
 8011abc:	b90b      	cbnz	r3, 8011ac2 <__swbuf_r+0x12>
 8011abe:	f7fd ffc1 	bl	800fa44 <__sinit>
 8011ac2:	69a3      	ldr	r3, [r4, #24]
 8011ac4:	60a3      	str	r3, [r4, #8]
 8011ac6:	89a3      	ldrh	r3, [r4, #12]
 8011ac8:	071a      	lsls	r2, r3, #28
 8011aca:	d525      	bpl.n	8011b18 <__swbuf_r+0x68>
 8011acc:	6923      	ldr	r3, [r4, #16]
 8011ace:	b31b      	cbz	r3, 8011b18 <__swbuf_r+0x68>
 8011ad0:	6823      	ldr	r3, [r4, #0]
 8011ad2:	6922      	ldr	r2, [r4, #16]
 8011ad4:	1a98      	subs	r0, r3, r2
 8011ad6:	6963      	ldr	r3, [r4, #20]
 8011ad8:	b2f6      	uxtb	r6, r6
 8011ada:	4283      	cmp	r3, r0
 8011adc:	4637      	mov	r7, r6
 8011ade:	dc04      	bgt.n	8011aea <__swbuf_r+0x3a>
 8011ae0:	4621      	mov	r1, r4
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	f7ff fdac 	bl	8011640 <_fflush_r>
 8011ae8:	b9e0      	cbnz	r0, 8011b24 <__swbuf_r+0x74>
 8011aea:	68a3      	ldr	r3, [r4, #8]
 8011aec:	3b01      	subs	r3, #1
 8011aee:	60a3      	str	r3, [r4, #8]
 8011af0:	6823      	ldr	r3, [r4, #0]
 8011af2:	1c5a      	adds	r2, r3, #1
 8011af4:	6022      	str	r2, [r4, #0]
 8011af6:	701e      	strb	r6, [r3, #0]
 8011af8:	6962      	ldr	r2, [r4, #20]
 8011afa:	1c43      	adds	r3, r0, #1
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d004      	beq.n	8011b0a <__swbuf_r+0x5a>
 8011b00:	89a3      	ldrh	r3, [r4, #12]
 8011b02:	07db      	lsls	r3, r3, #31
 8011b04:	d506      	bpl.n	8011b14 <__swbuf_r+0x64>
 8011b06:	2e0a      	cmp	r6, #10
 8011b08:	d104      	bne.n	8011b14 <__swbuf_r+0x64>
 8011b0a:	4621      	mov	r1, r4
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	f7ff fd97 	bl	8011640 <_fflush_r>
 8011b12:	b938      	cbnz	r0, 8011b24 <__swbuf_r+0x74>
 8011b14:	4638      	mov	r0, r7
 8011b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b18:	4621      	mov	r1, r4
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	f000 f806 	bl	8011b2c <__swsetup_r>
 8011b20:	2800      	cmp	r0, #0
 8011b22:	d0d5      	beq.n	8011ad0 <__swbuf_r+0x20>
 8011b24:	f04f 37ff 	mov.w	r7, #4294967295
 8011b28:	e7f4      	b.n	8011b14 <__swbuf_r+0x64>
	...

08011b2c <__swsetup_r>:
 8011b2c:	b538      	push	{r3, r4, r5, lr}
 8011b2e:	4b2a      	ldr	r3, [pc, #168]	; (8011bd8 <__swsetup_r+0xac>)
 8011b30:	4605      	mov	r5, r0
 8011b32:	6818      	ldr	r0, [r3, #0]
 8011b34:	460c      	mov	r4, r1
 8011b36:	b118      	cbz	r0, 8011b40 <__swsetup_r+0x14>
 8011b38:	6a03      	ldr	r3, [r0, #32]
 8011b3a:	b90b      	cbnz	r3, 8011b40 <__swsetup_r+0x14>
 8011b3c:	f7fd ff82 	bl	800fa44 <__sinit>
 8011b40:	89a3      	ldrh	r3, [r4, #12]
 8011b42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b46:	0718      	lsls	r0, r3, #28
 8011b48:	d422      	bmi.n	8011b90 <__swsetup_r+0x64>
 8011b4a:	06d9      	lsls	r1, r3, #27
 8011b4c:	d407      	bmi.n	8011b5e <__swsetup_r+0x32>
 8011b4e:	2309      	movs	r3, #9
 8011b50:	602b      	str	r3, [r5, #0]
 8011b52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011b56:	81a3      	strh	r3, [r4, #12]
 8011b58:	f04f 30ff 	mov.w	r0, #4294967295
 8011b5c:	e034      	b.n	8011bc8 <__swsetup_r+0x9c>
 8011b5e:	0758      	lsls	r0, r3, #29
 8011b60:	d512      	bpl.n	8011b88 <__swsetup_r+0x5c>
 8011b62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b64:	b141      	cbz	r1, 8011b78 <__swsetup_r+0x4c>
 8011b66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b6a:	4299      	cmp	r1, r3
 8011b6c:	d002      	beq.n	8011b74 <__swsetup_r+0x48>
 8011b6e:	4628      	mov	r0, r5
 8011b70:	f7fe ff0c 	bl	801098c <_free_r>
 8011b74:	2300      	movs	r3, #0
 8011b76:	6363      	str	r3, [r4, #52]	; 0x34
 8011b78:	89a3      	ldrh	r3, [r4, #12]
 8011b7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b7e:	81a3      	strh	r3, [r4, #12]
 8011b80:	2300      	movs	r3, #0
 8011b82:	6063      	str	r3, [r4, #4]
 8011b84:	6923      	ldr	r3, [r4, #16]
 8011b86:	6023      	str	r3, [r4, #0]
 8011b88:	89a3      	ldrh	r3, [r4, #12]
 8011b8a:	f043 0308 	orr.w	r3, r3, #8
 8011b8e:	81a3      	strh	r3, [r4, #12]
 8011b90:	6923      	ldr	r3, [r4, #16]
 8011b92:	b94b      	cbnz	r3, 8011ba8 <__swsetup_r+0x7c>
 8011b94:	89a3      	ldrh	r3, [r4, #12]
 8011b96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b9e:	d003      	beq.n	8011ba8 <__swsetup_r+0x7c>
 8011ba0:	4621      	mov	r1, r4
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	f000 f884 	bl	8011cb0 <__smakebuf_r>
 8011ba8:	89a0      	ldrh	r0, [r4, #12]
 8011baa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011bae:	f010 0301 	ands.w	r3, r0, #1
 8011bb2:	d00a      	beq.n	8011bca <__swsetup_r+0x9e>
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	60a3      	str	r3, [r4, #8]
 8011bb8:	6963      	ldr	r3, [r4, #20]
 8011bba:	425b      	negs	r3, r3
 8011bbc:	61a3      	str	r3, [r4, #24]
 8011bbe:	6923      	ldr	r3, [r4, #16]
 8011bc0:	b943      	cbnz	r3, 8011bd4 <__swsetup_r+0xa8>
 8011bc2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011bc6:	d1c4      	bne.n	8011b52 <__swsetup_r+0x26>
 8011bc8:	bd38      	pop	{r3, r4, r5, pc}
 8011bca:	0781      	lsls	r1, r0, #30
 8011bcc:	bf58      	it	pl
 8011bce:	6963      	ldrpl	r3, [r4, #20]
 8011bd0:	60a3      	str	r3, [r4, #8]
 8011bd2:	e7f4      	b.n	8011bbe <__swsetup_r+0x92>
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	e7f7      	b.n	8011bc8 <__swsetup_r+0x9c>
 8011bd8:	200001d4 	.word	0x200001d4

08011bdc <_raise_r>:
 8011bdc:	291f      	cmp	r1, #31
 8011bde:	b538      	push	{r3, r4, r5, lr}
 8011be0:	4604      	mov	r4, r0
 8011be2:	460d      	mov	r5, r1
 8011be4:	d904      	bls.n	8011bf0 <_raise_r+0x14>
 8011be6:	2316      	movs	r3, #22
 8011be8:	6003      	str	r3, [r0, #0]
 8011bea:	f04f 30ff 	mov.w	r0, #4294967295
 8011bee:	bd38      	pop	{r3, r4, r5, pc}
 8011bf0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011bf2:	b112      	cbz	r2, 8011bfa <_raise_r+0x1e>
 8011bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bf8:	b94b      	cbnz	r3, 8011c0e <_raise_r+0x32>
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	f000 f830 	bl	8011c60 <_getpid_r>
 8011c00:	462a      	mov	r2, r5
 8011c02:	4601      	mov	r1, r0
 8011c04:	4620      	mov	r0, r4
 8011c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c0a:	f000 b817 	b.w	8011c3c <_kill_r>
 8011c0e:	2b01      	cmp	r3, #1
 8011c10:	d00a      	beq.n	8011c28 <_raise_r+0x4c>
 8011c12:	1c59      	adds	r1, r3, #1
 8011c14:	d103      	bne.n	8011c1e <_raise_r+0x42>
 8011c16:	2316      	movs	r3, #22
 8011c18:	6003      	str	r3, [r0, #0]
 8011c1a:	2001      	movs	r0, #1
 8011c1c:	e7e7      	b.n	8011bee <_raise_r+0x12>
 8011c1e:	2400      	movs	r4, #0
 8011c20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011c24:	4628      	mov	r0, r5
 8011c26:	4798      	blx	r3
 8011c28:	2000      	movs	r0, #0
 8011c2a:	e7e0      	b.n	8011bee <_raise_r+0x12>

08011c2c <raise>:
 8011c2c:	4b02      	ldr	r3, [pc, #8]	; (8011c38 <raise+0xc>)
 8011c2e:	4601      	mov	r1, r0
 8011c30:	6818      	ldr	r0, [r3, #0]
 8011c32:	f7ff bfd3 	b.w	8011bdc <_raise_r>
 8011c36:	bf00      	nop
 8011c38:	200001d4 	.word	0x200001d4

08011c3c <_kill_r>:
 8011c3c:	b538      	push	{r3, r4, r5, lr}
 8011c3e:	4d07      	ldr	r5, [pc, #28]	; (8011c5c <_kill_r+0x20>)
 8011c40:	2300      	movs	r3, #0
 8011c42:	4604      	mov	r4, r0
 8011c44:	4608      	mov	r0, r1
 8011c46:	4611      	mov	r1, r2
 8011c48:	602b      	str	r3, [r5, #0]
 8011c4a:	f7ef fcdd 	bl	8001608 <_kill>
 8011c4e:	1c43      	adds	r3, r0, #1
 8011c50:	d102      	bne.n	8011c58 <_kill_r+0x1c>
 8011c52:	682b      	ldr	r3, [r5, #0]
 8011c54:	b103      	cbz	r3, 8011c58 <_kill_r+0x1c>
 8011c56:	6023      	str	r3, [r4, #0]
 8011c58:	bd38      	pop	{r3, r4, r5, pc}
 8011c5a:	bf00      	nop
 8011c5c:	20006d68 	.word	0x20006d68

08011c60 <_getpid_r>:
 8011c60:	f7ef bcca 	b.w	80015f8 <_getpid>

08011c64 <__swhatbuf_r>:
 8011c64:	b570      	push	{r4, r5, r6, lr}
 8011c66:	460c      	mov	r4, r1
 8011c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c6c:	2900      	cmp	r1, #0
 8011c6e:	b096      	sub	sp, #88	; 0x58
 8011c70:	4615      	mov	r5, r2
 8011c72:	461e      	mov	r6, r3
 8011c74:	da0d      	bge.n	8011c92 <__swhatbuf_r+0x2e>
 8011c76:	89a3      	ldrh	r3, [r4, #12]
 8011c78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011c7c:	f04f 0100 	mov.w	r1, #0
 8011c80:	bf0c      	ite	eq
 8011c82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011c86:	2340      	movne	r3, #64	; 0x40
 8011c88:	2000      	movs	r0, #0
 8011c8a:	6031      	str	r1, [r6, #0]
 8011c8c:	602b      	str	r3, [r5, #0]
 8011c8e:	b016      	add	sp, #88	; 0x58
 8011c90:	bd70      	pop	{r4, r5, r6, pc}
 8011c92:	466a      	mov	r2, sp
 8011c94:	f000 f848 	bl	8011d28 <_fstat_r>
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	dbec      	blt.n	8011c76 <__swhatbuf_r+0x12>
 8011c9c:	9901      	ldr	r1, [sp, #4]
 8011c9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011ca2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011ca6:	4259      	negs	r1, r3
 8011ca8:	4159      	adcs	r1, r3
 8011caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011cae:	e7eb      	b.n	8011c88 <__swhatbuf_r+0x24>

08011cb0 <__smakebuf_r>:
 8011cb0:	898b      	ldrh	r3, [r1, #12]
 8011cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011cb4:	079d      	lsls	r5, r3, #30
 8011cb6:	4606      	mov	r6, r0
 8011cb8:	460c      	mov	r4, r1
 8011cba:	d507      	bpl.n	8011ccc <__smakebuf_r+0x1c>
 8011cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011cc0:	6023      	str	r3, [r4, #0]
 8011cc2:	6123      	str	r3, [r4, #16]
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	6163      	str	r3, [r4, #20]
 8011cc8:	b002      	add	sp, #8
 8011cca:	bd70      	pop	{r4, r5, r6, pc}
 8011ccc:	ab01      	add	r3, sp, #4
 8011cce:	466a      	mov	r2, sp
 8011cd0:	f7ff ffc8 	bl	8011c64 <__swhatbuf_r>
 8011cd4:	9900      	ldr	r1, [sp, #0]
 8011cd6:	4605      	mov	r5, r0
 8011cd8:	4630      	mov	r0, r6
 8011cda:	f7fe fecb 	bl	8010a74 <_malloc_r>
 8011cde:	b948      	cbnz	r0, 8011cf4 <__smakebuf_r+0x44>
 8011ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ce4:	059a      	lsls	r2, r3, #22
 8011ce6:	d4ef      	bmi.n	8011cc8 <__smakebuf_r+0x18>
 8011ce8:	f023 0303 	bic.w	r3, r3, #3
 8011cec:	f043 0302 	orr.w	r3, r3, #2
 8011cf0:	81a3      	strh	r3, [r4, #12]
 8011cf2:	e7e3      	b.n	8011cbc <__smakebuf_r+0xc>
 8011cf4:	89a3      	ldrh	r3, [r4, #12]
 8011cf6:	6020      	str	r0, [r4, #0]
 8011cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cfc:	81a3      	strh	r3, [r4, #12]
 8011cfe:	9b00      	ldr	r3, [sp, #0]
 8011d00:	6163      	str	r3, [r4, #20]
 8011d02:	9b01      	ldr	r3, [sp, #4]
 8011d04:	6120      	str	r0, [r4, #16]
 8011d06:	b15b      	cbz	r3, 8011d20 <__smakebuf_r+0x70>
 8011d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	f000 f81d 	bl	8011d4c <_isatty_r>
 8011d12:	b128      	cbz	r0, 8011d20 <__smakebuf_r+0x70>
 8011d14:	89a3      	ldrh	r3, [r4, #12]
 8011d16:	f023 0303 	bic.w	r3, r3, #3
 8011d1a:	f043 0301 	orr.w	r3, r3, #1
 8011d1e:	81a3      	strh	r3, [r4, #12]
 8011d20:	89a3      	ldrh	r3, [r4, #12]
 8011d22:	431d      	orrs	r5, r3
 8011d24:	81a5      	strh	r5, [r4, #12]
 8011d26:	e7cf      	b.n	8011cc8 <__smakebuf_r+0x18>

08011d28 <_fstat_r>:
 8011d28:	b538      	push	{r3, r4, r5, lr}
 8011d2a:	4d07      	ldr	r5, [pc, #28]	; (8011d48 <_fstat_r+0x20>)
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	4604      	mov	r4, r0
 8011d30:	4608      	mov	r0, r1
 8011d32:	4611      	mov	r1, r2
 8011d34:	602b      	str	r3, [r5, #0]
 8011d36:	f7ef fcc6 	bl	80016c6 <_fstat>
 8011d3a:	1c43      	adds	r3, r0, #1
 8011d3c:	d102      	bne.n	8011d44 <_fstat_r+0x1c>
 8011d3e:	682b      	ldr	r3, [r5, #0]
 8011d40:	b103      	cbz	r3, 8011d44 <_fstat_r+0x1c>
 8011d42:	6023      	str	r3, [r4, #0]
 8011d44:	bd38      	pop	{r3, r4, r5, pc}
 8011d46:	bf00      	nop
 8011d48:	20006d68 	.word	0x20006d68

08011d4c <_isatty_r>:
 8011d4c:	b538      	push	{r3, r4, r5, lr}
 8011d4e:	4d06      	ldr	r5, [pc, #24]	; (8011d68 <_isatty_r+0x1c>)
 8011d50:	2300      	movs	r3, #0
 8011d52:	4604      	mov	r4, r0
 8011d54:	4608      	mov	r0, r1
 8011d56:	602b      	str	r3, [r5, #0]
 8011d58:	f7ef fcc5 	bl	80016e6 <_isatty>
 8011d5c:	1c43      	adds	r3, r0, #1
 8011d5e:	d102      	bne.n	8011d66 <_isatty_r+0x1a>
 8011d60:	682b      	ldr	r3, [r5, #0]
 8011d62:	b103      	cbz	r3, 8011d66 <_isatty_r+0x1a>
 8011d64:	6023      	str	r3, [r4, #0]
 8011d66:	bd38      	pop	{r3, r4, r5, pc}
 8011d68:	20006d68 	.word	0x20006d68

08011d6c <_init>:
 8011d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d6e:	bf00      	nop
 8011d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d72:	bc08      	pop	{r3}
 8011d74:	469e      	mov	lr, r3
 8011d76:	4770      	bx	lr

08011d78 <_fini>:
 8011d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d7a:	bf00      	nop
 8011d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d7e:	bc08      	pop	{r3}
 8011d80:	469e      	mov	lr, r3
 8011d82:	4770      	bx	lr
